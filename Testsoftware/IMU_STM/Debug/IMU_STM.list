
IMU_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009884  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  08009948  08009948  00019948  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a018  0800a018  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a018  0800a018  0001a018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a020  0800a020  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a024  0800a024  0001a024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  200001dc  0800a204  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000031c  0800a204  0002031c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca73  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf0  00000000  00000000  0002cc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  0002e968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ddd  00000000  00000000  0002fe30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e10c  00000000  00000000  00044c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007af3a  00000000  00000000  00052d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cdc53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003974  00000000  00000000  000cdca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800992c 	.word	0x0800992c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	0800992c 	.word	0x0800992c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fc23 	bl	8001c88 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fb73 	bl	8001b38 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fc15 	bl	8001c88 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fc0b 	bl	8001c88 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fb9b 	bl	8001bbc <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fb91 	bl	8001bbc <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fb57 	bl	8000b64 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fae3 	bl	8000a8c <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fb49 	bl	8000b64 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fb3f 	bl	8000b64 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faef 	bl	8000ad8 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae5 	bl	8000ad8 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 fb50 	bl	8002c7c <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 fb4b 	bl	8002c7c <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	469b      	mov	fp, r3
 80005ee:	d433      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005f0:	465a      	mov	r2, fp
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83a      	bhi.n	800067a <__udivmoddi4+0xc2>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e078      	b.n	80006fc <__udivmoddi4+0x144>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e075      	b.n	8000702 <__udivmoddi4+0x14a>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e028      	b.n	8000682 <__udivmoddi4+0xca>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	4652      	mov	r2, sl
 8000660:	40da      	lsrs	r2, r3
 8000662:	4641      	mov	r1, r8
 8000664:	0013      	movs	r3, r2
 8000666:	464a      	mov	r2, r9
 8000668:	408a      	lsls	r2, r1
 800066a:	0017      	movs	r7, r2
 800066c:	4642      	mov	r2, r8
 800066e:	431f      	orrs	r7, r3
 8000670:	4653      	mov	r3, sl
 8000672:	4093      	lsls	r3, r2
 8000674:	001e      	movs	r6, r3
 8000676:	42af      	cmp	r7, r5
 8000678:	d9c4      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067a:	2200      	movs	r2, #0
 800067c:	2300      	movs	r3, #0
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0d9      	beq.n	800063c <__udivmoddi4+0x84>
 8000688:	07fb      	lsls	r3, r7, #31
 800068a:	0872      	lsrs	r2, r6, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4646      	mov	r6, r8
 8000690:	087b      	lsrs	r3, r7, #1
 8000692:	e00e      	b.n	80006b2 <__udivmoddi4+0xfa>
 8000694:	42ab      	cmp	r3, r5
 8000696:	d101      	bne.n	800069c <__udivmoddi4+0xe4>
 8000698:	42a2      	cmp	r2, r4
 800069a:	d80c      	bhi.n	80006b6 <__udivmoddi4+0xfe>
 800069c:	1aa4      	subs	r4, r4, r2
 800069e:	419d      	sbcs	r5, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	1924      	adds	r4, r4, r4
 80006a4:	416d      	adcs	r5, r5
 80006a6:	2100      	movs	r1, #0
 80006a8:	3e01      	subs	r6, #1
 80006aa:	1824      	adds	r4, r4, r0
 80006ac:	414d      	adcs	r5, r1
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d006      	beq.n	80006c0 <__udivmoddi4+0x108>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d9ee      	bls.n	8000694 <__udivmoddi4+0xdc>
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1924      	adds	r4, r4, r4
 80006ba:	416d      	adcs	r5, r5
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d1f8      	bne.n	80006b2 <__udivmoddi4+0xfa>
 80006c0:	9800      	ldr	r0, [sp, #0]
 80006c2:	9901      	ldr	r1, [sp, #4]
 80006c4:	465b      	mov	r3, fp
 80006c6:	1900      	adds	r0, r0, r4
 80006c8:	4169      	adcs	r1, r5
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db24      	blt.n	8000718 <__udivmoddi4+0x160>
 80006ce:	002b      	movs	r3, r5
 80006d0:	465a      	mov	r2, fp
 80006d2:	4644      	mov	r4, r8
 80006d4:	40d3      	lsrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db2a      	blt.n	800073a <__udivmoddi4+0x182>
 80006e4:	0026      	movs	r6, r4
 80006e6:	409e      	lsls	r6, r3
 80006e8:	0033      	movs	r3, r6
 80006ea:	0026      	movs	r6, r4
 80006ec:	4647      	mov	r7, r8
 80006ee:	40be      	lsls	r6, r7
 80006f0:	0032      	movs	r2, r6
 80006f2:	1a80      	subs	r0, r0, r2
 80006f4:	4199      	sbcs	r1, r3
 80006f6:	9000      	str	r0, [sp, #0]
 80006f8:	9101      	str	r1, [sp, #4]
 80006fa:	e79f      	b.n	800063c <__udivmoddi4+0x84>
 80006fc:	42a3      	cmp	r3, r4
 80006fe:	d8bc      	bhi.n	800067a <__udivmoddi4+0xc2>
 8000700:	e783      	b.n	800060a <__udivmoddi4+0x52>
 8000702:	4642      	mov	r2, r8
 8000704:	2320      	movs	r3, #32
 8000706:	2100      	movs	r1, #0
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	2200      	movs	r2, #0
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	40da      	lsrs	r2, r3
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	e786      	b.n	8000626 <__udivmoddi4+0x6e>
 8000718:	4642      	mov	r2, r8
 800071a:	2320      	movs	r3, #32
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	002a      	movs	r2, r5
 8000720:	4646      	mov	r6, r8
 8000722:	409a      	lsls	r2, r3
 8000724:	0023      	movs	r3, r4
 8000726:	40f3      	lsrs	r3, r6
 8000728:	4644      	mov	r4, r8
 800072a:	4313      	orrs	r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	40e2      	lsrs	r2, r4
 8000730:	001c      	movs	r4, r3
 8000732:	465b      	mov	r3, fp
 8000734:	0015      	movs	r5, r2
 8000736:	2b00      	cmp	r3, #0
 8000738:	dad4      	bge.n	80006e4 <__udivmoddi4+0x12c>
 800073a:	4642      	mov	r2, r8
 800073c:	002f      	movs	r7, r5
 800073e:	2320      	movs	r3, #32
 8000740:	0026      	movs	r6, r4
 8000742:	4097      	lsls	r7, r2
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	40de      	lsrs	r6, r3
 8000748:	003b      	movs	r3, r7
 800074a:	4333      	orrs	r3, r6
 800074c:	e7cd      	b.n	80006ea <__udivmoddi4+0x132>
 800074e:	46c0      	nop			; (mov r8, r8)

08000750 <__aeabi_fadd>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	46c6      	mov	lr, r8
 8000754:	0243      	lsls	r3, r0, #9
 8000756:	0a5b      	lsrs	r3, r3, #9
 8000758:	024e      	lsls	r6, r1, #9
 800075a:	0045      	lsls	r5, r0, #1
 800075c:	004f      	lsls	r7, r1, #1
 800075e:	00da      	lsls	r2, r3, #3
 8000760:	0fc4      	lsrs	r4, r0, #31
 8000762:	469c      	mov	ip, r3
 8000764:	0a70      	lsrs	r0, r6, #9
 8000766:	4690      	mov	r8, r2
 8000768:	b500      	push	{lr}
 800076a:	0e2d      	lsrs	r5, r5, #24
 800076c:	0e3f      	lsrs	r7, r7, #24
 800076e:	0fc9      	lsrs	r1, r1, #31
 8000770:	09b6      	lsrs	r6, r6, #6
 8000772:	428c      	cmp	r4, r1
 8000774:	d04b      	beq.n	800080e <__aeabi_fadd+0xbe>
 8000776:	1bea      	subs	r2, r5, r7
 8000778:	2a00      	cmp	r2, #0
 800077a:	dd36      	ble.n	80007ea <__aeabi_fadd+0x9a>
 800077c:	2f00      	cmp	r7, #0
 800077e:	d061      	beq.n	8000844 <__aeabi_fadd+0xf4>
 8000780:	2dff      	cmp	r5, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x36>
 8000784:	e0ad      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	04db      	lsls	r3, r3, #19
 800078a:	431e      	orrs	r6, r3
 800078c:	2a1b      	cmp	r2, #27
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fadd+0x42>
 8000790:	e0d3      	b.n	800093a <__aeabi_fadd+0x1ea>
 8000792:	2001      	movs	r0, #1
 8000794:	4643      	mov	r3, r8
 8000796:	1a18      	subs	r0, r3, r0
 8000798:	0143      	lsls	r3, r0, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fadd+0x4e>
 800079c:	e08c      	b.n	80008b8 <__aeabi_fadd+0x168>
 800079e:	0180      	lsls	r0, r0, #6
 80007a0:	0987      	lsrs	r7, r0, #6
 80007a2:	0038      	movs	r0, r7
 80007a4:	f002 fa4c 	bl	8002c40 <__clzsi2>
 80007a8:	3805      	subs	r0, #5
 80007aa:	4087      	lsls	r7, r0
 80007ac:	4285      	cmp	r5, r0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fadd+0x62>
 80007b0:	e0b6      	b.n	8000920 <__aeabi_fadd+0x1d0>
 80007b2:	1a2d      	subs	r5, r5, r0
 80007b4:	48b3      	ldr	r0, [pc, #716]	; (8000a84 <__aeabi_fadd+0x334>)
 80007b6:	4038      	ands	r0, r7
 80007b8:	0743      	lsls	r3, r0, #29
 80007ba:	d004      	beq.n	80007c6 <__aeabi_fadd+0x76>
 80007bc:	230f      	movs	r3, #15
 80007be:	4003      	ands	r3, r0
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fadd+0x76>
 80007c4:	3004      	adds	r0, #4
 80007c6:	0143      	lsls	r3, r0, #5
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fadd+0x7c>
 80007ca:	e078      	b.n	80008be <__aeabi_fadd+0x16e>
 80007cc:	1c6a      	adds	r2, r5, #1
 80007ce:	2dfe      	cmp	r5, #254	; 0xfe
 80007d0:	d065      	beq.n	800089e <__aeabi_fadd+0x14e>
 80007d2:	0180      	lsls	r0, r0, #6
 80007d4:	0a43      	lsrs	r3, r0, #9
 80007d6:	469c      	mov	ip, r3
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	4663      	mov	r3, ip
 80007dc:	05d0      	lsls	r0, r2, #23
 80007de:	4318      	orrs	r0, r3
 80007e0:	07e4      	lsls	r4, r4, #31
 80007e2:	4320      	orrs	r0, r4
 80007e4:	bc80      	pop	{r7}
 80007e6:	46b8      	mov	r8, r7
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d035      	beq.n	800085a <__aeabi_fadd+0x10a>
 80007ee:	1b7a      	subs	r2, r7, r5
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0xa6>
 80007f4:	e0af      	b.n	8000956 <__aeabi_fadd+0x206>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0xae>
 80007fc:	e0a7      	b.n	800094e <__aeabi_fadd+0x1fe>
 80007fe:	1e53      	subs	r3, r2, #1
 8000800:	2a01      	cmp	r2, #1
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xb6>
 8000804:	e12f      	b.n	8000a66 <__aeabi_fadd+0x316>
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d069      	beq.n	80008de <__aeabi_fadd+0x18e>
 800080a:	001a      	movs	r2, r3
 800080c:	e0aa      	b.n	8000964 <__aeabi_fadd+0x214>
 800080e:	1be9      	subs	r1, r5, r7
 8000810:	2900      	cmp	r1, #0
 8000812:	dd70      	ble.n	80008f6 <__aeabi_fadd+0x1a6>
 8000814:	2f00      	cmp	r7, #0
 8000816:	d037      	beq.n	8000888 <__aeabi_fadd+0x138>
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d062      	beq.n	80008e2 <__aeabi_fadd+0x192>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	431e      	orrs	r6, r3
 8000822:	291b      	cmp	r1, #27
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fadd+0xd8>
 8000826:	e0b0      	b.n	800098a <__aeabi_fadd+0x23a>
 8000828:	2001      	movs	r0, #1
 800082a:	4440      	add	r0, r8
 800082c:	0143      	lsls	r3, r0, #5
 800082e:	d543      	bpl.n	80008b8 <__aeabi_fadd+0x168>
 8000830:	3501      	adds	r5, #1
 8000832:	2dff      	cmp	r5, #255	; 0xff
 8000834:	d033      	beq.n	800089e <__aeabi_fadd+0x14e>
 8000836:	2301      	movs	r3, #1
 8000838:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <__aeabi_fadd+0x338>)
 800083a:	4003      	ands	r3, r0
 800083c:	0840      	lsrs	r0, r0, #1
 800083e:	4010      	ands	r0, r2
 8000840:	4318      	orrs	r0, r3
 8000842:	e7b9      	b.n	80007b8 <__aeabi_fadd+0x68>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e083      	b.n	8000952 <__aeabi_fadd+0x202>
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	2a01      	cmp	r2, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x102>
 8000850:	e0d8      	b.n	8000a04 <__aeabi_fadd+0x2b4>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d045      	beq.n	80008e2 <__aeabi_fadd+0x192>
 8000856:	000a      	movs	r2, r1
 8000858:	e798      	b.n	800078c <__aeabi_fadd+0x3c>
 800085a:	27fe      	movs	r7, #254	; 0xfe
 800085c:	1c6a      	adds	r2, r5, #1
 800085e:	4217      	tst	r7, r2
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x114>
 8000862:	e086      	b.n	8000972 <__aeabi_fadd+0x222>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d000      	beq.n	800086a <__aeabi_fadd+0x11a>
 8000868:	e0b7      	b.n	80009da <__aeabi_fadd+0x28a>
 800086a:	4643      	mov	r3, r8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x122>
 8000870:	e0f3      	b.n	8000a5a <__aeabi_fadd+0x30a>
 8000872:	2200      	movs	r2, #0
 8000874:	2e00      	cmp	r6, #0
 8000876:	d0b0      	beq.n	80007da <__aeabi_fadd+0x8a>
 8000878:	1b98      	subs	r0, r3, r6
 800087a:	0143      	lsls	r3, r0, #5
 800087c:	d400      	bmi.n	8000880 <__aeabi_fadd+0x130>
 800087e:	e0fa      	b.n	8000a76 <__aeabi_fadd+0x326>
 8000880:	4643      	mov	r3, r8
 8000882:	000c      	movs	r4, r1
 8000884:	1af0      	subs	r0, r6, r3
 8000886:	e797      	b.n	80007b8 <__aeabi_fadd+0x68>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x13e>
 800088c:	e0c8      	b.n	8000a20 <__aeabi_fadd+0x2d0>
 800088e:	1e4a      	subs	r2, r1, #1
 8000890:	2901      	cmp	r1, #1
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x146>
 8000894:	e0ae      	b.n	80009f4 <__aeabi_fadd+0x2a4>
 8000896:	29ff      	cmp	r1, #255	; 0xff
 8000898:	d023      	beq.n	80008e2 <__aeabi_fadd+0x192>
 800089a:	0011      	movs	r1, r2
 800089c:	e7c1      	b.n	8000822 <__aeabi_fadd+0xd2>
 800089e:	2300      	movs	r3, #0
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	469c      	mov	ip, r3
 80008a4:	e799      	b.n	80007da <__aeabi_fadd+0x8a>
 80008a6:	21fe      	movs	r1, #254	; 0xfe
 80008a8:	1c6a      	adds	r2, r5, #1
 80008aa:	4211      	tst	r1, r2
 80008ac:	d077      	beq.n	800099e <__aeabi_fadd+0x24e>
 80008ae:	2aff      	cmp	r2, #255	; 0xff
 80008b0:	d0f5      	beq.n	800089e <__aeabi_fadd+0x14e>
 80008b2:	0015      	movs	r5, r2
 80008b4:	4446      	add	r6, r8
 80008b6:	0870      	lsrs	r0, r6, #1
 80008b8:	0743      	lsls	r3, r0, #29
 80008ba:	d000      	beq.n	80008be <__aeabi_fadd+0x16e>
 80008bc:	e77e      	b.n	80007bc <__aeabi_fadd+0x6c>
 80008be:	08c3      	lsrs	r3, r0, #3
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d00e      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	469c      	mov	ip, r3
 80008ca:	b2ea      	uxtb	r2, r5
 80008cc:	e785      	b.n	80007da <__aeabi_fadd+0x8a>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d007      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	03d2      	lsls	r2, r2, #15
 80008d6:	4213      	tst	r3, r2
 80008d8:	d003      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008da:	4210      	tst	r0, r2
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fadd+0x192>
 80008de:	000c      	movs	r4, r1
 80008e0:	0003      	movs	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0db      	beq.n	800089e <__aeabi_fadd+0x14e>
 80008e6:	2080      	movs	r0, #128	; 0x80
 80008e8:	03c0      	lsls	r0, r0, #15
 80008ea:	4318      	orrs	r0, r3
 80008ec:	0240      	lsls	r0, r0, #9
 80008ee:	0a43      	lsrs	r3, r0, #9
 80008f0:	469c      	mov	ip, r3
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	e771      	b.n	80007da <__aeabi_fadd+0x8a>
 80008f6:	2900      	cmp	r1, #0
 80008f8:	d0d5      	beq.n	80008a6 <__aeabi_fadd+0x156>
 80008fa:	1b7a      	subs	r2, r7, r5
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d160      	bne.n	80009c2 <__aeabi_fadd+0x272>
 8000900:	4643      	mov	r3, r8
 8000902:	2b00      	cmp	r3, #0
 8000904:	d024      	beq.n	8000950 <__aeabi_fadd+0x200>
 8000906:	1e53      	subs	r3, r2, #1
 8000908:	2a01      	cmp	r2, #1
 800090a:	d073      	beq.n	80009f4 <__aeabi_fadd+0x2a4>
 800090c:	2aff      	cmp	r2, #255	; 0xff
 800090e:	d0e7      	beq.n	80008e0 <__aeabi_fadd+0x190>
 8000910:	001a      	movs	r2, r3
 8000912:	2a1b      	cmp	r2, #27
 8000914:	dc00      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 8000916:	e085      	b.n	8000a24 <__aeabi_fadd+0x2d4>
 8000918:	2001      	movs	r0, #1
 800091a:	003d      	movs	r5, r7
 800091c:	1980      	adds	r0, r0, r6
 800091e:	e785      	b.n	800082c <__aeabi_fadd+0xdc>
 8000920:	2320      	movs	r3, #32
 8000922:	003a      	movs	r2, r7
 8000924:	1b45      	subs	r5, r0, r5
 8000926:	0038      	movs	r0, r7
 8000928:	3501      	adds	r5, #1
 800092a:	40ea      	lsrs	r2, r5
 800092c:	1b5d      	subs	r5, r3, r5
 800092e:	40a8      	lsls	r0, r5
 8000930:	1e43      	subs	r3, r0, #1
 8000932:	4198      	sbcs	r0, r3
 8000934:	2500      	movs	r5, #0
 8000936:	4310      	orrs	r0, r2
 8000938:	e73e      	b.n	80007b8 <__aeabi_fadd+0x68>
 800093a:	2320      	movs	r3, #32
 800093c:	0030      	movs	r0, r6
 800093e:	1a9b      	subs	r3, r3, r2
 8000940:	0031      	movs	r1, r6
 8000942:	4098      	lsls	r0, r3
 8000944:	40d1      	lsrs	r1, r2
 8000946:	1e43      	subs	r3, r0, #1
 8000948:	4198      	sbcs	r0, r3
 800094a:	4308      	orrs	r0, r1
 800094c:	e722      	b.n	8000794 <__aeabi_fadd+0x44>
 800094e:	000c      	movs	r4, r1
 8000950:	0003      	movs	r3, r0
 8000952:	0015      	movs	r5, r2
 8000954:	e7b4      	b.n	80008c0 <__aeabi_fadd+0x170>
 8000956:	2fff      	cmp	r7, #255	; 0xff
 8000958:	d0c1      	beq.n	80008de <__aeabi_fadd+0x18e>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	4640      	mov	r0, r8
 800095e:	04db      	lsls	r3, r3, #19
 8000960:	4318      	orrs	r0, r3
 8000962:	4680      	mov	r8, r0
 8000964:	2a1b      	cmp	r2, #27
 8000966:	dd51      	ble.n	8000a0c <__aeabi_fadd+0x2bc>
 8000968:	2001      	movs	r0, #1
 800096a:	000c      	movs	r4, r1
 800096c:	003d      	movs	r5, r7
 800096e:	1a30      	subs	r0, r6, r0
 8000970:	e712      	b.n	8000798 <__aeabi_fadd+0x48>
 8000972:	4643      	mov	r3, r8
 8000974:	1b9f      	subs	r7, r3, r6
 8000976:	017b      	lsls	r3, r7, #5
 8000978:	d42b      	bmi.n	80009d2 <__aeabi_fadd+0x282>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fadd+0x230>
 800097e:	e710      	b.n	80007a2 <__aeabi_fadd+0x52>
 8000980:	2300      	movs	r3, #0
 8000982:	2400      	movs	r4, #0
 8000984:	2200      	movs	r2, #0
 8000986:	469c      	mov	ip, r3
 8000988:	e727      	b.n	80007da <__aeabi_fadd+0x8a>
 800098a:	2320      	movs	r3, #32
 800098c:	0032      	movs	r2, r6
 800098e:	0030      	movs	r0, r6
 8000990:	40ca      	lsrs	r2, r1
 8000992:	1a59      	subs	r1, r3, r1
 8000994:	4088      	lsls	r0, r1
 8000996:	1e43      	subs	r3, r0, #1
 8000998:	4198      	sbcs	r0, r3
 800099a:	4310      	orrs	r0, r2
 800099c:	e745      	b.n	800082a <__aeabi_fadd+0xda>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d14a      	bne.n	8000a38 <__aeabi_fadd+0x2e8>
 80009a2:	4643      	mov	r3, r8
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d063      	beq.n	8000a70 <__aeabi_fadd+0x320>
 80009a8:	2200      	movs	r2, #0
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e714      	b.n	80007da <__aeabi_fadd+0x8a>
 80009b0:	0030      	movs	r0, r6
 80009b2:	4440      	add	r0, r8
 80009b4:	0143      	lsls	r3, r0, #5
 80009b6:	d400      	bmi.n	80009ba <__aeabi_fadd+0x26a>
 80009b8:	e77e      	b.n	80008b8 <__aeabi_fadd+0x168>
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <__aeabi_fadd+0x334>)
 80009bc:	3501      	adds	r5, #1
 80009be:	4018      	ands	r0, r3
 80009c0:	e77a      	b.n	80008b8 <__aeabi_fadd+0x168>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d08c      	beq.n	80008e0 <__aeabi_fadd+0x190>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4641      	mov	r1, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4319      	orrs	r1, r3
 80009ce:	4688      	mov	r8, r1
 80009d0:	e79f      	b.n	8000912 <__aeabi_fadd+0x1c2>
 80009d2:	4643      	mov	r3, r8
 80009d4:	000c      	movs	r4, r1
 80009d6:	1af7      	subs	r7, r6, r3
 80009d8:	e6e3      	b.n	80007a2 <__aeabi_fadd+0x52>
 80009da:	4642      	mov	r2, r8
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x292>
 80009e0:	e775      	b.n	80008ce <__aeabi_fadd+0x17e>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fadd+0x298>
 80009e6:	e77a      	b.n	80008de <__aeabi_fadd+0x18e>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	2400      	movs	r4, #0
 80009ee:	469c      	mov	ip, r3
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	e6f2      	b.n	80007da <__aeabi_fadd+0x8a>
 80009f4:	0030      	movs	r0, r6
 80009f6:	4440      	add	r0, r8
 80009f8:	2501      	movs	r5, #1
 80009fa:	0143      	lsls	r3, r0, #5
 80009fc:	d400      	bmi.n	8000a00 <__aeabi_fadd+0x2b0>
 80009fe:	e75b      	b.n	80008b8 <__aeabi_fadd+0x168>
 8000a00:	2502      	movs	r5, #2
 8000a02:	e718      	b.n	8000836 <__aeabi_fadd+0xe6>
 8000a04:	4643      	mov	r3, r8
 8000a06:	2501      	movs	r5, #1
 8000a08:	1b98      	subs	r0, r3, r6
 8000a0a:	e6c5      	b.n	8000798 <__aeabi_fadd+0x48>
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	4644      	mov	r4, r8
 8000a10:	4640      	mov	r0, r8
 8000a12:	40d4      	lsrs	r4, r2
 8000a14:	1a9a      	subs	r2, r3, r2
 8000a16:	4090      	lsls	r0, r2
 8000a18:	1e43      	subs	r3, r0, #1
 8000a1a:	4198      	sbcs	r0, r3
 8000a1c:	4320      	orrs	r0, r4
 8000a1e:	e7a4      	b.n	800096a <__aeabi_fadd+0x21a>
 8000a20:	000d      	movs	r5, r1
 8000a22:	e74d      	b.n	80008c0 <__aeabi_fadd+0x170>
 8000a24:	2320      	movs	r3, #32
 8000a26:	4641      	mov	r1, r8
 8000a28:	4640      	mov	r0, r8
 8000a2a:	40d1      	lsrs	r1, r2
 8000a2c:	1a9a      	subs	r2, r3, r2
 8000a2e:	4090      	lsls	r0, r2
 8000a30:	1e43      	subs	r3, r0, #1
 8000a32:	4198      	sbcs	r0, r3
 8000a34:	4308      	orrs	r0, r1
 8000a36:	e770      	b.n	800091a <__aeabi_fadd+0x1ca>
 8000a38:	4642      	mov	r2, r8
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x2f0>
 8000a3e:	e74f      	b.n	80008e0 <__aeabi_fadd+0x190>
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fadd+0x2f6>
 8000a44:	e74d      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	4213      	tst	r3, r2
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fadd+0x300>
 8000a4e:	e748      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fadd+0x306>
 8000a54:	e745      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a56:	0003      	movs	r3, r0
 8000a58:	e743      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d090      	beq.n	8000980 <__aeabi_fadd+0x230>
 8000a5e:	000c      	movs	r4, r1
 8000a60:	4684      	mov	ip, r0
 8000a62:	2200      	movs	r2, #0
 8000a64:	e6b9      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a66:	4643      	mov	r3, r8
 8000a68:	000c      	movs	r4, r1
 8000a6a:	1af0      	subs	r0, r6, r3
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	e693      	b.n	8000798 <__aeabi_fadd+0x48>
 8000a70:	4684      	mov	ip, r0
 8000a72:	2200      	movs	r2, #0
 8000a74:	e6b1      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fadd+0x32c>
 8000a7a:	e71d      	b.n	80008b8 <__aeabi_fadd+0x168>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2400      	movs	r4, #0
 8000a80:	469c      	mov	ip, r3
 8000a82:	e6aa      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a84:	fbffffff 	.word	0xfbffffff
 8000a88:	7dffffff 	.word	0x7dffffff

08000a8c <__eqsf2>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	0042      	lsls	r2, r0, #1
 8000a90:	0245      	lsls	r5, r0, #9
 8000a92:	024e      	lsls	r6, r1, #9
 8000a94:	004c      	lsls	r4, r1, #1
 8000a96:	0fc3      	lsrs	r3, r0, #31
 8000a98:	0a6d      	lsrs	r5, r5, #9
 8000a9a:	2001      	movs	r0, #1
 8000a9c:	0e12      	lsrs	r2, r2, #24
 8000a9e:	0a76      	lsrs	r6, r6, #9
 8000aa0:	0e24      	lsrs	r4, r4, #24
 8000aa2:	0fc9      	lsrs	r1, r1, #31
 8000aa4:	2aff      	cmp	r2, #255	; 0xff
 8000aa6:	d006      	beq.n	8000ab6 <__eqsf2+0x2a>
 8000aa8:	2cff      	cmp	r4, #255	; 0xff
 8000aaa:	d003      	beq.n	8000ab4 <__eqsf2+0x28>
 8000aac:	42a2      	cmp	r2, r4
 8000aae:	d101      	bne.n	8000ab4 <__eqsf2+0x28>
 8000ab0:	42b5      	cmp	r5, r6
 8000ab2:	d006      	beq.n	8000ac2 <__eqsf2+0x36>
 8000ab4:	bd70      	pop	{r4, r5, r6, pc}
 8000ab6:	2d00      	cmp	r5, #0
 8000ab8:	d1fc      	bne.n	8000ab4 <__eqsf2+0x28>
 8000aba:	2cff      	cmp	r4, #255	; 0xff
 8000abc:	d1fa      	bne.n	8000ab4 <__eqsf2+0x28>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d1f8      	bne.n	8000ab4 <__eqsf2+0x28>
 8000ac2:	428b      	cmp	r3, r1
 8000ac4:	d006      	beq.n	8000ad4 <__eqsf2+0x48>
 8000ac6:	2001      	movs	r0, #1
 8000ac8:	2a00      	cmp	r2, #0
 8000aca:	d1f3      	bne.n	8000ab4 <__eqsf2+0x28>
 8000acc:	0028      	movs	r0, r5
 8000ace:	1e43      	subs	r3, r0, #1
 8000ad0:	4198      	sbcs	r0, r3
 8000ad2:	e7ef      	b.n	8000ab4 <__eqsf2+0x28>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7ed      	b.n	8000ab4 <__eqsf2+0x28>

08000ad8 <__gesf2>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	0042      	lsls	r2, r0, #1
 8000adc:	0245      	lsls	r5, r0, #9
 8000ade:	024e      	lsls	r6, r1, #9
 8000ae0:	004c      	lsls	r4, r1, #1
 8000ae2:	0fc3      	lsrs	r3, r0, #31
 8000ae4:	0a6d      	lsrs	r5, r5, #9
 8000ae6:	0e12      	lsrs	r2, r2, #24
 8000ae8:	0a76      	lsrs	r6, r6, #9
 8000aea:	0e24      	lsrs	r4, r4, #24
 8000aec:	0fc8      	lsrs	r0, r1, #31
 8000aee:	2aff      	cmp	r2, #255	; 0xff
 8000af0:	d01b      	beq.n	8000b2a <__gesf2+0x52>
 8000af2:	2cff      	cmp	r4, #255	; 0xff
 8000af4:	d00e      	beq.n	8000b14 <__gesf2+0x3c>
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	d11b      	bne.n	8000b32 <__gesf2+0x5a>
 8000afa:	2c00      	cmp	r4, #0
 8000afc:	d101      	bne.n	8000b02 <__gesf2+0x2a>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d01c      	beq.n	8000b3c <__gesf2+0x64>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d00c      	beq.n	8000b20 <__gesf2+0x48>
 8000b06:	4283      	cmp	r3, r0
 8000b08:	d01c      	beq.n	8000b44 <__gesf2+0x6c>
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	1e58      	subs	r0, r3, #1
 8000b0e:	4008      	ands	r0, r1
 8000b10:	3801      	subs	r0, #1
 8000b12:	bd70      	pop	{r4, r5, r6, pc}
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d122      	bne.n	8000b5e <__gesf2+0x86>
 8000b18:	2a00      	cmp	r2, #0
 8000b1a:	d1f4      	bne.n	8000b06 <__gesf2+0x2e>
 8000b1c:	2d00      	cmp	r5, #0
 8000b1e:	d1f2      	bne.n	8000b06 <__gesf2+0x2e>
 8000b20:	2800      	cmp	r0, #0
 8000b22:	d1f6      	bne.n	8000b12 <__gesf2+0x3a>
 8000b24:	2001      	movs	r0, #1
 8000b26:	4240      	negs	r0, r0
 8000b28:	e7f3      	b.n	8000b12 <__gesf2+0x3a>
 8000b2a:	2d00      	cmp	r5, #0
 8000b2c:	d117      	bne.n	8000b5e <__gesf2+0x86>
 8000b2e:	2cff      	cmp	r4, #255	; 0xff
 8000b30:	d0f0      	beq.n	8000b14 <__gesf2+0x3c>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d1e7      	bne.n	8000b06 <__gesf2+0x2e>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d1e5      	bne.n	8000b06 <__gesf2+0x2e>
 8000b3a:	e7e6      	b.n	8000b0a <__gesf2+0x32>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	2d00      	cmp	r5, #0
 8000b40:	d0e7      	beq.n	8000b12 <__gesf2+0x3a>
 8000b42:	e7e2      	b.n	8000b0a <__gesf2+0x32>
 8000b44:	42a2      	cmp	r2, r4
 8000b46:	dc05      	bgt.n	8000b54 <__gesf2+0x7c>
 8000b48:	dbea      	blt.n	8000b20 <__gesf2+0x48>
 8000b4a:	42b5      	cmp	r5, r6
 8000b4c:	d802      	bhi.n	8000b54 <__gesf2+0x7c>
 8000b4e:	d3e7      	bcc.n	8000b20 <__gesf2+0x48>
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7de      	b.n	8000b12 <__gesf2+0x3a>
 8000b54:	4243      	negs	r3, r0
 8000b56:	4158      	adcs	r0, r3
 8000b58:	0040      	lsls	r0, r0, #1
 8000b5a:	3801      	subs	r0, #1
 8000b5c:	e7d9      	b.n	8000b12 <__gesf2+0x3a>
 8000b5e:	2002      	movs	r0, #2
 8000b60:	4240      	negs	r0, r0
 8000b62:	e7d6      	b.n	8000b12 <__gesf2+0x3a>

08000b64 <__lesf2>:
 8000b64:	b570      	push	{r4, r5, r6, lr}
 8000b66:	0042      	lsls	r2, r0, #1
 8000b68:	0245      	lsls	r5, r0, #9
 8000b6a:	024e      	lsls	r6, r1, #9
 8000b6c:	004c      	lsls	r4, r1, #1
 8000b6e:	0fc3      	lsrs	r3, r0, #31
 8000b70:	0a6d      	lsrs	r5, r5, #9
 8000b72:	0e12      	lsrs	r2, r2, #24
 8000b74:	0a76      	lsrs	r6, r6, #9
 8000b76:	0e24      	lsrs	r4, r4, #24
 8000b78:	0fc8      	lsrs	r0, r1, #31
 8000b7a:	2aff      	cmp	r2, #255	; 0xff
 8000b7c:	d00b      	beq.n	8000b96 <__lesf2+0x32>
 8000b7e:	2cff      	cmp	r4, #255	; 0xff
 8000b80:	d00d      	beq.n	8000b9e <__lesf2+0x3a>
 8000b82:	2a00      	cmp	r2, #0
 8000b84:	d11f      	bne.n	8000bc6 <__lesf2+0x62>
 8000b86:	2c00      	cmp	r4, #0
 8000b88:	d116      	bne.n	8000bb8 <__lesf2+0x54>
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d114      	bne.n	8000bb8 <__lesf2+0x54>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d010      	beq.n	8000bb6 <__lesf2+0x52>
 8000b94:	e009      	b.n	8000baa <__lesf2+0x46>
 8000b96:	2d00      	cmp	r5, #0
 8000b98:	d10c      	bne.n	8000bb4 <__lesf2+0x50>
 8000b9a:	2cff      	cmp	r4, #255	; 0xff
 8000b9c:	d113      	bne.n	8000bc6 <__lesf2+0x62>
 8000b9e:	2e00      	cmp	r6, #0
 8000ba0:	d108      	bne.n	8000bb4 <__lesf2+0x50>
 8000ba2:	2a00      	cmp	r2, #0
 8000ba4:	d008      	beq.n	8000bb8 <__lesf2+0x54>
 8000ba6:	4283      	cmp	r3, r0
 8000ba8:	d012      	beq.n	8000bd0 <__lesf2+0x6c>
 8000baa:	2102      	movs	r1, #2
 8000bac:	1e58      	subs	r0, r3, #1
 8000bae:	4008      	ands	r0, r1
 8000bb0:	3801      	subs	r0, #1
 8000bb2:	e000      	b.n	8000bb6 <__lesf2+0x52>
 8000bb4:	2002      	movs	r0, #2
 8000bb6:	bd70      	pop	{r4, r5, r6, pc}
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d1f4      	bne.n	8000ba6 <__lesf2+0x42>
 8000bbc:	2800      	cmp	r0, #0
 8000bbe:	d1fa      	bne.n	8000bb6 <__lesf2+0x52>
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4240      	negs	r0, r0
 8000bc4:	e7f7      	b.n	8000bb6 <__lesf2+0x52>
 8000bc6:	2c00      	cmp	r4, #0
 8000bc8:	d1ed      	bne.n	8000ba6 <__lesf2+0x42>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	d1eb      	bne.n	8000ba6 <__lesf2+0x42>
 8000bce:	e7ec      	b.n	8000baa <__lesf2+0x46>
 8000bd0:	42a2      	cmp	r2, r4
 8000bd2:	dc05      	bgt.n	8000be0 <__lesf2+0x7c>
 8000bd4:	dbf2      	blt.n	8000bbc <__lesf2+0x58>
 8000bd6:	42b5      	cmp	r5, r6
 8000bd8:	d802      	bhi.n	8000be0 <__lesf2+0x7c>
 8000bda:	d3ef      	bcc.n	8000bbc <__lesf2+0x58>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e7ea      	b.n	8000bb6 <__lesf2+0x52>
 8000be0:	4243      	negs	r3, r0
 8000be2:	4158      	adcs	r0, r3
 8000be4:	0040      	lsls	r0, r0, #1
 8000be6:	3801      	subs	r0, #1
 8000be8:	e7e5      	b.n	8000bb6 <__lesf2+0x52>
 8000bea:	46c0      	nop			; (mov r8, r8)

08000bec <__aeabi_fmul>:
 8000bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bee:	464f      	mov	r7, r9
 8000bf0:	4646      	mov	r6, r8
 8000bf2:	46d6      	mov	lr, sl
 8000bf4:	0244      	lsls	r4, r0, #9
 8000bf6:	0045      	lsls	r5, r0, #1
 8000bf8:	b5c0      	push	{r6, r7, lr}
 8000bfa:	0a64      	lsrs	r4, r4, #9
 8000bfc:	1c0f      	adds	r7, r1, #0
 8000bfe:	0e2d      	lsrs	r5, r5, #24
 8000c00:	0fc6      	lsrs	r6, r0, #31
 8000c02:	2d00      	cmp	r5, #0
 8000c04:	d100      	bne.n	8000c08 <__aeabi_fmul+0x1c>
 8000c06:	e08d      	b.n	8000d24 <__aeabi_fmul+0x138>
 8000c08:	2dff      	cmp	r5, #255	; 0xff
 8000c0a:	d100      	bne.n	8000c0e <__aeabi_fmul+0x22>
 8000c0c:	e092      	b.n	8000d34 <__aeabi_fmul+0x148>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	2080      	movs	r0, #128	; 0x80
 8000c12:	4699      	mov	r9, r3
 8000c14:	469a      	mov	sl, r3
 8000c16:	00e4      	lsls	r4, r4, #3
 8000c18:	04c0      	lsls	r0, r0, #19
 8000c1a:	4304      	orrs	r4, r0
 8000c1c:	3d7f      	subs	r5, #127	; 0x7f
 8000c1e:	0278      	lsls	r0, r7, #9
 8000c20:	0a43      	lsrs	r3, r0, #9
 8000c22:	4698      	mov	r8, r3
 8000c24:	007b      	lsls	r3, r7, #1
 8000c26:	0e1b      	lsrs	r3, r3, #24
 8000c28:	0fff      	lsrs	r7, r7, #31
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d100      	bne.n	8000c30 <__aeabi_fmul+0x44>
 8000c2e:	e070      	b.n	8000d12 <__aeabi_fmul+0x126>
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d100      	bne.n	8000c36 <__aeabi_fmul+0x4a>
 8000c34:	e086      	b.n	8000d44 <__aeabi_fmul+0x158>
 8000c36:	4642      	mov	r2, r8
 8000c38:	00d0      	lsls	r0, r2, #3
 8000c3a:	2280      	movs	r2, #128	; 0x80
 8000c3c:	3b7f      	subs	r3, #127	; 0x7f
 8000c3e:	18ed      	adds	r5, r5, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	04d2      	lsls	r2, r2, #19
 8000c44:	4302      	orrs	r2, r0
 8000c46:	4690      	mov	r8, r2
 8000c48:	469c      	mov	ip, r3
 8000c4a:	0031      	movs	r1, r6
 8000c4c:	464b      	mov	r3, r9
 8000c4e:	4079      	eors	r1, r7
 8000c50:	1c68      	adds	r0, r5, #1
 8000c52:	2b0f      	cmp	r3, #15
 8000c54:	d81c      	bhi.n	8000c90 <__aeabi_fmul+0xa4>
 8000c56:	4a76      	ldr	r2, [pc, #472]	; (8000e30 <__aeabi_fmul+0x244>)
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	58d3      	ldr	r3, [r2, r3]
 8000c5c:	469f      	mov	pc, r3
 8000c5e:	0039      	movs	r1, r7
 8000c60:	4644      	mov	r4, r8
 8000c62:	46e2      	mov	sl, ip
 8000c64:	4653      	mov	r3, sl
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d00f      	beq.n	8000c8a <__aeabi_fmul+0x9e>
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_fmul+0x84>
 8000c6e:	e0d7      	b.n	8000e20 <__aeabi_fmul+0x234>
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d137      	bne.n	8000ce4 <__aeabi_fmul+0xf8>
 8000c74:	2000      	movs	r0, #0
 8000c76:	2400      	movs	r4, #0
 8000c78:	05c0      	lsls	r0, r0, #23
 8000c7a:	4320      	orrs	r0, r4
 8000c7c:	07c9      	lsls	r1, r1, #31
 8000c7e:	4308      	orrs	r0, r1
 8000c80:	bce0      	pop	{r5, r6, r7}
 8000c82:	46ba      	mov	sl, r7
 8000c84:	46b1      	mov	r9, r6
 8000c86:	46a8      	mov	r8, r5
 8000c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c8a:	20ff      	movs	r0, #255	; 0xff
 8000c8c:	2400      	movs	r4, #0
 8000c8e:	e7f3      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000c90:	0c26      	lsrs	r6, r4, #16
 8000c92:	0424      	lsls	r4, r4, #16
 8000c94:	0c22      	lsrs	r2, r4, #16
 8000c96:	4644      	mov	r4, r8
 8000c98:	0424      	lsls	r4, r4, #16
 8000c9a:	0c24      	lsrs	r4, r4, #16
 8000c9c:	4643      	mov	r3, r8
 8000c9e:	0027      	movs	r7, r4
 8000ca0:	0c1b      	lsrs	r3, r3, #16
 8000ca2:	4357      	muls	r7, r2
 8000ca4:	4374      	muls	r4, r6
 8000ca6:	435a      	muls	r2, r3
 8000ca8:	435e      	muls	r6, r3
 8000caa:	1912      	adds	r2, r2, r4
 8000cac:	0c3b      	lsrs	r3, r7, #16
 8000cae:	189b      	adds	r3, r3, r2
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	d903      	bls.n	8000cbc <__aeabi_fmul+0xd0>
 8000cb4:	2280      	movs	r2, #128	; 0x80
 8000cb6:	0252      	lsls	r2, r2, #9
 8000cb8:	4694      	mov	ip, r2
 8000cba:	4466      	add	r6, ip
 8000cbc:	043f      	lsls	r7, r7, #16
 8000cbe:	041a      	lsls	r2, r3, #16
 8000cc0:	0c3f      	lsrs	r7, r7, #16
 8000cc2:	19d2      	adds	r2, r2, r7
 8000cc4:	0194      	lsls	r4, r2, #6
 8000cc6:	1e67      	subs	r7, r4, #1
 8000cc8:	41bc      	sbcs	r4, r7
 8000cca:	0c1b      	lsrs	r3, r3, #16
 8000ccc:	0e92      	lsrs	r2, r2, #26
 8000cce:	199b      	adds	r3, r3, r6
 8000cd0:	4314      	orrs	r4, r2
 8000cd2:	019b      	lsls	r3, r3, #6
 8000cd4:	431c      	orrs	r4, r3
 8000cd6:	011b      	lsls	r3, r3, #4
 8000cd8:	d400      	bmi.n	8000cdc <__aeabi_fmul+0xf0>
 8000cda:	e09b      	b.n	8000e14 <__aeabi_fmul+0x228>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	0862      	lsrs	r2, r4, #1
 8000ce0:	401c      	ands	r4, r3
 8000ce2:	4314      	orrs	r4, r2
 8000ce4:	0002      	movs	r2, r0
 8000ce6:	327f      	adds	r2, #127	; 0x7f
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	dd64      	ble.n	8000db6 <__aeabi_fmul+0x1ca>
 8000cec:	0763      	lsls	r3, r4, #29
 8000cee:	d004      	beq.n	8000cfa <__aeabi_fmul+0x10e>
 8000cf0:	230f      	movs	r3, #15
 8000cf2:	4023      	ands	r3, r4
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_fmul+0x10e>
 8000cf8:	3404      	adds	r4, #4
 8000cfa:	0123      	lsls	r3, r4, #4
 8000cfc:	d503      	bpl.n	8000d06 <__aeabi_fmul+0x11a>
 8000cfe:	0002      	movs	r2, r0
 8000d00:	4b4c      	ldr	r3, [pc, #304]	; (8000e34 <__aeabi_fmul+0x248>)
 8000d02:	3280      	adds	r2, #128	; 0x80
 8000d04:	401c      	ands	r4, r3
 8000d06:	2afe      	cmp	r2, #254	; 0xfe
 8000d08:	dcbf      	bgt.n	8000c8a <__aeabi_fmul+0x9e>
 8000d0a:	01a4      	lsls	r4, r4, #6
 8000d0c:	0a64      	lsrs	r4, r4, #9
 8000d0e:	b2d0      	uxtb	r0, r2
 8000d10:	e7b2      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000d12:	4643      	mov	r3, r8
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d13d      	bne.n	8000d94 <__aeabi_fmul+0x1a8>
 8000d18:	464a      	mov	r2, r9
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	4691      	mov	r9, r2
 8000d20:	469c      	mov	ip, r3
 8000d22:	e792      	b.n	8000c4a <__aeabi_fmul+0x5e>
 8000d24:	2c00      	cmp	r4, #0
 8000d26:	d129      	bne.n	8000d7c <__aeabi_fmul+0x190>
 8000d28:	2304      	movs	r3, #4
 8000d2a:	4699      	mov	r9, r3
 8000d2c:	3b03      	subs	r3, #3
 8000d2e:	2500      	movs	r5, #0
 8000d30:	469a      	mov	sl, r3
 8000d32:	e774      	b.n	8000c1e <__aeabi_fmul+0x32>
 8000d34:	2c00      	cmp	r4, #0
 8000d36:	d11b      	bne.n	8000d70 <__aeabi_fmul+0x184>
 8000d38:	2308      	movs	r3, #8
 8000d3a:	4699      	mov	r9, r3
 8000d3c:	3b06      	subs	r3, #6
 8000d3e:	25ff      	movs	r5, #255	; 0xff
 8000d40:	469a      	mov	sl, r3
 8000d42:	e76c      	b.n	8000c1e <__aeabi_fmul+0x32>
 8000d44:	4643      	mov	r3, r8
 8000d46:	35ff      	adds	r5, #255	; 0xff
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d10b      	bne.n	8000d64 <__aeabi_fmul+0x178>
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	464a      	mov	r2, r9
 8000d50:	431a      	orrs	r2, r3
 8000d52:	4691      	mov	r9, r2
 8000d54:	469c      	mov	ip, r3
 8000d56:	e778      	b.n	8000c4a <__aeabi_fmul+0x5e>
 8000d58:	4653      	mov	r3, sl
 8000d5a:	0031      	movs	r1, r6
 8000d5c:	2b02      	cmp	r3, #2
 8000d5e:	d000      	beq.n	8000d62 <__aeabi_fmul+0x176>
 8000d60:	e783      	b.n	8000c6a <__aeabi_fmul+0x7e>
 8000d62:	e792      	b.n	8000c8a <__aeabi_fmul+0x9e>
 8000d64:	2303      	movs	r3, #3
 8000d66:	464a      	mov	r2, r9
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	4691      	mov	r9, r2
 8000d6c:	469c      	mov	ip, r3
 8000d6e:	e76c      	b.n	8000c4a <__aeabi_fmul+0x5e>
 8000d70:	230c      	movs	r3, #12
 8000d72:	4699      	mov	r9, r3
 8000d74:	3b09      	subs	r3, #9
 8000d76:	25ff      	movs	r5, #255	; 0xff
 8000d78:	469a      	mov	sl, r3
 8000d7a:	e750      	b.n	8000c1e <__aeabi_fmul+0x32>
 8000d7c:	0020      	movs	r0, r4
 8000d7e:	f001 ff5f 	bl	8002c40 <__clzsi2>
 8000d82:	2576      	movs	r5, #118	; 0x76
 8000d84:	1f43      	subs	r3, r0, #5
 8000d86:	409c      	lsls	r4, r3
 8000d88:	2300      	movs	r3, #0
 8000d8a:	426d      	negs	r5, r5
 8000d8c:	4699      	mov	r9, r3
 8000d8e:	469a      	mov	sl, r3
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	e744      	b.n	8000c1e <__aeabi_fmul+0x32>
 8000d94:	4640      	mov	r0, r8
 8000d96:	f001 ff53 	bl	8002c40 <__clzsi2>
 8000d9a:	4642      	mov	r2, r8
 8000d9c:	1f43      	subs	r3, r0, #5
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	2300      	movs	r3, #0
 8000da2:	1a2d      	subs	r5, r5, r0
 8000da4:	4690      	mov	r8, r2
 8000da6:	469c      	mov	ip, r3
 8000da8:	3d76      	subs	r5, #118	; 0x76
 8000daa:	e74e      	b.n	8000c4a <__aeabi_fmul+0x5e>
 8000dac:	2480      	movs	r4, #128	; 0x80
 8000dae:	2100      	movs	r1, #0
 8000db0:	20ff      	movs	r0, #255	; 0xff
 8000db2:	03e4      	lsls	r4, r4, #15
 8000db4:	e760      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000db6:	2301      	movs	r3, #1
 8000db8:	1a9b      	subs	r3, r3, r2
 8000dba:	2b1b      	cmp	r3, #27
 8000dbc:	dd00      	ble.n	8000dc0 <__aeabi_fmul+0x1d4>
 8000dbe:	e759      	b.n	8000c74 <__aeabi_fmul+0x88>
 8000dc0:	0022      	movs	r2, r4
 8000dc2:	309e      	adds	r0, #158	; 0x9e
 8000dc4:	40da      	lsrs	r2, r3
 8000dc6:	4084      	lsls	r4, r0
 8000dc8:	0013      	movs	r3, r2
 8000dca:	1e62      	subs	r2, r4, #1
 8000dcc:	4194      	sbcs	r4, r2
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	0763      	lsls	r3, r4, #29
 8000dd2:	d004      	beq.n	8000dde <__aeabi_fmul+0x1f2>
 8000dd4:	230f      	movs	r3, #15
 8000dd6:	4023      	ands	r3, r4
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d000      	beq.n	8000dde <__aeabi_fmul+0x1f2>
 8000ddc:	3404      	adds	r4, #4
 8000dde:	0163      	lsls	r3, r4, #5
 8000de0:	d51a      	bpl.n	8000e18 <__aeabi_fmul+0x22c>
 8000de2:	2001      	movs	r0, #1
 8000de4:	2400      	movs	r4, #0
 8000de6:	e747      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000de8:	2080      	movs	r0, #128	; 0x80
 8000dea:	03c0      	lsls	r0, r0, #15
 8000dec:	4204      	tst	r4, r0
 8000dee:	d009      	beq.n	8000e04 <__aeabi_fmul+0x218>
 8000df0:	4643      	mov	r3, r8
 8000df2:	4203      	tst	r3, r0
 8000df4:	d106      	bne.n	8000e04 <__aeabi_fmul+0x218>
 8000df6:	4644      	mov	r4, r8
 8000df8:	4304      	orrs	r4, r0
 8000dfa:	0264      	lsls	r4, r4, #9
 8000dfc:	0039      	movs	r1, r7
 8000dfe:	20ff      	movs	r0, #255	; 0xff
 8000e00:	0a64      	lsrs	r4, r4, #9
 8000e02:	e739      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000e04:	2080      	movs	r0, #128	; 0x80
 8000e06:	03c0      	lsls	r0, r0, #15
 8000e08:	4304      	orrs	r4, r0
 8000e0a:	0264      	lsls	r4, r4, #9
 8000e0c:	0031      	movs	r1, r6
 8000e0e:	20ff      	movs	r0, #255	; 0xff
 8000e10:	0a64      	lsrs	r4, r4, #9
 8000e12:	e731      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000e14:	0028      	movs	r0, r5
 8000e16:	e765      	b.n	8000ce4 <__aeabi_fmul+0xf8>
 8000e18:	01a4      	lsls	r4, r4, #6
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	0a64      	lsrs	r4, r4, #9
 8000e1e:	e72b      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000e20:	2080      	movs	r0, #128	; 0x80
 8000e22:	03c0      	lsls	r0, r0, #15
 8000e24:	4304      	orrs	r4, r0
 8000e26:	0264      	lsls	r4, r4, #9
 8000e28:	20ff      	movs	r0, #255	; 0xff
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	e724      	b.n	8000c78 <__aeabi_fmul+0x8c>
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	08009a9c 	.word	0x08009a9c
 8000e34:	f7ffffff 	.word	0xf7ffffff

08000e38 <__aeabi_i2f>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	2800      	cmp	r0, #0
 8000e3c:	d013      	beq.n	8000e66 <__aeabi_i2f+0x2e>
 8000e3e:	17c3      	asrs	r3, r0, #31
 8000e40:	18c6      	adds	r6, r0, r3
 8000e42:	405e      	eors	r6, r3
 8000e44:	0fc4      	lsrs	r4, r0, #31
 8000e46:	0030      	movs	r0, r6
 8000e48:	f001 fefa 	bl	8002c40 <__clzsi2>
 8000e4c:	239e      	movs	r3, #158	; 0x9e
 8000e4e:	0005      	movs	r5, r0
 8000e50:	1a1b      	subs	r3, r3, r0
 8000e52:	2b96      	cmp	r3, #150	; 0x96
 8000e54:	dc0f      	bgt.n	8000e76 <__aeabi_i2f+0x3e>
 8000e56:	2808      	cmp	r0, #8
 8000e58:	dd01      	ble.n	8000e5e <__aeabi_i2f+0x26>
 8000e5a:	3d08      	subs	r5, #8
 8000e5c:	40ae      	lsls	r6, r5
 8000e5e:	0276      	lsls	r6, r6, #9
 8000e60:	0a76      	lsrs	r6, r6, #9
 8000e62:	b2d8      	uxtb	r0, r3
 8000e64:	e002      	b.n	8000e6c <__aeabi_i2f+0x34>
 8000e66:	2400      	movs	r4, #0
 8000e68:	2000      	movs	r0, #0
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	05c0      	lsls	r0, r0, #23
 8000e6e:	4330      	orrs	r0, r6
 8000e70:	07e4      	lsls	r4, r4, #31
 8000e72:	4320      	orrs	r0, r4
 8000e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e76:	2b99      	cmp	r3, #153	; 0x99
 8000e78:	dd0c      	ble.n	8000e94 <__aeabi_i2f+0x5c>
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	0031      	movs	r1, r6
 8000e7e:	1a12      	subs	r2, r2, r0
 8000e80:	40d1      	lsrs	r1, r2
 8000e82:	000a      	movs	r2, r1
 8000e84:	0001      	movs	r1, r0
 8000e86:	0030      	movs	r0, r6
 8000e88:	311b      	adds	r1, #27
 8000e8a:	4088      	lsls	r0, r1
 8000e8c:	1e41      	subs	r1, r0, #1
 8000e8e:	4188      	sbcs	r0, r1
 8000e90:	4302      	orrs	r2, r0
 8000e92:	0016      	movs	r6, r2
 8000e94:	2d05      	cmp	r5, #5
 8000e96:	dc12      	bgt.n	8000ebe <__aeabi_i2f+0x86>
 8000e98:	0031      	movs	r1, r6
 8000e9a:	4f0d      	ldr	r7, [pc, #52]	; (8000ed0 <__aeabi_i2f+0x98>)
 8000e9c:	4039      	ands	r1, r7
 8000e9e:	0772      	lsls	r2, r6, #29
 8000ea0:	d009      	beq.n	8000eb6 <__aeabi_i2f+0x7e>
 8000ea2:	200f      	movs	r0, #15
 8000ea4:	4030      	ands	r0, r6
 8000ea6:	2804      	cmp	r0, #4
 8000ea8:	d005      	beq.n	8000eb6 <__aeabi_i2f+0x7e>
 8000eaa:	3104      	adds	r1, #4
 8000eac:	014a      	lsls	r2, r1, #5
 8000eae:	d502      	bpl.n	8000eb6 <__aeabi_i2f+0x7e>
 8000eb0:	239f      	movs	r3, #159	; 0x9f
 8000eb2:	4039      	ands	r1, r7
 8000eb4:	1b5b      	subs	r3, r3, r5
 8000eb6:	0189      	lsls	r1, r1, #6
 8000eb8:	0a4e      	lsrs	r6, r1, #9
 8000eba:	b2d8      	uxtb	r0, r3
 8000ebc:	e7d6      	b.n	8000e6c <__aeabi_i2f+0x34>
 8000ebe:	1f6a      	subs	r2, r5, #5
 8000ec0:	4096      	lsls	r6, r2
 8000ec2:	0031      	movs	r1, r6
 8000ec4:	4f02      	ldr	r7, [pc, #8]	; (8000ed0 <__aeabi_i2f+0x98>)
 8000ec6:	4039      	ands	r1, r7
 8000ec8:	0772      	lsls	r2, r6, #29
 8000eca:	d0f4      	beq.n	8000eb6 <__aeabi_i2f+0x7e>
 8000ecc:	e7e9      	b.n	8000ea2 <__aeabi_i2f+0x6a>
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	fbffffff 	.word	0xfbffffff

08000ed4 <__aeabi_dadd>:
 8000ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ed6:	464f      	mov	r7, r9
 8000ed8:	4646      	mov	r6, r8
 8000eda:	46d6      	mov	lr, sl
 8000edc:	000d      	movs	r5, r1
 8000ede:	0004      	movs	r4, r0
 8000ee0:	b5c0      	push	{r6, r7, lr}
 8000ee2:	001f      	movs	r7, r3
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0328      	lsls	r0, r5, #12
 8000ee8:	0f62      	lsrs	r2, r4, #29
 8000eea:	0a40      	lsrs	r0, r0, #9
 8000eec:	4310      	orrs	r0, r2
 8000eee:	007a      	lsls	r2, r7, #1
 8000ef0:	0d52      	lsrs	r2, r2, #21
 8000ef2:	00e3      	lsls	r3, r4, #3
 8000ef4:	033c      	lsls	r4, r7, #12
 8000ef6:	4691      	mov	r9, r2
 8000ef8:	0a64      	lsrs	r4, r4, #9
 8000efa:	0ffa      	lsrs	r2, r7, #31
 8000efc:	0f4f      	lsrs	r7, r1, #29
 8000efe:	006e      	lsls	r6, r5, #1
 8000f00:	4327      	orrs	r7, r4
 8000f02:	4692      	mov	sl, r2
 8000f04:	46b8      	mov	r8, r7
 8000f06:	0d76      	lsrs	r6, r6, #21
 8000f08:	0fed      	lsrs	r5, r5, #31
 8000f0a:	00c9      	lsls	r1, r1, #3
 8000f0c:	4295      	cmp	r5, r2
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_dadd+0x3e>
 8000f10:	e099      	b.n	8001046 <__aeabi_dadd+0x172>
 8000f12:	464c      	mov	r4, r9
 8000f14:	1b34      	subs	r4, r6, r4
 8000f16:	46a4      	mov	ip, r4
 8000f18:	2c00      	cmp	r4, #0
 8000f1a:	dc00      	bgt.n	8000f1e <__aeabi_dadd+0x4a>
 8000f1c:	e07c      	b.n	8001018 <__aeabi_dadd+0x144>
 8000f1e:	464a      	mov	r2, r9
 8000f20:	2a00      	cmp	r2, #0
 8000f22:	d100      	bne.n	8000f26 <__aeabi_dadd+0x52>
 8000f24:	e0b8      	b.n	8001098 <__aeabi_dadd+0x1c4>
 8000f26:	4ac5      	ldr	r2, [pc, #788]	; (800123c <__aeabi_dadd+0x368>)
 8000f28:	4296      	cmp	r6, r2
 8000f2a:	d100      	bne.n	8000f2e <__aeabi_dadd+0x5a>
 8000f2c:	e11c      	b.n	8001168 <__aeabi_dadd+0x294>
 8000f2e:	2280      	movs	r2, #128	; 0x80
 8000f30:	003c      	movs	r4, r7
 8000f32:	0412      	lsls	r2, r2, #16
 8000f34:	4314      	orrs	r4, r2
 8000f36:	46a0      	mov	r8, r4
 8000f38:	4662      	mov	r2, ip
 8000f3a:	2a38      	cmp	r2, #56	; 0x38
 8000f3c:	dd00      	ble.n	8000f40 <__aeabi_dadd+0x6c>
 8000f3e:	e161      	b.n	8001204 <__aeabi_dadd+0x330>
 8000f40:	2a1f      	cmp	r2, #31
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_dadd+0x72>
 8000f44:	e1cc      	b.n	80012e0 <__aeabi_dadd+0x40c>
 8000f46:	4664      	mov	r4, ip
 8000f48:	2220      	movs	r2, #32
 8000f4a:	1b12      	subs	r2, r2, r4
 8000f4c:	4644      	mov	r4, r8
 8000f4e:	4094      	lsls	r4, r2
 8000f50:	000f      	movs	r7, r1
 8000f52:	46a1      	mov	r9, r4
 8000f54:	4664      	mov	r4, ip
 8000f56:	4091      	lsls	r1, r2
 8000f58:	40e7      	lsrs	r7, r4
 8000f5a:	464c      	mov	r4, r9
 8000f5c:	1e4a      	subs	r2, r1, #1
 8000f5e:	4191      	sbcs	r1, r2
 8000f60:	433c      	orrs	r4, r7
 8000f62:	4642      	mov	r2, r8
 8000f64:	4321      	orrs	r1, r4
 8000f66:	4664      	mov	r4, ip
 8000f68:	40e2      	lsrs	r2, r4
 8000f6a:	1a80      	subs	r0, r0, r2
 8000f6c:	1a5c      	subs	r4, r3, r1
 8000f6e:	42a3      	cmp	r3, r4
 8000f70:	419b      	sbcs	r3, r3
 8000f72:	425f      	negs	r7, r3
 8000f74:	1bc7      	subs	r7, r0, r7
 8000f76:	023b      	lsls	r3, r7, #8
 8000f78:	d400      	bmi.n	8000f7c <__aeabi_dadd+0xa8>
 8000f7a:	e0d0      	b.n	800111e <__aeabi_dadd+0x24a>
 8000f7c:	027f      	lsls	r7, r7, #9
 8000f7e:	0a7f      	lsrs	r7, r7, #9
 8000f80:	2f00      	cmp	r7, #0
 8000f82:	d100      	bne.n	8000f86 <__aeabi_dadd+0xb2>
 8000f84:	e0ff      	b.n	8001186 <__aeabi_dadd+0x2b2>
 8000f86:	0038      	movs	r0, r7
 8000f88:	f001 fe5a 	bl	8002c40 <__clzsi2>
 8000f8c:	0001      	movs	r1, r0
 8000f8e:	3908      	subs	r1, #8
 8000f90:	2320      	movs	r3, #32
 8000f92:	0022      	movs	r2, r4
 8000f94:	1a5b      	subs	r3, r3, r1
 8000f96:	408f      	lsls	r7, r1
 8000f98:	40da      	lsrs	r2, r3
 8000f9a:	408c      	lsls	r4, r1
 8000f9c:	4317      	orrs	r7, r2
 8000f9e:	42b1      	cmp	r1, r6
 8000fa0:	da00      	bge.n	8000fa4 <__aeabi_dadd+0xd0>
 8000fa2:	e0ff      	b.n	80011a4 <__aeabi_dadd+0x2d0>
 8000fa4:	1b89      	subs	r1, r1, r6
 8000fa6:	1c4b      	adds	r3, r1, #1
 8000fa8:	2b1f      	cmp	r3, #31
 8000faa:	dd00      	ble.n	8000fae <__aeabi_dadd+0xda>
 8000fac:	e0a8      	b.n	8001100 <__aeabi_dadd+0x22c>
 8000fae:	2220      	movs	r2, #32
 8000fb0:	0039      	movs	r1, r7
 8000fb2:	1ad2      	subs	r2, r2, r3
 8000fb4:	0020      	movs	r0, r4
 8000fb6:	4094      	lsls	r4, r2
 8000fb8:	4091      	lsls	r1, r2
 8000fba:	40d8      	lsrs	r0, r3
 8000fbc:	1e62      	subs	r2, r4, #1
 8000fbe:	4194      	sbcs	r4, r2
 8000fc0:	40df      	lsrs	r7, r3
 8000fc2:	2600      	movs	r6, #0
 8000fc4:	4301      	orrs	r1, r0
 8000fc6:	430c      	orrs	r4, r1
 8000fc8:	0763      	lsls	r3, r4, #29
 8000fca:	d009      	beq.n	8000fe0 <__aeabi_dadd+0x10c>
 8000fcc:	230f      	movs	r3, #15
 8000fce:	4023      	ands	r3, r4
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d005      	beq.n	8000fe0 <__aeabi_dadd+0x10c>
 8000fd4:	1d23      	adds	r3, r4, #4
 8000fd6:	42a3      	cmp	r3, r4
 8000fd8:	41a4      	sbcs	r4, r4
 8000fda:	4264      	negs	r4, r4
 8000fdc:	193f      	adds	r7, r7, r4
 8000fde:	001c      	movs	r4, r3
 8000fe0:	023b      	lsls	r3, r7, #8
 8000fe2:	d400      	bmi.n	8000fe6 <__aeabi_dadd+0x112>
 8000fe4:	e09e      	b.n	8001124 <__aeabi_dadd+0x250>
 8000fe6:	4b95      	ldr	r3, [pc, #596]	; (800123c <__aeabi_dadd+0x368>)
 8000fe8:	3601      	adds	r6, #1
 8000fea:	429e      	cmp	r6, r3
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_dadd+0x11c>
 8000fee:	e0b7      	b.n	8001160 <__aeabi_dadd+0x28c>
 8000ff0:	4a93      	ldr	r2, [pc, #588]	; (8001240 <__aeabi_dadd+0x36c>)
 8000ff2:	08e4      	lsrs	r4, r4, #3
 8000ff4:	4017      	ands	r7, r2
 8000ff6:	077b      	lsls	r3, r7, #29
 8000ff8:	0571      	lsls	r1, r6, #21
 8000ffa:	027f      	lsls	r7, r7, #9
 8000ffc:	4323      	orrs	r3, r4
 8000ffe:	0b3f      	lsrs	r7, r7, #12
 8001000:	0d4a      	lsrs	r2, r1, #21
 8001002:	0512      	lsls	r2, r2, #20
 8001004:	433a      	orrs	r2, r7
 8001006:	07ed      	lsls	r5, r5, #31
 8001008:	432a      	orrs	r2, r5
 800100a:	0018      	movs	r0, r3
 800100c:	0011      	movs	r1, r2
 800100e:	bce0      	pop	{r5, r6, r7}
 8001010:	46ba      	mov	sl, r7
 8001012:	46b1      	mov	r9, r6
 8001014:	46a8      	mov	r8, r5
 8001016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001018:	2c00      	cmp	r4, #0
 800101a:	d04b      	beq.n	80010b4 <__aeabi_dadd+0x1e0>
 800101c:	464c      	mov	r4, r9
 800101e:	1ba4      	subs	r4, r4, r6
 8001020:	46a4      	mov	ip, r4
 8001022:	2e00      	cmp	r6, #0
 8001024:	d000      	beq.n	8001028 <__aeabi_dadd+0x154>
 8001026:	e123      	b.n	8001270 <__aeabi_dadd+0x39c>
 8001028:	0004      	movs	r4, r0
 800102a:	431c      	orrs	r4, r3
 800102c:	d100      	bne.n	8001030 <__aeabi_dadd+0x15c>
 800102e:	e1af      	b.n	8001390 <__aeabi_dadd+0x4bc>
 8001030:	4662      	mov	r2, ip
 8001032:	1e54      	subs	r4, r2, #1
 8001034:	2a01      	cmp	r2, #1
 8001036:	d100      	bne.n	800103a <__aeabi_dadd+0x166>
 8001038:	e215      	b.n	8001466 <__aeabi_dadd+0x592>
 800103a:	4d80      	ldr	r5, [pc, #512]	; (800123c <__aeabi_dadd+0x368>)
 800103c:	45ac      	cmp	ip, r5
 800103e:	d100      	bne.n	8001042 <__aeabi_dadd+0x16e>
 8001040:	e1c8      	b.n	80013d4 <__aeabi_dadd+0x500>
 8001042:	46a4      	mov	ip, r4
 8001044:	e11b      	b.n	800127e <__aeabi_dadd+0x3aa>
 8001046:	464a      	mov	r2, r9
 8001048:	1ab2      	subs	r2, r6, r2
 800104a:	4694      	mov	ip, r2
 800104c:	2a00      	cmp	r2, #0
 800104e:	dc00      	bgt.n	8001052 <__aeabi_dadd+0x17e>
 8001050:	e0ac      	b.n	80011ac <__aeabi_dadd+0x2d8>
 8001052:	464a      	mov	r2, r9
 8001054:	2a00      	cmp	r2, #0
 8001056:	d043      	beq.n	80010e0 <__aeabi_dadd+0x20c>
 8001058:	4a78      	ldr	r2, [pc, #480]	; (800123c <__aeabi_dadd+0x368>)
 800105a:	4296      	cmp	r6, r2
 800105c:	d100      	bne.n	8001060 <__aeabi_dadd+0x18c>
 800105e:	e1af      	b.n	80013c0 <__aeabi_dadd+0x4ec>
 8001060:	2280      	movs	r2, #128	; 0x80
 8001062:	003c      	movs	r4, r7
 8001064:	0412      	lsls	r2, r2, #16
 8001066:	4314      	orrs	r4, r2
 8001068:	46a0      	mov	r8, r4
 800106a:	4662      	mov	r2, ip
 800106c:	2a38      	cmp	r2, #56	; 0x38
 800106e:	dc67      	bgt.n	8001140 <__aeabi_dadd+0x26c>
 8001070:	2a1f      	cmp	r2, #31
 8001072:	dc00      	bgt.n	8001076 <__aeabi_dadd+0x1a2>
 8001074:	e15f      	b.n	8001336 <__aeabi_dadd+0x462>
 8001076:	4647      	mov	r7, r8
 8001078:	3a20      	subs	r2, #32
 800107a:	40d7      	lsrs	r7, r2
 800107c:	4662      	mov	r2, ip
 800107e:	2a20      	cmp	r2, #32
 8001080:	d005      	beq.n	800108e <__aeabi_dadd+0x1ba>
 8001082:	4664      	mov	r4, ip
 8001084:	2240      	movs	r2, #64	; 0x40
 8001086:	1b12      	subs	r2, r2, r4
 8001088:	4644      	mov	r4, r8
 800108a:	4094      	lsls	r4, r2
 800108c:	4321      	orrs	r1, r4
 800108e:	1e4a      	subs	r2, r1, #1
 8001090:	4191      	sbcs	r1, r2
 8001092:	000c      	movs	r4, r1
 8001094:	433c      	orrs	r4, r7
 8001096:	e057      	b.n	8001148 <__aeabi_dadd+0x274>
 8001098:	003a      	movs	r2, r7
 800109a:	430a      	orrs	r2, r1
 800109c:	d100      	bne.n	80010a0 <__aeabi_dadd+0x1cc>
 800109e:	e105      	b.n	80012ac <__aeabi_dadd+0x3d8>
 80010a0:	0022      	movs	r2, r4
 80010a2:	3a01      	subs	r2, #1
 80010a4:	2c01      	cmp	r4, #1
 80010a6:	d100      	bne.n	80010aa <__aeabi_dadd+0x1d6>
 80010a8:	e182      	b.n	80013b0 <__aeabi_dadd+0x4dc>
 80010aa:	4c64      	ldr	r4, [pc, #400]	; (800123c <__aeabi_dadd+0x368>)
 80010ac:	45a4      	cmp	ip, r4
 80010ae:	d05b      	beq.n	8001168 <__aeabi_dadd+0x294>
 80010b0:	4694      	mov	ip, r2
 80010b2:	e741      	b.n	8000f38 <__aeabi_dadd+0x64>
 80010b4:	4c63      	ldr	r4, [pc, #396]	; (8001244 <__aeabi_dadd+0x370>)
 80010b6:	1c77      	adds	r7, r6, #1
 80010b8:	4227      	tst	r7, r4
 80010ba:	d000      	beq.n	80010be <__aeabi_dadd+0x1ea>
 80010bc:	e0c4      	b.n	8001248 <__aeabi_dadd+0x374>
 80010be:	0004      	movs	r4, r0
 80010c0:	431c      	orrs	r4, r3
 80010c2:	2e00      	cmp	r6, #0
 80010c4:	d000      	beq.n	80010c8 <__aeabi_dadd+0x1f4>
 80010c6:	e169      	b.n	800139c <__aeabi_dadd+0x4c8>
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d100      	bne.n	80010ce <__aeabi_dadd+0x1fa>
 80010cc:	e1bf      	b.n	800144e <__aeabi_dadd+0x57a>
 80010ce:	4644      	mov	r4, r8
 80010d0:	430c      	orrs	r4, r1
 80010d2:	d000      	beq.n	80010d6 <__aeabi_dadd+0x202>
 80010d4:	e1d0      	b.n	8001478 <__aeabi_dadd+0x5a4>
 80010d6:	0742      	lsls	r2, r0, #29
 80010d8:	08db      	lsrs	r3, r3, #3
 80010da:	4313      	orrs	r3, r2
 80010dc:	08c0      	lsrs	r0, r0, #3
 80010de:	e029      	b.n	8001134 <__aeabi_dadd+0x260>
 80010e0:	003a      	movs	r2, r7
 80010e2:	430a      	orrs	r2, r1
 80010e4:	d100      	bne.n	80010e8 <__aeabi_dadd+0x214>
 80010e6:	e170      	b.n	80013ca <__aeabi_dadd+0x4f6>
 80010e8:	4662      	mov	r2, ip
 80010ea:	4664      	mov	r4, ip
 80010ec:	3a01      	subs	r2, #1
 80010ee:	2c01      	cmp	r4, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_dadd+0x220>
 80010f2:	e0e0      	b.n	80012b6 <__aeabi_dadd+0x3e2>
 80010f4:	4c51      	ldr	r4, [pc, #324]	; (800123c <__aeabi_dadd+0x368>)
 80010f6:	45a4      	cmp	ip, r4
 80010f8:	d100      	bne.n	80010fc <__aeabi_dadd+0x228>
 80010fa:	e161      	b.n	80013c0 <__aeabi_dadd+0x4ec>
 80010fc:	4694      	mov	ip, r2
 80010fe:	e7b4      	b.n	800106a <__aeabi_dadd+0x196>
 8001100:	003a      	movs	r2, r7
 8001102:	391f      	subs	r1, #31
 8001104:	40ca      	lsrs	r2, r1
 8001106:	0011      	movs	r1, r2
 8001108:	2b20      	cmp	r3, #32
 800110a:	d003      	beq.n	8001114 <__aeabi_dadd+0x240>
 800110c:	2240      	movs	r2, #64	; 0x40
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	409f      	lsls	r7, r3
 8001112:	433c      	orrs	r4, r7
 8001114:	1e63      	subs	r3, r4, #1
 8001116:	419c      	sbcs	r4, r3
 8001118:	2700      	movs	r7, #0
 800111a:	2600      	movs	r6, #0
 800111c:	430c      	orrs	r4, r1
 800111e:	0763      	lsls	r3, r4, #29
 8001120:	d000      	beq.n	8001124 <__aeabi_dadd+0x250>
 8001122:	e753      	b.n	8000fcc <__aeabi_dadd+0xf8>
 8001124:	46b4      	mov	ip, r6
 8001126:	08e4      	lsrs	r4, r4, #3
 8001128:	077b      	lsls	r3, r7, #29
 800112a:	4323      	orrs	r3, r4
 800112c:	08f8      	lsrs	r0, r7, #3
 800112e:	4a43      	ldr	r2, [pc, #268]	; (800123c <__aeabi_dadd+0x368>)
 8001130:	4594      	cmp	ip, r2
 8001132:	d01d      	beq.n	8001170 <__aeabi_dadd+0x29c>
 8001134:	4662      	mov	r2, ip
 8001136:	0307      	lsls	r7, r0, #12
 8001138:	0552      	lsls	r2, r2, #21
 800113a:	0b3f      	lsrs	r7, r7, #12
 800113c:	0d52      	lsrs	r2, r2, #21
 800113e:	e760      	b.n	8001002 <__aeabi_dadd+0x12e>
 8001140:	4644      	mov	r4, r8
 8001142:	430c      	orrs	r4, r1
 8001144:	1e62      	subs	r2, r4, #1
 8001146:	4194      	sbcs	r4, r2
 8001148:	18e4      	adds	r4, r4, r3
 800114a:	429c      	cmp	r4, r3
 800114c:	419b      	sbcs	r3, r3
 800114e:	425f      	negs	r7, r3
 8001150:	183f      	adds	r7, r7, r0
 8001152:	023b      	lsls	r3, r7, #8
 8001154:	d5e3      	bpl.n	800111e <__aeabi_dadd+0x24a>
 8001156:	4b39      	ldr	r3, [pc, #228]	; (800123c <__aeabi_dadd+0x368>)
 8001158:	3601      	adds	r6, #1
 800115a:	429e      	cmp	r6, r3
 800115c:	d000      	beq.n	8001160 <__aeabi_dadd+0x28c>
 800115e:	e0b5      	b.n	80012cc <__aeabi_dadd+0x3f8>
 8001160:	0032      	movs	r2, r6
 8001162:	2700      	movs	r7, #0
 8001164:	2300      	movs	r3, #0
 8001166:	e74c      	b.n	8001002 <__aeabi_dadd+0x12e>
 8001168:	0742      	lsls	r2, r0, #29
 800116a:	08db      	lsrs	r3, r3, #3
 800116c:	4313      	orrs	r3, r2
 800116e:	08c0      	lsrs	r0, r0, #3
 8001170:	001a      	movs	r2, r3
 8001172:	4302      	orrs	r2, r0
 8001174:	d100      	bne.n	8001178 <__aeabi_dadd+0x2a4>
 8001176:	e1e1      	b.n	800153c <__aeabi_dadd+0x668>
 8001178:	2780      	movs	r7, #128	; 0x80
 800117a:	033f      	lsls	r7, r7, #12
 800117c:	4307      	orrs	r7, r0
 800117e:	033f      	lsls	r7, r7, #12
 8001180:	4a2e      	ldr	r2, [pc, #184]	; (800123c <__aeabi_dadd+0x368>)
 8001182:	0b3f      	lsrs	r7, r7, #12
 8001184:	e73d      	b.n	8001002 <__aeabi_dadd+0x12e>
 8001186:	0020      	movs	r0, r4
 8001188:	f001 fd5a 	bl	8002c40 <__clzsi2>
 800118c:	0001      	movs	r1, r0
 800118e:	3118      	adds	r1, #24
 8001190:	291f      	cmp	r1, #31
 8001192:	dc00      	bgt.n	8001196 <__aeabi_dadd+0x2c2>
 8001194:	e6fc      	b.n	8000f90 <__aeabi_dadd+0xbc>
 8001196:	3808      	subs	r0, #8
 8001198:	4084      	lsls	r4, r0
 800119a:	0027      	movs	r7, r4
 800119c:	2400      	movs	r4, #0
 800119e:	42b1      	cmp	r1, r6
 80011a0:	db00      	blt.n	80011a4 <__aeabi_dadd+0x2d0>
 80011a2:	e6ff      	b.n	8000fa4 <__aeabi_dadd+0xd0>
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <__aeabi_dadd+0x36c>)
 80011a6:	1a76      	subs	r6, r6, r1
 80011a8:	4017      	ands	r7, r2
 80011aa:	e70d      	b.n	8000fc8 <__aeabi_dadd+0xf4>
 80011ac:	2a00      	cmp	r2, #0
 80011ae:	d02f      	beq.n	8001210 <__aeabi_dadd+0x33c>
 80011b0:	464a      	mov	r2, r9
 80011b2:	1b92      	subs	r2, r2, r6
 80011b4:	4694      	mov	ip, r2
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	d100      	bne.n	80011bc <__aeabi_dadd+0x2e8>
 80011ba:	e0ad      	b.n	8001318 <__aeabi_dadd+0x444>
 80011bc:	4a1f      	ldr	r2, [pc, #124]	; (800123c <__aeabi_dadd+0x368>)
 80011be:	4591      	cmp	r9, r2
 80011c0:	d100      	bne.n	80011c4 <__aeabi_dadd+0x2f0>
 80011c2:	e10f      	b.n	80013e4 <__aeabi_dadd+0x510>
 80011c4:	2280      	movs	r2, #128	; 0x80
 80011c6:	0412      	lsls	r2, r2, #16
 80011c8:	4310      	orrs	r0, r2
 80011ca:	4662      	mov	r2, ip
 80011cc:	2a38      	cmp	r2, #56	; 0x38
 80011ce:	dd00      	ble.n	80011d2 <__aeabi_dadd+0x2fe>
 80011d0:	e10f      	b.n	80013f2 <__aeabi_dadd+0x51e>
 80011d2:	2a1f      	cmp	r2, #31
 80011d4:	dd00      	ble.n	80011d8 <__aeabi_dadd+0x304>
 80011d6:	e180      	b.n	80014da <__aeabi_dadd+0x606>
 80011d8:	4664      	mov	r4, ip
 80011da:	2220      	movs	r2, #32
 80011dc:	001e      	movs	r6, r3
 80011de:	1b12      	subs	r2, r2, r4
 80011e0:	4667      	mov	r7, ip
 80011e2:	0004      	movs	r4, r0
 80011e4:	4093      	lsls	r3, r2
 80011e6:	4094      	lsls	r4, r2
 80011e8:	40fe      	lsrs	r6, r7
 80011ea:	1e5a      	subs	r2, r3, #1
 80011ec:	4193      	sbcs	r3, r2
 80011ee:	40f8      	lsrs	r0, r7
 80011f0:	4334      	orrs	r4, r6
 80011f2:	431c      	orrs	r4, r3
 80011f4:	4480      	add	r8, r0
 80011f6:	1864      	adds	r4, r4, r1
 80011f8:	428c      	cmp	r4, r1
 80011fa:	41bf      	sbcs	r7, r7
 80011fc:	427f      	negs	r7, r7
 80011fe:	464e      	mov	r6, r9
 8001200:	4447      	add	r7, r8
 8001202:	e7a6      	b.n	8001152 <__aeabi_dadd+0x27e>
 8001204:	4642      	mov	r2, r8
 8001206:	430a      	orrs	r2, r1
 8001208:	0011      	movs	r1, r2
 800120a:	1e4a      	subs	r2, r1, #1
 800120c:	4191      	sbcs	r1, r2
 800120e:	e6ad      	b.n	8000f6c <__aeabi_dadd+0x98>
 8001210:	4c0c      	ldr	r4, [pc, #48]	; (8001244 <__aeabi_dadd+0x370>)
 8001212:	1c72      	adds	r2, r6, #1
 8001214:	4222      	tst	r2, r4
 8001216:	d000      	beq.n	800121a <__aeabi_dadd+0x346>
 8001218:	e0a1      	b.n	800135e <__aeabi_dadd+0x48a>
 800121a:	0002      	movs	r2, r0
 800121c:	431a      	orrs	r2, r3
 800121e:	2e00      	cmp	r6, #0
 8001220:	d000      	beq.n	8001224 <__aeabi_dadd+0x350>
 8001222:	e0fa      	b.n	800141a <__aeabi_dadd+0x546>
 8001224:	2a00      	cmp	r2, #0
 8001226:	d100      	bne.n	800122a <__aeabi_dadd+0x356>
 8001228:	e145      	b.n	80014b6 <__aeabi_dadd+0x5e2>
 800122a:	003a      	movs	r2, r7
 800122c:	430a      	orrs	r2, r1
 800122e:	d000      	beq.n	8001232 <__aeabi_dadd+0x35e>
 8001230:	e146      	b.n	80014c0 <__aeabi_dadd+0x5ec>
 8001232:	0742      	lsls	r2, r0, #29
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	4313      	orrs	r3, r2
 8001238:	08c0      	lsrs	r0, r0, #3
 800123a:	e77b      	b.n	8001134 <__aeabi_dadd+0x260>
 800123c:	000007ff 	.word	0x000007ff
 8001240:	ff7fffff 	.word	0xff7fffff
 8001244:	000007fe 	.word	0x000007fe
 8001248:	4647      	mov	r7, r8
 800124a:	1a5c      	subs	r4, r3, r1
 800124c:	1bc2      	subs	r2, r0, r7
 800124e:	42a3      	cmp	r3, r4
 8001250:	41bf      	sbcs	r7, r7
 8001252:	427f      	negs	r7, r7
 8001254:	46b9      	mov	r9, r7
 8001256:	0017      	movs	r7, r2
 8001258:	464a      	mov	r2, r9
 800125a:	1abf      	subs	r7, r7, r2
 800125c:	023a      	lsls	r2, r7, #8
 800125e:	d500      	bpl.n	8001262 <__aeabi_dadd+0x38e>
 8001260:	e08d      	b.n	800137e <__aeabi_dadd+0x4aa>
 8001262:	0023      	movs	r3, r4
 8001264:	433b      	orrs	r3, r7
 8001266:	d000      	beq.n	800126a <__aeabi_dadd+0x396>
 8001268:	e68a      	b.n	8000f80 <__aeabi_dadd+0xac>
 800126a:	2000      	movs	r0, #0
 800126c:	2500      	movs	r5, #0
 800126e:	e761      	b.n	8001134 <__aeabi_dadd+0x260>
 8001270:	4cb4      	ldr	r4, [pc, #720]	; (8001544 <__aeabi_dadd+0x670>)
 8001272:	45a1      	cmp	r9, r4
 8001274:	d100      	bne.n	8001278 <__aeabi_dadd+0x3a4>
 8001276:	e0ad      	b.n	80013d4 <__aeabi_dadd+0x500>
 8001278:	2480      	movs	r4, #128	; 0x80
 800127a:	0424      	lsls	r4, r4, #16
 800127c:	4320      	orrs	r0, r4
 800127e:	4664      	mov	r4, ip
 8001280:	2c38      	cmp	r4, #56	; 0x38
 8001282:	dc3d      	bgt.n	8001300 <__aeabi_dadd+0x42c>
 8001284:	4662      	mov	r2, ip
 8001286:	2c1f      	cmp	r4, #31
 8001288:	dd00      	ble.n	800128c <__aeabi_dadd+0x3b8>
 800128a:	e0b7      	b.n	80013fc <__aeabi_dadd+0x528>
 800128c:	2520      	movs	r5, #32
 800128e:	001e      	movs	r6, r3
 8001290:	1b2d      	subs	r5, r5, r4
 8001292:	0004      	movs	r4, r0
 8001294:	40ab      	lsls	r3, r5
 8001296:	40ac      	lsls	r4, r5
 8001298:	40d6      	lsrs	r6, r2
 800129a:	40d0      	lsrs	r0, r2
 800129c:	4642      	mov	r2, r8
 800129e:	1e5d      	subs	r5, r3, #1
 80012a0:	41ab      	sbcs	r3, r5
 80012a2:	4334      	orrs	r4, r6
 80012a4:	1a12      	subs	r2, r2, r0
 80012a6:	4690      	mov	r8, r2
 80012a8:	4323      	orrs	r3, r4
 80012aa:	e02c      	b.n	8001306 <__aeabi_dadd+0x432>
 80012ac:	0742      	lsls	r2, r0, #29
 80012ae:	08db      	lsrs	r3, r3, #3
 80012b0:	4313      	orrs	r3, r2
 80012b2:	08c0      	lsrs	r0, r0, #3
 80012b4:	e73b      	b.n	800112e <__aeabi_dadd+0x25a>
 80012b6:	185c      	adds	r4, r3, r1
 80012b8:	429c      	cmp	r4, r3
 80012ba:	419b      	sbcs	r3, r3
 80012bc:	4440      	add	r0, r8
 80012be:	425b      	negs	r3, r3
 80012c0:	18c7      	adds	r7, r0, r3
 80012c2:	2601      	movs	r6, #1
 80012c4:	023b      	lsls	r3, r7, #8
 80012c6:	d400      	bmi.n	80012ca <__aeabi_dadd+0x3f6>
 80012c8:	e729      	b.n	800111e <__aeabi_dadd+0x24a>
 80012ca:	2602      	movs	r6, #2
 80012cc:	4a9e      	ldr	r2, [pc, #632]	; (8001548 <__aeabi_dadd+0x674>)
 80012ce:	0863      	lsrs	r3, r4, #1
 80012d0:	4017      	ands	r7, r2
 80012d2:	2201      	movs	r2, #1
 80012d4:	4014      	ands	r4, r2
 80012d6:	431c      	orrs	r4, r3
 80012d8:	07fb      	lsls	r3, r7, #31
 80012da:	431c      	orrs	r4, r3
 80012dc:	087f      	lsrs	r7, r7, #1
 80012de:	e673      	b.n	8000fc8 <__aeabi_dadd+0xf4>
 80012e0:	4644      	mov	r4, r8
 80012e2:	3a20      	subs	r2, #32
 80012e4:	40d4      	lsrs	r4, r2
 80012e6:	4662      	mov	r2, ip
 80012e8:	2a20      	cmp	r2, #32
 80012ea:	d005      	beq.n	80012f8 <__aeabi_dadd+0x424>
 80012ec:	4667      	mov	r7, ip
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	1bd2      	subs	r2, r2, r7
 80012f2:	4647      	mov	r7, r8
 80012f4:	4097      	lsls	r7, r2
 80012f6:	4339      	orrs	r1, r7
 80012f8:	1e4a      	subs	r2, r1, #1
 80012fa:	4191      	sbcs	r1, r2
 80012fc:	4321      	orrs	r1, r4
 80012fe:	e635      	b.n	8000f6c <__aeabi_dadd+0x98>
 8001300:	4303      	orrs	r3, r0
 8001302:	1e58      	subs	r0, r3, #1
 8001304:	4183      	sbcs	r3, r0
 8001306:	1acc      	subs	r4, r1, r3
 8001308:	42a1      	cmp	r1, r4
 800130a:	41bf      	sbcs	r7, r7
 800130c:	4643      	mov	r3, r8
 800130e:	427f      	negs	r7, r7
 8001310:	4655      	mov	r5, sl
 8001312:	464e      	mov	r6, r9
 8001314:	1bdf      	subs	r7, r3, r7
 8001316:	e62e      	b.n	8000f76 <__aeabi_dadd+0xa2>
 8001318:	0002      	movs	r2, r0
 800131a:	431a      	orrs	r2, r3
 800131c:	d100      	bne.n	8001320 <__aeabi_dadd+0x44c>
 800131e:	e0bd      	b.n	800149c <__aeabi_dadd+0x5c8>
 8001320:	4662      	mov	r2, ip
 8001322:	4664      	mov	r4, ip
 8001324:	3a01      	subs	r2, #1
 8001326:	2c01      	cmp	r4, #1
 8001328:	d100      	bne.n	800132c <__aeabi_dadd+0x458>
 800132a:	e0e5      	b.n	80014f8 <__aeabi_dadd+0x624>
 800132c:	4c85      	ldr	r4, [pc, #532]	; (8001544 <__aeabi_dadd+0x670>)
 800132e:	45a4      	cmp	ip, r4
 8001330:	d058      	beq.n	80013e4 <__aeabi_dadd+0x510>
 8001332:	4694      	mov	ip, r2
 8001334:	e749      	b.n	80011ca <__aeabi_dadd+0x2f6>
 8001336:	4664      	mov	r4, ip
 8001338:	2220      	movs	r2, #32
 800133a:	1b12      	subs	r2, r2, r4
 800133c:	4644      	mov	r4, r8
 800133e:	4094      	lsls	r4, r2
 8001340:	000f      	movs	r7, r1
 8001342:	46a1      	mov	r9, r4
 8001344:	4664      	mov	r4, ip
 8001346:	4091      	lsls	r1, r2
 8001348:	40e7      	lsrs	r7, r4
 800134a:	464c      	mov	r4, r9
 800134c:	1e4a      	subs	r2, r1, #1
 800134e:	4191      	sbcs	r1, r2
 8001350:	433c      	orrs	r4, r7
 8001352:	4642      	mov	r2, r8
 8001354:	430c      	orrs	r4, r1
 8001356:	4661      	mov	r1, ip
 8001358:	40ca      	lsrs	r2, r1
 800135a:	1880      	adds	r0, r0, r2
 800135c:	e6f4      	b.n	8001148 <__aeabi_dadd+0x274>
 800135e:	4c79      	ldr	r4, [pc, #484]	; (8001544 <__aeabi_dadd+0x670>)
 8001360:	42a2      	cmp	r2, r4
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x492>
 8001364:	e6fd      	b.n	8001162 <__aeabi_dadd+0x28e>
 8001366:	1859      	adds	r1, r3, r1
 8001368:	4299      	cmp	r1, r3
 800136a:	419b      	sbcs	r3, r3
 800136c:	4440      	add	r0, r8
 800136e:	425f      	negs	r7, r3
 8001370:	19c7      	adds	r7, r0, r7
 8001372:	07fc      	lsls	r4, r7, #31
 8001374:	0849      	lsrs	r1, r1, #1
 8001376:	0016      	movs	r6, r2
 8001378:	430c      	orrs	r4, r1
 800137a:	087f      	lsrs	r7, r7, #1
 800137c:	e6cf      	b.n	800111e <__aeabi_dadd+0x24a>
 800137e:	1acc      	subs	r4, r1, r3
 8001380:	42a1      	cmp	r1, r4
 8001382:	41bf      	sbcs	r7, r7
 8001384:	4643      	mov	r3, r8
 8001386:	427f      	negs	r7, r7
 8001388:	1a18      	subs	r0, r3, r0
 800138a:	4655      	mov	r5, sl
 800138c:	1bc7      	subs	r7, r0, r7
 800138e:	e5f7      	b.n	8000f80 <__aeabi_dadd+0xac>
 8001390:	08c9      	lsrs	r1, r1, #3
 8001392:	077b      	lsls	r3, r7, #29
 8001394:	4655      	mov	r5, sl
 8001396:	430b      	orrs	r3, r1
 8001398:	08f8      	lsrs	r0, r7, #3
 800139a:	e6c8      	b.n	800112e <__aeabi_dadd+0x25a>
 800139c:	2c00      	cmp	r4, #0
 800139e:	d000      	beq.n	80013a2 <__aeabi_dadd+0x4ce>
 80013a0:	e081      	b.n	80014a6 <__aeabi_dadd+0x5d2>
 80013a2:	4643      	mov	r3, r8
 80013a4:	430b      	orrs	r3, r1
 80013a6:	d115      	bne.n	80013d4 <__aeabi_dadd+0x500>
 80013a8:	2080      	movs	r0, #128	; 0x80
 80013aa:	2500      	movs	r5, #0
 80013ac:	0300      	lsls	r0, r0, #12
 80013ae:	e6e3      	b.n	8001178 <__aeabi_dadd+0x2a4>
 80013b0:	1a5c      	subs	r4, r3, r1
 80013b2:	42a3      	cmp	r3, r4
 80013b4:	419b      	sbcs	r3, r3
 80013b6:	1bc7      	subs	r7, r0, r7
 80013b8:	425b      	negs	r3, r3
 80013ba:	2601      	movs	r6, #1
 80013bc:	1aff      	subs	r7, r7, r3
 80013be:	e5da      	b.n	8000f76 <__aeabi_dadd+0xa2>
 80013c0:	0742      	lsls	r2, r0, #29
 80013c2:	08db      	lsrs	r3, r3, #3
 80013c4:	4313      	orrs	r3, r2
 80013c6:	08c0      	lsrs	r0, r0, #3
 80013c8:	e6d2      	b.n	8001170 <__aeabi_dadd+0x29c>
 80013ca:	0742      	lsls	r2, r0, #29
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	4313      	orrs	r3, r2
 80013d0:	08c0      	lsrs	r0, r0, #3
 80013d2:	e6ac      	b.n	800112e <__aeabi_dadd+0x25a>
 80013d4:	4643      	mov	r3, r8
 80013d6:	4642      	mov	r2, r8
 80013d8:	08c9      	lsrs	r1, r1, #3
 80013da:	075b      	lsls	r3, r3, #29
 80013dc:	4655      	mov	r5, sl
 80013de:	430b      	orrs	r3, r1
 80013e0:	08d0      	lsrs	r0, r2, #3
 80013e2:	e6c5      	b.n	8001170 <__aeabi_dadd+0x29c>
 80013e4:	4643      	mov	r3, r8
 80013e6:	4642      	mov	r2, r8
 80013e8:	075b      	lsls	r3, r3, #29
 80013ea:	08c9      	lsrs	r1, r1, #3
 80013ec:	430b      	orrs	r3, r1
 80013ee:	08d0      	lsrs	r0, r2, #3
 80013f0:	e6be      	b.n	8001170 <__aeabi_dadd+0x29c>
 80013f2:	4303      	orrs	r3, r0
 80013f4:	001c      	movs	r4, r3
 80013f6:	1e63      	subs	r3, r4, #1
 80013f8:	419c      	sbcs	r4, r3
 80013fa:	e6fc      	b.n	80011f6 <__aeabi_dadd+0x322>
 80013fc:	0002      	movs	r2, r0
 80013fe:	3c20      	subs	r4, #32
 8001400:	40e2      	lsrs	r2, r4
 8001402:	0014      	movs	r4, r2
 8001404:	4662      	mov	r2, ip
 8001406:	2a20      	cmp	r2, #32
 8001408:	d003      	beq.n	8001412 <__aeabi_dadd+0x53e>
 800140a:	2540      	movs	r5, #64	; 0x40
 800140c:	1aad      	subs	r5, r5, r2
 800140e:	40a8      	lsls	r0, r5
 8001410:	4303      	orrs	r3, r0
 8001412:	1e58      	subs	r0, r3, #1
 8001414:	4183      	sbcs	r3, r0
 8001416:	4323      	orrs	r3, r4
 8001418:	e775      	b.n	8001306 <__aeabi_dadd+0x432>
 800141a:	2a00      	cmp	r2, #0
 800141c:	d0e2      	beq.n	80013e4 <__aeabi_dadd+0x510>
 800141e:	003a      	movs	r2, r7
 8001420:	430a      	orrs	r2, r1
 8001422:	d0cd      	beq.n	80013c0 <__aeabi_dadd+0x4ec>
 8001424:	0742      	lsls	r2, r0, #29
 8001426:	08db      	lsrs	r3, r3, #3
 8001428:	4313      	orrs	r3, r2
 800142a:	2280      	movs	r2, #128	; 0x80
 800142c:	08c0      	lsrs	r0, r0, #3
 800142e:	0312      	lsls	r2, r2, #12
 8001430:	4210      	tst	r0, r2
 8001432:	d006      	beq.n	8001442 <__aeabi_dadd+0x56e>
 8001434:	08fc      	lsrs	r4, r7, #3
 8001436:	4214      	tst	r4, r2
 8001438:	d103      	bne.n	8001442 <__aeabi_dadd+0x56e>
 800143a:	0020      	movs	r0, r4
 800143c:	08cb      	lsrs	r3, r1, #3
 800143e:	077a      	lsls	r2, r7, #29
 8001440:	4313      	orrs	r3, r2
 8001442:	0f5a      	lsrs	r2, r3, #29
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	0752      	lsls	r2, r2, #29
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	4313      	orrs	r3, r2
 800144c:	e690      	b.n	8001170 <__aeabi_dadd+0x29c>
 800144e:	4643      	mov	r3, r8
 8001450:	430b      	orrs	r3, r1
 8001452:	d100      	bne.n	8001456 <__aeabi_dadd+0x582>
 8001454:	e709      	b.n	800126a <__aeabi_dadd+0x396>
 8001456:	4643      	mov	r3, r8
 8001458:	4642      	mov	r2, r8
 800145a:	08c9      	lsrs	r1, r1, #3
 800145c:	075b      	lsls	r3, r3, #29
 800145e:	4655      	mov	r5, sl
 8001460:	430b      	orrs	r3, r1
 8001462:	08d0      	lsrs	r0, r2, #3
 8001464:	e666      	b.n	8001134 <__aeabi_dadd+0x260>
 8001466:	1acc      	subs	r4, r1, r3
 8001468:	42a1      	cmp	r1, r4
 800146a:	4189      	sbcs	r1, r1
 800146c:	1a3f      	subs	r7, r7, r0
 800146e:	4249      	negs	r1, r1
 8001470:	4655      	mov	r5, sl
 8001472:	2601      	movs	r6, #1
 8001474:	1a7f      	subs	r7, r7, r1
 8001476:	e57e      	b.n	8000f76 <__aeabi_dadd+0xa2>
 8001478:	4642      	mov	r2, r8
 800147a:	1a5c      	subs	r4, r3, r1
 800147c:	1a87      	subs	r7, r0, r2
 800147e:	42a3      	cmp	r3, r4
 8001480:	4192      	sbcs	r2, r2
 8001482:	4252      	negs	r2, r2
 8001484:	1abf      	subs	r7, r7, r2
 8001486:	023a      	lsls	r2, r7, #8
 8001488:	d53d      	bpl.n	8001506 <__aeabi_dadd+0x632>
 800148a:	1acc      	subs	r4, r1, r3
 800148c:	42a1      	cmp	r1, r4
 800148e:	4189      	sbcs	r1, r1
 8001490:	4643      	mov	r3, r8
 8001492:	4249      	negs	r1, r1
 8001494:	1a1f      	subs	r7, r3, r0
 8001496:	4655      	mov	r5, sl
 8001498:	1a7f      	subs	r7, r7, r1
 800149a:	e595      	b.n	8000fc8 <__aeabi_dadd+0xf4>
 800149c:	077b      	lsls	r3, r7, #29
 800149e:	08c9      	lsrs	r1, r1, #3
 80014a0:	430b      	orrs	r3, r1
 80014a2:	08f8      	lsrs	r0, r7, #3
 80014a4:	e643      	b.n	800112e <__aeabi_dadd+0x25a>
 80014a6:	4644      	mov	r4, r8
 80014a8:	08db      	lsrs	r3, r3, #3
 80014aa:	430c      	orrs	r4, r1
 80014ac:	d130      	bne.n	8001510 <__aeabi_dadd+0x63c>
 80014ae:	0742      	lsls	r2, r0, #29
 80014b0:	4313      	orrs	r3, r2
 80014b2:	08c0      	lsrs	r0, r0, #3
 80014b4:	e65c      	b.n	8001170 <__aeabi_dadd+0x29c>
 80014b6:	077b      	lsls	r3, r7, #29
 80014b8:	08c9      	lsrs	r1, r1, #3
 80014ba:	430b      	orrs	r3, r1
 80014bc:	08f8      	lsrs	r0, r7, #3
 80014be:	e639      	b.n	8001134 <__aeabi_dadd+0x260>
 80014c0:	185c      	adds	r4, r3, r1
 80014c2:	429c      	cmp	r4, r3
 80014c4:	419b      	sbcs	r3, r3
 80014c6:	4440      	add	r0, r8
 80014c8:	425b      	negs	r3, r3
 80014ca:	18c7      	adds	r7, r0, r3
 80014cc:	023b      	lsls	r3, r7, #8
 80014ce:	d400      	bmi.n	80014d2 <__aeabi_dadd+0x5fe>
 80014d0:	e625      	b.n	800111e <__aeabi_dadd+0x24a>
 80014d2:	4b1d      	ldr	r3, [pc, #116]	; (8001548 <__aeabi_dadd+0x674>)
 80014d4:	2601      	movs	r6, #1
 80014d6:	401f      	ands	r7, r3
 80014d8:	e621      	b.n	800111e <__aeabi_dadd+0x24a>
 80014da:	0004      	movs	r4, r0
 80014dc:	3a20      	subs	r2, #32
 80014de:	40d4      	lsrs	r4, r2
 80014e0:	4662      	mov	r2, ip
 80014e2:	2a20      	cmp	r2, #32
 80014e4:	d004      	beq.n	80014f0 <__aeabi_dadd+0x61c>
 80014e6:	2240      	movs	r2, #64	; 0x40
 80014e8:	4666      	mov	r6, ip
 80014ea:	1b92      	subs	r2, r2, r6
 80014ec:	4090      	lsls	r0, r2
 80014ee:	4303      	orrs	r3, r0
 80014f0:	1e5a      	subs	r2, r3, #1
 80014f2:	4193      	sbcs	r3, r2
 80014f4:	431c      	orrs	r4, r3
 80014f6:	e67e      	b.n	80011f6 <__aeabi_dadd+0x322>
 80014f8:	185c      	adds	r4, r3, r1
 80014fa:	428c      	cmp	r4, r1
 80014fc:	4189      	sbcs	r1, r1
 80014fe:	4440      	add	r0, r8
 8001500:	4249      	negs	r1, r1
 8001502:	1847      	adds	r7, r0, r1
 8001504:	e6dd      	b.n	80012c2 <__aeabi_dadd+0x3ee>
 8001506:	0023      	movs	r3, r4
 8001508:	433b      	orrs	r3, r7
 800150a:	d100      	bne.n	800150e <__aeabi_dadd+0x63a>
 800150c:	e6ad      	b.n	800126a <__aeabi_dadd+0x396>
 800150e:	e606      	b.n	800111e <__aeabi_dadd+0x24a>
 8001510:	0744      	lsls	r4, r0, #29
 8001512:	4323      	orrs	r3, r4
 8001514:	2480      	movs	r4, #128	; 0x80
 8001516:	08c0      	lsrs	r0, r0, #3
 8001518:	0324      	lsls	r4, r4, #12
 800151a:	4220      	tst	r0, r4
 800151c:	d008      	beq.n	8001530 <__aeabi_dadd+0x65c>
 800151e:	4642      	mov	r2, r8
 8001520:	08d6      	lsrs	r6, r2, #3
 8001522:	4226      	tst	r6, r4
 8001524:	d104      	bne.n	8001530 <__aeabi_dadd+0x65c>
 8001526:	4655      	mov	r5, sl
 8001528:	0030      	movs	r0, r6
 800152a:	08cb      	lsrs	r3, r1, #3
 800152c:	0751      	lsls	r1, r2, #29
 800152e:	430b      	orrs	r3, r1
 8001530:	0f5a      	lsrs	r2, r3, #29
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	08db      	lsrs	r3, r3, #3
 8001536:	0752      	lsls	r2, r2, #29
 8001538:	4313      	orrs	r3, r2
 800153a:	e619      	b.n	8001170 <__aeabi_dadd+0x29c>
 800153c:	2300      	movs	r3, #0
 800153e:	4a01      	ldr	r2, [pc, #4]	; (8001544 <__aeabi_dadd+0x670>)
 8001540:	001f      	movs	r7, r3
 8001542:	e55e      	b.n	8001002 <__aeabi_dadd+0x12e>
 8001544:	000007ff 	.word	0x000007ff
 8001548:	ff7fffff 	.word	0xff7fffff

0800154c <__aeabi_ddiv>:
 800154c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800154e:	4657      	mov	r7, sl
 8001550:	464e      	mov	r6, r9
 8001552:	4645      	mov	r5, r8
 8001554:	46de      	mov	lr, fp
 8001556:	b5e0      	push	{r5, r6, r7, lr}
 8001558:	4681      	mov	r9, r0
 800155a:	0005      	movs	r5, r0
 800155c:	030c      	lsls	r4, r1, #12
 800155e:	0048      	lsls	r0, r1, #1
 8001560:	4692      	mov	sl, r2
 8001562:	001f      	movs	r7, r3
 8001564:	b085      	sub	sp, #20
 8001566:	0b24      	lsrs	r4, r4, #12
 8001568:	0d40      	lsrs	r0, r0, #21
 800156a:	0fce      	lsrs	r6, r1, #31
 800156c:	2800      	cmp	r0, #0
 800156e:	d100      	bne.n	8001572 <__aeabi_ddiv+0x26>
 8001570:	e156      	b.n	8001820 <__aeabi_ddiv+0x2d4>
 8001572:	4bd4      	ldr	r3, [pc, #848]	; (80018c4 <__aeabi_ddiv+0x378>)
 8001574:	4298      	cmp	r0, r3
 8001576:	d100      	bne.n	800157a <__aeabi_ddiv+0x2e>
 8001578:	e172      	b.n	8001860 <__aeabi_ddiv+0x314>
 800157a:	0f6b      	lsrs	r3, r5, #29
 800157c:	00e4      	lsls	r4, r4, #3
 800157e:	431c      	orrs	r4, r3
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	041b      	lsls	r3, r3, #16
 8001584:	4323      	orrs	r3, r4
 8001586:	4698      	mov	r8, r3
 8001588:	4bcf      	ldr	r3, [pc, #828]	; (80018c8 <__aeabi_ddiv+0x37c>)
 800158a:	00ed      	lsls	r5, r5, #3
 800158c:	469b      	mov	fp, r3
 800158e:	2300      	movs	r3, #0
 8001590:	4699      	mov	r9, r3
 8001592:	4483      	add	fp, r0
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	033c      	lsls	r4, r7, #12
 8001598:	007b      	lsls	r3, r7, #1
 800159a:	4650      	mov	r0, sl
 800159c:	0b24      	lsrs	r4, r4, #12
 800159e:	0d5b      	lsrs	r3, r3, #21
 80015a0:	0fff      	lsrs	r7, r7, #31
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d100      	bne.n	80015a8 <__aeabi_ddiv+0x5c>
 80015a6:	e11f      	b.n	80017e8 <__aeabi_ddiv+0x29c>
 80015a8:	4ac6      	ldr	r2, [pc, #792]	; (80018c4 <__aeabi_ddiv+0x378>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d100      	bne.n	80015b0 <__aeabi_ddiv+0x64>
 80015ae:	e162      	b.n	8001876 <__aeabi_ddiv+0x32a>
 80015b0:	49c5      	ldr	r1, [pc, #788]	; (80018c8 <__aeabi_ddiv+0x37c>)
 80015b2:	0f42      	lsrs	r2, r0, #29
 80015b4:	468c      	mov	ip, r1
 80015b6:	00e4      	lsls	r4, r4, #3
 80015b8:	4659      	mov	r1, fp
 80015ba:	4314      	orrs	r4, r2
 80015bc:	2280      	movs	r2, #128	; 0x80
 80015be:	4463      	add	r3, ip
 80015c0:	0412      	lsls	r2, r2, #16
 80015c2:	1acb      	subs	r3, r1, r3
 80015c4:	4314      	orrs	r4, r2
 80015c6:	469b      	mov	fp, r3
 80015c8:	00c2      	lsls	r2, r0, #3
 80015ca:	2000      	movs	r0, #0
 80015cc:	0033      	movs	r3, r6
 80015ce:	407b      	eors	r3, r7
 80015d0:	469a      	mov	sl, r3
 80015d2:	464b      	mov	r3, r9
 80015d4:	2b0f      	cmp	r3, #15
 80015d6:	d827      	bhi.n	8001628 <__aeabi_ddiv+0xdc>
 80015d8:	49bc      	ldr	r1, [pc, #752]	; (80018cc <__aeabi_ddiv+0x380>)
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	58cb      	ldr	r3, [r1, r3]
 80015de:	469f      	mov	pc, r3
 80015e0:	46b2      	mov	sl, r6
 80015e2:	9b00      	ldr	r3, [sp, #0]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d016      	beq.n	8001616 <__aeabi_ddiv+0xca>
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d100      	bne.n	80015ee <__aeabi_ddiv+0xa2>
 80015ec:	e28e      	b.n	8001b0c <__aeabi_ddiv+0x5c0>
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d000      	beq.n	80015f4 <__aeabi_ddiv+0xa8>
 80015f2:	e0d9      	b.n	80017a8 <__aeabi_ddiv+0x25c>
 80015f4:	2300      	movs	r3, #0
 80015f6:	2400      	movs	r4, #0
 80015f8:	2500      	movs	r5, #0
 80015fa:	4652      	mov	r2, sl
 80015fc:	051b      	lsls	r3, r3, #20
 80015fe:	4323      	orrs	r3, r4
 8001600:	07d2      	lsls	r2, r2, #31
 8001602:	4313      	orrs	r3, r2
 8001604:	0028      	movs	r0, r5
 8001606:	0019      	movs	r1, r3
 8001608:	b005      	add	sp, #20
 800160a:	bcf0      	pop	{r4, r5, r6, r7}
 800160c:	46bb      	mov	fp, r7
 800160e:	46b2      	mov	sl, r6
 8001610:	46a9      	mov	r9, r5
 8001612:	46a0      	mov	r8, r4
 8001614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001616:	2400      	movs	r4, #0
 8001618:	2500      	movs	r5, #0
 800161a:	4baa      	ldr	r3, [pc, #680]	; (80018c4 <__aeabi_ddiv+0x378>)
 800161c:	e7ed      	b.n	80015fa <__aeabi_ddiv+0xae>
 800161e:	46ba      	mov	sl, r7
 8001620:	46a0      	mov	r8, r4
 8001622:	0015      	movs	r5, r2
 8001624:	9000      	str	r0, [sp, #0]
 8001626:	e7dc      	b.n	80015e2 <__aeabi_ddiv+0x96>
 8001628:	4544      	cmp	r4, r8
 800162a:	d200      	bcs.n	800162e <__aeabi_ddiv+0xe2>
 800162c:	e1c7      	b.n	80019be <__aeabi_ddiv+0x472>
 800162e:	d100      	bne.n	8001632 <__aeabi_ddiv+0xe6>
 8001630:	e1c2      	b.n	80019b8 <__aeabi_ddiv+0x46c>
 8001632:	2301      	movs	r3, #1
 8001634:	425b      	negs	r3, r3
 8001636:	469c      	mov	ip, r3
 8001638:	002e      	movs	r6, r5
 800163a:	4640      	mov	r0, r8
 800163c:	2500      	movs	r5, #0
 800163e:	44e3      	add	fp, ip
 8001640:	0223      	lsls	r3, r4, #8
 8001642:	0e14      	lsrs	r4, r2, #24
 8001644:	431c      	orrs	r4, r3
 8001646:	0c1b      	lsrs	r3, r3, #16
 8001648:	4699      	mov	r9, r3
 800164a:	0423      	lsls	r3, r4, #16
 800164c:	0c1f      	lsrs	r7, r3, #16
 800164e:	0212      	lsls	r2, r2, #8
 8001650:	4649      	mov	r1, r9
 8001652:	9200      	str	r2, [sp, #0]
 8001654:	9701      	str	r7, [sp, #4]
 8001656:	f7fe fdf9 	bl	800024c <__aeabi_uidivmod>
 800165a:	0002      	movs	r2, r0
 800165c:	437a      	muls	r2, r7
 800165e:	040b      	lsls	r3, r1, #16
 8001660:	0c31      	lsrs	r1, r6, #16
 8001662:	4680      	mov	r8, r0
 8001664:	4319      	orrs	r1, r3
 8001666:	428a      	cmp	r2, r1
 8001668:	d907      	bls.n	800167a <__aeabi_ddiv+0x12e>
 800166a:	2301      	movs	r3, #1
 800166c:	425b      	negs	r3, r3
 800166e:	469c      	mov	ip, r3
 8001670:	1909      	adds	r1, r1, r4
 8001672:	44e0      	add	r8, ip
 8001674:	428c      	cmp	r4, r1
 8001676:	d800      	bhi.n	800167a <__aeabi_ddiv+0x12e>
 8001678:	e207      	b.n	8001a8a <__aeabi_ddiv+0x53e>
 800167a:	1a88      	subs	r0, r1, r2
 800167c:	4649      	mov	r1, r9
 800167e:	f7fe fde5 	bl	800024c <__aeabi_uidivmod>
 8001682:	0409      	lsls	r1, r1, #16
 8001684:	468c      	mov	ip, r1
 8001686:	0431      	lsls	r1, r6, #16
 8001688:	4666      	mov	r6, ip
 800168a:	9a01      	ldr	r2, [sp, #4]
 800168c:	0c09      	lsrs	r1, r1, #16
 800168e:	4342      	muls	r2, r0
 8001690:	0003      	movs	r3, r0
 8001692:	4331      	orrs	r1, r6
 8001694:	428a      	cmp	r2, r1
 8001696:	d904      	bls.n	80016a2 <__aeabi_ddiv+0x156>
 8001698:	1909      	adds	r1, r1, r4
 800169a:	3b01      	subs	r3, #1
 800169c:	428c      	cmp	r4, r1
 800169e:	d800      	bhi.n	80016a2 <__aeabi_ddiv+0x156>
 80016a0:	e1ed      	b.n	8001a7e <__aeabi_ddiv+0x532>
 80016a2:	1a88      	subs	r0, r1, r2
 80016a4:	4642      	mov	r2, r8
 80016a6:	0412      	lsls	r2, r2, #16
 80016a8:	431a      	orrs	r2, r3
 80016aa:	4690      	mov	r8, r2
 80016ac:	4641      	mov	r1, r8
 80016ae:	9b00      	ldr	r3, [sp, #0]
 80016b0:	040e      	lsls	r6, r1, #16
 80016b2:	0c1b      	lsrs	r3, r3, #16
 80016b4:	001f      	movs	r7, r3
 80016b6:	9302      	str	r3, [sp, #8]
 80016b8:	9b00      	ldr	r3, [sp, #0]
 80016ba:	0c36      	lsrs	r6, r6, #16
 80016bc:	041b      	lsls	r3, r3, #16
 80016be:	0c19      	lsrs	r1, r3, #16
 80016c0:	000b      	movs	r3, r1
 80016c2:	4373      	muls	r3, r6
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	437e      	muls	r6, r7
 80016c8:	9103      	str	r1, [sp, #12]
 80016ca:	4351      	muls	r1, r2
 80016cc:	437a      	muls	r2, r7
 80016ce:	0c1f      	lsrs	r7, r3, #16
 80016d0:	46bc      	mov	ip, r7
 80016d2:	1876      	adds	r6, r6, r1
 80016d4:	4466      	add	r6, ip
 80016d6:	42b1      	cmp	r1, r6
 80016d8:	d903      	bls.n	80016e2 <__aeabi_ddiv+0x196>
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0249      	lsls	r1, r1, #9
 80016de:	468c      	mov	ip, r1
 80016e0:	4462      	add	r2, ip
 80016e2:	0c31      	lsrs	r1, r6, #16
 80016e4:	188a      	adds	r2, r1, r2
 80016e6:	0431      	lsls	r1, r6, #16
 80016e8:	041e      	lsls	r6, r3, #16
 80016ea:	0c36      	lsrs	r6, r6, #16
 80016ec:	198e      	adds	r6, r1, r6
 80016ee:	4290      	cmp	r0, r2
 80016f0:	d302      	bcc.n	80016f8 <__aeabi_ddiv+0x1ac>
 80016f2:	d112      	bne.n	800171a <__aeabi_ddiv+0x1ce>
 80016f4:	42b5      	cmp	r5, r6
 80016f6:	d210      	bcs.n	800171a <__aeabi_ddiv+0x1ce>
 80016f8:	4643      	mov	r3, r8
 80016fa:	1e59      	subs	r1, r3, #1
 80016fc:	9b00      	ldr	r3, [sp, #0]
 80016fe:	469c      	mov	ip, r3
 8001700:	4465      	add	r5, ip
 8001702:	001f      	movs	r7, r3
 8001704:	429d      	cmp	r5, r3
 8001706:	419b      	sbcs	r3, r3
 8001708:	425b      	negs	r3, r3
 800170a:	191b      	adds	r3, r3, r4
 800170c:	18c0      	adds	r0, r0, r3
 800170e:	4284      	cmp	r4, r0
 8001710:	d200      	bcs.n	8001714 <__aeabi_ddiv+0x1c8>
 8001712:	e1a0      	b.n	8001a56 <__aeabi_ddiv+0x50a>
 8001714:	d100      	bne.n	8001718 <__aeabi_ddiv+0x1cc>
 8001716:	e19b      	b.n	8001a50 <__aeabi_ddiv+0x504>
 8001718:	4688      	mov	r8, r1
 800171a:	1bae      	subs	r6, r5, r6
 800171c:	42b5      	cmp	r5, r6
 800171e:	41ad      	sbcs	r5, r5
 8001720:	1a80      	subs	r0, r0, r2
 8001722:	426d      	negs	r5, r5
 8001724:	1b40      	subs	r0, r0, r5
 8001726:	4284      	cmp	r4, r0
 8001728:	d100      	bne.n	800172c <__aeabi_ddiv+0x1e0>
 800172a:	e1d5      	b.n	8001ad8 <__aeabi_ddiv+0x58c>
 800172c:	4649      	mov	r1, r9
 800172e:	f7fe fd8d 	bl	800024c <__aeabi_uidivmod>
 8001732:	9a01      	ldr	r2, [sp, #4]
 8001734:	040b      	lsls	r3, r1, #16
 8001736:	4342      	muls	r2, r0
 8001738:	0c31      	lsrs	r1, r6, #16
 800173a:	0005      	movs	r5, r0
 800173c:	4319      	orrs	r1, r3
 800173e:	428a      	cmp	r2, r1
 8001740:	d900      	bls.n	8001744 <__aeabi_ddiv+0x1f8>
 8001742:	e16c      	b.n	8001a1e <__aeabi_ddiv+0x4d2>
 8001744:	1a88      	subs	r0, r1, r2
 8001746:	4649      	mov	r1, r9
 8001748:	f7fe fd80 	bl	800024c <__aeabi_uidivmod>
 800174c:	9a01      	ldr	r2, [sp, #4]
 800174e:	0436      	lsls	r6, r6, #16
 8001750:	4342      	muls	r2, r0
 8001752:	0409      	lsls	r1, r1, #16
 8001754:	0c36      	lsrs	r6, r6, #16
 8001756:	0003      	movs	r3, r0
 8001758:	430e      	orrs	r6, r1
 800175a:	42b2      	cmp	r2, r6
 800175c:	d900      	bls.n	8001760 <__aeabi_ddiv+0x214>
 800175e:	e153      	b.n	8001a08 <__aeabi_ddiv+0x4bc>
 8001760:	9803      	ldr	r0, [sp, #12]
 8001762:	1ab6      	subs	r6, r6, r2
 8001764:	0002      	movs	r2, r0
 8001766:	042d      	lsls	r5, r5, #16
 8001768:	431d      	orrs	r5, r3
 800176a:	9f02      	ldr	r7, [sp, #8]
 800176c:	042b      	lsls	r3, r5, #16
 800176e:	0c1b      	lsrs	r3, r3, #16
 8001770:	435a      	muls	r2, r3
 8001772:	437b      	muls	r3, r7
 8001774:	469c      	mov	ip, r3
 8001776:	0c29      	lsrs	r1, r5, #16
 8001778:	4348      	muls	r0, r1
 800177a:	0c13      	lsrs	r3, r2, #16
 800177c:	4484      	add	ip, r0
 800177e:	4463      	add	r3, ip
 8001780:	4379      	muls	r1, r7
 8001782:	4298      	cmp	r0, r3
 8001784:	d903      	bls.n	800178e <__aeabi_ddiv+0x242>
 8001786:	2080      	movs	r0, #128	; 0x80
 8001788:	0240      	lsls	r0, r0, #9
 800178a:	4684      	mov	ip, r0
 800178c:	4461      	add	r1, ip
 800178e:	0c18      	lsrs	r0, r3, #16
 8001790:	0412      	lsls	r2, r2, #16
 8001792:	041b      	lsls	r3, r3, #16
 8001794:	0c12      	lsrs	r2, r2, #16
 8001796:	1841      	adds	r1, r0, r1
 8001798:	189b      	adds	r3, r3, r2
 800179a:	428e      	cmp	r6, r1
 800179c:	d200      	bcs.n	80017a0 <__aeabi_ddiv+0x254>
 800179e:	e0ff      	b.n	80019a0 <__aeabi_ddiv+0x454>
 80017a0:	d100      	bne.n	80017a4 <__aeabi_ddiv+0x258>
 80017a2:	e0fa      	b.n	800199a <__aeabi_ddiv+0x44e>
 80017a4:	2301      	movs	r3, #1
 80017a6:	431d      	orrs	r5, r3
 80017a8:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <__aeabi_ddiv+0x384>)
 80017aa:	445a      	add	r2, fp
 80017ac:	2a00      	cmp	r2, #0
 80017ae:	dc00      	bgt.n	80017b2 <__aeabi_ddiv+0x266>
 80017b0:	e0aa      	b.n	8001908 <__aeabi_ddiv+0x3bc>
 80017b2:	076b      	lsls	r3, r5, #29
 80017b4:	d000      	beq.n	80017b8 <__aeabi_ddiv+0x26c>
 80017b6:	e13d      	b.n	8001a34 <__aeabi_ddiv+0x4e8>
 80017b8:	08ed      	lsrs	r5, r5, #3
 80017ba:	4643      	mov	r3, r8
 80017bc:	01db      	lsls	r3, r3, #7
 80017be:	d506      	bpl.n	80017ce <__aeabi_ddiv+0x282>
 80017c0:	4642      	mov	r2, r8
 80017c2:	4b44      	ldr	r3, [pc, #272]	; (80018d4 <__aeabi_ddiv+0x388>)
 80017c4:	401a      	ands	r2, r3
 80017c6:	4690      	mov	r8, r2
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	00d2      	lsls	r2, r2, #3
 80017cc:	445a      	add	r2, fp
 80017ce:	4b42      	ldr	r3, [pc, #264]	; (80018d8 <__aeabi_ddiv+0x38c>)
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dd00      	ble.n	80017d6 <__aeabi_ddiv+0x28a>
 80017d4:	e71f      	b.n	8001616 <__aeabi_ddiv+0xca>
 80017d6:	4643      	mov	r3, r8
 80017d8:	075b      	lsls	r3, r3, #29
 80017da:	431d      	orrs	r5, r3
 80017dc:	4643      	mov	r3, r8
 80017de:	0552      	lsls	r2, r2, #21
 80017e0:	025c      	lsls	r4, r3, #9
 80017e2:	0b24      	lsrs	r4, r4, #12
 80017e4:	0d53      	lsrs	r3, r2, #21
 80017e6:	e708      	b.n	80015fa <__aeabi_ddiv+0xae>
 80017e8:	4652      	mov	r2, sl
 80017ea:	4322      	orrs	r2, r4
 80017ec:	d100      	bne.n	80017f0 <__aeabi_ddiv+0x2a4>
 80017ee:	e07b      	b.n	80018e8 <__aeabi_ddiv+0x39c>
 80017f0:	2c00      	cmp	r4, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_ddiv+0x2aa>
 80017f4:	e0fa      	b.n	80019ec <__aeabi_ddiv+0x4a0>
 80017f6:	0020      	movs	r0, r4
 80017f8:	f001 fa22 	bl	8002c40 <__clzsi2>
 80017fc:	0002      	movs	r2, r0
 80017fe:	3a0b      	subs	r2, #11
 8001800:	231d      	movs	r3, #29
 8001802:	0001      	movs	r1, r0
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	4652      	mov	r2, sl
 8001808:	3908      	subs	r1, #8
 800180a:	40da      	lsrs	r2, r3
 800180c:	408c      	lsls	r4, r1
 800180e:	4314      	orrs	r4, r2
 8001810:	4652      	mov	r2, sl
 8001812:	408a      	lsls	r2, r1
 8001814:	4b31      	ldr	r3, [pc, #196]	; (80018dc <__aeabi_ddiv+0x390>)
 8001816:	4458      	add	r0, fp
 8001818:	469b      	mov	fp, r3
 800181a:	4483      	add	fp, r0
 800181c:	2000      	movs	r0, #0
 800181e:	e6d5      	b.n	80015cc <__aeabi_ddiv+0x80>
 8001820:	464b      	mov	r3, r9
 8001822:	4323      	orrs	r3, r4
 8001824:	4698      	mov	r8, r3
 8001826:	d044      	beq.n	80018b2 <__aeabi_ddiv+0x366>
 8001828:	2c00      	cmp	r4, #0
 800182a:	d100      	bne.n	800182e <__aeabi_ddiv+0x2e2>
 800182c:	e0ce      	b.n	80019cc <__aeabi_ddiv+0x480>
 800182e:	0020      	movs	r0, r4
 8001830:	f001 fa06 	bl	8002c40 <__clzsi2>
 8001834:	0001      	movs	r1, r0
 8001836:	0002      	movs	r2, r0
 8001838:	390b      	subs	r1, #11
 800183a:	231d      	movs	r3, #29
 800183c:	1a5b      	subs	r3, r3, r1
 800183e:	4649      	mov	r1, r9
 8001840:	0010      	movs	r0, r2
 8001842:	40d9      	lsrs	r1, r3
 8001844:	3808      	subs	r0, #8
 8001846:	4084      	lsls	r4, r0
 8001848:	000b      	movs	r3, r1
 800184a:	464d      	mov	r5, r9
 800184c:	4323      	orrs	r3, r4
 800184e:	4698      	mov	r8, r3
 8001850:	4085      	lsls	r5, r0
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <__aeabi_ddiv+0x394>)
 8001854:	1a83      	subs	r3, r0, r2
 8001856:	469b      	mov	fp, r3
 8001858:	2300      	movs	r3, #0
 800185a:	4699      	mov	r9, r3
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	e69a      	b.n	8001596 <__aeabi_ddiv+0x4a>
 8001860:	464b      	mov	r3, r9
 8001862:	4323      	orrs	r3, r4
 8001864:	4698      	mov	r8, r3
 8001866:	d11d      	bne.n	80018a4 <__aeabi_ddiv+0x358>
 8001868:	2308      	movs	r3, #8
 800186a:	4699      	mov	r9, r3
 800186c:	3b06      	subs	r3, #6
 800186e:	2500      	movs	r5, #0
 8001870:	4683      	mov	fp, r0
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	e68f      	b.n	8001596 <__aeabi_ddiv+0x4a>
 8001876:	4652      	mov	r2, sl
 8001878:	4322      	orrs	r2, r4
 800187a:	d109      	bne.n	8001890 <__aeabi_ddiv+0x344>
 800187c:	2302      	movs	r3, #2
 800187e:	4649      	mov	r1, r9
 8001880:	4319      	orrs	r1, r3
 8001882:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <__aeabi_ddiv+0x398>)
 8001884:	4689      	mov	r9, r1
 8001886:	469c      	mov	ip, r3
 8001888:	2400      	movs	r4, #0
 800188a:	2002      	movs	r0, #2
 800188c:	44e3      	add	fp, ip
 800188e:	e69d      	b.n	80015cc <__aeabi_ddiv+0x80>
 8001890:	2303      	movs	r3, #3
 8001892:	464a      	mov	r2, r9
 8001894:	431a      	orrs	r2, r3
 8001896:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <__aeabi_ddiv+0x398>)
 8001898:	4691      	mov	r9, r2
 800189a:	469c      	mov	ip, r3
 800189c:	4652      	mov	r2, sl
 800189e:	2003      	movs	r0, #3
 80018a0:	44e3      	add	fp, ip
 80018a2:	e693      	b.n	80015cc <__aeabi_ddiv+0x80>
 80018a4:	230c      	movs	r3, #12
 80018a6:	4699      	mov	r9, r3
 80018a8:	3b09      	subs	r3, #9
 80018aa:	46a0      	mov	r8, r4
 80018ac:	4683      	mov	fp, r0
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	e671      	b.n	8001596 <__aeabi_ddiv+0x4a>
 80018b2:	2304      	movs	r3, #4
 80018b4:	4699      	mov	r9, r3
 80018b6:	2300      	movs	r3, #0
 80018b8:	469b      	mov	fp, r3
 80018ba:	3301      	adds	r3, #1
 80018bc:	2500      	movs	r5, #0
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	e669      	b.n	8001596 <__aeabi_ddiv+0x4a>
 80018c2:	46c0      	nop			; (mov r8, r8)
 80018c4:	000007ff 	.word	0x000007ff
 80018c8:	fffffc01 	.word	0xfffffc01
 80018cc:	08009adc 	.word	0x08009adc
 80018d0:	000003ff 	.word	0x000003ff
 80018d4:	feffffff 	.word	0xfeffffff
 80018d8:	000007fe 	.word	0x000007fe
 80018dc:	000003f3 	.word	0x000003f3
 80018e0:	fffffc0d 	.word	0xfffffc0d
 80018e4:	fffff801 	.word	0xfffff801
 80018e8:	4649      	mov	r1, r9
 80018ea:	2301      	movs	r3, #1
 80018ec:	4319      	orrs	r1, r3
 80018ee:	4689      	mov	r9, r1
 80018f0:	2400      	movs	r4, #0
 80018f2:	2001      	movs	r0, #1
 80018f4:	e66a      	b.n	80015cc <__aeabi_ddiv+0x80>
 80018f6:	2300      	movs	r3, #0
 80018f8:	2480      	movs	r4, #128	; 0x80
 80018fa:	469a      	mov	sl, r3
 80018fc:	2500      	movs	r5, #0
 80018fe:	4b8a      	ldr	r3, [pc, #552]	; (8001b28 <__aeabi_ddiv+0x5dc>)
 8001900:	0324      	lsls	r4, r4, #12
 8001902:	e67a      	b.n	80015fa <__aeabi_ddiv+0xae>
 8001904:	2501      	movs	r5, #1
 8001906:	426d      	negs	r5, r5
 8001908:	2301      	movs	r3, #1
 800190a:	1a9b      	subs	r3, r3, r2
 800190c:	2b38      	cmp	r3, #56	; 0x38
 800190e:	dd00      	ble.n	8001912 <__aeabi_ddiv+0x3c6>
 8001910:	e670      	b.n	80015f4 <__aeabi_ddiv+0xa8>
 8001912:	2b1f      	cmp	r3, #31
 8001914:	dc00      	bgt.n	8001918 <__aeabi_ddiv+0x3cc>
 8001916:	e0bf      	b.n	8001a98 <__aeabi_ddiv+0x54c>
 8001918:	211f      	movs	r1, #31
 800191a:	4249      	negs	r1, r1
 800191c:	1a8a      	subs	r2, r1, r2
 800191e:	4641      	mov	r1, r8
 8001920:	40d1      	lsrs	r1, r2
 8001922:	000a      	movs	r2, r1
 8001924:	2b20      	cmp	r3, #32
 8001926:	d004      	beq.n	8001932 <__aeabi_ddiv+0x3e6>
 8001928:	4641      	mov	r1, r8
 800192a:	4b80      	ldr	r3, [pc, #512]	; (8001b2c <__aeabi_ddiv+0x5e0>)
 800192c:	445b      	add	r3, fp
 800192e:	4099      	lsls	r1, r3
 8001930:	430d      	orrs	r5, r1
 8001932:	1e6b      	subs	r3, r5, #1
 8001934:	419d      	sbcs	r5, r3
 8001936:	2307      	movs	r3, #7
 8001938:	432a      	orrs	r2, r5
 800193a:	001d      	movs	r5, r3
 800193c:	2400      	movs	r4, #0
 800193e:	4015      	ands	r5, r2
 8001940:	4213      	tst	r3, r2
 8001942:	d100      	bne.n	8001946 <__aeabi_ddiv+0x3fa>
 8001944:	e0d4      	b.n	8001af0 <__aeabi_ddiv+0x5a4>
 8001946:	210f      	movs	r1, #15
 8001948:	2300      	movs	r3, #0
 800194a:	4011      	ands	r1, r2
 800194c:	2904      	cmp	r1, #4
 800194e:	d100      	bne.n	8001952 <__aeabi_ddiv+0x406>
 8001950:	e0cb      	b.n	8001aea <__aeabi_ddiv+0x59e>
 8001952:	1d11      	adds	r1, r2, #4
 8001954:	4291      	cmp	r1, r2
 8001956:	4192      	sbcs	r2, r2
 8001958:	4252      	negs	r2, r2
 800195a:	189b      	adds	r3, r3, r2
 800195c:	000a      	movs	r2, r1
 800195e:	0219      	lsls	r1, r3, #8
 8001960:	d400      	bmi.n	8001964 <__aeabi_ddiv+0x418>
 8001962:	e0c2      	b.n	8001aea <__aeabi_ddiv+0x59e>
 8001964:	2301      	movs	r3, #1
 8001966:	2400      	movs	r4, #0
 8001968:	2500      	movs	r5, #0
 800196a:	e646      	b.n	80015fa <__aeabi_ddiv+0xae>
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	4641      	mov	r1, r8
 8001970:	031b      	lsls	r3, r3, #12
 8001972:	4219      	tst	r1, r3
 8001974:	d008      	beq.n	8001988 <__aeabi_ddiv+0x43c>
 8001976:	421c      	tst	r4, r3
 8001978:	d106      	bne.n	8001988 <__aeabi_ddiv+0x43c>
 800197a:	431c      	orrs	r4, r3
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	46ba      	mov	sl, r7
 8001980:	0015      	movs	r5, r2
 8001982:	4b69      	ldr	r3, [pc, #420]	; (8001b28 <__aeabi_ddiv+0x5dc>)
 8001984:	0b24      	lsrs	r4, r4, #12
 8001986:	e638      	b.n	80015fa <__aeabi_ddiv+0xae>
 8001988:	2480      	movs	r4, #128	; 0x80
 800198a:	4643      	mov	r3, r8
 800198c:	0324      	lsls	r4, r4, #12
 800198e:	431c      	orrs	r4, r3
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	46b2      	mov	sl, r6
 8001994:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <__aeabi_ddiv+0x5dc>)
 8001996:	0b24      	lsrs	r4, r4, #12
 8001998:	e62f      	b.n	80015fa <__aeabi_ddiv+0xae>
 800199a:	2b00      	cmp	r3, #0
 800199c:	d100      	bne.n	80019a0 <__aeabi_ddiv+0x454>
 800199e:	e703      	b.n	80017a8 <__aeabi_ddiv+0x25c>
 80019a0:	19a6      	adds	r6, r4, r6
 80019a2:	1e68      	subs	r0, r5, #1
 80019a4:	42a6      	cmp	r6, r4
 80019a6:	d200      	bcs.n	80019aa <__aeabi_ddiv+0x45e>
 80019a8:	e08d      	b.n	8001ac6 <__aeabi_ddiv+0x57a>
 80019aa:	428e      	cmp	r6, r1
 80019ac:	d200      	bcs.n	80019b0 <__aeabi_ddiv+0x464>
 80019ae:	e0a3      	b.n	8001af8 <__aeabi_ddiv+0x5ac>
 80019b0:	d100      	bne.n	80019b4 <__aeabi_ddiv+0x468>
 80019b2:	e0b3      	b.n	8001b1c <__aeabi_ddiv+0x5d0>
 80019b4:	0005      	movs	r5, r0
 80019b6:	e6f5      	b.n	80017a4 <__aeabi_ddiv+0x258>
 80019b8:	42aa      	cmp	r2, r5
 80019ba:	d900      	bls.n	80019be <__aeabi_ddiv+0x472>
 80019bc:	e639      	b.n	8001632 <__aeabi_ddiv+0xe6>
 80019be:	4643      	mov	r3, r8
 80019c0:	07de      	lsls	r6, r3, #31
 80019c2:	0858      	lsrs	r0, r3, #1
 80019c4:	086b      	lsrs	r3, r5, #1
 80019c6:	431e      	orrs	r6, r3
 80019c8:	07ed      	lsls	r5, r5, #31
 80019ca:	e639      	b.n	8001640 <__aeabi_ddiv+0xf4>
 80019cc:	4648      	mov	r0, r9
 80019ce:	f001 f937 	bl	8002c40 <__clzsi2>
 80019d2:	0001      	movs	r1, r0
 80019d4:	0002      	movs	r2, r0
 80019d6:	3115      	adds	r1, #21
 80019d8:	3220      	adds	r2, #32
 80019da:	291c      	cmp	r1, #28
 80019dc:	dc00      	bgt.n	80019e0 <__aeabi_ddiv+0x494>
 80019de:	e72c      	b.n	800183a <__aeabi_ddiv+0x2ee>
 80019e0:	464b      	mov	r3, r9
 80019e2:	3808      	subs	r0, #8
 80019e4:	4083      	lsls	r3, r0
 80019e6:	2500      	movs	r5, #0
 80019e8:	4698      	mov	r8, r3
 80019ea:	e732      	b.n	8001852 <__aeabi_ddiv+0x306>
 80019ec:	f001 f928 	bl	8002c40 <__clzsi2>
 80019f0:	0003      	movs	r3, r0
 80019f2:	001a      	movs	r2, r3
 80019f4:	3215      	adds	r2, #21
 80019f6:	3020      	adds	r0, #32
 80019f8:	2a1c      	cmp	r2, #28
 80019fa:	dc00      	bgt.n	80019fe <__aeabi_ddiv+0x4b2>
 80019fc:	e700      	b.n	8001800 <__aeabi_ddiv+0x2b4>
 80019fe:	4654      	mov	r4, sl
 8001a00:	3b08      	subs	r3, #8
 8001a02:	2200      	movs	r2, #0
 8001a04:	409c      	lsls	r4, r3
 8001a06:	e705      	b.n	8001814 <__aeabi_ddiv+0x2c8>
 8001a08:	1936      	adds	r6, r6, r4
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	42b4      	cmp	r4, r6
 8001a0e:	d900      	bls.n	8001a12 <__aeabi_ddiv+0x4c6>
 8001a10:	e6a6      	b.n	8001760 <__aeabi_ddiv+0x214>
 8001a12:	42b2      	cmp	r2, r6
 8001a14:	d800      	bhi.n	8001a18 <__aeabi_ddiv+0x4cc>
 8001a16:	e6a3      	b.n	8001760 <__aeabi_ddiv+0x214>
 8001a18:	1e83      	subs	r3, r0, #2
 8001a1a:	1936      	adds	r6, r6, r4
 8001a1c:	e6a0      	b.n	8001760 <__aeabi_ddiv+0x214>
 8001a1e:	1909      	adds	r1, r1, r4
 8001a20:	3d01      	subs	r5, #1
 8001a22:	428c      	cmp	r4, r1
 8001a24:	d900      	bls.n	8001a28 <__aeabi_ddiv+0x4dc>
 8001a26:	e68d      	b.n	8001744 <__aeabi_ddiv+0x1f8>
 8001a28:	428a      	cmp	r2, r1
 8001a2a:	d800      	bhi.n	8001a2e <__aeabi_ddiv+0x4e2>
 8001a2c:	e68a      	b.n	8001744 <__aeabi_ddiv+0x1f8>
 8001a2e:	1e85      	subs	r5, r0, #2
 8001a30:	1909      	adds	r1, r1, r4
 8001a32:	e687      	b.n	8001744 <__aeabi_ddiv+0x1f8>
 8001a34:	230f      	movs	r3, #15
 8001a36:	402b      	ands	r3, r5
 8001a38:	2b04      	cmp	r3, #4
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_ddiv+0x4f2>
 8001a3c:	e6bc      	b.n	80017b8 <__aeabi_ddiv+0x26c>
 8001a3e:	2305      	movs	r3, #5
 8001a40:	425b      	negs	r3, r3
 8001a42:	42ab      	cmp	r3, r5
 8001a44:	419b      	sbcs	r3, r3
 8001a46:	3504      	adds	r5, #4
 8001a48:	425b      	negs	r3, r3
 8001a4a:	08ed      	lsrs	r5, r5, #3
 8001a4c:	4498      	add	r8, r3
 8001a4e:	e6b4      	b.n	80017ba <__aeabi_ddiv+0x26e>
 8001a50:	42af      	cmp	r7, r5
 8001a52:	d900      	bls.n	8001a56 <__aeabi_ddiv+0x50a>
 8001a54:	e660      	b.n	8001718 <__aeabi_ddiv+0x1cc>
 8001a56:	4282      	cmp	r2, r0
 8001a58:	d804      	bhi.n	8001a64 <__aeabi_ddiv+0x518>
 8001a5a:	d000      	beq.n	8001a5e <__aeabi_ddiv+0x512>
 8001a5c:	e65c      	b.n	8001718 <__aeabi_ddiv+0x1cc>
 8001a5e:	42ae      	cmp	r6, r5
 8001a60:	d800      	bhi.n	8001a64 <__aeabi_ddiv+0x518>
 8001a62:	e659      	b.n	8001718 <__aeabi_ddiv+0x1cc>
 8001a64:	2302      	movs	r3, #2
 8001a66:	425b      	negs	r3, r3
 8001a68:	469c      	mov	ip, r3
 8001a6a:	9b00      	ldr	r3, [sp, #0]
 8001a6c:	44e0      	add	r8, ip
 8001a6e:	469c      	mov	ip, r3
 8001a70:	4465      	add	r5, ip
 8001a72:	429d      	cmp	r5, r3
 8001a74:	419b      	sbcs	r3, r3
 8001a76:	425b      	negs	r3, r3
 8001a78:	191b      	adds	r3, r3, r4
 8001a7a:	18c0      	adds	r0, r0, r3
 8001a7c:	e64d      	b.n	800171a <__aeabi_ddiv+0x1ce>
 8001a7e:	428a      	cmp	r2, r1
 8001a80:	d800      	bhi.n	8001a84 <__aeabi_ddiv+0x538>
 8001a82:	e60e      	b.n	80016a2 <__aeabi_ddiv+0x156>
 8001a84:	1e83      	subs	r3, r0, #2
 8001a86:	1909      	adds	r1, r1, r4
 8001a88:	e60b      	b.n	80016a2 <__aeabi_ddiv+0x156>
 8001a8a:	428a      	cmp	r2, r1
 8001a8c:	d800      	bhi.n	8001a90 <__aeabi_ddiv+0x544>
 8001a8e:	e5f4      	b.n	800167a <__aeabi_ddiv+0x12e>
 8001a90:	1e83      	subs	r3, r0, #2
 8001a92:	4698      	mov	r8, r3
 8001a94:	1909      	adds	r1, r1, r4
 8001a96:	e5f0      	b.n	800167a <__aeabi_ddiv+0x12e>
 8001a98:	4925      	ldr	r1, [pc, #148]	; (8001b30 <__aeabi_ddiv+0x5e4>)
 8001a9a:	0028      	movs	r0, r5
 8001a9c:	4459      	add	r1, fp
 8001a9e:	408d      	lsls	r5, r1
 8001aa0:	4642      	mov	r2, r8
 8001aa2:	408a      	lsls	r2, r1
 8001aa4:	1e69      	subs	r1, r5, #1
 8001aa6:	418d      	sbcs	r5, r1
 8001aa8:	4641      	mov	r1, r8
 8001aaa:	40d8      	lsrs	r0, r3
 8001aac:	40d9      	lsrs	r1, r3
 8001aae:	4302      	orrs	r2, r0
 8001ab0:	432a      	orrs	r2, r5
 8001ab2:	000b      	movs	r3, r1
 8001ab4:	0751      	lsls	r1, r2, #29
 8001ab6:	d100      	bne.n	8001aba <__aeabi_ddiv+0x56e>
 8001ab8:	e751      	b.n	800195e <__aeabi_ddiv+0x412>
 8001aba:	210f      	movs	r1, #15
 8001abc:	4011      	ands	r1, r2
 8001abe:	2904      	cmp	r1, #4
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_ddiv+0x578>
 8001ac2:	e746      	b.n	8001952 <__aeabi_ddiv+0x406>
 8001ac4:	e74b      	b.n	800195e <__aeabi_ddiv+0x412>
 8001ac6:	0005      	movs	r5, r0
 8001ac8:	428e      	cmp	r6, r1
 8001aca:	d000      	beq.n	8001ace <__aeabi_ddiv+0x582>
 8001acc:	e66a      	b.n	80017a4 <__aeabi_ddiv+0x258>
 8001ace:	9a00      	ldr	r2, [sp, #0]
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d000      	beq.n	8001ad6 <__aeabi_ddiv+0x58a>
 8001ad4:	e666      	b.n	80017a4 <__aeabi_ddiv+0x258>
 8001ad6:	e667      	b.n	80017a8 <__aeabi_ddiv+0x25c>
 8001ad8:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <__aeabi_ddiv+0x5e8>)
 8001ada:	445a      	add	r2, fp
 8001adc:	2a00      	cmp	r2, #0
 8001ade:	dc00      	bgt.n	8001ae2 <__aeabi_ddiv+0x596>
 8001ae0:	e710      	b.n	8001904 <__aeabi_ddiv+0x3b8>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	4498      	add	r8, r3
 8001ae8:	e667      	b.n	80017ba <__aeabi_ddiv+0x26e>
 8001aea:	075d      	lsls	r5, r3, #29
 8001aec:	025b      	lsls	r3, r3, #9
 8001aee:	0b1c      	lsrs	r4, r3, #12
 8001af0:	08d2      	lsrs	r2, r2, #3
 8001af2:	2300      	movs	r3, #0
 8001af4:	4315      	orrs	r5, r2
 8001af6:	e580      	b.n	80015fa <__aeabi_ddiv+0xae>
 8001af8:	9800      	ldr	r0, [sp, #0]
 8001afa:	3d02      	subs	r5, #2
 8001afc:	0042      	lsls	r2, r0, #1
 8001afe:	4282      	cmp	r2, r0
 8001b00:	41bf      	sbcs	r7, r7
 8001b02:	427f      	negs	r7, r7
 8001b04:	193c      	adds	r4, r7, r4
 8001b06:	1936      	adds	r6, r6, r4
 8001b08:	9200      	str	r2, [sp, #0]
 8001b0a:	e7dd      	b.n	8001ac8 <__aeabi_ddiv+0x57c>
 8001b0c:	2480      	movs	r4, #128	; 0x80
 8001b0e:	4643      	mov	r3, r8
 8001b10:	0324      	lsls	r4, r4, #12
 8001b12:	431c      	orrs	r4, r3
 8001b14:	0324      	lsls	r4, r4, #12
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__aeabi_ddiv+0x5dc>)
 8001b18:	0b24      	lsrs	r4, r4, #12
 8001b1a:	e56e      	b.n	80015fa <__aeabi_ddiv+0xae>
 8001b1c:	9a00      	ldr	r2, [sp, #0]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d3ea      	bcc.n	8001af8 <__aeabi_ddiv+0x5ac>
 8001b22:	0005      	movs	r5, r0
 8001b24:	e7d3      	b.n	8001ace <__aeabi_ddiv+0x582>
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	000007ff 	.word	0x000007ff
 8001b2c:	0000043e 	.word	0x0000043e
 8001b30:	0000041e 	.word	0x0000041e
 8001b34:	000003ff 	.word	0x000003ff

08001b38 <__eqdf2>:
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	464e      	mov	r6, r9
 8001b3c:	4645      	mov	r5, r8
 8001b3e:	46de      	mov	lr, fp
 8001b40:	4657      	mov	r7, sl
 8001b42:	4690      	mov	r8, r2
 8001b44:	b5e0      	push	{r5, r6, r7, lr}
 8001b46:	0017      	movs	r7, r2
 8001b48:	031a      	lsls	r2, r3, #12
 8001b4a:	0b12      	lsrs	r2, r2, #12
 8001b4c:	0005      	movs	r5, r0
 8001b4e:	4684      	mov	ip, r0
 8001b50:	4819      	ldr	r0, [pc, #100]	; (8001bb8 <__eqdf2+0x80>)
 8001b52:	030e      	lsls	r6, r1, #12
 8001b54:	004c      	lsls	r4, r1, #1
 8001b56:	4691      	mov	r9, r2
 8001b58:	005a      	lsls	r2, r3, #1
 8001b5a:	0fdb      	lsrs	r3, r3, #31
 8001b5c:	469b      	mov	fp, r3
 8001b5e:	0b36      	lsrs	r6, r6, #12
 8001b60:	0d64      	lsrs	r4, r4, #21
 8001b62:	0fc9      	lsrs	r1, r1, #31
 8001b64:	0d52      	lsrs	r2, r2, #21
 8001b66:	4284      	cmp	r4, r0
 8001b68:	d019      	beq.n	8001b9e <__eqdf2+0x66>
 8001b6a:	4282      	cmp	r2, r0
 8001b6c:	d010      	beq.n	8001b90 <__eqdf2+0x58>
 8001b6e:	2001      	movs	r0, #1
 8001b70:	4294      	cmp	r4, r2
 8001b72:	d10e      	bne.n	8001b92 <__eqdf2+0x5a>
 8001b74:	454e      	cmp	r6, r9
 8001b76:	d10c      	bne.n	8001b92 <__eqdf2+0x5a>
 8001b78:	2001      	movs	r0, #1
 8001b7a:	45c4      	cmp	ip, r8
 8001b7c:	d109      	bne.n	8001b92 <__eqdf2+0x5a>
 8001b7e:	4559      	cmp	r1, fp
 8001b80:	d017      	beq.n	8001bb2 <__eqdf2+0x7a>
 8001b82:	2c00      	cmp	r4, #0
 8001b84:	d105      	bne.n	8001b92 <__eqdf2+0x5a>
 8001b86:	0030      	movs	r0, r6
 8001b88:	4328      	orrs	r0, r5
 8001b8a:	1e43      	subs	r3, r0, #1
 8001b8c:	4198      	sbcs	r0, r3
 8001b8e:	e000      	b.n	8001b92 <__eqdf2+0x5a>
 8001b90:	2001      	movs	r0, #1
 8001b92:	bcf0      	pop	{r4, r5, r6, r7}
 8001b94:	46bb      	mov	fp, r7
 8001b96:	46b2      	mov	sl, r6
 8001b98:	46a9      	mov	r9, r5
 8001b9a:	46a0      	mov	r8, r4
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9e:	0033      	movs	r3, r6
 8001ba0:	2001      	movs	r0, #1
 8001ba2:	432b      	orrs	r3, r5
 8001ba4:	d1f5      	bne.n	8001b92 <__eqdf2+0x5a>
 8001ba6:	42a2      	cmp	r2, r4
 8001ba8:	d1f3      	bne.n	8001b92 <__eqdf2+0x5a>
 8001baa:	464b      	mov	r3, r9
 8001bac:	433b      	orrs	r3, r7
 8001bae:	d1f0      	bne.n	8001b92 <__eqdf2+0x5a>
 8001bb0:	e7e2      	b.n	8001b78 <__eqdf2+0x40>
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	e7ed      	b.n	8001b92 <__eqdf2+0x5a>
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	000007ff 	.word	0x000007ff

08001bbc <__gedf2>:
 8001bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bbe:	4647      	mov	r7, r8
 8001bc0:	46ce      	mov	lr, r9
 8001bc2:	0004      	movs	r4, r0
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	0016      	movs	r6, r2
 8001bc8:	031b      	lsls	r3, r3, #12
 8001bca:	0b1b      	lsrs	r3, r3, #12
 8001bcc:	4d2d      	ldr	r5, [pc, #180]	; (8001c84 <__gedf2+0xc8>)
 8001bce:	004a      	lsls	r2, r1, #1
 8001bd0:	4699      	mov	r9, r3
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	0043      	lsls	r3, r0, #1
 8001bd6:	030f      	lsls	r7, r1, #12
 8001bd8:	46a4      	mov	ip, r4
 8001bda:	46b0      	mov	r8, r6
 8001bdc:	0b3f      	lsrs	r7, r7, #12
 8001bde:	0d52      	lsrs	r2, r2, #21
 8001be0:	0fc9      	lsrs	r1, r1, #31
 8001be2:	0d5b      	lsrs	r3, r3, #21
 8001be4:	0fc0      	lsrs	r0, r0, #31
 8001be6:	42aa      	cmp	r2, r5
 8001be8:	d021      	beq.n	8001c2e <__gedf2+0x72>
 8001bea:	42ab      	cmp	r3, r5
 8001bec:	d013      	beq.n	8001c16 <__gedf2+0x5a>
 8001bee:	2a00      	cmp	r2, #0
 8001bf0:	d122      	bne.n	8001c38 <__gedf2+0x7c>
 8001bf2:	433c      	orrs	r4, r7
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d102      	bne.n	8001bfe <__gedf2+0x42>
 8001bf8:	464d      	mov	r5, r9
 8001bfa:	432e      	orrs	r6, r5
 8001bfc:	d022      	beq.n	8001c44 <__gedf2+0x88>
 8001bfe:	2c00      	cmp	r4, #0
 8001c00:	d010      	beq.n	8001c24 <__gedf2+0x68>
 8001c02:	4281      	cmp	r1, r0
 8001c04:	d022      	beq.n	8001c4c <__gedf2+0x90>
 8001c06:	2002      	movs	r0, #2
 8001c08:	3901      	subs	r1, #1
 8001c0a:	4008      	ands	r0, r1
 8001c0c:	3801      	subs	r0, #1
 8001c0e:	bcc0      	pop	{r6, r7}
 8001c10:	46b9      	mov	r9, r7
 8001c12:	46b0      	mov	r8, r6
 8001c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c16:	464d      	mov	r5, r9
 8001c18:	432e      	orrs	r6, r5
 8001c1a:	d129      	bne.n	8001c70 <__gedf2+0xb4>
 8001c1c:	2a00      	cmp	r2, #0
 8001c1e:	d1f0      	bne.n	8001c02 <__gedf2+0x46>
 8001c20:	433c      	orrs	r4, r7
 8001c22:	d1ee      	bne.n	8001c02 <__gedf2+0x46>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d1f2      	bne.n	8001c0e <__gedf2+0x52>
 8001c28:	2001      	movs	r0, #1
 8001c2a:	4240      	negs	r0, r0
 8001c2c:	e7ef      	b.n	8001c0e <__gedf2+0x52>
 8001c2e:	003d      	movs	r5, r7
 8001c30:	4325      	orrs	r5, r4
 8001c32:	d11d      	bne.n	8001c70 <__gedf2+0xb4>
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d0ee      	beq.n	8001c16 <__gedf2+0x5a>
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1e2      	bne.n	8001c02 <__gedf2+0x46>
 8001c3c:	464c      	mov	r4, r9
 8001c3e:	4326      	orrs	r6, r4
 8001c40:	d1df      	bne.n	8001c02 <__gedf2+0x46>
 8001c42:	e7e0      	b.n	8001c06 <__gedf2+0x4a>
 8001c44:	2000      	movs	r0, #0
 8001c46:	2c00      	cmp	r4, #0
 8001c48:	d0e1      	beq.n	8001c0e <__gedf2+0x52>
 8001c4a:	e7dc      	b.n	8001c06 <__gedf2+0x4a>
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dc0a      	bgt.n	8001c66 <__gedf2+0xaa>
 8001c50:	dbe8      	blt.n	8001c24 <__gedf2+0x68>
 8001c52:	454f      	cmp	r7, r9
 8001c54:	d8d7      	bhi.n	8001c06 <__gedf2+0x4a>
 8001c56:	d00e      	beq.n	8001c76 <__gedf2+0xba>
 8001c58:	2000      	movs	r0, #0
 8001c5a:	454f      	cmp	r7, r9
 8001c5c:	d2d7      	bcs.n	8001c0e <__gedf2+0x52>
 8001c5e:	2900      	cmp	r1, #0
 8001c60:	d0e2      	beq.n	8001c28 <__gedf2+0x6c>
 8001c62:	0008      	movs	r0, r1
 8001c64:	e7d3      	b.n	8001c0e <__gedf2+0x52>
 8001c66:	4243      	negs	r3, r0
 8001c68:	4158      	adcs	r0, r3
 8001c6a:	0040      	lsls	r0, r0, #1
 8001c6c:	3801      	subs	r0, #1
 8001c6e:	e7ce      	b.n	8001c0e <__gedf2+0x52>
 8001c70:	2002      	movs	r0, #2
 8001c72:	4240      	negs	r0, r0
 8001c74:	e7cb      	b.n	8001c0e <__gedf2+0x52>
 8001c76:	45c4      	cmp	ip, r8
 8001c78:	d8c5      	bhi.n	8001c06 <__gedf2+0x4a>
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	45c4      	cmp	ip, r8
 8001c7e:	d2c6      	bcs.n	8001c0e <__gedf2+0x52>
 8001c80:	e7ed      	b.n	8001c5e <__gedf2+0xa2>
 8001c82:	46c0      	nop			; (mov r8, r8)
 8001c84:	000007ff 	.word	0x000007ff

08001c88 <__ledf2>:
 8001c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c8a:	4647      	mov	r7, r8
 8001c8c:	46ce      	mov	lr, r9
 8001c8e:	0004      	movs	r4, r0
 8001c90:	0018      	movs	r0, r3
 8001c92:	0016      	movs	r6, r2
 8001c94:	031b      	lsls	r3, r3, #12
 8001c96:	0b1b      	lsrs	r3, r3, #12
 8001c98:	4d2c      	ldr	r5, [pc, #176]	; (8001d4c <__ledf2+0xc4>)
 8001c9a:	004a      	lsls	r2, r1, #1
 8001c9c:	4699      	mov	r9, r3
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	0043      	lsls	r3, r0, #1
 8001ca2:	030f      	lsls	r7, r1, #12
 8001ca4:	46a4      	mov	ip, r4
 8001ca6:	46b0      	mov	r8, r6
 8001ca8:	0b3f      	lsrs	r7, r7, #12
 8001caa:	0d52      	lsrs	r2, r2, #21
 8001cac:	0fc9      	lsrs	r1, r1, #31
 8001cae:	0d5b      	lsrs	r3, r3, #21
 8001cb0:	0fc0      	lsrs	r0, r0, #31
 8001cb2:	42aa      	cmp	r2, r5
 8001cb4:	d00d      	beq.n	8001cd2 <__ledf2+0x4a>
 8001cb6:	42ab      	cmp	r3, r5
 8001cb8:	d010      	beq.n	8001cdc <__ledf2+0x54>
 8001cba:	2a00      	cmp	r2, #0
 8001cbc:	d127      	bne.n	8001d0e <__ledf2+0x86>
 8001cbe:	433c      	orrs	r4, r7
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <__ledf2+0x60>
 8001cc4:	464d      	mov	r5, r9
 8001cc6:	432e      	orrs	r6, r5
 8001cc8:	d10e      	bne.n	8001ce8 <__ledf2+0x60>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	2c00      	cmp	r4, #0
 8001cce:	d015      	beq.n	8001cfc <__ledf2+0x74>
 8001cd0:	e00e      	b.n	8001cf0 <__ledf2+0x68>
 8001cd2:	003d      	movs	r5, r7
 8001cd4:	4325      	orrs	r5, r4
 8001cd6:	d110      	bne.n	8001cfa <__ledf2+0x72>
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d118      	bne.n	8001d0e <__ledf2+0x86>
 8001cdc:	464d      	mov	r5, r9
 8001cde:	432e      	orrs	r6, r5
 8001ce0:	d10b      	bne.n	8001cfa <__ledf2+0x72>
 8001ce2:	2a00      	cmp	r2, #0
 8001ce4:	d102      	bne.n	8001cec <__ledf2+0x64>
 8001ce6:	433c      	orrs	r4, r7
 8001ce8:	2c00      	cmp	r4, #0
 8001cea:	d00b      	beq.n	8001d04 <__ledf2+0x7c>
 8001cec:	4281      	cmp	r1, r0
 8001cee:	d014      	beq.n	8001d1a <__ledf2+0x92>
 8001cf0:	2002      	movs	r0, #2
 8001cf2:	3901      	subs	r1, #1
 8001cf4:	4008      	ands	r0, r1
 8001cf6:	3801      	subs	r0, #1
 8001cf8:	e000      	b.n	8001cfc <__ledf2+0x74>
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	bcc0      	pop	{r6, r7}
 8001cfe:	46b9      	mov	r9, r7
 8001d00:	46b0      	mov	r8, r6
 8001d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d1f9      	bne.n	8001cfc <__ledf2+0x74>
 8001d08:	2001      	movs	r0, #1
 8001d0a:	4240      	negs	r0, r0
 8001d0c:	e7f6      	b.n	8001cfc <__ledf2+0x74>
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1ec      	bne.n	8001cec <__ledf2+0x64>
 8001d12:	464c      	mov	r4, r9
 8001d14:	4326      	orrs	r6, r4
 8001d16:	d1e9      	bne.n	8001cec <__ledf2+0x64>
 8001d18:	e7ea      	b.n	8001cf0 <__ledf2+0x68>
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	dd04      	ble.n	8001d28 <__ledf2+0xa0>
 8001d1e:	4243      	negs	r3, r0
 8001d20:	4158      	adcs	r0, r3
 8001d22:	0040      	lsls	r0, r0, #1
 8001d24:	3801      	subs	r0, #1
 8001d26:	e7e9      	b.n	8001cfc <__ledf2+0x74>
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	dbeb      	blt.n	8001d04 <__ledf2+0x7c>
 8001d2c:	454f      	cmp	r7, r9
 8001d2e:	d8df      	bhi.n	8001cf0 <__ledf2+0x68>
 8001d30:	d006      	beq.n	8001d40 <__ledf2+0xb8>
 8001d32:	2000      	movs	r0, #0
 8001d34:	454f      	cmp	r7, r9
 8001d36:	d2e1      	bcs.n	8001cfc <__ledf2+0x74>
 8001d38:	2900      	cmp	r1, #0
 8001d3a:	d0e5      	beq.n	8001d08 <__ledf2+0x80>
 8001d3c:	0008      	movs	r0, r1
 8001d3e:	e7dd      	b.n	8001cfc <__ledf2+0x74>
 8001d40:	45c4      	cmp	ip, r8
 8001d42:	d8d5      	bhi.n	8001cf0 <__ledf2+0x68>
 8001d44:	2000      	movs	r0, #0
 8001d46:	45c4      	cmp	ip, r8
 8001d48:	d2d8      	bcs.n	8001cfc <__ledf2+0x74>
 8001d4a:	e7f5      	b.n	8001d38 <__ledf2+0xb0>
 8001d4c:	000007ff 	.word	0x000007ff

08001d50 <__aeabi_dmul>:
 8001d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d52:	4657      	mov	r7, sl
 8001d54:	464e      	mov	r6, r9
 8001d56:	4645      	mov	r5, r8
 8001d58:	46de      	mov	lr, fp
 8001d5a:	b5e0      	push	{r5, r6, r7, lr}
 8001d5c:	4698      	mov	r8, r3
 8001d5e:	030c      	lsls	r4, r1, #12
 8001d60:	004b      	lsls	r3, r1, #1
 8001d62:	0006      	movs	r6, r0
 8001d64:	4692      	mov	sl, r2
 8001d66:	b087      	sub	sp, #28
 8001d68:	0b24      	lsrs	r4, r4, #12
 8001d6a:	0d5b      	lsrs	r3, r3, #21
 8001d6c:	0fcf      	lsrs	r7, r1, #31
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d100      	bne.n	8001d74 <__aeabi_dmul+0x24>
 8001d72:	e15c      	b.n	800202e <__aeabi_dmul+0x2de>
 8001d74:	4ad9      	ldr	r2, [pc, #868]	; (80020dc <__aeabi_dmul+0x38c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dmul+0x2c>
 8001d7a:	e175      	b.n	8002068 <__aeabi_dmul+0x318>
 8001d7c:	0f42      	lsrs	r2, r0, #29
 8001d7e:	00e4      	lsls	r4, r4, #3
 8001d80:	4314      	orrs	r4, r2
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	0412      	lsls	r2, r2, #16
 8001d86:	4314      	orrs	r4, r2
 8001d88:	4ad5      	ldr	r2, [pc, #852]	; (80020e0 <__aeabi_dmul+0x390>)
 8001d8a:	00c5      	lsls	r5, r0, #3
 8001d8c:	4694      	mov	ip, r2
 8001d8e:	4463      	add	r3, ip
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	4699      	mov	r9, r3
 8001d96:	469b      	mov	fp, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	4642      	mov	r2, r8
 8001d9c:	031e      	lsls	r6, r3, #12
 8001d9e:	0fd2      	lsrs	r2, r2, #31
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4650      	mov	r0, sl
 8001da4:	4690      	mov	r8, r2
 8001da6:	0b36      	lsrs	r6, r6, #12
 8001da8:	0d5b      	lsrs	r3, r3, #21
 8001daa:	d100      	bne.n	8001dae <__aeabi_dmul+0x5e>
 8001dac:	e120      	b.n	8001ff0 <__aeabi_dmul+0x2a0>
 8001dae:	4acb      	ldr	r2, [pc, #812]	; (80020dc <__aeabi_dmul+0x38c>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d100      	bne.n	8001db6 <__aeabi_dmul+0x66>
 8001db4:	e162      	b.n	800207c <__aeabi_dmul+0x32c>
 8001db6:	49ca      	ldr	r1, [pc, #808]	; (80020e0 <__aeabi_dmul+0x390>)
 8001db8:	0f42      	lsrs	r2, r0, #29
 8001dba:	468c      	mov	ip, r1
 8001dbc:	9900      	ldr	r1, [sp, #0]
 8001dbe:	4463      	add	r3, ip
 8001dc0:	00f6      	lsls	r6, r6, #3
 8001dc2:	468c      	mov	ip, r1
 8001dc4:	4316      	orrs	r6, r2
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	449c      	add	ip, r3
 8001dca:	0412      	lsls	r2, r2, #16
 8001dcc:	4663      	mov	r3, ip
 8001dce:	4316      	orrs	r6, r2
 8001dd0:	00c2      	lsls	r2, r0, #3
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	9900      	ldr	r1, [sp, #0]
 8001dd8:	4643      	mov	r3, r8
 8001dda:	3101      	adds	r1, #1
 8001ddc:	468c      	mov	ip, r1
 8001dde:	4649      	mov	r1, r9
 8001de0:	407b      	eors	r3, r7
 8001de2:	9301      	str	r3, [sp, #4]
 8001de4:	290f      	cmp	r1, #15
 8001de6:	d826      	bhi.n	8001e36 <__aeabi_dmul+0xe6>
 8001de8:	4bbe      	ldr	r3, [pc, #760]	; (80020e4 <__aeabi_dmul+0x394>)
 8001dea:	0089      	lsls	r1, r1, #2
 8001dec:	5859      	ldr	r1, [r3, r1]
 8001dee:	468f      	mov	pc, r1
 8001df0:	4643      	mov	r3, r8
 8001df2:	9301      	str	r3, [sp, #4]
 8001df4:	0034      	movs	r4, r6
 8001df6:	0015      	movs	r5, r2
 8001df8:	4683      	mov	fp, r0
 8001dfa:	465b      	mov	r3, fp
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d016      	beq.n	8001e2e <__aeabi_dmul+0xde>
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d100      	bne.n	8001e06 <__aeabi_dmul+0xb6>
 8001e04:	e203      	b.n	800220e <__aeabi_dmul+0x4be>
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d000      	beq.n	8001e0c <__aeabi_dmul+0xbc>
 8001e0a:	e0cd      	b.n	8001fa8 <__aeabi_dmul+0x258>
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2400      	movs	r4, #0
 8001e10:	2500      	movs	r5, #0
 8001e12:	9b01      	ldr	r3, [sp, #4]
 8001e14:	0512      	lsls	r2, r2, #20
 8001e16:	4322      	orrs	r2, r4
 8001e18:	07db      	lsls	r3, r3, #31
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	0028      	movs	r0, r5
 8001e1e:	0011      	movs	r1, r2
 8001e20:	b007      	add	sp, #28
 8001e22:	bcf0      	pop	{r4, r5, r6, r7}
 8001e24:	46bb      	mov	fp, r7
 8001e26:	46b2      	mov	sl, r6
 8001e28:	46a9      	mov	r9, r5
 8001e2a:	46a0      	mov	r8, r4
 8001e2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e2e:	2400      	movs	r4, #0
 8001e30:	2500      	movs	r5, #0
 8001e32:	4aaa      	ldr	r2, [pc, #680]	; (80020dc <__aeabi_dmul+0x38c>)
 8001e34:	e7ed      	b.n	8001e12 <__aeabi_dmul+0xc2>
 8001e36:	0c28      	lsrs	r0, r5, #16
 8001e38:	042d      	lsls	r5, r5, #16
 8001e3a:	0c2d      	lsrs	r5, r5, #16
 8001e3c:	002b      	movs	r3, r5
 8001e3e:	0c11      	lsrs	r1, r2, #16
 8001e40:	0412      	lsls	r2, r2, #16
 8001e42:	0c12      	lsrs	r2, r2, #16
 8001e44:	4353      	muls	r3, r2
 8001e46:	4698      	mov	r8, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	002f      	movs	r7, r5
 8001e4c:	4343      	muls	r3, r0
 8001e4e:	4699      	mov	r9, r3
 8001e50:	434f      	muls	r7, r1
 8001e52:	444f      	add	r7, r9
 8001e54:	46bb      	mov	fp, r7
 8001e56:	4647      	mov	r7, r8
 8001e58:	000b      	movs	r3, r1
 8001e5a:	0c3f      	lsrs	r7, r7, #16
 8001e5c:	46ba      	mov	sl, r7
 8001e5e:	4343      	muls	r3, r0
 8001e60:	44da      	add	sl, fp
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	45d1      	cmp	r9, sl
 8001e66:	d904      	bls.n	8001e72 <__aeabi_dmul+0x122>
 8001e68:	2780      	movs	r7, #128	; 0x80
 8001e6a:	027f      	lsls	r7, r7, #9
 8001e6c:	46b9      	mov	r9, r7
 8001e6e:	444b      	add	r3, r9
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	4653      	mov	r3, sl
 8001e74:	0c1b      	lsrs	r3, r3, #16
 8001e76:	469b      	mov	fp, r3
 8001e78:	4653      	mov	r3, sl
 8001e7a:	041f      	lsls	r7, r3, #16
 8001e7c:	4643      	mov	r3, r8
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	4698      	mov	r8, r3
 8001e84:	003b      	movs	r3, r7
 8001e86:	4443      	add	r3, r8
 8001e88:	9304      	str	r3, [sp, #16]
 8001e8a:	0c33      	lsrs	r3, r6, #16
 8001e8c:	0436      	lsls	r6, r6, #16
 8001e8e:	0c36      	lsrs	r6, r6, #16
 8001e90:	4698      	mov	r8, r3
 8001e92:	0033      	movs	r3, r6
 8001e94:	4343      	muls	r3, r0
 8001e96:	4699      	mov	r9, r3
 8001e98:	4643      	mov	r3, r8
 8001e9a:	4343      	muls	r3, r0
 8001e9c:	002f      	movs	r7, r5
 8001e9e:	469a      	mov	sl, r3
 8001ea0:	4643      	mov	r3, r8
 8001ea2:	4377      	muls	r7, r6
 8001ea4:	435d      	muls	r5, r3
 8001ea6:	0c38      	lsrs	r0, r7, #16
 8001ea8:	444d      	add	r5, r9
 8001eaa:	1945      	adds	r5, r0, r5
 8001eac:	45a9      	cmp	r9, r5
 8001eae:	d903      	bls.n	8001eb8 <__aeabi_dmul+0x168>
 8001eb0:	2380      	movs	r3, #128	; 0x80
 8001eb2:	025b      	lsls	r3, r3, #9
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	44ca      	add	sl, r9
 8001eb8:	043f      	lsls	r7, r7, #16
 8001eba:	0c28      	lsrs	r0, r5, #16
 8001ebc:	0c3f      	lsrs	r7, r7, #16
 8001ebe:	042d      	lsls	r5, r5, #16
 8001ec0:	19ed      	adds	r5, r5, r7
 8001ec2:	0c27      	lsrs	r7, r4, #16
 8001ec4:	0424      	lsls	r4, r4, #16
 8001ec6:	0c24      	lsrs	r4, r4, #16
 8001ec8:	0003      	movs	r3, r0
 8001eca:	0020      	movs	r0, r4
 8001ecc:	4350      	muls	r0, r2
 8001ece:	437a      	muls	r2, r7
 8001ed0:	4691      	mov	r9, r2
 8001ed2:	003a      	movs	r2, r7
 8001ed4:	4453      	add	r3, sl
 8001ed6:	9305      	str	r3, [sp, #20]
 8001ed8:	0c03      	lsrs	r3, r0, #16
 8001eda:	469a      	mov	sl, r3
 8001edc:	434a      	muls	r2, r1
 8001ede:	4361      	muls	r1, r4
 8001ee0:	4449      	add	r1, r9
 8001ee2:	4451      	add	r1, sl
 8001ee4:	44ab      	add	fp, r5
 8001ee6:	4589      	cmp	r9, r1
 8001ee8:	d903      	bls.n	8001ef2 <__aeabi_dmul+0x1a2>
 8001eea:	2380      	movs	r3, #128	; 0x80
 8001eec:	025b      	lsls	r3, r3, #9
 8001eee:	4699      	mov	r9, r3
 8001ef0:	444a      	add	r2, r9
 8001ef2:	0400      	lsls	r0, r0, #16
 8001ef4:	0c0b      	lsrs	r3, r1, #16
 8001ef6:	0c00      	lsrs	r0, r0, #16
 8001ef8:	0409      	lsls	r1, r1, #16
 8001efa:	1809      	adds	r1, r1, r0
 8001efc:	0020      	movs	r0, r4
 8001efe:	4699      	mov	r9, r3
 8001f00:	4643      	mov	r3, r8
 8001f02:	4370      	muls	r0, r6
 8001f04:	435c      	muls	r4, r3
 8001f06:	437e      	muls	r6, r7
 8001f08:	435f      	muls	r7, r3
 8001f0a:	0c03      	lsrs	r3, r0, #16
 8001f0c:	4698      	mov	r8, r3
 8001f0e:	19a4      	adds	r4, r4, r6
 8001f10:	4444      	add	r4, r8
 8001f12:	444a      	add	r2, r9
 8001f14:	9703      	str	r7, [sp, #12]
 8001f16:	42a6      	cmp	r6, r4
 8001f18:	d904      	bls.n	8001f24 <__aeabi_dmul+0x1d4>
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	025b      	lsls	r3, r3, #9
 8001f1e:	4698      	mov	r8, r3
 8001f20:	4447      	add	r7, r8
 8001f22:	9703      	str	r7, [sp, #12]
 8001f24:	0423      	lsls	r3, r4, #16
 8001f26:	9e02      	ldr	r6, [sp, #8]
 8001f28:	469a      	mov	sl, r3
 8001f2a:	9b05      	ldr	r3, [sp, #20]
 8001f2c:	445e      	add	r6, fp
 8001f2e:	4698      	mov	r8, r3
 8001f30:	42ae      	cmp	r6, r5
 8001f32:	41ad      	sbcs	r5, r5
 8001f34:	1876      	adds	r6, r6, r1
 8001f36:	428e      	cmp	r6, r1
 8001f38:	4189      	sbcs	r1, r1
 8001f3a:	0400      	lsls	r0, r0, #16
 8001f3c:	0c00      	lsrs	r0, r0, #16
 8001f3e:	4450      	add	r0, sl
 8001f40:	4440      	add	r0, r8
 8001f42:	426d      	negs	r5, r5
 8001f44:	1947      	adds	r7, r0, r5
 8001f46:	46b8      	mov	r8, r7
 8001f48:	4693      	mov	fp, r2
 8001f4a:	4249      	negs	r1, r1
 8001f4c:	4689      	mov	r9, r1
 8001f4e:	44c3      	add	fp, r8
 8001f50:	44d9      	add	r9, fp
 8001f52:	4298      	cmp	r0, r3
 8001f54:	4180      	sbcs	r0, r0
 8001f56:	45a8      	cmp	r8, r5
 8001f58:	41ad      	sbcs	r5, r5
 8001f5a:	4593      	cmp	fp, r2
 8001f5c:	4192      	sbcs	r2, r2
 8001f5e:	4589      	cmp	r9, r1
 8001f60:	4189      	sbcs	r1, r1
 8001f62:	426d      	negs	r5, r5
 8001f64:	4240      	negs	r0, r0
 8001f66:	4328      	orrs	r0, r5
 8001f68:	0c24      	lsrs	r4, r4, #16
 8001f6a:	4252      	negs	r2, r2
 8001f6c:	4249      	negs	r1, r1
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	9b03      	ldr	r3, [sp, #12]
 8001f72:	1900      	adds	r0, r0, r4
 8001f74:	1880      	adds	r0, r0, r2
 8001f76:	18c7      	adds	r7, r0, r3
 8001f78:	464b      	mov	r3, r9
 8001f7a:	0ddc      	lsrs	r4, r3, #23
 8001f7c:	9b04      	ldr	r3, [sp, #16]
 8001f7e:	0275      	lsls	r5, r6, #9
 8001f80:	431d      	orrs	r5, r3
 8001f82:	1e6a      	subs	r2, r5, #1
 8001f84:	4195      	sbcs	r5, r2
 8001f86:	464b      	mov	r3, r9
 8001f88:	0df6      	lsrs	r6, r6, #23
 8001f8a:	027f      	lsls	r7, r7, #9
 8001f8c:	4335      	orrs	r5, r6
 8001f8e:	025a      	lsls	r2, r3, #9
 8001f90:	433c      	orrs	r4, r7
 8001f92:	4315      	orrs	r5, r2
 8001f94:	01fb      	lsls	r3, r7, #7
 8001f96:	d400      	bmi.n	8001f9a <__aeabi_dmul+0x24a>
 8001f98:	e11c      	b.n	80021d4 <__aeabi_dmul+0x484>
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	086a      	lsrs	r2, r5, #1
 8001f9e:	400d      	ands	r5, r1
 8001fa0:	4315      	orrs	r5, r2
 8001fa2:	07e2      	lsls	r2, r4, #31
 8001fa4:	4315      	orrs	r5, r2
 8001fa6:	0864      	lsrs	r4, r4, #1
 8001fa8:	494f      	ldr	r1, [pc, #316]	; (80020e8 <__aeabi_dmul+0x398>)
 8001faa:	4461      	add	r1, ip
 8001fac:	2900      	cmp	r1, #0
 8001fae:	dc00      	bgt.n	8001fb2 <__aeabi_dmul+0x262>
 8001fb0:	e0b0      	b.n	8002114 <__aeabi_dmul+0x3c4>
 8001fb2:	076b      	lsls	r3, r5, #29
 8001fb4:	d009      	beq.n	8001fca <__aeabi_dmul+0x27a>
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	402a      	ands	r2, r5
 8001fba:	2a04      	cmp	r2, #4
 8001fbc:	d005      	beq.n	8001fca <__aeabi_dmul+0x27a>
 8001fbe:	1d2a      	adds	r2, r5, #4
 8001fc0:	42aa      	cmp	r2, r5
 8001fc2:	41ad      	sbcs	r5, r5
 8001fc4:	426d      	negs	r5, r5
 8001fc6:	1964      	adds	r4, r4, r5
 8001fc8:	0015      	movs	r5, r2
 8001fca:	01e3      	lsls	r3, r4, #7
 8001fcc:	d504      	bpl.n	8001fd8 <__aeabi_dmul+0x288>
 8001fce:	2180      	movs	r1, #128	; 0x80
 8001fd0:	4a46      	ldr	r2, [pc, #280]	; (80020ec <__aeabi_dmul+0x39c>)
 8001fd2:	00c9      	lsls	r1, r1, #3
 8001fd4:	4014      	ands	r4, r2
 8001fd6:	4461      	add	r1, ip
 8001fd8:	4a45      	ldr	r2, [pc, #276]	; (80020f0 <__aeabi_dmul+0x3a0>)
 8001fda:	4291      	cmp	r1, r2
 8001fdc:	dd00      	ble.n	8001fe0 <__aeabi_dmul+0x290>
 8001fde:	e726      	b.n	8001e2e <__aeabi_dmul+0xde>
 8001fe0:	0762      	lsls	r2, r4, #29
 8001fe2:	08ed      	lsrs	r5, r5, #3
 8001fe4:	0264      	lsls	r4, r4, #9
 8001fe6:	0549      	lsls	r1, r1, #21
 8001fe8:	4315      	orrs	r5, r2
 8001fea:	0b24      	lsrs	r4, r4, #12
 8001fec:	0d4a      	lsrs	r2, r1, #21
 8001fee:	e710      	b.n	8001e12 <__aeabi_dmul+0xc2>
 8001ff0:	4652      	mov	r2, sl
 8001ff2:	4332      	orrs	r2, r6
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dmul+0x2a8>
 8001ff6:	e07f      	b.n	80020f8 <__aeabi_dmul+0x3a8>
 8001ff8:	2e00      	cmp	r6, #0
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dmul+0x2ae>
 8001ffc:	e0dc      	b.n	80021b8 <__aeabi_dmul+0x468>
 8001ffe:	0030      	movs	r0, r6
 8002000:	f000 fe1e 	bl	8002c40 <__clzsi2>
 8002004:	0002      	movs	r2, r0
 8002006:	3a0b      	subs	r2, #11
 8002008:	231d      	movs	r3, #29
 800200a:	0001      	movs	r1, r0
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	4652      	mov	r2, sl
 8002010:	3908      	subs	r1, #8
 8002012:	40da      	lsrs	r2, r3
 8002014:	408e      	lsls	r6, r1
 8002016:	4316      	orrs	r6, r2
 8002018:	4652      	mov	r2, sl
 800201a:	408a      	lsls	r2, r1
 800201c:	9b00      	ldr	r3, [sp, #0]
 800201e:	4935      	ldr	r1, [pc, #212]	; (80020f4 <__aeabi_dmul+0x3a4>)
 8002020:	1a18      	subs	r0, r3, r0
 8002022:	0003      	movs	r3, r0
 8002024:	468c      	mov	ip, r1
 8002026:	4463      	add	r3, ip
 8002028:	2000      	movs	r0, #0
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	e6d3      	b.n	8001dd6 <__aeabi_dmul+0x86>
 800202e:	0025      	movs	r5, r4
 8002030:	4305      	orrs	r5, r0
 8002032:	d04a      	beq.n	80020ca <__aeabi_dmul+0x37a>
 8002034:	2c00      	cmp	r4, #0
 8002036:	d100      	bne.n	800203a <__aeabi_dmul+0x2ea>
 8002038:	e0b0      	b.n	800219c <__aeabi_dmul+0x44c>
 800203a:	0020      	movs	r0, r4
 800203c:	f000 fe00 	bl	8002c40 <__clzsi2>
 8002040:	0001      	movs	r1, r0
 8002042:	0002      	movs	r2, r0
 8002044:	390b      	subs	r1, #11
 8002046:	231d      	movs	r3, #29
 8002048:	0010      	movs	r0, r2
 800204a:	1a5b      	subs	r3, r3, r1
 800204c:	0031      	movs	r1, r6
 800204e:	0035      	movs	r5, r6
 8002050:	3808      	subs	r0, #8
 8002052:	4084      	lsls	r4, r0
 8002054:	40d9      	lsrs	r1, r3
 8002056:	4085      	lsls	r5, r0
 8002058:	430c      	orrs	r4, r1
 800205a:	4826      	ldr	r0, [pc, #152]	; (80020f4 <__aeabi_dmul+0x3a4>)
 800205c:	1a83      	subs	r3, r0, r2
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	4699      	mov	r9, r3
 8002064:	469b      	mov	fp, r3
 8002066:	e697      	b.n	8001d98 <__aeabi_dmul+0x48>
 8002068:	0005      	movs	r5, r0
 800206a:	4325      	orrs	r5, r4
 800206c:	d126      	bne.n	80020bc <__aeabi_dmul+0x36c>
 800206e:	2208      	movs	r2, #8
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2302      	movs	r3, #2
 8002074:	2400      	movs	r4, #0
 8002076:	4691      	mov	r9, r2
 8002078:	469b      	mov	fp, r3
 800207a:	e68d      	b.n	8001d98 <__aeabi_dmul+0x48>
 800207c:	4652      	mov	r2, sl
 800207e:	9b00      	ldr	r3, [sp, #0]
 8002080:	4332      	orrs	r2, r6
 8002082:	d110      	bne.n	80020a6 <__aeabi_dmul+0x356>
 8002084:	4915      	ldr	r1, [pc, #84]	; (80020dc <__aeabi_dmul+0x38c>)
 8002086:	2600      	movs	r6, #0
 8002088:	468c      	mov	ip, r1
 800208a:	4463      	add	r3, ip
 800208c:	4649      	mov	r1, r9
 800208e:	9300      	str	r3, [sp, #0]
 8002090:	2302      	movs	r3, #2
 8002092:	4319      	orrs	r1, r3
 8002094:	4689      	mov	r9, r1
 8002096:	2002      	movs	r0, #2
 8002098:	e69d      	b.n	8001dd6 <__aeabi_dmul+0x86>
 800209a:	465b      	mov	r3, fp
 800209c:	9701      	str	r7, [sp, #4]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d000      	beq.n	80020a4 <__aeabi_dmul+0x354>
 80020a2:	e6ad      	b.n	8001e00 <__aeabi_dmul+0xb0>
 80020a4:	e6c3      	b.n	8001e2e <__aeabi_dmul+0xde>
 80020a6:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <__aeabi_dmul+0x38c>)
 80020a8:	2003      	movs	r0, #3
 80020aa:	4694      	mov	ip, r2
 80020ac:	4463      	add	r3, ip
 80020ae:	464a      	mov	r2, r9
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	2303      	movs	r3, #3
 80020b4:	431a      	orrs	r2, r3
 80020b6:	4691      	mov	r9, r2
 80020b8:	4652      	mov	r2, sl
 80020ba:	e68c      	b.n	8001dd6 <__aeabi_dmul+0x86>
 80020bc:	220c      	movs	r2, #12
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2303      	movs	r3, #3
 80020c2:	0005      	movs	r5, r0
 80020c4:	4691      	mov	r9, r2
 80020c6:	469b      	mov	fp, r3
 80020c8:	e666      	b.n	8001d98 <__aeabi_dmul+0x48>
 80020ca:	2304      	movs	r3, #4
 80020cc:	4699      	mov	r9, r3
 80020ce:	2300      	movs	r3, #0
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	3301      	adds	r3, #1
 80020d4:	2400      	movs	r4, #0
 80020d6:	469b      	mov	fp, r3
 80020d8:	e65e      	b.n	8001d98 <__aeabi_dmul+0x48>
 80020da:	46c0      	nop			; (mov r8, r8)
 80020dc:	000007ff 	.word	0x000007ff
 80020e0:	fffffc01 	.word	0xfffffc01
 80020e4:	08009b1c 	.word	0x08009b1c
 80020e8:	000003ff 	.word	0x000003ff
 80020ec:	feffffff 	.word	0xfeffffff
 80020f0:	000007fe 	.word	0x000007fe
 80020f4:	fffffc0d 	.word	0xfffffc0d
 80020f8:	4649      	mov	r1, r9
 80020fa:	2301      	movs	r3, #1
 80020fc:	4319      	orrs	r1, r3
 80020fe:	4689      	mov	r9, r1
 8002100:	2600      	movs	r6, #0
 8002102:	2001      	movs	r0, #1
 8002104:	e667      	b.n	8001dd6 <__aeabi_dmul+0x86>
 8002106:	2300      	movs	r3, #0
 8002108:	2480      	movs	r4, #128	; 0x80
 800210a:	2500      	movs	r5, #0
 800210c:	4a43      	ldr	r2, [pc, #268]	; (800221c <__aeabi_dmul+0x4cc>)
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	0324      	lsls	r4, r4, #12
 8002112:	e67e      	b.n	8001e12 <__aeabi_dmul+0xc2>
 8002114:	2001      	movs	r0, #1
 8002116:	1a40      	subs	r0, r0, r1
 8002118:	2838      	cmp	r0, #56	; 0x38
 800211a:	dd00      	ble.n	800211e <__aeabi_dmul+0x3ce>
 800211c:	e676      	b.n	8001e0c <__aeabi_dmul+0xbc>
 800211e:	281f      	cmp	r0, #31
 8002120:	dd5b      	ble.n	80021da <__aeabi_dmul+0x48a>
 8002122:	221f      	movs	r2, #31
 8002124:	0023      	movs	r3, r4
 8002126:	4252      	negs	r2, r2
 8002128:	1a51      	subs	r1, r2, r1
 800212a:	40cb      	lsrs	r3, r1
 800212c:	0019      	movs	r1, r3
 800212e:	2820      	cmp	r0, #32
 8002130:	d003      	beq.n	800213a <__aeabi_dmul+0x3ea>
 8002132:	4a3b      	ldr	r2, [pc, #236]	; (8002220 <__aeabi_dmul+0x4d0>)
 8002134:	4462      	add	r2, ip
 8002136:	4094      	lsls	r4, r2
 8002138:	4325      	orrs	r5, r4
 800213a:	1e6a      	subs	r2, r5, #1
 800213c:	4195      	sbcs	r5, r2
 800213e:	002a      	movs	r2, r5
 8002140:	430a      	orrs	r2, r1
 8002142:	2107      	movs	r1, #7
 8002144:	000d      	movs	r5, r1
 8002146:	2400      	movs	r4, #0
 8002148:	4015      	ands	r5, r2
 800214a:	4211      	tst	r1, r2
 800214c:	d05b      	beq.n	8002206 <__aeabi_dmul+0x4b6>
 800214e:	210f      	movs	r1, #15
 8002150:	2400      	movs	r4, #0
 8002152:	4011      	ands	r1, r2
 8002154:	2904      	cmp	r1, #4
 8002156:	d053      	beq.n	8002200 <__aeabi_dmul+0x4b0>
 8002158:	1d11      	adds	r1, r2, #4
 800215a:	4291      	cmp	r1, r2
 800215c:	4192      	sbcs	r2, r2
 800215e:	4252      	negs	r2, r2
 8002160:	18a4      	adds	r4, r4, r2
 8002162:	000a      	movs	r2, r1
 8002164:	0223      	lsls	r3, r4, #8
 8002166:	d54b      	bpl.n	8002200 <__aeabi_dmul+0x4b0>
 8002168:	2201      	movs	r2, #1
 800216a:	2400      	movs	r4, #0
 800216c:	2500      	movs	r5, #0
 800216e:	e650      	b.n	8001e12 <__aeabi_dmul+0xc2>
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	031b      	lsls	r3, r3, #12
 8002174:	421c      	tst	r4, r3
 8002176:	d009      	beq.n	800218c <__aeabi_dmul+0x43c>
 8002178:	421e      	tst	r6, r3
 800217a:	d107      	bne.n	800218c <__aeabi_dmul+0x43c>
 800217c:	4333      	orrs	r3, r6
 800217e:	031c      	lsls	r4, r3, #12
 8002180:	4643      	mov	r3, r8
 8002182:	0015      	movs	r5, r2
 8002184:	0b24      	lsrs	r4, r4, #12
 8002186:	4a25      	ldr	r2, [pc, #148]	; (800221c <__aeabi_dmul+0x4cc>)
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	e642      	b.n	8001e12 <__aeabi_dmul+0xc2>
 800218c:	2280      	movs	r2, #128	; 0x80
 800218e:	0312      	lsls	r2, r2, #12
 8002190:	4314      	orrs	r4, r2
 8002192:	0324      	lsls	r4, r4, #12
 8002194:	4a21      	ldr	r2, [pc, #132]	; (800221c <__aeabi_dmul+0x4cc>)
 8002196:	0b24      	lsrs	r4, r4, #12
 8002198:	9701      	str	r7, [sp, #4]
 800219a:	e63a      	b.n	8001e12 <__aeabi_dmul+0xc2>
 800219c:	f000 fd50 	bl	8002c40 <__clzsi2>
 80021a0:	0001      	movs	r1, r0
 80021a2:	0002      	movs	r2, r0
 80021a4:	3115      	adds	r1, #21
 80021a6:	3220      	adds	r2, #32
 80021a8:	291c      	cmp	r1, #28
 80021aa:	dc00      	bgt.n	80021ae <__aeabi_dmul+0x45e>
 80021ac:	e74b      	b.n	8002046 <__aeabi_dmul+0x2f6>
 80021ae:	0034      	movs	r4, r6
 80021b0:	3808      	subs	r0, #8
 80021b2:	2500      	movs	r5, #0
 80021b4:	4084      	lsls	r4, r0
 80021b6:	e750      	b.n	800205a <__aeabi_dmul+0x30a>
 80021b8:	f000 fd42 	bl	8002c40 <__clzsi2>
 80021bc:	0003      	movs	r3, r0
 80021be:	001a      	movs	r2, r3
 80021c0:	3215      	adds	r2, #21
 80021c2:	3020      	adds	r0, #32
 80021c4:	2a1c      	cmp	r2, #28
 80021c6:	dc00      	bgt.n	80021ca <__aeabi_dmul+0x47a>
 80021c8:	e71e      	b.n	8002008 <__aeabi_dmul+0x2b8>
 80021ca:	4656      	mov	r6, sl
 80021cc:	3b08      	subs	r3, #8
 80021ce:	2200      	movs	r2, #0
 80021d0:	409e      	lsls	r6, r3
 80021d2:	e723      	b.n	800201c <__aeabi_dmul+0x2cc>
 80021d4:	9b00      	ldr	r3, [sp, #0]
 80021d6:	469c      	mov	ip, r3
 80021d8:	e6e6      	b.n	8001fa8 <__aeabi_dmul+0x258>
 80021da:	4912      	ldr	r1, [pc, #72]	; (8002224 <__aeabi_dmul+0x4d4>)
 80021dc:	0022      	movs	r2, r4
 80021de:	4461      	add	r1, ip
 80021e0:	002e      	movs	r6, r5
 80021e2:	408d      	lsls	r5, r1
 80021e4:	408a      	lsls	r2, r1
 80021e6:	40c6      	lsrs	r6, r0
 80021e8:	1e69      	subs	r1, r5, #1
 80021ea:	418d      	sbcs	r5, r1
 80021ec:	4332      	orrs	r2, r6
 80021ee:	432a      	orrs	r2, r5
 80021f0:	40c4      	lsrs	r4, r0
 80021f2:	0753      	lsls	r3, r2, #29
 80021f4:	d0b6      	beq.n	8002164 <__aeabi_dmul+0x414>
 80021f6:	210f      	movs	r1, #15
 80021f8:	4011      	ands	r1, r2
 80021fa:	2904      	cmp	r1, #4
 80021fc:	d1ac      	bne.n	8002158 <__aeabi_dmul+0x408>
 80021fe:	e7b1      	b.n	8002164 <__aeabi_dmul+0x414>
 8002200:	0765      	lsls	r5, r4, #29
 8002202:	0264      	lsls	r4, r4, #9
 8002204:	0b24      	lsrs	r4, r4, #12
 8002206:	08d2      	lsrs	r2, r2, #3
 8002208:	4315      	orrs	r5, r2
 800220a:	2200      	movs	r2, #0
 800220c:	e601      	b.n	8001e12 <__aeabi_dmul+0xc2>
 800220e:	2280      	movs	r2, #128	; 0x80
 8002210:	0312      	lsls	r2, r2, #12
 8002212:	4314      	orrs	r4, r2
 8002214:	0324      	lsls	r4, r4, #12
 8002216:	4a01      	ldr	r2, [pc, #4]	; (800221c <__aeabi_dmul+0x4cc>)
 8002218:	0b24      	lsrs	r4, r4, #12
 800221a:	e5fa      	b.n	8001e12 <__aeabi_dmul+0xc2>
 800221c:	000007ff 	.word	0x000007ff
 8002220:	0000043e 	.word	0x0000043e
 8002224:	0000041e 	.word	0x0000041e

08002228 <__aeabi_dsub>:
 8002228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800222a:	4657      	mov	r7, sl
 800222c:	464e      	mov	r6, r9
 800222e:	4645      	mov	r5, r8
 8002230:	46de      	mov	lr, fp
 8002232:	b5e0      	push	{r5, r6, r7, lr}
 8002234:	001e      	movs	r6, r3
 8002236:	0017      	movs	r7, r2
 8002238:	004a      	lsls	r2, r1, #1
 800223a:	030b      	lsls	r3, r1, #12
 800223c:	0d52      	lsrs	r2, r2, #21
 800223e:	0a5b      	lsrs	r3, r3, #9
 8002240:	4690      	mov	r8, r2
 8002242:	0f42      	lsrs	r2, r0, #29
 8002244:	431a      	orrs	r2, r3
 8002246:	0fcd      	lsrs	r5, r1, #31
 8002248:	4ccd      	ldr	r4, [pc, #820]	; (8002580 <__aeabi_dsub+0x358>)
 800224a:	0331      	lsls	r1, r6, #12
 800224c:	00c3      	lsls	r3, r0, #3
 800224e:	4694      	mov	ip, r2
 8002250:	0070      	lsls	r0, r6, #1
 8002252:	0f7a      	lsrs	r2, r7, #29
 8002254:	0a49      	lsrs	r1, r1, #9
 8002256:	00ff      	lsls	r7, r7, #3
 8002258:	469a      	mov	sl, r3
 800225a:	46b9      	mov	r9, r7
 800225c:	0d40      	lsrs	r0, r0, #21
 800225e:	0ff6      	lsrs	r6, r6, #31
 8002260:	4311      	orrs	r1, r2
 8002262:	42a0      	cmp	r0, r4
 8002264:	d100      	bne.n	8002268 <__aeabi_dsub+0x40>
 8002266:	e0b1      	b.n	80023cc <__aeabi_dsub+0x1a4>
 8002268:	2201      	movs	r2, #1
 800226a:	4056      	eors	r6, r2
 800226c:	46b3      	mov	fp, r6
 800226e:	42b5      	cmp	r5, r6
 8002270:	d100      	bne.n	8002274 <__aeabi_dsub+0x4c>
 8002272:	e088      	b.n	8002386 <__aeabi_dsub+0x15e>
 8002274:	4642      	mov	r2, r8
 8002276:	1a12      	subs	r2, r2, r0
 8002278:	2a00      	cmp	r2, #0
 800227a:	dc00      	bgt.n	800227e <__aeabi_dsub+0x56>
 800227c:	e0ae      	b.n	80023dc <__aeabi_dsub+0x1b4>
 800227e:	2800      	cmp	r0, #0
 8002280:	d100      	bne.n	8002284 <__aeabi_dsub+0x5c>
 8002282:	e0c1      	b.n	8002408 <__aeabi_dsub+0x1e0>
 8002284:	48be      	ldr	r0, [pc, #760]	; (8002580 <__aeabi_dsub+0x358>)
 8002286:	4580      	cmp	r8, r0
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x64>
 800228a:	e151      	b.n	8002530 <__aeabi_dsub+0x308>
 800228c:	2080      	movs	r0, #128	; 0x80
 800228e:	0400      	lsls	r0, r0, #16
 8002290:	4301      	orrs	r1, r0
 8002292:	2a38      	cmp	r2, #56	; 0x38
 8002294:	dd00      	ble.n	8002298 <__aeabi_dsub+0x70>
 8002296:	e17b      	b.n	8002590 <__aeabi_dsub+0x368>
 8002298:	2a1f      	cmp	r2, #31
 800229a:	dd00      	ble.n	800229e <__aeabi_dsub+0x76>
 800229c:	e1ee      	b.n	800267c <__aeabi_dsub+0x454>
 800229e:	2020      	movs	r0, #32
 80022a0:	003e      	movs	r6, r7
 80022a2:	1a80      	subs	r0, r0, r2
 80022a4:	000c      	movs	r4, r1
 80022a6:	40d6      	lsrs	r6, r2
 80022a8:	40d1      	lsrs	r1, r2
 80022aa:	4087      	lsls	r7, r0
 80022ac:	4662      	mov	r2, ip
 80022ae:	4084      	lsls	r4, r0
 80022b0:	1a52      	subs	r2, r2, r1
 80022b2:	1e78      	subs	r0, r7, #1
 80022b4:	4187      	sbcs	r7, r0
 80022b6:	4694      	mov	ip, r2
 80022b8:	4334      	orrs	r4, r6
 80022ba:	4327      	orrs	r7, r4
 80022bc:	1bdc      	subs	r4, r3, r7
 80022be:	42a3      	cmp	r3, r4
 80022c0:	419b      	sbcs	r3, r3
 80022c2:	4662      	mov	r2, ip
 80022c4:	425b      	negs	r3, r3
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	4699      	mov	r9, r3
 80022ca:	464b      	mov	r3, r9
 80022cc:	021b      	lsls	r3, r3, #8
 80022ce:	d400      	bmi.n	80022d2 <__aeabi_dsub+0xaa>
 80022d0:	e118      	b.n	8002504 <__aeabi_dsub+0x2dc>
 80022d2:	464b      	mov	r3, r9
 80022d4:	0258      	lsls	r0, r3, #9
 80022d6:	0a43      	lsrs	r3, r0, #9
 80022d8:	4699      	mov	r9, r3
 80022da:	464b      	mov	r3, r9
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d100      	bne.n	80022e2 <__aeabi_dsub+0xba>
 80022e0:	e137      	b.n	8002552 <__aeabi_dsub+0x32a>
 80022e2:	4648      	mov	r0, r9
 80022e4:	f000 fcac 	bl	8002c40 <__clzsi2>
 80022e8:	0001      	movs	r1, r0
 80022ea:	3908      	subs	r1, #8
 80022ec:	2320      	movs	r3, #32
 80022ee:	0022      	movs	r2, r4
 80022f0:	4648      	mov	r0, r9
 80022f2:	1a5b      	subs	r3, r3, r1
 80022f4:	40da      	lsrs	r2, r3
 80022f6:	4088      	lsls	r0, r1
 80022f8:	408c      	lsls	r4, r1
 80022fa:	4643      	mov	r3, r8
 80022fc:	4310      	orrs	r0, r2
 80022fe:	4588      	cmp	r8, r1
 8002300:	dd00      	ble.n	8002304 <__aeabi_dsub+0xdc>
 8002302:	e136      	b.n	8002572 <__aeabi_dsub+0x34a>
 8002304:	1ac9      	subs	r1, r1, r3
 8002306:	1c4b      	adds	r3, r1, #1
 8002308:	2b1f      	cmp	r3, #31
 800230a:	dd00      	ble.n	800230e <__aeabi_dsub+0xe6>
 800230c:	e0ea      	b.n	80024e4 <__aeabi_dsub+0x2bc>
 800230e:	2220      	movs	r2, #32
 8002310:	0026      	movs	r6, r4
 8002312:	1ad2      	subs	r2, r2, r3
 8002314:	0001      	movs	r1, r0
 8002316:	4094      	lsls	r4, r2
 8002318:	40de      	lsrs	r6, r3
 800231a:	40d8      	lsrs	r0, r3
 800231c:	2300      	movs	r3, #0
 800231e:	4091      	lsls	r1, r2
 8002320:	1e62      	subs	r2, r4, #1
 8002322:	4194      	sbcs	r4, r2
 8002324:	4681      	mov	r9, r0
 8002326:	4698      	mov	r8, r3
 8002328:	4331      	orrs	r1, r6
 800232a:	430c      	orrs	r4, r1
 800232c:	0763      	lsls	r3, r4, #29
 800232e:	d009      	beq.n	8002344 <__aeabi_dsub+0x11c>
 8002330:	230f      	movs	r3, #15
 8002332:	4023      	ands	r3, r4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d005      	beq.n	8002344 <__aeabi_dsub+0x11c>
 8002338:	1d23      	adds	r3, r4, #4
 800233a:	42a3      	cmp	r3, r4
 800233c:	41a4      	sbcs	r4, r4
 800233e:	4264      	negs	r4, r4
 8002340:	44a1      	add	r9, r4
 8002342:	001c      	movs	r4, r3
 8002344:	464b      	mov	r3, r9
 8002346:	021b      	lsls	r3, r3, #8
 8002348:	d400      	bmi.n	800234c <__aeabi_dsub+0x124>
 800234a:	e0de      	b.n	800250a <__aeabi_dsub+0x2e2>
 800234c:	4641      	mov	r1, r8
 800234e:	4b8c      	ldr	r3, [pc, #560]	; (8002580 <__aeabi_dsub+0x358>)
 8002350:	3101      	adds	r1, #1
 8002352:	4299      	cmp	r1, r3
 8002354:	d100      	bne.n	8002358 <__aeabi_dsub+0x130>
 8002356:	e0e7      	b.n	8002528 <__aeabi_dsub+0x300>
 8002358:	464b      	mov	r3, r9
 800235a:	488a      	ldr	r0, [pc, #552]	; (8002584 <__aeabi_dsub+0x35c>)
 800235c:	08e4      	lsrs	r4, r4, #3
 800235e:	4003      	ands	r3, r0
 8002360:	0018      	movs	r0, r3
 8002362:	0549      	lsls	r1, r1, #21
 8002364:	075b      	lsls	r3, r3, #29
 8002366:	0240      	lsls	r0, r0, #9
 8002368:	4323      	orrs	r3, r4
 800236a:	0d4a      	lsrs	r2, r1, #21
 800236c:	0b04      	lsrs	r4, r0, #12
 800236e:	0512      	lsls	r2, r2, #20
 8002370:	07ed      	lsls	r5, r5, #31
 8002372:	4322      	orrs	r2, r4
 8002374:	432a      	orrs	r2, r5
 8002376:	0018      	movs	r0, r3
 8002378:	0011      	movs	r1, r2
 800237a:	bcf0      	pop	{r4, r5, r6, r7}
 800237c:	46bb      	mov	fp, r7
 800237e:	46b2      	mov	sl, r6
 8002380:	46a9      	mov	r9, r5
 8002382:	46a0      	mov	r8, r4
 8002384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002386:	4642      	mov	r2, r8
 8002388:	1a12      	subs	r2, r2, r0
 800238a:	2a00      	cmp	r2, #0
 800238c:	dd52      	ble.n	8002434 <__aeabi_dsub+0x20c>
 800238e:	2800      	cmp	r0, #0
 8002390:	d100      	bne.n	8002394 <__aeabi_dsub+0x16c>
 8002392:	e09c      	b.n	80024ce <__aeabi_dsub+0x2a6>
 8002394:	45a0      	cmp	r8, r4
 8002396:	d100      	bne.n	800239a <__aeabi_dsub+0x172>
 8002398:	e0ca      	b.n	8002530 <__aeabi_dsub+0x308>
 800239a:	2080      	movs	r0, #128	; 0x80
 800239c:	0400      	lsls	r0, r0, #16
 800239e:	4301      	orrs	r1, r0
 80023a0:	2a38      	cmp	r2, #56	; 0x38
 80023a2:	dd00      	ble.n	80023a6 <__aeabi_dsub+0x17e>
 80023a4:	e149      	b.n	800263a <__aeabi_dsub+0x412>
 80023a6:	2a1f      	cmp	r2, #31
 80023a8:	dc00      	bgt.n	80023ac <__aeabi_dsub+0x184>
 80023aa:	e197      	b.n	80026dc <__aeabi_dsub+0x4b4>
 80023ac:	0010      	movs	r0, r2
 80023ae:	000e      	movs	r6, r1
 80023b0:	3820      	subs	r0, #32
 80023b2:	40c6      	lsrs	r6, r0
 80023b4:	2a20      	cmp	r2, #32
 80023b6:	d004      	beq.n	80023c2 <__aeabi_dsub+0x19a>
 80023b8:	2040      	movs	r0, #64	; 0x40
 80023ba:	1a82      	subs	r2, r0, r2
 80023bc:	4091      	lsls	r1, r2
 80023be:	430f      	orrs	r7, r1
 80023c0:	46b9      	mov	r9, r7
 80023c2:	464c      	mov	r4, r9
 80023c4:	1e62      	subs	r2, r4, #1
 80023c6:	4194      	sbcs	r4, r2
 80023c8:	4334      	orrs	r4, r6
 80023ca:	e13a      	b.n	8002642 <__aeabi_dsub+0x41a>
 80023cc:	000a      	movs	r2, r1
 80023ce:	433a      	orrs	r2, r7
 80023d0:	d028      	beq.n	8002424 <__aeabi_dsub+0x1fc>
 80023d2:	46b3      	mov	fp, r6
 80023d4:	42b5      	cmp	r5, r6
 80023d6:	d02b      	beq.n	8002430 <__aeabi_dsub+0x208>
 80023d8:	4a6b      	ldr	r2, [pc, #428]	; (8002588 <__aeabi_dsub+0x360>)
 80023da:	4442      	add	r2, r8
 80023dc:	2a00      	cmp	r2, #0
 80023de:	d05d      	beq.n	800249c <__aeabi_dsub+0x274>
 80023e0:	4642      	mov	r2, r8
 80023e2:	4644      	mov	r4, r8
 80023e4:	1a82      	subs	r2, r0, r2
 80023e6:	2c00      	cmp	r4, #0
 80023e8:	d000      	beq.n	80023ec <__aeabi_dsub+0x1c4>
 80023ea:	e0f5      	b.n	80025d8 <__aeabi_dsub+0x3b0>
 80023ec:	4665      	mov	r5, ip
 80023ee:	431d      	orrs	r5, r3
 80023f0:	d100      	bne.n	80023f4 <__aeabi_dsub+0x1cc>
 80023f2:	e19c      	b.n	800272e <__aeabi_dsub+0x506>
 80023f4:	1e55      	subs	r5, r2, #1
 80023f6:	2a01      	cmp	r2, #1
 80023f8:	d100      	bne.n	80023fc <__aeabi_dsub+0x1d4>
 80023fa:	e1fb      	b.n	80027f4 <__aeabi_dsub+0x5cc>
 80023fc:	4c60      	ldr	r4, [pc, #384]	; (8002580 <__aeabi_dsub+0x358>)
 80023fe:	42a2      	cmp	r2, r4
 8002400:	d100      	bne.n	8002404 <__aeabi_dsub+0x1dc>
 8002402:	e1bd      	b.n	8002780 <__aeabi_dsub+0x558>
 8002404:	002a      	movs	r2, r5
 8002406:	e0f0      	b.n	80025ea <__aeabi_dsub+0x3c2>
 8002408:	0008      	movs	r0, r1
 800240a:	4338      	orrs	r0, r7
 800240c:	d100      	bne.n	8002410 <__aeabi_dsub+0x1e8>
 800240e:	e0c3      	b.n	8002598 <__aeabi_dsub+0x370>
 8002410:	1e50      	subs	r0, r2, #1
 8002412:	2a01      	cmp	r2, #1
 8002414:	d100      	bne.n	8002418 <__aeabi_dsub+0x1f0>
 8002416:	e1a8      	b.n	800276a <__aeabi_dsub+0x542>
 8002418:	4c59      	ldr	r4, [pc, #356]	; (8002580 <__aeabi_dsub+0x358>)
 800241a:	42a2      	cmp	r2, r4
 800241c:	d100      	bne.n	8002420 <__aeabi_dsub+0x1f8>
 800241e:	e087      	b.n	8002530 <__aeabi_dsub+0x308>
 8002420:	0002      	movs	r2, r0
 8002422:	e736      	b.n	8002292 <__aeabi_dsub+0x6a>
 8002424:	2201      	movs	r2, #1
 8002426:	4056      	eors	r6, r2
 8002428:	46b3      	mov	fp, r6
 800242a:	42b5      	cmp	r5, r6
 800242c:	d000      	beq.n	8002430 <__aeabi_dsub+0x208>
 800242e:	e721      	b.n	8002274 <__aeabi_dsub+0x4c>
 8002430:	4a55      	ldr	r2, [pc, #340]	; (8002588 <__aeabi_dsub+0x360>)
 8002432:	4442      	add	r2, r8
 8002434:	2a00      	cmp	r2, #0
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x212>
 8002438:	e0b5      	b.n	80025a6 <__aeabi_dsub+0x37e>
 800243a:	4642      	mov	r2, r8
 800243c:	4644      	mov	r4, r8
 800243e:	1a82      	subs	r2, r0, r2
 8002440:	2c00      	cmp	r4, #0
 8002442:	d100      	bne.n	8002446 <__aeabi_dsub+0x21e>
 8002444:	e138      	b.n	80026b8 <__aeabi_dsub+0x490>
 8002446:	4e4e      	ldr	r6, [pc, #312]	; (8002580 <__aeabi_dsub+0x358>)
 8002448:	42b0      	cmp	r0, r6
 800244a:	d100      	bne.n	800244e <__aeabi_dsub+0x226>
 800244c:	e1de      	b.n	800280c <__aeabi_dsub+0x5e4>
 800244e:	2680      	movs	r6, #128	; 0x80
 8002450:	4664      	mov	r4, ip
 8002452:	0436      	lsls	r6, r6, #16
 8002454:	4334      	orrs	r4, r6
 8002456:	46a4      	mov	ip, r4
 8002458:	2a38      	cmp	r2, #56	; 0x38
 800245a:	dd00      	ble.n	800245e <__aeabi_dsub+0x236>
 800245c:	e196      	b.n	800278c <__aeabi_dsub+0x564>
 800245e:	2a1f      	cmp	r2, #31
 8002460:	dd00      	ble.n	8002464 <__aeabi_dsub+0x23c>
 8002462:	e224      	b.n	80028ae <__aeabi_dsub+0x686>
 8002464:	2620      	movs	r6, #32
 8002466:	1ab4      	subs	r4, r6, r2
 8002468:	46a2      	mov	sl, r4
 800246a:	4664      	mov	r4, ip
 800246c:	4656      	mov	r6, sl
 800246e:	40b4      	lsls	r4, r6
 8002470:	46a1      	mov	r9, r4
 8002472:	001c      	movs	r4, r3
 8002474:	464e      	mov	r6, r9
 8002476:	40d4      	lsrs	r4, r2
 8002478:	4326      	orrs	r6, r4
 800247a:	0034      	movs	r4, r6
 800247c:	4656      	mov	r6, sl
 800247e:	40b3      	lsls	r3, r6
 8002480:	1e5e      	subs	r6, r3, #1
 8002482:	41b3      	sbcs	r3, r6
 8002484:	431c      	orrs	r4, r3
 8002486:	4663      	mov	r3, ip
 8002488:	40d3      	lsrs	r3, r2
 800248a:	18c9      	adds	r1, r1, r3
 800248c:	19e4      	adds	r4, r4, r7
 800248e:	42bc      	cmp	r4, r7
 8002490:	41bf      	sbcs	r7, r7
 8002492:	427f      	negs	r7, r7
 8002494:	46b9      	mov	r9, r7
 8002496:	4680      	mov	r8, r0
 8002498:	4489      	add	r9, r1
 800249a:	e0d8      	b.n	800264e <__aeabi_dsub+0x426>
 800249c:	4640      	mov	r0, r8
 800249e:	4c3b      	ldr	r4, [pc, #236]	; (800258c <__aeabi_dsub+0x364>)
 80024a0:	3001      	adds	r0, #1
 80024a2:	4220      	tst	r0, r4
 80024a4:	d000      	beq.n	80024a8 <__aeabi_dsub+0x280>
 80024a6:	e0b4      	b.n	8002612 <__aeabi_dsub+0x3ea>
 80024a8:	4640      	mov	r0, r8
 80024aa:	2800      	cmp	r0, #0
 80024ac:	d000      	beq.n	80024b0 <__aeabi_dsub+0x288>
 80024ae:	e144      	b.n	800273a <__aeabi_dsub+0x512>
 80024b0:	4660      	mov	r0, ip
 80024b2:	4318      	orrs	r0, r3
 80024b4:	d100      	bne.n	80024b8 <__aeabi_dsub+0x290>
 80024b6:	e190      	b.n	80027da <__aeabi_dsub+0x5b2>
 80024b8:	0008      	movs	r0, r1
 80024ba:	4338      	orrs	r0, r7
 80024bc:	d000      	beq.n	80024c0 <__aeabi_dsub+0x298>
 80024be:	e1aa      	b.n	8002816 <__aeabi_dsub+0x5ee>
 80024c0:	4661      	mov	r1, ip
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	0749      	lsls	r1, r1, #29
 80024c6:	430b      	orrs	r3, r1
 80024c8:	4661      	mov	r1, ip
 80024ca:	08cc      	lsrs	r4, r1, #3
 80024cc:	e027      	b.n	800251e <__aeabi_dsub+0x2f6>
 80024ce:	0008      	movs	r0, r1
 80024d0:	4338      	orrs	r0, r7
 80024d2:	d061      	beq.n	8002598 <__aeabi_dsub+0x370>
 80024d4:	1e50      	subs	r0, r2, #1
 80024d6:	2a01      	cmp	r2, #1
 80024d8:	d100      	bne.n	80024dc <__aeabi_dsub+0x2b4>
 80024da:	e139      	b.n	8002750 <__aeabi_dsub+0x528>
 80024dc:	42a2      	cmp	r2, r4
 80024de:	d027      	beq.n	8002530 <__aeabi_dsub+0x308>
 80024e0:	0002      	movs	r2, r0
 80024e2:	e75d      	b.n	80023a0 <__aeabi_dsub+0x178>
 80024e4:	0002      	movs	r2, r0
 80024e6:	391f      	subs	r1, #31
 80024e8:	40ca      	lsrs	r2, r1
 80024ea:	0011      	movs	r1, r2
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d003      	beq.n	80024f8 <__aeabi_dsub+0x2d0>
 80024f0:	2240      	movs	r2, #64	; 0x40
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4098      	lsls	r0, r3
 80024f6:	4304      	orrs	r4, r0
 80024f8:	1e63      	subs	r3, r4, #1
 80024fa:	419c      	sbcs	r4, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	4699      	mov	r9, r3
 8002500:	4698      	mov	r8, r3
 8002502:	430c      	orrs	r4, r1
 8002504:	0763      	lsls	r3, r4, #29
 8002506:	d000      	beq.n	800250a <__aeabi_dsub+0x2e2>
 8002508:	e712      	b.n	8002330 <__aeabi_dsub+0x108>
 800250a:	464b      	mov	r3, r9
 800250c:	464a      	mov	r2, r9
 800250e:	08e4      	lsrs	r4, r4, #3
 8002510:	075b      	lsls	r3, r3, #29
 8002512:	4323      	orrs	r3, r4
 8002514:	08d4      	lsrs	r4, r2, #3
 8002516:	4642      	mov	r2, r8
 8002518:	4919      	ldr	r1, [pc, #100]	; (8002580 <__aeabi_dsub+0x358>)
 800251a:	428a      	cmp	r2, r1
 800251c:	d00e      	beq.n	800253c <__aeabi_dsub+0x314>
 800251e:	0324      	lsls	r4, r4, #12
 8002520:	0552      	lsls	r2, r2, #21
 8002522:	0b24      	lsrs	r4, r4, #12
 8002524:	0d52      	lsrs	r2, r2, #21
 8002526:	e722      	b.n	800236e <__aeabi_dsub+0x146>
 8002528:	000a      	movs	r2, r1
 800252a:	2400      	movs	r4, #0
 800252c:	2300      	movs	r3, #0
 800252e:	e71e      	b.n	800236e <__aeabi_dsub+0x146>
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	4662      	mov	r2, ip
 8002534:	0752      	lsls	r2, r2, #29
 8002536:	4313      	orrs	r3, r2
 8002538:	4662      	mov	r2, ip
 800253a:	08d4      	lsrs	r4, r2, #3
 800253c:	001a      	movs	r2, r3
 800253e:	4322      	orrs	r2, r4
 8002540:	d100      	bne.n	8002544 <__aeabi_dsub+0x31c>
 8002542:	e1fc      	b.n	800293e <__aeabi_dsub+0x716>
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	0312      	lsls	r2, r2, #12
 8002548:	4314      	orrs	r4, r2
 800254a:	0324      	lsls	r4, r4, #12
 800254c:	4a0c      	ldr	r2, [pc, #48]	; (8002580 <__aeabi_dsub+0x358>)
 800254e:	0b24      	lsrs	r4, r4, #12
 8002550:	e70d      	b.n	800236e <__aeabi_dsub+0x146>
 8002552:	0020      	movs	r0, r4
 8002554:	f000 fb74 	bl	8002c40 <__clzsi2>
 8002558:	0001      	movs	r1, r0
 800255a:	3118      	adds	r1, #24
 800255c:	291f      	cmp	r1, #31
 800255e:	dc00      	bgt.n	8002562 <__aeabi_dsub+0x33a>
 8002560:	e6c4      	b.n	80022ec <__aeabi_dsub+0xc4>
 8002562:	3808      	subs	r0, #8
 8002564:	4084      	lsls	r4, r0
 8002566:	4643      	mov	r3, r8
 8002568:	0020      	movs	r0, r4
 800256a:	2400      	movs	r4, #0
 800256c:	4588      	cmp	r8, r1
 800256e:	dc00      	bgt.n	8002572 <__aeabi_dsub+0x34a>
 8002570:	e6c8      	b.n	8002304 <__aeabi_dsub+0xdc>
 8002572:	4a04      	ldr	r2, [pc, #16]	; (8002584 <__aeabi_dsub+0x35c>)
 8002574:	1a5b      	subs	r3, r3, r1
 8002576:	4010      	ands	r0, r2
 8002578:	4698      	mov	r8, r3
 800257a:	4681      	mov	r9, r0
 800257c:	e6d6      	b.n	800232c <__aeabi_dsub+0x104>
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	000007ff 	.word	0x000007ff
 8002584:	ff7fffff 	.word	0xff7fffff
 8002588:	fffff801 	.word	0xfffff801
 800258c:	000007fe 	.word	0x000007fe
 8002590:	430f      	orrs	r7, r1
 8002592:	1e7a      	subs	r2, r7, #1
 8002594:	4197      	sbcs	r7, r2
 8002596:	e691      	b.n	80022bc <__aeabi_dsub+0x94>
 8002598:	4661      	mov	r1, ip
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	0749      	lsls	r1, r1, #29
 800259e:	430b      	orrs	r3, r1
 80025a0:	4661      	mov	r1, ip
 80025a2:	08cc      	lsrs	r4, r1, #3
 80025a4:	e7b8      	b.n	8002518 <__aeabi_dsub+0x2f0>
 80025a6:	4640      	mov	r0, r8
 80025a8:	4cd3      	ldr	r4, [pc, #844]	; (80028f8 <__aeabi_dsub+0x6d0>)
 80025aa:	3001      	adds	r0, #1
 80025ac:	4220      	tst	r0, r4
 80025ae:	d000      	beq.n	80025b2 <__aeabi_dsub+0x38a>
 80025b0:	e0a2      	b.n	80026f8 <__aeabi_dsub+0x4d0>
 80025b2:	4640      	mov	r0, r8
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d000      	beq.n	80025ba <__aeabi_dsub+0x392>
 80025b8:	e101      	b.n	80027be <__aeabi_dsub+0x596>
 80025ba:	4660      	mov	r0, ip
 80025bc:	4318      	orrs	r0, r3
 80025be:	d100      	bne.n	80025c2 <__aeabi_dsub+0x39a>
 80025c0:	e15e      	b.n	8002880 <__aeabi_dsub+0x658>
 80025c2:	0008      	movs	r0, r1
 80025c4:	4338      	orrs	r0, r7
 80025c6:	d000      	beq.n	80025ca <__aeabi_dsub+0x3a2>
 80025c8:	e15f      	b.n	800288a <__aeabi_dsub+0x662>
 80025ca:	4661      	mov	r1, ip
 80025cc:	08db      	lsrs	r3, r3, #3
 80025ce:	0749      	lsls	r1, r1, #29
 80025d0:	430b      	orrs	r3, r1
 80025d2:	4661      	mov	r1, ip
 80025d4:	08cc      	lsrs	r4, r1, #3
 80025d6:	e7a2      	b.n	800251e <__aeabi_dsub+0x2f6>
 80025d8:	4dc8      	ldr	r5, [pc, #800]	; (80028fc <__aeabi_dsub+0x6d4>)
 80025da:	42a8      	cmp	r0, r5
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dsub+0x3b8>
 80025de:	e0cf      	b.n	8002780 <__aeabi_dsub+0x558>
 80025e0:	2580      	movs	r5, #128	; 0x80
 80025e2:	4664      	mov	r4, ip
 80025e4:	042d      	lsls	r5, r5, #16
 80025e6:	432c      	orrs	r4, r5
 80025e8:	46a4      	mov	ip, r4
 80025ea:	2a38      	cmp	r2, #56	; 0x38
 80025ec:	dc56      	bgt.n	800269c <__aeabi_dsub+0x474>
 80025ee:	2a1f      	cmp	r2, #31
 80025f0:	dd00      	ble.n	80025f4 <__aeabi_dsub+0x3cc>
 80025f2:	e0d1      	b.n	8002798 <__aeabi_dsub+0x570>
 80025f4:	2520      	movs	r5, #32
 80025f6:	001e      	movs	r6, r3
 80025f8:	1aad      	subs	r5, r5, r2
 80025fa:	4664      	mov	r4, ip
 80025fc:	40ab      	lsls	r3, r5
 80025fe:	40ac      	lsls	r4, r5
 8002600:	40d6      	lsrs	r6, r2
 8002602:	1e5d      	subs	r5, r3, #1
 8002604:	41ab      	sbcs	r3, r5
 8002606:	4334      	orrs	r4, r6
 8002608:	4323      	orrs	r3, r4
 800260a:	4664      	mov	r4, ip
 800260c:	40d4      	lsrs	r4, r2
 800260e:	1b09      	subs	r1, r1, r4
 8002610:	e049      	b.n	80026a6 <__aeabi_dsub+0x47e>
 8002612:	4660      	mov	r0, ip
 8002614:	1bdc      	subs	r4, r3, r7
 8002616:	1a46      	subs	r6, r0, r1
 8002618:	42a3      	cmp	r3, r4
 800261a:	4180      	sbcs	r0, r0
 800261c:	4240      	negs	r0, r0
 800261e:	4681      	mov	r9, r0
 8002620:	0030      	movs	r0, r6
 8002622:	464e      	mov	r6, r9
 8002624:	1b80      	subs	r0, r0, r6
 8002626:	4681      	mov	r9, r0
 8002628:	0200      	lsls	r0, r0, #8
 800262a:	d476      	bmi.n	800271a <__aeabi_dsub+0x4f2>
 800262c:	464b      	mov	r3, r9
 800262e:	4323      	orrs	r3, r4
 8002630:	d000      	beq.n	8002634 <__aeabi_dsub+0x40c>
 8002632:	e652      	b.n	80022da <__aeabi_dsub+0xb2>
 8002634:	2400      	movs	r4, #0
 8002636:	2500      	movs	r5, #0
 8002638:	e771      	b.n	800251e <__aeabi_dsub+0x2f6>
 800263a:	4339      	orrs	r1, r7
 800263c:	000c      	movs	r4, r1
 800263e:	1e62      	subs	r2, r4, #1
 8002640:	4194      	sbcs	r4, r2
 8002642:	18e4      	adds	r4, r4, r3
 8002644:	429c      	cmp	r4, r3
 8002646:	419b      	sbcs	r3, r3
 8002648:	425b      	negs	r3, r3
 800264a:	4463      	add	r3, ip
 800264c:	4699      	mov	r9, r3
 800264e:	464b      	mov	r3, r9
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	d400      	bmi.n	8002656 <__aeabi_dsub+0x42e>
 8002654:	e756      	b.n	8002504 <__aeabi_dsub+0x2dc>
 8002656:	2301      	movs	r3, #1
 8002658:	469c      	mov	ip, r3
 800265a:	4ba8      	ldr	r3, [pc, #672]	; (80028fc <__aeabi_dsub+0x6d4>)
 800265c:	44e0      	add	r8, ip
 800265e:	4598      	cmp	r8, r3
 8002660:	d038      	beq.n	80026d4 <__aeabi_dsub+0x4ac>
 8002662:	464b      	mov	r3, r9
 8002664:	48a6      	ldr	r0, [pc, #664]	; (8002900 <__aeabi_dsub+0x6d8>)
 8002666:	2201      	movs	r2, #1
 8002668:	4003      	ands	r3, r0
 800266a:	0018      	movs	r0, r3
 800266c:	0863      	lsrs	r3, r4, #1
 800266e:	4014      	ands	r4, r2
 8002670:	431c      	orrs	r4, r3
 8002672:	07c3      	lsls	r3, r0, #31
 8002674:	431c      	orrs	r4, r3
 8002676:	0843      	lsrs	r3, r0, #1
 8002678:	4699      	mov	r9, r3
 800267a:	e657      	b.n	800232c <__aeabi_dsub+0x104>
 800267c:	0010      	movs	r0, r2
 800267e:	000e      	movs	r6, r1
 8002680:	3820      	subs	r0, #32
 8002682:	40c6      	lsrs	r6, r0
 8002684:	2a20      	cmp	r2, #32
 8002686:	d004      	beq.n	8002692 <__aeabi_dsub+0x46a>
 8002688:	2040      	movs	r0, #64	; 0x40
 800268a:	1a82      	subs	r2, r0, r2
 800268c:	4091      	lsls	r1, r2
 800268e:	430f      	orrs	r7, r1
 8002690:	46b9      	mov	r9, r7
 8002692:	464f      	mov	r7, r9
 8002694:	1e7a      	subs	r2, r7, #1
 8002696:	4197      	sbcs	r7, r2
 8002698:	4337      	orrs	r7, r6
 800269a:	e60f      	b.n	80022bc <__aeabi_dsub+0x94>
 800269c:	4662      	mov	r2, ip
 800269e:	431a      	orrs	r2, r3
 80026a0:	0013      	movs	r3, r2
 80026a2:	1e5a      	subs	r2, r3, #1
 80026a4:	4193      	sbcs	r3, r2
 80026a6:	1afc      	subs	r4, r7, r3
 80026a8:	42a7      	cmp	r7, r4
 80026aa:	41bf      	sbcs	r7, r7
 80026ac:	427f      	negs	r7, r7
 80026ae:	1bcb      	subs	r3, r1, r7
 80026b0:	4699      	mov	r9, r3
 80026b2:	465d      	mov	r5, fp
 80026b4:	4680      	mov	r8, r0
 80026b6:	e608      	b.n	80022ca <__aeabi_dsub+0xa2>
 80026b8:	4666      	mov	r6, ip
 80026ba:	431e      	orrs	r6, r3
 80026bc:	d100      	bne.n	80026c0 <__aeabi_dsub+0x498>
 80026be:	e0be      	b.n	800283e <__aeabi_dsub+0x616>
 80026c0:	1e56      	subs	r6, r2, #1
 80026c2:	2a01      	cmp	r2, #1
 80026c4:	d100      	bne.n	80026c8 <__aeabi_dsub+0x4a0>
 80026c6:	e109      	b.n	80028dc <__aeabi_dsub+0x6b4>
 80026c8:	4c8c      	ldr	r4, [pc, #560]	; (80028fc <__aeabi_dsub+0x6d4>)
 80026ca:	42a2      	cmp	r2, r4
 80026cc:	d100      	bne.n	80026d0 <__aeabi_dsub+0x4a8>
 80026ce:	e119      	b.n	8002904 <__aeabi_dsub+0x6dc>
 80026d0:	0032      	movs	r2, r6
 80026d2:	e6c1      	b.n	8002458 <__aeabi_dsub+0x230>
 80026d4:	4642      	mov	r2, r8
 80026d6:	2400      	movs	r4, #0
 80026d8:	2300      	movs	r3, #0
 80026da:	e648      	b.n	800236e <__aeabi_dsub+0x146>
 80026dc:	2020      	movs	r0, #32
 80026de:	000c      	movs	r4, r1
 80026e0:	1a80      	subs	r0, r0, r2
 80026e2:	003e      	movs	r6, r7
 80026e4:	4087      	lsls	r7, r0
 80026e6:	4084      	lsls	r4, r0
 80026e8:	40d6      	lsrs	r6, r2
 80026ea:	1e78      	subs	r0, r7, #1
 80026ec:	4187      	sbcs	r7, r0
 80026ee:	40d1      	lsrs	r1, r2
 80026f0:	4334      	orrs	r4, r6
 80026f2:	433c      	orrs	r4, r7
 80026f4:	448c      	add	ip, r1
 80026f6:	e7a4      	b.n	8002642 <__aeabi_dsub+0x41a>
 80026f8:	4a80      	ldr	r2, [pc, #512]	; (80028fc <__aeabi_dsub+0x6d4>)
 80026fa:	4290      	cmp	r0, r2
 80026fc:	d100      	bne.n	8002700 <__aeabi_dsub+0x4d8>
 80026fe:	e0e9      	b.n	80028d4 <__aeabi_dsub+0x6ac>
 8002700:	19df      	adds	r7, r3, r7
 8002702:	429f      	cmp	r7, r3
 8002704:	419b      	sbcs	r3, r3
 8002706:	4461      	add	r1, ip
 8002708:	425b      	negs	r3, r3
 800270a:	18c9      	adds	r1, r1, r3
 800270c:	07cc      	lsls	r4, r1, #31
 800270e:	087f      	lsrs	r7, r7, #1
 8002710:	084b      	lsrs	r3, r1, #1
 8002712:	4699      	mov	r9, r3
 8002714:	4680      	mov	r8, r0
 8002716:	433c      	orrs	r4, r7
 8002718:	e6f4      	b.n	8002504 <__aeabi_dsub+0x2dc>
 800271a:	1afc      	subs	r4, r7, r3
 800271c:	42a7      	cmp	r7, r4
 800271e:	41bf      	sbcs	r7, r7
 8002720:	4663      	mov	r3, ip
 8002722:	427f      	negs	r7, r7
 8002724:	1ac9      	subs	r1, r1, r3
 8002726:	1bcb      	subs	r3, r1, r7
 8002728:	4699      	mov	r9, r3
 800272a:	465d      	mov	r5, fp
 800272c:	e5d5      	b.n	80022da <__aeabi_dsub+0xb2>
 800272e:	08ff      	lsrs	r7, r7, #3
 8002730:	074b      	lsls	r3, r1, #29
 8002732:	465d      	mov	r5, fp
 8002734:	433b      	orrs	r3, r7
 8002736:	08cc      	lsrs	r4, r1, #3
 8002738:	e6ee      	b.n	8002518 <__aeabi_dsub+0x2f0>
 800273a:	4662      	mov	r2, ip
 800273c:	431a      	orrs	r2, r3
 800273e:	d000      	beq.n	8002742 <__aeabi_dsub+0x51a>
 8002740:	e082      	b.n	8002848 <__aeabi_dsub+0x620>
 8002742:	000b      	movs	r3, r1
 8002744:	433b      	orrs	r3, r7
 8002746:	d11b      	bne.n	8002780 <__aeabi_dsub+0x558>
 8002748:	2480      	movs	r4, #128	; 0x80
 800274a:	2500      	movs	r5, #0
 800274c:	0324      	lsls	r4, r4, #12
 800274e:	e6f9      	b.n	8002544 <__aeabi_dsub+0x31c>
 8002750:	19dc      	adds	r4, r3, r7
 8002752:	429c      	cmp	r4, r3
 8002754:	419b      	sbcs	r3, r3
 8002756:	4461      	add	r1, ip
 8002758:	4689      	mov	r9, r1
 800275a:	425b      	negs	r3, r3
 800275c:	4499      	add	r9, r3
 800275e:	464b      	mov	r3, r9
 8002760:	021b      	lsls	r3, r3, #8
 8002762:	d444      	bmi.n	80027ee <__aeabi_dsub+0x5c6>
 8002764:	2301      	movs	r3, #1
 8002766:	4698      	mov	r8, r3
 8002768:	e6cc      	b.n	8002504 <__aeabi_dsub+0x2dc>
 800276a:	1bdc      	subs	r4, r3, r7
 800276c:	4662      	mov	r2, ip
 800276e:	42a3      	cmp	r3, r4
 8002770:	419b      	sbcs	r3, r3
 8002772:	1a51      	subs	r1, r2, r1
 8002774:	425b      	negs	r3, r3
 8002776:	1acb      	subs	r3, r1, r3
 8002778:	4699      	mov	r9, r3
 800277a:	2301      	movs	r3, #1
 800277c:	4698      	mov	r8, r3
 800277e:	e5a4      	b.n	80022ca <__aeabi_dsub+0xa2>
 8002780:	08ff      	lsrs	r7, r7, #3
 8002782:	074b      	lsls	r3, r1, #29
 8002784:	465d      	mov	r5, fp
 8002786:	433b      	orrs	r3, r7
 8002788:	08cc      	lsrs	r4, r1, #3
 800278a:	e6d7      	b.n	800253c <__aeabi_dsub+0x314>
 800278c:	4662      	mov	r2, ip
 800278e:	431a      	orrs	r2, r3
 8002790:	0014      	movs	r4, r2
 8002792:	1e63      	subs	r3, r4, #1
 8002794:	419c      	sbcs	r4, r3
 8002796:	e679      	b.n	800248c <__aeabi_dsub+0x264>
 8002798:	0015      	movs	r5, r2
 800279a:	4664      	mov	r4, ip
 800279c:	3d20      	subs	r5, #32
 800279e:	40ec      	lsrs	r4, r5
 80027a0:	46a0      	mov	r8, r4
 80027a2:	2a20      	cmp	r2, #32
 80027a4:	d005      	beq.n	80027b2 <__aeabi_dsub+0x58a>
 80027a6:	2540      	movs	r5, #64	; 0x40
 80027a8:	4664      	mov	r4, ip
 80027aa:	1aaa      	subs	r2, r5, r2
 80027ac:	4094      	lsls	r4, r2
 80027ae:	4323      	orrs	r3, r4
 80027b0:	469a      	mov	sl, r3
 80027b2:	4654      	mov	r4, sl
 80027b4:	1e63      	subs	r3, r4, #1
 80027b6:	419c      	sbcs	r4, r3
 80027b8:	4643      	mov	r3, r8
 80027ba:	4323      	orrs	r3, r4
 80027bc:	e773      	b.n	80026a6 <__aeabi_dsub+0x47e>
 80027be:	4662      	mov	r2, ip
 80027c0:	431a      	orrs	r2, r3
 80027c2:	d023      	beq.n	800280c <__aeabi_dsub+0x5e4>
 80027c4:	000a      	movs	r2, r1
 80027c6:	433a      	orrs	r2, r7
 80027c8:	d000      	beq.n	80027cc <__aeabi_dsub+0x5a4>
 80027ca:	e0a0      	b.n	800290e <__aeabi_dsub+0x6e6>
 80027cc:	4662      	mov	r2, ip
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	0752      	lsls	r2, r2, #29
 80027d2:	4313      	orrs	r3, r2
 80027d4:	4662      	mov	r2, ip
 80027d6:	08d4      	lsrs	r4, r2, #3
 80027d8:	e6b0      	b.n	800253c <__aeabi_dsub+0x314>
 80027da:	000b      	movs	r3, r1
 80027dc:	433b      	orrs	r3, r7
 80027de:	d100      	bne.n	80027e2 <__aeabi_dsub+0x5ba>
 80027e0:	e728      	b.n	8002634 <__aeabi_dsub+0x40c>
 80027e2:	08ff      	lsrs	r7, r7, #3
 80027e4:	074b      	lsls	r3, r1, #29
 80027e6:	465d      	mov	r5, fp
 80027e8:	433b      	orrs	r3, r7
 80027ea:	08cc      	lsrs	r4, r1, #3
 80027ec:	e697      	b.n	800251e <__aeabi_dsub+0x2f6>
 80027ee:	2302      	movs	r3, #2
 80027f0:	4698      	mov	r8, r3
 80027f2:	e736      	b.n	8002662 <__aeabi_dsub+0x43a>
 80027f4:	1afc      	subs	r4, r7, r3
 80027f6:	42a7      	cmp	r7, r4
 80027f8:	41bf      	sbcs	r7, r7
 80027fa:	4663      	mov	r3, ip
 80027fc:	427f      	negs	r7, r7
 80027fe:	1ac9      	subs	r1, r1, r3
 8002800:	1bcb      	subs	r3, r1, r7
 8002802:	4699      	mov	r9, r3
 8002804:	2301      	movs	r3, #1
 8002806:	465d      	mov	r5, fp
 8002808:	4698      	mov	r8, r3
 800280a:	e55e      	b.n	80022ca <__aeabi_dsub+0xa2>
 800280c:	074b      	lsls	r3, r1, #29
 800280e:	08ff      	lsrs	r7, r7, #3
 8002810:	433b      	orrs	r3, r7
 8002812:	08cc      	lsrs	r4, r1, #3
 8002814:	e692      	b.n	800253c <__aeabi_dsub+0x314>
 8002816:	1bdc      	subs	r4, r3, r7
 8002818:	4660      	mov	r0, ip
 800281a:	42a3      	cmp	r3, r4
 800281c:	41b6      	sbcs	r6, r6
 800281e:	1a40      	subs	r0, r0, r1
 8002820:	4276      	negs	r6, r6
 8002822:	1b80      	subs	r0, r0, r6
 8002824:	4681      	mov	r9, r0
 8002826:	0200      	lsls	r0, r0, #8
 8002828:	d560      	bpl.n	80028ec <__aeabi_dsub+0x6c4>
 800282a:	1afc      	subs	r4, r7, r3
 800282c:	42a7      	cmp	r7, r4
 800282e:	41bf      	sbcs	r7, r7
 8002830:	4663      	mov	r3, ip
 8002832:	427f      	negs	r7, r7
 8002834:	1ac9      	subs	r1, r1, r3
 8002836:	1bcb      	subs	r3, r1, r7
 8002838:	4699      	mov	r9, r3
 800283a:	465d      	mov	r5, fp
 800283c:	e576      	b.n	800232c <__aeabi_dsub+0x104>
 800283e:	08ff      	lsrs	r7, r7, #3
 8002840:	074b      	lsls	r3, r1, #29
 8002842:	433b      	orrs	r3, r7
 8002844:	08cc      	lsrs	r4, r1, #3
 8002846:	e667      	b.n	8002518 <__aeabi_dsub+0x2f0>
 8002848:	000a      	movs	r2, r1
 800284a:	08db      	lsrs	r3, r3, #3
 800284c:	433a      	orrs	r2, r7
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x62a>
 8002850:	e66f      	b.n	8002532 <__aeabi_dsub+0x30a>
 8002852:	4662      	mov	r2, ip
 8002854:	0752      	lsls	r2, r2, #29
 8002856:	4313      	orrs	r3, r2
 8002858:	4662      	mov	r2, ip
 800285a:	08d4      	lsrs	r4, r2, #3
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	0312      	lsls	r2, r2, #12
 8002860:	4214      	tst	r4, r2
 8002862:	d007      	beq.n	8002874 <__aeabi_dsub+0x64c>
 8002864:	08c8      	lsrs	r0, r1, #3
 8002866:	4210      	tst	r0, r2
 8002868:	d104      	bne.n	8002874 <__aeabi_dsub+0x64c>
 800286a:	465d      	mov	r5, fp
 800286c:	0004      	movs	r4, r0
 800286e:	08fb      	lsrs	r3, r7, #3
 8002870:	0749      	lsls	r1, r1, #29
 8002872:	430b      	orrs	r3, r1
 8002874:	0f5a      	lsrs	r2, r3, #29
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	08db      	lsrs	r3, r3, #3
 800287a:	0752      	lsls	r2, r2, #29
 800287c:	4313      	orrs	r3, r2
 800287e:	e65d      	b.n	800253c <__aeabi_dsub+0x314>
 8002880:	074b      	lsls	r3, r1, #29
 8002882:	08ff      	lsrs	r7, r7, #3
 8002884:	433b      	orrs	r3, r7
 8002886:	08cc      	lsrs	r4, r1, #3
 8002888:	e649      	b.n	800251e <__aeabi_dsub+0x2f6>
 800288a:	19dc      	adds	r4, r3, r7
 800288c:	429c      	cmp	r4, r3
 800288e:	419b      	sbcs	r3, r3
 8002890:	4461      	add	r1, ip
 8002892:	4689      	mov	r9, r1
 8002894:	425b      	negs	r3, r3
 8002896:	4499      	add	r9, r3
 8002898:	464b      	mov	r3, r9
 800289a:	021b      	lsls	r3, r3, #8
 800289c:	d400      	bmi.n	80028a0 <__aeabi_dsub+0x678>
 800289e:	e631      	b.n	8002504 <__aeabi_dsub+0x2dc>
 80028a0:	464a      	mov	r2, r9
 80028a2:	4b17      	ldr	r3, [pc, #92]	; (8002900 <__aeabi_dsub+0x6d8>)
 80028a4:	401a      	ands	r2, r3
 80028a6:	2301      	movs	r3, #1
 80028a8:	4691      	mov	r9, r2
 80028aa:	4698      	mov	r8, r3
 80028ac:	e62a      	b.n	8002504 <__aeabi_dsub+0x2dc>
 80028ae:	0016      	movs	r6, r2
 80028b0:	4664      	mov	r4, ip
 80028b2:	3e20      	subs	r6, #32
 80028b4:	40f4      	lsrs	r4, r6
 80028b6:	46a0      	mov	r8, r4
 80028b8:	2a20      	cmp	r2, #32
 80028ba:	d005      	beq.n	80028c8 <__aeabi_dsub+0x6a0>
 80028bc:	2640      	movs	r6, #64	; 0x40
 80028be:	4664      	mov	r4, ip
 80028c0:	1ab2      	subs	r2, r6, r2
 80028c2:	4094      	lsls	r4, r2
 80028c4:	4323      	orrs	r3, r4
 80028c6:	469a      	mov	sl, r3
 80028c8:	4654      	mov	r4, sl
 80028ca:	1e63      	subs	r3, r4, #1
 80028cc:	419c      	sbcs	r4, r3
 80028ce:	4643      	mov	r3, r8
 80028d0:	431c      	orrs	r4, r3
 80028d2:	e5db      	b.n	800248c <__aeabi_dsub+0x264>
 80028d4:	0002      	movs	r2, r0
 80028d6:	2400      	movs	r4, #0
 80028d8:	2300      	movs	r3, #0
 80028da:	e548      	b.n	800236e <__aeabi_dsub+0x146>
 80028dc:	19dc      	adds	r4, r3, r7
 80028de:	42bc      	cmp	r4, r7
 80028e0:	41bf      	sbcs	r7, r7
 80028e2:	4461      	add	r1, ip
 80028e4:	4689      	mov	r9, r1
 80028e6:	427f      	negs	r7, r7
 80028e8:	44b9      	add	r9, r7
 80028ea:	e738      	b.n	800275e <__aeabi_dsub+0x536>
 80028ec:	464b      	mov	r3, r9
 80028ee:	4323      	orrs	r3, r4
 80028f0:	d100      	bne.n	80028f4 <__aeabi_dsub+0x6cc>
 80028f2:	e69f      	b.n	8002634 <__aeabi_dsub+0x40c>
 80028f4:	e606      	b.n	8002504 <__aeabi_dsub+0x2dc>
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	000007fe 	.word	0x000007fe
 80028fc:	000007ff 	.word	0x000007ff
 8002900:	ff7fffff 	.word	0xff7fffff
 8002904:	08ff      	lsrs	r7, r7, #3
 8002906:	074b      	lsls	r3, r1, #29
 8002908:	433b      	orrs	r3, r7
 800290a:	08cc      	lsrs	r4, r1, #3
 800290c:	e616      	b.n	800253c <__aeabi_dsub+0x314>
 800290e:	4662      	mov	r2, ip
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	0752      	lsls	r2, r2, #29
 8002914:	4313      	orrs	r3, r2
 8002916:	4662      	mov	r2, ip
 8002918:	08d4      	lsrs	r4, r2, #3
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0312      	lsls	r2, r2, #12
 800291e:	4214      	tst	r4, r2
 8002920:	d007      	beq.n	8002932 <__aeabi_dsub+0x70a>
 8002922:	08c8      	lsrs	r0, r1, #3
 8002924:	4210      	tst	r0, r2
 8002926:	d104      	bne.n	8002932 <__aeabi_dsub+0x70a>
 8002928:	465d      	mov	r5, fp
 800292a:	0004      	movs	r4, r0
 800292c:	08fb      	lsrs	r3, r7, #3
 800292e:	0749      	lsls	r1, r1, #29
 8002930:	430b      	orrs	r3, r1
 8002932:	0f5a      	lsrs	r2, r3, #29
 8002934:	00db      	lsls	r3, r3, #3
 8002936:	0752      	lsls	r2, r2, #29
 8002938:	08db      	lsrs	r3, r3, #3
 800293a:	4313      	orrs	r3, r2
 800293c:	e5fe      	b.n	800253c <__aeabi_dsub+0x314>
 800293e:	2300      	movs	r3, #0
 8002940:	4a01      	ldr	r2, [pc, #4]	; (8002948 <__aeabi_dsub+0x720>)
 8002942:	001c      	movs	r4, r3
 8002944:	e513      	b.n	800236e <__aeabi_dsub+0x146>
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	000007ff 	.word	0x000007ff

0800294c <__aeabi_dcmpun>:
 800294c:	b570      	push	{r4, r5, r6, lr}
 800294e:	0005      	movs	r5, r0
 8002950:	480c      	ldr	r0, [pc, #48]	; (8002984 <__aeabi_dcmpun+0x38>)
 8002952:	031c      	lsls	r4, r3, #12
 8002954:	0016      	movs	r6, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	030a      	lsls	r2, r1, #12
 800295a:	0049      	lsls	r1, r1, #1
 800295c:	0b12      	lsrs	r2, r2, #12
 800295e:	0d49      	lsrs	r1, r1, #21
 8002960:	0b24      	lsrs	r4, r4, #12
 8002962:	0d5b      	lsrs	r3, r3, #21
 8002964:	4281      	cmp	r1, r0
 8002966:	d008      	beq.n	800297a <__aeabi_dcmpun+0x2e>
 8002968:	4a06      	ldr	r2, [pc, #24]	; (8002984 <__aeabi_dcmpun+0x38>)
 800296a:	2000      	movs	r0, #0
 800296c:	4293      	cmp	r3, r2
 800296e:	d103      	bne.n	8002978 <__aeabi_dcmpun+0x2c>
 8002970:	0020      	movs	r0, r4
 8002972:	4330      	orrs	r0, r6
 8002974:	1e43      	subs	r3, r0, #1
 8002976:	4198      	sbcs	r0, r3
 8002978:	bd70      	pop	{r4, r5, r6, pc}
 800297a:	2001      	movs	r0, #1
 800297c:	432a      	orrs	r2, r5
 800297e:	d1fb      	bne.n	8002978 <__aeabi_dcmpun+0x2c>
 8002980:	e7f2      	b.n	8002968 <__aeabi_dcmpun+0x1c>
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	000007ff 	.word	0x000007ff

08002988 <__aeabi_d2iz>:
 8002988:	000a      	movs	r2, r1
 800298a:	b530      	push	{r4, r5, lr}
 800298c:	4c13      	ldr	r4, [pc, #76]	; (80029dc <__aeabi_d2iz+0x54>)
 800298e:	0053      	lsls	r3, r2, #1
 8002990:	0309      	lsls	r1, r1, #12
 8002992:	0005      	movs	r5, r0
 8002994:	0b09      	lsrs	r1, r1, #12
 8002996:	2000      	movs	r0, #0
 8002998:	0d5b      	lsrs	r3, r3, #21
 800299a:	0fd2      	lsrs	r2, r2, #31
 800299c:	42a3      	cmp	r3, r4
 800299e:	dd04      	ble.n	80029aa <__aeabi_d2iz+0x22>
 80029a0:	480f      	ldr	r0, [pc, #60]	; (80029e0 <__aeabi_d2iz+0x58>)
 80029a2:	4283      	cmp	r3, r0
 80029a4:	dd02      	ble.n	80029ac <__aeabi_d2iz+0x24>
 80029a6:	4b0f      	ldr	r3, [pc, #60]	; (80029e4 <__aeabi_d2iz+0x5c>)
 80029a8:	18d0      	adds	r0, r2, r3
 80029aa:	bd30      	pop	{r4, r5, pc}
 80029ac:	2080      	movs	r0, #128	; 0x80
 80029ae:	0340      	lsls	r0, r0, #13
 80029b0:	4301      	orrs	r1, r0
 80029b2:	480d      	ldr	r0, [pc, #52]	; (80029e8 <__aeabi_d2iz+0x60>)
 80029b4:	1ac0      	subs	r0, r0, r3
 80029b6:	281f      	cmp	r0, #31
 80029b8:	dd08      	ble.n	80029cc <__aeabi_d2iz+0x44>
 80029ba:	480c      	ldr	r0, [pc, #48]	; (80029ec <__aeabi_d2iz+0x64>)
 80029bc:	1ac3      	subs	r3, r0, r3
 80029be:	40d9      	lsrs	r1, r3
 80029c0:	000b      	movs	r3, r1
 80029c2:	4258      	negs	r0, r3
 80029c4:	2a00      	cmp	r2, #0
 80029c6:	d1f0      	bne.n	80029aa <__aeabi_d2iz+0x22>
 80029c8:	0018      	movs	r0, r3
 80029ca:	e7ee      	b.n	80029aa <__aeabi_d2iz+0x22>
 80029cc:	4c08      	ldr	r4, [pc, #32]	; (80029f0 <__aeabi_d2iz+0x68>)
 80029ce:	40c5      	lsrs	r5, r0
 80029d0:	46a4      	mov	ip, r4
 80029d2:	4463      	add	r3, ip
 80029d4:	4099      	lsls	r1, r3
 80029d6:	000b      	movs	r3, r1
 80029d8:	432b      	orrs	r3, r5
 80029da:	e7f2      	b.n	80029c2 <__aeabi_d2iz+0x3a>
 80029dc:	000003fe 	.word	0x000003fe
 80029e0:	0000041d 	.word	0x0000041d
 80029e4:	7fffffff 	.word	0x7fffffff
 80029e8:	00000433 	.word	0x00000433
 80029ec:	00000413 	.word	0x00000413
 80029f0:	fffffbed 	.word	0xfffffbed

080029f4 <__aeabi_i2d>:
 80029f4:	b570      	push	{r4, r5, r6, lr}
 80029f6:	2800      	cmp	r0, #0
 80029f8:	d016      	beq.n	8002a28 <__aeabi_i2d+0x34>
 80029fa:	17c3      	asrs	r3, r0, #31
 80029fc:	18c5      	adds	r5, r0, r3
 80029fe:	405d      	eors	r5, r3
 8002a00:	0fc4      	lsrs	r4, r0, #31
 8002a02:	0028      	movs	r0, r5
 8002a04:	f000 f91c 	bl	8002c40 <__clzsi2>
 8002a08:	4a11      	ldr	r2, [pc, #68]	; (8002a50 <__aeabi_i2d+0x5c>)
 8002a0a:	1a12      	subs	r2, r2, r0
 8002a0c:	280a      	cmp	r0, #10
 8002a0e:	dc16      	bgt.n	8002a3e <__aeabi_i2d+0x4a>
 8002a10:	0003      	movs	r3, r0
 8002a12:	002e      	movs	r6, r5
 8002a14:	3315      	adds	r3, #21
 8002a16:	409e      	lsls	r6, r3
 8002a18:	230b      	movs	r3, #11
 8002a1a:	1a18      	subs	r0, r3, r0
 8002a1c:	40c5      	lsrs	r5, r0
 8002a1e:	0552      	lsls	r2, r2, #21
 8002a20:	032d      	lsls	r5, r5, #12
 8002a22:	0b2d      	lsrs	r5, r5, #12
 8002a24:	0d53      	lsrs	r3, r2, #21
 8002a26:	e003      	b.n	8002a30 <__aeabi_i2d+0x3c>
 8002a28:	2400      	movs	r4, #0
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	2500      	movs	r5, #0
 8002a2e:	2600      	movs	r6, #0
 8002a30:	051b      	lsls	r3, r3, #20
 8002a32:	432b      	orrs	r3, r5
 8002a34:	07e4      	lsls	r4, r4, #31
 8002a36:	4323      	orrs	r3, r4
 8002a38:	0030      	movs	r0, r6
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	bd70      	pop	{r4, r5, r6, pc}
 8002a3e:	380b      	subs	r0, #11
 8002a40:	4085      	lsls	r5, r0
 8002a42:	0552      	lsls	r2, r2, #21
 8002a44:	032d      	lsls	r5, r5, #12
 8002a46:	2600      	movs	r6, #0
 8002a48:	0b2d      	lsrs	r5, r5, #12
 8002a4a:	0d53      	lsrs	r3, r2, #21
 8002a4c:	e7f0      	b.n	8002a30 <__aeabi_i2d+0x3c>
 8002a4e:	46c0      	nop			; (mov r8, r8)
 8002a50:	0000041e 	.word	0x0000041e

08002a54 <__aeabi_ui2d>:
 8002a54:	b510      	push	{r4, lr}
 8002a56:	1e04      	subs	r4, r0, #0
 8002a58:	d010      	beq.n	8002a7c <__aeabi_ui2d+0x28>
 8002a5a:	f000 f8f1 	bl	8002c40 <__clzsi2>
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <__aeabi_ui2d+0x48>)
 8002a60:	1a1b      	subs	r3, r3, r0
 8002a62:	280a      	cmp	r0, #10
 8002a64:	dc11      	bgt.n	8002a8a <__aeabi_ui2d+0x36>
 8002a66:	220b      	movs	r2, #11
 8002a68:	0021      	movs	r1, r4
 8002a6a:	1a12      	subs	r2, r2, r0
 8002a6c:	40d1      	lsrs	r1, r2
 8002a6e:	3015      	adds	r0, #21
 8002a70:	030a      	lsls	r2, r1, #12
 8002a72:	055b      	lsls	r3, r3, #21
 8002a74:	4084      	lsls	r4, r0
 8002a76:	0b12      	lsrs	r2, r2, #12
 8002a78:	0d5b      	lsrs	r3, r3, #21
 8002a7a:	e001      	b.n	8002a80 <__aeabi_ui2d+0x2c>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	2200      	movs	r2, #0
 8002a80:	051b      	lsls	r3, r3, #20
 8002a82:	4313      	orrs	r3, r2
 8002a84:	0020      	movs	r0, r4
 8002a86:	0019      	movs	r1, r3
 8002a88:	bd10      	pop	{r4, pc}
 8002a8a:	0022      	movs	r2, r4
 8002a8c:	380b      	subs	r0, #11
 8002a8e:	4082      	lsls	r2, r0
 8002a90:	055b      	lsls	r3, r3, #21
 8002a92:	0312      	lsls	r2, r2, #12
 8002a94:	2400      	movs	r4, #0
 8002a96:	0b12      	lsrs	r2, r2, #12
 8002a98:	0d5b      	lsrs	r3, r3, #21
 8002a9a:	e7f1      	b.n	8002a80 <__aeabi_ui2d+0x2c>
 8002a9c:	0000041e 	.word	0x0000041e

08002aa0 <__aeabi_f2d>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	0043      	lsls	r3, r0, #1
 8002aa4:	0246      	lsls	r6, r0, #9
 8002aa6:	0fc4      	lsrs	r4, r0, #31
 8002aa8:	20fe      	movs	r0, #254	; 0xfe
 8002aaa:	0e1b      	lsrs	r3, r3, #24
 8002aac:	1c59      	adds	r1, r3, #1
 8002aae:	0a75      	lsrs	r5, r6, #9
 8002ab0:	4208      	tst	r0, r1
 8002ab2:	d00c      	beq.n	8002ace <__aeabi_f2d+0x2e>
 8002ab4:	22e0      	movs	r2, #224	; 0xe0
 8002ab6:	0092      	lsls	r2, r2, #2
 8002ab8:	4694      	mov	ip, r2
 8002aba:	076d      	lsls	r5, r5, #29
 8002abc:	0b36      	lsrs	r6, r6, #12
 8002abe:	4463      	add	r3, ip
 8002ac0:	051b      	lsls	r3, r3, #20
 8002ac2:	4333      	orrs	r3, r6
 8002ac4:	07e4      	lsls	r4, r4, #31
 8002ac6:	4323      	orrs	r3, r4
 8002ac8:	0028      	movs	r0, r5
 8002aca:	0019      	movs	r1, r3
 8002acc:	bd70      	pop	{r4, r5, r6, pc}
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d114      	bne.n	8002afc <__aeabi_f2d+0x5c>
 8002ad2:	2d00      	cmp	r5, #0
 8002ad4:	d01b      	beq.n	8002b0e <__aeabi_f2d+0x6e>
 8002ad6:	0028      	movs	r0, r5
 8002ad8:	f000 f8b2 	bl	8002c40 <__clzsi2>
 8002adc:	280a      	cmp	r0, #10
 8002ade:	dc1c      	bgt.n	8002b1a <__aeabi_f2d+0x7a>
 8002ae0:	230b      	movs	r3, #11
 8002ae2:	002e      	movs	r6, r5
 8002ae4:	1a1b      	subs	r3, r3, r0
 8002ae6:	40de      	lsrs	r6, r3
 8002ae8:	0003      	movs	r3, r0
 8002aea:	3315      	adds	r3, #21
 8002aec:	409d      	lsls	r5, r3
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <__aeabi_f2d+0x88>)
 8002af0:	0336      	lsls	r6, r6, #12
 8002af2:	1a12      	subs	r2, r2, r0
 8002af4:	0552      	lsls	r2, r2, #21
 8002af6:	0b36      	lsrs	r6, r6, #12
 8002af8:	0d53      	lsrs	r3, r2, #21
 8002afa:	e7e1      	b.n	8002ac0 <__aeabi_f2d+0x20>
 8002afc:	2d00      	cmp	r5, #0
 8002afe:	d009      	beq.n	8002b14 <__aeabi_f2d+0x74>
 8002b00:	2280      	movs	r2, #128	; 0x80
 8002b02:	0b36      	lsrs	r6, r6, #12
 8002b04:	0312      	lsls	r2, r2, #12
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <__aeabi_f2d+0x8c>)
 8002b08:	076d      	lsls	r5, r5, #29
 8002b0a:	4316      	orrs	r6, r2
 8002b0c:	e7d8      	b.n	8002ac0 <__aeabi_f2d+0x20>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2600      	movs	r6, #0
 8002b12:	e7d5      	b.n	8002ac0 <__aeabi_f2d+0x20>
 8002b14:	2600      	movs	r6, #0
 8002b16:	4b05      	ldr	r3, [pc, #20]	; (8002b2c <__aeabi_f2d+0x8c>)
 8002b18:	e7d2      	b.n	8002ac0 <__aeabi_f2d+0x20>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	3b0b      	subs	r3, #11
 8002b1e:	409d      	lsls	r5, r3
 8002b20:	002e      	movs	r6, r5
 8002b22:	2500      	movs	r5, #0
 8002b24:	e7e3      	b.n	8002aee <__aeabi_f2d+0x4e>
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	00000389 	.word	0x00000389
 8002b2c:	000007ff 	.word	0x000007ff

08002b30 <__aeabi_d2f>:
 8002b30:	0002      	movs	r2, r0
 8002b32:	004b      	lsls	r3, r1, #1
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	0d5b      	lsrs	r3, r3, #21
 8002b38:	030c      	lsls	r4, r1, #12
 8002b3a:	4e3d      	ldr	r6, [pc, #244]	; (8002c30 <__aeabi_d2f+0x100>)
 8002b3c:	0a64      	lsrs	r4, r4, #9
 8002b3e:	0f40      	lsrs	r0, r0, #29
 8002b40:	1c5f      	adds	r7, r3, #1
 8002b42:	0fc9      	lsrs	r1, r1, #31
 8002b44:	4304      	orrs	r4, r0
 8002b46:	00d5      	lsls	r5, r2, #3
 8002b48:	4237      	tst	r7, r6
 8002b4a:	d00a      	beq.n	8002b62 <__aeabi_d2f+0x32>
 8002b4c:	4839      	ldr	r0, [pc, #228]	; (8002c34 <__aeabi_d2f+0x104>)
 8002b4e:	181e      	adds	r6, r3, r0
 8002b50:	2efe      	cmp	r6, #254	; 0xfe
 8002b52:	dd16      	ble.n	8002b82 <__aeabi_d2f+0x52>
 8002b54:	20ff      	movs	r0, #255	; 0xff
 8002b56:	2400      	movs	r4, #0
 8002b58:	05c0      	lsls	r0, r0, #23
 8002b5a:	4320      	orrs	r0, r4
 8002b5c:	07c9      	lsls	r1, r1, #31
 8002b5e:	4308      	orrs	r0, r1
 8002b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d106      	bne.n	8002b74 <__aeabi_d2f+0x44>
 8002b66:	432c      	orrs	r4, r5
 8002b68:	d026      	beq.n	8002bb8 <__aeabi_d2f+0x88>
 8002b6a:	2205      	movs	r2, #5
 8002b6c:	0192      	lsls	r2, r2, #6
 8002b6e:	0a54      	lsrs	r4, r2, #9
 8002b70:	b2d8      	uxtb	r0, r3
 8002b72:	e7f1      	b.n	8002b58 <__aeabi_d2f+0x28>
 8002b74:	4325      	orrs	r5, r4
 8002b76:	d0ed      	beq.n	8002b54 <__aeabi_d2f+0x24>
 8002b78:	2080      	movs	r0, #128	; 0x80
 8002b7a:	03c0      	lsls	r0, r0, #15
 8002b7c:	4304      	orrs	r4, r0
 8002b7e:	20ff      	movs	r0, #255	; 0xff
 8002b80:	e7ea      	b.n	8002b58 <__aeabi_d2f+0x28>
 8002b82:	2e00      	cmp	r6, #0
 8002b84:	dd1b      	ble.n	8002bbe <__aeabi_d2f+0x8e>
 8002b86:	0192      	lsls	r2, r2, #6
 8002b88:	1e53      	subs	r3, r2, #1
 8002b8a:	419a      	sbcs	r2, r3
 8002b8c:	00e4      	lsls	r4, r4, #3
 8002b8e:	0f6d      	lsrs	r5, r5, #29
 8002b90:	4322      	orrs	r2, r4
 8002b92:	432a      	orrs	r2, r5
 8002b94:	0753      	lsls	r3, r2, #29
 8002b96:	d048      	beq.n	8002c2a <__aeabi_d2f+0xfa>
 8002b98:	230f      	movs	r3, #15
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	d000      	beq.n	8002ba2 <__aeabi_d2f+0x72>
 8002ba0:	3204      	adds	r2, #4
 8002ba2:	2380      	movs	r3, #128	; 0x80
 8002ba4:	04db      	lsls	r3, r3, #19
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d03f      	beq.n	8002c2a <__aeabi_d2f+0xfa>
 8002baa:	1c70      	adds	r0, r6, #1
 8002bac:	2efe      	cmp	r6, #254	; 0xfe
 8002bae:	d0d1      	beq.n	8002b54 <__aeabi_d2f+0x24>
 8002bb0:	0192      	lsls	r2, r2, #6
 8002bb2:	0a54      	lsrs	r4, r2, #9
 8002bb4:	b2c0      	uxtb	r0, r0
 8002bb6:	e7cf      	b.n	8002b58 <__aeabi_d2f+0x28>
 8002bb8:	2000      	movs	r0, #0
 8002bba:	2400      	movs	r4, #0
 8002bbc:	e7cc      	b.n	8002b58 <__aeabi_d2f+0x28>
 8002bbe:	0032      	movs	r2, r6
 8002bc0:	3217      	adds	r2, #23
 8002bc2:	db22      	blt.n	8002c0a <__aeabi_d2f+0xda>
 8002bc4:	2080      	movs	r0, #128	; 0x80
 8002bc6:	0400      	lsls	r0, r0, #16
 8002bc8:	4320      	orrs	r0, r4
 8002bca:	241e      	movs	r4, #30
 8002bcc:	1ba4      	subs	r4, r4, r6
 8002bce:	2c1f      	cmp	r4, #31
 8002bd0:	dd1d      	ble.n	8002c0e <__aeabi_d2f+0xde>
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	4252      	negs	r2, r2
 8002bd6:	1b96      	subs	r6, r2, r6
 8002bd8:	0002      	movs	r2, r0
 8002bda:	40f2      	lsrs	r2, r6
 8002bdc:	0016      	movs	r6, r2
 8002bde:	2c20      	cmp	r4, #32
 8002be0:	d004      	beq.n	8002bec <__aeabi_d2f+0xbc>
 8002be2:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <__aeabi_d2f+0x108>)
 8002be4:	4694      	mov	ip, r2
 8002be6:	4463      	add	r3, ip
 8002be8:	4098      	lsls	r0, r3
 8002bea:	4305      	orrs	r5, r0
 8002bec:	002a      	movs	r2, r5
 8002bee:	1e53      	subs	r3, r2, #1
 8002bf0:	419a      	sbcs	r2, r3
 8002bf2:	4332      	orrs	r2, r6
 8002bf4:	2600      	movs	r6, #0
 8002bf6:	0753      	lsls	r3, r2, #29
 8002bf8:	d1ce      	bne.n	8002b98 <__aeabi_d2f+0x68>
 8002bfa:	2480      	movs	r4, #128	; 0x80
 8002bfc:	0013      	movs	r3, r2
 8002bfe:	04e4      	lsls	r4, r4, #19
 8002c00:	2001      	movs	r0, #1
 8002c02:	4023      	ands	r3, r4
 8002c04:	4222      	tst	r2, r4
 8002c06:	d1d3      	bne.n	8002bb0 <__aeabi_d2f+0x80>
 8002c08:	e7b0      	b.n	8002b6c <__aeabi_d2f+0x3c>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e7ad      	b.n	8002b6a <__aeabi_d2f+0x3a>
 8002c0e:	4a0b      	ldr	r2, [pc, #44]	; (8002c3c <__aeabi_d2f+0x10c>)
 8002c10:	4694      	mov	ip, r2
 8002c12:	002a      	movs	r2, r5
 8002c14:	40e2      	lsrs	r2, r4
 8002c16:	0014      	movs	r4, r2
 8002c18:	002a      	movs	r2, r5
 8002c1a:	4463      	add	r3, ip
 8002c1c:	409a      	lsls	r2, r3
 8002c1e:	4098      	lsls	r0, r3
 8002c20:	1e55      	subs	r5, r2, #1
 8002c22:	41aa      	sbcs	r2, r5
 8002c24:	4302      	orrs	r2, r0
 8002c26:	4322      	orrs	r2, r4
 8002c28:	e7e4      	b.n	8002bf4 <__aeabi_d2f+0xc4>
 8002c2a:	0033      	movs	r3, r6
 8002c2c:	e79e      	b.n	8002b6c <__aeabi_d2f+0x3c>
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	000007fe 	.word	0x000007fe
 8002c34:	fffffc80 	.word	0xfffffc80
 8002c38:	fffffca2 	.word	0xfffffca2
 8002c3c:	fffffc82 	.word	0xfffffc82

08002c40 <__clzsi2>:
 8002c40:	211c      	movs	r1, #28
 8002c42:	2301      	movs	r3, #1
 8002c44:	041b      	lsls	r3, r3, #16
 8002c46:	4298      	cmp	r0, r3
 8002c48:	d301      	bcc.n	8002c4e <__clzsi2+0xe>
 8002c4a:	0c00      	lsrs	r0, r0, #16
 8002c4c:	3910      	subs	r1, #16
 8002c4e:	0a1b      	lsrs	r3, r3, #8
 8002c50:	4298      	cmp	r0, r3
 8002c52:	d301      	bcc.n	8002c58 <__clzsi2+0x18>
 8002c54:	0a00      	lsrs	r0, r0, #8
 8002c56:	3908      	subs	r1, #8
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	4298      	cmp	r0, r3
 8002c5c:	d301      	bcc.n	8002c62 <__clzsi2+0x22>
 8002c5e:	0900      	lsrs	r0, r0, #4
 8002c60:	3904      	subs	r1, #4
 8002c62:	a202      	add	r2, pc, #8	; (adr r2, 8002c6c <__clzsi2+0x2c>)
 8002c64:	5c10      	ldrb	r0, [r2, r0]
 8002c66:	1840      	adds	r0, r0, r1
 8002c68:	4770      	bx	lr
 8002c6a:	46c0      	nop			; (mov r8, r8)
 8002c6c:	02020304 	.word	0x02020304
 8002c70:	01010101 	.word	0x01010101
	...

08002c7c <__clzdi2>:
 8002c7c:	b510      	push	{r4, lr}
 8002c7e:	2900      	cmp	r1, #0
 8002c80:	d103      	bne.n	8002c8a <__clzdi2+0xe>
 8002c82:	f7ff ffdd 	bl	8002c40 <__clzsi2>
 8002c86:	3020      	adds	r0, #32
 8002c88:	e002      	b.n	8002c90 <__clzdi2+0x14>
 8002c8a:	0008      	movs	r0, r1
 8002c8c:	f7ff ffd8 	bl	8002c40 <__clzsi2>
 8002c90:	bd10      	pop	{r4, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)

08002c94 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002c94:	b5b0      	push	{r4, r5, r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002c9a:	f000 fff3 	bl	8003c84 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002c9e:	f000 f8cf 	bl	8002e40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ca2:	f000 f9ab 	bl	8002ffc <MX_GPIO_Init>
	MX_I2C1_Init();
 8002ca6:	f000 f939 	bl	8002f1c <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8002caa:	f000 f977 	bl	8002f9c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	LSM303AGR_Initialise(&lsm303agr, &hi2c1);
 8002cae:	4a5a      	ldr	r2, [pc, #360]	; (8002e18 <main+0x184>)
 8002cb0:	4b5a      	ldr	r3, [pc, #360]	; (8002e1c <main+0x188>)
 8002cb2:	0011      	movs	r1, r2
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	f000 fb7d 	bl	80033b4 <LSM303AGR_Initialise>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		uint8_t errorcode;
		errorcode = LSM303AGR_ReadTemperature(&lsm303agr);
 8002cba:	250f      	movs	r5, #15
 8002cbc:	197c      	adds	r4, r7, r5
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <main+0x188>)
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fc77 	bl	80035b4 <LSM303AGR_ReadTemperature>
 8002cc6:	0003      	movs	r3, r0
 8002cc8:	7023      	strb	r3, [r4, #0]
		if (errorcode == 0) {
 8002cca:	197b      	adds	r3, r7, r5
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10b      	bne.n	8002cea <main+0x56>
			printf("\nTemperature: %3.1f °C\r", lsm303agr.temp_C);
 8002cd2:	4b52      	ldr	r3, [pc, #328]	; (8002e1c <main+0x188>)
 8002cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd6:	1c18      	adds	r0, r3, #0
 8002cd8:	f7ff fee2 	bl	8002aa0 <__aeabi_f2d>
 8002cdc:	0002      	movs	r2, r0
 8002cde:	000b      	movs	r3, r1
 8002ce0:	494f      	ldr	r1, [pc, #316]	; (8002e20 <main+0x18c>)
 8002ce2:	0008      	movs	r0, r1
 8002ce4:	f004 f99a 	bl	800701c <iprintf>
 8002ce8:	e007      	b.n	8002cfa <main+0x66>
		} else {
			printf("Errorcode: %d", errorcode);
 8002cea:	230f      	movs	r3, #15
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	781a      	ldrb	r2, [r3, #0]
 8002cf0:	4b4c      	ldr	r3, [pc, #304]	; (8002e24 <main+0x190>)
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f004 f991 	bl	800701c <iprintf>

		}
		errorcode = LSM303AGR_ReadMagnetometer(&lsm303agr);
 8002cfa:	250f      	movs	r5, #15
 8002cfc:	197c      	adds	r4, r7, r5
 8002cfe:	4b47      	ldr	r3, [pc, #284]	; (8002e1c <main+0x188>)
 8002d00:	0018      	movs	r0, r3
 8002d02:	f000 fe51 	bl	80039a8 <LSM303AGR_ReadMagnetometer>
 8002d06:	0003      	movs	r3, r0
 8002d08:	7023      	strb	r3, [r4, #0]
		if (errorcode == 0) {
 8002d0a:	197b      	adds	r3, r7, r5
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d12a      	bne.n	8002d68 <main+0xd4>
			printf("\nMagnetometer (X,Y,Z): %3.2f, %3.2f, %3.2f\r",
					lsm303agr.mag[1], lsm303agr.mag[2], lsm303agr.mag[3]);
 8002d12:	4b42      	ldr	r3, [pc, #264]	; (8002e1c <main+0x188>)
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
			printf("\nMagnetometer (X,Y,Z): %3.2f, %3.2f, %3.2f\r",
 8002d16:	1c18      	adds	r0, r3, #0
 8002d18:	f7ff fec2 	bl	8002aa0 <__aeabi_f2d>
 8002d1c:	6038      	str	r0, [r7, #0]
 8002d1e:	6079      	str	r1, [r7, #4]
					lsm303agr.mag[1], lsm303agr.mag[2], lsm303agr.mag[3]);
 8002d20:	4b3e      	ldr	r3, [pc, #248]	; (8002e1c <main+0x188>)
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			printf("\nMagnetometer (X,Y,Z): %3.2f, %3.2f, %3.2f\r",
 8002d24:	1c18      	adds	r0, r3, #0
 8002d26:	f7ff febb 	bl	8002aa0 <__aeabi_f2d>
 8002d2a:	0004      	movs	r4, r0
 8002d2c:	000d      	movs	r5, r1
					lsm303agr.mag[1], lsm303agr.mag[2], lsm303agr.mag[3]);
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	; (8002e1c <main+0x188>)
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
			printf("\nMagnetometer (X,Y,Z): %3.2f, %3.2f, %3.2f\r",
 8002d32:	1c18      	adds	r0, r3, #0
 8002d34:	f7ff feb4 	bl	8002aa0 <__aeabi_f2d>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	000b      	movs	r3, r1
 8002d3c:	493a      	ldr	r1, [pc, #232]	; (8002e28 <main+0x194>)
 8002d3e:	9202      	str	r2, [sp, #8]
 8002d40:	9303      	str	r3, [sp, #12]
 8002d42:	9400      	str	r4, [sp, #0]
 8002d44:	9501      	str	r5, [sp, #4]
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	0008      	movs	r0, r1
 8002d4c:	f004 f966 	bl	800701c <iprintf>
			printf("\nAlignment: %3.1f\r", lsm303agr.alignment);
 8002d50:	4b32      	ldr	r3, [pc, #200]	; (8002e1c <main+0x188>)
 8002d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d54:	1c18      	adds	r0, r3, #0
 8002d56:	f7ff fea3 	bl	8002aa0 <__aeabi_f2d>
 8002d5a:	0002      	movs	r2, r0
 8002d5c:	000b      	movs	r3, r1
 8002d5e:	4933      	ldr	r1, [pc, #204]	; (8002e2c <main+0x198>)
 8002d60:	0008      	movs	r0, r1
 8002d62:	f004 f95b 	bl	800701c <iprintf>
 8002d66:	e007      	b.n	8002d78 <main+0xe4>
		} else {
			printf("Errorcode: %d", errorcode);
 8002d68:	230f      	movs	r3, #15
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	781a      	ldrb	r2, [r3, #0]
 8002d6e:	4b2d      	ldr	r3, [pc, #180]	; (8002e24 <main+0x190>)
 8002d70:	0011      	movs	r1, r2
 8002d72:	0018      	movs	r0, r3
 8002d74:	f004 f952 	bl	800701c <iprintf>

		}

		errorcode = LSM303AGR_ReadAcceleration(&lsm303agr);
 8002d78:	250f      	movs	r5, #15
 8002d7a:	197c      	adds	r4, r7, r5
 8002d7c:	4b27      	ldr	r3, [pc, #156]	; (8002e1c <main+0x188>)
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f000 fc58 	bl	8003634 <LSM303AGR_ReadAcceleration>
 8002d84:	0003      	movs	r3, r0
 8002d86:	7023      	strb	r3, [r4, #0]
		if (errorcode == 0) {
 8002d88:	197b      	adds	r3, r7, r5
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d135      	bne.n	8002dfc <main+0x168>
			printf("\nAccelerometer (X,Y,Z): %4.2f, %4.2f, %4.2f\r",
					lsm303agr.acc[1], lsm303agr.acc[2], lsm303agr.acc[3]);
 8002d90:	4b22      	ldr	r3, [pc, #136]	; (8002e1c <main+0x188>)
 8002d92:	689b      	ldr	r3, [r3, #8]
			printf("\nAccelerometer (X,Y,Z): %4.2f, %4.2f, %4.2f\r",
 8002d94:	1c18      	adds	r0, r3, #0
 8002d96:	f7ff fe83 	bl	8002aa0 <__aeabi_f2d>
 8002d9a:	6038      	str	r0, [r7, #0]
 8002d9c:	6079      	str	r1, [r7, #4]
					lsm303agr.acc[1], lsm303agr.acc[2], lsm303agr.acc[3]);
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <main+0x188>)
 8002da0:	68db      	ldr	r3, [r3, #12]
			printf("\nAccelerometer (X,Y,Z): %4.2f, %4.2f, %4.2f\r",
 8002da2:	1c18      	adds	r0, r3, #0
 8002da4:	f7ff fe7c 	bl	8002aa0 <__aeabi_f2d>
 8002da8:	0004      	movs	r4, r0
 8002daa:	000d      	movs	r5, r1
					lsm303agr.acc[1], lsm303agr.acc[2], lsm303agr.acc[3]);
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <main+0x188>)
 8002dae:	691b      	ldr	r3, [r3, #16]
			printf("\nAccelerometer (X,Y,Z): %4.2f, %4.2f, %4.2f\r",
 8002db0:	1c18      	adds	r0, r3, #0
 8002db2:	f7ff fe75 	bl	8002aa0 <__aeabi_f2d>
 8002db6:	0002      	movs	r2, r0
 8002db8:	000b      	movs	r3, r1
 8002dba:	491d      	ldr	r1, [pc, #116]	; (8002e30 <main+0x19c>)
 8002dbc:	9202      	str	r2, [sp, #8]
 8002dbe:	9303      	str	r3, [sp, #12]
 8002dc0:	9400      	str	r4, [sp, #0]
 8002dc2:	9501      	str	r5, [sp, #4]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	0008      	movs	r0, r1
 8002dca:	f004 f927 	bl	800701c <iprintf>
			printf("\nPitch: %3.2f\r", lsm303agr.pitch);
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <main+0x188>)
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	1c18      	adds	r0, r3, #0
 8002dd4:	f7ff fe64 	bl	8002aa0 <__aeabi_f2d>
 8002dd8:	0002      	movs	r2, r0
 8002dda:	000b      	movs	r3, r1
 8002ddc:	4915      	ldr	r1, [pc, #84]	; (8002e34 <main+0x1a0>)
 8002dde:	0008      	movs	r0, r1
 8002de0:	f004 f91c 	bl	800701c <iprintf>
			printf("\nRoll: %3.2f\r", lsm303agr.roll);
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <main+0x188>)
 8002de6:	69db      	ldr	r3, [r3, #28]
 8002de8:	1c18      	adds	r0, r3, #0
 8002dea:	f7ff fe59 	bl	8002aa0 <__aeabi_f2d>
 8002dee:	0002      	movs	r2, r0
 8002df0:	000b      	movs	r3, r1
 8002df2:	4911      	ldr	r1, [pc, #68]	; (8002e38 <main+0x1a4>)
 8002df4:	0008      	movs	r0, r1
 8002df6:	f004 f911 	bl	800701c <iprintf>
 8002dfa:	e007      	b.n	8002e0c <main+0x178>
		} else {
			printf("Errorcode: %d", errorcode);
 8002dfc:	230f      	movs	r3, #15
 8002dfe:	18fb      	adds	r3, r7, r3
 8002e00:	781a      	ldrb	r2, [r3, #0]
 8002e02:	4b08      	ldr	r3, [pc, #32]	; (8002e24 <main+0x190>)
 8002e04:	0011      	movs	r1, r2
 8002e06:	0018      	movs	r0, r3
 8002e08:	f004 f908 	bl	800701c <iprintf>

		}
		HAL_Delay(3000);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <main+0x1a8>)
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 ffa8 	bl	8003d64 <HAL_Delay>
	while (1) {
 8002e14:	e751      	b.n	8002cba <main+0x26>
 8002e16:	46c0      	nop			; (mov r8, r8)
 8002e18:	200001f8 	.word	0x200001f8
 8002e1c:	200002c8 	.word	0x200002c8
 8002e20:	08009948 	.word	0x08009948
 8002e24:	08009964 	.word	0x08009964
 8002e28:	08009974 	.word	0x08009974
 8002e2c:	080099a0 	.word	0x080099a0
 8002e30:	080099b4 	.word	0x080099b4
 8002e34:	080099e4 	.word	0x080099e4
 8002e38:	080099f4 	.word	0x080099f4
 8002e3c:	00000bb8 	.word	0x00000bb8

08002e40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b09d      	sub	sp, #116	; 0x74
 8002e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002e46:	2438      	movs	r4, #56	; 0x38
 8002e48:	193b      	adds	r3, r7, r4
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	2338      	movs	r3, #56	; 0x38
 8002e4e:	001a      	movs	r2, r3
 8002e50:	2100      	movs	r1, #0
 8002e52:	f003 fc6d 	bl	8006730 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002e56:	2324      	movs	r3, #36	; 0x24
 8002e58:	18fb      	adds	r3, r7, r3
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	2314      	movs	r3, #20
 8002e5e:	001a      	movs	r2, r3
 8002e60:	2100      	movs	r1, #0
 8002e62:	f003 fc65 	bl	8006730 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8002e66:	003b      	movs	r3, r7
 8002e68:	0018      	movs	r0, r3
 8002e6a:	2324      	movs	r3, #36	; 0x24
 8002e6c:	001a      	movs	r2, r3
 8002e6e:	2100      	movs	r1, #0
 8002e70:	f003 fc5e 	bl	8006730 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e74:	4b27      	ldr	r3, [pc, #156]	; (8002f14 <SystemClock_Config+0xd4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <SystemClock_Config+0xd8>)
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	4b25      	ldr	r3, [pc, #148]	; (8002f14 <SystemClock_Config+0xd4>)
 8002e7e:	2180      	movs	r1, #128	; 0x80
 8002e80:	0109      	lsls	r1, r1, #4
 8002e82:	430a      	orrs	r2, r1
 8002e84:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002e86:	0021      	movs	r1, r4
 8002e88:	187b      	adds	r3, r7, r1
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002e8e:	187b      	adds	r3, r7, r1
 8002e90:	2201      	movs	r2, #1
 8002e92:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002e94:	187b      	adds	r3, r7, r1
 8002e96:	2200      	movs	r2, #0
 8002e98:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002e9a:	187b      	adds	r3, r7, r1
 8002e9c:	22a0      	movs	r2, #160	; 0xa0
 8002e9e:	0212      	lsls	r2, r2, #8
 8002ea0:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002ea8:	187b      	adds	r3, r7, r1
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f001 ff8a 	bl	8004dc4 <HAL_RCC_OscConfig>
 8002eb0:	1e03      	subs	r3, r0, #0
 8002eb2:	d001      	beq.n	8002eb8 <SystemClock_Config+0x78>
		Error_Handler();
 8002eb4:	f000 f8d8 	bl	8003068 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002eb8:	2124      	movs	r1, #36	; 0x24
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002ec0:	187b      	adds	r3, r7, r1
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ec6:	187b      	adds	r3, r7, r1
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ecc:	187b      	adds	r3, r7, r1
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2100      	movs	r1, #0
 8002edc:	0018      	movs	r0, r3
 8002ede:	f002 fb35 	bl	800554c <HAL_RCC_ClockConfig>
 8002ee2:	1e03      	subs	r3, r0, #0
 8002ee4:	d001      	beq.n	8002eea <SystemClock_Config+0xaa>
		Error_Handler();
 8002ee6:	f000 f8bf 	bl	8003068 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8002eea:	003b      	movs	r3, r7
 8002eec:	220a      	movs	r2, #10
 8002eee:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002ef0:	003b      	movs	r3, r7
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002ef6:	003b      	movs	r3, r7
 8002ef8:	2200      	movs	r2, #0
 8002efa:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8002efc:	003b      	movs	r3, r7
 8002efe:	0018      	movs	r0, r3
 8002f00:	f002 fd48 	bl	8005994 <HAL_RCCEx_PeriphCLKConfig>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d001      	beq.n	8002f0c <SystemClock_Config+0xcc>
		Error_Handler();
 8002f08:	f000 f8ae 	bl	8003068 <Error_Handler>
	}
}
 8002f0c:	46c0      	nop			; (mov r8, r8)
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	b01d      	add	sp, #116	; 0x74
 8002f12:	bd90      	pop	{r4, r7, pc}
 8002f14:	40007000 	.word	0x40007000
 8002f18:	ffffe7ff 	.word	0xffffe7ff

08002f1c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f22:	4a1d      	ldr	r2, [pc, #116]	; (8002f98 <MX_I2C1_Init+0x7c>)
 8002f24:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000708;
 8002f26:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f28:	22e1      	movs	r2, #225	; 0xe1
 8002f2a:	00d2      	lsls	r2, r2, #3
 8002f2c:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002f2e:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f34:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002f40:	4b14      	ldr	r3, [pc, #80]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f46:	4b13      	ldr	r3, [pc, #76]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f4c:	4b11      	ldr	r3, [pc, #68]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002f58:	4b0e      	ldr	r3, [pc, #56]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f001 f950 	bl	8004200 <HAL_I2C_Init>
 8002f60:	1e03      	subs	r3, r0, #0
 8002f62:	d001      	beq.n	8002f68 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8002f64:	f000 f880 	bl	8003068 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002f68:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f001 fe91 	bl	8004c94 <HAL_I2CEx_ConfigAnalogFilter>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d001      	beq.n	8002f7a <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8002f76:	f000 f877 	bl	8003068 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <MX_I2C1_Init+0x78>)
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	0018      	movs	r0, r3
 8002f80:	f001 fed4 	bl	8004d2c <HAL_I2CEx_ConfigDigitalFilter>
 8002f84:	1e03      	subs	r3, r0, #0
 8002f86:	d001      	beq.n	8002f8c <MX_I2C1_Init+0x70>
		Error_Handler();
 8002f88:	f000 f86e 	bl	8003068 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	46c0      	nop			; (mov r8, r8)
 8002f94:	200001f8 	.word	0x200001f8
 8002f98:	40005400 	.word	0x40005400

08002f9c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002fa0:	4b14      	ldr	r3, [pc, #80]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fa2:	4a15      	ldr	r2, [pc, #84]	; (8002ff8 <MX_USART2_UART_Init+0x5c>)
 8002fa4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fa8:	22e1      	movs	r2, #225	; 0xe1
 8002faa:	0252      	lsls	r2, r2, #9
 8002fac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002fae:	4b11      	ldr	r3, [pc, #68]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002fba:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002fc0:	4b0c      	ldr	r3, [pc, #48]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fc2:	220c      	movs	r2, #12
 8002fc4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fc6:	4b0b      	ldr	r3, [pc, #44]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fcc:	4b09      	ldr	r3, [pc, #36]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fce:	2200      	movs	r2, #0
 8002fd0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002fde:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <MX_USART2_UART_Init+0x58>)
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f002 fe3b 	bl	8005c5c <HAL_UART_Init>
 8002fe6:	1e03      	subs	r3, r0, #0
 8002fe8:	d001      	beq.n	8002fee <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8002fea:	f000 f83d 	bl	8003068 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	20000244 	.word	0x20000244
 8002ff8:	40004400 	.word	0x40004400

08002ffc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b0e      	ldr	r3, [pc, #56]	; (800303c <MX_GPIO_Init+0x40>)
 8003004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <MX_GPIO_Init+0x40>)
 8003008:	2101      	movs	r1, #1
 800300a:	430a      	orrs	r2, r1
 800300c:	62da      	str	r2, [r3, #44]	; 0x2c
 800300e:	4b0b      	ldr	r3, [pc, #44]	; (800303c <MX_GPIO_Init+0x40>)
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	2201      	movs	r2, #1
 8003014:	4013      	ands	r3, r2
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	4b08      	ldr	r3, [pc, #32]	; (800303c <MX_GPIO_Init+0x40>)
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	4b07      	ldr	r3, [pc, #28]	; (800303c <MX_GPIO_Init+0x40>)
 8003020:	2102      	movs	r1, #2
 8003022:	430a      	orrs	r2, r1
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c
 8003026:	4b05      	ldr	r3, [pc, #20]	; (800303c <MX_GPIO_Init+0x40>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	2202      	movs	r2, #2
 800302c:	4013      	ands	r3, r2
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	683b      	ldr	r3, [r7, #0]

}
 8003032:	46c0      	nop			; (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	40021000 	.word	0x40021000

08003040 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <__io_putchar+0x20>)
 800304a:	1d39      	adds	r1, r7, #4
 800304c:	4805      	ldr	r0, [pc, #20]	; (8003064 <__io_putchar+0x24>)
 800304e:	2201      	movs	r2, #1
 8003050:	f002 fe58 	bl	8005d04 <HAL_UART_Transmit>

	return ch;
 8003054:	687b      	ldr	r3, [r7, #4]
}
 8003056:	0018      	movs	r0, r3
 8003058:	46bd      	mov	sp, r7
 800305a:	b002      	add	sp, #8
 800305c:	bd80      	pop	{r7, pc}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	0000ffff 	.word	0x0000ffff
 8003064:	20000244 	.word	0x20000244

08003068 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800306c:	b672      	cpsid	i
}
 800306e:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003070:	e7fe      	b.n	8003070 <Error_Handler+0x8>
	...

08003074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003078:	4b07      	ldr	r3, [pc, #28]	; (8003098 <HAL_MspInit+0x24>)
 800307a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800307c:	4b06      	ldr	r3, [pc, #24]	; (8003098 <HAL_MspInit+0x24>)
 800307e:	2101      	movs	r1, #1
 8003080:	430a      	orrs	r2, r1
 8003082:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <HAL_MspInit+0x24>)
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	4b03      	ldr	r3, [pc, #12]	; (8003098 <HAL_MspInit+0x24>)
 800308a:	2180      	movs	r1, #128	; 0x80
 800308c:	0549      	lsls	r1, r1, #21
 800308e:	430a      	orrs	r2, r1
 8003090:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800309c:	b590      	push	{r4, r7, lr}
 800309e:	b089      	sub	sp, #36	; 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a4:	240c      	movs	r4, #12
 80030a6:	193b      	adds	r3, r7, r4
 80030a8:	0018      	movs	r0, r3
 80030aa:	2314      	movs	r3, #20
 80030ac:	001a      	movs	r2, r3
 80030ae:	2100      	movs	r1, #0
 80030b0:	f003 fb3e 	bl	8006730 <memset>
  if(hi2c->Instance==I2C1)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a17      	ldr	r2, [pc, #92]	; (8003118 <HAL_I2C_MspInit+0x7c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d128      	bne.n	8003110 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030be:	4b17      	ldr	r3, [pc, #92]	; (800311c <HAL_I2C_MspInit+0x80>)
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	4b16      	ldr	r3, [pc, #88]	; (800311c <HAL_I2C_MspInit+0x80>)
 80030c4:	2102      	movs	r1, #2
 80030c6:	430a      	orrs	r2, r1
 80030c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80030ca:	4b14      	ldr	r3, [pc, #80]	; (800311c <HAL_I2C_MspInit+0x80>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	2202      	movs	r2, #2
 80030d0:	4013      	ands	r3, r2
 80030d2:	60bb      	str	r3, [r7, #8]
 80030d4:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030d6:	0021      	movs	r1, r4
 80030d8:	187b      	adds	r3, r7, r1
 80030da:	22c0      	movs	r2, #192	; 0xc0
 80030dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80030de:	187b      	adds	r3, r7, r1
 80030e0:	2212      	movs	r2, #18
 80030e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e4:	187b      	adds	r3, r7, r1
 80030e6:	2200      	movs	r2, #0
 80030e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2203      	movs	r2, #3
 80030ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80030f0:	187b      	adds	r3, r7, r1
 80030f2:	2201      	movs	r2, #1
 80030f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f6:	187b      	adds	r3, r7, r1
 80030f8:	4a09      	ldr	r2, [pc, #36]	; (8003120 <HAL_I2C_MspInit+0x84>)
 80030fa:	0019      	movs	r1, r3
 80030fc:	0010      	movs	r0, r2
 80030fe:	f000 ff09 	bl	8003f14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_I2C_MspInit+0x80>)
 8003104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003106:	4b05      	ldr	r3, [pc, #20]	; (800311c <HAL_I2C_MspInit+0x80>)
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0389      	lsls	r1, r1, #14
 800310c:	430a      	orrs	r2, r1
 800310e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b009      	add	sp, #36	; 0x24
 8003116:	bd90      	pop	{r4, r7, pc}
 8003118:	40005400 	.word	0x40005400
 800311c:	40021000 	.word	0x40021000
 8003120:	50000400 	.word	0x50000400

08003124 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b089      	sub	sp, #36	; 0x24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800312c:	240c      	movs	r4, #12
 800312e:	193b      	adds	r3, r7, r4
 8003130:	0018      	movs	r0, r3
 8003132:	2314      	movs	r3, #20
 8003134:	001a      	movs	r2, r3
 8003136:	2100      	movs	r1, #0
 8003138:	f003 fafa 	bl	8006730 <memset>
  if(huart->Instance==USART2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a18      	ldr	r2, [pc, #96]	; (80031a4 <HAL_UART_MspInit+0x80>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d129      	bne.n	800319a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003146:	4b18      	ldr	r3, [pc, #96]	; (80031a8 <HAL_UART_MspInit+0x84>)
 8003148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800314a:	4b17      	ldr	r3, [pc, #92]	; (80031a8 <HAL_UART_MspInit+0x84>)
 800314c:	2180      	movs	r1, #128	; 0x80
 800314e:	0289      	lsls	r1, r1, #10
 8003150:	430a      	orrs	r2, r1
 8003152:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003154:	4b14      	ldr	r3, [pc, #80]	; (80031a8 <HAL_UART_MspInit+0x84>)
 8003156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003158:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <HAL_UART_MspInit+0x84>)
 800315a:	2101      	movs	r1, #1
 800315c:	430a      	orrs	r2, r1
 800315e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003160:	4b11      	ldr	r3, [pc, #68]	; (80031a8 <HAL_UART_MspInit+0x84>)
 8003162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003164:	2201      	movs	r2, #1
 8003166:	4013      	ands	r3, r2
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800316c:	0021      	movs	r1, r4
 800316e:	187b      	adds	r3, r7, r1
 8003170:	220c      	movs	r2, #12
 8003172:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003174:	187b      	adds	r3, r7, r1
 8003176:	2202      	movs	r2, #2
 8003178:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	187b      	adds	r3, r7, r1
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003180:	187b      	adds	r3, r7, r1
 8003182:	2203      	movs	r2, #3
 8003184:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003186:	187b      	adds	r3, r7, r1
 8003188:	2204      	movs	r2, #4
 800318a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800318c:	187a      	adds	r2, r7, r1
 800318e:	23a0      	movs	r3, #160	; 0xa0
 8003190:	05db      	lsls	r3, r3, #23
 8003192:	0011      	movs	r1, r2
 8003194:	0018      	movs	r0, r3
 8003196:	f000 febd 	bl	8003f14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800319a:	46c0      	nop			; (mov r8, r8)
 800319c:	46bd      	mov	sp, r7
 800319e:	b009      	add	sp, #36	; 0x24
 80031a0:	bd90      	pop	{r4, r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	40004400 	.word	0x40004400
 80031a8:	40021000 	.word	0x40021000

080031ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031b0:	e7fe      	b.n	80031b0 <NMI_Handler+0x4>

080031b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b6:	e7fe      	b.n	80031b6 <HardFault_Handler+0x4>

080031b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031d0:	f000 fdac 	bl	8003d2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	af00      	add	r7, sp, #0
	return 1;
 80031de:	2301      	movs	r3, #1
}
 80031e0:	0018      	movs	r0, r3
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <_kill>:

int _kill(int pid, int sig)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b082      	sub	sp, #8
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
 80031ee:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80031f0:	f003 fa74 	bl	80066dc <__errno>
 80031f4:	0003      	movs	r3, r0
 80031f6:	2216      	movs	r2, #22
 80031f8:	601a      	str	r2, [r3, #0]
	return -1;
 80031fa:	2301      	movs	r3, #1
 80031fc:	425b      	negs	r3, r3
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}

08003206 <_exit>:

void _exit (int status)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	b082      	sub	sp, #8
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800320e:	2301      	movs	r3, #1
 8003210:	425a      	negs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	0011      	movs	r1, r2
 8003216:	0018      	movs	r0, r3
 8003218:	f7ff ffe5 	bl	80031e6 <_kill>
	while (1) {}		/* Make sure we hang here */
 800321c:	e7fe      	b.n	800321c <_exit+0x16>

0800321e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b086      	sub	sp, #24
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e00a      	b.n	8003246 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003230:	e000      	b.n	8003234 <_read+0x16>
 8003232:	bf00      	nop
 8003234:	0001      	movs	r1, r0
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	60ba      	str	r2, [r7, #8]
 800323c:	b2ca      	uxtb	r2, r1
 800323e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	3301      	adds	r3, #1
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	429a      	cmp	r2, r3
 800324c:	dbf0      	blt.n	8003230 <_read+0x12>
	}

return len;
 800324e:	687b      	ldr	r3, [r7, #4]
}
 8003250:	0018      	movs	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	b006      	add	sp, #24
 8003256:	bd80      	pop	{r7, pc}

08003258 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	e009      	b.n	800327e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	60ba      	str	r2, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff fee4 	bl	8003040 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	3301      	adds	r3, #1
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	429a      	cmp	r2, r3
 8003284:	dbf1      	blt.n	800326a <_write+0x12>
	}
	return len;
 8003286:	687b      	ldr	r3, [r7, #4]
}
 8003288:	0018      	movs	r0, r3
 800328a:	46bd      	mov	sp, r7
 800328c:	b006      	add	sp, #24
 800328e:	bd80      	pop	{r7, pc}

08003290 <_close>:

int _close(int file)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	return -1;
 8003298:	2301      	movs	r3, #1
 800329a:	425b      	negs	r3, r3
}
 800329c:	0018      	movs	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	b002      	add	sp, #8
 80032a2:	bd80      	pop	{r7, pc}

080032a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2280      	movs	r2, #128	; 0x80
 80032b2:	0192      	lsls	r2, r2, #6
 80032b4:	605a      	str	r2, [r3, #4]
	return 0;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	0018      	movs	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	b002      	add	sp, #8
 80032be:	bd80      	pop	{r7, pc}

080032c0 <_isatty>:

int _isatty(int file)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
	return 1;
 80032c8:	2301      	movs	r3, #1
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b002      	add	sp, #8
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	60f8      	str	r0, [r7, #12]
 80032da:	60b9      	str	r1, [r7, #8]
 80032dc:	607a      	str	r2, [r7, #4]
	return 0;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b004      	add	sp, #16
 80032e6:	bd80      	pop	{r7, pc}

080032e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032f0:	4a14      	ldr	r2, [pc, #80]	; (8003344 <_sbrk+0x5c>)
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <_sbrk+0x60>)
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032fc:	4b13      	ldr	r3, [pc, #76]	; (800334c <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d102      	bne.n	800330a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003304:	4b11      	ldr	r3, [pc, #68]	; (800334c <_sbrk+0x64>)
 8003306:	4a12      	ldr	r2, [pc, #72]	; (8003350 <_sbrk+0x68>)
 8003308:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800330a:	4b10      	ldr	r3, [pc, #64]	; (800334c <_sbrk+0x64>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	693a      	ldr	r2, [r7, #16]
 8003314:	429a      	cmp	r2, r3
 8003316:	d207      	bcs.n	8003328 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003318:	f003 f9e0 	bl	80066dc <__errno>
 800331c:	0003      	movs	r3, r0
 800331e:	220c      	movs	r2, #12
 8003320:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003322:	2301      	movs	r3, #1
 8003324:	425b      	negs	r3, r3
 8003326:	e009      	b.n	800333c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003328:	4b08      	ldr	r3, [pc, #32]	; (800334c <_sbrk+0x64>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800332e:	4b07      	ldr	r3, [pc, #28]	; (800334c <_sbrk+0x64>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	18d2      	adds	r2, r2, r3
 8003336:	4b05      	ldr	r3, [pc, #20]	; (800334c <_sbrk+0x64>)
 8003338:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	0018      	movs	r0, r3
 800333e:	46bd      	mov	sp, r7
 8003340:	b006      	add	sp, #24
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20002000 	.word	0x20002000
 8003348:	00000400 	.word	0x00000400
 800334c:	20000304 	.word	0x20000304
 8003350:	20000320 	.word	0x20000320

08003354 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003358:	46c0      	nop			; (mov r8, r8)
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
	...

08003360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8003360:	480d      	ldr	r0, [pc, #52]	; (8003398 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003362:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003364:	480d      	ldr	r0, [pc, #52]	; (800339c <LoopForever+0x6>)
  ldr r1, =_edata
 8003366:	490e      	ldr	r1, [pc, #56]	; (80033a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003368:	4a0e      	ldr	r2, [pc, #56]	; (80033a4 <LoopForever+0xe>)
  movs r3, #0
 800336a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800336c:	e002      	b.n	8003374 <LoopCopyDataInit>

0800336e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800336e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003372:	3304      	adds	r3, #4

08003374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003378:	d3f9      	bcc.n	800336e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800337a:	4a0b      	ldr	r2, [pc, #44]	; (80033a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800337c:	4c0b      	ldr	r4, [pc, #44]	; (80033ac <LoopForever+0x16>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003380:	e001      	b.n	8003386 <LoopFillZerobss>

08003382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003384:	3204      	adds	r2, #4

08003386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003388:	d3fb      	bcc.n	8003382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800338a:	f7ff ffe3 	bl	8003354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800338e:	f003 f9ab 	bl	80066e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003392:	f7ff fc7f 	bl	8002c94 <main>

08003396 <LoopForever>:

LoopForever:
    b LoopForever
 8003396:	e7fe      	b.n	8003396 <LoopForever>
  ldr   r0, =_estack
 8003398:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800339c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033a0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80033a4:	0800a028 	.word	0x0800a028
  ldr r2, =_sbss
 80033a8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80033ac:	2000031c 	.word	0x2000031c

080033b0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033b0:	e7fe      	b.n	80033b0 <ADC1_COMP_IRQHandler>
	...

080033b4 <LSM303AGR_Initialise>:
#include "LSM303AGR.h"

uint8_t LSM303AGR_Initialise(LSM303AGR *dev, I2C_HandleTypeDef *i2cHandle) {
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	601a      	str	r2, [r3, #0]
	dev->mag[0] = 0.0f;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
	dev->mag[1] = 0.0f;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	625a      	str	r2, [r3, #36]	; 0x24
	dev->mag[2] = 0.0f;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
	dev->acc[0] = 0.0f;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	605a      	str	r2, [r3, #4]
	dev->acc[1] = 0.0f;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
	dev->acc[2] = 0.0f;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	60da      	str	r2, [r3, #12]
	dev->temp_C = 0.0f;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	639a      	str	r2, [r3, #56]	; 0x38

	/* Store number of transaction errors (gets returned at the end of the function) */
	uint8_t errNum = 0;
 80033ee:	250f      	movs	r5, #15
 80033f0:	197b      	adds	r3, r7, r5
 80033f2:	2200      	movs	r2, #0
 80033f4:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status;

	/* Check who am i of both devices */
	uint8_t regData;

	status = LSM303AGR_MAG_ReadRegister(dev, LSM303AGR_WHO_AM_I_M, &regData);
 80033f6:	230e      	movs	r3, #14
 80033f8:	18fc      	adds	r4, r7, r3
 80033fa:	260d      	movs	r6, #13
 80033fc:	19ba      	adds	r2, r7, r6
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	214f      	movs	r1, #79	; 0x4f
 8003402:	0018      	movs	r0, r3
 8003404:	f000 fba4 	bl	8003b50 <LSM303AGR_MAG_ReadRegister>
 8003408:	0003      	movs	r3, r0
 800340a:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 800340c:	230e      	movs	r3, #14
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	1e5a      	subs	r2, r3, #1
 8003414:	4193      	sbcs	r3, r2
 8003416:	b2db      	uxtb	r3, r3
 8003418:	0019      	movs	r1, r3
 800341a:	197b      	adds	r3, r7, r5
 800341c:	197a      	adds	r2, r7, r5
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	188a      	adds	r2, r1, r2
 8003422:	701a      	strb	r2, [r3, #0]
	if (regData != LSM303AGR_MAG_WHO_AM_I) {
 8003424:	19bb      	adds	r3, r7, r6
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d007      	beq.n	800343c <LSM303AGR_Initialise+0x88>
		printf("\rError MAG_WHO_AM_I: regdata is %x but should be %x \n",
 800342c:	19bb      	adds	r3, r7, r6
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	0019      	movs	r1, r3
 8003432:	4b5e      	ldr	r3, [pc, #376]	; (80035ac <LSM303AGR_Initialise+0x1f8>)
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	0018      	movs	r0, r3
 8003438:	f003 fdf0 	bl	800701c <iprintf>
				regData, LSM303AGR_MAG_WHO_AM_I);
		//return 255;
	}

	status = LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_WHO_AM_I_A, &regData);
 800343c:	260e      	movs	r6, #14
 800343e:	19bc      	adds	r4, r7, r6
 8003440:	250d      	movs	r5, #13
 8003442:	197a      	adds	r2, r7, r5
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	210f      	movs	r1, #15
 8003448:	0018      	movs	r0, r3
 800344a:	f000 fbe0 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 800344e:	0003      	movs	r3, r0
 8003450:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 8003452:	19bb      	adds	r3, r7, r6
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	1e5a      	subs	r2, r3, #1
 8003458:	4193      	sbcs	r3, r2
 800345a:	b2db      	uxtb	r3, r3
 800345c:	0019      	movs	r1, r3
 800345e:	220f      	movs	r2, #15
 8003460:	18bb      	adds	r3, r7, r2
 8003462:	18ba      	adds	r2, r7, r2
 8003464:	7812      	ldrb	r2, [r2, #0]
 8003466:	188a      	adds	r2, r1, r2
 8003468:	701a      	strb	r2, [r3, #0]
	if (regData != LSM303AGR_ACC_WHO_AM_I) {
 800346a:	197b      	adds	r3, r7, r5
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b33      	cmp	r3, #51	; 0x33
 8003470:	d007      	beq.n	8003482 <LSM303AGR_Initialise+0xce>
		printf("\rError ACC_WHO_AM_I: regdata is %x but should be %x \n",
 8003472:	197b      	adds	r3, r7, r5
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	0019      	movs	r1, r3
 8003478:	4b4d      	ldr	r3, [pc, #308]	; (80035b0 <LSM303AGR_Initialise+0x1fc>)
 800347a:	2233      	movs	r2, #51	; 0x33
 800347c:	0018      	movs	r0, r3
 800347e:	f003 fdcd 	bl	800701c <iprintf>
	 * high resolution: yes
	 * data rate: 10Hz
	 * continuous mode: yes
	 */

	regData = 0x80;
 8003482:	250d      	movs	r5, #13
 8003484:	197b      	adds	r3, r7, r5
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	701a      	strb	r2, [r3, #0]
	status = LSM303AGR_MAG_WriteRegister(dev, LSM303AGR_CFG_REG_A_M, &regData);
 800348a:	260e      	movs	r6, #14
 800348c:	19bc      	adds	r4, r7, r6
 800348e:	197a      	adds	r2, r7, r5
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2160      	movs	r1, #96	; 0x60
 8003494:	0018      	movs	r0, r3
 8003496:	f000 fb9d 	bl	8003bd4 <LSM303AGR_MAG_WriteRegister>
 800349a:	0003      	movs	r3, r0
 800349c:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 800349e:	0030      	movs	r0, r6
 80034a0:	183b      	adds	r3, r7, r0
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	1e5a      	subs	r2, r3, #1
 80034a6:	4193      	sbcs	r3, r2
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	0019      	movs	r1, r3
 80034ac:	260f      	movs	r6, #15
 80034ae:	19bb      	adds	r3, r7, r6
 80034b0:	19ba      	adds	r2, r7, r6
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	188a      	adds	r2, r1, r2
 80034b6:	701a      	strb	r2, [r3, #0]
	 * offset cancellation single measurement disabled
	 * no interrupt recognition checks
	 * offset cancellation enabled
	 * lowpass enabled
	 */
	regData = 0x03;
 80034b8:	197b      	adds	r3, r7, r5
 80034ba:	2203      	movs	r2, #3
 80034bc:	701a      	strb	r2, [r3, #0]
	status = LSM303AGR_MAG_WriteRegister(dev, LSM303AGR_CFG_REG_B_M, &regData);
 80034be:	0006      	movs	r6, r0
 80034c0:	183c      	adds	r4, r7, r0
 80034c2:	197a      	adds	r2, r7, r5
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2161      	movs	r1, #97	; 0x61
 80034c8:	0018      	movs	r0, r3
 80034ca:	f000 fb83 	bl	8003bd4 <LSM303AGR_MAG_WriteRegister>
 80034ce:	0003      	movs	r3, r0
 80034d0:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 80034d2:	0030      	movs	r0, r6
 80034d4:	183b      	adds	r3, r7, r0
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	1e5a      	subs	r2, r3, #1
 80034da:	4193      	sbcs	r3, r2
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	0019      	movs	r1, r3
 80034e0:	260f      	movs	r6, #15
 80034e2:	19bb      	adds	r3, r7, r6
 80034e4:	19ba      	adds	r2, r7, r6
 80034e6:	7812      	ldrb	r2, [r2, #0]
 80034e8:	188a      	adds	r2, r1, r2
 80034ea:	701a      	strb	r2, [r3, #0]
	/*
	 * Block Data Update (BDU) enable
	 * avoiding of reading incorrect data when data is read asynchronously
	 * output registers not updated until MSB and LSB have been read
	 */
	regData = 0x10;
 80034ec:	197b      	adds	r3, r7, r5
 80034ee:	2210      	movs	r2, #16
 80034f0:	701a      	strb	r2, [r3, #0]
	status = LSM303AGR_MAG_WriteRegister(dev, LSM303AGR_CFG_REG_C_M, &regData);
 80034f2:	0006      	movs	r6, r0
 80034f4:	183c      	adds	r4, r7, r0
 80034f6:	197a      	adds	r2, r7, r5
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2162      	movs	r1, #98	; 0x62
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 fb69 	bl	8003bd4 <LSM303AGR_MAG_WriteRegister>
 8003502:	0003      	movs	r3, r0
 8003504:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 8003506:	0030      	movs	r0, r6
 8003508:	183b      	adds	r3, r7, r0
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	1e5a      	subs	r2, r3, #1
 800350e:	4193      	sbcs	r3, r2
 8003510:	b2db      	uxtb	r3, r3
 8003512:	0019      	movs	r1, r3
 8003514:	260f      	movs	r6, #15
 8003516:	19bb      	adds	r3, r7, r6
 8003518:	19ba      	adds	r2, r7, r6
 800351a:	7812      	ldrb	r2, [r2, #0]
 800351c:	188a      	adds	r2, r1, r2
 800351e:	701a      	strb	r2, [r3, #0]
	/*
	 * 10Hz sampling (old value rf: 50Hz)
	 * normal mode (Power)
	 * X, Y and Z activated
	 */
	regData = 0x27;	// old value rf: 0x47
 8003520:	197b      	adds	r3, r7, r5
 8003522:	2227      	movs	r2, #39	; 0x27
 8003524:	701a      	strb	r2, [r3, #0]
	status = LSM303AGR_ACC_WriteRegister(dev, LSM303AGR_CTRL_REG1_A, &regData);
 8003526:	0006      	movs	r6, r0
 8003528:	183c      	adds	r4, r7, r0
 800352a:	197a      	adds	r2, r7, r5
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2120      	movs	r1, #32
 8003530:	0018      	movs	r0, r3
 8003532:	f000 fb89 	bl	8003c48 <LSM303AGR_ACC_WriteRegister>
 8003536:	0003      	movs	r3, r0
 8003538:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 800353a:	0030      	movs	r0, r6
 800353c:	183b      	adds	r3, r7, r0
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	1e5a      	subs	r2, r3, #1
 8003542:	4193      	sbcs	r3, r2
 8003544:	b2db      	uxtb	r3, r3
 8003546:	0019      	movs	r1, r3
 8003548:	260f      	movs	r6, #15
 800354a:	19bb      	adds	r3, r7, r6
 800354c:	19ba      	adds	r2, r7, r6
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	188a      	adds	r2, r1, r2
 8003552:	701a      	strb	r2, [r3, #0]
	 * data LSb at lower address
	 * +- 16g (old value rf +- 2g)
	 * High resolution
	 * spi/selftest disabled
	 */
	regData = 0xB8; // old value rf: 0x48
 8003554:	197b      	adds	r3, r7, r5
 8003556:	22b8      	movs	r2, #184	; 0xb8
 8003558:	701a      	strb	r2, [r3, #0]
	status = LSM303AGR_ACC_WriteRegister(dev, LSM303AGR_CTRL_REG4_A, &regData);
 800355a:	0006      	movs	r6, r0
 800355c:	183c      	adds	r4, r7, r0
 800355e:	197a      	adds	r2, r7, r5
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2123      	movs	r1, #35	; 0x23
 8003564:	0018      	movs	r0, r3
 8003566:	f000 fb6f 	bl	8003c48 <LSM303AGR_ACC_WriteRegister>
 800356a:	0003      	movs	r3, r0
 800356c:	7023      	strb	r3, [r4, #0]
	errNum += (status != HAL_OK);
 800356e:	0030      	movs	r0, r6
 8003570:	183b      	adds	r3, r7, r0
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	1e5a      	subs	r2, r3, #1
 8003576:	4193      	sbcs	r3, r2
 8003578:	b2db      	uxtb	r3, r3
 800357a:	0019      	movs	r1, r3
 800357c:	260f      	movs	r6, #15
 800357e:	19bb      	adds	r3, r7, r6
 8003580:	19ba      	adds	r2, r7, r6
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	188a      	adds	r2, r1, r2
 8003586:	701a      	strb	r2, [r3, #0]

	/*
	 * Temperature Sensor enabled
	 */
	regData = 0xC0;
 8003588:	197b      	adds	r3, r7, r5
 800358a:	22c0      	movs	r2, #192	; 0xc0
 800358c:	701a      	strb	r2, [r3, #0]
	status = LSM303AGR_ACC_WriteRegister(dev, LSM303AGR_TEMP_CFG_REG_A,
 800358e:	183c      	adds	r4, r7, r0
 8003590:	197a      	adds	r2, r7, r5
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	211f      	movs	r1, #31
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fb56 	bl	8003c48 <LSM303AGR_ACC_WriteRegister>
 800359c:	0003      	movs	r3, r0
 800359e:	7023      	strb	r3, [r4, #0]
			&regData);

	/* Return number of errors (0 if successful initialisation) */
	return errNum;
 80035a0:	19bb      	adds	r3, r7, r6
 80035a2:	781b      	ldrb	r3, [r3, #0]
}
 80035a4:	0018      	movs	r0, r3
 80035a6:	46bd      	mov	sp, r7
 80035a8:	b005      	add	sp, #20
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ac:	08009a04 	.word	0x08009a04
 80035b0:	08009a3c 	.word	0x08009a3c

080035b4 <LSM303AGR_ReadTemperature>:
	 * OUTX_ST-OUTX_NOST...
	 */

}

HAL_StatusTypeDef LSM303AGR_ReadTemperature(LSM303AGR *dev) {
 80035b4:	b5b0      	push	{r4, r5, r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]

	uint8_t errNum = 0;
 80035bc:	240f      	movs	r4, #15
 80035be:	193b      	adds	r3, r7, r4
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]

	/* Read raw values from Register (x, y, z -> 16 bits each) */
	//uint8_t regData[2];
	//HAL_StatusTypeDef status = LSM303AGR_ACC_ReadRegisters(dev, LSM303AGR_OUT_TEMP_L_A, regData, 2);
	uint8_t regDataTL, regDataTH;
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_TEMP_L_A,
 80035c4:	230d      	movs	r3, #13
 80035c6:	18fa      	adds	r2, r7, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	210c      	movs	r1, #12
 80035cc:	0018      	movs	r0, r3
 80035ce:	f000 fb1e 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 80035d2:	0003      	movs	r3, r0
			&regDataTL) != HAL_OK);
 80035d4:	1e5a      	subs	r2, r3, #1
 80035d6:	4193      	sbcs	r3, r2
 80035d8:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_TEMP_L_A,
 80035da:	b2d9      	uxtb	r1, r3
 80035dc:	193b      	adds	r3, r7, r4
 80035de:	193a      	adds	r2, r7, r4
 80035e0:	7812      	ldrb	r2, [r2, #0]
 80035e2:	188a      	adds	r2, r1, r2
 80035e4:	701a      	strb	r2, [r3, #0]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_TEMP_H_A,
 80035e6:	250c      	movs	r5, #12
 80035e8:	197a      	adds	r2, r7, r5
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	210d      	movs	r1, #13
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 fb0d 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 80035f4:	0003      	movs	r3, r0
			&regDataTH) != HAL_OK);
 80035f6:	1e5a      	subs	r2, r3, #1
 80035f8:	4193      	sbcs	r3, r2
 80035fa:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_TEMP_H_A,
 80035fc:	b2d9      	uxtb	r1, r3
 80035fe:	193b      	adds	r3, r7, r4
 8003600:	193a      	adds	r2, r7, r4
 8003602:	7812      	ldrb	r2, [r2, #0]
 8003604:	188a      	adds	r2, r1, r2
 8003606:	701a      	strb	r2, [r3, #0]

	//printf("TH: %d, Tl: %d \n",regDataTH,regDataTL);

	/* Converting to signed */
	int8_t tmpRawSigned = (int8_t) regDataTH;
 8003608:	197b      	adds	r3, r7, r5
 800360a:	781a      	ldrb	r2, [r3, #0]
 800360c:	210e      	movs	r1, #14
 800360e:	187b      	adds	r3, r7, r1
 8003610:	701a      	strb	r2, [r3, #0]

	/* Converting to grad celsius */
	dev->temp_C = (tmpRawSigned + 25);
 8003612:	187b      	adds	r3, r7, r1
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	b25b      	sxtb	r3, r3
 8003618:	3319      	adds	r3, #25
 800361a:	0018      	movs	r0, r3
 800361c:	f7fd fc0c 	bl	8000e38 <__aeabi_i2f>
 8003620:	1c02      	adds	r2, r0, #0
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	639a      	str	r2, [r3, #56]	; 0x38

	return errNum;
 8003626:	193b      	adds	r3, r7, r4
 8003628:	781b      	ldrb	r3, [r3, #0]
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003634 <LSM303AGR_ReadAcceleration>:

HAL_StatusTypeDef LSM303AGR_ReadAcceleration(LSM303AGR *dev) {
 8003634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003636:	b087      	sub	sp, #28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]

	/* Store number of transaction errors (gets returned at the end of the function) */
	uint8_t errNum = 0;
 800363c:	2417      	movs	r4, #23
 800363e:	193b      	adds	r3, r7, r4
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]

	/*
	 * Temp. read ctrl register
	 */
	uint8_t reg_data;
	LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_STATUS_REG_A, &reg_data);
 8003644:	2515      	movs	r5, #21
 8003646:	197a      	adds	r2, r7, r5
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2127      	movs	r1, #39	; 0x27
 800364c:	0018      	movs	r0, r3
 800364e:	f000 fade 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
	printf("\nSTATUS_REG_A: %X\r", reg_data);
 8003652:	197b      	adds	r3, r7, r5
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	001a      	movs	r2, r3
 8003658:	4bcd      	ldr	r3, [pc, #820]	; (8003990 <LSM303AGR_ReadAcceleration+0x35c>)
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f003 fcdd 	bl	800701c <iprintf>

	/* Read raw values from Resgister (x, y, z -> 16 bits each) */
	uint8_t regDataXL, regDataXH, regDataYL, regDataYH, regDataZL, regDataZH;
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_X_L_A, &regDataXL)
 8003662:	2614      	movs	r6, #20
 8003664:	19ba      	adds	r2, r7, r6
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2128      	movs	r1, #40	; 0x28
 800366a:	0018      	movs	r0, r3
 800366c:	f000 facf 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 8003670:	0003      	movs	r3, r0
			!= HAL_OK);
 8003672:	1e5a      	subs	r2, r3, #1
 8003674:	4193      	sbcs	r3, r2
 8003676:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_X_L_A, &regDataXL)
 8003678:	b2d9      	uxtb	r1, r3
 800367a:	193b      	adds	r3, r7, r4
 800367c:	193a      	adds	r2, r7, r4
 800367e:	7812      	ldrb	r2, [r2, #0]
 8003680:	188a      	adds	r2, r1, r2
 8003682:	701a      	strb	r2, [r3, #0]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_X_H_A, &regDataXH)
 8003684:	2313      	movs	r3, #19
 8003686:	18fa      	adds	r2, r7, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2129      	movs	r1, #41	; 0x29
 800368c:	0018      	movs	r0, r3
 800368e:	f000 fabe 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 8003692:	0003      	movs	r3, r0
			!= HAL_OK);
 8003694:	1e5a      	subs	r2, r3, #1
 8003696:	4193      	sbcs	r3, r2
 8003698:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_X_H_A, &regDataXH)
 800369a:	b2d9      	uxtb	r1, r3
 800369c:	193b      	adds	r3, r7, r4
 800369e:	193a      	adds	r2, r7, r4
 80036a0:	7812      	ldrb	r2, [r2, #0]
 80036a2:	188a      	adds	r2, r1, r2
 80036a4:	701a      	strb	r2, [r3, #0]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Y_L_A, &regDataYL)
 80036a6:	2212      	movs	r2, #18
 80036a8:	18ba      	adds	r2, r7, r2
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	212a      	movs	r1, #42	; 0x2a
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 faad 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 80036b4:	0003      	movs	r3, r0
			!= HAL_OK);
 80036b6:	1e5a      	subs	r2, r3, #1
 80036b8:	4193      	sbcs	r3, r2
 80036ba:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Y_L_A, &regDataYL)
 80036bc:	b2d9      	uxtb	r1, r3
 80036be:	193b      	adds	r3, r7, r4
 80036c0:	193a      	adds	r2, r7, r4
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	188a      	adds	r2, r1, r2
 80036c6:	701a      	strb	r2, [r3, #0]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Y_H_A, &regDataYH)
 80036c8:	2111      	movs	r1, #17
 80036ca:	187a      	adds	r2, r7, r1
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	212b      	movs	r1, #43	; 0x2b
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fa9c 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 80036d6:	0003      	movs	r3, r0
			!= HAL_OK);
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	4193      	sbcs	r3, r2
 80036dc:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Y_H_A, &regDataYH)
 80036de:	b2d9      	uxtb	r1, r3
 80036e0:	193b      	adds	r3, r7, r4
 80036e2:	193a      	adds	r2, r7, r4
 80036e4:	7812      	ldrb	r2, [r2, #0]
 80036e6:	188a      	adds	r2, r1, r2
 80036e8:	701a      	strb	r2, [r3, #0]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Z_L_A, &regDataZL)
 80036ea:	2010      	movs	r0, #16
 80036ec:	183a      	adds	r2, r7, r0
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	0018      	movs	r0, r3
 80036f4:	f000 fa8b 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 80036f8:	0003      	movs	r3, r0
			!= HAL_OK);
 80036fa:	1e5a      	subs	r2, r3, #1
 80036fc:	4193      	sbcs	r3, r2
 80036fe:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Z_L_A, &regDataZL)
 8003700:	b2d9      	uxtb	r1, r3
 8003702:	193b      	adds	r3, r7, r4
 8003704:	193a      	adds	r2, r7, r4
 8003706:	7812      	ldrb	r2, [r2, #0]
 8003708:	188a      	adds	r2, r1, r2
 800370a:	701a      	strb	r2, [r3, #0]
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Z_H_A, &regDataZH)
 800370c:	220f      	movs	r2, #15
 800370e:	18ba      	adds	r2, r7, r2
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	212d      	movs	r1, #45	; 0x2d
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fa7a 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
 800371a:	0003      	movs	r3, r0
			!= HAL_OK);
 800371c:	1e5a      	subs	r2, r3, #1
 800371e:	4193      	sbcs	r3, r2
 8003720:	b2db      	uxtb	r3, r3
	errNum += (LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_OUT_Z_H_A, &regDataZH)
 8003722:	b2d9      	uxtb	r1, r3
 8003724:	193b      	adds	r3, r7, r4
 8003726:	193a      	adds	r2, r7, r4
 8003728:	7812      	ldrb	r2, [r2, #0]
 800372a:	188a      	adds	r2, r1, r2
 800372c:	701a      	strb	r2, [r3, #0]

	/*
	 * Temp. read ctrl register
	 */
	reg_data = 0;
 800372e:	197b      	adds	r3, r7, r5
 8003730:	2200      	movs	r2, #0
 8003732:	701a      	strb	r2, [r3, #0]
	LSM303AGR_ACC_ReadRegister(dev, LSM303AGR_STATUS_REG_A, &reg_data);
 8003734:	197a      	adds	r2, r7, r5
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2127      	movs	r1, #39	; 0x27
 800373a:	0018      	movs	r0, r3
 800373c:	f000 fa67 	bl	8003c0e <LSM303AGR_ACC_ReadRegister>
	printf("\nSTATUS_REG_A: %X\r", reg_data);
 8003740:	197b      	adds	r3, r7, r5
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	001a      	movs	r2, r3
 8003746:	4b92      	ldr	r3, [pc, #584]	; (8003990 <LSM303AGR_ReadAcceleration+0x35c>)
 8003748:	0011      	movs	r1, r2
 800374a:	0018      	movs	r0, r3
 800374c:	f003 fc66 	bl	800701c <iprintf>

	/* Combining 2x8bit unsigned to 12bit signed */
	int16_t accRawSigned[3];
	uint8_t bitmask = 0xF0;
 8003750:	2516      	movs	r5, #22
 8003752:	197b      	adds	r3, r7, r5
 8003754:	22f0      	movs	r2, #240	; 0xf0
 8003756:	701a      	strb	r2, [r3, #0]
	accRawSigned[0] = (((int16_t) ((((uint16_t) regDataXH) << 4) | ((uint16_t) (regDataXL & bitmask)))) >> 4);
 8003758:	2313      	movs	r3, #19
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	b21a      	sxth	r2, r3
 8003762:	19bb      	adds	r3, r7, r6
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	1979      	adds	r1, r7, r5
 8003768:	7809      	ldrb	r1, [r1, #0]
 800376a:	400b      	ands	r3, r1
 800376c:	b2db      	uxtb	r3, r3
 800376e:	b21b      	sxth	r3, r3
 8003770:	4313      	orrs	r3, r2
 8003772:	b21b      	sxth	r3, r3
 8003774:	111b      	asrs	r3, r3, #4
 8003776:	b21a      	sxth	r2, r3
 8003778:	2008      	movs	r0, #8
 800377a:	183b      	adds	r3, r7, r0
 800377c:	801a      	strh	r2, [r3, #0]
	accRawSigned[1] = (((int16_t) ((((uint16_t) regDataYH) << 4) | ((uint16_t) (regDataYL & bitmask)))) >> 4);
 800377e:	2111      	movs	r1, #17
 8003780:	187b      	adds	r3, r7, r1
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	b21a      	sxth	r2, r3
 8003788:	2312      	movs	r3, #18
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	1979      	adds	r1, r7, r5
 8003790:	7809      	ldrb	r1, [r1, #0]
 8003792:	400b      	ands	r3, r1
 8003794:	b2db      	uxtb	r3, r3
 8003796:	b21b      	sxth	r3, r3
 8003798:	4313      	orrs	r3, r2
 800379a:	b21b      	sxth	r3, r3
 800379c:	111b      	asrs	r3, r3, #4
 800379e:	b21a      	sxth	r2, r3
 80037a0:	183b      	adds	r3, r7, r0
 80037a2:	805a      	strh	r2, [r3, #2]
	accRawSigned[2] = (((int16_t) ((((uint16_t) regDataZH) << 4) | ((uint16_t) (regDataZL & bitmask)))) >> 4);
 80037a4:	220f      	movs	r2, #15
 80037a6:	18bb      	adds	r3, r7, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	b21a      	sxth	r2, r3
 80037ae:	2310      	movs	r3, #16
 80037b0:	18fb      	adds	r3, r7, r3
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	1979      	adds	r1, r7, r5
 80037b6:	7809      	ldrb	r1, [r1, #0]
 80037b8:	400b      	ands	r3, r1
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	b21b      	sxth	r3, r3
 80037be:	4313      	orrs	r3, r2
 80037c0:	b21b      	sxth	r3, r3
 80037c2:	111b      	asrs	r3, r3, #4
 80037c4:	b21a      	sxth	r2, r3
 80037c6:	0005      	movs	r5, r0
 80037c8:	197b      	adds	r3, r7, r5
 80037ca:	809a      	strh	r2, [r3, #4]
	 * accRawSigned[1] = (((int16_t) ((((uint16_t) regDataYH) << 8) | ((uint16_t) (regDataYL & bitmask)))) >> 4);
	 * accRawSigned[2] = (((int16_t) ((((uint16_t) regDataZH) << 8) | ((uint16_t) (regDataZL & bitmask)))) >> 4);
	 */

	/* Convertig to g */
	dev->acc_raw[0] = accRawSigned[0];
 80037cc:	197b      	adds	r3, r7, r5
 80037ce:	2200      	movs	r2, #0
 80037d0:	5e9a      	ldrsh	r2, [r3, r2]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	821a      	strh	r2, [r3, #16]
	dev->acc_raw[1] = accRawSigned[1];
 80037d6:	197b      	adds	r3, r7, r5
 80037d8:	2202      	movs	r2, #2
 80037da:	5e9a      	ldrsh	r2, [r3, r2]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	825a      	strh	r2, [r3, #18]
	dev->acc_raw[2] = accRawSigned[2];
 80037e0:	197b      	adds	r3, r7, r5
 80037e2:	2204      	movs	r2, #4
 80037e4:	5e9a      	ldrsh	r2, [r3, r2]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	829a      	strh	r2, [r3, #20]
	 dev->acc[0] = accRawSigned[0] * 0.00098;
	 dev->acc[1] = accRawSigned[1] * 0.00098;
	 dev->acc[2] = accRawSigned[2] * 0.00098;
	 */
	/* measuring range set to +-16g */
	dev->acc[0] = accRawSigned[0] * 0.01172;
 80037ea:	197b      	adds	r3, r7, r5
 80037ec:	2200      	movs	r2, #0
 80037ee:	5e9b      	ldrsh	r3, [r3, r2]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff f8ff 	bl	80029f4 <__aeabi_i2d>
 80037f6:	4a67      	ldr	r2, [pc, #412]	; (8003994 <LSM303AGR_ReadAcceleration+0x360>)
 80037f8:	4b67      	ldr	r3, [pc, #412]	; (8003998 <LSM303AGR_ReadAcceleration+0x364>)
 80037fa:	f7fe faa9 	bl	8001d50 <__aeabi_dmul>
 80037fe:	0002      	movs	r2, r0
 8003800:	000b      	movs	r3, r1
 8003802:	0010      	movs	r0, r2
 8003804:	0019      	movs	r1, r3
 8003806:	f7ff f993 	bl	8002b30 <__aeabi_d2f>
 800380a:	1c02      	adds	r2, r0, #0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	605a      	str	r2, [r3, #4]
	dev->acc[1] = accRawSigned[1] * 0.01172;
 8003810:	197b      	adds	r3, r7, r5
 8003812:	2202      	movs	r2, #2
 8003814:	5e9b      	ldrsh	r3, [r3, r2]
 8003816:	0018      	movs	r0, r3
 8003818:	f7ff f8ec 	bl	80029f4 <__aeabi_i2d>
 800381c:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <LSM303AGR_ReadAcceleration+0x360>)
 800381e:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <LSM303AGR_ReadAcceleration+0x364>)
 8003820:	f7fe fa96 	bl	8001d50 <__aeabi_dmul>
 8003824:	0002      	movs	r2, r0
 8003826:	000b      	movs	r3, r1
 8003828:	0010      	movs	r0, r2
 800382a:	0019      	movs	r1, r3
 800382c:	f7ff f980 	bl	8002b30 <__aeabi_d2f>
 8003830:	1c02      	adds	r2, r0, #0
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	609a      	str	r2, [r3, #8]
	dev->acc[2] = accRawSigned[2] * 0.01172;
 8003836:	197b      	adds	r3, r7, r5
 8003838:	2204      	movs	r2, #4
 800383a:	5e9b      	ldrsh	r3, [r3, r2]
 800383c:	0018      	movs	r0, r3
 800383e:	f7ff f8d9 	bl	80029f4 <__aeabi_i2d>
 8003842:	4a54      	ldr	r2, [pc, #336]	; (8003994 <LSM303AGR_ReadAcceleration+0x360>)
 8003844:	4b54      	ldr	r3, [pc, #336]	; (8003998 <LSM303AGR_ReadAcceleration+0x364>)
 8003846:	f7fe fa83 	bl	8001d50 <__aeabi_dmul>
 800384a:	0002      	movs	r2, r0
 800384c:	000b      	movs	r3, r1
 800384e:	0010      	movs	r0, r2
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff f96d 	bl	8002b30 <__aeabi_d2f>
 8003856:	1c02      	adds	r2, r0, #0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	60da      	str	r2, [r3, #12]


	/* Calculating Pitch/Roll */
	dev->pitch = 180 * atan(dev->acc[0] / sqrt(dev->acc[1] * dev->acc[1] + dev->acc[2] * dev->acc[2]))/M_PI;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	1c18      	adds	r0, r3, #0
 8003862:	f7ff f91d 	bl	8002aa0 <__aeabi_f2d>
 8003866:	0004      	movs	r4, r0
 8003868:	000d      	movs	r5, r1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	1c19      	adds	r1, r3, #0
 8003874:	1c10      	adds	r0, r2, #0
 8003876:	f7fd f9b9 	bl	8000bec <__aeabi_fmul>
 800387a:	1c03      	adds	r3, r0, #0
 800387c:	1c1e      	adds	r6, r3, #0
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	1c19      	adds	r1, r3, #0
 8003888:	1c10      	adds	r0, r2, #0
 800388a:	f7fd f9af 	bl	8000bec <__aeabi_fmul>
 800388e:	1c03      	adds	r3, r0, #0
 8003890:	1c19      	adds	r1, r3, #0
 8003892:	1c30      	adds	r0, r6, #0
 8003894:	f7fc ff5c 	bl	8000750 <__aeabi_fadd>
 8003898:	1c03      	adds	r3, r0, #0
 800389a:	1c18      	adds	r0, r3, #0
 800389c:	f7ff f900 	bl	8002aa0 <__aeabi_f2d>
 80038a0:	0002      	movs	r2, r0
 80038a2:	000b      	movs	r3, r1
 80038a4:	0010      	movs	r0, r2
 80038a6:	0019      	movs	r1, r3
 80038a8:	f005 feb7 	bl	800961a <sqrt>
 80038ac:	0002      	movs	r2, r0
 80038ae:	000b      	movs	r3, r1
 80038b0:	0020      	movs	r0, r4
 80038b2:	0029      	movs	r1, r5
 80038b4:	f7fd fe4a 	bl	800154c <__aeabi_ddiv>
 80038b8:	0002      	movs	r2, r0
 80038ba:	000b      	movs	r3, r1
 80038bc:	0010      	movs	r0, r2
 80038be:	0019      	movs	r1, r3
 80038c0:	f005 fd24 	bl	800930c <atan>
 80038c4:	2200      	movs	r2, #0
 80038c6:	4b35      	ldr	r3, [pc, #212]	; (800399c <LSM303AGR_ReadAcceleration+0x368>)
 80038c8:	f7fe fa42 	bl	8001d50 <__aeabi_dmul>
 80038cc:	0002      	movs	r2, r0
 80038ce:	000b      	movs	r3, r1
 80038d0:	0010      	movs	r0, r2
 80038d2:	0019      	movs	r1, r3
 80038d4:	4a32      	ldr	r2, [pc, #200]	; (80039a0 <LSM303AGR_ReadAcceleration+0x36c>)
 80038d6:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <LSM303AGR_ReadAcceleration+0x370>)
 80038d8:	f7fd fe38 	bl	800154c <__aeabi_ddiv>
 80038dc:	0002      	movs	r2, r0
 80038de:	000b      	movs	r3, r1
 80038e0:	0010      	movs	r0, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	f7ff f924 	bl	8002b30 <__aeabi_d2f>
 80038e8:	1c02      	adds	r2, r0, #0
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	619a      	str	r2, [r3, #24]
	dev->roll = 180	* atan(dev->acc[1] / sqrt(dev->acc[0] * dev->acc[0] + dev->acc[2] * dev->acc[2]))/M_PI;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	1c18      	adds	r0, r3, #0
 80038f4:	f7ff f8d4 	bl	8002aa0 <__aeabi_f2d>
 80038f8:	0004      	movs	r4, r0
 80038fa:	000d      	movs	r5, r1
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685a      	ldr	r2, [r3, #4]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	1c19      	adds	r1, r3, #0
 8003906:	1c10      	adds	r0, r2, #0
 8003908:	f7fd f970 	bl	8000bec <__aeabi_fmul>
 800390c:	1c03      	adds	r3, r0, #0
 800390e:	1c1e      	adds	r6, r3, #0
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	1c19      	adds	r1, r3, #0
 800391a:	1c10      	adds	r0, r2, #0
 800391c:	f7fd f966 	bl	8000bec <__aeabi_fmul>
 8003920:	1c03      	adds	r3, r0, #0
 8003922:	1c19      	adds	r1, r3, #0
 8003924:	1c30      	adds	r0, r6, #0
 8003926:	f7fc ff13 	bl	8000750 <__aeabi_fadd>
 800392a:	1c03      	adds	r3, r0, #0
 800392c:	1c18      	adds	r0, r3, #0
 800392e:	f7ff f8b7 	bl	8002aa0 <__aeabi_f2d>
 8003932:	0002      	movs	r2, r0
 8003934:	000b      	movs	r3, r1
 8003936:	0010      	movs	r0, r2
 8003938:	0019      	movs	r1, r3
 800393a:	f005 fe6e 	bl	800961a <sqrt>
 800393e:	0002      	movs	r2, r0
 8003940:	000b      	movs	r3, r1
 8003942:	0020      	movs	r0, r4
 8003944:	0029      	movs	r1, r5
 8003946:	f7fd fe01 	bl	800154c <__aeabi_ddiv>
 800394a:	0002      	movs	r2, r0
 800394c:	000b      	movs	r3, r1
 800394e:	0010      	movs	r0, r2
 8003950:	0019      	movs	r1, r3
 8003952:	f005 fcdb 	bl	800930c <atan>
 8003956:	2200      	movs	r2, #0
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <LSM303AGR_ReadAcceleration+0x368>)
 800395a:	f7fe f9f9 	bl	8001d50 <__aeabi_dmul>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
 8003962:	0010      	movs	r0, r2
 8003964:	0019      	movs	r1, r3
 8003966:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <LSM303AGR_ReadAcceleration+0x36c>)
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <LSM303AGR_ReadAcceleration+0x370>)
 800396a:	f7fd fdef 	bl	800154c <__aeabi_ddiv>
 800396e:	0002      	movs	r2, r0
 8003970:	000b      	movs	r3, r1
 8003972:	0010      	movs	r0, r2
 8003974:	0019      	movs	r1, r3
 8003976:	f7ff f8db 	bl	8002b30 <__aeabi_d2f>
 800397a:	1c02      	adds	r2, r0, #0
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	61da      	str	r2, [r3, #28]
	return errNum;
 8003980:	2417      	movs	r4, #23
 8003982:	193b      	adds	r3, r7, r4
 8003984:	781b      	ldrb	r3, [r3, #0]

}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b007      	add	sp, #28
 800398c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	08009a74 	.word	0x08009a74
 8003994:	c5ac471b 	.word	0xc5ac471b
 8003998:	3f8800a7 	.word	0x3f8800a7
 800399c:	40668000 	.word	0x40668000
 80039a0:	54442d18 	.word	0x54442d18
 80039a4:	400921fb 	.word	0x400921fb

080039a8 <LSM303AGR_ReadMagnetometer>:

HAL_StatusTypeDef LSM303AGR_ReadMagnetometer(LSM303AGR *dev) {
 80039a8:	b5b0      	push	{r4, r5, r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
	/*
	 * Temp. read ctrl register
	 */
	uint8_t reg_data;
	LSM303AGR_MAG_ReadRegister(dev, LSM303AGR_CFG_REG_B_M, &reg_data);
 80039b0:	241a      	movs	r4, #26
 80039b2:	193a      	adds	r2, r7, r4
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2161      	movs	r1, #97	; 0x61
 80039b8:	0018      	movs	r0, r3
 80039ba:	f000 f8c9 	bl	8003b50 <LSM303AGR_MAG_ReadRegister>
	printf("\nCFG_REG_B_M: %X\r", reg_data);
 80039be:	193b      	adds	r3, r7, r4
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	001a      	movs	r2, r3
 80039c4:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <LSM303AGR_ReadMagnetometer+0x18c>)
 80039c6:	0011      	movs	r1, r2
 80039c8:	0018      	movs	r0, r3
 80039ca:	f003 fb27 	bl	800701c <iprintf>


	/* Read raw values from Resgister (x, y, z -> 16 bits each) */
	uint8_t regData[6];
	HAL_StatusTypeDef status = LSM303AGR_MAG_ReadRegisters(dev,
 80039ce:	231b      	movs	r3, #27
 80039d0:	18fc      	adds	r4, r7, r3
 80039d2:	2514      	movs	r5, #20
 80039d4:	197a      	adds	r2, r7, r5
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	2306      	movs	r3, #6
 80039da:	2168      	movs	r1, #104	; 0x68
 80039dc:	f000 f8d5 	bl	8003b8a <LSM303AGR_MAG_ReadRegisters>
 80039e0:	0003      	movs	r3, r0
 80039e2:	7023      	strb	r3, [r4, #0]
	LSM303AGR_OUTX_L_REG_M, regData, 6);

	/* Combining 2x8bit to 16bit */
	int32_t magRawSigned[3];
	magRawSigned[0] = (int16_t) (((uint16_t) regData[0]) | ((uint16_t) regData[1] << 8)); /* X-Value */
 80039e4:	0028      	movs	r0, r5
 80039e6:	183b      	adds	r3, r7, r0
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	b21a      	sxth	r2, r3
 80039ec:	183b      	adds	r3, r7, r0
 80039ee:	785b      	ldrb	r3, [r3, #1]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	b21b      	sxth	r3, r3
 80039f4:	4313      	orrs	r3, r2
 80039f6:	b21b      	sxth	r3, r3
 80039f8:	001a      	movs	r2, r3
 80039fa:	2108      	movs	r1, #8
 80039fc:	187b      	adds	r3, r7, r1
 80039fe:	601a      	str	r2, [r3, #0]
	magRawSigned[1] = (int16_t) (((uint16_t) regData[2]) | ((uint16_t) regData[3] << 8)); /* Y-Value */
 8003a00:	183b      	adds	r3, r7, r0
 8003a02:	789b      	ldrb	r3, [r3, #2]
 8003a04:	b21a      	sxth	r2, r3
 8003a06:	183b      	adds	r3, r7, r0
 8003a08:	78db      	ldrb	r3, [r3, #3]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	b21b      	sxth	r3, r3
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	b21b      	sxth	r3, r3
 8003a12:	001a      	movs	r2, r3
 8003a14:	187b      	adds	r3, r7, r1
 8003a16:	605a      	str	r2, [r3, #4]
	magRawSigned[2] = (int16_t) (((uint16_t) regData[4]) | ((uint16_t) regData[5] << 8)); /* Z-Value */
 8003a18:	183b      	adds	r3, r7, r0
 8003a1a:	791b      	ldrb	r3, [r3, #4]
 8003a1c:	b21a      	sxth	r2, r3
 8003a1e:	183b      	adds	r3, r7, r0
 8003a20:	795b      	ldrb	r3, [r3, #5]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	b21b      	sxth	r3, r3
 8003a26:	4313      	orrs	r3, r2
 8003a28:	b21b      	sxth	r3, r3
 8003a2a:	001a      	movs	r2, r3
 8003a2c:	000c      	movs	r4, r1
 8003a2e:	193b      	adds	r3, r7, r4
 8003a30:	609a      	str	r2, [r3, #8]

	/* Convertig to Gauss */
	dev->mag_raw[0] = magRawSigned[0];
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	b21a      	sxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	859a      	strh	r2, [r3, #44]	; 0x2c
	dev->mag_raw[1] = magRawSigned[1];
 8003a3c:	193b      	adds	r3, r7, r4
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b21a      	sxth	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	85da      	strh	r2, [r3, #46]	; 0x2e
	dev->mag_raw[2] = magRawSigned[2];
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	b21a      	sxth	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	861a      	strh	r2, [r3, #48]	; 0x30

	dev->mag[0] = magRawSigned[0] * 0.0015;
 8003a50:	193b      	adds	r3, r7, r4
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0018      	movs	r0, r3
 8003a56:	f7fe ffcd 	bl	80029f4 <__aeabi_i2d>
 8003a5a:	4a37      	ldr	r2, [pc, #220]	; (8003b38 <LSM303AGR_ReadMagnetometer+0x190>)
 8003a5c:	4b37      	ldr	r3, [pc, #220]	; (8003b3c <LSM303AGR_ReadMagnetometer+0x194>)
 8003a5e:	f7fe f977 	bl	8001d50 <__aeabi_dmul>
 8003a62:	0002      	movs	r2, r0
 8003a64:	000b      	movs	r3, r1
 8003a66:	0010      	movs	r0, r2
 8003a68:	0019      	movs	r1, r3
 8003a6a:	f7ff f861 	bl	8002b30 <__aeabi_d2f>
 8003a6e:	1c02      	adds	r2, r0, #0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	621a      	str	r2, [r3, #32]
	dev->mag[1] = magRawSigned[1] * 0.0015;
 8003a74:	193b      	adds	r3, r7, r4
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	0018      	movs	r0, r3
 8003a7a:	f7fe ffbb 	bl	80029f4 <__aeabi_i2d>
 8003a7e:	4a2e      	ldr	r2, [pc, #184]	; (8003b38 <LSM303AGR_ReadMagnetometer+0x190>)
 8003a80:	4b2e      	ldr	r3, [pc, #184]	; (8003b3c <LSM303AGR_ReadMagnetometer+0x194>)
 8003a82:	f7fe f965 	bl	8001d50 <__aeabi_dmul>
 8003a86:	0002      	movs	r2, r0
 8003a88:	000b      	movs	r3, r1
 8003a8a:	0010      	movs	r0, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	f7ff f84f 	bl	8002b30 <__aeabi_d2f>
 8003a92:	1c02      	adds	r2, r0, #0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24
	dev->mag[2] = magRawSigned[2] * 0.0015;
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7fe ffa9 	bl	80029f4 <__aeabi_i2d>
 8003aa2:	4a25      	ldr	r2, [pc, #148]	; (8003b38 <LSM303AGR_ReadMagnetometer+0x190>)
 8003aa4:	4b25      	ldr	r3, [pc, #148]	; (8003b3c <LSM303AGR_ReadMagnetometer+0x194>)
 8003aa6:	f7fe f953 	bl	8001d50 <__aeabi_dmul>
 8003aaa:	0002      	movs	r2, r0
 8003aac:	000b      	movs	r3, r1
 8003aae:	0010      	movs	r0, r2
 8003ab0:	0019      	movs	r1, r3
 8003ab2:	f7ff f83d 	bl	8002b30 <__aeabi_d2f>
 8003ab6:	1c02      	adds	r2, r0, #0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28

	/* Calculate alignment*/
	float alignment;
	alignment = (atan2(dev->mag[1], dev->mag[0]) * 180) / M_PI;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c18      	adds	r0, r3, #0
 8003ac2:	f7fe ffed 	bl	8002aa0 <__aeabi_f2d>
 8003ac6:	0004      	movs	r4, r0
 8003ac8:	000d      	movs	r5, r1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	1c18      	adds	r0, r3, #0
 8003ad0:	f7fe ffe6 	bl	8002aa0 <__aeabi_f2d>
 8003ad4:	0002      	movs	r2, r0
 8003ad6:	000b      	movs	r3, r1
 8003ad8:	0020      	movs	r0, r4
 8003ada:	0029      	movs	r1, r5
 8003adc:	f005 fd99 	bl	8009612 <atan2>
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	4b17      	ldr	r3, [pc, #92]	; (8003b40 <LSM303AGR_ReadMagnetometer+0x198>)
 8003ae4:	f7fe f934 	bl	8001d50 <__aeabi_dmul>
 8003ae8:	0002      	movs	r2, r0
 8003aea:	000b      	movs	r3, r1
 8003aec:	0010      	movs	r0, r2
 8003aee:	0019      	movs	r1, r3
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <LSM303AGR_ReadMagnetometer+0x19c>)
 8003af2:	4b15      	ldr	r3, [pc, #84]	; (8003b48 <LSM303AGR_ReadMagnetometer+0x1a0>)
 8003af4:	f7fd fd2a 	bl	800154c <__aeabi_ddiv>
 8003af8:	0002      	movs	r2, r0
 8003afa:	000b      	movs	r3, r1
 8003afc:	0010      	movs	r0, r2
 8003afe:	0019      	movs	r1, r3
 8003b00:	f7ff f816 	bl	8002b30 <__aeabi_d2f>
 8003b04:	1c03      	adds	r3, r0, #0
 8003b06:	61fb      	str	r3, [r7, #28]
	if (alignment < 0) {
 8003b08:	2100      	movs	r1, #0
 8003b0a:	69f8      	ldr	r0, [r7, #28]
 8003b0c:	f7fc fcde 	bl	80004cc <__aeabi_fcmplt>
 8003b10:	1e03      	subs	r3, r0, #0
 8003b12:	d005      	beq.n	8003b20 <LSM303AGR_ReadMagnetometer+0x178>
		alignment = 360 + alignment;
 8003b14:	490d      	ldr	r1, [pc, #52]	; (8003b4c <LSM303AGR_ReadMagnetometer+0x1a4>)
 8003b16:	69f8      	ldr	r0, [r7, #28]
 8003b18:	f7fc fe1a 	bl	8000750 <__aeabi_fadd>
 8003b1c:	1c03      	adds	r3, r0, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
	}
	dev->alignment = alignment;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	635a      	str	r2, [r3, #52]	; 0x34

	return status;
 8003b26:	231b      	movs	r3, #27
 8003b28:	18fb      	adds	r3, r7, r3
 8003b2a:	781b      	ldrb	r3, [r3, #0]
}
 8003b2c:	0018      	movs	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	b008      	add	sp, #32
 8003b32:	bdb0      	pop	{r4, r5, r7, pc}
 8003b34:	08009a88 	.word	0x08009a88
 8003b38:	bc6a7efa 	.word	0xbc6a7efa
 8003b3c:	3f589374 	.word	0x3f589374
 8003b40:	40668000 	.word	0x40668000
 8003b44:	54442d18 	.word	0x54442d18
 8003b48:	400921fb 	.word	0x400921fb
 8003b4c:	43b40000 	.word	0x43b40000

08003b50 <LSM303AGR_MAG_ReadRegister>:
/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef LSM303AGR_MAG_ReadRegister(LSM303AGR *dev, uint8_t reg,
		uint8_t *data) {
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b089      	sub	sp, #36	; 0x24
 8003b54:	af04      	add	r7, sp, #16
 8003b56:	60f8      	str	r0, [r7, #12]
 8003b58:	607a      	str	r2, [r7, #4]
 8003b5a:	240b      	movs	r4, #11
 8003b5c:	193b      	adds	r3, r7, r4
 8003b5e:	1c0a      	adds	r2, r1, #0
 8003b60:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_MAG_I2C_ADDR, reg,
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6818      	ldr	r0, [r3, #0]
 8003b66:	193b      	adds	r3, r7, r4
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	230a      	movs	r3, #10
 8003b6e:	9302      	str	r3, [sp, #8]
 8003b70:	2301      	movs	r3, #1
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	2301      	movs	r3, #1
 8003b7a:	213c      	movs	r1, #60	; 0x3c
 8003b7c:	f000 fd04 	bl	8004588 <HAL_I2C_Mem_Read>
 8003b80:	0003      	movs	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, 1, 10);
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b005      	add	sp, #20
 8003b88:	bd90      	pop	{r4, r7, pc}

08003b8a <LSM303AGR_MAG_ReadRegisters>:

HAL_StatusTypeDef LSM303AGR_MAG_ReadRegisters(LSM303AGR *dev, uint8_t reg,
		uint8_t *data, uint8_t length) {
 8003b8a:	b5b0      	push	{r4, r5, r7, lr}
 8003b8c:	b088      	sub	sp, #32
 8003b8e:	af04      	add	r7, sp, #16
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	0008      	movs	r0, r1
 8003b94:	607a      	str	r2, [r7, #4]
 8003b96:	0019      	movs	r1, r3
 8003b98:	240b      	movs	r4, #11
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	1c02      	adds	r2, r0, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
 8003ba0:	250a      	movs	r5, #10
 8003ba2:	197b      	adds	r3, r7, r5
 8003ba4:	1c0a      	adds	r2, r1, #0
 8003ba6:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_MAG_I2C_ADDR, reg,
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6818      	ldr	r0, [r3, #0]
 8003bac:	193b      	adds	r3, r7, r4
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	197b      	adds	r3, r7, r5
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	210a      	movs	r1, #10
 8003bba:	9102      	str	r1, [sp, #8]
 8003bbc:	9301      	str	r3, [sp, #4]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	213c      	movs	r1, #60	; 0x3c
 8003bc6:	f000 fcdf 	bl	8004588 <HAL_I2C_Mem_Read>
 8003bca:	0003      	movs	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, length, 10);
}
 8003bcc:	0018      	movs	r0, r3
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b004      	add	sp, #16
 8003bd2:	bdb0      	pop	{r4, r5, r7, pc}

08003bd4 <LSM303AGR_MAG_WriteRegister>:

HAL_StatusTypeDef LSM303AGR_MAG_WriteRegister(LSM303AGR *dev, uint8_t reg,
		uint8_t *data) {
 8003bd4:	b590      	push	{r4, r7, lr}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	240b      	movs	r4, #11
 8003be0:	193b      	adds	r3, r7, r4
 8003be2:	1c0a      	adds	r2, r1, #0
 8003be4:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, LSM303AGR_MAG_I2C_ADDR, reg,
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	193b      	adds	r3, r7, r4
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	9302      	str	r3, [sp, #8]
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	9301      	str	r3, [sp, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	213c      	movs	r1, #60	; 0x3c
 8003c00:	f000 fb94 	bl	800432c <HAL_I2C_Mem_Write>
 8003c04:	0003      	movs	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, 1, 10);
}
 8003c06:	0018      	movs	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	b005      	add	sp, #20
 8003c0c:	bd90      	pop	{r4, r7, pc}

08003c0e <LSM303AGR_ACC_ReadRegister>:

HAL_StatusTypeDef LSM303AGR_ACC_ReadRegister(LSM303AGR *dev, uint8_t reg,
		uint8_t *data) {
 8003c0e:	b590      	push	{r4, r7, lr}
 8003c10:	b089      	sub	sp, #36	; 0x24
 8003c12:	af04      	add	r7, sp, #16
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	607a      	str	r2, [r7, #4]
 8003c18:	240b      	movs	r4, #11
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	1c0a      	adds	r2, r1, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_ACC_I2C_ADDR, reg,
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6818      	ldr	r0, [r3, #0]
 8003c24:	193b      	adds	r3, r7, r4
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	230a      	movs	r3, #10
 8003c2c:	9302      	str	r3, [sp, #8]
 8003c2e:	2301      	movs	r3, #1
 8003c30:	9301      	str	r3, [sp, #4]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	9300      	str	r3, [sp, #0]
 8003c36:	2301      	movs	r3, #1
 8003c38:	2132      	movs	r1, #50	; 0x32
 8003c3a:	f000 fca5 	bl	8004588 <HAL_I2C_Mem_Read>
 8003c3e:	0003      	movs	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, 1, 10);
}
 8003c40:	0018      	movs	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	b005      	add	sp, #20
 8003c46:	bd90      	pop	{r4, r7, pc}

08003c48 <LSM303AGR_ACC_WriteRegister>:
	return HAL_I2C_Mem_Read(dev->i2cHandle, LSM303AGR_ACC_I2C_ADDR, reg,
	I2C_MEMADD_SIZE_8BIT, data, length, 10);
}

HAL_StatusTypeDef LSM303AGR_ACC_WriteRegister(LSM303AGR *dev, uint8_t reg,
		uint8_t *data) {
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b089      	sub	sp, #36	; 0x24
 8003c4c:	af04      	add	r7, sp, #16
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	240b      	movs	r4, #11
 8003c54:	193b      	adds	r3, r7, r4
 8003c56:	1c0a      	adds	r2, r1, #0
 8003c58:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, LSM303AGR_ACC_I2C_ADDR, reg,
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	230a      	movs	r3, #10
 8003c66:	9302      	str	r3, [sp, #8]
 8003c68:	2301      	movs	r3, #1
 8003c6a:	9301      	str	r3, [sp, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2301      	movs	r3, #1
 8003c72:	2132      	movs	r1, #50	; 0x32
 8003c74:	f000 fb5a 	bl	800432c <HAL_I2C_Mem_Write>
 8003c78:	0003      	movs	r3, r0
	I2C_MEMADD_SIZE_8BIT, data, 1, 10);
}
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	b005      	add	sp, #20
 8003c80:	bd90      	pop	{r4, r7, pc}
	...

08003c84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003c8a:	1dfb      	adds	r3, r7, #7
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_Init+0x3c>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b0a      	ldr	r3, [pc, #40]	; (8003cc0 <HAL_Init+0x3c>)
 8003c96:	2140      	movs	r1, #64	; 0x40
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c9c:	2003      	movs	r0, #3
 8003c9e:	f000 f811 	bl	8003cc4 <HAL_InitTick>
 8003ca2:	1e03      	subs	r3, r0, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003ca6:	1dfb      	adds	r3, r7, #7
 8003ca8:	2201      	movs	r2, #1
 8003caa:	701a      	strb	r2, [r3, #0]
 8003cac:	e001      	b.n	8003cb2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003cae:	f7ff f9e1 	bl	8003074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003cb2:	1dfb      	adds	r3, r7, #7
 8003cb4:	781b      	ldrb	r3, [r3, #0]
}
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b002      	add	sp, #8
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	40022000 	.word	0x40022000

08003cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003cc4:	b590      	push	{r4, r7, lr}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ccc:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_InitTick+0x5c>)
 8003cce:	681c      	ldr	r4, [r3, #0]
 8003cd0:	4b14      	ldr	r3, [pc, #80]	; (8003d24 <HAL_InitTick+0x60>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	0019      	movs	r1, r3
 8003cd6:	23fa      	movs	r3, #250	; 0xfa
 8003cd8:	0098      	lsls	r0, r3, #2
 8003cda:	f7fc fa31 	bl	8000140 <__udivsi3>
 8003cde:	0003      	movs	r3, r0
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	0020      	movs	r0, r4
 8003ce4:	f7fc fa2c 	bl	8000140 <__udivsi3>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	0018      	movs	r0, r3
 8003cec:	f000 f905 	bl	8003efa <HAL_SYSTICK_Config>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d001      	beq.n	8003cf8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e00f      	b.n	8003d18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d80b      	bhi.n	8003d16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	2301      	movs	r3, #1
 8003d02:	425b      	negs	r3, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	0018      	movs	r0, r3
 8003d08:	f000 f8e2 	bl	8003ed0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_InitTick+0x64>)
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	e000      	b.n	8003d18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
}
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b003      	add	sp, #12
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	20000000 	.word	0x20000000
 8003d24:	20000008 	.word	0x20000008
 8003d28:	20000004 	.word	0x20000004

08003d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_IncTick+0x1c>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	001a      	movs	r2, r3
 8003d36:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <HAL_IncTick+0x20>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	18d2      	adds	r2, r2, r3
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_IncTick+0x20>)
 8003d3e:	601a      	str	r2, [r3, #0]
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			; (mov r8, r8)
 8003d48:	20000008 	.word	0x20000008
 8003d4c:	20000308 	.word	0x20000308

08003d50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  return uwTick;
 8003d54:	4b02      	ldr	r3, [pc, #8]	; (8003d60 <HAL_GetTick+0x10>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	20000308 	.word	0x20000308

08003d64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d6c:	f7ff fff0 	bl	8003d50 <HAL_GetTick>
 8003d70:	0003      	movs	r3, r0
 8003d72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	d005      	beq.n	8003d8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d7e:	4b0a      	ldr	r3, [pc, #40]	; (8003da8 <HAL_Delay+0x44>)
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	001a      	movs	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	189b      	adds	r3, r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	f7ff ffe0 	bl	8003d50 <HAL_GetTick>
 8003d90:	0002      	movs	r2, r0
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d8f7      	bhi.n	8003d8c <HAL_Delay+0x28>
  {
  }
}
 8003d9c:	46c0      	nop			; (mov r8, r8)
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	46c0      	nop			; (mov r8, r8)
 8003da8:	20000008 	.word	0x20000008

08003dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	0002      	movs	r2, r0
 8003db4:	6039      	str	r1, [r7, #0]
 8003db6:	1dfb      	adds	r3, r7, #7
 8003db8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003dba:	1dfb      	adds	r3, r7, #7
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8003dc0:	d828      	bhi.n	8003e14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dc2:	4a2f      	ldr	r2, [pc, #188]	; (8003e80 <__NVIC_SetPriority+0xd4>)
 8003dc4:	1dfb      	adds	r3, r7, #7
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	b25b      	sxtb	r3, r3
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	33c0      	adds	r3, #192	; 0xc0
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	589b      	ldr	r3, [r3, r2]
 8003dd2:	1dfa      	adds	r2, r7, #7
 8003dd4:	7812      	ldrb	r2, [r2, #0]
 8003dd6:	0011      	movs	r1, r2
 8003dd8:	2203      	movs	r2, #3
 8003dda:	400a      	ands	r2, r1
 8003ddc:	00d2      	lsls	r2, r2, #3
 8003dde:	21ff      	movs	r1, #255	; 0xff
 8003de0:	4091      	lsls	r1, r2
 8003de2:	000a      	movs	r2, r1
 8003de4:	43d2      	mvns	r2, r2
 8003de6:	401a      	ands	r2, r3
 8003de8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	019b      	lsls	r3, r3, #6
 8003dee:	22ff      	movs	r2, #255	; 0xff
 8003df0:	401a      	ands	r2, r3
 8003df2:	1dfb      	adds	r3, r7, #7
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	0018      	movs	r0, r3
 8003df8:	2303      	movs	r3, #3
 8003dfa:	4003      	ands	r3, r0
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e00:	481f      	ldr	r0, [pc, #124]	; (8003e80 <__NVIC_SetPriority+0xd4>)
 8003e02:	1dfb      	adds	r3, r7, #7
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	b25b      	sxtb	r3, r3
 8003e08:	089b      	lsrs	r3, r3, #2
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	33c0      	adds	r3, #192	; 0xc0
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003e12:	e031      	b.n	8003e78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e14:	4a1b      	ldr	r2, [pc, #108]	; (8003e84 <__NVIC_SetPriority+0xd8>)
 8003e16:	1dfb      	adds	r3, r7, #7
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	0019      	movs	r1, r3
 8003e1c:	230f      	movs	r3, #15
 8003e1e:	400b      	ands	r3, r1
 8003e20:	3b08      	subs	r3, #8
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	3306      	adds	r3, #6
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	18d3      	adds	r3, r2, r3
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	1dfa      	adds	r2, r7, #7
 8003e30:	7812      	ldrb	r2, [r2, #0]
 8003e32:	0011      	movs	r1, r2
 8003e34:	2203      	movs	r2, #3
 8003e36:	400a      	ands	r2, r1
 8003e38:	00d2      	lsls	r2, r2, #3
 8003e3a:	21ff      	movs	r1, #255	; 0xff
 8003e3c:	4091      	lsls	r1, r2
 8003e3e:	000a      	movs	r2, r1
 8003e40:	43d2      	mvns	r2, r2
 8003e42:	401a      	ands	r2, r3
 8003e44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	019b      	lsls	r3, r3, #6
 8003e4a:	22ff      	movs	r2, #255	; 0xff
 8003e4c:	401a      	ands	r2, r3
 8003e4e:	1dfb      	adds	r3, r7, #7
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	0018      	movs	r0, r3
 8003e54:	2303      	movs	r3, #3
 8003e56:	4003      	ands	r3, r0
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e5c:	4809      	ldr	r0, [pc, #36]	; (8003e84 <__NVIC_SetPriority+0xd8>)
 8003e5e:	1dfb      	adds	r3, r7, #7
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	001c      	movs	r4, r3
 8003e64:	230f      	movs	r3, #15
 8003e66:	4023      	ands	r3, r4
 8003e68:	3b08      	subs	r3, #8
 8003e6a:	089b      	lsrs	r3, r3, #2
 8003e6c:	430a      	orrs	r2, r1
 8003e6e:	3306      	adds	r3, #6
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	18c3      	adds	r3, r0, r3
 8003e74:	3304      	adds	r3, #4
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b003      	add	sp, #12
 8003e7e:	bd90      	pop	{r4, r7, pc}
 8003e80:	e000e100 	.word	0xe000e100
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b082      	sub	sp, #8
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	1e5a      	subs	r2, r3, #1
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	045b      	lsls	r3, r3, #17
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d301      	bcc.n	8003ea0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e010      	b.n	8003ec2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	; (8003ecc <SysTick_Config+0x44>)
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	3a01      	subs	r2, #1
 8003ea6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	425b      	negs	r3, r3
 8003eac:	2103      	movs	r1, #3
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f7ff ff7c 	bl	8003dac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <SysTick_Config+0x44>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003eba:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <SysTick_Config+0x44>)
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	b002      	add	sp, #8
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	e000e010 	.word	0xe000e010

08003ed0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
 8003eda:	210f      	movs	r1, #15
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	1c02      	adds	r2, r0, #0
 8003ee0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	b25b      	sxtb	r3, r3
 8003eea:	0011      	movs	r1, r2
 8003eec:	0018      	movs	r0, r3
 8003eee:	f7ff ff5d 	bl	8003dac <__NVIC_SetPriority>
}
 8003ef2:	46c0      	nop			; (mov r8, r8)
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	b004      	add	sp, #16
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	0018      	movs	r0, r3
 8003f06:	f7ff ffbf 	bl	8003e88 <SysTick_Config>
 8003f0a:	0003      	movs	r3, r0
}
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	b002      	add	sp, #8
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003f26:	2300      	movs	r3, #0
 8003f28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003f2a:	e14f      	b.n	80041cc <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2101      	movs	r1, #1
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	4091      	lsls	r1, r2
 8003f36:	000a      	movs	r2, r1
 8003f38:	4013      	ands	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d100      	bne.n	8003f44 <HAL_GPIO_Init+0x30>
 8003f42:	e140      	b.n	80041c6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	2203      	movs	r2, #3
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d005      	beq.n	8003f5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2203      	movs	r2, #3
 8003f56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d130      	bne.n	8003fbe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	2203      	movs	r2, #3
 8003f68:	409a      	lsls	r2, r3
 8003f6a:	0013      	movs	r3, r2
 8003f6c:	43da      	mvns	r2, r3
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	4013      	ands	r3, r2
 8003f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	0013      	movs	r3, r2
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f92:	2201      	movs	r2, #1
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	409a      	lsls	r2, r3
 8003f98:	0013      	movs	r3, r2
 8003f9a:	43da      	mvns	r2, r3
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	091b      	lsrs	r3, r3, #4
 8003fa8:	2201      	movs	r2, #1
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
 8003fb0:	0013      	movs	r3, r2
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d017      	beq.n	8003ffa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	2203      	movs	r2, #3
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	0013      	movs	r3, r2
 8003fda:	43da      	mvns	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	409a      	lsls	r2, r3
 8003fec:	0013      	movs	r3, r2
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2203      	movs	r2, #3
 8004000:	4013      	ands	r3, r2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d123      	bne.n	800404e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	08da      	lsrs	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3208      	adds	r2, #8
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	58d3      	ldr	r3, [r2, r3]
 8004012:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2207      	movs	r2, #7
 8004018:	4013      	ands	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	220f      	movs	r2, #15
 800401e:	409a      	lsls	r2, r3
 8004020:	0013      	movs	r3, r2
 8004022:	43da      	mvns	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	4013      	ands	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	691a      	ldr	r2, [r3, #16]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	2107      	movs	r1, #7
 8004032:	400b      	ands	r3, r1
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	409a      	lsls	r2, r3
 8004038:	0013      	movs	r3, r2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	4313      	orrs	r3, r2
 800403e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	08da      	lsrs	r2, r3, #3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	3208      	adds	r2, #8
 8004048:	0092      	lsls	r2, r2, #2
 800404a:	6939      	ldr	r1, [r7, #16]
 800404c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	2203      	movs	r2, #3
 800405a:	409a      	lsls	r2, r3
 800405c:	0013      	movs	r3, r2
 800405e:	43da      	mvns	r2, r3
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	4013      	ands	r3, r2
 8004064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2203      	movs	r2, #3
 800406c:	401a      	ands	r2, r3
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	409a      	lsls	r2, r3
 8004074:	0013      	movs	r3, r2
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	23c0      	movs	r3, #192	; 0xc0
 8004088:	029b      	lsls	r3, r3, #10
 800408a:	4013      	ands	r3, r2
 800408c:	d100      	bne.n	8004090 <HAL_GPIO_Init+0x17c>
 800408e:	e09a      	b.n	80041c6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004090:	4b54      	ldr	r3, [pc, #336]	; (80041e4 <HAL_GPIO_Init+0x2d0>)
 8004092:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_GPIO_Init+0x2d0>)
 8004096:	2101      	movs	r1, #1
 8004098:	430a      	orrs	r2, r1
 800409a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800409c:	4a52      	ldr	r2, [pc, #328]	; (80041e8 <HAL_GPIO_Init+0x2d4>)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	3302      	adds	r3, #2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	589b      	ldr	r3, [r3, r2]
 80040a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2203      	movs	r2, #3
 80040ae:	4013      	ands	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	220f      	movs	r2, #15
 80040b4:	409a      	lsls	r2, r3
 80040b6:	0013      	movs	r3, r2
 80040b8:	43da      	mvns	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	4013      	ands	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	23a0      	movs	r3, #160	; 0xa0
 80040c4:	05db      	lsls	r3, r3, #23
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d019      	beq.n	80040fe <HAL_GPIO_Init+0x1ea>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a47      	ldr	r2, [pc, #284]	; (80041ec <HAL_GPIO_Init+0x2d8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_GPIO_Init+0x1e6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a46      	ldr	r2, [pc, #280]	; (80041f0 <HAL_GPIO_Init+0x2dc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00d      	beq.n	80040f6 <HAL_GPIO_Init+0x1e2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a45      	ldr	r2, [pc, #276]	; (80041f4 <HAL_GPIO_Init+0x2e0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_Init+0x1de>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a44      	ldr	r2, [pc, #272]	; (80041f8 <HAL_GPIO_Init+0x2e4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_GPIO_Init+0x1da>
 80040ea:	2305      	movs	r3, #5
 80040ec:	e008      	b.n	8004100 <HAL_GPIO_Init+0x1ec>
 80040ee:	2306      	movs	r3, #6
 80040f0:	e006      	b.n	8004100 <HAL_GPIO_Init+0x1ec>
 80040f2:	2303      	movs	r3, #3
 80040f4:	e004      	b.n	8004100 <HAL_GPIO_Init+0x1ec>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e002      	b.n	8004100 <HAL_GPIO_Init+0x1ec>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_GPIO_Init+0x1ec>
 80040fe:	2300      	movs	r3, #0
 8004100:	697a      	ldr	r2, [r7, #20]
 8004102:	2103      	movs	r1, #3
 8004104:	400a      	ands	r2, r1
 8004106:	0092      	lsls	r2, r2, #2
 8004108:	4093      	lsls	r3, r2
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	4313      	orrs	r3, r2
 800410e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004110:	4935      	ldr	r1, [pc, #212]	; (80041e8 <HAL_GPIO_Init+0x2d4>)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	089b      	lsrs	r3, r3, #2
 8004116:	3302      	adds	r3, #2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800411e:	4b37      	ldr	r3, [pc, #220]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	43da      	mvns	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	2380      	movs	r3, #128	; 0x80
 8004134:	025b      	lsls	r3, r3, #9
 8004136:	4013      	ands	r3, r2
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004142:	4b2e      	ldr	r3, [pc, #184]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004148:	4b2c      	ldr	r3, [pc, #176]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43da      	mvns	r2, r3
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4013      	ands	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	2380      	movs	r3, #128	; 0x80
 800415e:	029b      	lsls	r3, r3, #10
 8004160:	4013      	ands	r3, r2
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800416c:	4b23      	ldr	r3, [pc, #140]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	43da      	mvns	r2, r3
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4013      	ands	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	2380      	movs	r3, #128	; 0x80
 8004188:	035b      	lsls	r3, r3, #13
 800418a:	4013      	ands	r3, r2
 800418c:	d003      	beq.n	8004196 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004196:	4b19      	ldr	r3, [pc, #100]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800419c:	4b17      	ldr	r3, [pc, #92]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	43da      	mvns	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	2380      	movs	r3, #128	; 0x80
 80041b2:	039b      	lsls	r3, r3, #14
 80041b4:	4013      	ands	r3, r2
 80041b6:	d003      	beq.n	80041c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80041c0:	4b0e      	ldr	r3, [pc, #56]	; (80041fc <HAL_GPIO_Init+0x2e8>)
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	3301      	adds	r3, #1
 80041ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	40da      	lsrs	r2, r3
 80041d4:	1e13      	subs	r3, r2, #0
 80041d6:	d000      	beq.n	80041da <HAL_GPIO_Init+0x2c6>
 80041d8:	e6a8      	b.n	8003f2c <HAL_GPIO_Init+0x18>
  }
}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	46bd      	mov	sp, r7
 80041e0:	b006      	add	sp, #24
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40021000 	.word	0x40021000
 80041e8:	40010000 	.word	0x40010000
 80041ec:	50000400 	.word	0x50000400
 80041f0:	50000800 	.word	0x50000800
 80041f4:	50000c00 	.word	0x50000c00
 80041f8:	50001c00 	.word	0x50001c00
 80041fc:	40010400 	.word	0x40010400

08004200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b082      	sub	sp, #8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d101      	bne.n	8004212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e082      	b.n	8004318 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2241      	movs	r2, #65	; 0x41
 8004216:	5c9b      	ldrb	r3, [r3, r2]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d107      	bne.n	800422e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2240      	movs	r2, #64	; 0x40
 8004222:	2100      	movs	r1, #0
 8004224:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	0018      	movs	r0, r3
 800422a:	f7fe ff37 	bl	800309c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2241      	movs	r2, #65	; 0x41
 8004232:	2124      	movs	r1, #36	; 0x24
 8004234:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2101      	movs	r1, #1
 8004242:	438a      	bics	r2, r1
 8004244:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4934      	ldr	r1, [pc, #208]	; (8004320 <HAL_I2C_Init+0x120>)
 8004250:	400a      	ands	r2, r1
 8004252:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4931      	ldr	r1, [pc, #196]	; (8004324 <HAL_I2C_Init+0x124>)
 8004260:	400a      	ands	r2, r1
 8004262:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d108      	bne.n	800427e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	0209      	lsls	r1, r1, #8
 8004278:	430a      	orrs	r2, r1
 800427a:	609a      	str	r2, [r3, #8]
 800427c:	e007      	b.n	800428e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2184      	movs	r1, #132	; 0x84
 8004288:	0209      	lsls	r1, r1, #8
 800428a:	430a      	orrs	r2, r1
 800428c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d104      	bne.n	80042a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685a      	ldr	r2, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	491f      	ldr	r1, [pc, #124]	; (8004328 <HAL_I2C_Init+0x128>)
 80042ac:	430a      	orrs	r2, r1
 80042ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68da      	ldr	r2, [r3, #12]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	491a      	ldr	r1, [pc, #104]	; (8004324 <HAL_I2C_Init+0x124>)
 80042bc:	400a      	ands	r2, r1
 80042be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	431a      	orrs	r2, r3
 80042ca:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	69d9      	ldr	r1, [r3, #28]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a1a      	ldr	r2, [r3, #32]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2101      	movs	r1, #1
 80042f6:	430a      	orrs	r2, r1
 80042f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2241      	movs	r2, #65	; 0x41
 8004304:	2120      	movs	r1, #32
 8004306:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2242      	movs	r2, #66	; 0x42
 8004312:	2100      	movs	r1, #0
 8004314:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	0018      	movs	r0, r3
 800431a:	46bd      	mov	sp, r7
 800431c:	b002      	add	sp, #8
 800431e:	bd80      	pop	{r7, pc}
 8004320:	f0ffffff 	.word	0xf0ffffff
 8004324:	ffff7fff 	.word	0xffff7fff
 8004328:	02008000 	.word	0x02008000

0800432c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800432c:	b590      	push	{r4, r7, lr}
 800432e:	b089      	sub	sp, #36	; 0x24
 8004330:	af02      	add	r7, sp, #8
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	000c      	movs	r4, r1
 8004336:	0010      	movs	r0, r2
 8004338:	0019      	movs	r1, r3
 800433a:	230a      	movs	r3, #10
 800433c:	18fb      	adds	r3, r7, r3
 800433e:	1c22      	adds	r2, r4, #0
 8004340:	801a      	strh	r2, [r3, #0]
 8004342:	2308      	movs	r3, #8
 8004344:	18fb      	adds	r3, r7, r3
 8004346:	1c02      	adds	r2, r0, #0
 8004348:	801a      	strh	r2, [r3, #0]
 800434a:	1dbb      	adds	r3, r7, #6
 800434c:	1c0a      	adds	r2, r1, #0
 800434e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2241      	movs	r2, #65	; 0x41
 8004354:	5c9b      	ldrb	r3, [r3, r2]
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b20      	cmp	r3, #32
 800435a:	d000      	beq.n	800435e <HAL_I2C_Mem_Write+0x32>
 800435c:	e10c      	b.n	8004578 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	2b00      	cmp	r3, #0
 8004362:	d004      	beq.n	800436e <HAL_I2C_Mem_Write+0x42>
 8004364:	232c      	movs	r3, #44	; 0x2c
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2280      	movs	r2, #128	; 0x80
 8004372:	0092      	lsls	r2, r2, #2
 8004374:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0ff      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2240      	movs	r2, #64	; 0x40
 800437e:	5c9b      	ldrb	r3, [r3, r2]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d101      	bne.n	8004388 <HAL_I2C_Mem_Write+0x5c>
 8004384:	2302      	movs	r3, #2
 8004386:	e0f8      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2240      	movs	r2, #64	; 0x40
 800438c:	2101      	movs	r1, #1
 800438e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004390:	f7ff fcde 	bl	8003d50 <HAL_GetTick>
 8004394:	0003      	movs	r3, r0
 8004396:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004398:	2380      	movs	r3, #128	; 0x80
 800439a:	0219      	lsls	r1, r3, #8
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	9300      	str	r3, [sp, #0]
 80043a2:	2319      	movs	r3, #25
 80043a4:	2201      	movs	r2, #1
 80043a6:	f000 fb0b 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 80043aa:	1e03      	subs	r3, r0, #0
 80043ac:	d001      	beq.n	80043b2 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e0e3      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2241      	movs	r2, #65	; 0x41
 80043b6:	2121      	movs	r1, #33	; 0x21
 80043b8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2242      	movs	r2, #66	; 0x42
 80043be:	2140      	movs	r1, #64	; 0x40
 80043c0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	222c      	movs	r2, #44	; 0x2c
 80043d2:	18ba      	adds	r2, r7, r2
 80043d4:	8812      	ldrh	r2, [r2, #0]
 80043d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043de:	1dbb      	adds	r3, r7, #6
 80043e0:	881c      	ldrh	r4, [r3, #0]
 80043e2:	2308      	movs	r3, #8
 80043e4:	18fb      	adds	r3, r7, r3
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	230a      	movs	r3, #10
 80043ea:	18fb      	adds	r3, r7, r3
 80043ec:	8819      	ldrh	r1, [r3, #0]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	0023      	movs	r3, r4
 80043fa:	f000 f9f9 	bl	80047f0 <I2C_RequestMemoryWrite>
 80043fe:	1e03      	subs	r3, r0, #0
 8004400:	d005      	beq.n	800440e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	2100      	movs	r1, #0
 8004408:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e0b5      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004412:	b29b      	uxth	r3, r3
 8004414:	2bff      	cmp	r3, #255	; 0xff
 8004416:	d911      	bls.n	800443c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	22ff      	movs	r2, #255	; 0xff
 800441c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	b2da      	uxtb	r2, r3
 8004424:	2380      	movs	r3, #128	; 0x80
 8004426:	045c      	lsls	r4, r3, #17
 8004428:	230a      	movs	r3, #10
 800442a:	18fb      	adds	r3, r7, r3
 800442c:	8819      	ldrh	r1, [r3, #0]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	2300      	movs	r3, #0
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	0023      	movs	r3, r4
 8004436:	f000 fbf7 	bl	8004c28 <I2C_TransferConfig>
 800443a:	e012      	b.n	8004462 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	b2da      	uxtb	r2, r3
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	049c      	lsls	r4, r3, #18
 8004450:	230a      	movs	r3, #10
 8004452:	18fb      	adds	r3, r7, r3
 8004454:	8819      	ldrh	r1, [r3, #0]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	2300      	movs	r3, #0
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	0023      	movs	r3, r4
 800445e:	f000 fbe3 	bl	8004c28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	0018      	movs	r0, r3
 800446a:	f000 fae8 	bl	8004a3e <I2C_WaitOnTXISFlagUntilTimeout>
 800446e:	1e03      	subs	r3, r0, #0
 8004470:	d001      	beq.n	8004476 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e081      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	781a      	ldrb	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	1c5a      	adds	r2, r3, #1
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b01      	subs	r3, #1
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449e:	3b01      	subs	r3, #1
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d03a      	beq.n	8004526 <HAL_I2C_Mem_Write+0x1fa>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d136      	bne.n	8004526 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	0013      	movs	r3, r2
 80044c2:	2200      	movs	r2, #0
 80044c4:	2180      	movs	r1, #128	; 0x80
 80044c6:	f000 fa7b 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 80044ca:	1e03      	subs	r3, r0, #0
 80044cc:	d001      	beq.n	80044d2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e053      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2bff      	cmp	r3, #255	; 0xff
 80044da:	d911      	bls.n	8004500 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	22ff      	movs	r2, #255	; 0xff
 80044e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	2380      	movs	r3, #128	; 0x80
 80044ea:	045c      	lsls	r4, r3, #17
 80044ec:	230a      	movs	r3, #10
 80044ee:	18fb      	adds	r3, r7, r3
 80044f0:	8819      	ldrh	r1, [r3, #0]
 80044f2:	68f8      	ldr	r0, [r7, #12]
 80044f4:	2300      	movs	r3, #0
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	0023      	movs	r3, r4
 80044fa:	f000 fb95 	bl	8004c28 <I2C_TransferConfig>
 80044fe:	e012      	b.n	8004526 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29a      	uxth	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800450e:	b2da      	uxtb	r2, r3
 8004510:	2380      	movs	r3, #128	; 0x80
 8004512:	049c      	lsls	r4, r3, #18
 8004514:	230a      	movs	r3, #10
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	8819      	ldrh	r1, [r3, #0]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	2300      	movs	r3, #0
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	0023      	movs	r3, r4
 8004522:	f000 fb81 	bl	8004c28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	d198      	bne.n	8004462 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fac0 	bl	8004abc <I2C_WaitOnSTOPFlagUntilTimeout>
 800453c:	1e03      	subs	r3, r0, #0
 800453e:	d001      	beq.n	8004544 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e01a      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2220      	movs	r2, #32
 800454a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	490b      	ldr	r1, [pc, #44]	; (8004584 <HAL_I2C_Mem_Write+0x258>)
 8004558:	400a      	ands	r2, r1
 800455a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2241      	movs	r2, #65	; 0x41
 8004560:	2120      	movs	r1, #32
 8004562:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2242      	movs	r2, #66	; 0x42
 8004568:	2100      	movs	r1, #0
 800456a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2240      	movs	r2, #64	; 0x40
 8004570:	2100      	movs	r1, #0
 8004572:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	e000      	b.n	800457a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004578:	2302      	movs	r3, #2
  }
}
 800457a:	0018      	movs	r0, r3
 800457c:	46bd      	mov	sp, r7
 800457e:	b007      	add	sp, #28
 8004580:	bd90      	pop	{r4, r7, pc}
 8004582:	46c0      	nop			; (mov r8, r8)
 8004584:	fe00e800 	.word	0xfe00e800

08004588 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004588:	b590      	push	{r4, r7, lr}
 800458a:	b089      	sub	sp, #36	; 0x24
 800458c:	af02      	add	r7, sp, #8
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	000c      	movs	r4, r1
 8004592:	0010      	movs	r0, r2
 8004594:	0019      	movs	r1, r3
 8004596:	230a      	movs	r3, #10
 8004598:	18fb      	adds	r3, r7, r3
 800459a:	1c22      	adds	r2, r4, #0
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	2308      	movs	r3, #8
 80045a0:	18fb      	adds	r3, r7, r3
 80045a2:	1c02      	adds	r2, r0, #0
 80045a4:	801a      	strh	r2, [r3, #0]
 80045a6:	1dbb      	adds	r3, r7, #6
 80045a8:	1c0a      	adds	r2, r1, #0
 80045aa:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2241      	movs	r2, #65	; 0x41
 80045b0:	5c9b      	ldrb	r3, [r3, r2]
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	2b20      	cmp	r3, #32
 80045b6:	d000      	beq.n	80045ba <HAL_I2C_Mem_Read+0x32>
 80045b8:	e110      	b.n	80047dc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d004      	beq.n	80045ca <HAL_I2C_Mem_Read+0x42>
 80045c0:	232c      	movs	r3, #44	; 0x2c
 80045c2:	18fb      	adds	r3, r7, r3
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d105      	bne.n	80045d6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2280      	movs	r2, #128	; 0x80
 80045ce:	0092      	lsls	r2, r2, #2
 80045d0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e103      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2240      	movs	r2, #64	; 0x40
 80045da:	5c9b      	ldrb	r3, [r3, r2]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d101      	bne.n	80045e4 <HAL_I2C_Mem_Read+0x5c>
 80045e0:	2302      	movs	r3, #2
 80045e2:	e0fc      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2240      	movs	r2, #64	; 0x40
 80045e8:	2101      	movs	r1, #1
 80045ea:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045ec:	f7ff fbb0 	bl	8003d50 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045f4:	2380      	movs	r3, #128	; 0x80
 80045f6:	0219      	lsls	r1, r3, #8
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	2319      	movs	r3, #25
 8004600:	2201      	movs	r2, #1
 8004602:	f000 f9dd 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 8004606:	1e03      	subs	r3, r0, #0
 8004608:	d001      	beq.n	800460e <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e0e7      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2241      	movs	r2, #65	; 0x41
 8004612:	2122      	movs	r1, #34	; 0x22
 8004614:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2242      	movs	r2, #66	; 0x42
 800461a:	2140      	movs	r1, #64	; 0x40
 800461c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004628:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	222c      	movs	r2, #44	; 0x2c
 800462e:	18ba      	adds	r2, r7, r2
 8004630:	8812      	ldrh	r2, [r2, #0]
 8004632:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800463a:	1dbb      	adds	r3, r7, #6
 800463c:	881c      	ldrh	r4, [r3, #0]
 800463e:	2308      	movs	r3, #8
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	881a      	ldrh	r2, [r3, #0]
 8004644:	230a      	movs	r3, #10
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	8819      	ldrh	r1, [r3, #0]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	9301      	str	r3, [sp, #4]
 8004650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	0023      	movs	r3, r4
 8004656:	f000 f92f 	bl	80048b8 <I2C_RequestMemoryRead>
 800465a:	1e03      	subs	r3, r0, #0
 800465c:	d005      	beq.n	800466a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2240      	movs	r2, #64	; 0x40
 8004662:	2100      	movs	r1, #0
 8004664:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e0b9      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	2bff      	cmp	r3, #255	; 0xff
 8004672:	d911      	bls.n	8004698 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	22ff      	movs	r2, #255	; 0xff
 8004678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467e:	b2da      	uxtb	r2, r3
 8004680:	2380      	movs	r3, #128	; 0x80
 8004682:	045c      	lsls	r4, r3, #17
 8004684:	230a      	movs	r3, #10
 8004686:	18fb      	adds	r3, r7, r3
 8004688:	8819      	ldrh	r1, [r3, #0]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	4b56      	ldr	r3, [pc, #344]	; (80047e8 <HAL_I2C_Mem_Read+0x260>)
 800468e:	9300      	str	r3, [sp, #0]
 8004690:	0023      	movs	r3, r4
 8004692:	f000 fac9 	bl	8004c28 <I2C_TransferConfig>
 8004696:	e012      	b.n	80046be <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469c:	b29a      	uxth	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a6:	b2da      	uxtb	r2, r3
 80046a8:	2380      	movs	r3, #128	; 0x80
 80046aa:	049c      	lsls	r4, r3, #18
 80046ac:	230a      	movs	r3, #10
 80046ae:	18fb      	adds	r3, r7, r3
 80046b0:	8819      	ldrh	r1, [r3, #0]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	4b4c      	ldr	r3, [pc, #304]	; (80047e8 <HAL_I2C_Mem_Read+0x260>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	0023      	movs	r3, r4
 80046ba:	f000 fab5 	bl	8004c28 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80046be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	9300      	str	r3, [sp, #0]
 80046c6:	0013      	movs	r3, r2
 80046c8:	2200      	movs	r2, #0
 80046ca:	2104      	movs	r1, #4
 80046cc:	f000 f978 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 80046d0:	1e03      	subs	r3, r0, #0
 80046d2:	d001      	beq.n	80046d8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e082      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d03a      	beq.n	800478a <HAL_I2C_Mem_Read+0x202>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d136      	bne.n	800478a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800471c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	0013      	movs	r3, r2
 8004726:	2200      	movs	r2, #0
 8004728:	2180      	movs	r1, #128	; 0x80
 800472a:	f000 f949 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 800472e:	1e03      	subs	r3, r0, #0
 8004730:	d001      	beq.n	8004736 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e053      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800473a:	b29b      	uxth	r3, r3
 800473c:	2bff      	cmp	r3, #255	; 0xff
 800473e:	d911      	bls.n	8004764 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	22ff      	movs	r2, #255	; 0xff
 8004744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	b2da      	uxtb	r2, r3
 800474c:	2380      	movs	r3, #128	; 0x80
 800474e:	045c      	lsls	r4, r3, #17
 8004750:	230a      	movs	r3, #10
 8004752:	18fb      	adds	r3, r7, r3
 8004754:	8819      	ldrh	r1, [r3, #0]
 8004756:	68f8      	ldr	r0, [r7, #12]
 8004758:	2300      	movs	r3, #0
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	0023      	movs	r3, r4
 800475e:	f000 fa63 	bl	8004c28 <I2C_TransferConfig>
 8004762:	e012      	b.n	800478a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004768:	b29a      	uxth	r2, r3
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004772:	b2da      	uxtb	r2, r3
 8004774:	2380      	movs	r3, #128	; 0x80
 8004776:	049c      	lsls	r4, r3, #18
 8004778:	230a      	movs	r3, #10
 800477a:	18fb      	adds	r3, r7, r3
 800477c:	8819      	ldrh	r1, [r3, #0]
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	2300      	movs	r3, #0
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	0023      	movs	r3, r4
 8004786:	f000 fa4f 	bl	8004c28 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29b      	uxth	r3, r3
 8004790:	2b00      	cmp	r3, #0
 8004792:	d194      	bne.n	80046be <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	0018      	movs	r0, r3
 800479c:	f000 f98e 	bl	8004abc <I2C_WaitOnSTOPFlagUntilTimeout>
 80047a0:	1e03      	subs	r3, r0, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e01a      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2220      	movs	r2, #32
 80047ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	490c      	ldr	r1, [pc, #48]	; (80047ec <HAL_I2C_Mem_Read+0x264>)
 80047bc:	400a      	ands	r2, r1
 80047be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2241      	movs	r2, #65	; 0x41
 80047c4:	2120      	movs	r1, #32
 80047c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2242      	movs	r2, #66	; 0x42
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	0018      	movs	r0, r3
 80047e0:	46bd      	mov	sp, r7
 80047e2:	b007      	add	sp, #28
 80047e4:	bd90      	pop	{r4, r7, pc}
 80047e6:	46c0      	nop			; (mov r8, r8)
 80047e8:	80002400 	.word	0x80002400
 80047ec:	fe00e800 	.word	0xfe00e800

080047f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80047f0:	b5b0      	push	{r4, r5, r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af02      	add	r7, sp, #8
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	000c      	movs	r4, r1
 80047fa:	0010      	movs	r0, r2
 80047fc:	0019      	movs	r1, r3
 80047fe:	250a      	movs	r5, #10
 8004800:	197b      	adds	r3, r7, r5
 8004802:	1c22      	adds	r2, r4, #0
 8004804:	801a      	strh	r2, [r3, #0]
 8004806:	2308      	movs	r3, #8
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	1c02      	adds	r2, r0, #0
 800480c:	801a      	strh	r2, [r3, #0]
 800480e:	1dbb      	adds	r3, r7, #6
 8004810:	1c0a      	adds	r2, r1, #0
 8004812:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004814:	1dbb      	adds	r3, r7, #6
 8004816:	881b      	ldrh	r3, [r3, #0]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	2380      	movs	r3, #128	; 0x80
 800481c:	045c      	lsls	r4, r3, #17
 800481e:	197b      	adds	r3, r7, r5
 8004820:	8819      	ldrh	r1, [r3, #0]
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	4b23      	ldr	r3, [pc, #140]	; (80048b4 <I2C_RequestMemoryWrite+0xc4>)
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	0023      	movs	r3, r4
 800482a:	f000 f9fd 	bl	8004c28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004830:	6a39      	ldr	r1, [r7, #32]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	0018      	movs	r0, r3
 8004836:	f000 f902 	bl	8004a3e <I2C_WaitOnTXISFlagUntilTimeout>
 800483a:	1e03      	subs	r3, r0, #0
 800483c:	d001      	beq.n	8004842 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e033      	b.n	80048aa <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004842:	1dbb      	adds	r3, r7, #6
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d107      	bne.n	800485a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800484a:	2308      	movs	r3, #8
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	881b      	ldrh	r3, [r3, #0]
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	629a      	str	r2, [r3, #40]	; 0x28
 8004858:	e019      	b.n	800488e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800485a:	2308      	movs	r3, #8
 800485c:	18fb      	adds	r3, r7, r3
 800485e:	881b      	ldrh	r3, [r3, #0]
 8004860:	0a1b      	lsrs	r3, r3, #8
 8004862:	b29b      	uxth	r3, r3
 8004864:	b2da      	uxtb	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800486c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800486e:	6a39      	ldr	r1, [r7, #32]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	0018      	movs	r0, r3
 8004874:	f000 f8e3 	bl	8004a3e <I2C_WaitOnTXISFlagUntilTimeout>
 8004878:	1e03      	subs	r3, r0, #0
 800487a:	d001      	beq.n	8004880 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e014      	b.n	80048aa <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004880:	2308      	movs	r3, #8
 8004882:	18fb      	adds	r3, r7, r3
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b2da      	uxtb	r2, r3
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800488e:	6a3a      	ldr	r2, [r7, #32]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	9300      	str	r3, [sp, #0]
 8004896:	0013      	movs	r3, r2
 8004898:	2200      	movs	r2, #0
 800489a:	2180      	movs	r1, #128	; 0x80
 800489c:	f000 f890 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 80048a0:	1e03      	subs	r3, r0, #0
 80048a2:	d001      	beq.n	80048a8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e000      	b.n	80048aa <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	0018      	movs	r0, r3
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b004      	add	sp, #16
 80048b0:	bdb0      	pop	{r4, r5, r7, pc}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	80002000 	.word	0x80002000

080048b8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80048b8:	b5b0      	push	{r4, r5, r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af02      	add	r7, sp, #8
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	000c      	movs	r4, r1
 80048c2:	0010      	movs	r0, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	250a      	movs	r5, #10
 80048c8:	197b      	adds	r3, r7, r5
 80048ca:	1c22      	adds	r2, r4, #0
 80048cc:	801a      	strh	r2, [r3, #0]
 80048ce:	2308      	movs	r3, #8
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	1c02      	adds	r2, r0, #0
 80048d4:	801a      	strh	r2, [r3, #0]
 80048d6:	1dbb      	adds	r3, r7, #6
 80048d8:	1c0a      	adds	r2, r1, #0
 80048da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	b2da      	uxtb	r2, r3
 80048e2:	197b      	adds	r3, r7, r5
 80048e4:	8819      	ldrh	r1, [r3, #0]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	4b23      	ldr	r3, [pc, #140]	; (8004978 <I2C_RequestMemoryRead+0xc0>)
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	2300      	movs	r3, #0
 80048ee:	f000 f99b 	bl	8004c28 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	6a39      	ldr	r1, [r7, #32]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	0018      	movs	r0, r3
 80048fa:	f000 f8a0 	bl	8004a3e <I2C_WaitOnTXISFlagUntilTimeout>
 80048fe:	1e03      	subs	r3, r0, #0
 8004900:	d001      	beq.n	8004906 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e033      	b.n	800496e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004906:	1dbb      	adds	r3, r7, #6
 8004908:	881b      	ldrh	r3, [r3, #0]
 800490a:	2b01      	cmp	r3, #1
 800490c:	d107      	bne.n	800491e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800490e:	2308      	movs	r3, #8
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	629a      	str	r2, [r3, #40]	; 0x28
 800491c:	e019      	b.n	8004952 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800491e:	2308      	movs	r3, #8
 8004920:	18fb      	adds	r3, r7, r3
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	0a1b      	lsrs	r3, r3, #8
 8004926:	b29b      	uxth	r3, r3
 8004928:	b2da      	uxtb	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004932:	6a39      	ldr	r1, [r7, #32]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	0018      	movs	r0, r3
 8004938:	f000 f881 	bl	8004a3e <I2C_WaitOnTXISFlagUntilTimeout>
 800493c:	1e03      	subs	r3, r0, #0
 800493e:	d001      	beq.n	8004944 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e014      	b.n	800496e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004944:	2308      	movs	r3, #8
 8004946:	18fb      	adds	r3, r7, r3
 8004948:	881b      	ldrh	r3, [r3, #0]
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004952:	6a3a      	ldr	r2, [r7, #32]
 8004954:	68f8      	ldr	r0, [r7, #12]
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	0013      	movs	r3, r2
 800495c:	2200      	movs	r2, #0
 800495e:	2140      	movs	r1, #64	; 0x40
 8004960:	f000 f82e 	bl	80049c0 <I2C_WaitOnFlagUntilTimeout>
 8004964:	1e03      	subs	r3, r0, #0
 8004966:	d001      	beq.n	800496c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	0018      	movs	r0, r3
 8004970:	46bd      	mov	sp, r7
 8004972:	b004      	add	sp, #16
 8004974:	bdb0      	pop	{r4, r5, r7, pc}
 8004976:	46c0      	nop			; (mov r8, r8)
 8004978:	80002000 	.word	0x80002000

0800497c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	2202      	movs	r2, #2
 800498c:	4013      	ands	r3, r2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d103      	bne.n	800499a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2200      	movs	r2, #0
 8004998:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	2201      	movs	r2, #1
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d007      	beq.n	80049b8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	699a      	ldr	r2, [r3, #24]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2101      	movs	r1, #1
 80049b4:	430a      	orrs	r2, r1
 80049b6:	619a      	str	r2, [r3, #24]
  }
}
 80049b8:	46c0      	nop			; (mov r8, r8)
 80049ba:	46bd      	mov	sp, r7
 80049bc:	b002      	add	sp, #8
 80049be:	bd80      	pop	{r7, pc}

080049c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b084      	sub	sp, #16
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	1dfb      	adds	r3, r7, #7
 80049ce:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d0:	e021      	b.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	d01e      	beq.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d8:	f7ff f9ba 	bl	8003d50 <HAL_GetTick>
 80049dc:	0002      	movs	r2, r0
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <I2C_WaitOnFlagUntilTimeout+0x2e>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d113      	bne.n	8004a16 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	2220      	movs	r2, #32
 80049f4:	431a      	orrs	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2241      	movs	r2, #65	; 0x41
 80049fe:	2120      	movs	r1, #32
 8004a00:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2242      	movs	r2, #66	; 0x42
 8004a06:	2100      	movs	r1, #0
 8004a08:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2240      	movs	r2, #64	; 0x40
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e00f      	b.n	8004a36 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	425a      	negs	r2, r3
 8004a26:	4153      	adcs	r3, r2
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	001a      	movs	r2, r3
 8004a2c:	1dfb      	adds	r3, r7, #7
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d0ce      	beq.n	80049d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bd80      	pop	{r7, pc}

08004a3e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a3e:	b580      	push	{r7, lr}
 8004a40:	b084      	sub	sp, #16
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	60f8      	str	r0, [r7, #12]
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a4a:	e02b      	b.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	0018      	movs	r0, r3
 8004a54:	f000 f86e 	bl	8004b34 <I2C_IsAcknowledgeFailed>
 8004a58:	1e03      	subs	r3, r0, #0
 8004a5a:	d001      	beq.n	8004a60 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e029      	b.n	8004ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	3301      	adds	r3, #1
 8004a64:	d01e      	beq.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a66:	f7ff f973 	bl	8003d50 <HAL_GetTick>
 8004a6a:	0002      	movs	r2, r0
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d302      	bcc.n	8004a7c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d113      	bne.n	8004aa4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a80:	2220      	movs	r2, #32
 8004a82:	431a      	orrs	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2241      	movs	r2, #65	; 0x41
 8004a8c:	2120      	movs	r1, #32
 8004a8e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2242      	movs	r2, #66	; 0x42
 8004a94:	2100      	movs	r1, #0
 8004a96:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2240      	movs	r2, #64	; 0x40
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e007      	b.n	8004ab4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d1cc      	bne.n	8004a4c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	b004      	add	sp, #16
 8004aba:	bd80      	pop	{r7, pc}

08004abc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ac8:	e028      	b.n	8004b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	0018      	movs	r0, r3
 8004ad2:	f000 f82f 	bl	8004b34 <I2C_IsAcknowledgeFailed>
 8004ad6:	1e03      	subs	r3, r0, #0
 8004ad8:	d001      	beq.n	8004ade <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e026      	b.n	8004b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7ff f937 	bl	8003d50 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d113      	bne.n	8004b1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af8:	2220      	movs	r2, #32
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2241      	movs	r2, #65	; 0x41
 8004b04:	2120      	movs	r1, #32
 8004b06:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2242      	movs	r2, #66	; 0x42
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	2100      	movs	r1, #0
 8004b16:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e007      	b.n	8004b2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	2220      	movs	r2, #32
 8004b24:	4013      	ands	r3, r2
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d1cf      	bne.n	8004aca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	b004      	add	sp, #16
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	2210      	movs	r2, #16
 8004b48:	4013      	ands	r3, r2
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d164      	bne.n	8004c18 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	049b      	lsls	r3, r3, #18
 8004b58:	401a      	ands	r2, r3
 8004b5a:	2380      	movs	r3, #128	; 0x80
 8004b5c:	049b      	lsls	r3, r3, #18
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d02b      	beq.n	8004bba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2180      	movs	r1, #128	; 0x80
 8004b6e:	01c9      	lsls	r1, r1, #7
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b74:	e021      	b.n	8004bba <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	d01e      	beq.n	8004bba <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b7c:	f7ff f8e8 	bl	8003d50 <HAL_GetTick>
 8004b80:	0002      	movs	r2, r0
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <I2C_IsAcknowledgeFailed+0x5e>
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d113      	bne.n	8004bba <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b96:	2220      	movs	r2, #32
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2241      	movs	r2, #65	; 0x41
 8004ba2:	2120      	movs	r1, #32
 8004ba4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2242      	movs	r2, #66	; 0x42
 8004baa:	2100      	movs	r1, #0
 8004bac:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2240      	movs	r2, #64	; 0x40
 8004bb2:	2100      	movs	r1, #0
 8004bb4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e02f      	b.n	8004c1a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d1d6      	bne.n	8004b76 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2210      	movs	r2, #16
 8004bce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f7ff fece 	bl	800497c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	490e      	ldr	r1, [pc, #56]	; (8004c24 <I2C_IsAcknowledgeFailed+0xf0>)
 8004bec:	400a      	ands	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	431a      	orrs	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2241      	movs	r2, #65	; 0x41
 8004c00:	2120      	movs	r1, #32
 8004c02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2242      	movs	r2, #66	; 0x42
 8004c08:	2100      	movs	r1, #0
 8004c0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2240      	movs	r2, #64	; 0x40
 8004c10:	2100      	movs	r1, #0
 8004c12:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004c18:	2300      	movs	r3, #0
}
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b004      	add	sp, #16
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	fe00e800 	.word	0xfe00e800

08004c28 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	0008      	movs	r0, r1
 8004c32:	0011      	movs	r1, r2
 8004c34:	607b      	str	r3, [r7, #4]
 8004c36:	240a      	movs	r4, #10
 8004c38:	193b      	adds	r3, r7, r4
 8004c3a:	1c02      	adds	r2, r0, #0
 8004c3c:	801a      	strh	r2, [r3, #0]
 8004c3e:	2009      	movs	r0, #9
 8004c40:	183b      	adds	r3, r7, r0
 8004c42:	1c0a      	adds	r2, r1, #0
 8004c44:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	0d51      	lsrs	r1, r2, #21
 8004c50:	2280      	movs	r2, #128	; 0x80
 8004c52:	00d2      	lsls	r2, r2, #3
 8004c54:	400a      	ands	r2, r1
 8004c56:	490e      	ldr	r1, [pc, #56]	; (8004c90 <I2C_TransferConfig+0x68>)
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	43d2      	mvns	r2, r2
 8004c5c:	401a      	ands	r2, r3
 8004c5e:	0011      	movs	r1, r2
 8004c60:	193b      	adds	r3, r7, r4
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	059b      	lsls	r3, r3, #22
 8004c66:	0d9a      	lsrs	r2, r3, #22
 8004c68:	183b      	adds	r3, r7, r0
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	0418      	lsls	r0, r3, #16
 8004c6e:	23ff      	movs	r3, #255	; 0xff
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	4003      	ands	r3, r0
 8004c74:	431a      	orrs	r2, r3
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	431a      	orrs	r2, r3
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	430a      	orrs	r2, r1
 8004c84:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	b005      	add	sp, #20
 8004c8c:	bd90      	pop	{r4, r7, pc}
 8004c8e:	46c0      	nop			; (mov r8, r8)
 8004c90:	03ff63ff 	.word	0x03ff63ff

08004c94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2241      	movs	r2, #65	; 0x41
 8004ca2:	5c9b      	ldrb	r3, [r3, r2]
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d138      	bne.n	8004d1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2240      	movs	r2, #64	; 0x40
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d101      	bne.n	8004cb8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	e032      	b.n	8004d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2240      	movs	r2, #64	; 0x40
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2241      	movs	r2, #65	; 0x41
 8004cc4:	2124      	movs	r1, #36	; 0x24
 8004cc6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	438a      	bics	r2, r1
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4911      	ldr	r1, [pc, #68]	; (8004d28 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004ce4:	400a      	ands	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	6819      	ldr	r1, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2101      	movs	r1, #1
 8004d04:	430a      	orrs	r2, r1
 8004d06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2241      	movs	r2, #65	; 0x41
 8004d0c:	2120      	movs	r1, #32
 8004d0e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	2100      	movs	r1, #0
 8004d16:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	0018      	movs	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b002      	add	sp, #8
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	46c0      	nop			; (mov r8, r8)
 8004d28:	ffffefff 	.word	0xffffefff

08004d2c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2241      	movs	r2, #65	; 0x41
 8004d3a:	5c9b      	ldrb	r3, [r3, r2]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b20      	cmp	r3, #32
 8004d40:	d139      	bne.n	8004db6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2240      	movs	r2, #64	; 0x40
 8004d46:	5c9b      	ldrb	r3, [r3, r2]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d101      	bne.n	8004d50 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	e033      	b.n	8004db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2240      	movs	r2, #64	; 0x40
 8004d54:	2101      	movs	r1, #1
 8004d56:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2241      	movs	r2, #65	; 0x41
 8004d5c:	2124      	movs	r1, #36	; 0x24
 8004d5e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	438a      	bics	r2, r1
 8004d6e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	4a11      	ldr	r2, [pc, #68]	; (8004dc0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	021b      	lsls	r3, r3, #8
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2101      	movs	r1, #1
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2241      	movs	r2, #65	; 0x41
 8004da6:	2120      	movs	r1, #32
 8004da8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2240      	movs	r2, #64	; 0x40
 8004dae:	2100      	movs	r1, #0
 8004db0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e000      	b.n	8004db8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004db6:	2302      	movs	r3, #2
  }
}
 8004db8:	0018      	movs	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	b004      	add	sp, #16
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	fffff0ff 	.word	0xfffff0ff

08004dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc4:	b5b0      	push	{r4, r5, r7, lr}
 8004dc6:	b08a      	sub	sp, #40	; 0x28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d102      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	f000 fbaf 	bl	8005536 <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dd8:	4bcf      	ldr	r3, [pc, #828]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	220c      	movs	r2, #12
 8004dde:	4013      	ands	r3, r2
 8004de0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de2:	4bcd      	ldr	r3, [pc, #820]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	2380      	movs	r3, #128	; 0x80
 8004de8:	025b      	lsls	r3, r3, #9
 8004dea:	4013      	ands	r3, r2
 8004dec:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	4013      	ands	r3, r2
 8004df6:	d100      	bne.n	8004dfa <HAL_RCC_OscConfig+0x36>
 8004df8:	e07e      	b.n	8004ef8 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004dfa:	6a3b      	ldr	r3, [r7, #32]
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	d007      	beq.n	8004e10 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e00:	6a3b      	ldr	r3, [r7, #32]
 8004e02:	2b0c      	cmp	r3, #12
 8004e04:	d112      	bne.n	8004e2c <HAL_RCC_OscConfig+0x68>
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	2380      	movs	r3, #128	; 0x80
 8004e0a:	025b      	lsls	r3, r3, #9
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d10d      	bne.n	8004e2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e10:	4bc1      	ldr	r3, [pc, #772]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	2380      	movs	r3, #128	; 0x80
 8004e16:	029b      	lsls	r3, r3, #10
 8004e18:	4013      	ands	r3, r2
 8004e1a:	d100      	bne.n	8004e1e <HAL_RCC_OscConfig+0x5a>
 8004e1c:	e06b      	b.n	8004ef6 <HAL_RCC_OscConfig+0x132>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d167      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	f000 fb85 	bl	8005536 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	025b      	lsls	r3, r3, #9
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_OscConfig+0x84>
 8004e38:	4bb7      	ldr	r3, [pc, #732]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	4bb6      	ldr	r3, [pc, #728]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e3e:	2180      	movs	r1, #128	; 0x80
 8004e40:	0249      	lsls	r1, r1, #9
 8004e42:	430a      	orrs	r2, r1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e027      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	23a0      	movs	r3, #160	; 0xa0
 8004e4e:	02db      	lsls	r3, r3, #11
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d10e      	bne.n	8004e72 <HAL_RCC_OscConfig+0xae>
 8004e54:	4bb0      	ldr	r3, [pc, #704]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	4baf      	ldr	r3, [pc, #700]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e5a:	2180      	movs	r1, #128	; 0x80
 8004e5c:	02c9      	lsls	r1, r1, #11
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	4bad      	ldr	r3, [pc, #692]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4bac      	ldr	r3, [pc, #688]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e68:	2180      	movs	r1, #128	; 0x80
 8004e6a:	0249      	lsls	r1, r1, #9
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	601a      	str	r2, [r3, #0]
 8004e70:	e012      	b.n	8004e98 <HAL_RCC_OscConfig+0xd4>
 8004e72:	4ba9      	ldr	r3, [pc, #676]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	4ba8      	ldr	r3, [pc, #672]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e78:	49a8      	ldr	r1, [pc, #672]	; (800511c <HAL_RCC_OscConfig+0x358>)
 8004e7a:	400a      	ands	r2, r1
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	4ba6      	ldr	r3, [pc, #664]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	025b      	lsls	r3, r3, #9
 8004e86:	4013      	ands	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	4ba2      	ldr	r3, [pc, #648]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	4ba1      	ldr	r3, [pc, #644]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004e92:	49a3      	ldr	r1, [pc, #652]	; (8005120 <HAL_RCC_OscConfig+0x35c>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d015      	beq.n	8004ecc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea0:	f7fe ff56 	bl	8003d50 <HAL_GetTick>
 8004ea4:	0003      	movs	r3, r0
 8004ea6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ea8:	e009      	b.n	8004ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eaa:	f7fe ff51 	bl	8003d50 <HAL_GetTick>
 8004eae:	0002      	movs	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b64      	cmp	r3, #100	; 0x64
 8004eb6:	d902      	bls.n	8004ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	f000 fb3c 	bl	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004ebe:	4b96      	ldr	r3, [pc, #600]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCC_OscConfig+0xe6>
 8004eca:	e015      	b.n	8004ef8 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ecc:	f7fe ff40 	bl	8003d50 <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed6:	f7fe ff3b 	bl	8003d50 <HAL_GetTick>
 8004eda:	0002      	movs	r2, r0
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	2b64      	cmp	r3, #100	; 0x64
 8004ee2:	d901      	bls.n	8004ee8 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e326      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ee8:	4b8b      	ldr	r3, [pc, #556]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	2380      	movs	r3, #128	; 0x80
 8004eee:	029b      	lsls	r3, r3, #10
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d1f0      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x112>
 8004ef4:	e000      	b.n	8004ef8 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ef6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2202      	movs	r2, #2
 8004efe:	4013      	ands	r3, r2
 8004f00:	d100      	bne.n	8004f04 <HAL_RCC_OscConfig+0x140>
 8004f02:	e08b      	b.n	800501c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68db      	ldr	r3, [r3, #12]
 8004f08:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f10:	6a3b      	ldr	r3, [r7, #32]
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d13e      	bne.n	8004f94 <HAL_RCC_OscConfig+0x1d0>
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d13b      	bne.n	8004f94 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004f1c:	4b7e      	ldr	r3, [pc, #504]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2204      	movs	r2, #4
 8004f22:	4013      	ands	r3, r2
 8004f24:	d004      	beq.n	8004f30 <HAL_RCC_OscConfig+0x16c>
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e302      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f30:	4b79      	ldr	r3, [pc, #484]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4a7b      	ldr	r2, [pc, #492]	; (8005124 <HAL_RCC_OscConfig+0x360>)
 8004f36:	4013      	ands	r3, r2
 8004f38:	0019      	movs	r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	021a      	lsls	r2, r3, #8
 8004f40:	4b75      	ldr	r3, [pc, #468]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f42:	430a      	orrs	r2, r1
 8004f44:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f46:	4b74      	ldr	r3, [pc, #464]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2209      	movs	r2, #9
 8004f4c:	4393      	bics	r3, r2
 8004f4e:	0019      	movs	r1, r3
 8004f50:	4b71      	ldr	r3, [pc, #452]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	430a      	orrs	r2, r1
 8004f56:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f58:	f000 fc40 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 8004f5c:	0001      	movs	r1, r0
 8004f5e:	4b6e      	ldr	r3, [pc, #440]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	091b      	lsrs	r3, r3, #4
 8004f64:	220f      	movs	r2, #15
 8004f66:	4013      	ands	r3, r2
 8004f68:	4a6f      	ldr	r2, [pc, #444]	; (8005128 <HAL_RCC_OscConfig+0x364>)
 8004f6a:	5cd3      	ldrb	r3, [r2, r3]
 8004f6c:	000a      	movs	r2, r1
 8004f6e:	40da      	lsrs	r2, r3
 8004f70:	4b6e      	ldr	r3, [pc, #440]	; (800512c <HAL_RCC_OscConfig+0x368>)
 8004f72:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8004f74:	4b6e      	ldr	r3, [pc, #440]	; (8005130 <HAL_RCC_OscConfig+0x36c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2513      	movs	r5, #19
 8004f7a:	197c      	adds	r4, r7, r5
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	f7fe fea1 	bl	8003cc4 <HAL_InitTick>
 8004f82:	0003      	movs	r3, r0
 8004f84:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004f86:	197b      	adds	r3, r7, r5
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d046      	beq.n	800501c <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8004f8e:	197b      	adds	r3, r7, r5
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	e2d0      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d027      	beq.n	8004fea <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2209      	movs	r2, #9
 8004fa0:	4393      	bics	r3, r2
 8004fa2:	0019      	movs	r1, r3
 8004fa4:	4b5c      	ldr	r3, [pc, #368]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fac:	f7fe fed0 	bl	8003d50 <HAL_GetTick>
 8004fb0:	0003      	movs	r3, r0
 8004fb2:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb6:	f7fe fecb 	bl	8003d50 <HAL_GetTick>
 8004fba:	0002      	movs	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e2b6      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004fc8:	4b53      	ldr	r3, [pc, #332]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2204      	movs	r2, #4
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d0f1      	beq.n	8004fb6 <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b51      	ldr	r3, [pc, #324]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4a53      	ldr	r2, [pc, #332]	; (8005124 <HAL_RCC_OscConfig+0x360>)
 8004fd8:	4013      	ands	r3, r2
 8004fda:	0019      	movs	r1, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	021a      	lsls	r2, r3, #8
 8004fe2:	4b4d      	ldr	r3, [pc, #308]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
 8004fe8:	e018      	b.n	800501c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fea:	4b4b      	ldr	r3, [pc, #300]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	4b4a      	ldr	r3, [pc, #296]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8004ff0:	2101      	movs	r1, #1
 8004ff2:	438a      	bics	r2, r1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff6:	f7fe feab 	bl	8003d50 <HAL_GetTick>
 8004ffa:	0003      	movs	r3, r0
 8004ffc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005000:	f7fe fea6 	bl	8003d50 <HAL_GetTick>
 8005004:	0002      	movs	r2, r0
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e291      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005012:	4b41      	ldr	r3, [pc, #260]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2204      	movs	r2, #4
 8005018:	4013      	ands	r3, r2
 800501a:	d1f1      	bne.n	8005000 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2210      	movs	r2, #16
 8005022:	4013      	ands	r3, r2
 8005024:	d100      	bne.n	8005028 <HAL_RCC_OscConfig+0x264>
 8005026:	e0a1      	b.n	800516c <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d140      	bne.n	80050b0 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800502e:	4b3a      	ldr	r3, [pc, #232]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4013      	ands	r3, r2
 8005038:	d005      	beq.n	8005046 <HAL_RCC_OscConfig+0x282>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e277      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005046:	4b34      	ldr	r3, [pc, #208]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a3a      	ldr	r2, [pc, #232]	; (8005134 <HAL_RCC_OscConfig+0x370>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005054:	4b30      	ldr	r3, [pc, #192]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800505a:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	021b      	lsls	r3, r3, #8
 8005060:	0a19      	lsrs	r1, r3, #8
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	061a      	lsls	r2, r3, #24
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	0b5b      	lsrs	r3, r3, #13
 8005074:	3301      	adds	r3, #1
 8005076:	2280      	movs	r2, #128	; 0x80
 8005078:	0212      	lsls	r2, r2, #8
 800507a:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800507c:	4b26      	ldr	r3, [pc, #152]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	091b      	lsrs	r3, r3, #4
 8005082:	210f      	movs	r1, #15
 8005084:	400b      	ands	r3, r1
 8005086:	4928      	ldr	r1, [pc, #160]	; (8005128 <HAL_RCC_OscConfig+0x364>)
 8005088:	5ccb      	ldrb	r3, [r1, r3]
 800508a:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <HAL_RCC_OscConfig+0x368>)
 800508e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005090:	4b27      	ldr	r3, [pc, #156]	; (8005130 <HAL_RCC_OscConfig+0x36c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2513      	movs	r5, #19
 8005096:	197c      	adds	r4, r7, r5
 8005098:	0018      	movs	r0, r3
 800509a:	f7fe fe13 	bl	8003cc4 <HAL_InitTick>
 800509e:	0003      	movs	r3, r0
 80050a0:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80050a2:	197b      	adds	r3, r7, r5
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d060      	beq.n	800516c <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 80050aa:	197b      	adds	r3, r7, r5
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	e242      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	69db      	ldr	r3, [r3, #28]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d03f      	beq.n	8005138 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80050b8:	4b17      	ldr	r3, [pc, #92]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	4b16      	ldr	r3, [pc, #88]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 80050be:	2180      	movs	r1, #128	; 0x80
 80050c0:	0049      	lsls	r1, r1, #1
 80050c2:	430a      	orrs	r2, r1
 80050c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c6:	f7fe fe43 	bl	8003d50 <HAL_GetTick>
 80050ca:	0003      	movs	r3, r0
 80050cc:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050d0:	f7fe fe3e 	bl	8003d50 <HAL_GetTick>
 80050d4:	0002      	movs	r2, r0
 80050d6:	69bb      	ldr	r3, [r7, #24]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e229      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80050e2:	4b0d      	ldr	r3, [pc, #52]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4013      	ands	r3, r2
 80050ec:	d0f0      	beq.n	80050d0 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050ee:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <HAL_RCC_OscConfig+0x370>)
 80050f4:	4013      	ands	r3, r2
 80050f6:	0019      	movs	r1, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005102:	4b05      	ldr	r3, [pc, #20]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	021b      	lsls	r3, r3, #8
 8005108:	0a19      	lsrs	r1, r3, #8
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	061a      	lsls	r2, r3, #24
 8005110:	4b01      	ldr	r3, [pc, #4]	; (8005118 <HAL_RCC_OscConfig+0x354>)
 8005112:	430a      	orrs	r2, r1
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	e029      	b.n	800516c <HAL_RCC_OscConfig+0x3a8>
 8005118:	40021000 	.word	0x40021000
 800511c:	fffeffff 	.word	0xfffeffff
 8005120:	fffbffff 	.word	0xfffbffff
 8005124:	ffffe0ff 	.word	0xffffe0ff
 8005128:	08009b5c 	.word	0x08009b5c
 800512c:	20000000 	.word	0x20000000
 8005130:	20000004 	.word	0x20000004
 8005134:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005138:	4bbd      	ldr	r3, [pc, #756]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4bbc      	ldr	r3, [pc, #752]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800513e:	49bd      	ldr	r1, [pc, #756]	; (8005434 <HAL_RCC_OscConfig+0x670>)
 8005140:	400a      	ands	r2, r1
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005144:	f7fe fe04 	bl	8003d50 <HAL_GetTick>
 8005148:	0003      	movs	r3, r0
 800514a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800514c:	e008      	b.n	8005160 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800514e:	f7fe fdff 	bl	8003d50 <HAL_GetTick>
 8005152:	0002      	movs	r2, r0
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	2b02      	cmp	r3, #2
 800515a:	d901      	bls.n	8005160 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e1ea      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005160:	4bb3      	ldr	r3, [pc, #716]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	2380      	movs	r3, #128	; 0x80
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4013      	ands	r3, r2
 800516a:	d1f0      	bne.n	800514e <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2208      	movs	r2, #8
 8005172:	4013      	ands	r3, r2
 8005174:	d036      	beq.n	80051e4 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d019      	beq.n	80051b2 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4bac      	ldr	r3, [pc, #688]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005180:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005182:	4bab      	ldr	r3, [pc, #684]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005184:	2101      	movs	r1, #1
 8005186:	430a      	orrs	r2, r1
 8005188:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800518a:	f7fe fde1 	bl	8003d50 <HAL_GetTick>
 800518e:	0003      	movs	r3, r0
 8005190:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005194:	f7fe fddc 	bl	8003d50 <HAL_GetTick>
 8005198:	0002      	movs	r2, r0
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e1c7      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80051a6:	4ba2      	ldr	r3, [pc, #648]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	2202      	movs	r2, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	d0f1      	beq.n	8005194 <HAL_RCC_OscConfig+0x3d0>
 80051b0:	e018      	b.n	80051e4 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051b2:	4b9f      	ldr	r3, [pc, #636]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80051b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051b6:	4b9e      	ldr	r3, [pc, #632]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	438a      	bics	r2, r1
 80051bc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051be:	f7fe fdc7 	bl	8003d50 <HAL_GetTick>
 80051c2:	0003      	movs	r3, r0
 80051c4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051c8:	f7fe fdc2 	bl	8003d50 <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e1ad      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80051da:	4b95      	ldr	r3, [pc, #596]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80051dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051de:	2202      	movs	r2, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d1f1      	bne.n	80051c8 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2204      	movs	r2, #4
 80051ea:	4013      	ands	r3, r2
 80051ec:	d100      	bne.n	80051f0 <HAL_RCC_OscConfig+0x42c>
 80051ee:	e0ae      	b.n	800534e <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f0:	2027      	movs	r0, #39	; 0x27
 80051f2:	183b      	adds	r3, r7, r0
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f8:	4b8d      	ldr	r3, [pc, #564]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80051fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	055b      	lsls	r3, r3, #21
 8005200:	4013      	ands	r3, r2
 8005202:	d109      	bne.n	8005218 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005204:	4b8a      	ldr	r3, [pc, #552]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005206:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005208:	4b89      	ldr	r3, [pc, #548]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800520a:	2180      	movs	r1, #128	; 0x80
 800520c:	0549      	lsls	r1, r1, #21
 800520e:	430a      	orrs	r2, r1
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005212:	183b      	adds	r3, r7, r0
 8005214:	2201      	movs	r2, #1
 8005216:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005218:	4b87      	ldr	r3, [pc, #540]	; (8005438 <HAL_RCC_OscConfig+0x674>)
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	2380      	movs	r3, #128	; 0x80
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4013      	ands	r3, r2
 8005222:	d11a      	bne.n	800525a <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005224:	4b84      	ldr	r3, [pc, #528]	; (8005438 <HAL_RCC_OscConfig+0x674>)
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	4b83      	ldr	r3, [pc, #524]	; (8005438 <HAL_RCC_OscConfig+0x674>)
 800522a:	2180      	movs	r1, #128	; 0x80
 800522c:	0049      	lsls	r1, r1, #1
 800522e:	430a      	orrs	r2, r1
 8005230:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005232:	f7fe fd8d 	bl	8003d50 <HAL_GetTick>
 8005236:	0003      	movs	r3, r0
 8005238:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800523c:	f7fe fd88 	bl	8003d50 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	; 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e173      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800524e:	4b7a      	ldr	r3, [pc, #488]	; (8005438 <HAL_RCC_OscConfig+0x674>)
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	2380      	movs	r3, #128	; 0x80
 8005254:	005b      	lsls	r3, r3, #1
 8005256:	4013      	ands	r3, r2
 8005258:	d0f0      	beq.n	800523c <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	2380      	movs	r3, #128	; 0x80
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	429a      	cmp	r2, r3
 8005264:	d107      	bne.n	8005276 <HAL_RCC_OscConfig+0x4b2>
 8005266:	4b72      	ldr	r3, [pc, #456]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005268:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800526a:	4b71      	ldr	r3, [pc, #452]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800526c:	2180      	movs	r1, #128	; 0x80
 800526e:	0049      	lsls	r1, r1, #1
 8005270:	430a      	orrs	r2, r1
 8005272:	651a      	str	r2, [r3, #80]	; 0x50
 8005274:	e031      	b.n	80052da <HAL_RCC_OscConfig+0x516>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x4d4>
 800527e:	4b6c      	ldr	r3, [pc, #432]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005282:	4b6b      	ldr	r3, [pc, #428]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005284:	496b      	ldr	r1, [pc, #428]	; (8005434 <HAL_RCC_OscConfig+0x670>)
 8005286:	400a      	ands	r2, r1
 8005288:	651a      	str	r2, [r3, #80]	; 0x50
 800528a:	4b69      	ldr	r3, [pc, #420]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800528c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800528e:	4b68      	ldr	r3, [pc, #416]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005290:	496a      	ldr	r1, [pc, #424]	; (800543c <HAL_RCC_OscConfig+0x678>)
 8005292:	400a      	ands	r2, r1
 8005294:	651a      	str	r2, [r3, #80]	; 0x50
 8005296:	e020      	b.n	80052da <HAL_RCC_OscConfig+0x516>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689a      	ldr	r2, [r3, #8]
 800529c:	23a0      	movs	r3, #160	; 0xa0
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d10e      	bne.n	80052c2 <HAL_RCC_OscConfig+0x4fe>
 80052a4:	4b62      	ldr	r3, [pc, #392]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052a8:	4b61      	ldr	r3, [pc, #388]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052aa:	2180      	movs	r1, #128	; 0x80
 80052ac:	00c9      	lsls	r1, r1, #3
 80052ae:	430a      	orrs	r2, r1
 80052b0:	651a      	str	r2, [r3, #80]	; 0x50
 80052b2:	4b5f      	ldr	r3, [pc, #380]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052b6:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052b8:	2180      	movs	r1, #128	; 0x80
 80052ba:	0049      	lsls	r1, r1, #1
 80052bc:	430a      	orrs	r2, r1
 80052be:	651a      	str	r2, [r3, #80]	; 0x50
 80052c0:	e00b      	b.n	80052da <HAL_RCC_OscConfig+0x516>
 80052c2:	4b5b      	ldr	r3, [pc, #364]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052c6:	4b5a      	ldr	r3, [pc, #360]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052c8:	495a      	ldr	r1, [pc, #360]	; (8005434 <HAL_RCC_OscConfig+0x670>)
 80052ca:	400a      	ands	r2, r1
 80052cc:	651a      	str	r2, [r3, #80]	; 0x50
 80052ce:	4b58      	ldr	r3, [pc, #352]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052d2:	4b57      	ldr	r3, [pc, #348]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80052d4:	4959      	ldr	r1, [pc, #356]	; (800543c <HAL_RCC_OscConfig+0x678>)
 80052d6:	400a      	ands	r2, r1
 80052d8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d015      	beq.n	800530e <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e2:	f7fe fd35 	bl	8003d50 <HAL_GetTick>
 80052e6:	0003      	movs	r3, r0
 80052e8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80052ea:	e009      	b.n	8005300 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7fe fd30 	bl	8003d50 <HAL_GetTick>
 80052f0:	0002      	movs	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	4a52      	ldr	r2, [pc, #328]	; (8005440 <HAL_RCC_OscConfig+0x67c>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e11a      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005300:	4b4b      	ldr	r3, [pc, #300]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005304:	2380      	movs	r3, #128	; 0x80
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	4013      	ands	r3, r2
 800530a:	d0ef      	beq.n	80052ec <HAL_RCC_OscConfig+0x528>
 800530c:	e014      	b.n	8005338 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530e:	f7fe fd1f 	bl	8003d50 <HAL_GetTick>
 8005312:	0003      	movs	r3, r0
 8005314:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005316:	e009      	b.n	800532c <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005318:	f7fe fd1a 	bl	8003d50 <HAL_GetTick>
 800531c:	0002      	movs	r2, r0
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	4a47      	ldr	r2, [pc, #284]	; (8005440 <HAL_RCC_OscConfig+0x67c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d901      	bls.n	800532c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8005328:	2303      	movs	r3, #3
 800532a:	e104      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800532c:	4b40      	ldr	r3, [pc, #256]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800532e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4013      	ands	r3, r2
 8005336:	d1ef      	bne.n	8005318 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005338:	2327      	movs	r3, #39	; 0x27
 800533a:	18fb      	adds	r3, r7, r3
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d105      	bne.n	800534e <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005342:	4b3b      	ldr	r3, [pc, #236]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005346:	4b3a      	ldr	r3, [pc, #232]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005348:	493e      	ldr	r1, [pc, #248]	; (8005444 <HAL_RCC_OscConfig+0x680>)
 800534a:	400a      	ands	r2, r1
 800534c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2220      	movs	r2, #32
 8005354:	4013      	ands	r3, r2
 8005356:	d049      	beq.n	80053ec <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	699b      	ldr	r3, [r3, #24]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d026      	beq.n	80053ae <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005360:	4b33      	ldr	r3, [pc, #204]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005362:	689a      	ldr	r2, [r3, #8]
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005366:	2101      	movs	r1, #1
 8005368:	430a      	orrs	r2, r1
 800536a:	609a      	str	r2, [r3, #8]
 800536c:	4b30      	ldr	r3, [pc, #192]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800536e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005370:	4b2f      	ldr	r3, [pc, #188]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005372:	2101      	movs	r1, #1
 8005374:	430a      	orrs	r2, r1
 8005376:	635a      	str	r2, [r3, #52]	; 0x34
 8005378:	4b33      	ldr	r3, [pc, #204]	; (8005448 <HAL_RCC_OscConfig+0x684>)
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	4b32      	ldr	r3, [pc, #200]	; (8005448 <HAL_RCC_OscConfig+0x684>)
 800537e:	2180      	movs	r1, #128	; 0x80
 8005380:	0189      	lsls	r1, r1, #6
 8005382:	430a      	orrs	r2, r1
 8005384:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005386:	f7fe fce3 	bl	8003d50 <HAL_GetTick>
 800538a:	0003      	movs	r3, r0
 800538c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005390:	f7fe fcde 	bl	8003d50 <HAL_GetTick>
 8005394:	0002      	movs	r2, r0
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e0c9      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80053a2:	4b23      	ldr	r3, [pc, #140]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	d0f1      	beq.n	8005390 <HAL_RCC_OscConfig+0x5cc>
 80053ac:	e01e      	b.n	80053ec <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80053ae:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	4b1f      	ldr	r3, [pc, #124]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80053b4:	2101      	movs	r1, #1
 80053b6:	438a      	bics	r2, r1
 80053b8:	609a      	str	r2, [r3, #8]
 80053ba:	4b23      	ldr	r3, [pc, #140]	; (8005448 <HAL_RCC_OscConfig+0x684>)
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	4b22      	ldr	r3, [pc, #136]	; (8005448 <HAL_RCC_OscConfig+0x684>)
 80053c0:	4922      	ldr	r1, [pc, #136]	; (800544c <HAL_RCC_OscConfig+0x688>)
 80053c2:	400a      	ands	r2, r1
 80053c4:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fe fcc3 	bl	8003d50 <HAL_GetTick>
 80053ca:	0003      	movs	r3, r0
 80053cc:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80053d0:	f7fe fcbe 	bl	8003d50 <HAL_GetTick>
 80053d4:	0002      	movs	r2, r0
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e0a9      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80053e2:	4b13      	ldr	r3, [pc, #76]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	2202      	movs	r2, #2
 80053e8:	4013      	ands	r3, r2
 80053ea:	d1f1      	bne.n	80053d0 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d100      	bne.n	80053f6 <HAL_RCC_OscConfig+0x632>
 80053f4:	e09e      	b.n	8005534 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f6:	6a3b      	ldr	r3, [r7, #32]
 80053f8:	2b0c      	cmp	r3, #12
 80053fa:	d100      	bne.n	80053fe <HAL_RCC_OscConfig+0x63a>
 80053fc:	e077      	b.n	80054ee <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	2b02      	cmp	r3, #2
 8005404:	d158      	bne.n	80054b8 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005406:	4b0a      	ldr	r3, [pc, #40]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <HAL_RCC_OscConfig+0x66c>)
 800540c:	4910      	ldr	r1, [pc, #64]	; (8005450 <HAL_RCC_OscConfig+0x68c>)
 800540e:	400a      	ands	r2, r1
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005412:	f7fe fc9d 	bl	8003d50 <HAL_GetTick>
 8005416:	0003      	movs	r3, r0
 8005418:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800541a:	e01b      	b.n	8005454 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800541c:	f7fe fc98 	bl	8003d50 <HAL_GetTick>
 8005420:	0002      	movs	r2, r0
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d914      	bls.n	8005454 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e083      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
 800542e:	46c0      	nop			; (mov r8, r8)
 8005430:	40021000 	.word	0x40021000
 8005434:	fffffeff 	.word	0xfffffeff
 8005438:	40007000 	.word	0x40007000
 800543c:	fffffbff 	.word	0xfffffbff
 8005440:	00001388 	.word	0x00001388
 8005444:	efffffff 	.word	0xefffffff
 8005448:	40010000 	.word	0x40010000
 800544c:	ffffdfff 	.word	0xffffdfff
 8005450:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005454:	4b3a      	ldr	r3, [pc, #232]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	2380      	movs	r3, #128	; 0x80
 800545a:	049b      	lsls	r3, r3, #18
 800545c:	4013      	ands	r3, r2
 800545e:	d1dd      	bne.n	800541c <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005460:	4b37      	ldr	r3, [pc, #220]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4a37      	ldr	r2, [pc, #220]	; (8005544 <HAL_RCC_OscConfig+0x780>)
 8005466:	4013      	ands	r3, r2
 8005468:	0019      	movs	r1, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005472:	431a      	orrs	r2, r3
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005478:	431a      	orrs	r2, r3
 800547a:	4b31      	ldr	r3, [pc, #196]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 800547c:	430a      	orrs	r2, r1
 800547e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005480:	4b2f      	ldr	r3, [pc, #188]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	4b2e      	ldr	r3, [pc, #184]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 8005486:	2180      	movs	r1, #128	; 0x80
 8005488:	0449      	lsls	r1, r1, #17
 800548a:	430a      	orrs	r2, r1
 800548c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548e:	f7fe fc5f 	bl	8003d50 <HAL_GetTick>
 8005492:	0003      	movs	r3, r0
 8005494:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005498:	f7fe fc5a 	bl	8003d50 <HAL_GetTick>
 800549c:	0002      	movs	r2, r0
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e045      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80054aa:	4b25      	ldr	r3, [pc, #148]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	049b      	lsls	r3, r3, #18
 80054b2:	4013      	ands	r3, r2
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x6d4>
 80054b6:	e03d      	b.n	8005534 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b8:	4b21      	ldr	r3, [pc, #132]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 80054be:	4922      	ldr	r1, [pc, #136]	; (8005548 <HAL_RCC_OscConfig+0x784>)
 80054c0:	400a      	ands	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c4:	f7fe fc44 	bl	8003d50 <HAL_GetTick>
 80054c8:	0003      	movs	r3, r0
 80054ca:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ce:	f7fe fc3f 	bl	8003d50 <HAL_GetTick>
 80054d2:	0002      	movs	r2, r0
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e02a      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80054e0:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	049b      	lsls	r3, r3, #18
 80054e8:	4013      	ands	r3, r2
 80054ea:	d1f0      	bne.n	80054ce <HAL_RCC_OscConfig+0x70a>
 80054ec:	e022      	b.n	8005534 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e01d      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_RCC_OscConfig+0x77c>)
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005500:	69fa      	ldr	r2, [r7, #28]
 8005502:	2380      	movs	r3, #128	; 0x80
 8005504:	025b      	lsls	r3, r3, #9
 8005506:	401a      	ands	r2, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550c:	429a      	cmp	r2, r3
 800550e:	d10f      	bne.n	8005530 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	23f0      	movs	r3, #240	; 0xf0
 8005514:	039b      	lsls	r3, r3, #14
 8005516:	401a      	ands	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800551c:	429a      	cmp	r2, r3
 800551e:	d107      	bne.n	8005530 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005520:	69fa      	ldr	r2, [r7, #28]
 8005522:	23c0      	movs	r3, #192	; 0xc0
 8005524:	041b      	lsls	r3, r3, #16
 8005526:	401a      	ands	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800552c:	429a      	cmp	r2, r3
 800552e:	d001      	beq.n	8005534 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	e000      	b.n	8005536 <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	0018      	movs	r0, r3
 8005538:	46bd      	mov	sp, r7
 800553a:	b00a      	add	sp, #40	; 0x28
 800553c:	bdb0      	pop	{r4, r5, r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	40021000 	.word	0x40021000
 8005544:	ff02ffff 	.word	0xff02ffff
 8005548:	feffffff 	.word	0xfeffffff

0800554c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800554c:	b5b0      	push	{r4, r5, r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d101      	bne.n	8005560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e128      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005560:	4b96      	ldr	r3, [pc, #600]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2201      	movs	r2, #1
 8005566:	4013      	ands	r3, r2
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d91e      	bls.n	80055ac <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800556e:	4b93      	ldr	r3, [pc, #588]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2201      	movs	r2, #1
 8005574:	4393      	bics	r3, r2
 8005576:	0019      	movs	r1, r3
 8005578:	4b90      	ldr	r3, [pc, #576]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	430a      	orrs	r2, r1
 800557e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005580:	f7fe fbe6 	bl	8003d50 <HAL_GetTick>
 8005584:	0003      	movs	r3, r0
 8005586:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005588:	e009      	b.n	800559e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558a:	f7fe fbe1 	bl	8003d50 <HAL_GetTick>
 800558e:	0002      	movs	r2, r0
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	4a8a      	ldr	r2, [pc, #552]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d901      	bls.n	800559e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	e109      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b87      	ldr	r3, [pc, #540]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2201      	movs	r2, #1
 80055a4:	4013      	ands	r3, r2
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d1ee      	bne.n	800558a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2202      	movs	r2, #2
 80055b2:	4013      	ands	r3, r2
 80055b4:	d009      	beq.n	80055ca <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b6:	4b83      	ldr	r3, [pc, #524]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	22f0      	movs	r2, #240	; 0xf0
 80055bc:	4393      	bics	r3, r2
 80055be:	0019      	movs	r1, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	4b7f      	ldr	r3, [pc, #508]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 80055c6:	430a      	orrs	r2, r1
 80055c8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2201      	movs	r2, #1
 80055d0:	4013      	ands	r3, r2
 80055d2:	d100      	bne.n	80055d6 <HAL_RCC_ClockConfig+0x8a>
 80055d4:	e089      	b.n	80056ea <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80055de:	4b79      	ldr	r3, [pc, #484]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	2380      	movs	r3, #128	; 0x80
 80055e4:	029b      	lsls	r3, r3, #10
 80055e6:	4013      	ands	r3, r2
 80055e8:	d120      	bne.n	800562c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0e1      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80055f6:	4b73      	ldr	r3, [pc, #460]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	2380      	movs	r3, #128	; 0x80
 80055fc:	049b      	lsls	r3, r3, #18
 80055fe:	4013      	ands	r3, r2
 8005600:	d114      	bne.n	800562c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e0d5      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b01      	cmp	r3, #1
 800560c:	d106      	bne.n	800561c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800560e:	4b6d      	ldr	r3, [pc, #436]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2204      	movs	r2, #4
 8005614:	4013      	ands	r3, r2
 8005616:	d109      	bne.n	800562c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	e0ca      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800561c:	4b69      	ldr	r3, [pc, #420]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4013      	ands	r3, r2
 8005626:	d101      	bne.n	800562c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0c2      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800562c:	4b65      	ldr	r3, [pc, #404]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2203      	movs	r2, #3
 8005632:	4393      	bics	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	4b62      	ldr	r3, [pc, #392]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 800563c:	430a      	orrs	r2, r1
 800563e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005640:	f7fe fb86 	bl	8003d50 <HAL_GetTick>
 8005644:	0003      	movs	r3, r0
 8005646:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	2b02      	cmp	r3, #2
 800564e:	d111      	bne.n	8005674 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005650:	e009      	b.n	8005666 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005652:	f7fe fb7d 	bl	8003d50 <HAL_GetTick>
 8005656:	0002      	movs	r2, r0
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	4a58      	ldr	r2, [pc, #352]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e0a5      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005666:	4b57      	ldr	r3, [pc, #348]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	220c      	movs	r2, #12
 800566c:	4013      	ands	r3, r2
 800566e:	2b08      	cmp	r3, #8
 8005670:	d1ef      	bne.n	8005652 <HAL_RCC_ClockConfig+0x106>
 8005672:	e03a      	b.n	80056ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b03      	cmp	r3, #3
 800567a:	d111      	bne.n	80056a0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800567c:	e009      	b.n	8005692 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800567e:	f7fe fb67 	bl	8003d50 <HAL_GetTick>
 8005682:	0002      	movs	r2, r0
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	4a4d      	ldr	r2, [pc, #308]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e08f      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005692:	4b4c      	ldr	r3, [pc, #304]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	220c      	movs	r2, #12
 8005698:	4013      	ands	r3, r2
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d1ef      	bne.n	800567e <HAL_RCC_ClockConfig+0x132>
 800569e:	e024      	b.n	80056ea <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d11b      	bne.n	80056e0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056a8:	e009      	b.n	80056be <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056aa:	f7fe fb51 	bl	8003d50 <HAL_GetTick>
 80056ae:	0002      	movs	r2, r0
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	4a42      	ldr	r2, [pc, #264]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e079      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80056be:	4b41      	ldr	r3, [pc, #260]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	220c      	movs	r2, #12
 80056c4:	4013      	ands	r3, r2
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d1ef      	bne.n	80056aa <HAL_RCC_ClockConfig+0x15e>
 80056ca:	e00e      	b.n	80056ea <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056cc:	f7fe fb40 	bl	8003d50 <HAL_GetTick>
 80056d0:	0002      	movs	r2, r0
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	4a3a      	ldr	r2, [pc, #232]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e068      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80056e0:	4b38      	ldr	r3, [pc, #224]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	220c      	movs	r2, #12
 80056e6:	4013      	ands	r3, r2
 80056e8:	d1f0      	bne.n	80056cc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056ea:	4b34      	ldr	r3, [pc, #208]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2201      	movs	r2, #1
 80056f0:	4013      	ands	r3, r2
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d21e      	bcs.n	8005736 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056f8:	4b30      	ldr	r3, [pc, #192]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2201      	movs	r2, #1
 80056fe:	4393      	bics	r3, r2
 8005700:	0019      	movs	r1, r3
 8005702:	4b2e      	ldr	r3, [pc, #184]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 8005704:	683a      	ldr	r2, [r7, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800570a:	f7fe fb21 	bl	8003d50 <HAL_GetTick>
 800570e:	0003      	movs	r3, r0
 8005710:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005712:	e009      	b.n	8005728 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005714:	f7fe fb1c 	bl	8003d50 <HAL_GetTick>
 8005718:	0002      	movs	r2, r0
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	4a28      	ldr	r2, [pc, #160]	; (80057c0 <HAL_RCC_ClockConfig+0x274>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e044      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <HAL_RCC_ClockConfig+0x270>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	4013      	ands	r3, r2
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d1ee      	bne.n	8005714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2204      	movs	r2, #4
 800573c:	4013      	ands	r3, r2
 800573e:	d009      	beq.n	8005754 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005740:	4b20      	ldr	r3, [pc, #128]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <HAL_RCC_ClockConfig+0x27c>)
 8005746:	4013      	ands	r3, r2
 8005748:	0019      	movs	r1, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	4b1d      	ldr	r3, [pc, #116]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005750:	430a      	orrs	r2, r1
 8005752:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2208      	movs	r2, #8
 800575a:	4013      	ands	r3, r2
 800575c:	d00a      	beq.n	8005774 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800575e:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	4a1a      	ldr	r2, [pc, #104]	; (80057cc <HAL_RCC_ClockConfig+0x280>)
 8005764:	4013      	ands	r3, r2
 8005766:	0019      	movs	r1, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	691b      	ldr	r3, [r3, #16]
 800576c:	00da      	lsls	r2, r3, #3
 800576e:	4b15      	ldr	r3, [pc, #84]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 8005770:	430a      	orrs	r2, r1
 8005772:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005774:	f000 f832 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 8005778:	0001      	movs	r1, r0
 800577a:	4b12      	ldr	r3, [pc, #72]	; (80057c4 <HAL_RCC_ClockConfig+0x278>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	091b      	lsrs	r3, r3, #4
 8005780:	220f      	movs	r2, #15
 8005782:	4013      	ands	r3, r2
 8005784:	4a12      	ldr	r2, [pc, #72]	; (80057d0 <HAL_RCC_ClockConfig+0x284>)
 8005786:	5cd3      	ldrb	r3, [r2, r3]
 8005788:	000a      	movs	r2, r1
 800578a:	40da      	lsrs	r2, r3
 800578c:	4b11      	ldr	r3, [pc, #68]	; (80057d4 <HAL_RCC_ClockConfig+0x288>)
 800578e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005790:	4b11      	ldr	r3, [pc, #68]	; (80057d8 <HAL_RCC_ClockConfig+0x28c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	250b      	movs	r5, #11
 8005796:	197c      	adds	r4, r7, r5
 8005798:	0018      	movs	r0, r3
 800579a:	f7fe fa93 	bl	8003cc4 <HAL_InitTick>
 800579e:	0003      	movs	r3, r0
 80057a0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80057a2:	197b      	adds	r3, r7, r5
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80057aa:	197b      	adds	r3, r7, r5
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b004      	add	sp, #16
 80057b8:	bdb0      	pop	{r4, r5, r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	40022000 	.word	0x40022000
 80057c0:	00001388 	.word	0x00001388
 80057c4:	40021000 	.word	0x40021000
 80057c8:	fffff8ff 	.word	0xfffff8ff
 80057cc:	ffffc7ff 	.word	0xffffc7ff
 80057d0:	08009b5c 	.word	0x08009b5c
 80057d4:	20000000 	.word	0x20000000
 80057d8:	20000004 	.word	0x20000004

080057dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057dc:	b5b0      	push	{r4, r5, r7, lr}
 80057de:	b08e      	sub	sp, #56	; 0x38
 80057e0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80057e2:	4b4c      	ldr	r3, [pc, #304]	; (8005914 <HAL_RCC_GetSysClockFreq+0x138>)
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80057e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ea:	230c      	movs	r3, #12
 80057ec:	4013      	ands	r3, r2
 80057ee:	2b0c      	cmp	r3, #12
 80057f0:	d014      	beq.n	800581c <HAL_RCC_GetSysClockFreq+0x40>
 80057f2:	d900      	bls.n	80057f6 <HAL_RCC_GetSysClockFreq+0x1a>
 80057f4:	e07b      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x112>
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d002      	beq.n	8005800 <HAL_RCC_GetSysClockFreq+0x24>
 80057fa:	2b08      	cmp	r3, #8
 80057fc:	d00b      	beq.n	8005816 <HAL_RCC_GetSysClockFreq+0x3a>
 80057fe:	e076      	b.n	80058ee <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005800:	4b44      	ldr	r3, [pc, #272]	; (8005914 <HAL_RCC_GetSysClockFreq+0x138>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2210      	movs	r2, #16
 8005806:	4013      	ands	r3, r2
 8005808:	d002      	beq.n	8005810 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800580a:	4b43      	ldr	r3, [pc, #268]	; (8005918 <HAL_RCC_GetSysClockFreq+0x13c>)
 800580c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800580e:	e07c      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8005810:	4b42      	ldr	r3, [pc, #264]	; (800591c <HAL_RCC_GetSysClockFreq+0x140>)
 8005812:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005814:	e079      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005816:	4b42      	ldr	r3, [pc, #264]	; (8005920 <HAL_RCC_GetSysClockFreq+0x144>)
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800581a:	e076      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	0c9a      	lsrs	r2, r3, #18
 8005820:	230f      	movs	r3, #15
 8005822:	401a      	ands	r2, r3
 8005824:	4b3f      	ldr	r3, [pc, #252]	; (8005924 <HAL_RCC_GetSysClockFreq+0x148>)
 8005826:	5c9b      	ldrb	r3, [r3, r2]
 8005828:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	0d9a      	lsrs	r2, r3, #22
 800582e:	2303      	movs	r3, #3
 8005830:	4013      	ands	r3, r2
 8005832:	3301      	adds	r3, #1
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005836:	4b37      	ldr	r3, [pc, #220]	; (8005914 <HAL_RCC_GetSysClockFreq+0x138>)
 8005838:	68da      	ldr	r2, [r3, #12]
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	025b      	lsls	r3, r3, #9
 800583e:	4013      	ands	r3, r2
 8005840:	d01a      	beq.n	8005878 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	61bb      	str	r3, [r7, #24]
 8005846:	2300      	movs	r3, #0
 8005848:	61fb      	str	r3, [r7, #28]
 800584a:	4a35      	ldr	r2, [pc, #212]	; (8005920 <HAL_RCC_GetSysClockFreq+0x144>)
 800584c:	2300      	movs	r3, #0
 800584e:	69b8      	ldr	r0, [r7, #24]
 8005850:	69f9      	ldr	r1, [r7, #28]
 8005852:	f7fa fe83 	bl	800055c <__aeabi_lmul>
 8005856:	0002      	movs	r2, r0
 8005858:	000b      	movs	r3, r1
 800585a:	0010      	movs	r0, r2
 800585c:	0019      	movs	r1, r3
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	613b      	str	r3, [r7, #16]
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f7fa fe57 	bl	800051c <__aeabi_uldivmod>
 800586e:	0002      	movs	r2, r0
 8005870:	000b      	movs	r3, r1
 8005872:	0013      	movs	r3, r2
 8005874:	637b      	str	r3, [r7, #52]	; 0x34
 8005876:	e037      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005878:	4b26      	ldr	r3, [pc, #152]	; (8005914 <HAL_RCC_GetSysClockFreq+0x138>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2210      	movs	r2, #16
 800587e:	4013      	ands	r3, r2
 8005880:	d01a      	beq.n	80058b8 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	60bb      	str	r3, [r7, #8]
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	4a23      	ldr	r2, [pc, #140]	; (8005918 <HAL_RCC_GetSysClockFreq+0x13c>)
 800588c:	2300      	movs	r3, #0
 800588e:	68b8      	ldr	r0, [r7, #8]
 8005890:	68f9      	ldr	r1, [r7, #12]
 8005892:	f7fa fe63 	bl	800055c <__aeabi_lmul>
 8005896:	0002      	movs	r2, r0
 8005898:	000b      	movs	r3, r1
 800589a:	0010      	movs	r0, r2
 800589c:	0019      	movs	r1, r3
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	603b      	str	r3, [r7, #0]
 80058a2:	2300      	movs	r3, #0
 80058a4:	607b      	str	r3, [r7, #4]
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f7fa fe37 	bl	800051c <__aeabi_uldivmod>
 80058ae:	0002      	movs	r2, r0
 80058b0:	000b      	movs	r3, r1
 80058b2:	0013      	movs	r3, r2
 80058b4:	637b      	str	r3, [r7, #52]	; 0x34
 80058b6:	e017      	b.n	80058e8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	0018      	movs	r0, r3
 80058bc:	2300      	movs	r3, #0
 80058be:	0019      	movs	r1, r3
 80058c0:	4a16      	ldr	r2, [pc, #88]	; (800591c <HAL_RCC_GetSysClockFreq+0x140>)
 80058c2:	2300      	movs	r3, #0
 80058c4:	f7fa fe4a 	bl	800055c <__aeabi_lmul>
 80058c8:	0002      	movs	r2, r0
 80058ca:	000b      	movs	r3, r1
 80058cc:	0010      	movs	r0, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d2:	001c      	movs	r4, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	001d      	movs	r5, r3
 80058d8:	0022      	movs	r2, r4
 80058da:	002b      	movs	r3, r5
 80058dc:	f7fa fe1e 	bl	800051c <__aeabi_uldivmod>
 80058e0:	0002      	movs	r2, r0
 80058e2:	000b      	movs	r3, r1
 80058e4:	0013      	movs	r3, r2
 80058e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80058ec:	e00d      	b.n	800590a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80058ee:	4b09      	ldr	r3, [pc, #36]	; (8005914 <HAL_RCC_GetSysClockFreq+0x138>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	0b5b      	lsrs	r3, r3, #13
 80058f4:	2207      	movs	r2, #7
 80058f6:	4013      	ands	r3, r2
 80058f8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80058fa:	6a3b      	ldr	r3, [r7, #32]
 80058fc:	3301      	adds	r3, #1
 80058fe:	2280      	movs	r2, #128	; 0x80
 8005900:	0212      	lsls	r2, r2, #8
 8005902:	409a      	lsls	r2, r3
 8005904:	0013      	movs	r3, r2
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005908:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800590a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800590c:	0018      	movs	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	b00e      	add	sp, #56	; 0x38
 8005912:	bdb0      	pop	{r4, r5, r7, pc}
 8005914:	40021000 	.word	0x40021000
 8005918:	003d0900 	.word	0x003d0900
 800591c:	00f42400 	.word	0x00f42400
 8005920:	007a1200 	.word	0x007a1200
 8005924:	08009b74 	.word	0x08009b74

08005928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800592c:	4b02      	ldr	r3, [pc, #8]	; (8005938 <HAL_RCC_GetHCLKFreq+0x10>)
 800592e:	681b      	ldr	r3, [r3, #0]
}
 8005930:	0018      	movs	r0, r3
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	20000000 	.word	0x20000000

0800593c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005940:	f7ff fff2 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005944:	0001      	movs	r1, r0
 8005946:	4b06      	ldr	r3, [pc, #24]	; (8005960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	0a1b      	lsrs	r3, r3, #8
 800594c:	2207      	movs	r2, #7
 800594e:	4013      	ands	r3, r2
 8005950:	4a04      	ldr	r2, [pc, #16]	; (8005964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005952:	5cd3      	ldrb	r3, [r2, r3]
 8005954:	40d9      	lsrs	r1, r3
 8005956:	000b      	movs	r3, r1
}
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	46c0      	nop			; (mov r8, r8)
 8005960:	40021000 	.word	0x40021000
 8005964:	08009b6c 	.word	0x08009b6c

08005968 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800596c:	f7ff ffdc 	bl	8005928 <HAL_RCC_GetHCLKFreq>
 8005970:	0001      	movs	r1, r0
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	0adb      	lsrs	r3, r3, #11
 8005978:	2207      	movs	r2, #7
 800597a:	4013      	ands	r3, r2
 800597c:	4a04      	ldr	r2, [pc, #16]	; (8005990 <HAL_RCC_GetPCLK2Freq+0x28>)
 800597e:	5cd3      	ldrb	r3, [r2, r3]
 8005980:	40d9      	lsrs	r1, r3
 8005982:	000b      	movs	r3, r1
}
 8005984:	0018      	movs	r0, r3
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	40021000 	.word	0x40021000
 8005990:	08009b6c 	.word	0x08009b6c

08005994 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b086      	sub	sp, #24
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800599c:	2317      	movs	r3, #23
 800599e:	18fb      	adds	r3, r7, r3
 80059a0:	2200      	movs	r2, #0
 80059a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	2220      	movs	r2, #32
 80059aa:	4013      	ands	r3, r2
 80059ac:	d106      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	2380      	movs	r3, #128	; 0x80
 80059b4:	011b      	lsls	r3, r3, #4
 80059b6:	4013      	ands	r3, r2
 80059b8:	d100      	bne.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0x28>
 80059ba:	e0d9      	b.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059bc:	4b9c      	ldr	r3, [pc, #624]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80059be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	055b      	lsls	r3, r3, #21
 80059c4:	4013      	ands	r3, r2
 80059c6:	d10a      	bne.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059c8:	4b99      	ldr	r3, [pc, #612]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80059ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059cc:	4b98      	ldr	r3, [pc, #608]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80059ce:	2180      	movs	r1, #128	; 0x80
 80059d0:	0549      	lsls	r1, r1, #21
 80059d2:	430a      	orrs	r2, r1
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80059d6:	2317      	movs	r3, #23
 80059d8:	18fb      	adds	r3, r7, r3
 80059da:	2201      	movs	r2, #1
 80059dc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059de:	4b95      	ldr	r3, [pc, #596]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	2380      	movs	r3, #128	; 0x80
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4013      	ands	r3, r2
 80059e8:	d11a      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059ea:	4b92      	ldr	r3, [pc, #584]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	4b91      	ldr	r3, [pc, #580]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80059f0:	2180      	movs	r1, #128	; 0x80
 80059f2:	0049      	lsls	r1, r1, #1
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059f8:	f7fe f9aa 	bl	8003d50 <HAL_GetTick>
 80059fc:	0003      	movs	r3, r0
 80059fe:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a00:	e008      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a02:	f7fe f9a5 	bl	8003d50 <HAL_GetTick>
 8005a06:	0002      	movs	r2, r0
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	1ad3      	subs	r3, r2, r3
 8005a0c:	2b64      	cmp	r3, #100	; 0x64
 8005a0e:	d901      	bls.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005a10:	2303      	movs	r3, #3
 8005a12:	e108      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a14:	4b87      	ldr	r3, [pc, #540]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	2380      	movs	r3, #128	; 0x80
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	4013      	ands	r3, r2
 8005a1e:	d0f0      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005a20:	4b83      	ldr	r3, [pc, #524]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	23c0      	movs	r3, #192	; 0xc0
 8005a26:	039b      	lsls	r3, r3, #14
 8005a28:	4013      	ands	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	23c0      	movs	r3, #192	; 0xc0
 8005a32:	039b      	lsls	r3, r3, #14
 8005a34:	4013      	ands	r3, r2
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	23c0      	movs	r3, #192	; 0xc0
 8005a42:	039b      	lsls	r3, r3, #14
 8005a44:	4013      	ands	r3, r2
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d013      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	23c0      	movs	r3, #192	; 0xc0
 8005a52:	029b      	lsls	r3, r3, #10
 8005a54:	401a      	ands	r2, r3
 8005a56:	23c0      	movs	r3, #192	; 0xc0
 8005a58:	029b      	lsls	r3, r3, #10
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d10a      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005a5e:	4b74      	ldr	r3, [pc, #464]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	2380      	movs	r3, #128	; 0x80
 8005a64:	029b      	lsls	r3, r3, #10
 8005a66:	401a      	ands	r2, r3
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	029b      	lsls	r3, r3, #10
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d101      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0d8      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005a74:	4b6e      	ldr	r3, [pc, #440]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005a76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005a78:	23c0      	movs	r3, #192	; 0xc0
 8005a7a:	029b      	lsls	r3, r3, #10
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d049      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	23c0      	movs	r3, #192	; 0xc0
 8005a8c:	029b      	lsls	r3, r3, #10
 8005a8e:	4013      	ands	r3, r2
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d004      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d10d      	bne.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	23c0      	movs	r3, #192	; 0xc0
 8005aa6:	029b      	lsls	r3, r3, #10
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d034      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	2380      	movs	r3, #128	; 0x80
 8005ab6:	011b      	lsls	r3, r3, #4
 8005ab8:	4013      	ands	r3, r2
 8005aba:	d02e      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005abc:	4b5c      	ldr	r3, [pc, #368]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	4a5d      	ldr	r2, [pc, #372]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ac6:	4b5a      	ldr	r3, [pc, #360]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ac8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005aca:	4b59      	ldr	r3, [pc, #356]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005acc:	2180      	movs	r1, #128	; 0x80
 8005ace:	0309      	lsls	r1, r1, #12
 8005ad0:	430a      	orrs	r2, r1
 8005ad2:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad4:	4b56      	ldr	r3, [pc, #344]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ad8:	4b55      	ldr	r3, [pc, #340]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ada:	4958      	ldr	r1, [pc, #352]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005adc:	400a      	ands	r2, r1
 8005ade:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005ae0:	4b53      	ldr	r3, [pc, #332]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	2380      	movs	r3, #128	; 0x80
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4013      	ands	r3, r2
 8005aee:	d014      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fe f92e 	bl	8003d50 <HAL_GetTick>
 8005af4:	0003      	movs	r3, r0
 8005af6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005af8:	e009      	b.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fe f929 	bl	8003d50 <HAL_GetTick>
 8005afe:	0002      	movs	r2, r0
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	4a4e      	ldr	r2, [pc, #312]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e08b      	b.n	8005c26 <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005b0e:	4b48      	ldr	r3, [pc, #288]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4013      	ands	r3, r2
 8005b18:	d0ef      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	685a      	ldr	r2, [r3, #4]
 8005b1e:	23c0      	movs	r3, #192	; 0xc0
 8005b20:	029b      	lsls	r3, r3, #10
 8005b22:	401a      	ands	r2, r3
 8005b24:	23c0      	movs	r3, #192	; 0xc0
 8005b26:	029b      	lsls	r3, r3, #10
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d10c      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005b2c:	4b40      	ldr	r3, [pc, #256]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a44      	ldr	r2, [pc, #272]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	23c0      	movs	r3, #192	; 0xc0
 8005b3c:	039b      	lsls	r3, r3, #14
 8005b3e:	401a      	ands	r2, r3
 8005b40:	4b3b      	ldr	r3, [pc, #236]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b42:	430a      	orrs	r2, r1
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	4b3a      	ldr	r3, [pc, #232]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b48:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	23c0      	movs	r3, #192	; 0xc0
 8005b50:	029b      	lsls	r3, r3, #10
 8005b52:	401a      	ands	r2, r3
 8005b54:	4b36      	ldr	r3, [pc, #216]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b56:	430a      	orrs	r2, r1
 8005b58:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005b5a:	2317      	movs	r3, #23
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b64:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b68:	4b31      	ldr	r3, [pc, #196]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b6a:	4937      	ldr	r1, [pc, #220]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005b6c:	400a      	ands	r2, r1
 8005b6e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2201      	movs	r2, #1
 8005b76:	4013      	ands	r3, r2
 8005b78:	d009      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b7a:	4b2d      	ldr	r3, [pc, #180]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	2203      	movs	r2, #3
 8005b80:	4393      	bics	r3, r2
 8005b82:	0019      	movs	r1, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	4b29      	ldr	r3, [pc, #164]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b8a:	430a      	orrs	r2, r1
 8005b8c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2202      	movs	r2, #2
 8005b94:	4013      	ands	r3, r2
 8005b96:	d009      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005b98:	4b25      	ldr	r3, [pc, #148]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b9c:	220c      	movs	r2, #12
 8005b9e:	4393      	bics	r3, r2
 8005ba0:	0019      	movs	r1, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691a      	ldr	r2, [r3, #16]
 8005ba6:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ba8:	430a      	orrs	r2, r1
 8005baa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005bb6:	4b1e      	ldr	r3, [pc, #120]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005bbc:	4013      	ands	r3, r2
 8005bbe:	0019      	movs	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	4b1a      	ldr	r3, [pc, #104]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bc6:	430a      	orrs	r2, r1
 8005bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2208      	movs	r2, #8
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d009      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bd4:	4b16      	ldr	r3, [pc, #88]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005bda:	4013      	ands	r3, r2
 8005bdc:	0019      	movs	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005be4:	430a      	orrs	r2, r1
 8005be6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2240      	movs	r2, #64	; 0x40
 8005bee:	4013      	ands	r3, r2
 8005bf0:	d009      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bf2:	4b0f      	ldr	r3, [pc, #60]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf6:	4a17      	ldr	r2, [pc, #92]	; (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	0019      	movs	r1, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	4b0b      	ldr	r3, [pc, #44]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c02:	430a      	orrs	r2, r1
 8005c04:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2280      	movs	r2, #128	; 0x80
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005c10:	4b07      	ldr	r3, [pc, #28]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c14:	4a10      	ldr	r2, [pc, #64]	; (8005c58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005c16:	4013      	ands	r3, r2
 8005c18:	0019      	movs	r1, r3
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69da      	ldr	r2, [r3, #28]
 8005c1e:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c20:	430a      	orrs	r2, r1
 8005c22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005c24:	2300      	movs	r3, #0
}
 8005c26:	0018      	movs	r0, r3
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	b006      	add	sp, #24
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	40021000 	.word	0x40021000
 8005c34:	40007000 	.word	0x40007000
 8005c38:	fffcffff 	.word	0xfffcffff
 8005c3c:	fff7ffff 	.word	0xfff7ffff
 8005c40:	00001388 	.word	0x00001388
 8005c44:	ffcfffff 	.word	0xffcfffff
 8005c48:	efffffff 	.word	0xefffffff
 8005c4c:	fffff3ff 	.word	0xfffff3ff
 8005c50:	ffffcfff 	.word	0xffffcfff
 8005c54:	fbffffff 	.word	0xfbffffff
 8005c58:	fff3ffff 	.word	0xfff3ffff

08005c5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e044      	b.n	8005cf8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d107      	bne.n	8005c86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2274      	movs	r2, #116	; 0x74
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	0018      	movs	r0, r3
 8005c82:	f7fd fa4f 	bl	8003124 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2224      	movs	r2, #36	; 0x24
 8005c8a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2101      	movs	r1, #1
 8005c98:	438a      	bics	r2, r1
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	0018      	movs	r0, r3
 8005ca0:	f000 f8d8 	bl	8005e54 <UART_SetConfig>
 8005ca4:	0003      	movs	r3, r0
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d101      	bne.n	8005cae <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e024      	b.n	8005cf8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	0018      	movs	r0, r3
 8005cba:	f000 fb4f 	bl	800635c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	490d      	ldr	r1, [pc, #52]	; (8005d00 <HAL_UART_Init+0xa4>)
 8005cca:	400a      	ands	r2, r1
 8005ccc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689a      	ldr	r2, [r3, #8]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	212a      	movs	r1, #42	; 0x2a
 8005cda:	438a      	bics	r2, r1
 8005cdc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2101      	movs	r1, #1
 8005cea:	430a      	orrs	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f000 fbe7 	bl	80064c4 <UART_CheckIdleState>
 8005cf6:	0003      	movs	r3, r0
}
 8005cf8:	0018      	movs	r0, r3
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	b002      	add	sp, #8
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	ffffb7ff 	.word	0xffffb7ff

08005d04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08a      	sub	sp, #40	; 0x28
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	1dbb      	adds	r3, r7, #6
 8005d12:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d18:	2b20      	cmp	r3, #32
 8005d1a:	d000      	beq.n	8005d1e <HAL_UART_Transmit+0x1a>
 8005d1c:	e095      	b.n	8005e4a <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_UART_Transmit+0x28>
 8005d24:	1dbb      	adds	r3, r7, #6
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d101      	bne.n	8005d30 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e08d      	b.n	8005e4c <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	2380      	movs	r3, #128	; 0x80
 8005d36:	015b      	lsls	r3, r3, #5
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d109      	bne.n	8005d50 <HAL_UART_Transmit+0x4c>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d105      	bne.n	8005d50 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2201      	movs	r2, #1
 8005d48:	4013      	ands	r3, r2
 8005d4a:	d001      	beq.n	8005d50 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e07d      	b.n	8005e4c <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2274      	movs	r2, #116	; 0x74
 8005d54:	5c9b      	ldrb	r3, [r3, r2]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d101      	bne.n	8005d5e <HAL_UART_Transmit+0x5a>
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	e076      	b.n	8005e4c <HAL_UART_Transmit+0x148>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2274      	movs	r2, #116	; 0x74
 8005d62:	2101      	movs	r1, #1
 8005d64:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2280      	movs	r2, #128	; 0x80
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2221      	movs	r2, #33	; 0x21
 8005d72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d74:	f7fd ffec 	bl	8003d50 <HAL_GetTick>
 8005d78:	0003      	movs	r3, r0
 8005d7a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	1dba      	adds	r2, r7, #6
 8005d80:	2150      	movs	r1, #80	; 0x50
 8005d82:	8812      	ldrh	r2, [r2, #0]
 8005d84:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	1dba      	adds	r2, r7, #6
 8005d8a:	2152      	movs	r1, #82	; 0x52
 8005d8c:	8812      	ldrh	r2, [r2, #0]
 8005d8e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	689a      	ldr	r2, [r3, #8]
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	015b      	lsls	r3, r3, #5
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d108      	bne.n	8005dae <HAL_UART_Transmit+0xaa>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d104      	bne.n	8005dae <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	e003      	b.n	8005db6 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2274      	movs	r2, #116	; 0x74
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005dbe:	e02c      	b.n	8005e1a <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	0013      	movs	r3, r2
 8005dca:	2200      	movs	r2, #0
 8005dcc:	2180      	movs	r1, #128	; 0x80
 8005dce:	f000 fbc1 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 8005dd2:	1e03      	subs	r3, r0, #0
 8005dd4:	d001      	beq.n	8005dda <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e038      	b.n	8005e4c <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10b      	bne.n	8005df8 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	001a      	movs	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	05d2      	lsls	r2, r2, #23
 8005dec:	0dd2      	lsrs	r2, r2, #23
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	3302      	adds	r3, #2
 8005df4:	61bb      	str	r3, [r7, #24]
 8005df6:	e007      	b.n	8005e08 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	3301      	adds	r3, #1
 8005e06:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2252      	movs	r2, #82	; 0x52
 8005e0c:	5a9b      	ldrh	r3, [r3, r2]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b299      	uxth	r1, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2252      	movs	r2, #82	; 0x52
 8005e18:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2252      	movs	r2, #82	; 0x52
 8005e1e:	5a9b      	ldrh	r3, [r3, r2]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1cc      	bne.n	8005dc0 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	0013      	movs	r3, r2
 8005e30:	2200      	movs	r2, #0
 8005e32:	2140      	movs	r1, #64	; 0x40
 8005e34:	f000 fb8e 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 8005e38:	1e03      	subs	r3, r0, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e005      	b.n	8005e4c <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2220      	movs	r2, #32
 8005e44:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	e000      	b.n	8005e4c <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005e4a:	2302      	movs	r3, #2
  }
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b008      	add	sp, #32
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e54:	b5b0      	push	{r4, r5, r7, lr}
 8005e56:	b08e      	sub	sp, #56	; 0x38
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005e5c:	231a      	movs	r3, #26
 8005e5e:	2218      	movs	r2, #24
 8005e60:	189b      	adds	r3, r3, r2
 8005e62:	19db      	adds	r3, r3, r7
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	691b      	ldr	r3, [r3, #16]
 8005e70:	431a      	orrs	r2, r3
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	431a      	orrs	r2, r3
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4ac6      	ldr	r2, [pc, #792]	; (80061a0 <UART_SetConfig+0x34c>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	0019      	movs	r1, r3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e92:	430a      	orrs	r2, r1
 8005e94:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	4ac1      	ldr	r2, [pc, #772]	; (80061a4 <UART_SetConfig+0x350>)
 8005e9e:	4013      	ands	r3, r2
 8005ea0:	0019      	movs	r1, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	69fb      	ldr	r3, [r7, #28]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4abb      	ldr	r2, [pc, #748]	; (80061a8 <UART_SetConfig+0x354>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d004      	beq.n	8005ec8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ebe:	69fb      	ldr	r3, [r7, #28]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	4ab7      	ldr	r2, [pc, #732]	; (80061ac <UART_SetConfig+0x358>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	0019      	movs	r1, r3
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4ab3      	ldr	r2, [pc, #716]	; (80061b0 <UART_SetConfig+0x35c>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d131      	bne.n	8005f4c <UART_SetConfig+0xf8>
 8005ee8:	4bb2      	ldr	r3, [pc, #712]	; (80061b4 <UART_SetConfig+0x360>)
 8005eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eec:	2203      	movs	r2, #3
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d01d      	beq.n	8005f30 <UART_SetConfig+0xdc>
 8005ef4:	d823      	bhi.n	8005f3e <UART_SetConfig+0xea>
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d00c      	beq.n	8005f14 <UART_SetConfig+0xc0>
 8005efa:	d820      	bhi.n	8005f3e <UART_SetConfig+0xea>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d002      	beq.n	8005f06 <UART_SetConfig+0xb2>
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d00e      	beq.n	8005f22 <UART_SetConfig+0xce>
 8005f04:	e01b      	b.n	8005f3e <UART_SetConfig+0xea>
 8005f06:	231b      	movs	r3, #27
 8005f08:	2218      	movs	r2, #24
 8005f0a:	189b      	adds	r3, r3, r2
 8005f0c:	19db      	adds	r3, r3, r7
 8005f0e:	2201      	movs	r2, #1
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	e09c      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f14:	231b      	movs	r3, #27
 8005f16:	2218      	movs	r2, #24
 8005f18:	189b      	adds	r3, r3, r2
 8005f1a:	19db      	adds	r3, r3, r7
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	701a      	strb	r2, [r3, #0]
 8005f20:	e095      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f22:	231b      	movs	r3, #27
 8005f24:	2218      	movs	r2, #24
 8005f26:	189b      	adds	r3, r3, r2
 8005f28:	19db      	adds	r3, r3, r7
 8005f2a:	2204      	movs	r2, #4
 8005f2c:	701a      	strb	r2, [r3, #0]
 8005f2e:	e08e      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f30:	231b      	movs	r3, #27
 8005f32:	2218      	movs	r2, #24
 8005f34:	189b      	adds	r3, r3, r2
 8005f36:	19db      	adds	r3, r3, r7
 8005f38:	2208      	movs	r2, #8
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	e087      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f3e:	231b      	movs	r3, #27
 8005f40:	2218      	movs	r2, #24
 8005f42:	189b      	adds	r3, r3, r2
 8005f44:	19db      	adds	r3, r3, r7
 8005f46:	2210      	movs	r2, #16
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e080      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	4a99      	ldr	r2, [pc, #612]	; (80061b8 <UART_SetConfig+0x364>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d131      	bne.n	8005fba <UART_SetConfig+0x166>
 8005f56:	4b97      	ldr	r3, [pc, #604]	; (80061b4 <UART_SetConfig+0x360>)
 8005f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f5a:	220c      	movs	r2, #12
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2b0c      	cmp	r3, #12
 8005f60:	d01d      	beq.n	8005f9e <UART_SetConfig+0x14a>
 8005f62:	d823      	bhi.n	8005fac <UART_SetConfig+0x158>
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d00c      	beq.n	8005f82 <UART_SetConfig+0x12e>
 8005f68:	d820      	bhi.n	8005fac <UART_SetConfig+0x158>
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <UART_SetConfig+0x120>
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d00e      	beq.n	8005f90 <UART_SetConfig+0x13c>
 8005f72:	e01b      	b.n	8005fac <UART_SetConfig+0x158>
 8005f74:	231b      	movs	r3, #27
 8005f76:	2218      	movs	r2, #24
 8005f78:	189b      	adds	r3, r3, r2
 8005f7a:	19db      	adds	r3, r3, r7
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	701a      	strb	r2, [r3, #0]
 8005f80:	e065      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f82:	231b      	movs	r3, #27
 8005f84:	2218      	movs	r2, #24
 8005f86:	189b      	adds	r3, r3, r2
 8005f88:	19db      	adds	r3, r3, r7
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	701a      	strb	r2, [r3, #0]
 8005f8e:	e05e      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f90:	231b      	movs	r3, #27
 8005f92:	2218      	movs	r2, #24
 8005f94:	189b      	adds	r3, r3, r2
 8005f96:	19db      	adds	r3, r3, r7
 8005f98:	2204      	movs	r2, #4
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e057      	b.n	800604e <UART_SetConfig+0x1fa>
 8005f9e:	231b      	movs	r3, #27
 8005fa0:	2218      	movs	r2, #24
 8005fa2:	189b      	adds	r3, r3, r2
 8005fa4:	19db      	adds	r3, r3, r7
 8005fa6:	2208      	movs	r2, #8
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e050      	b.n	800604e <UART_SetConfig+0x1fa>
 8005fac:	231b      	movs	r3, #27
 8005fae:	2218      	movs	r2, #24
 8005fb0:	189b      	adds	r3, r3, r2
 8005fb2:	19db      	adds	r3, r3, r7
 8005fb4:	2210      	movs	r2, #16
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	e049      	b.n	800604e <UART_SetConfig+0x1fa>
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a7a      	ldr	r2, [pc, #488]	; (80061a8 <UART_SetConfig+0x354>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d13e      	bne.n	8006042 <UART_SetConfig+0x1ee>
 8005fc4:	4b7b      	ldr	r3, [pc, #492]	; (80061b4 <UART_SetConfig+0x360>)
 8005fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fc8:	23c0      	movs	r3, #192	; 0xc0
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	4013      	ands	r3, r2
 8005fce:	22c0      	movs	r2, #192	; 0xc0
 8005fd0:	0112      	lsls	r2, r2, #4
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d027      	beq.n	8006026 <UART_SetConfig+0x1d2>
 8005fd6:	22c0      	movs	r2, #192	; 0xc0
 8005fd8:	0112      	lsls	r2, r2, #4
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d82a      	bhi.n	8006034 <UART_SetConfig+0x1e0>
 8005fde:	2280      	movs	r2, #128	; 0x80
 8005fe0:	0112      	lsls	r2, r2, #4
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d011      	beq.n	800600a <UART_SetConfig+0x1b6>
 8005fe6:	2280      	movs	r2, #128	; 0x80
 8005fe8:	0112      	lsls	r2, r2, #4
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d822      	bhi.n	8006034 <UART_SetConfig+0x1e0>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d004      	beq.n	8005ffc <UART_SetConfig+0x1a8>
 8005ff2:	2280      	movs	r2, #128	; 0x80
 8005ff4:	00d2      	lsls	r2, r2, #3
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d00e      	beq.n	8006018 <UART_SetConfig+0x1c4>
 8005ffa:	e01b      	b.n	8006034 <UART_SetConfig+0x1e0>
 8005ffc:	231b      	movs	r3, #27
 8005ffe:	2218      	movs	r2, #24
 8006000:	189b      	adds	r3, r3, r2
 8006002:	19db      	adds	r3, r3, r7
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e021      	b.n	800604e <UART_SetConfig+0x1fa>
 800600a:	231b      	movs	r3, #27
 800600c:	2218      	movs	r2, #24
 800600e:	189b      	adds	r3, r3, r2
 8006010:	19db      	adds	r3, r3, r7
 8006012:	2202      	movs	r2, #2
 8006014:	701a      	strb	r2, [r3, #0]
 8006016:	e01a      	b.n	800604e <UART_SetConfig+0x1fa>
 8006018:	231b      	movs	r3, #27
 800601a:	2218      	movs	r2, #24
 800601c:	189b      	adds	r3, r3, r2
 800601e:	19db      	adds	r3, r3, r7
 8006020:	2204      	movs	r2, #4
 8006022:	701a      	strb	r2, [r3, #0]
 8006024:	e013      	b.n	800604e <UART_SetConfig+0x1fa>
 8006026:	231b      	movs	r3, #27
 8006028:	2218      	movs	r2, #24
 800602a:	189b      	adds	r3, r3, r2
 800602c:	19db      	adds	r3, r3, r7
 800602e:	2208      	movs	r2, #8
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e00c      	b.n	800604e <UART_SetConfig+0x1fa>
 8006034:	231b      	movs	r3, #27
 8006036:	2218      	movs	r2, #24
 8006038:	189b      	adds	r3, r3, r2
 800603a:	19db      	adds	r3, r3, r7
 800603c:	2210      	movs	r2, #16
 800603e:	701a      	strb	r2, [r3, #0]
 8006040:	e005      	b.n	800604e <UART_SetConfig+0x1fa>
 8006042:	231b      	movs	r3, #27
 8006044:	2218      	movs	r2, #24
 8006046:	189b      	adds	r3, r3, r2
 8006048:	19db      	adds	r3, r3, r7
 800604a:	2210      	movs	r2, #16
 800604c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a55      	ldr	r2, [pc, #340]	; (80061a8 <UART_SetConfig+0x354>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d000      	beq.n	800605a <UART_SetConfig+0x206>
 8006058:	e084      	b.n	8006164 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800605a:	231b      	movs	r3, #27
 800605c:	2218      	movs	r2, #24
 800605e:	189b      	adds	r3, r3, r2
 8006060:	19db      	adds	r3, r3, r7
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	2b08      	cmp	r3, #8
 8006066:	d01d      	beq.n	80060a4 <UART_SetConfig+0x250>
 8006068:	dc20      	bgt.n	80060ac <UART_SetConfig+0x258>
 800606a:	2b04      	cmp	r3, #4
 800606c:	d015      	beq.n	800609a <UART_SetConfig+0x246>
 800606e:	dc1d      	bgt.n	80060ac <UART_SetConfig+0x258>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d002      	beq.n	800607a <UART_SetConfig+0x226>
 8006074:	2b02      	cmp	r3, #2
 8006076:	d005      	beq.n	8006084 <UART_SetConfig+0x230>
 8006078:	e018      	b.n	80060ac <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607a:	f7ff fc5f 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 800607e:	0003      	movs	r3, r0
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006082:	e01c      	b.n	80060be <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006084:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <UART_SetConfig+0x360>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2210      	movs	r2, #16
 800608a:	4013      	ands	r3, r2
 800608c:	d002      	beq.n	8006094 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800608e:	4b4b      	ldr	r3, [pc, #300]	; (80061bc <UART_SetConfig+0x368>)
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006092:	e014      	b.n	80060be <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8006094:	4b4a      	ldr	r3, [pc, #296]	; (80061c0 <UART_SetConfig+0x36c>)
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006098:	e011      	b.n	80060be <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800609a:	f7ff fb9f 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 800609e:	0003      	movs	r3, r0
 80060a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060a2:	e00c      	b.n	80060be <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060a4:	2380      	movs	r3, #128	; 0x80
 80060a6:	021b      	lsls	r3, r3, #8
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060aa:	e008      	b.n	80060be <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 80060ac:	2300      	movs	r3, #0
 80060ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060b0:	231a      	movs	r3, #26
 80060b2:	2218      	movs	r2, #24
 80060b4:	189b      	adds	r3, r3, r2
 80060b6:	19db      	adds	r3, r3, r7
 80060b8:	2201      	movs	r2, #1
 80060ba:	701a      	strb	r2, [r3, #0]
        break;
 80060bc:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d100      	bne.n	80060c6 <UART_SetConfig+0x272>
 80060c4:	e133      	b.n	800632e <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	0013      	movs	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	189b      	adds	r3, r3, r2
 80060d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d305      	bcc.n	80060e2 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d906      	bls.n	80060f0 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80060e2:	231a      	movs	r3, #26
 80060e4:	2218      	movs	r2, #24
 80060e6:	189b      	adds	r3, r3, r2
 80060e8:	19db      	adds	r3, r3, r7
 80060ea:	2201      	movs	r2, #1
 80060ec:	701a      	strb	r2, [r3, #0]
 80060ee:	e11e      	b.n	800632e <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	6939      	ldr	r1, [r7, #16]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	000b      	movs	r3, r1
 80060fe:	0e1b      	lsrs	r3, r3, #24
 8006100:	0010      	movs	r0, r2
 8006102:	0205      	lsls	r5, r0, #8
 8006104:	431d      	orrs	r5, r3
 8006106:	000b      	movs	r3, r1
 8006108:	021c      	lsls	r4, r3, #8
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	085b      	lsrs	r3, r3, #1
 8006110:	60bb      	str	r3, [r7, #8]
 8006112:	2300      	movs	r3, #0
 8006114:	60fb      	str	r3, [r7, #12]
 8006116:	68b8      	ldr	r0, [r7, #8]
 8006118:	68f9      	ldr	r1, [r7, #12]
 800611a:	1900      	adds	r0, r0, r4
 800611c:	4169      	adcs	r1, r5
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	2300      	movs	r3, #0
 8006126:	607b      	str	r3, [r7, #4]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f7fa f9f6 	bl	800051c <__aeabi_uldivmod>
 8006130:	0002      	movs	r2, r0
 8006132:	000b      	movs	r3, r1
 8006134:	0013      	movs	r3, r2
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006138:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800613a:	23c0      	movs	r3, #192	; 0xc0
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	429a      	cmp	r2, r3
 8006140:	d309      	bcc.n	8006156 <UART_SetConfig+0x302>
 8006142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006144:	2380      	movs	r3, #128	; 0x80
 8006146:	035b      	lsls	r3, r3, #13
 8006148:	429a      	cmp	r2, r3
 800614a:	d204      	bcs.n	8006156 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006152:	60da      	str	r2, [r3, #12]
 8006154:	e0eb      	b.n	800632e <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8006156:	231a      	movs	r3, #26
 8006158:	2218      	movs	r2, #24
 800615a:	189b      	adds	r3, r3, r2
 800615c:	19db      	adds	r3, r3, r7
 800615e:	2201      	movs	r2, #1
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e0e4      	b.n	800632e <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	429a      	cmp	r2, r3
 800616e:	d000      	beq.n	8006172 <UART_SetConfig+0x31e>
 8006170:	e086      	b.n	8006280 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8006172:	231b      	movs	r3, #27
 8006174:	2218      	movs	r2, #24
 8006176:	189b      	adds	r3, r3, r2
 8006178:	19db      	adds	r3, r3, r7
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b08      	cmp	r3, #8
 800617e:	d837      	bhi.n	80061f0 <UART_SetConfig+0x39c>
 8006180:	009a      	lsls	r2, r3, #2
 8006182:	4b10      	ldr	r3, [pc, #64]	; (80061c4 <UART_SetConfig+0x370>)
 8006184:	18d3      	adds	r3, r2, r3
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800618a:	f7ff fbd7 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 800618e:	0003      	movs	r3, r0
 8006190:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006192:	e036      	b.n	8006202 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006194:	f7ff fbe8 	bl	8005968 <HAL_RCC_GetPCLK2Freq>
 8006198:	0003      	movs	r3, r0
 800619a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800619c:	e031      	b.n	8006202 <UART_SetConfig+0x3ae>
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	efff69f3 	.word	0xefff69f3
 80061a4:	ffffcfff 	.word	0xffffcfff
 80061a8:	40004800 	.word	0x40004800
 80061ac:	fffff4ff 	.word	0xfffff4ff
 80061b0:	40013800 	.word	0x40013800
 80061b4:	40021000 	.word	0x40021000
 80061b8:	40004400 	.word	0x40004400
 80061bc:	003d0900 	.word	0x003d0900
 80061c0:	00f42400 	.word	0x00f42400
 80061c4:	08009b80 	.word	0x08009b80
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c8:	4b60      	ldr	r3, [pc, #384]	; (800634c <UART_SetConfig+0x4f8>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	4013      	ands	r3, r2
 80061d0:	d002      	beq.n	80061d8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80061d2:	4b5f      	ldr	r3, [pc, #380]	; (8006350 <UART_SetConfig+0x4fc>)
 80061d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d6:	e014      	b.n	8006202 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80061d8:	4b5e      	ldr	r3, [pc, #376]	; (8006354 <UART_SetConfig+0x500>)
 80061da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061dc:	e011      	b.n	8006202 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061de:	f7ff fafd 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 80061e2:	0003      	movs	r3, r0
 80061e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061e6:	e00c      	b.n	8006202 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061e8:	2380      	movs	r3, #128	; 0x80
 80061ea:	021b      	lsls	r3, r3, #8
 80061ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80061ee:	e008      	b.n	8006202 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80061f0:	2300      	movs	r3, #0
 80061f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80061f4:	231a      	movs	r3, #26
 80061f6:	2218      	movs	r2, #24
 80061f8:	189b      	adds	r3, r3, r2
 80061fa:	19db      	adds	r3, r3, r7
 80061fc:	2201      	movs	r2, #1
 80061fe:	701a      	strb	r2, [r3, #0]
        break;
 8006200:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	2b00      	cmp	r3, #0
 8006206:	d100      	bne.n	800620a <UART_SetConfig+0x3b6>
 8006208:	e091      	b.n	800632e <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	005a      	lsls	r2, r3, #1
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	18d2      	adds	r2, r2, r3
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	0019      	movs	r1, r3
 800621c:	0010      	movs	r0, r2
 800621e:	f7f9 ff8f 	bl	8000140 <__udivsi3>
 8006222:	0003      	movs	r3, r0
 8006224:	b29b      	uxth	r3, r3
 8006226:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	2b0f      	cmp	r3, #15
 800622c:	d921      	bls.n	8006272 <UART_SetConfig+0x41e>
 800622e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	025b      	lsls	r3, r3, #9
 8006234:	429a      	cmp	r2, r3
 8006236:	d21c      	bcs.n	8006272 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	b29a      	uxth	r2, r3
 800623c:	200e      	movs	r0, #14
 800623e:	2418      	movs	r4, #24
 8006240:	1903      	adds	r3, r0, r4
 8006242:	19db      	adds	r3, r3, r7
 8006244:	210f      	movs	r1, #15
 8006246:	438a      	bics	r2, r1
 8006248:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800624a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800624c:	085b      	lsrs	r3, r3, #1
 800624e:	b29b      	uxth	r3, r3
 8006250:	2207      	movs	r2, #7
 8006252:	4013      	ands	r3, r2
 8006254:	b299      	uxth	r1, r3
 8006256:	1903      	adds	r3, r0, r4
 8006258:	19db      	adds	r3, r3, r7
 800625a:	1902      	adds	r2, r0, r4
 800625c:	19d2      	adds	r2, r2, r7
 800625e:	8812      	ldrh	r2, [r2, #0]
 8006260:	430a      	orrs	r2, r1
 8006262:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	1902      	adds	r2, r0, r4
 800626a:	19d2      	adds	r2, r2, r7
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	60da      	str	r2, [r3, #12]
 8006270:	e05d      	b.n	800632e <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8006272:	231a      	movs	r3, #26
 8006274:	2218      	movs	r2, #24
 8006276:	189b      	adds	r3, r3, r2
 8006278:	19db      	adds	r3, r3, r7
 800627a:	2201      	movs	r2, #1
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e056      	b.n	800632e <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006280:	231b      	movs	r3, #27
 8006282:	2218      	movs	r2, #24
 8006284:	189b      	adds	r3, r3, r2
 8006286:	19db      	adds	r3, r3, r7
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	2b08      	cmp	r3, #8
 800628c:	d822      	bhi.n	80062d4 <UART_SetConfig+0x480>
 800628e:	009a      	lsls	r2, r3, #2
 8006290:	4b31      	ldr	r3, [pc, #196]	; (8006358 <UART_SetConfig+0x504>)
 8006292:	18d3      	adds	r3, r2, r3
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006298:	f7ff fb50 	bl	800593c <HAL_RCC_GetPCLK1Freq>
 800629c:	0003      	movs	r3, r0
 800629e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a0:	e021      	b.n	80062e6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a2:	f7ff fb61 	bl	8005968 <HAL_RCC_GetPCLK2Freq>
 80062a6:	0003      	movs	r3, r0
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062aa:	e01c      	b.n	80062e6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ac:	4b27      	ldr	r3, [pc, #156]	; (800634c <UART_SetConfig+0x4f8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2210      	movs	r2, #16
 80062b2:	4013      	ands	r3, r2
 80062b4:	d002      	beq.n	80062bc <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80062b6:	4b26      	ldr	r3, [pc, #152]	; (8006350 <UART_SetConfig+0x4fc>)
 80062b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062ba:	e014      	b.n	80062e6 <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 80062bc:	4b25      	ldr	r3, [pc, #148]	; (8006354 <UART_SetConfig+0x500>)
 80062be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c0:	e011      	b.n	80062e6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c2:	f7ff fa8b 	bl	80057dc <HAL_RCC_GetSysClockFreq>
 80062c6:	0003      	movs	r3, r0
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ca:	e00c      	b.n	80062e6 <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062cc:	2380      	movs	r3, #128	; 0x80
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d2:	e008      	b.n	80062e6 <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062d8:	231a      	movs	r3, #26
 80062da:	2218      	movs	r2, #24
 80062dc:	189b      	adds	r3, r3, r2
 80062de:	19db      	adds	r3, r3, r7
 80062e0:	2201      	movs	r2, #1
 80062e2:	701a      	strb	r2, [r3, #0]
        break;
 80062e4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d020      	beq.n	800632e <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	085a      	lsrs	r2, r3, #1
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	18d2      	adds	r2, r2, r3
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	0019      	movs	r1, r3
 80062fc:	0010      	movs	r0, r2
 80062fe:	f7f9 ff1f 	bl	8000140 <__udivsi3>
 8006302:	0003      	movs	r3, r0
 8006304:	b29b      	uxth	r3, r3
 8006306:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630a:	2b0f      	cmp	r3, #15
 800630c:	d909      	bls.n	8006322 <UART_SetConfig+0x4ce>
 800630e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006310:	2380      	movs	r3, #128	; 0x80
 8006312:	025b      	lsls	r3, r3, #9
 8006314:	429a      	cmp	r2, r3
 8006316:	d204      	bcs.n	8006322 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631e:	60da      	str	r2, [r3, #12]
 8006320:	e005      	b.n	800632e <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8006322:	231a      	movs	r3, #26
 8006324:	2218      	movs	r2, #24
 8006326:	189b      	adds	r3, r3, r2
 8006328:	19db      	adds	r3, r3, r7
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	2200      	movs	r2, #0
 8006332:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2200      	movs	r2, #0
 8006338:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800633a:	231a      	movs	r3, #26
 800633c:	2218      	movs	r2, #24
 800633e:	189b      	adds	r3, r3, r2
 8006340:	19db      	adds	r3, r3, r7
 8006342:	781b      	ldrb	r3, [r3, #0]
}
 8006344:	0018      	movs	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	b00e      	add	sp, #56	; 0x38
 800634a:	bdb0      	pop	{r4, r5, r7, pc}
 800634c:	40021000 	.word	0x40021000
 8006350:	003d0900 	.word	0x003d0900
 8006354:	00f42400 	.word	0x00f42400
 8006358:	08009ba4 	.word	0x08009ba4

0800635c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	2201      	movs	r2, #1
 800636a:	4013      	ands	r3, r2
 800636c:	d00b      	beq.n	8006386 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	4a4a      	ldr	r2, [pc, #296]	; (80064a0 <UART_AdvFeatureConfig+0x144>)
 8006376:	4013      	ands	r3, r2
 8006378:	0019      	movs	r1, r3
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	430a      	orrs	r2, r1
 8006384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638a:	2202      	movs	r2, #2
 800638c:	4013      	ands	r3, r2
 800638e:	d00b      	beq.n	80063a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4a43      	ldr	r2, [pc, #268]	; (80064a4 <UART_AdvFeatureConfig+0x148>)
 8006398:	4013      	ands	r3, r2
 800639a:	0019      	movs	r1, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	430a      	orrs	r2, r1
 80063a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ac:	2204      	movs	r2, #4
 80063ae:	4013      	ands	r3, r2
 80063b0:	d00b      	beq.n	80063ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	4a3b      	ldr	r2, [pc, #236]	; (80064a8 <UART_AdvFeatureConfig+0x14c>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	0019      	movs	r1, r3
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2208      	movs	r2, #8
 80063d0:	4013      	ands	r3, r2
 80063d2:	d00b      	beq.n	80063ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	4a34      	ldr	r2, [pc, #208]	; (80064ac <UART_AdvFeatureConfig+0x150>)
 80063dc:	4013      	ands	r3, r2
 80063de:	0019      	movs	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	2210      	movs	r2, #16
 80063f2:	4013      	ands	r3, r2
 80063f4:	d00b      	beq.n	800640e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a2c      	ldr	r2, [pc, #176]	; (80064b0 <UART_AdvFeatureConfig+0x154>)
 80063fe:	4013      	ands	r3, r2
 8006400:	0019      	movs	r1, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	2220      	movs	r2, #32
 8006414:	4013      	ands	r3, r2
 8006416:	d00b      	beq.n	8006430 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	4a25      	ldr	r2, [pc, #148]	; (80064b4 <UART_AdvFeatureConfig+0x158>)
 8006420:	4013      	ands	r3, r2
 8006422:	0019      	movs	r1, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006434:	2240      	movs	r2, #64	; 0x40
 8006436:	4013      	ands	r3, r2
 8006438:	d01d      	beq.n	8006476 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <UART_AdvFeatureConfig+0x15c>)
 8006442:	4013      	ands	r3, r2
 8006444:	0019      	movs	r1, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	430a      	orrs	r2, r1
 8006450:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	035b      	lsls	r3, r3, #13
 800645a:	429a      	cmp	r2, r3
 800645c:	d10b      	bne.n	8006476 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4a15      	ldr	r2, [pc, #84]	; (80064bc <UART_AdvFeatureConfig+0x160>)
 8006466:	4013      	ands	r3, r2
 8006468:	0019      	movs	r1, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	2280      	movs	r2, #128	; 0x80
 800647c:	4013      	ands	r3, r2
 800647e:	d00b      	beq.n	8006498 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	4a0e      	ldr	r2, [pc, #56]	; (80064c0 <UART_AdvFeatureConfig+0x164>)
 8006488:	4013      	ands	r3, r2
 800648a:	0019      	movs	r1, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	430a      	orrs	r2, r1
 8006496:	605a      	str	r2, [r3, #4]
  }
}
 8006498:	46c0      	nop			; (mov r8, r8)
 800649a:	46bd      	mov	sp, r7
 800649c:	b002      	add	sp, #8
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	fffdffff 	.word	0xfffdffff
 80064a4:	fffeffff 	.word	0xfffeffff
 80064a8:	fffbffff 	.word	0xfffbffff
 80064ac:	ffff7fff 	.word	0xffff7fff
 80064b0:	ffffefff 	.word	0xffffefff
 80064b4:	ffffdfff 	.word	0xffffdfff
 80064b8:	ffefffff 	.word	0xffefffff
 80064bc:	ff9fffff 	.word	0xff9fffff
 80064c0:	fff7ffff 	.word	0xfff7ffff

080064c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2280      	movs	r2, #128	; 0x80
 80064d0:	2100      	movs	r1, #0
 80064d2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80064d4:	f7fd fc3c 	bl	8003d50 <HAL_GetTick>
 80064d8:	0003      	movs	r3, r0
 80064da:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2208      	movs	r2, #8
 80064e4:	4013      	ands	r3, r2
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d10c      	bne.n	8006504 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2280      	movs	r2, #128	; 0x80
 80064ee:	0391      	lsls	r1, r2, #14
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	4a17      	ldr	r2, [pc, #92]	; (8006550 <UART_CheckIdleState+0x8c>)
 80064f4:	9200      	str	r2, [sp, #0]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f000 f82c 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 80064fc:	1e03      	subs	r3, r0, #0
 80064fe:	d001      	beq.n	8006504 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e021      	b.n	8006548 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2204      	movs	r2, #4
 800650c:	4013      	ands	r3, r2
 800650e:	2b04      	cmp	r3, #4
 8006510:	d10c      	bne.n	800652c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2280      	movs	r2, #128	; 0x80
 8006516:	03d1      	lsls	r1, r2, #15
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	4a0d      	ldr	r2, [pc, #52]	; (8006550 <UART_CheckIdleState+0x8c>)
 800651c:	9200      	str	r2, [sp, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	f000 f818 	bl	8006554 <UART_WaitOnFlagUntilTimeout>
 8006524:	1e03      	subs	r3, r0, #0
 8006526:	d001      	beq.n	800652c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e00d      	b.n	8006548 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2220      	movs	r2, #32
 8006536:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2200      	movs	r2, #0
 800653c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2274      	movs	r2, #116	; 0x74
 8006542:	2100      	movs	r1, #0
 8006544:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	0018      	movs	r0, r3
 800654a:	46bd      	mov	sp, r7
 800654c:	b004      	add	sp, #16
 800654e:	bd80      	pop	{r7, pc}
 8006550:	01ffffff 	.word	0x01ffffff

08006554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b094      	sub	sp, #80	; 0x50
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	603b      	str	r3, [r7, #0]
 8006560:	1dfb      	adds	r3, r7, #7
 8006562:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006564:	e0a3      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006568:	3301      	adds	r3, #1
 800656a:	d100      	bne.n	800656e <UART_WaitOnFlagUntilTimeout+0x1a>
 800656c:	e09f      	b.n	80066ae <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800656e:	f7fd fbef 	bl	8003d50 <HAL_GetTick>
 8006572:	0002      	movs	r2, r0
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800657a:	429a      	cmp	r2, r3
 800657c:	d302      	bcc.n	8006584 <UART_WaitOnFlagUntilTimeout+0x30>
 800657e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006580:	2b00      	cmp	r3, #0
 8006582:	d13d      	bne.n	8006600 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006584:	f3ef 8310 	mrs	r3, PRIMASK
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800658c:	647b      	str	r3, [r7, #68]	; 0x44
 800658e:	2301      	movs	r3, #1
 8006590:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006594:	f383 8810 	msr	PRIMASK, r3
}
 8006598:	46c0      	nop			; (mov r8, r8)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	494c      	ldr	r1, [pc, #304]	; (80066d8 <UART_WaitOnFlagUntilTimeout+0x184>)
 80065a6:	400a      	ands	r2, r1
 80065a8:	601a      	str	r2, [r3, #0]
 80065aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b0:	f383 8810 	msr	PRIMASK, r3
}
 80065b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b6:	f3ef 8310 	mrs	r3, PRIMASK
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065be:	643b      	str	r3, [r7, #64]	; 0x40
 80065c0:	2301      	movs	r3, #1
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c6:	f383 8810 	msr	PRIMASK, r3
}
 80065ca:	46c0      	nop			; (mov r8, r8)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2101      	movs	r1, #1
 80065d8:	438a      	bics	r2, r1
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065de:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065e2:	f383 8810 	msr	PRIMASK, r3
}
 80065e6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2274      	movs	r2, #116	; 0x74
 80065f8:	2100      	movs	r1, #0
 80065fa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e067      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2204      	movs	r2, #4
 8006608:	4013      	ands	r3, r2
 800660a:	d050      	beq.n	80066ae <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	69da      	ldr	r2, [r3, #28]
 8006612:	2380      	movs	r3, #128	; 0x80
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	401a      	ands	r2, r3
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	011b      	lsls	r3, r3, #4
 800661c:	429a      	cmp	r2, r3
 800661e:	d146      	bne.n	80066ae <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2280      	movs	r2, #128	; 0x80
 8006626:	0112      	lsls	r2, r2, #4
 8006628:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800662a:	f3ef 8310 	mrs	r3, PRIMASK
 800662e:	613b      	str	r3, [r7, #16]
  return(result);
 8006630:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006634:	2301      	movs	r3, #1
 8006636:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f383 8810 	msr	PRIMASK, r3
}
 800663e:	46c0      	nop			; (mov r8, r8)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4923      	ldr	r1, [pc, #140]	; (80066d8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800664c:	400a      	ands	r2, r1
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006652:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	f383 8810 	msr	PRIMASK, r3
}
 800665a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800665c:	f3ef 8310 	mrs	r3, PRIMASK
 8006660:	61fb      	str	r3, [r7, #28]
  return(result);
 8006662:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006664:	64bb      	str	r3, [r7, #72]	; 0x48
 8006666:	2301      	movs	r3, #1
 8006668:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	f383 8810 	msr	PRIMASK, r3
}
 8006670:	46c0      	nop			; (mov r8, r8)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2101      	movs	r1, #1
 800667e:	438a      	bics	r2, r1
 8006680:	609a      	str	r2, [r3, #8]
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	f383 8810 	msr	PRIMASK, r3
}
 800668c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	2220      	movs	r2, #32
 8006692:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2220      	movs	r2, #32
 8006698:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2280      	movs	r2, #128	; 0x80
 800669e:	2120      	movs	r1, #32
 80066a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2274      	movs	r2, #116	; 0x74
 80066a6:	2100      	movs	r1, #0
 80066a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80066aa:	2303      	movs	r3, #3
 80066ac:	e010      	b.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	68ba      	ldr	r2, [r7, #8]
 80066b6:	4013      	ands	r3, r2
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	1ad3      	subs	r3, r2, r3
 80066bc:	425a      	negs	r2, r3
 80066be:	4153      	adcs	r3, r2
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	001a      	movs	r2, r3
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d100      	bne.n	80066ce <UART_WaitOnFlagUntilTimeout+0x17a>
 80066cc:	e74b      	b.n	8006566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ce:	2300      	movs	r3, #0
}
 80066d0:	0018      	movs	r0, r3
 80066d2:	46bd      	mov	sp, r7
 80066d4:	b014      	add	sp, #80	; 0x50
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	fffffe5f 	.word	0xfffffe5f

080066dc <__errno>:
 80066dc:	4b01      	ldr	r3, [pc, #4]	; (80066e4 <__errno+0x8>)
 80066de:	6818      	ldr	r0, [r3, #0]
 80066e0:	4770      	bx	lr
 80066e2:	46c0      	nop			; (mov r8, r8)
 80066e4:	2000000c 	.word	0x2000000c

080066e8 <__libc_init_array>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	2600      	movs	r6, #0
 80066ec:	4d0c      	ldr	r5, [pc, #48]	; (8006720 <__libc_init_array+0x38>)
 80066ee:	4c0d      	ldr	r4, [pc, #52]	; (8006724 <__libc_init_array+0x3c>)
 80066f0:	1b64      	subs	r4, r4, r5
 80066f2:	10a4      	asrs	r4, r4, #2
 80066f4:	42a6      	cmp	r6, r4
 80066f6:	d109      	bne.n	800670c <__libc_init_array+0x24>
 80066f8:	2600      	movs	r6, #0
 80066fa:	f003 f917 	bl	800992c <_init>
 80066fe:	4d0a      	ldr	r5, [pc, #40]	; (8006728 <__libc_init_array+0x40>)
 8006700:	4c0a      	ldr	r4, [pc, #40]	; (800672c <__libc_init_array+0x44>)
 8006702:	1b64      	subs	r4, r4, r5
 8006704:	10a4      	asrs	r4, r4, #2
 8006706:	42a6      	cmp	r6, r4
 8006708:	d105      	bne.n	8006716 <__libc_init_array+0x2e>
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	00b3      	lsls	r3, r6, #2
 800670e:	58eb      	ldr	r3, [r5, r3]
 8006710:	4798      	blx	r3
 8006712:	3601      	adds	r6, #1
 8006714:	e7ee      	b.n	80066f4 <__libc_init_array+0xc>
 8006716:	00b3      	lsls	r3, r6, #2
 8006718:	58eb      	ldr	r3, [r5, r3]
 800671a:	4798      	blx	r3
 800671c:	3601      	adds	r6, #1
 800671e:	e7f2      	b.n	8006706 <__libc_init_array+0x1e>
 8006720:	0800a020 	.word	0x0800a020
 8006724:	0800a020 	.word	0x0800a020
 8006728:	0800a020 	.word	0x0800a020
 800672c:	0800a024 	.word	0x0800a024

08006730 <memset>:
 8006730:	0003      	movs	r3, r0
 8006732:	1882      	adds	r2, r0, r2
 8006734:	4293      	cmp	r3, r2
 8006736:	d100      	bne.n	800673a <memset+0xa>
 8006738:	4770      	bx	lr
 800673a:	7019      	strb	r1, [r3, #0]
 800673c:	3301      	adds	r3, #1
 800673e:	e7f9      	b.n	8006734 <memset+0x4>

08006740 <__cvt>:
 8006740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006742:	001e      	movs	r6, r3
 8006744:	2300      	movs	r3, #0
 8006746:	0014      	movs	r4, r2
 8006748:	b08b      	sub	sp, #44	; 0x2c
 800674a:	429e      	cmp	r6, r3
 800674c:	da04      	bge.n	8006758 <__cvt+0x18>
 800674e:	2180      	movs	r1, #128	; 0x80
 8006750:	0609      	lsls	r1, r1, #24
 8006752:	1873      	adds	r3, r6, r1
 8006754:	001e      	movs	r6, r3
 8006756:	232d      	movs	r3, #45	; 0x2d
 8006758:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800675a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800675c:	7013      	strb	r3, [r2, #0]
 800675e:	2320      	movs	r3, #32
 8006760:	2203      	movs	r2, #3
 8006762:	439f      	bics	r7, r3
 8006764:	2f46      	cmp	r7, #70	; 0x46
 8006766:	d007      	beq.n	8006778 <__cvt+0x38>
 8006768:	003b      	movs	r3, r7
 800676a:	3b45      	subs	r3, #69	; 0x45
 800676c:	4259      	negs	r1, r3
 800676e:	414b      	adcs	r3, r1
 8006770:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006772:	3a01      	subs	r2, #1
 8006774:	18cb      	adds	r3, r1, r3
 8006776:	9310      	str	r3, [sp, #64]	; 0x40
 8006778:	ab09      	add	r3, sp, #36	; 0x24
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	ab08      	add	r3, sp, #32
 800677e:	9303      	str	r3, [sp, #12]
 8006780:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006782:	9200      	str	r2, [sp, #0]
 8006784:	9302      	str	r3, [sp, #8]
 8006786:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006788:	0022      	movs	r2, r4
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	0033      	movs	r3, r6
 800678e:	f000 fceb 	bl	8007168 <_dtoa_r>
 8006792:	0005      	movs	r5, r0
 8006794:	2f47      	cmp	r7, #71	; 0x47
 8006796:	d102      	bne.n	800679e <__cvt+0x5e>
 8006798:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800679a:	07db      	lsls	r3, r3, #31
 800679c:	d528      	bpl.n	80067f0 <__cvt+0xb0>
 800679e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80067a0:	18eb      	adds	r3, r5, r3
 80067a2:	9307      	str	r3, [sp, #28]
 80067a4:	2f46      	cmp	r7, #70	; 0x46
 80067a6:	d114      	bne.n	80067d2 <__cvt+0x92>
 80067a8:	782b      	ldrb	r3, [r5, #0]
 80067aa:	2b30      	cmp	r3, #48	; 0x30
 80067ac:	d10c      	bne.n	80067c8 <__cvt+0x88>
 80067ae:	2200      	movs	r2, #0
 80067b0:	2300      	movs	r3, #0
 80067b2:	0020      	movs	r0, r4
 80067b4:	0031      	movs	r1, r6
 80067b6:	f7f9 fe49 	bl	800044c <__aeabi_dcmpeq>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d104      	bne.n	80067c8 <__cvt+0x88>
 80067be:	2301      	movs	r3, #1
 80067c0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80067c2:	1a9b      	subs	r3, r3, r2
 80067c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80067ca:	9a07      	ldr	r2, [sp, #28]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	18d3      	adds	r3, r2, r3
 80067d0:	9307      	str	r3, [sp, #28]
 80067d2:	2200      	movs	r2, #0
 80067d4:	2300      	movs	r3, #0
 80067d6:	0020      	movs	r0, r4
 80067d8:	0031      	movs	r1, r6
 80067da:	f7f9 fe37 	bl	800044c <__aeabi_dcmpeq>
 80067de:	2800      	cmp	r0, #0
 80067e0:	d001      	beq.n	80067e6 <__cvt+0xa6>
 80067e2:	9b07      	ldr	r3, [sp, #28]
 80067e4:	9309      	str	r3, [sp, #36]	; 0x24
 80067e6:	2230      	movs	r2, #48	; 0x30
 80067e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067ea:	9907      	ldr	r1, [sp, #28]
 80067ec:	428b      	cmp	r3, r1
 80067ee:	d306      	bcc.n	80067fe <__cvt+0xbe>
 80067f0:	0028      	movs	r0, r5
 80067f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80067f6:	1b5b      	subs	r3, r3, r5
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	b00b      	add	sp, #44	; 0x2c
 80067fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	9109      	str	r1, [sp, #36]	; 0x24
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	e7f0      	b.n	80067e8 <__cvt+0xa8>

08006806 <__exponent>:
 8006806:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006808:	1c83      	adds	r3, r0, #2
 800680a:	b087      	sub	sp, #28
 800680c:	9303      	str	r3, [sp, #12]
 800680e:	0005      	movs	r5, r0
 8006810:	000c      	movs	r4, r1
 8006812:	232b      	movs	r3, #43	; 0x2b
 8006814:	7002      	strb	r2, [r0, #0]
 8006816:	2900      	cmp	r1, #0
 8006818:	da01      	bge.n	800681e <__exponent+0x18>
 800681a:	424c      	negs	r4, r1
 800681c:	3302      	adds	r3, #2
 800681e:	706b      	strb	r3, [r5, #1]
 8006820:	2c09      	cmp	r4, #9
 8006822:	dd31      	ble.n	8006888 <__exponent+0x82>
 8006824:	270a      	movs	r7, #10
 8006826:	ab04      	add	r3, sp, #16
 8006828:	1dde      	adds	r6, r3, #7
 800682a:	0020      	movs	r0, r4
 800682c:	0039      	movs	r1, r7
 800682e:	9601      	str	r6, [sp, #4]
 8006830:	f7f9 fdf6 	bl	8000420 <__aeabi_idivmod>
 8006834:	3e01      	subs	r6, #1
 8006836:	3130      	adds	r1, #48	; 0x30
 8006838:	0020      	movs	r0, r4
 800683a:	7031      	strb	r1, [r6, #0]
 800683c:	0039      	movs	r1, r7
 800683e:	9402      	str	r4, [sp, #8]
 8006840:	f7f9 fd08 	bl	8000254 <__divsi3>
 8006844:	9b02      	ldr	r3, [sp, #8]
 8006846:	0004      	movs	r4, r0
 8006848:	2b63      	cmp	r3, #99	; 0x63
 800684a:	dcee      	bgt.n	800682a <__exponent+0x24>
 800684c:	9b01      	ldr	r3, [sp, #4]
 800684e:	3430      	adds	r4, #48	; 0x30
 8006850:	1e9a      	subs	r2, r3, #2
 8006852:	0013      	movs	r3, r2
 8006854:	9903      	ldr	r1, [sp, #12]
 8006856:	7014      	strb	r4, [r2, #0]
 8006858:	a804      	add	r0, sp, #16
 800685a:	3007      	adds	r0, #7
 800685c:	4298      	cmp	r0, r3
 800685e:	d80e      	bhi.n	800687e <__exponent+0x78>
 8006860:	ab04      	add	r3, sp, #16
 8006862:	3307      	adds	r3, #7
 8006864:	2000      	movs	r0, #0
 8006866:	429a      	cmp	r2, r3
 8006868:	d804      	bhi.n	8006874 <__exponent+0x6e>
 800686a:	ab04      	add	r3, sp, #16
 800686c:	3009      	adds	r0, #9
 800686e:	18c0      	adds	r0, r0, r3
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	1ac0      	subs	r0, r0, r3
 8006874:	9b03      	ldr	r3, [sp, #12]
 8006876:	1818      	adds	r0, r3, r0
 8006878:	1b40      	subs	r0, r0, r5
 800687a:	b007      	add	sp, #28
 800687c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687e:	7818      	ldrb	r0, [r3, #0]
 8006880:	3301      	adds	r3, #1
 8006882:	7008      	strb	r0, [r1, #0]
 8006884:	3101      	adds	r1, #1
 8006886:	e7e7      	b.n	8006858 <__exponent+0x52>
 8006888:	2330      	movs	r3, #48	; 0x30
 800688a:	18e4      	adds	r4, r4, r3
 800688c:	70ab      	strb	r3, [r5, #2]
 800688e:	1d28      	adds	r0, r5, #4
 8006890:	70ec      	strb	r4, [r5, #3]
 8006892:	e7f1      	b.n	8006878 <__exponent+0x72>

08006894 <_printf_float>:
 8006894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006896:	b095      	sub	sp, #84	; 0x54
 8006898:	000c      	movs	r4, r1
 800689a:	9209      	str	r2, [sp, #36]	; 0x24
 800689c:	001e      	movs	r6, r3
 800689e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80068a0:	0007      	movs	r7, r0
 80068a2:	f001 fb7d 	bl	8007fa0 <_localeconv_r>
 80068a6:	6803      	ldr	r3, [r0, #0]
 80068a8:	0018      	movs	r0, r3
 80068aa:	930c      	str	r3, [sp, #48]	; 0x30
 80068ac:	f7f9 fc2c 	bl	8000108 <strlen>
 80068b0:	2300      	movs	r3, #0
 80068b2:	9312      	str	r3, [sp, #72]	; 0x48
 80068b4:	7e23      	ldrb	r3, [r4, #24]
 80068b6:	2207      	movs	r2, #7
 80068b8:	930a      	str	r3, [sp, #40]	; 0x28
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	900e      	str	r0, [sp, #56]	; 0x38
 80068be:	930d      	str	r3, [sp, #52]	; 0x34
 80068c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068c2:	682b      	ldr	r3, [r5, #0]
 80068c4:	05c9      	lsls	r1, r1, #23
 80068c6:	d547      	bpl.n	8006958 <_printf_float+0xc4>
 80068c8:	189b      	adds	r3, r3, r2
 80068ca:	4393      	bics	r3, r2
 80068cc:	001a      	movs	r2, r3
 80068ce:	3208      	adds	r2, #8
 80068d0:	602a      	str	r2, [r5, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	64a2      	str	r2, [r4, #72]	; 0x48
 80068d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80068da:	2201      	movs	r2, #1
 80068dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80068de:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80068e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80068e2:	006b      	lsls	r3, r5, #1
 80068e4:	085b      	lsrs	r3, r3, #1
 80068e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80068e8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80068ea:	4ba7      	ldr	r3, [pc, #668]	; (8006b88 <_printf_float+0x2f4>)
 80068ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80068ee:	4252      	negs	r2, r2
 80068f0:	f7fc f82c 	bl	800294c <__aeabi_dcmpun>
 80068f4:	2800      	cmp	r0, #0
 80068f6:	d131      	bne.n	800695c <_printf_float+0xc8>
 80068f8:	2201      	movs	r2, #1
 80068fa:	4ba3      	ldr	r3, [pc, #652]	; (8006b88 <_printf_float+0x2f4>)
 80068fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80068fe:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006900:	4252      	negs	r2, r2
 8006902:	f7f9 fdb3 	bl	800046c <__aeabi_dcmple>
 8006906:	2800      	cmp	r0, #0
 8006908:	d128      	bne.n	800695c <_printf_float+0xc8>
 800690a:	2200      	movs	r2, #0
 800690c:	2300      	movs	r3, #0
 800690e:	0029      	movs	r1, r5
 8006910:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006912:	f7f9 fda1 	bl	8000458 <__aeabi_dcmplt>
 8006916:	2800      	cmp	r0, #0
 8006918:	d003      	beq.n	8006922 <_printf_float+0x8e>
 800691a:	0023      	movs	r3, r4
 800691c:	222d      	movs	r2, #45	; 0x2d
 800691e:	3343      	adds	r3, #67	; 0x43
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006924:	4d99      	ldr	r5, [pc, #612]	; (8006b8c <_printf_float+0x2f8>)
 8006926:	2b47      	cmp	r3, #71	; 0x47
 8006928:	d900      	bls.n	800692c <_printf_float+0x98>
 800692a:	4d99      	ldr	r5, [pc, #612]	; (8006b90 <_printf_float+0x2fc>)
 800692c:	2303      	movs	r3, #3
 800692e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	3301      	adds	r3, #1
 8006934:	439a      	bics	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	6022      	str	r2, [r4, #0]
 800693a:	930b      	str	r3, [sp, #44]	; 0x2c
 800693c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800693e:	0021      	movs	r1, r4
 8006940:	0038      	movs	r0, r7
 8006942:	9600      	str	r6, [sp, #0]
 8006944:	aa13      	add	r2, sp, #76	; 0x4c
 8006946:	f000 f9e7 	bl	8006d18 <_printf_common>
 800694a:	1c43      	adds	r3, r0, #1
 800694c:	d000      	beq.n	8006950 <_printf_float+0xbc>
 800694e:	e0a2      	b.n	8006a96 <_printf_float+0x202>
 8006950:	2001      	movs	r0, #1
 8006952:	4240      	negs	r0, r0
 8006954:	b015      	add	sp, #84	; 0x54
 8006956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006958:	3307      	adds	r3, #7
 800695a:	e7b6      	b.n	80068ca <_printf_float+0x36>
 800695c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800695e:	002b      	movs	r3, r5
 8006960:	0010      	movs	r0, r2
 8006962:	0029      	movs	r1, r5
 8006964:	f7fb fff2 	bl	800294c <__aeabi_dcmpun>
 8006968:	2800      	cmp	r0, #0
 800696a:	d00b      	beq.n	8006984 <_printf_float+0xf0>
 800696c:	2d00      	cmp	r5, #0
 800696e:	da03      	bge.n	8006978 <_printf_float+0xe4>
 8006970:	0023      	movs	r3, r4
 8006972:	222d      	movs	r2, #45	; 0x2d
 8006974:	3343      	adds	r3, #67	; 0x43
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800697a:	4d86      	ldr	r5, [pc, #536]	; (8006b94 <_printf_float+0x300>)
 800697c:	2b47      	cmp	r3, #71	; 0x47
 800697e:	d9d5      	bls.n	800692c <_printf_float+0x98>
 8006980:	4d85      	ldr	r5, [pc, #532]	; (8006b98 <_printf_float+0x304>)
 8006982:	e7d3      	b.n	800692c <_printf_float+0x98>
 8006984:	2220      	movs	r2, #32
 8006986:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006988:	6863      	ldr	r3, [r4, #4]
 800698a:	4391      	bics	r1, r2
 800698c:	910f      	str	r1, [sp, #60]	; 0x3c
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	d149      	bne.n	8006a26 <_printf_float+0x192>
 8006992:	3307      	adds	r3, #7
 8006994:	6063      	str	r3, [r4, #4]
 8006996:	2380      	movs	r3, #128	; 0x80
 8006998:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	4313      	orrs	r3, r2
 800699e:	2200      	movs	r2, #0
 80069a0:	9206      	str	r2, [sp, #24]
 80069a2:	aa12      	add	r2, sp, #72	; 0x48
 80069a4:	9205      	str	r2, [sp, #20]
 80069a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80069a8:	a908      	add	r1, sp, #32
 80069aa:	9204      	str	r2, [sp, #16]
 80069ac:	aa11      	add	r2, sp, #68	; 0x44
 80069ae:	9203      	str	r2, [sp, #12]
 80069b0:	2223      	movs	r2, #35	; 0x23
 80069b2:	6023      	str	r3, [r4, #0]
 80069b4:	9301      	str	r3, [sp, #4]
 80069b6:	6863      	ldr	r3, [r4, #4]
 80069b8:	1852      	adds	r2, r2, r1
 80069ba:	9202      	str	r2, [sp, #8]
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	0038      	movs	r0, r7
 80069c0:	002b      	movs	r3, r5
 80069c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069c4:	f7ff febc 	bl	8006740 <__cvt>
 80069c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069ca:	0005      	movs	r5, r0
 80069cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80069ce:	2b47      	cmp	r3, #71	; 0x47
 80069d0:	d108      	bne.n	80069e4 <_printf_float+0x150>
 80069d2:	1ccb      	adds	r3, r1, #3
 80069d4:	db02      	blt.n	80069dc <_printf_float+0x148>
 80069d6:	6863      	ldr	r3, [r4, #4]
 80069d8:	4299      	cmp	r1, r3
 80069da:	dd48      	ble.n	8006a6e <_printf_float+0x1da>
 80069dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069de:	3b02      	subs	r3, #2
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	930a      	str	r3, [sp, #40]	; 0x28
 80069e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e6:	2b65      	cmp	r3, #101	; 0x65
 80069e8:	d824      	bhi.n	8006a34 <_printf_float+0x1a0>
 80069ea:	0020      	movs	r0, r4
 80069ec:	001a      	movs	r2, r3
 80069ee:	3901      	subs	r1, #1
 80069f0:	3050      	adds	r0, #80	; 0x50
 80069f2:	9111      	str	r1, [sp, #68]	; 0x44
 80069f4:	f7ff ff07 	bl	8006806 <__exponent>
 80069f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80069fc:	1813      	adds	r3, r2, r0
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	2a01      	cmp	r2, #1
 8006a02:	dc02      	bgt.n	8006a0a <_printf_float+0x176>
 8006a04:	6822      	ldr	r2, [r4, #0]
 8006a06:	07d2      	lsls	r2, r2, #31
 8006a08:	d501      	bpl.n	8006a0e <_printf_float+0x17a>
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	6123      	str	r3, [r4, #16]
 8006a0e:	2323      	movs	r3, #35	; 0x23
 8006a10:	aa08      	add	r2, sp, #32
 8006a12:	189b      	adds	r3, r3, r2
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d100      	bne.n	8006a1c <_printf_float+0x188>
 8006a1a:	e78f      	b.n	800693c <_printf_float+0xa8>
 8006a1c:	0023      	movs	r3, r4
 8006a1e:	222d      	movs	r2, #45	; 0x2d
 8006a20:	3343      	adds	r3, #67	; 0x43
 8006a22:	701a      	strb	r2, [r3, #0]
 8006a24:	e78a      	b.n	800693c <_printf_float+0xa8>
 8006a26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a28:	2a47      	cmp	r2, #71	; 0x47
 8006a2a:	d1b4      	bne.n	8006996 <_printf_float+0x102>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1b2      	bne.n	8006996 <_printf_float+0x102>
 8006a30:	3301      	adds	r3, #1
 8006a32:	e7af      	b.n	8006994 <_printf_float+0x100>
 8006a34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a36:	2b66      	cmp	r3, #102	; 0x66
 8006a38:	d11b      	bne.n	8006a72 <_printf_float+0x1de>
 8006a3a:	6863      	ldr	r3, [r4, #4]
 8006a3c:	2900      	cmp	r1, #0
 8006a3e:	dd0d      	ble.n	8006a5c <_printf_float+0x1c8>
 8006a40:	6121      	str	r1, [r4, #16]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <_printf_float+0x1b8>
 8006a46:	6822      	ldr	r2, [r4, #0]
 8006a48:	07d2      	lsls	r2, r2, #31
 8006a4a:	d502      	bpl.n	8006a52 <_printf_float+0x1be>
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	1859      	adds	r1, r3, r1
 8006a50:	6121      	str	r1, [r4, #16]
 8006a52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a54:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a56:	2300      	movs	r3, #0
 8006a58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a5a:	e7d8      	b.n	8006a0e <_printf_float+0x17a>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d103      	bne.n	8006a68 <_printf_float+0x1d4>
 8006a60:	2201      	movs	r2, #1
 8006a62:	6821      	ldr	r1, [r4, #0]
 8006a64:	4211      	tst	r1, r2
 8006a66:	d000      	beq.n	8006a6a <_printf_float+0x1d6>
 8006a68:	1c9a      	adds	r2, r3, #2
 8006a6a:	6122      	str	r2, [r4, #16]
 8006a6c:	e7f1      	b.n	8006a52 <_printf_float+0x1be>
 8006a6e:	2367      	movs	r3, #103	; 0x67
 8006a70:	930a      	str	r3, [sp, #40]	; 0x28
 8006a72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a76:	4293      	cmp	r3, r2
 8006a78:	db06      	blt.n	8006a88 <_printf_float+0x1f4>
 8006a7a:	6822      	ldr	r2, [r4, #0]
 8006a7c:	6123      	str	r3, [r4, #16]
 8006a7e:	07d2      	lsls	r2, r2, #31
 8006a80:	d5e7      	bpl.n	8006a52 <_printf_float+0x1be>
 8006a82:	3301      	adds	r3, #1
 8006a84:	6123      	str	r3, [r4, #16]
 8006a86:	e7e4      	b.n	8006a52 <_printf_float+0x1be>
 8006a88:	2101      	movs	r1, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dc01      	bgt.n	8006a92 <_printf_float+0x1fe>
 8006a8e:	1849      	adds	r1, r1, r1
 8006a90:	1ac9      	subs	r1, r1, r3
 8006a92:	1852      	adds	r2, r2, r1
 8006a94:	e7e9      	b.n	8006a6a <_printf_float+0x1d6>
 8006a96:	6822      	ldr	r2, [r4, #0]
 8006a98:	0553      	lsls	r3, r2, #21
 8006a9a:	d407      	bmi.n	8006aac <_printf_float+0x218>
 8006a9c:	6923      	ldr	r3, [r4, #16]
 8006a9e:	002a      	movs	r2, r5
 8006aa0:	0038      	movs	r0, r7
 8006aa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa4:	47b0      	blx	r6
 8006aa6:	1c43      	adds	r3, r0, #1
 8006aa8:	d128      	bne.n	8006afc <_printf_float+0x268>
 8006aaa:	e751      	b.n	8006950 <_printf_float+0xbc>
 8006aac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aae:	2b65      	cmp	r3, #101	; 0x65
 8006ab0:	d800      	bhi.n	8006ab4 <_printf_float+0x220>
 8006ab2:	e0e1      	b.n	8006c78 <_printf_float+0x3e4>
 8006ab4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ab6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2300      	movs	r3, #0
 8006abc:	f7f9 fcc6 	bl	800044c <__aeabi_dcmpeq>
 8006ac0:	2800      	cmp	r0, #0
 8006ac2:	d031      	beq.n	8006b28 <_printf_float+0x294>
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	0038      	movs	r0, r7
 8006ac8:	4a34      	ldr	r2, [pc, #208]	; (8006b9c <_printf_float+0x308>)
 8006aca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006acc:	47b0      	blx	r6
 8006ace:	1c43      	adds	r3, r0, #1
 8006ad0:	d100      	bne.n	8006ad4 <_printf_float+0x240>
 8006ad2:	e73d      	b.n	8006950 <_printf_float+0xbc>
 8006ad4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	db02      	blt.n	8006ae2 <_printf_float+0x24e>
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	07db      	lsls	r3, r3, #31
 8006ae0:	d50c      	bpl.n	8006afc <_printf_float+0x268>
 8006ae2:	0038      	movs	r0, r7
 8006ae4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aea:	47b0      	blx	r6
 8006aec:	2500      	movs	r5, #0
 8006aee:	1c43      	adds	r3, r0, #1
 8006af0:	d100      	bne.n	8006af4 <_printf_float+0x260>
 8006af2:	e72d      	b.n	8006950 <_printf_float+0xbc>
 8006af4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006af6:	3b01      	subs	r3, #1
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	dc0a      	bgt.n	8006b12 <_printf_float+0x27e>
 8006afc:	6823      	ldr	r3, [r4, #0]
 8006afe:	079b      	lsls	r3, r3, #30
 8006b00:	d500      	bpl.n	8006b04 <_printf_float+0x270>
 8006b02:	e106      	b.n	8006d12 <_printf_float+0x47e>
 8006b04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b06:	68e0      	ldr	r0, [r4, #12]
 8006b08:	4298      	cmp	r0, r3
 8006b0a:	db00      	blt.n	8006b0e <_printf_float+0x27a>
 8006b0c:	e722      	b.n	8006954 <_printf_float+0xc0>
 8006b0e:	0018      	movs	r0, r3
 8006b10:	e720      	b.n	8006954 <_printf_float+0xc0>
 8006b12:	0022      	movs	r2, r4
 8006b14:	2301      	movs	r3, #1
 8006b16:	0038      	movs	r0, r7
 8006b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b1a:	321a      	adds	r2, #26
 8006b1c:	47b0      	blx	r6
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d100      	bne.n	8006b24 <_printf_float+0x290>
 8006b22:	e715      	b.n	8006950 <_printf_float+0xbc>
 8006b24:	3501      	adds	r5, #1
 8006b26:	e7e5      	b.n	8006af4 <_printf_float+0x260>
 8006b28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	dc38      	bgt.n	8006ba0 <_printf_float+0x30c>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	0038      	movs	r0, r7
 8006b32:	4a1a      	ldr	r2, [pc, #104]	; (8006b9c <_printf_float+0x308>)
 8006b34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b36:	47b0      	blx	r6
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d100      	bne.n	8006b3e <_printf_float+0x2aa>
 8006b3c:	e708      	b.n	8006950 <_printf_float+0xbc>
 8006b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b40:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006b42:	4313      	orrs	r3, r2
 8006b44:	d102      	bne.n	8006b4c <_printf_float+0x2b8>
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	07db      	lsls	r3, r3, #31
 8006b4a:	d5d7      	bpl.n	8006afc <_printf_float+0x268>
 8006b4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b4e:	0038      	movs	r0, r7
 8006b50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006b52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b54:	47b0      	blx	r6
 8006b56:	1c43      	adds	r3, r0, #1
 8006b58:	d100      	bne.n	8006b5c <_printf_float+0x2c8>
 8006b5a:	e6f9      	b.n	8006950 <_printf_float+0xbc>
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b64:	425b      	negs	r3, r3
 8006b66:	4293      	cmp	r3, r2
 8006b68:	dc01      	bgt.n	8006b6e <_printf_float+0x2da>
 8006b6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b6c:	e797      	b.n	8006a9e <_printf_float+0x20a>
 8006b6e:	0022      	movs	r2, r4
 8006b70:	2301      	movs	r3, #1
 8006b72:	0038      	movs	r0, r7
 8006b74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b76:	321a      	adds	r2, #26
 8006b78:	47b0      	blx	r6
 8006b7a:	1c43      	adds	r3, r0, #1
 8006b7c:	d100      	bne.n	8006b80 <_printf_float+0x2ec>
 8006b7e:	e6e7      	b.n	8006950 <_printf_float+0xbc>
 8006b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b82:	3301      	adds	r3, #1
 8006b84:	e7eb      	b.n	8006b5e <_printf_float+0x2ca>
 8006b86:	46c0      	nop			; (mov r8, r8)
 8006b88:	7fefffff 	.word	0x7fefffff
 8006b8c:	08009bcc 	.word	0x08009bcc
 8006b90:	08009bd0 	.word	0x08009bd0
 8006b94:	08009bd4 	.word	0x08009bd4
 8006b98:	08009bd8 	.word	0x08009bd8
 8006b9c:	08009bdc 	.word	0x08009bdc
 8006ba0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ba2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006ba4:	920a      	str	r2, [sp, #40]	; 0x28
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	dd00      	ble.n	8006bac <_printf_float+0x318>
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	dc3c      	bgt.n	8006c2c <_printf_float+0x398>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	930d      	str	r3, [sp, #52]	; 0x34
 8006bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	17db      	asrs	r3, r3, #31
 8006bbc:	930f      	str	r3, [sp, #60]	; 0x3c
 8006bbe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006bc0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	dc34      	bgt.n	8006c3c <_printf_float+0x3a8>
 8006bd2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bd4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	db3d      	blt.n	8006c56 <_printf_float+0x3c2>
 8006bda:	6823      	ldr	r3, [r4, #0]
 8006bdc:	07db      	lsls	r3, r3, #31
 8006bde:	d43a      	bmi.n	8006c56 <_printf_float+0x3c2>
 8006be0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006be4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006be6:	1ad3      	subs	r3, r2, r3
 8006be8:	1a52      	subs	r2, r2, r1
 8006bea:	920a      	str	r2, [sp, #40]	; 0x28
 8006bec:	429a      	cmp	r2, r3
 8006bee:	dd00      	ble.n	8006bf2 <_printf_float+0x35e>
 8006bf0:	930a      	str	r3, [sp, #40]	; 0x28
 8006bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dc36      	bgt.n	8006c66 <_printf_float+0x3d2>
 8006bf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfa:	2500      	movs	r5, #0
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	17db      	asrs	r3, r3, #31
 8006c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c06:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006c08:	1a9b      	subs	r3, r3, r2
 8006c0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c0c:	400a      	ands	r2, r1
 8006c0e:	1a9b      	subs	r3, r3, r2
 8006c10:	42ab      	cmp	r3, r5
 8006c12:	dc00      	bgt.n	8006c16 <_printf_float+0x382>
 8006c14:	e772      	b.n	8006afc <_printf_float+0x268>
 8006c16:	0022      	movs	r2, r4
 8006c18:	2301      	movs	r3, #1
 8006c1a:	0038      	movs	r0, r7
 8006c1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c1e:	321a      	adds	r2, #26
 8006c20:	47b0      	blx	r6
 8006c22:	1c43      	adds	r3, r0, #1
 8006c24:	d100      	bne.n	8006c28 <_printf_float+0x394>
 8006c26:	e693      	b.n	8006950 <_printf_float+0xbc>
 8006c28:	3501      	adds	r5, #1
 8006c2a:	e7ea      	b.n	8006c02 <_printf_float+0x36e>
 8006c2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c2e:	002a      	movs	r2, r5
 8006c30:	0038      	movs	r0, r7
 8006c32:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c34:	47b0      	blx	r6
 8006c36:	1c43      	adds	r3, r0, #1
 8006c38:	d1bb      	bne.n	8006bb2 <_printf_float+0x31e>
 8006c3a:	e689      	b.n	8006950 <_printf_float+0xbc>
 8006c3c:	0022      	movs	r2, r4
 8006c3e:	2301      	movs	r3, #1
 8006c40:	0038      	movs	r0, r7
 8006c42:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c44:	321a      	adds	r2, #26
 8006c46:	47b0      	blx	r6
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d100      	bne.n	8006c4e <_printf_float+0x3ba>
 8006c4c:	e680      	b.n	8006950 <_printf_float+0xbc>
 8006c4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c50:	3301      	adds	r3, #1
 8006c52:	930d      	str	r3, [sp, #52]	; 0x34
 8006c54:	e7b3      	b.n	8006bbe <_printf_float+0x32a>
 8006c56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c58:	0038      	movs	r0, r7
 8006c5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c5e:	47b0      	blx	r6
 8006c60:	1c43      	adds	r3, r0, #1
 8006c62:	d1bd      	bne.n	8006be0 <_printf_float+0x34c>
 8006c64:	e674      	b.n	8006950 <_printf_float+0xbc>
 8006c66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c68:	0038      	movs	r0, r7
 8006c6a:	18ea      	adds	r2, r5, r3
 8006c6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c70:	47b0      	blx	r6
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d1c0      	bne.n	8006bf8 <_printf_float+0x364>
 8006c76:	e66b      	b.n	8006950 <_printf_float+0xbc>
 8006c78:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	dc02      	bgt.n	8006c84 <_printf_float+0x3f0>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	421a      	tst	r2, r3
 8006c82:	d034      	beq.n	8006cee <_printf_float+0x45a>
 8006c84:	2301      	movs	r3, #1
 8006c86:	002a      	movs	r2, r5
 8006c88:	0038      	movs	r0, r7
 8006c8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c8c:	47b0      	blx	r6
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	d100      	bne.n	8006c94 <_printf_float+0x400>
 8006c92:	e65d      	b.n	8006950 <_printf_float+0xbc>
 8006c94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006c96:	0038      	movs	r0, r7
 8006c98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9c:	47b0      	blx	r6
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d100      	bne.n	8006ca4 <_printf_float+0x410>
 8006ca2:	e655      	b.n	8006950 <_printf_float+0xbc>
 8006ca4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ca6:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ca8:	2200      	movs	r2, #0
 8006caa:	2300      	movs	r3, #0
 8006cac:	f7f9 fbce 	bl	800044c <__aeabi_dcmpeq>
 8006cb0:	2800      	cmp	r0, #0
 8006cb2:	d11a      	bne.n	8006cea <_printf_float+0x456>
 8006cb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cb6:	1c6a      	adds	r2, r5, #1
 8006cb8:	3b01      	subs	r3, #1
 8006cba:	0038      	movs	r0, r7
 8006cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cbe:	47b0      	blx	r6
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d10e      	bne.n	8006ce2 <_printf_float+0x44e>
 8006cc4:	e644      	b.n	8006950 <_printf_float+0xbc>
 8006cc6:	0022      	movs	r2, r4
 8006cc8:	2301      	movs	r3, #1
 8006cca:	0038      	movs	r0, r7
 8006ccc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cce:	321a      	adds	r2, #26
 8006cd0:	47b0      	blx	r6
 8006cd2:	1c43      	adds	r3, r0, #1
 8006cd4:	d100      	bne.n	8006cd8 <_printf_float+0x444>
 8006cd6:	e63b      	b.n	8006950 <_printf_float+0xbc>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	42ab      	cmp	r3, r5
 8006ce0:	dcf1      	bgt.n	8006cc6 <_printf_float+0x432>
 8006ce2:	0022      	movs	r2, r4
 8006ce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ce6:	3250      	adds	r2, #80	; 0x50
 8006ce8:	e6da      	b.n	8006aa0 <_printf_float+0x20c>
 8006cea:	2500      	movs	r5, #0
 8006cec:	e7f5      	b.n	8006cda <_printf_float+0x446>
 8006cee:	002a      	movs	r2, r5
 8006cf0:	e7e3      	b.n	8006cba <_printf_float+0x426>
 8006cf2:	0022      	movs	r2, r4
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	0038      	movs	r0, r7
 8006cf8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cfa:	3219      	adds	r2, #25
 8006cfc:	47b0      	blx	r6
 8006cfe:	1c43      	adds	r3, r0, #1
 8006d00:	d100      	bne.n	8006d04 <_printf_float+0x470>
 8006d02:	e625      	b.n	8006950 <_printf_float+0xbc>
 8006d04:	3501      	adds	r5, #1
 8006d06:	68e3      	ldr	r3, [r4, #12]
 8006d08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006d0a:	1a9b      	subs	r3, r3, r2
 8006d0c:	42ab      	cmp	r3, r5
 8006d0e:	dcf0      	bgt.n	8006cf2 <_printf_float+0x45e>
 8006d10:	e6f8      	b.n	8006b04 <_printf_float+0x270>
 8006d12:	2500      	movs	r5, #0
 8006d14:	e7f7      	b.n	8006d06 <_printf_float+0x472>
 8006d16:	46c0      	nop			; (mov r8, r8)

08006d18 <_printf_common>:
 8006d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d1a:	0015      	movs	r5, r2
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	688a      	ldr	r2, [r1, #8]
 8006d20:	690b      	ldr	r3, [r1, #16]
 8006d22:	000c      	movs	r4, r1
 8006d24:	9000      	str	r0, [sp, #0]
 8006d26:	4293      	cmp	r3, r2
 8006d28:	da00      	bge.n	8006d2c <_printf_common+0x14>
 8006d2a:	0013      	movs	r3, r2
 8006d2c:	0022      	movs	r2, r4
 8006d2e:	602b      	str	r3, [r5, #0]
 8006d30:	3243      	adds	r2, #67	; 0x43
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	2a00      	cmp	r2, #0
 8006d36:	d001      	beq.n	8006d3c <_printf_common+0x24>
 8006d38:	3301      	adds	r3, #1
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	6823      	ldr	r3, [r4, #0]
 8006d3e:	069b      	lsls	r3, r3, #26
 8006d40:	d502      	bpl.n	8006d48 <_printf_common+0x30>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	3302      	adds	r3, #2
 8006d46:	602b      	str	r3, [r5, #0]
 8006d48:	6822      	ldr	r2, [r4, #0]
 8006d4a:	2306      	movs	r3, #6
 8006d4c:	0017      	movs	r7, r2
 8006d4e:	401f      	ands	r7, r3
 8006d50:	421a      	tst	r2, r3
 8006d52:	d027      	beq.n	8006da4 <_printf_common+0x8c>
 8006d54:	0023      	movs	r3, r4
 8006d56:	3343      	adds	r3, #67	; 0x43
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	4193      	sbcs	r3, r2
 8006d5e:	6822      	ldr	r2, [r4, #0]
 8006d60:	0692      	lsls	r2, r2, #26
 8006d62:	d430      	bmi.n	8006dc6 <_printf_common+0xae>
 8006d64:	0022      	movs	r2, r4
 8006d66:	9901      	ldr	r1, [sp, #4]
 8006d68:	9800      	ldr	r0, [sp, #0]
 8006d6a:	9e08      	ldr	r6, [sp, #32]
 8006d6c:	3243      	adds	r2, #67	; 0x43
 8006d6e:	47b0      	blx	r6
 8006d70:	1c43      	adds	r3, r0, #1
 8006d72:	d025      	beq.n	8006dc0 <_printf_common+0xa8>
 8006d74:	2306      	movs	r3, #6
 8006d76:	6820      	ldr	r0, [r4, #0]
 8006d78:	682a      	ldr	r2, [r5, #0]
 8006d7a:	68e1      	ldr	r1, [r4, #12]
 8006d7c:	2500      	movs	r5, #0
 8006d7e:	4003      	ands	r3, r0
 8006d80:	2b04      	cmp	r3, #4
 8006d82:	d103      	bne.n	8006d8c <_printf_common+0x74>
 8006d84:	1a8d      	subs	r5, r1, r2
 8006d86:	43eb      	mvns	r3, r5
 8006d88:	17db      	asrs	r3, r3, #31
 8006d8a:	401d      	ands	r5, r3
 8006d8c:	68a3      	ldr	r3, [r4, #8]
 8006d8e:	6922      	ldr	r2, [r4, #16]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	dd01      	ble.n	8006d98 <_printf_common+0x80>
 8006d94:	1a9b      	subs	r3, r3, r2
 8006d96:	18ed      	adds	r5, r5, r3
 8006d98:	2700      	movs	r7, #0
 8006d9a:	42bd      	cmp	r5, r7
 8006d9c:	d120      	bne.n	8006de0 <_printf_common+0xc8>
 8006d9e:	2000      	movs	r0, #0
 8006da0:	e010      	b.n	8006dc4 <_printf_common+0xac>
 8006da2:	3701      	adds	r7, #1
 8006da4:	68e3      	ldr	r3, [r4, #12]
 8006da6:	682a      	ldr	r2, [r5, #0]
 8006da8:	1a9b      	subs	r3, r3, r2
 8006daa:	42bb      	cmp	r3, r7
 8006dac:	ddd2      	ble.n	8006d54 <_printf_common+0x3c>
 8006dae:	0022      	movs	r2, r4
 8006db0:	2301      	movs	r3, #1
 8006db2:	9901      	ldr	r1, [sp, #4]
 8006db4:	9800      	ldr	r0, [sp, #0]
 8006db6:	9e08      	ldr	r6, [sp, #32]
 8006db8:	3219      	adds	r2, #25
 8006dba:	47b0      	blx	r6
 8006dbc:	1c43      	adds	r3, r0, #1
 8006dbe:	d1f0      	bne.n	8006da2 <_printf_common+0x8a>
 8006dc0:	2001      	movs	r0, #1
 8006dc2:	4240      	negs	r0, r0
 8006dc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006dc6:	2030      	movs	r0, #48	; 0x30
 8006dc8:	18e1      	adds	r1, r4, r3
 8006dca:	3143      	adds	r1, #67	; 0x43
 8006dcc:	7008      	strb	r0, [r1, #0]
 8006dce:	0021      	movs	r1, r4
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	3145      	adds	r1, #69	; 0x45
 8006dd4:	7809      	ldrb	r1, [r1, #0]
 8006dd6:	18a2      	adds	r2, r4, r2
 8006dd8:	3243      	adds	r2, #67	; 0x43
 8006dda:	3302      	adds	r3, #2
 8006ddc:	7011      	strb	r1, [r2, #0]
 8006dde:	e7c1      	b.n	8006d64 <_printf_common+0x4c>
 8006de0:	0022      	movs	r2, r4
 8006de2:	2301      	movs	r3, #1
 8006de4:	9901      	ldr	r1, [sp, #4]
 8006de6:	9800      	ldr	r0, [sp, #0]
 8006de8:	9e08      	ldr	r6, [sp, #32]
 8006dea:	321a      	adds	r2, #26
 8006dec:	47b0      	blx	r6
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	d0e6      	beq.n	8006dc0 <_printf_common+0xa8>
 8006df2:	3701      	adds	r7, #1
 8006df4:	e7d1      	b.n	8006d9a <_printf_common+0x82>
	...

08006df8 <_printf_i>:
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	b08b      	sub	sp, #44	; 0x2c
 8006dfc:	9206      	str	r2, [sp, #24]
 8006dfe:	000a      	movs	r2, r1
 8006e00:	3243      	adds	r2, #67	; 0x43
 8006e02:	9307      	str	r3, [sp, #28]
 8006e04:	9005      	str	r0, [sp, #20]
 8006e06:	9204      	str	r2, [sp, #16]
 8006e08:	7e0a      	ldrb	r2, [r1, #24]
 8006e0a:	000c      	movs	r4, r1
 8006e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e0e:	2a78      	cmp	r2, #120	; 0x78
 8006e10:	d807      	bhi.n	8006e22 <_printf_i+0x2a>
 8006e12:	2a62      	cmp	r2, #98	; 0x62
 8006e14:	d809      	bhi.n	8006e2a <_printf_i+0x32>
 8006e16:	2a00      	cmp	r2, #0
 8006e18:	d100      	bne.n	8006e1c <_printf_i+0x24>
 8006e1a:	e0c1      	b.n	8006fa0 <_printf_i+0x1a8>
 8006e1c:	2a58      	cmp	r2, #88	; 0x58
 8006e1e:	d100      	bne.n	8006e22 <_printf_i+0x2a>
 8006e20:	e08c      	b.n	8006f3c <_printf_i+0x144>
 8006e22:	0026      	movs	r6, r4
 8006e24:	3642      	adds	r6, #66	; 0x42
 8006e26:	7032      	strb	r2, [r6, #0]
 8006e28:	e022      	b.n	8006e70 <_printf_i+0x78>
 8006e2a:	0010      	movs	r0, r2
 8006e2c:	3863      	subs	r0, #99	; 0x63
 8006e2e:	2815      	cmp	r0, #21
 8006e30:	d8f7      	bhi.n	8006e22 <_printf_i+0x2a>
 8006e32:	f7f9 f97b 	bl	800012c <__gnu_thumb1_case_shi>
 8006e36:	0016      	.short	0x0016
 8006e38:	fff6001f 	.word	0xfff6001f
 8006e3c:	fff6fff6 	.word	0xfff6fff6
 8006e40:	001ffff6 	.word	0x001ffff6
 8006e44:	fff6fff6 	.word	0xfff6fff6
 8006e48:	fff6fff6 	.word	0xfff6fff6
 8006e4c:	003600a8 	.word	0x003600a8
 8006e50:	fff6009a 	.word	0xfff6009a
 8006e54:	00b9fff6 	.word	0x00b9fff6
 8006e58:	0036fff6 	.word	0x0036fff6
 8006e5c:	fff6fff6 	.word	0xfff6fff6
 8006e60:	009e      	.short	0x009e
 8006e62:	0026      	movs	r6, r4
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	3642      	adds	r6, #66	; 0x42
 8006e68:	1d11      	adds	r1, r2, #4
 8006e6a:	6019      	str	r1, [r3, #0]
 8006e6c:	6813      	ldr	r3, [r2, #0]
 8006e6e:	7033      	strb	r3, [r6, #0]
 8006e70:	2301      	movs	r3, #1
 8006e72:	e0a7      	b.n	8006fc4 <_printf_i+0x1cc>
 8006e74:	6808      	ldr	r0, [r1, #0]
 8006e76:	6819      	ldr	r1, [r3, #0]
 8006e78:	1d0a      	adds	r2, r1, #4
 8006e7a:	0605      	lsls	r5, r0, #24
 8006e7c:	d50b      	bpl.n	8006e96 <_printf_i+0x9e>
 8006e7e:	680d      	ldr	r5, [r1, #0]
 8006e80:	601a      	str	r2, [r3, #0]
 8006e82:	2d00      	cmp	r5, #0
 8006e84:	da03      	bge.n	8006e8e <_printf_i+0x96>
 8006e86:	232d      	movs	r3, #45	; 0x2d
 8006e88:	9a04      	ldr	r2, [sp, #16]
 8006e8a:	426d      	negs	r5, r5
 8006e8c:	7013      	strb	r3, [r2, #0]
 8006e8e:	4b61      	ldr	r3, [pc, #388]	; (8007014 <_printf_i+0x21c>)
 8006e90:	270a      	movs	r7, #10
 8006e92:	9303      	str	r3, [sp, #12]
 8006e94:	e01b      	b.n	8006ece <_printf_i+0xd6>
 8006e96:	680d      	ldr	r5, [r1, #0]
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	0641      	lsls	r1, r0, #25
 8006e9c:	d5f1      	bpl.n	8006e82 <_printf_i+0x8a>
 8006e9e:	b22d      	sxth	r5, r5
 8006ea0:	e7ef      	b.n	8006e82 <_printf_i+0x8a>
 8006ea2:	680d      	ldr	r5, [r1, #0]
 8006ea4:	6819      	ldr	r1, [r3, #0]
 8006ea6:	1d08      	adds	r0, r1, #4
 8006ea8:	6018      	str	r0, [r3, #0]
 8006eaa:	062e      	lsls	r6, r5, #24
 8006eac:	d501      	bpl.n	8006eb2 <_printf_i+0xba>
 8006eae:	680d      	ldr	r5, [r1, #0]
 8006eb0:	e003      	b.n	8006eba <_printf_i+0xc2>
 8006eb2:	066d      	lsls	r5, r5, #25
 8006eb4:	d5fb      	bpl.n	8006eae <_printf_i+0xb6>
 8006eb6:	680d      	ldr	r5, [r1, #0]
 8006eb8:	b2ad      	uxth	r5, r5
 8006eba:	4b56      	ldr	r3, [pc, #344]	; (8007014 <_printf_i+0x21c>)
 8006ebc:	2708      	movs	r7, #8
 8006ebe:	9303      	str	r3, [sp, #12]
 8006ec0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ec2:	d000      	beq.n	8006ec6 <_printf_i+0xce>
 8006ec4:	3702      	adds	r7, #2
 8006ec6:	0023      	movs	r3, r4
 8006ec8:	2200      	movs	r2, #0
 8006eca:	3343      	adds	r3, #67	; 0x43
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	6863      	ldr	r3, [r4, #4]
 8006ed0:	60a3      	str	r3, [r4, #8]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	db03      	blt.n	8006ede <_printf_i+0xe6>
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	6821      	ldr	r1, [r4, #0]
 8006eda:	4391      	bics	r1, r2
 8006edc:	6021      	str	r1, [r4, #0]
 8006ede:	2d00      	cmp	r5, #0
 8006ee0:	d102      	bne.n	8006ee8 <_printf_i+0xf0>
 8006ee2:	9e04      	ldr	r6, [sp, #16]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00c      	beq.n	8006f02 <_printf_i+0x10a>
 8006ee8:	9e04      	ldr	r6, [sp, #16]
 8006eea:	0028      	movs	r0, r5
 8006eec:	0039      	movs	r1, r7
 8006eee:	f7f9 f9ad 	bl	800024c <__aeabi_uidivmod>
 8006ef2:	9b03      	ldr	r3, [sp, #12]
 8006ef4:	3e01      	subs	r6, #1
 8006ef6:	5c5b      	ldrb	r3, [r3, r1]
 8006ef8:	7033      	strb	r3, [r6, #0]
 8006efa:	002b      	movs	r3, r5
 8006efc:	0005      	movs	r5, r0
 8006efe:	429f      	cmp	r7, r3
 8006f00:	d9f3      	bls.n	8006eea <_printf_i+0xf2>
 8006f02:	2f08      	cmp	r7, #8
 8006f04:	d109      	bne.n	8006f1a <_printf_i+0x122>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	07db      	lsls	r3, r3, #31
 8006f0a:	d506      	bpl.n	8006f1a <_printf_i+0x122>
 8006f0c:	6863      	ldr	r3, [r4, #4]
 8006f0e:	6922      	ldr	r2, [r4, #16]
 8006f10:	4293      	cmp	r3, r2
 8006f12:	dc02      	bgt.n	8006f1a <_printf_i+0x122>
 8006f14:	2330      	movs	r3, #48	; 0x30
 8006f16:	3e01      	subs	r6, #1
 8006f18:	7033      	strb	r3, [r6, #0]
 8006f1a:	9b04      	ldr	r3, [sp, #16]
 8006f1c:	1b9b      	subs	r3, r3, r6
 8006f1e:	6123      	str	r3, [r4, #16]
 8006f20:	9b07      	ldr	r3, [sp, #28]
 8006f22:	0021      	movs	r1, r4
 8006f24:	9300      	str	r3, [sp, #0]
 8006f26:	9805      	ldr	r0, [sp, #20]
 8006f28:	9b06      	ldr	r3, [sp, #24]
 8006f2a:	aa09      	add	r2, sp, #36	; 0x24
 8006f2c:	f7ff fef4 	bl	8006d18 <_printf_common>
 8006f30:	1c43      	adds	r3, r0, #1
 8006f32:	d14c      	bne.n	8006fce <_printf_i+0x1d6>
 8006f34:	2001      	movs	r0, #1
 8006f36:	4240      	negs	r0, r0
 8006f38:	b00b      	add	sp, #44	; 0x2c
 8006f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f3c:	3145      	adds	r1, #69	; 0x45
 8006f3e:	700a      	strb	r2, [r1, #0]
 8006f40:	4a34      	ldr	r2, [pc, #208]	; (8007014 <_printf_i+0x21c>)
 8006f42:	9203      	str	r2, [sp, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	6821      	ldr	r1, [r4, #0]
 8006f48:	ca20      	ldmia	r2!, {r5}
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	0608      	lsls	r0, r1, #24
 8006f4e:	d516      	bpl.n	8006f7e <_printf_i+0x186>
 8006f50:	07cb      	lsls	r3, r1, #31
 8006f52:	d502      	bpl.n	8006f5a <_printf_i+0x162>
 8006f54:	2320      	movs	r3, #32
 8006f56:	4319      	orrs	r1, r3
 8006f58:	6021      	str	r1, [r4, #0]
 8006f5a:	2710      	movs	r7, #16
 8006f5c:	2d00      	cmp	r5, #0
 8006f5e:	d1b2      	bne.n	8006ec6 <_printf_i+0xce>
 8006f60:	2320      	movs	r3, #32
 8006f62:	6822      	ldr	r2, [r4, #0]
 8006f64:	439a      	bics	r2, r3
 8006f66:	6022      	str	r2, [r4, #0]
 8006f68:	e7ad      	b.n	8006ec6 <_printf_i+0xce>
 8006f6a:	2220      	movs	r2, #32
 8006f6c:	6809      	ldr	r1, [r1, #0]
 8006f6e:	430a      	orrs	r2, r1
 8006f70:	6022      	str	r2, [r4, #0]
 8006f72:	0022      	movs	r2, r4
 8006f74:	2178      	movs	r1, #120	; 0x78
 8006f76:	3245      	adds	r2, #69	; 0x45
 8006f78:	7011      	strb	r1, [r2, #0]
 8006f7a:	4a27      	ldr	r2, [pc, #156]	; (8007018 <_printf_i+0x220>)
 8006f7c:	e7e1      	b.n	8006f42 <_printf_i+0x14a>
 8006f7e:	0648      	lsls	r0, r1, #25
 8006f80:	d5e6      	bpl.n	8006f50 <_printf_i+0x158>
 8006f82:	b2ad      	uxth	r5, r5
 8006f84:	e7e4      	b.n	8006f50 <_printf_i+0x158>
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	680d      	ldr	r5, [r1, #0]
 8006f8a:	1d10      	adds	r0, r2, #4
 8006f8c:	6949      	ldr	r1, [r1, #20]
 8006f8e:	6018      	str	r0, [r3, #0]
 8006f90:	6813      	ldr	r3, [r2, #0]
 8006f92:	062e      	lsls	r6, r5, #24
 8006f94:	d501      	bpl.n	8006f9a <_printf_i+0x1a2>
 8006f96:	6019      	str	r1, [r3, #0]
 8006f98:	e002      	b.n	8006fa0 <_printf_i+0x1a8>
 8006f9a:	066d      	lsls	r5, r5, #25
 8006f9c:	d5fb      	bpl.n	8006f96 <_printf_i+0x19e>
 8006f9e:	8019      	strh	r1, [r3, #0]
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9e04      	ldr	r6, [sp, #16]
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	e7bb      	b.n	8006f20 <_printf_i+0x128>
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	1d11      	adds	r1, r2, #4
 8006fac:	6019      	str	r1, [r3, #0]
 8006fae:	6816      	ldr	r6, [r2, #0]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	0030      	movs	r0, r6
 8006fb4:	6862      	ldr	r2, [r4, #4]
 8006fb6:	f001 f805 	bl	8007fc4 <memchr>
 8006fba:	2800      	cmp	r0, #0
 8006fbc:	d001      	beq.n	8006fc2 <_printf_i+0x1ca>
 8006fbe:	1b80      	subs	r0, r0, r6
 8006fc0:	6060      	str	r0, [r4, #4]
 8006fc2:	6863      	ldr	r3, [r4, #4]
 8006fc4:	6123      	str	r3, [r4, #16]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9a04      	ldr	r2, [sp, #16]
 8006fca:	7013      	strb	r3, [r2, #0]
 8006fcc:	e7a8      	b.n	8006f20 <_printf_i+0x128>
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	0032      	movs	r2, r6
 8006fd2:	9906      	ldr	r1, [sp, #24]
 8006fd4:	9805      	ldr	r0, [sp, #20]
 8006fd6:	9d07      	ldr	r5, [sp, #28]
 8006fd8:	47a8      	blx	r5
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d0aa      	beq.n	8006f34 <_printf_i+0x13c>
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	079b      	lsls	r3, r3, #30
 8006fe2:	d415      	bmi.n	8007010 <_printf_i+0x218>
 8006fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fe6:	68e0      	ldr	r0, [r4, #12]
 8006fe8:	4298      	cmp	r0, r3
 8006fea:	daa5      	bge.n	8006f38 <_printf_i+0x140>
 8006fec:	0018      	movs	r0, r3
 8006fee:	e7a3      	b.n	8006f38 <_printf_i+0x140>
 8006ff0:	0022      	movs	r2, r4
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	9906      	ldr	r1, [sp, #24]
 8006ff6:	9805      	ldr	r0, [sp, #20]
 8006ff8:	9e07      	ldr	r6, [sp, #28]
 8006ffa:	3219      	adds	r2, #25
 8006ffc:	47b0      	blx	r6
 8006ffe:	1c43      	adds	r3, r0, #1
 8007000:	d098      	beq.n	8006f34 <_printf_i+0x13c>
 8007002:	3501      	adds	r5, #1
 8007004:	68e3      	ldr	r3, [r4, #12]
 8007006:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	42ab      	cmp	r3, r5
 800700c:	dcf0      	bgt.n	8006ff0 <_printf_i+0x1f8>
 800700e:	e7e9      	b.n	8006fe4 <_printf_i+0x1ec>
 8007010:	2500      	movs	r5, #0
 8007012:	e7f7      	b.n	8007004 <_printf_i+0x20c>
 8007014:	08009bde 	.word	0x08009bde
 8007018:	08009bef 	.word	0x08009bef

0800701c <iprintf>:
 800701c:	b40f      	push	{r0, r1, r2, r3}
 800701e:	4b0b      	ldr	r3, [pc, #44]	; (800704c <iprintf+0x30>)
 8007020:	b513      	push	{r0, r1, r4, lr}
 8007022:	681c      	ldr	r4, [r3, #0]
 8007024:	2c00      	cmp	r4, #0
 8007026:	d005      	beq.n	8007034 <iprintf+0x18>
 8007028:	69a3      	ldr	r3, [r4, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d102      	bne.n	8007034 <iprintf+0x18>
 800702e:	0020      	movs	r0, r4
 8007030:	f000 ff16 	bl	8007e60 <__sinit>
 8007034:	ab05      	add	r3, sp, #20
 8007036:	0020      	movs	r0, r4
 8007038:	9a04      	ldr	r2, [sp, #16]
 800703a:	68a1      	ldr	r1, [r4, #8]
 800703c:	9301      	str	r3, [sp, #4]
 800703e:	f001 fca7 	bl	8008990 <_vfiprintf_r>
 8007042:	bc16      	pop	{r1, r2, r4}
 8007044:	bc08      	pop	{r3}
 8007046:	b004      	add	sp, #16
 8007048:	4718      	bx	r3
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	2000000c 	.word	0x2000000c

08007050 <quorem>:
 8007050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007052:	0006      	movs	r6, r0
 8007054:	690b      	ldr	r3, [r1, #16]
 8007056:	6932      	ldr	r2, [r6, #16]
 8007058:	b087      	sub	sp, #28
 800705a:	2000      	movs	r0, #0
 800705c:	9103      	str	r1, [sp, #12]
 800705e:	429a      	cmp	r2, r3
 8007060:	db65      	blt.n	800712e <quorem+0xde>
 8007062:	3b01      	subs	r3, #1
 8007064:	009c      	lsls	r4, r3, #2
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	000b      	movs	r3, r1
 800706a:	3314      	adds	r3, #20
 800706c:	9305      	str	r3, [sp, #20]
 800706e:	191b      	adds	r3, r3, r4
 8007070:	9304      	str	r3, [sp, #16]
 8007072:	0033      	movs	r3, r6
 8007074:	3314      	adds	r3, #20
 8007076:	9302      	str	r3, [sp, #8]
 8007078:	191c      	adds	r4, r3, r4
 800707a:	9b04      	ldr	r3, [sp, #16]
 800707c:	6827      	ldr	r7, [r4, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	0038      	movs	r0, r7
 8007082:	1c5d      	adds	r5, r3, #1
 8007084:	0029      	movs	r1, r5
 8007086:	9301      	str	r3, [sp, #4]
 8007088:	f7f9 f85a 	bl	8000140 <__udivsi3>
 800708c:	9001      	str	r0, [sp, #4]
 800708e:	42af      	cmp	r7, r5
 8007090:	d324      	bcc.n	80070dc <quorem+0x8c>
 8007092:	2500      	movs	r5, #0
 8007094:	46ac      	mov	ip, r5
 8007096:	9802      	ldr	r0, [sp, #8]
 8007098:	9f05      	ldr	r7, [sp, #20]
 800709a:	cf08      	ldmia	r7!, {r3}
 800709c:	9a01      	ldr	r2, [sp, #4]
 800709e:	b299      	uxth	r1, r3
 80070a0:	4351      	muls	r1, r2
 80070a2:	0c1b      	lsrs	r3, r3, #16
 80070a4:	4353      	muls	r3, r2
 80070a6:	1949      	adds	r1, r1, r5
 80070a8:	0c0a      	lsrs	r2, r1, #16
 80070aa:	189b      	adds	r3, r3, r2
 80070ac:	6802      	ldr	r2, [r0, #0]
 80070ae:	b289      	uxth	r1, r1
 80070b0:	b292      	uxth	r2, r2
 80070b2:	4462      	add	r2, ip
 80070b4:	1a52      	subs	r2, r2, r1
 80070b6:	6801      	ldr	r1, [r0, #0]
 80070b8:	0c1d      	lsrs	r5, r3, #16
 80070ba:	0c09      	lsrs	r1, r1, #16
 80070bc:	b29b      	uxth	r3, r3
 80070be:	1acb      	subs	r3, r1, r3
 80070c0:	1411      	asrs	r1, r2, #16
 80070c2:	185b      	adds	r3, r3, r1
 80070c4:	1419      	asrs	r1, r3, #16
 80070c6:	b292      	uxth	r2, r2
 80070c8:	041b      	lsls	r3, r3, #16
 80070ca:	431a      	orrs	r2, r3
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	468c      	mov	ip, r1
 80070d0:	c004      	stmia	r0!, {r2}
 80070d2:	42bb      	cmp	r3, r7
 80070d4:	d2e1      	bcs.n	800709a <quorem+0x4a>
 80070d6:	6823      	ldr	r3, [r4, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d030      	beq.n	800713e <quorem+0xee>
 80070dc:	0030      	movs	r0, r6
 80070de:	9903      	ldr	r1, [sp, #12]
 80070e0:	f001 fa08 	bl	80084f4 <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	db21      	blt.n	800712c <quorem+0xdc>
 80070e8:	0030      	movs	r0, r6
 80070ea:	2400      	movs	r4, #0
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	9903      	ldr	r1, [sp, #12]
 80070f0:	3301      	adds	r3, #1
 80070f2:	9301      	str	r3, [sp, #4]
 80070f4:	3014      	adds	r0, #20
 80070f6:	3114      	adds	r1, #20
 80070f8:	6803      	ldr	r3, [r0, #0]
 80070fa:	c920      	ldmia	r1!, {r5}
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	1914      	adds	r4, r2, r4
 8007100:	b2aa      	uxth	r2, r5
 8007102:	1aa2      	subs	r2, r4, r2
 8007104:	0c1b      	lsrs	r3, r3, #16
 8007106:	0c2d      	lsrs	r5, r5, #16
 8007108:	1414      	asrs	r4, r2, #16
 800710a:	1b5b      	subs	r3, r3, r5
 800710c:	191b      	adds	r3, r3, r4
 800710e:	141c      	asrs	r4, r3, #16
 8007110:	b292      	uxth	r2, r2
 8007112:	041b      	lsls	r3, r3, #16
 8007114:	4313      	orrs	r3, r2
 8007116:	c008      	stmia	r0!, {r3}
 8007118:	9b04      	ldr	r3, [sp, #16]
 800711a:	428b      	cmp	r3, r1
 800711c:	d2ec      	bcs.n	80070f8 <quorem+0xa8>
 800711e:	9b00      	ldr	r3, [sp, #0]
 8007120:	9a02      	ldr	r2, [sp, #8]
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	18d3      	adds	r3, r2, r3
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	2a00      	cmp	r2, #0
 800712a:	d015      	beq.n	8007158 <quorem+0x108>
 800712c:	9801      	ldr	r0, [sp, #4]
 800712e:	b007      	add	sp, #28
 8007130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007132:	6823      	ldr	r3, [r4, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d106      	bne.n	8007146 <quorem+0xf6>
 8007138:	9b00      	ldr	r3, [sp, #0]
 800713a:	3b01      	subs	r3, #1
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	9b02      	ldr	r3, [sp, #8]
 8007140:	3c04      	subs	r4, #4
 8007142:	42a3      	cmp	r3, r4
 8007144:	d3f5      	bcc.n	8007132 <quorem+0xe2>
 8007146:	9b00      	ldr	r3, [sp, #0]
 8007148:	6133      	str	r3, [r6, #16]
 800714a:	e7c7      	b.n	80070dc <quorem+0x8c>
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	2a00      	cmp	r2, #0
 8007150:	d106      	bne.n	8007160 <quorem+0x110>
 8007152:	9a00      	ldr	r2, [sp, #0]
 8007154:	3a01      	subs	r2, #1
 8007156:	9200      	str	r2, [sp, #0]
 8007158:	9a02      	ldr	r2, [sp, #8]
 800715a:	3b04      	subs	r3, #4
 800715c:	429a      	cmp	r2, r3
 800715e:	d3f5      	bcc.n	800714c <quorem+0xfc>
 8007160:	9b00      	ldr	r3, [sp, #0]
 8007162:	6133      	str	r3, [r6, #16]
 8007164:	e7e2      	b.n	800712c <quorem+0xdc>
	...

08007168 <_dtoa_r>:
 8007168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800716a:	b09d      	sub	sp, #116	; 0x74
 800716c:	9202      	str	r2, [sp, #8]
 800716e:	9303      	str	r3, [sp, #12]
 8007170:	9b02      	ldr	r3, [sp, #8]
 8007172:	9c03      	ldr	r4, [sp, #12]
 8007174:	9308      	str	r3, [sp, #32]
 8007176:	9409      	str	r4, [sp, #36]	; 0x24
 8007178:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800717a:	0007      	movs	r7, r0
 800717c:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800717e:	2c00      	cmp	r4, #0
 8007180:	d10e      	bne.n	80071a0 <_dtoa_r+0x38>
 8007182:	2010      	movs	r0, #16
 8007184:	f000 ff14 	bl	8007fb0 <malloc>
 8007188:	1e02      	subs	r2, r0, #0
 800718a:	6278      	str	r0, [r7, #36]	; 0x24
 800718c:	d104      	bne.n	8007198 <_dtoa_r+0x30>
 800718e:	21ea      	movs	r1, #234	; 0xea
 8007190:	4bc7      	ldr	r3, [pc, #796]	; (80074b0 <_dtoa_r+0x348>)
 8007192:	48c8      	ldr	r0, [pc, #800]	; (80074b4 <_dtoa_r+0x34c>)
 8007194:	f001 fe76 	bl	8008e84 <__assert_func>
 8007198:	6044      	str	r4, [r0, #4]
 800719a:	6084      	str	r4, [r0, #8]
 800719c:	6004      	str	r4, [r0, #0]
 800719e:	60c4      	str	r4, [r0, #12]
 80071a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a2:	6819      	ldr	r1, [r3, #0]
 80071a4:	2900      	cmp	r1, #0
 80071a6:	d00a      	beq.n	80071be <_dtoa_r+0x56>
 80071a8:	685a      	ldr	r2, [r3, #4]
 80071aa:	2301      	movs	r3, #1
 80071ac:	4093      	lsls	r3, r2
 80071ae:	604a      	str	r2, [r1, #4]
 80071b0:	608b      	str	r3, [r1, #8]
 80071b2:	0038      	movs	r0, r7
 80071b4:	f000 ff5e 	bl	8008074 <_Bfree>
 80071b8:	2200      	movs	r2, #0
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	601a      	str	r2, [r3, #0]
 80071be:	9b03      	ldr	r3, [sp, #12]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da20      	bge.n	8007206 <_dtoa_r+0x9e>
 80071c4:	2301      	movs	r3, #1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	9b03      	ldr	r3, [sp, #12]
 80071ca:	005b      	lsls	r3, r3, #1
 80071cc:	085b      	lsrs	r3, r3, #1
 80071ce:	9309      	str	r3, [sp, #36]	; 0x24
 80071d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80071d2:	4bb9      	ldr	r3, [pc, #740]	; (80074b8 <_dtoa_r+0x350>)
 80071d4:	4ab8      	ldr	r2, [pc, #736]	; (80074b8 <_dtoa_r+0x350>)
 80071d6:	402b      	ands	r3, r5
 80071d8:	4293      	cmp	r3, r2
 80071da:	d117      	bne.n	800720c <_dtoa_r+0xa4>
 80071dc:	4bb7      	ldr	r3, [pc, #732]	; (80074bc <_dtoa_r+0x354>)
 80071de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80071e0:	0328      	lsls	r0, r5, #12
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	0b00      	lsrs	r0, r0, #12
 80071e8:	4318      	orrs	r0, r3
 80071ea:	d101      	bne.n	80071f0 <_dtoa_r+0x88>
 80071ec:	f000 fdbf 	bl	8007d6e <_dtoa_r+0xc06>
 80071f0:	48b3      	ldr	r0, [pc, #716]	; (80074c0 <_dtoa_r+0x358>)
 80071f2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80071f4:	9006      	str	r0, [sp, #24]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d002      	beq.n	8007200 <_dtoa_r+0x98>
 80071fa:	4bb2      	ldr	r3, [pc, #712]	; (80074c4 <_dtoa_r+0x35c>)
 80071fc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80071fe:	6013      	str	r3, [r2, #0]
 8007200:	9806      	ldr	r0, [sp, #24]
 8007202:	b01d      	add	sp, #116	; 0x74
 8007204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007206:	2300      	movs	r3, #0
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	e7e1      	b.n	80071d0 <_dtoa_r+0x68>
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8007210:	9312      	str	r3, [sp, #72]	; 0x48
 8007212:	9413      	str	r4, [sp, #76]	; 0x4c
 8007214:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007216:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	f7f9 f916 	bl	800044c <__aeabi_dcmpeq>
 8007220:	1e04      	subs	r4, r0, #0
 8007222:	d009      	beq.n	8007238 <_dtoa_r+0xd0>
 8007224:	2301      	movs	r3, #1
 8007226:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007228:	6013      	str	r3, [r2, #0]
 800722a:	4ba7      	ldr	r3, [pc, #668]	; (80074c8 <_dtoa_r+0x360>)
 800722c:	9306      	str	r3, [sp, #24]
 800722e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007230:	2b00      	cmp	r3, #0
 8007232:	d0e5      	beq.n	8007200 <_dtoa_r+0x98>
 8007234:	4ba5      	ldr	r3, [pc, #660]	; (80074cc <_dtoa_r+0x364>)
 8007236:	e7e1      	b.n	80071fc <_dtoa_r+0x94>
 8007238:	ab1a      	add	r3, sp, #104	; 0x68
 800723a:	9301      	str	r3, [sp, #4]
 800723c:	ab1b      	add	r3, sp, #108	; 0x6c
 800723e:	9300      	str	r3, [sp, #0]
 8007240:	0038      	movs	r0, r7
 8007242:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007246:	f001 fa09 	bl	800865c <__d2b>
 800724a:	006e      	lsls	r6, r5, #1
 800724c:	9005      	str	r0, [sp, #20]
 800724e:	0d76      	lsrs	r6, r6, #21
 8007250:	d100      	bne.n	8007254 <_dtoa_r+0xec>
 8007252:	e07c      	b.n	800734e <_dtoa_r+0x1e6>
 8007254:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007256:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007258:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800725a:	4a9d      	ldr	r2, [pc, #628]	; (80074d0 <_dtoa_r+0x368>)
 800725c:	031b      	lsls	r3, r3, #12
 800725e:	0b1b      	lsrs	r3, r3, #12
 8007260:	431a      	orrs	r2, r3
 8007262:	0011      	movs	r1, r2
 8007264:	4b9b      	ldr	r3, [pc, #620]	; (80074d4 <_dtoa_r+0x36c>)
 8007266:	9418      	str	r4, [sp, #96]	; 0x60
 8007268:	18f6      	adds	r6, r6, r3
 800726a:	2200      	movs	r2, #0
 800726c:	4b9a      	ldr	r3, [pc, #616]	; (80074d8 <_dtoa_r+0x370>)
 800726e:	f7fa ffdb 	bl	8002228 <__aeabi_dsub>
 8007272:	4a9a      	ldr	r2, [pc, #616]	; (80074dc <_dtoa_r+0x374>)
 8007274:	4b9a      	ldr	r3, [pc, #616]	; (80074e0 <_dtoa_r+0x378>)
 8007276:	f7fa fd6b 	bl	8001d50 <__aeabi_dmul>
 800727a:	4a9a      	ldr	r2, [pc, #616]	; (80074e4 <_dtoa_r+0x37c>)
 800727c:	4b9a      	ldr	r3, [pc, #616]	; (80074e8 <_dtoa_r+0x380>)
 800727e:	f7f9 fe29 	bl	8000ed4 <__aeabi_dadd>
 8007282:	0004      	movs	r4, r0
 8007284:	0030      	movs	r0, r6
 8007286:	000d      	movs	r5, r1
 8007288:	f7fb fbb4 	bl	80029f4 <__aeabi_i2d>
 800728c:	4a97      	ldr	r2, [pc, #604]	; (80074ec <_dtoa_r+0x384>)
 800728e:	4b98      	ldr	r3, [pc, #608]	; (80074f0 <_dtoa_r+0x388>)
 8007290:	f7fa fd5e 	bl	8001d50 <__aeabi_dmul>
 8007294:	0002      	movs	r2, r0
 8007296:	000b      	movs	r3, r1
 8007298:	0020      	movs	r0, r4
 800729a:	0029      	movs	r1, r5
 800729c:	f7f9 fe1a 	bl	8000ed4 <__aeabi_dadd>
 80072a0:	0004      	movs	r4, r0
 80072a2:	000d      	movs	r5, r1
 80072a4:	f7fb fb70 	bl	8002988 <__aeabi_d2iz>
 80072a8:	2200      	movs	r2, #0
 80072aa:	9002      	str	r0, [sp, #8]
 80072ac:	2300      	movs	r3, #0
 80072ae:	0020      	movs	r0, r4
 80072b0:	0029      	movs	r1, r5
 80072b2:	f7f9 f8d1 	bl	8000458 <__aeabi_dcmplt>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	d00b      	beq.n	80072d2 <_dtoa_r+0x16a>
 80072ba:	9802      	ldr	r0, [sp, #8]
 80072bc:	f7fb fb9a 	bl	80029f4 <__aeabi_i2d>
 80072c0:	002b      	movs	r3, r5
 80072c2:	0022      	movs	r2, r4
 80072c4:	f7f9 f8c2 	bl	800044c <__aeabi_dcmpeq>
 80072c8:	4243      	negs	r3, r0
 80072ca:	4158      	adcs	r0, r3
 80072cc:	9b02      	ldr	r3, [sp, #8]
 80072ce:	1a1b      	subs	r3, r3, r0
 80072d0:	9302      	str	r3, [sp, #8]
 80072d2:	2301      	movs	r3, #1
 80072d4:	9316      	str	r3, [sp, #88]	; 0x58
 80072d6:	9b02      	ldr	r3, [sp, #8]
 80072d8:	2b16      	cmp	r3, #22
 80072da:	d80f      	bhi.n	80072fc <_dtoa_r+0x194>
 80072dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072e0:	00da      	lsls	r2, r3, #3
 80072e2:	4b84      	ldr	r3, [pc, #528]	; (80074f4 <_dtoa_r+0x38c>)
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f7f9 f8b5 	bl	8000458 <__aeabi_dcmplt>
 80072ee:	2800      	cmp	r0, #0
 80072f0:	d049      	beq.n	8007386 <_dtoa_r+0x21e>
 80072f2:	9b02      	ldr	r3, [sp, #8]
 80072f4:	3b01      	subs	r3, #1
 80072f6:	9302      	str	r3, [sp, #8]
 80072f8:	2300      	movs	r3, #0
 80072fa:	9316      	str	r3, [sp, #88]	; 0x58
 80072fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80072fe:	1b9e      	subs	r6, r3, r6
 8007300:	2300      	movs	r3, #0
 8007302:	930a      	str	r3, [sp, #40]	; 0x28
 8007304:	0033      	movs	r3, r6
 8007306:	3b01      	subs	r3, #1
 8007308:	930d      	str	r3, [sp, #52]	; 0x34
 800730a:	d504      	bpl.n	8007316 <_dtoa_r+0x1ae>
 800730c:	2301      	movs	r3, #1
 800730e:	1b9b      	subs	r3, r3, r6
 8007310:	930a      	str	r3, [sp, #40]	; 0x28
 8007312:	2300      	movs	r3, #0
 8007314:	930d      	str	r3, [sp, #52]	; 0x34
 8007316:	9b02      	ldr	r3, [sp, #8]
 8007318:	2b00      	cmp	r3, #0
 800731a:	db36      	blt.n	800738a <_dtoa_r+0x222>
 800731c:	9a02      	ldr	r2, [sp, #8]
 800731e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007320:	4694      	mov	ip, r2
 8007322:	4463      	add	r3, ip
 8007324:	930d      	str	r3, [sp, #52]	; 0x34
 8007326:	2300      	movs	r3, #0
 8007328:	9215      	str	r2, [sp, #84]	; 0x54
 800732a:	930e      	str	r3, [sp, #56]	; 0x38
 800732c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800732e:	2401      	movs	r4, #1
 8007330:	2b09      	cmp	r3, #9
 8007332:	d864      	bhi.n	80073fe <_dtoa_r+0x296>
 8007334:	2b05      	cmp	r3, #5
 8007336:	dd02      	ble.n	800733e <_dtoa_r+0x1d6>
 8007338:	2400      	movs	r4, #0
 800733a:	3b04      	subs	r3, #4
 800733c:	9322      	str	r3, [sp, #136]	; 0x88
 800733e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007340:	1e98      	subs	r0, r3, #2
 8007342:	2803      	cmp	r0, #3
 8007344:	d864      	bhi.n	8007410 <_dtoa_r+0x2a8>
 8007346:	f7f8 fee7 	bl	8000118 <__gnu_thumb1_case_uqi>
 800734a:	3829      	.short	0x3829
 800734c:	5836      	.short	0x5836
 800734e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007350:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007352:	189e      	adds	r6, r3, r2
 8007354:	4b68      	ldr	r3, [pc, #416]	; (80074f8 <_dtoa_r+0x390>)
 8007356:	18f2      	adds	r2, r6, r3
 8007358:	2a20      	cmp	r2, #32
 800735a:	dd0f      	ble.n	800737c <_dtoa_r+0x214>
 800735c:	2340      	movs	r3, #64	; 0x40
 800735e:	1a9b      	subs	r3, r3, r2
 8007360:	409d      	lsls	r5, r3
 8007362:	4b66      	ldr	r3, [pc, #408]	; (80074fc <_dtoa_r+0x394>)
 8007364:	9802      	ldr	r0, [sp, #8]
 8007366:	18f3      	adds	r3, r6, r3
 8007368:	40d8      	lsrs	r0, r3
 800736a:	4328      	orrs	r0, r5
 800736c:	f7fb fb72 	bl	8002a54 <__aeabi_ui2d>
 8007370:	2301      	movs	r3, #1
 8007372:	4c63      	ldr	r4, [pc, #396]	; (8007500 <_dtoa_r+0x398>)
 8007374:	3e01      	subs	r6, #1
 8007376:	1909      	adds	r1, r1, r4
 8007378:	9318      	str	r3, [sp, #96]	; 0x60
 800737a:	e776      	b.n	800726a <_dtoa_r+0x102>
 800737c:	2320      	movs	r3, #32
 800737e:	9802      	ldr	r0, [sp, #8]
 8007380:	1a9b      	subs	r3, r3, r2
 8007382:	4098      	lsls	r0, r3
 8007384:	e7f2      	b.n	800736c <_dtoa_r+0x204>
 8007386:	9016      	str	r0, [sp, #88]	; 0x58
 8007388:	e7b8      	b.n	80072fc <_dtoa_r+0x194>
 800738a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800738c:	9a02      	ldr	r2, [sp, #8]
 800738e:	1a9b      	subs	r3, r3, r2
 8007390:	930a      	str	r3, [sp, #40]	; 0x28
 8007392:	4253      	negs	r3, r2
 8007394:	930e      	str	r3, [sp, #56]	; 0x38
 8007396:	2300      	movs	r3, #0
 8007398:	9315      	str	r3, [sp, #84]	; 0x54
 800739a:	e7c7      	b.n	800732c <_dtoa_r+0x1c4>
 800739c:	2300      	movs	r3, #0
 800739e:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80073a2:	930c      	str	r3, [sp, #48]	; 0x30
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	dc13      	bgt.n	80073d2 <_dtoa_r+0x26a>
 80073aa:	2301      	movs	r3, #1
 80073ac:	001a      	movs	r2, r3
 80073ae:	930c      	str	r3, [sp, #48]	; 0x30
 80073b0:	9307      	str	r3, [sp, #28]
 80073b2:	9223      	str	r2, [sp, #140]	; 0x8c
 80073b4:	e00d      	b.n	80073d2 <_dtoa_r+0x26a>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e7f1      	b.n	800739e <_dtoa_r+0x236>
 80073ba:	2300      	movs	r3, #0
 80073bc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80073be:	930f      	str	r3, [sp, #60]	; 0x3c
 80073c0:	4694      	mov	ip, r2
 80073c2:	9b02      	ldr	r3, [sp, #8]
 80073c4:	4463      	add	r3, ip
 80073c6:	930c      	str	r3, [sp, #48]	; 0x30
 80073c8:	3301      	adds	r3, #1
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dc00      	bgt.n	80073d2 <_dtoa_r+0x26a>
 80073d0:	2301      	movs	r3, #1
 80073d2:	2200      	movs	r2, #0
 80073d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073d6:	6042      	str	r2, [r0, #4]
 80073d8:	3204      	adds	r2, #4
 80073da:	0015      	movs	r5, r2
 80073dc:	3514      	adds	r5, #20
 80073de:	6841      	ldr	r1, [r0, #4]
 80073e0:	429d      	cmp	r5, r3
 80073e2:	d919      	bls.n	8007418 <_dtoa_r+0x2b0>
 80073e4:	0038      	movs	r0, r7
 80073e6:	f000 fe01 	bl	8007fec <_Balloc>
 80073ea:	9006      	str	r0, [sp, #24]
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d117      	bne.n	8007420 <_dtoa_r+0x2b8>
 80073f0:	21d5      	movs	r1, #213	; 0xd5
 80073f2:	0002      	movs	r2, r0
 80073f4:	4b43      	ldr	r3, [pc, #268]	; (8007504 <_dtoa_r+0x39c>)
 80073f6:	0049      	lsls	r1, r1, #1
 80073f8:	e6cb      	b.n	8007192 <_dtoa_r+0x2a>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e7de      	b.n	80073bc <_dtoa_r+0x254>
 80073fe:	2300      	movs	r3, #0
 8007400:	940f      	str	r4, [sp, #60]	; 0x3c
 8007402:	9322      	str	r3, [sp, #136]	; 0x88
 8007404:	3b01      	subs	r3, #1
 8007406:	930c      	str	r3, [sp, #48]	; 0x30
 8007408:	9307      	str	r3, [sp, #28]
 800740a:	2200      	movs	r2, #0
 800740c:	3313      	adds	r3, #19
 800740e:	e7d0      	b.n	80073b2 <_dtoa_r+0x24a>
 8007410:	2301      	movs	r3, #1
 8007412:	930f      	str	r3, [sp, #60]	; 0x3c
 8007414:	3b02      	subs	r3, #2
 8007416:	e7f6      	b.n	8007406 <_dtoa_r+0x29e>
 8007418:	3101      	adds	r1, #1
 800741a:	6041      	str	r1, [r0, #4]
 800741c:	0052      	lsls	r2, r2, #1
 800741e:	e7dc      	b.n	80073da <_dtoa_r+0x272>
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	9a06      	ldr	r2, [sp, #24]
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	9b07      	ldr	r3, [sp, #28]
 8007428:	2b0e      	cmp	r3, #14
 800742a:	d900      	bls.n	800742e <_dtoa_r+0x2c6>
 800742c:	e0eb      	b.n	8007606 <_dtoa_r+0x49e>
 800742e:	2c00      	cmp	r4, #0
 8007430:	d100      	bne.n	8007434 <_dtoa_r+0x2cc>
 8007432:	e0e8      	b.n	8007606 <_dtoa_r+0x49e>
 8007434:	9b02      	ldr	r3, [sp, #8]
 8007436:	2b00      	cmp	r3, #0
 8007438:	dd68      	ble.n	800750c <_dtoa_r+0x3a4>
 800743a:	001a      	movs	r2, r3
 800743c:	210f      	movs	r1, #15
 800743e:	4b2d      	ldr	r3, [pc, #180]	; (80074f4 <_dtoa_r+0x38c>)
 8007440:	400a      	ands	r2, r1
 8007442:	00d2      	lsls	r2, r2, #3
 8007444:	189b      	adds	r3, r3, r2
 8007446:	681d      	ldr	r5, [r3, #0]
 8007448:	685e      	ldr	r6, [r3, #4]
 800744a:	9b02      	ldr	r3, [sp, #8]
 800744c:	111c      	asrs	r4, r3, #4
 800744e:	2302      	movs	r3, #2
 8007450:	9310      	str	r3, [sp, #64]	; 0x40
 8007452:	9b02      	ldr	r3, [sp, #8]
 8007454:	05db      	lsls	r3, r3, #23
 8007456:	d50b      	bpl.n	8007470 <_dtoa_r+0x308>
 8007458:	4b2b      	ldr	r3, [pc, #172]	; (8007508 <_dtoa_r+0x3a0>)
 800745a:	400c      	ands	r4, r1
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007460:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007462:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007464:	f7fa f872 	bl	800154c <__aeabi_ddiv>
 8007468:	2303      	movs	r3, #3
 800746a:	9008      	str	r0, [sp, #32]
 800746c:	9109      	str	r1, [sp, #36]	; 0x24
 800746e:	9310      	str	r3, [sp, #64]	; 0x40
 8007470:	4b25      	ldr	r3, [pc, #148]	; (8007508 <_dtoa_r+0x3a0>)
 8007472:	9314      	str	r3, [sp, #80]	; 0x50
 8007474:	2c00      	cmp	r4, #0
 8007476:	d108      	bne.n	800748a <_dtoa_r+0x322>
 8007478:	9808      	ldr	r0, [sp, #32]
 800747a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800747c:	002a      	movs	r2, r5
 800747e:	0033      	movs	r3, r6
 8007480:	f7fa f864 	bl	800154c <__aeabi_ddiv>
 8007484:	9008      	str	r0, [sp, #32]
 8007486:	9109      	str	r1, [sp, #36]	; 0x24
 8007488:	e05c      	b.n	8007544 <_dtoa_r+0x3dc>
 800748a:	2301      	movs	r3, #1
 800748c:	421c      	tst	r4, r3
 800748e:	d00b      	beq.n	80074a8 <_dtoa_r+0x340>
 8007490:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007492:	0028      	movs	r0, r5
 8007494:	3301      	adds	r3, #1
 8007496:	9310      	str	r3, [sp, #64]	; 0x40
 8007498:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800749a:	0031      	movs	r1, r6
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f7fa fc56 	bl	8001d50 <__aeabi_dmul>
 80074a4:	0005      	movs	r5, r0
 80074a6:	000e      	movs	r6, r1
 80074a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074aa:	1064      	asrs	r4, r4, #1
 80074ac:	3308      	adds	r3, #8
 80074ae:	e7e0      	b.n	8007472 <_dtoa_r+0x30a>
 80074b0:	08009c0d 	.word	0x08009c0d
 80074b4:	08009c24 	.word	0x08009c24
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	0000270f 	.word	0x0000270f
 80074c0:	08009c09 	.word	0x08009c09
 80074c4:	08009c0c 	.word	0x08009c0c
 80074c8:	08009bdc 	.word	0x08009bdc
 80074cc:	08009bdd 	.word	0x08009bdd
 80074d0:	3ff00000 	.word	0x3ff00000
 80074d4:	fffffc01 	.word	0xfffffc01
 80074d8:	3ff80000 	.word	0x3ff80000
 80074dc:	636f4361 	.word	0x636f4361
 80074e0:	3fd287a7 	.word	0x3fd287a7
 80074e4:	8b60c8b3 	.word	0x8b60c8b3
 80074e8:	3fc68a28 	.word	0x3fc68a28
 80074ec:	509f79fb 	.word	0x509f79fb
 80074f0:	3fd34413 	.word	0x3fd34413
 80074f4:	08009d78 	.word	0x08009d78
 80074f8:	00000432 	.word	0x00000432
 80074fc:	00000412 	.word	0x00000412
 8007500:	fe100000 	.word	0xfe100000
 8007504:	08009c7f 	.word	0x08009c7f
 8007508:	08009d50 	.word	0x08009d50
 800750c:	2302      	movs	r3, #2
 800750e:	9310      	str	r3, [sp, #64]	; 0x40
 8007510:	9b02      	ldr	r3, [sp, #8]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d016      	beq.n	8007544 <_dtoa_r+0x3dc>
 8007516:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007518:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800751a:	425c      	negs	r4, r3
 800751c:	230f      	movs	r3, #15
 800751e:	4ab6      	ldr	r2, [pc, #728]	; (80077f8 <_dtoa_r+0x690>)
 8007520:	4023      	ands	r3, r4
 8007522:	00db      	lsls	r3, r3, #3
 8007524:	18d3      	adds	r3, r2, r3
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f7fa fc11 	bl	8001d50 <__aeabi_dmul>
 800752e:	2601      	movs	r6, #1
 8007530:	2300      	movs	r3, #0
 8007532:	9008      	str	r0, [sp, #32]
 8007534:	9109      	str	r1, [sp, #36]	; 0x24
 8007536:	4db1      	ldr	r5, [pc, #708]	; (80077fc <_dtoa_r+0x694>)
 8007538:	1124      	asrs	r4, r4, #4
 800753a:	2c00      	cmp	r4, #0
 800753c:	d000      	beq.n	8007540 <_dtoa_r+0x3d8>
 800753e:	e094      	b.n	800766a <_dtoa_r+0x502>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d19f      	bne.n	8007484 <_dtoa_r+0x31c>
 8007544:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007546:	2b00      	cmp	r3, #0
 8007548:	d100      	bne.n	800754c <_dtoa_r+0x3e4>
 800754a:	e09b      	b.n	8007684 <_dtoa_r+0x51c>
 800754c:	9c08      	ldr	r4, [sp, #32]
 800754e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007550:	2200      	movs	r2, #0
 8007552:	0020      	movs	r0, r4
 8007554:	0029      	movs	r1, r5
 8007556:	4baa      	ldr	r3, [pc, #680]	; (8007800 <_dtoa_r+0x698>)
 8007558:	f7f8 ff7e 	bl	8000458 <__aeabi_dcmplt>
 800755c:	2800      	cmp	r0, #0
 800755e:	d100      	bne.n	8007562 <_dtoa_r+0x3fa>
 8007560:	e090      	b.n	8007684 <_dtoa_r+0x51c>
 8007562:	9b07      	ldr	r3, [sp, #28]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d100      	bne.n	800756a <_dtoa_r+0x402>
 8007568:	e08c      	b.n	8007684 <_dtoa_r+0x51c>
 800756a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800756c:	2b00      	cmp	r3, #0
 800756e:	dd46      	ble.n	80075fe <_dtoa_r+0x496>
 8007570:	9b02      	ldr	r3, [sp, #8]
 8007572:	2200      	movs	r2, #0
 8007574:	0020      	movs	r0, r4
 8007576:	0029      	movs	r1, r5
 8007578:	1e5e      	subs	r6, r3, #1
 800757a:	4ba2      	ldr	r3, [pc, #648]	; (8007804 <_dtoa_r+0x69c>)
 800757c:	f7fa fbe8 	bl	8001d50 <__aeabi_dmul>
 8007580:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007582:	9008      	str	r0, [sp, #32]
 8007584:	9109      	str	r1, [sp, #36]	; 0x24
 8007586:	3301      	adds	r3, #1
 8007588:	9310      	str	r3, [sp, #64]	; 0x40
 800758a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800758c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800758e:	9c08      	ldr	r4, [sp, #32]
 8007590:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007592:	9314      	str	r3, [sp, #80]	; 0x50
 8007594:	f7fb fa2e 	bl	80029f4 <__aeabi_i2d>
 8007598:	0022      	movs	r2, r4
 800759a:	002b      	movs	r3, r5
 800759c:	f7fa fbd8 	bl	8001d50 <__aeabi_dmul>
 80075a0:	2200      	movs	r2, #0
 80075a2:	4b99      	ldr	r3, [pc, #612]	; (8007808 <_dtoa_r+0x6a0>)
 80075a4:	f7f9 fc96 	bl	8000ed4 <__aeabi_dadd>
 80075a8:	9010      	str	r0, [sp, #64]	; 0x40
 80075aa:	9111      	str	r1, [sp, #68]	; 0x44
 80075ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80075ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b0:	9208      	str	r2, [sp, #32]
 80075b2:	9309      	str	r3, [sp, #36]	; 0x24
 80075b4:	4a95      	ldr	r2, [pc, #596]	; (800780c <_dtoa_r+0x6a4>)
 80075b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075b8:	4694      	mov	ip, r2
 80075ba:	4463      	add	r3, ip
 80075bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80075be:	9309      	str	r3, [sp, #36]	; 0x24
 80075c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d161      	bne.n	800768a <_dtoa_r+0x522>
 80075c6:	2200      	movs	r2, #0
 80075c8:	0020      	movs	r0, r4
 80075ca:	0029      	movs	r1, r5
 80075cc:	4b90      	ldr	r3, [pc, #576]	; (8007810 <_dtoa_r+0x6a8>)
 80075ce:	f7fa fe2b 	bl	8002228 <__aeabi_dsub>
 80075d2:	9a08      	ldr	r2, [sp, #32]
 80075d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d6:	0004      	movs	r4, r0
 80075d8:	000d      	movs	r5, r1
 80075da:	f7f8 ff51 	bl	8000480 <__aeabi_dcmpgt>
 80075de:	2800      	cmp	r0, #0
 80075e0:	d000      	beq.n	80075e4 <_dtoa_r+0x47c>
 80075e2:	e2af      	b.n	8007b44 <_dtoa_r+0x9dc>
 80075e4:	488b      	ldr	r0, [pc, #556]	; (8007814 <_dtoa_r+0x6ac>)
 80075e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075e8:	4684      	mov	ip, r0
 80075ea:	4461      	add	r1, ip
 80075ec:	000b      	movs	r3, r1
 80075ee:	0020      	movs	r0, r4
 80075f0:	0029      	movs	r1, r5
 80075f2:	9a08      	ldr	r2, [sp, #32]
 80075f4:	f7f8 ff30 	bl	8000458 <__aeabi_dcmplt>
 80075f8:	2800      	cmp	r0, #0
 80075fa:	d000      	beq.n	80075fe <_dtoa_r+0x496>
 80075fc:	e29f      	b.n	8007b3e <_dtoa_r+0x9d6>
 80075fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007600:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8007602:	9308      	str	r3, [sp, #32]
 8007604:	9409      	str	r4, [sp, #36]	; 0x24
 8007606:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007608:	2b00      	cmp	r3, #0
 800760a:	da00      	bge.n	800760e <_dtoa_r+0x4a6>
 800760c:	e172      	b.n	80078f4 <_dtoa_r+0x78c>
 800760e:	9a02      	ldr	r2, [sp, #8]
 8007610:	2a0e      	cmp	r2, #14
 8007612:	dd00      	ble.n	8007616 <_dtoa_r+0x4ae>
 8007614:	e16e      	b.n	80078f4 <_dtoa_r+0x78c>
 8007616:	4b78      	ldr	r3, [pc, #480]	; (80077f8 <_dtoa_r+0x690>)
 8007618:	00d2      	lsls	r2, r2, #3
 800761a:	189b      	adds	r3, r3, r2
 800761c:	685c      	ldr	r4, [r3, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	930a      	str	r3, [sp, #40]	; 0x28
 8007622:	940b      	str	r4, [sp, #44]	; 0x2c
 8007624:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007626:	2b00      	cmp	r3, #0
 8007628:	db00      	blt.n	800762c <_dtoa_r+0x4c4>
 800762a:	e0f7      	b.n	800781c <_dtoa_r+0x6b4>
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	2b00      	cmp	r3, #0
 8007630:	dd00      	ble.n	8007634 <_dtoa_r+0x4cc>
 8007632:	e0f3      	b.n	800781c <_dtoa_r+0x6b4>
 8007634:	d000      	beq.n	8007638 <_dtoa_r+0x4d0>
 8007636:	e282      	b.n	8007b3e <_dtoa_r+0x9d6>
 8007638:	980a      	ldr	r0, [sp, #40]	; 0x28
 800763a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800763c:	2200      	movs	r2, #0
 800763e:	4b74      	ldr	r3, [pc, #464]	; (8007810 <_dtoa_r+0x6a8>)
 8007640:	f7fa fb86 	bl	8001d50 <__aeabi_dmul>
 8007644:	9a08      	ldr	r2, [sp, #32]
 8007646:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007648:	f7f8 ff24 	bl	8000494 <__aeabi_dcmpge>
 800764c:	9e07      	ldr	r6, [sp, #28]
 800764e:	0035      	movs	r5, r6
 8007650:	2800      	cmp	r0, #0
 8007652:	d000      	beq.n	8007656 <_dtoa_r+0x4ee>
 8007654:	e259      	b.n	8007b0a <_dtoa_r+0x9a2>
 8007656:	9b06      	ldr	r3, [sp, #24]
 8007658:	9a06      	ldr	r2, [sp, #24]
 800765a:	3301      	adds	r3, #1
 800765c:	9308      	str	r3, [sp, #32]
 800765e:	2331      	movs	r3, #49	; 0x31
 8007660:	7013      	strb	r3, [r2, #0]
 8007662:	9b02      	ldr	r3, [sp, #8]
 8007664:	3301      	adds	r3, #1
 8007666:	9302      	str	r3, [sp, #8]
 8007668:	e254      	b.n	8007b14 <_dtoa_r+0x9ac>
 800766a:	4234      	tst	r4, r6
 800766c:	d007      	beq.n	800767e <_dtoa_r+0x516>
 800766e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007670:	3301      	adds	r3, #1
 8007672:	9310      	str	r3, [sp, #64]	; 0x40
 8007674:	682a      	ldr	r2, [r5, #0]
 8007676:	686b      	ldr	r3, [r5, #4]
 8007678:	f7fa fb6a 	bl	8001d50 <__aeabi_dmul>
 800767c:	0033      	movs	r3, r6
 800767e:	1064      	asrs	r4, r4, #1
 8007680:	3508      	adds	r5, #8
 8007682:	e75a      	b.n	800753a <_dtoa_r+0x3d2>
 8007684:	9e02      	ldr	r6, [sp, #8]
 8007686:	9b07      	ldr	r3, [sp, #28]
 8007688:	e780      	b.n	800758c <_dtoa_r+0x424>
 800768a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800768c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800768e:	1e5a      	subs	r2, r3, #1
 8007690:	4b59      	ldr	r3, [pc, #356]	; (80077f8 <_dtoa_r+0x690>)
 8007692:	00d2      	lsls	r2, r2, #3
 8007694:	189b      	adds	r3, r3, r2
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	2900      	cmp	r1, #0
 800769c:	d051      	beq.n	8007742 <_dtoa_r+0x5da>
 800769e:	2000      	movs	r0, #0
 80076a0:	495d      	ldr	r1, [pc, #372]	; (8007818 <_dtoa_r+0x6b0>)
 80076a2:	f7f9 ff53 	bl	800154c <__aeabi_ddiv>
 80076a6:	9a08      	ldr	r2, [sp, #32]
 80076a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076aa:	f7fa fdbd 	bl	8002228 <__aeabi_dsub>
 80076ae:	9a06      	ldr	r2, [sp, #24]
 80076b0:	9b06      	ldr	r3, [sp, #24]
 80076b2:	4694      	mov	ip, r2
 80076b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80076b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076b8:	9010      	str	r0, [sp, #64]	; 0x40
 80076ba:	9111      	str	r1, [sp, #68]	; 0x44
 80076bc:	4463      	add	r3, ip
 80076be:	9319      	str	r3, [sp, #100]	; 0x64
 80076c0:	0029      	movs	r1, r5
 80076c2:	0020      	movs	r0, r4
 80076c4:	f7fb f960 	bl	8002988 <__aeabi_d2iz>
 80076c8:	9014      	str	r0, [sp, #80]	; 0x50
 80076ca:	f7fb f993 	bl	80029f4 <__aeabi_i2d>
 80076ce:	0002      	movs	r2, r0
 80076d0:	000b      	movs	r3, r1
 80076d2:	0020      	movs	r0, r4
 80076d4:	0029      	movs	r1, r5
 80076d6:	f7fa fda7 	bl	8002228 <__aeabi_dsub>
 80076da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80076dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80076de:	3301      	adds	r3, #1
 80076e0:	9308      	str	r3, [sp, #32]
 80076e2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076e4:	0004      	movs	r4, r0
 80076e6:	3330      	adds	r3, #48	; 0x30
 80076e8:	7013      	strb	r3, [r2, #0]
 80076ea:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80076ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80076ee:	000d      	movs	r5, r1
 80076f0:	f7f8 feb2 	bl	8000458 <__aeabi_dcmplt>
 80076f4:	2800      	cmp	r0, #0
 80076f6:	d175      	bne.n	80077e4 <_dtoa_r+0x67c>
 80076f8:	0022      	movs	r2, r4
 80076fa:	002b      	movs	r3, r5
 80076fc:	2000      	movs	r0, #0
 80076fe:	4940      	ldr	r1, [pc, #256]	; (8007800 <_dtoa_r+0x698>)
 8007700:	f7fa fd92 	bl	8002228 <__aeabi_dsub>
 8007704:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007706:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007708:	f7f8 fea6 	bl	8000458 <__aeabi_dcmplt>
 800770c:	2800      	cmp	r0, #0
 800770e:	d000      	beq.n	8007712 <_dtoa_r+0x5aa>
 8007710:	e0d2      	b.n	80078b8 <_dtoa_r+0x750>
 8007712:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007714:	9a08      	ldr	r2, [sp, #32]
 8007716:	4293      	cmp	r3, r2
 8007718:	d100      	bne.n	800771c <_dtoa_r+0x5b4>
 800771a:	e770      	b.n	80075fe <_dtoa_r+0x496>
 800771c:	9810      	ldr	r0, [sp, #64]	; 0x40
 800771e:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007720:	2200      	movs	r2, #0
 8007722:	4b38      	ldr	r3, [pc, #224]	; (8007804 <_dtoa_r+0x69c>)
 8007724:	f7fa fb14 	bl	8001d50 <__aeabi_dmul>
 8007728:	4b36      	ldr	r3, [pc, #216]	; (8007804 <_dtoa_r+0x69c>)
 800772a:	9010      	str	r0, [sp, #64]	; 0x40
 800772c:	9111      	str	r1, [sp, #68]	; 0x44
 800772e:	2200      	movs	r2, #0
 8007730:	0020      	movs	r0, r4
 8007732:	0029      	movs	r1, r5
 8007734:	f7fa fb0c 	bl	8001d50 <__aeabi_dmul>
 8007738:	9b08      	ldr	r3, [sp, #32]
 800773a:	0004      	movs	r4, r0
 800773c:	000d      	movs	r5, r1
 800773e:	9317      	str	r3, [sp, #92]	; 0x5c
 8007740:	e7be      	b.n	80076c0 <_dtoa_r+0x558>
 8007742:	9808      	ldr	r0, [sp, #32]
 8007744:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007746:	f7fa fb03 	bl	8001d50 <__aeabi_dmul>
 800774a:	9a06      	ldr	r2, [sp, #24]
 800774c:	9b06      	ldr	r3, [sp, #24]
 800774e:	4694      	mov	ip, r2
 8007750:	9308      	str	r3, [sp, #32]
 8007752:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007754:	9010      	str	r0, [sp, #64]	; 0x40
 8007756:	9111      	str	r1, [sp, #68]	; 0x44
 8007758:	4463      	add	r3, ip
 800775a:	9319      	str	r3, [sp, #100]	; 0x64
 800775c:	0029      	movs	r1, r5
 800775e:	0020      	movs	r0, r4
 8007760:	f7fb f912 	bl	8002988 <__aeabi_d2iz>
 8007764:	9017      	str	r0, [sp, #92]	; 0x5c
 8007766:	f7fb f945 	bl	80029f4 <__aeabi_i2d>
 800776a:	0002      	movs	r2, r0
 800776c:	000b      	movs	r3, r1
 800776e:	0020      	movs	r0, r4
 8007770:	0029      	movs	r1, r5
 8007772:	f7fa fd59 	bl	8002228 <__aeabi_dsub>
 8007776:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007778:	9a08      	ldr	r2, [sp, #32]
 800777a:	3330      	adds	r3, #48	; 0x30
 800777c:	7013      	strb	r3, [r2, #0]
 800777e:	0013      	movs	r3, r2
 8007780:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007782:	3301      	adds	r3, #1
 8007784:	0004      	movs	r4, r0
 8007786:	000d      	movs	r5, r1
 8007788:	9308      	str	r3, [sp, #32]
 800778a:	4293      	cmp	r3, r2
 800778c:	d12c      	bne.n	80077e8 <_dtoa_r+0x680>
 800778e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007790:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007792:	9a06      	ldr	r2, [sp, #24]
 8007794:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007796:	4694      	mov	ip, r2
 8007798:	4463      	add	r3, ip
 800779a:	2200      	movs	r2, #0
 800779c:	9308      	str	r3, [sp, #32]
 800779e:	4b1e      	ldr	r3, [pc, #120]	; (8007818 <_dtoa_r+0x6b0>)
 80077a0:	f7f9 fb98 	bl	8000ed4 <__aeabi_dadd>
 80077a4:	0002      	movs	r2, r0
 80077a6:	000b      	movs	r3, r1
 80077a8:	0020      	movs	r0, r4
 80077aa:	0029      	movs	r1, r5
 80077ac:	f7f8 fe68 	bl	8000480 <__aeabi_dcmpgt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	d000      	beq.n	80077b6 <_dtoa_r+0x64e>
 80077b4:	e080      	b.n	80078b8 <_dtoa_r+0x750>
 80077b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80077ba:	2000      	movs	r0, #0
 80077bc:	4916      	ldr	r1, [pc, #88]	; (8007818 <_dtoa_r+0x6b0>)
 80077be:	f7fa fd33 	bl	8002228 <__aeabi_dsub>
 80077c2:	0002      	movs	r2, r0
 80077c4:	000b      	movs	r3, r1
 80077c6:	0020      	movs	r0, r4
 80077c8:	0029      	movs	r1, r5
 80077ca:	f7f8 fe45 	bl	8000458 <__aeabi_dcmplt>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d100      	bne.n	80077d4 <_dtoa_r+0x66c>
 80077d2:	e714      	b.n	80075fe <_dtoa_r+0x496>
 80077d4:	9b08      	ldr	r3, [sp, #32]
 80077d6:	001a      	movs	r2, r3
 80077d8:	3a01      	subs	r2, #1
 80077da:	9208      	str	r2, [sp, #32]
 80077dc:	7812      	ldrb	r2, [r2, #0]
 80077de:	2a30      	cmp	r2, #48	; 0x30
 80077e0:	d0f8      	beq.n	80077d4 <_dtoa_r+0x66c>
 80077e2:	9308      	str	r3, [sp, #32]
 80077e4:	9602      	str	r6, [sp, #8]
 80077e6:	e055      	b.n	8007894 <_dtoa_r+0x72c>
 80077e8:	2200      	movs	r2, #0
 80077ea:	4b06      	ldr	r3, [pc, #24]	; (8007804 <_dtoa_r+0x69c>)
 80077ec:	f7fa fab0 	bl	8001d50 <__aeabi_dmul>
 80077f0:	0004      	movs	r4, r0
 80077f2:	000d      	movs	r5, r1
 80077f4:	e7b2      	b.n	800775c <_dtoa_r+0x5f4>
 80077f6:	46c0      	nop			; (mov r8, r8)
 80077f8:	08009d78 	.word	0x08009d78
 80077fc:	08009d50 	.word	0x08009d50
 8007800:	3ff00000 	.word	0x3ff00000
 8007804:	40240000 	.word	0x40240000
 8007808:	401c0000 	.word	0x401c0000
 800780c:	fcc00000 	.word	0xfcc00000
 8007810:	40140000 	.word	0x40140000
 8007814:	7cc00000 	.word	0x7cc00000
 8007818:	3fe00000 	.word	0x3fe00000
 800781c:	9b07      	ldr	r3, [sp, #28]
 800781e:	9e06      	ldr	r6, [sp, #24]
 8007820:	3b01      	subs	r3, #1
 8007822:	199b      	adds	r3, r3, r6
 8007824:	930c      	str	r3, [sp, #48]	; 0x30
 8007826:	9c08      	ldr	r4, [sp, #32]
 8007828:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800782a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800782c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800782e:	0020      	movs	r0, r4
 8007830:	0029      	movs	r1, r5
 8007832:	f7f9 fe8b 	bl	800154c <__aeabi_ddiv>
 8007836:	f7fb f8a7 	bl	8002988 <__aeabi_d2iz>
 800783a:	9007      	str	r0, [sp, #28]
 800783c:	f7fb f8da 	bl	80029f4 <__aeabi_i2d>
 8007840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007844:	f7fa fa84 	bl	8001d50 <__aeabi_dmul>
 8007848:	0002      	movs	r2, r0
 800784a:	000b      	movs	r3, r1
 800784c:	0020      	movs	r0, r4
 800784e:	0029      	movs	r1, r5
 8007850:	f7fa fcea 	bl	8002228 <__aeabi_dsub>
 8007854:	0033      	movs	r3, r6
 8007856:	9a07      	ldr	r2, [sp, #28]
 8007858:	3601      	adds	r6, #1
 800785a:	3230      	adds	r2, #48	; 0x30
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007860:	9608      	str	r6, [sp, #32]
 8007862:	429a      	cmp	r2, r3
 8007864:	d139      	bne.n	80078da <_dtoa_r+0x772>
 8007866:	0002      	movs	r2, r0
 8007868:	000b      	movs	r3, r1
 800786a:	f7f9 fb33 	bl	8000ed4 <__aeabi_dadd>
 800786e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007870:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007872:	0004      	movs	r4, r0
 8007874:	000d      	movs	r5, r1
 8007876:	f7f8 fe03 	bl	8000480 <__aeabi_dcmpgt>
 800787a:	2800      	cmp	r0, #0
 800787c:	d11b      	bne.n	80078b6 <_dtoa_r+0x74e>
 800787e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007882:	0020      	movs	r0, r4
 8007884:	0029      	movs	r1, r5
 8007886:	f7f8 fde1 	bl	800044c <__aeabi_dcmpeq>
 800788a:	2800      	cmp	r0, #0
 800788c:	d002      	beq.n	8007894 <_dtoa_r+0x72c>
 800788e:	9b07      	ldr	r3, [sp, #28]
 8007890:	07db      	lsls	r3, r3, #31
 8007892:	d410      	bmi.n	80078b6 <_dtoa_r+0x74e>
 8007894:	0038      	movs	r0, r7
 8007896:	9905      	ldr	r1, [sp, #20]
 8007898:	f000 fbec 	bl	8008074 <_Bfree>
 800789c:	2300      	movs	r3, #0
 800789e:	9a08      	ldr	r2, [sp, #32]
 80078a0:	9802      	ldr	r0, [sp, #8]
 80078a2:	7013      	strb	r3, [r2, #0]
 80078a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80078a6:	3001      	adds	r0, #1
 80078a8:	6018      	str	r0, [r3, #0]
 80078aa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d100      	bne.n	80078b2 <_dtoa_r+0x74a>
 80078b0:	e4a6      	b.n	8007200 <_dtoa_r+0x98>
 80078b2:	601a      	str	r2, [r3, #0]
 80078b4:	e4a4      	b.n	8007200 <_dtoa_r+0x98>
 80078b6:	9e02      	ldr	r6, [sp, #8]
 80078b8:	9b08      	ldr	r3, [sp, #32]
 80078ba:	9308      	str	r3, [sp, #32]
 80078bc:	3b01      	subs	r3, #1
 80078be:	781a      	ldrb	r2, [r3, #0]
 80078c0:	2a39      	cmp	r2, #57	; 0x39
 80078c2:	d106      	bne.n	80078d2 <_dtoa_r+0x76a>
 80078c4:	9a06      	ldr	r2, [sp, #24]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d1f7      	bne.n	80078ba <_dtoa_r+0x752>
 80078ca:	2230      	movs	r2, #48	; 0x30
 80078cc:	9906      	ldr	r1, [sp, #24]
 80078ce:	3601      	adds	r6, #1
 80078d0:	700a      	strb	r2, [r1, #0]
 80078d2:	781a      	ldrb	r2, [r3, #0]
 80078d4:	3201      	adds	r2, #1
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	e784      	b.n	80077e4 <_dtoa_r+0x67c>
 80078da:	2200      	movs	r2, #0
 80078dc:	4baa      	ldr	r3, [pc, #680]	; (8007b88 <_dtoa_r+0xa20>)
 80078de:	f7fa fa37 	bl	8001d50 <__aeabi_dmul>
 80078e2:	2200      	movs	r2, #0
 80078e4:	2300      	movs	r3, #0
 80078e6:	0004      	movs	r4, r0
 80078e8:	000d      	movs	r5, r1
 80078ea:	f7f8 fdaf 	bl	800044c <__aeabi_dcmpeq>
 80078ee:	2800      	cmp	r0, #0
 80078f0:	d09b      	beq.n	800782a <_dtoa_r+0x6c2>
 80078f2:	e7cf      	b.n	8007894 <_dtoa_r+0x72c>
 80078f4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80078f6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80078f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80078fa:	2d00      	cmp	r5, #0
 80078fc:	d012      	beq.n	8007924 <_dtoa_r+0x7bc>
 80078fe:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007900:	2a01      	cmp	r2, #1
 8007902:	dc66      	bgt.n	80079d2 <_dtoa_r+0x86a>
 8007904:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007906:	2a00      	cmp	r2, #0
 8007908:	d05d      	beq.n	80079c6 <_dtoa_r+0x85e>
 800790a:	4aa0      	ldr	r2, [pc, #640]	; (8007b8c <_dtoa_r+0xa24>)
 800790c:	189b      	adds	r3, r3, r2
 800790e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007910:	2101      	movs	r1, #1
 8007912:	18d2      	adds	r2, r2, r3
 8007914:	920a      	str	r2, [sp, #40]	; 0x28
 8007916:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007918:	0038      	movs	r0, r7
 800791a:	18d3      	adds	r3, r2, r3
 800791c:	930d      	str	r3, [sp, #52]	; 0x34
 800791e:	f000 fc59 	bl	80081d4 <__i2b>
 8007922:	0005      	movs	r5, r0
 8007924:	2c00      	cmp	r4, #0
 8007926:	dd0e      	ble.n	8007946 <_dtoa_r+0x7de>
 8007928:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800792a:	2b00      	cmp	r3, #0
 800792c:	dd0b      	ble.n	8007946 <_dtoa_r+0x7de>
 800792e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007930:	0023      	movs	r3, r4
 8007932:	4294      	cmp	r4, r2
 8007934:	dd00      	ble.n	8007938 <_dtoa_r+0x7d0>
 8007936:	0013      	movs	r3, r2
 8007938:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800793a:	1ae4      	subs	r4, r4, r3
 800793c:	1ad2      	subs	r2, r2, r3
 800793e:	920a      	str	r2, [sp, #40]	; 0x28
 8007940:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007942:	1ad3      	subs	r3, r2, r3
 8007944:	930d      	str	r3, [sp, #52]	; 0x34
 8007946:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007948:	2b00      	cmp	r3, #0
 800794a:	d01f      	beq.n	800798c <_dtoa_r+0x824>
 800794c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d054      	beq.n	80079fc <_dtoa_r+0x894>
 8007952:	2e00      	cmp	r6, #0
 8007954:	dd11      	ble.n	800797a <_dtoa_r+0x812>
 8007956:	0029      	movs	r1, r5
 8007958:	0032      	movs	r2, r6
 800795a:	0038      	movs	r0, r7
 800795c:	f000 fd00 	bl	8008360 <__pow5mult>
 8007960:	9a05      	ldr	r2, [sp, #20]
 8007962:	0001      	movs	r1, r0
 8007964:	0005      	movs	r5, r0
 8007966:	0038      	movs	r0, r7
 8007968:	f000 fc4a 	bl	8008200 <__multiply>
 800796c:	9905      	ldr	r1, [sp, #20]
 800796e:	9014      	str	r0, [sp, #80]	; 0x50
 8007970:	0038      	movs	r0, r7
 8007972:	f000 fb7f 	bl	8008074 <_Bfree>
 8007976:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007978:	9305      	str	r3, [sp, #20]
 800797a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800797c:	1b9a      	subs	r2, r3, r6
 800797e:	42b3      	cmp	r3, r6
 8007980:	d004      	beq.n	800798c <_dtoa_r+0x824>
 8007982:	0038      	movs	r0, r7
 8007984:	9905      	ldr	r1, [sp, #20]
 8007986:	f000 fceb 	bl	8008360 <__pow5mult>
 800798a:	9005      	str	r0, [sp, #20]
 800798c:	2101      	movs	r1, #1
 800798e:	0038      	movs	r0, r7
 8007990:	f000 fc20 	bl	80081d4 <__i2b>
 8007994:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007996:	0006      	movs	r6, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	dd31      	ble.n	8007a00 <_dtoa_r+0x898>
 800799c:	001a      	movs	r2, r3
 800799e:	0001      	movs	r1, r0
 80079a0:	0038      	movs	r0, r7
 80079a2:	f000 fcdd 	bl	8008360 <__pow5mult>
 80079a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80079a8:	0006      	movs	r6, r0
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	dd2d      	ble.n	8007a0a <_dtoa_r+0x8a2>
 80079ae:	2300      	movs	r3, #0
 80079b0:	930e      	str	r3, [sp, #56]	; 0x38
 80079b2:	6933      	ldr	r3, [r6, #16]
 80079b4:	3303      	adds	r3, #3
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	18f3      	adds	r3, r6, r3
 80079ba:	6858      	ldr	r0, [r3, #4]
 80079bc:	f000 fbc2 	bl	8008144 <__hi0bits>
 80079c0:	2320      	movs	r3, #32
 80079c2:	1a18      	subs	r0, r3, r0
 80079c4:	e039      	b.n	8007a3a <_dtoa_r+0x8d2>
 80079c6:	2336      	movs	r3, #54	; 0x36
 80079c8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80079ca:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80079cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079ce:	1a9b      	subs	r3, r3, r2
 80079d0:	e79d      	b.n	800790e <_dtoa_r+0x7a6>
 80079d2:	9b07      	ldr	r3, [sp, #28]
 80079d4:	1e5e      	subs	r6, r3, #1
 80079d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079d8:	42b3      	cmp	r3, r6
 80079da:	db07      	blt.n	80079ec <_dtoa_r+0x884>
 80079dc:	1b9e      	subs	r6, r3, r6
 80079de:	9b07      	ldr	r3, [sp, #28]
 80079e0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	da93      	bge.n	800790e <_dtoa_r+0x7a6>
 80079e6:	1ae4      	subs	r4, r4, r3
 80079e8:	2300      	movs	r3, #0
 80079ea:	e790      	b.n	800790e <_dtoa_r+0x7a6>
 80079ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80079f0:	1af3      	subs	r3, r6, r3
 80079f2:	18d3      	adds	r3, r2, r3
 80079f4:	960e      	str	r6, [sp, #56]	; 0x38
 80079f6:	9315      	str	r3, [sp, #84]	; 0x54
 80079f8:	2600      	movs	r6, #0
 80079fa:	e7f0      	b.n	80079de <_dtoa_r+0x876>
 80079fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079fe:	e7c0      	b.n	8007982 <_dtoa_r+0x81a>
 8007a00:	2300      	movs	r3, #0
 8007a02:	930e      	str	r3, [sp, #56]	; 0x38
 8007a04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	dc13      	bgt.n	8007a32 <_dtoa_r+0x8ca>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	930e      	str	r3, [sp, #56]	; 0x38
 8007a0e:	9b08      	ldr	r3, [sp, #32]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10e      	bne.n	8007a32 <_dtoa_r+0x8ca>
 8007a14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a16:	031b      	lsls	r3, r3, #12
 8007a18:	d10b      	bne.n	8007a32 <_dtoa_r+0x8ca>
 8007a1a:	4b5d      	ldr	r3, [pc, #372]	; (8007b90 <_dtoa_r+0xa28>)
 8007a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a1e:	4213      	tst	r3, r2
 8007a20:	d007      	beq.n	8007a32 <_dtoa_r+0x8ca>
 8007a22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a24:	3301      	adds	r3, #1
 8007a26:	930a      	str	r3, [sp, #40]	; 0x28
 8007a28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a2e:	2301      	movs	r3, #1
 8007a30:	930e      	str	r3, [sp, #56]	; 0x38
 8007a32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a34:	2001      	movs	r0, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1bb      	bne.n	80079b2 <_dtoa_r+0x84a>
 8007a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3c:	221f      	movs	r2, #31
 8007a3e:	1818      	adds	r0, r3, r0
 8007a40:	0003      	movs	r3, r0
 8007a42:	4013      	ands	r3, r2
 8007a44:	4210      	tst	r0, r2
 8007a46:	d046      	beq.n	8007ad6 <_dtoa_r+0x96e>
 8007a48:	3201      	adds	r2, #1
 8007a4a:	1ad2      	subs	r2, r2, r3
 8007a4c:	2a04      	cmp	r2, #4
 8007a4e:	dd3f      	ble.n	8007ad0 <_dtoa_r+0x968>
 8007a50:	221c      	movs	r2, #28
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a56:	18e4      	adds	r4, r4, r3
 8007a58:	18d2      	adds	r2, r2, r3
 8007a5a:	920a      	str	r2, [sp, #40]	; 0x28
 8007a5c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a5e:	18d3      	adds	r3, r2, r3
 8007a60:	930d      	str	r3, [sp, #52]	; 0x34
 8007a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd05      	ble.n	8007a74 <_dtoa_r+0x90c>
 8007a68:	001a      	movs	r2, r3
 8007a6a:	0038      	movs	r0, r7
 8007a6c:	9905      	ldr	r1, [sp, #20]
 8007a6e:	f000 fcd3 	bl	8008418 <__lshift>
 8007a72:	9005      	str	r0, [sp, #20]
 8007a74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	dd05      	ble.n	8007a86 <_dtoa_r+0x91e>
 8007a7a:	0031      	movs	r1, r6
 8007a7c:	001a      	movs	r2, r3
 8007a7e:	0038      	movs	r0, r7
 8007a80:	f000 fcca 	bl	8008418 <__lshift>
 8007a84:	0006      	movs	r6, r0
 8007a86:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d026      	beq.n	8007ada <_dtoa_r+0x972>
 8007a8c:	0031      	movs	r1, r6
 8007a8e:	9805      	ldr	r0, [sp, #20]
 8007a90:	f000 fd30 	bl	80084f4 <__mcmp>
 8007a94:	2800      	cmp	r0, #0
 8007a96:	da20      	bge.n	8007ada <_dtoa_r+0x972>
 8007a98:	9b02      	ldr	r3, [sp, #8]
 8007a9a:	220a      	movs	r2, #10
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	9302      	str	r3, [sp, #8]
 8007aa0:	0038      	movs	r0, r7
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9905      	ldr	r1, [sp, #20]
 8007aa6:	f000 fb09 	bl	80080bc <__multadd>
 8007aaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007aac:	9005      	str	r0, [sp, #20]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d100      	bne.n	8007ab4 <_dtoa_r+0x94c>
 8007ab2:	e166      	b.n	8007d82 <_dtoa_r+0xc1a>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	0029      	movs	r1, r5
 8007ab8:	220a      	movs	r2, #10
 8007aba:	0038      	movs	r0, r7
 8007abc:	f000 fafe 	bl	80080bc <__multadd>
 8007ac0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ac2:	0005      	movs	r5, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	dc47      	bgt.n	8007b58 <_dtoa_r+0x9f0>
 8007ac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	dc0d      	bgt.n	8007aea <_dtoa_r+0x982>
 8007ace:	e043      	b.n	8007b58 <_dtoa_r+0x9f0>
 8007ad0:	2a04      	cmp	r2, #4
 8007ad2:	d0c6      	beq.n	8007a62 <_dtoa_r+0x8fa>
 8007ad4:	0013      	movs	r3, r2
 8007ad6:	331c      	adds	r3, #28
 8007ad8:	e7bc      	b.n	8007a54 <_dtoa_r+0x8ec>
 8007ada:	9b07      	ldr	r3, [sp, #28]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	dc35      	bgt.n	8007b4c <_dtoa_r+0x9e4>
 8007ae0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007ae2:	2b02      	cmp	r3, #2
 8007ae4:	dd32      	ble.n	8007b4c <_dtoa_r+0x9e4>
 8007ae6:	9b07      	ldr	r3, [sp, #28]
 8007ae8:	930c      	str	r3, [sp, #48]	; 0x30
 8007aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d10c      	bne.n	8007b0a <_dtoa_r+0x9a2>
 8007af0:	0031      	movs	r1, r6
 8007af2:	2205      	movs	r2, #5
 8007af4:	0038      	movs	r0, r7
 8007af6:	f000 fae1 	bl	80080bc <__multadd>
 8007afa:	0006      	movs	r6, r0
 8007afc:	0001      	movs	r1, r0
 8007afe:	9805      	ldr	r0, [sp, #20]
 8007b00:	f000 fcf8 	bl	80084f4 <__mcmp>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	dd00      	ble.n	8007b0a <_dtoa_r+0x9a2>
 8007b08:	e5a5      	b.n	8007656 <_dtoa_r+0x4ee>
 8007b0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007b0c:	43db      	mvns	r3, r3
 8007b0e:	9302      	str	r3, [sp, #8]
 8007b10:	9b06      	ldr	r3, [sp, #24]
 8007b12:	9308      	str	r3, [sp, #32]
 8007b14:	2400      	movs	r4, #0
 8007b16:	0031      	movs	r1, r6
 8007b18:	0038      	movs	r0, r7
 8007b1a:	f000 faab 	bl	8008074 <_Bfree>
 8007b1e:	2d00      	cmp	r5, #0
 8007b20:	d100      	bne.n	8007b24 <_dtoa_r+0x9bc>
 8007b22:	e6b7      	b.n	8007894 <_dtoa_r+0x72c>
 8007b24:	2c00      	cmp	r4, #0
 8007b26:	d005      	beq.n	8007b34 <_dtoa_r+0x9cc>
 8007b28:	42ac      	cmp	r4, r5
 8007b2a:	d003      	beq.n	8007b34 <_dtoa_r+0x9cc>
 8007b2c:	0021      	movs	r1, r4
 8007b2e:	0038      	movs	r0, r7
 8007b30:	f000 faa0 	bl	8008074 <_Bfree>
 8007b34:	0029      	movs	r1, r5
 8007b36:	0038      	movs	r0, r7
 8007b38:	f000 fa9c 	bl	8008074 <_Bfree>
 8007b3c:	e6aa      	b.n	8007894 <_dtoa_r+0x72c>
 8007b3e:	2600      	movs	r6, #0
 8007b40:	0035      	movs	r5, r6
 8007b42:	e7e2      	b.n	8007b0a <_dtoa_r+0x9a2>
 8007b44:	9602      	str	r6, [sp, #8]
 8007b46:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007b48:	0035      	movs	r5, r6
 8007b4a:	e584      	b.n	8007656 <_dtoa_r+0x4ee>
 8007b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d100      	bne.n	8007b54 <_dtoa_r+0x9ec>
 8007b52:	e0ce      	b.n	8007cf2 <_dtoa_r+0xb8a>
 8007b54:	9b07      	ldr	r3, [sp, #28]
 8007b56:	930c      	str	r3, [sp, #48]	; 0x30
 8007b58:	2c00      	cmp	r4, #0
 8007b5a:	dd05      	ble.n	8007b68 <_dtoa_r+0xa00>
 8007b5c:	0029      	movs	r1, r5
 8007b5e:	0022      	movs	r2, r4
 8007b60:	0038      	movs	r0, r7
 8007b62:	f000 fc59 	bl	8008418 <__lshift>
 8007b66:	0005      	movs	r5, r0
 8007b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b6a:	0028      	movs	r0, r5
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d022      	beq.n	8007bb6 <_dtoa_r+0xa4e>
 8007b70:	0038      	movs	r0, r7
 8007b72:	6869      	ldr	r1, [r5, #4]
 8007b74:	f000 fa3a 	bl	8007fec <_Balloc>
 8007b78:	1e04      	subs	r4, r0, #0
 8007b7a:	d10f      	bne.n	8007b9c <_dtoa_r+0xa34>
 8007b7c:	0002      	movs	r2, r0
 8007b7e:	4b05      	ldr	r3, [pc, #20]	; (8007b94 <_dtoa_r+0xa2c>)
 8007b80:	4905      	ldr	r1, [pc, #20]	; (8007b98 <_dtoa_r+0xa30>)
 8007b82:	f7ff fb06 	bl	8007192 <_dtoa_r+0x2a>
 8007b86:	46c0      	nop			; (mov r8, r8)
 8007b88:	40240000 	.word	0x40240000
 8007b8c:	00000433 	.word	0x00000433
 8007b90:	7ff00000 	.word	0x7ff00000
 8007b94:	08009c7f 	.word	0x08009c7f
 8007b98:	000002ea 	.word	0x000002ea
 8007b9c:	0029      	movs	r1, r5
 8007b9e:	692b      	ldr	r3, [r5, #16]
 8007ba0:	310c      	adds	r1, #12
 8007ba2:	1c9a      	adds	r2, r3, #2
 8007ba4:	0092      	lsls	r2, r2, #2
 8007ba6:	300c      	adds	r0, #12
 8007ba8:	f000 fa17 	bl	8007fda <memcpy>
 8007bac:	2201      	movs	r2, #1
 8007bae:	0021      	movs	r1, r4
 8007bb0:	0038      	movs	r0, r7
 8007bb2:	f000 fc31 	bl	8008418 <__lshift>
 8007bb6:	9b06      	ldr	r3, [sp, #24]
 8007bb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007bba:	930a      	str	r3, [sp, #40]	; 0x28
 8007bbc:	3b01      	subs	r3, #1
 8007bbe:	189b      	adds	r3, r3, r2
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	002c      	movs	r4, r5
 8007bc4:	0005      	movs	r5, r0
 8007bc6:	9314      	str	r3, [sp, #80]	; 0x50
 8007bc8:	9b08      	ldr	r3, [sp, #32]
 8007bca:	4013      	ands	r3, r2
 8007bcc:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bce:	0031      	movs	r1, r6
 8007bd0:	9805      	ldr	r0, [sp, #20]
 8007bd2:	f7ff fa3d 	bl	8007050 <quorem>
 8007bd6:	0003      	movs	r3, r0
 8007bd8:	0021      	movs	r1, r4
 8007bda:	3330      	adds	r3, #48	; 0x30
 8007bdc:	900d      	str	r0, [sp, #52]	; 0x34
 8007bde:	9805      	ldr	r0, [sp, #20]
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	f000 fc87 	bl	80084f4 <__mcmp>
 8007be6:	002a      	movs	r2, r5
 8007be8:	900e      	str	r0, [sp, #56]	; 0x38
 8007bea:	0031      	movs	r1, r6
 8007bec:	0038      	movs	r0, r7
 8007bee:	f000 fc9d 	bl	800852c <__mdiff>
 8007bf2:	68c3      	ldr	r3, [r0, #12]
 8007bf4:	9008      	str	r0, [sp, #32]
 8007bf6:	9310      	str	r3, [sp, #64]	; 0x40
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	930c      	str	r3, [sp, #48]	; 0x30
 8007bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d104      	bne.n	8007c0c <_dtoa_r+0xaa4>
 8007c02:	0001      	movs	r1, r0
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	f000 fc75 	bl	80084f4 <__mcmp>
 8007c0a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c0c:	0038      	movs	r0, r7
 8007c0e:	9908      	ldr	r1, [sp, #32]
 8007c10:	f000 fa30 	bl	8008074 <_Bfree>
 8007c14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c18:	3301      	adds	r3, #1
 8007c1a:	9308      	str	r3, [sp, #32]
 8007c1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c22:	4313      	orrs	r3, r2
 8007c24:	d10c      	bne.n	8007c40 <_dtoa_r+0xad8>
 8007c26:	9b07      	ldr	r3, [sp, #28]
 8007c28:	2b39      	cmp	r3, #57	; 0x39
 8007c2a:	d026      	beq.n	8007c7a <_dtoa_r+0xb12>
 8007c2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	dd02      	ble.n	8007c38 <_dtoa_r+0xad0>
 8007c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c34:	3331      	adds	r3, #49	; 0x31
 8007c36:	9307      	str	r3, [sp, #28]
 8007c38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c3a:	9a07      	ldr	r2, [sp, #28]
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	e76a      	b.n	8007b16 <_dtoa_r+0x9ae>
 8007c40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	db04      	blt.n	8007c50 <_dtoa_r+0xae8>
 8007c46:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	d11f      	bne.n	8007c90 <_dtoa_r+0xb28>
 8007c50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	ddf0      	ble.n	8007c38 <_dtoa_r+0xad0>
 8007c56:	9905      	ldr	r1, [sp, #20]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	0038      	movs	r0, r7
 8007c5c:	f000 fbdc 	bl	8008418 <__lshift>
 8007c60:	0031      	movs	r1, r6
 8007c62:	9005      	str	r0, [sp, #20]
 8007c64:	f000 fc46 	bl	80084f4 <__mcmp>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	dc03      	bgt.n	8007c74 <_dtoa_r+0xb0c>
 8007c6c:	d1e4      	bne.n	8007c38 <_dtoa_r+0xad0>
 8007c6e:	9b07      	ldr	r3, [sp, #28]
 8007c70:	07db      	lsls	r3, r3, #31
 8007c72:	d5e1      	bpl.n	8007c38 <_dtoa_r+0xad0>
 8007c74:	9b07      	ldr	r3, [sp, #28]
 8007c76:	2b39      	cmp	r3, #57	; 0x39
 8007c78:	d1db      	bne.n	8007c32 <_dtoa_r+0xaca>
 8007c7a:	2339      	movs	r3, #57	; 0x39
 8007c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c7e:	7013      	strb	r3, [r2, #0]
 8007c80:	9b08      	ldr	r3, [sp, #32]
 8007c82:	9308      	str	r3, [sp, #32]
 8007c84:	3b01      	subs	r3, #1
 8007c86:	781a      	ldrb	r2, [r3, #0]
 8007c88:	2a39      	cmp	r2, #57	; 0x39
 8007c8a:	d068      	beq.n	8007d5e <_dtoa_r+0xbf6>
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	e7d5      	b.n	8007c3c <_dtoa_r+0xad4>
 8007c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	dd07      	ble.n	8007ca6 <_dtoa_r+0xb3e>
 8007c96:	9b07      	ldr	r3, [sp, #28]
 8007c98:	2b39      	cmp	r3, #57	; 0x39
 8007c9a:	d0ee      	beq.n	8007c7a <_dtoa_r+0xb12>
 8007c9c:	9b07      	ldr	r3, [sp, #28]
 8007c9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	7013      	strb	r3, [r2, #0]
 8007ca4:	e737      	b.n	8007b16 <_dtoa_r+0x9ae>
 8007ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca8:	9a07      	ldr	r2, [sp, #28]
 8007caa:	701a      	strb	r2, [r3, #0]
 8007cac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007cae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d03e      	beq.n	8007d32 <_dtoa_r+0xbca>
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	220a      	movs	r2, #10
 8007cb8:	9905      	ldr	r1, [sp, #20]
 8007cba:	0038      	movs	r0, r7
 8007cbc:	f000 f9fe 	bl	80080bc <__multadd>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	9005      	str	r0, [sp, #20]
 8007cc4:	220a      	movs	r2, #10
 8007cc6:	0021      	movs	r1, r4
 8007cc8:	0038      	movs	r0, r7
 8007cca:	42ac      	cmp	r4, r5
 8007ccc:	d106      	bne.n	8007cdc <_dtoa_r+0xb74>
 8007cce:	f000 f9f5 	bl	80080bc <__multadd>
 8007cd2:	0004      	movs	r4, r0
 8007cd4:	0005      	movs	r5, r0
 8007cd6:	9b08      	ldr	r3, [sp, #32]
 8007cd8:	930a      	str	r3, [sp, #40]	; 0x28
 8007cda:	e778      	b.n	8007bce <_dtoa_r+0xa66>
 8007cdc:	f000 f9ee 	bl	80080bc <__multadd>
 8007ce0:	0029      	movs	r1, r5
 8007ce2:	0004      	movs	r4, r0
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	220a      	movs	r2, #10
 8007ce8:	0038      	movs	r0, r7
 8007cea:	f000 f9e7 	bl	80080bc <__multadd>
 8007cee:	0005      	movs	r5, r0
 8007cf0:	e7f1      	b.n	8007cd6 <_dtoa_r+0xb6e>
 8007cf2:	9b07      	ldr	r3, [sp, #28]
 8007cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8007cf6:	2400      	movs	r4, #0
 8007cf8:	0031      	movs	r1, r6
 8007cfa:	9805      	ldr	r0, [sp, #20]
 8007cfc:	f7ff f9a8 	bl	8007050 <quorem>
 8007d00:	9b06      	ldr	r3, [sp, #24]
 8007d02:	3030      	adds	r0, #48	; 0x30
 8007d04:	5518      	strb	r0, [r3, r4]
 8007d06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d08:	3401      	adds	r4, #1
 8007d0a:	9007      	str	r0, [sp, #28]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	dd07      	ble.n	8007d20 <_dtoa_r+0xbb8>
 8007d10:	2300      	movs	r3, #0
 8007d12:	220a      	movs	r2, #10
 8007d14:	0038      	movs	r0, r7
 8007d16:	9905      	ldr	r1, [sp, #20]
 8007d18:	f000 f9d0 	bl	80080bc <__multadd>
 8007d1c:	9005      	str	r0, [sp, #20]
 8007d1e:	e7eb      	b.n	8007cf8 <_dtoa_r+0xb90>
 8007d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d22:	2001      	movs	r0, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	dd00      	ble.n	8007d2a <_dtoa_r+0xbc2>
 8007d28:	0018      	movs	r0, r3
 8007d2a:	2400      	movs	r4, #0
 8007d2c:	9b06      	ldr	r3, [sp, #24]
 8007d2e:	181b      	adds	r3, r3, r0
 8007d30:	9308      	str	r3, [sp, #32]
 8007d32:	9905      	ldr	r1, [sp, #20]
 8007d34:	2201      	movs	r2, #1
 8007d36:	0038      	movs	r0, r7
 8007d38:	f000 fb6e 	bl	8008418 <__lshift>
 8007d3c:	0031      	movs	r1, r6
 8007d3e:	9005      	str	r0, [sp, #20]
 8007d40:	f000 fbd8 	bl	80084f4 <__mcmp>
 8007d44:	2800      	cmp	r0, #0
 8007d46:	dc9b      	bgt.n	8007c80 <_dtoa_r+0xb18>
 8007d48:	d102      	bne.n	8007d50 <_dtoa_r+0xbe8>
 8007d4a:	9b07      	ldr	r3, [sp, #28]
 8007d4c:	07db      	lsls	r3, r3, #31
 8007d4e:	d497      	bmi.n	8007c80 <_dtoa_r+0xb18>
 8007d50:	9b08      	ldr	r3, [sp, #32]
 8007d52:	9308      	str	r3, [sp, #32]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	781a      	ldrb	r2, [r3, #0]
 8007d58:	2a30      	cmp	r2, #48	; 0x30
 8007d5a:	d0fa      	beq.n	8007d52 <_dtoa_r+0xbea>
 8007d5c:	e6db      	b.n	8007b16 <_dtoa_r+0x9ae>
 8007d5e:	9a06      	ldr	r2, [sp, #24]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d18e      	bne.n	8007c82 <_dtoa_r+0xb1a>
 8007d64:	9b02      	ldr	r3, [sp, #8]
 8007d66:	3301      	adds	r3, #1
 8007d68:	9302      	str	r3, [sp, #8]
 8007d6a:	2331      	movs	r3, #49	; 0x31
 8007d6c:	e799      	b.n	8007ca2 <_dtoa_r+0xb3a>
 8007d6e:	4b09      	ldr	r3, [pc, #36]	; (8007d94 <_dtoa_r+0xc2c>)
 8007d70:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007d72:	9306      	str	r3, [sp, #24]
 8007d74:	4b08      	ldr	r3, [pc, #32]	; (8007d98 <_dtoa_r+0xc30>)
 8007d76:	2a00      	cmp	r2, #0
 8007d78:	d001      	beq.n	8007d7e <_dtoa_r+0xc16>
 8007d7a:	f7ff fa3f 	bl	80071fc <_dtoa_r+0x94>
 8007d7e:	f7ff fa3f 	bl	8007200 <_dtoa_r+0x98>
 8007d82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	dcb6      	bgt.n	8007cf6 <_dtoa_r+0xb8e>
 8007d88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	dd00      	ble.n	8007d90 <_dtoa_r+0xc28>
 8007d8e:	e6ac      	b.n	8007aea <_dtoa_r+0x982>
 8007d90:	e7b1      	b.n	8007cf6 <_dtoa_r+0xb8e>
 8007d92:	46c0      	nop			; (mov r8, r8)
 8007d94:	08009c00 	.word	0x08009c00
 8007d98:	08009c08 	.word	0x08009c08

08007d9c <std>:
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	b510      	push	{r4, lr}
 8007da0:	0004      	movs	r4, r0
 8007da2:	6003      	str	r3, [r0, #0]
 8007da4:	6043      	str	r3, [r0, #4]
 8007da6:	6083      	str	r3, [r0, #8]
 8007da8:	8181      	strh	r1, [r0, #12]
 8007daa:	6643      	str	r3, [r0, #100]	; 0x64
 8007dac:	0019      	movs	r1, r3
 8007dae:	81c2      	strh	r2, [r0, #14]
 8007db0:	6103      	str	r3, [r0, #16]
 8007db2:	6143      	str	r3, [r0, #20]
 8007db4:	6183      	str	r3, [r0, #24]
 8007db6:	2208      	movs	r2, #8
 8007db8:	305c      	adds	r0, #92	; 0x5c
 8007dba:	f7fe fcb9 	bl	8006730 <memset>
 8007dbe:	4b05      	ldr	r3, [pc, #20]	; (8007dd4 <std+0x38>)
 8007dc0:	6224      	str	r4, [r4, #32]
 8007dc2:	6263      	str	r3, [r4, #36]	; 0x24
 8007dc4:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <std+0x3c>)
 8007dc6:	62a3      	str	r3, [r4, #40]	; 0x28
 8007dc8:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <std+0x40>)
 8007dca:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007dcc:	4b04      	ldr	r3, [pc, #16]	; (8007de0 <std+0x44>)
 8007dce:	6323      	str	r3, [r4, #48]	; 0x30
 8007dd0:	bd10      	pop	{r4, pc}
 8007dd2:	46c0      	nop			; (mov r8, r8)
 8007dd4:	08008c29 	.word	0x08008c29
 8007dd8:	08008c51 	.word	0x08008c51
 8007ddc:	08008c89 	.word	0x08008c89
 8007de0:	08008cb5 	.word	0x08008cb5

08007de4 <_cleanup_r>:
 8007de4:	b510      	push	{r4, lr}
 8007de6:	4902      	ldr	r1, [pc, #8]	; (8007df0 <_cleanup_r+0xc>)
 8007de8:	f000 f8ba 	bl	8007f60 <_fwalk_reent>
 8007dec:	bd10      	pop	{r4, pc}
 8007dee:	46c0      	nop			; (mov r8, r8)
 8007df0:	08008ffd 	.word	0x08008ffd

08007df4 <__sfmoreglue>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	2568      	movs	r5, #104	; 0x68
 8007df8:	1e4a      	subs	r2, r1, #1
 8007dfa:	4355      	muls	r5, r2
 8007dfc:	000e      	movs	r6, r1
 8007dfe:	0029      	movs	r1, r5
 8007e00:	3174      	adds	r1, #116	; 0x74
 8007e02:	f000 fd27 	bl	8008854 <_malloc_r>
 8007e06:	1e04      	subs	r4, r0, #0
 8007e08:	d008      	beq.n	8007e1c <__sfmoreglue+0x28>
 8007e0a:	2100      	movs	r1, #0
 8007e0c:	002a      	movs	r2, r5
 8007e0e:	6001      	str	r1, [r0, #0]
 8007e10:	6046      	str	r6, [r0, #4]
 8007e12:	300c      	adds	r0, #12
 8007e14:	60a0      	str	r0, [r4, #8]
 8007e16:	3268      	adds	r2, #104	; 0x68
 8007e18:	f7fe fc8a 	bl	8006730 <memset>
 8007e1c:	0020      	movs	r0, r4
 8007e1e:	bd70      	pop	{r4, r5, r6, pc}

08007e20 <__sfp_lock_acquire>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4802      	ldr	r0, [pc, #8]	; (8007e2c <__sfp_lock_acquire+0xc>)
 8007e24:	f000 f8c1 	bl	8007faa <__retarget_lock_acquire_recursive>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	2000030d 	.word	0x2000030d

08007e30 <__sfp_lock_release>:
 8007e30:	b510      	push	{r4, lr}
 8007e32:	4802      	ldr	r0, [pc, #8]	; (8007e3c <__sfp_lock_release+0xc>)
 8007e34:	f000 f8ba 	bl	8007fac <__retarget_lock_release_recursive>
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	2000030d 	.word	0x2000030d

08007e40 <__sinit_lock_acquire>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	4802      	ldr	r0, [pc, #8]	; (8007e4c <__sinit_lock_acquire+0xc>)
 8007e44:	f000 f8b1 	bl	8007faa <__retarget_lock_acquire_recursive>
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	46c0      	nop			; (mov r8, r8)
 8007e4c:	2000030e 	.word	0x2000030e

08007e50 <__sinit_lock_release>:
 8007e50:	b510      	push	{r4, lr}
 8007e52:	4802      	ldr	r0, [pc, #8]	; (8007e5c <__sinit_lock_release+0xc>)
 8007e54:	f000 f8aa 	bl	8007fac <__retarget_lock_release_recursive>
 8007e58:	bd10      	pop	{r4, pc}
 8007e5a:	46c0      	nop			; (mov r8, r8)
 8007e5c:	2000030e 	.word	0x2000030e

08007e60 <__sinit>:
 8007e60:	b513      	push	{r0, r1, r4, lr}
 8007e62:	0004      	movs	r4, r0
 8007e64:	f7ff ffec 	bl	8007e40 <__sinit_lock_acquire>
 8007e68:	69a3      	ldr	r3, [r4, #24]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d002      	beq.n	8007e74 <__sinit+0x14>
 8007e6e:	f7ff ffef 	bl	8007e50 <__sinit_lock_release>
 8007e72:	bd13      	pop	{r0, r1, r4, pc}
 8007e74:	64a3      	str	r3, [r4, #72]	; 0x48
 8007e76:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e78:	6523      	str	r3, [r4, #80]	; 0x50
 8007e7a:	4b13      	ldr	r3, [pc, #76]	; (8007ec8 <__sinit+0x68>)
 8007e7c:	4a13      	ldr	r2, [pc, #76]	; (8007ecc <__sinit+0x6c>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e82:	9301      	str	r3, [sp, #4]
 8007e84:	42a3      	cmp	r3, r4
 8007e86:	d101      	bne.n	8007e8c <__sinit+0x2c>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	61a3      	str	r3, [r4, #24]
 8007e8c:	0020      	movs	r0, r4
 8007e8e:	f000 f81f 	bl	8007ed0 <__sfp>
 8007e92:	6060      	str	r0, [r4, #4]
 8007e94:	0020      	movs	r0, r4
 8007e96:	f000 f81b 	bl	8007ed0 <__sfp>
 8007e9a:	60a0      	str	r0, [r4, #8]
 8007e9c:	0020      	movs	r0, r4
 8007e9e:	f000 f817 	bl	8007ed0 <__sfp>
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	2104      	movs	r1, #4
 8007ea6:	60e0      	str	r0, [r4, #12]
 8007ea8:	6860      	ldr	r0, [r4, #4]
 8007eaa:	f7ff ff77 	bl	8007d9c <std>
 8007eae:	2201      	movs	r2, #1
 8007eb0:	2109      	movs	r1, #9
 8007eb2:	68a0      	ldr	r0, [r4, #8]
 8007eb4:	f7ff ff72 	bl	8007d9c <std>
 8007eb8:	2202      	movs	r2, #2
 8007eba:	2112      	movs	r1, #18
 8007ebc:	68e0      	ldr	r0, [r4, #12]
 8007ebe:	f7ff ff6d 	bl	8007d9c <std>
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	61a3      	str	r3, [r4, #24]
 8007ec6:	e7d2      	b.n	8007e6e <__sinit+0xe>
 8007ec8:	08009bc8 	.word	0x08009bc8
 8007ecc:	08007de5 	.word	0x08007de5

08007ed0 <__sfp>:
 8007ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ed2:	0007      	movs	r7, r0
 8007ed4:	f7ff ffa4 	bl	8007e20 <__sfp_lock_acquire>
 8007ed8:	4b1f      	ldr	r3, [pc, #124]	; (8007f58 <__sfp+0x88>)
 8007eda:	681e      	ldr	r6, [r3, #0]
 8007edc:	69b3      	ldr	r3, [r6, #24]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d102      	bne.n	8007ee8 <__sfp+0x18>
 8007ee2:	0030      	movs	r0, r6
 8007ee4:	f7ff ffbc 	bl	8007e60 <__sinit>
 8007ee8:	3648      	adds	r6, #72	; 0x48
 8007eea:	68b4      	ldr	r4, [r6, #8]
 8007eec:	6873      	ldr	r3, [r6, #4]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	d504      	bpl.n	8007efc <__sfp+0x2c>
 8007ef2:	6833      	ldr	r3, [r6, #0]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d022      	beq.n	8007f3e <__sfp+0x6e>
 8007ef8:	6836      	ldr	r6, [r6, #0]
 8007efa:	e7f6      	b.n	8007eea <__sfp+0x1a>
 8007efc:	220c      	movs	r2, #12
 8007efe:	5ea5      	ldrsh	r5, [r4, r2]
 8007f00:	2d00      	cmp	r5, #0
 8007f02:	d11a      	bne.n	8007f3a <__sfp+0x6a>
 8007f04:	0020      	movs	r0, r4
 8007f06:	4b15      	ldr	r3, [pc, #84]	; (8007f5c <__sfp+0x8c>)
 8007f08:	3058      	adds	r0, #88	; 0x58
 8007f0a:	60e3      	str	r3, [r4, #12]
 8007f0c:	6665      	str	r5, [r4, #100]	; 0x64
 8007f0e:	f000 f84b 	bl	8007fa8 <__retarget_lock_init_recursive>
 8007f12:	f7ff ff8d 	bl	8007e30 <__sfp_lock_release>
 8007f16:	0020      	movs	r0, r4
 8007f18:	2208      	movs	r2, #8
 8007f1a:	0029      	movs	r1, r5
 8007f1c:	6025      	str	r5, [r4, #0]
 8007f1e:	60a5      	str	r5, [r4, #8]
 8007f20:	6065      	str	r5, [r4, #4]
 8007f22:	6125      	str	r5, [r4, #16]
 8007f24:	6165      	str	r5, [r4, #20]
 8007f26:	61a5      	str	r5, [r4, #24]
 8007f28:	305c      	adds	r0, #92	; 0x5c
 8007f2a:	f7fe fc01 	bl	8006730 <memset>
 8007f2e:	6365      	str	r5, [r4, #52]	; 0x34
 8007f30:	63a5      	str	r5, [r4, #56]	; 0x38
 8007f32:	64a5      	str	r5, [r4, #72]	; 0x48
 8007f34:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007f36:	0020      	movs	r0, r4
 8007f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f3a:	3468      	adds	r4, #104	; 0x68
 8007f3c:	e7d7      	b.n	8007eee <__sfp+0x1e>
 8007f3e:	2104      	movs	r1, #4
 8007f40:	0038      	movs	r0, r7
 8007f42:	f7ff ff57 	bl	8007df4 <__sfmoreglue>
 8007f46:	1e04      	subs	r4, r0, #0
 8007f48:	6030      	str	r0, [r6, #0]
 8007f4a:	d1d5      	bne.n	8007ef8 <__sfp+0x28>
 8007f4c:	f7ff ff70 	bl	8007e30 <__sfp_lock_release>
 8007f50:	230c      	movs	r3, #12
 8007f52:	603b      	str	r3, [r7, #0]
 8007f54:	e7ef      	b.n	8007f36 <__sfp+0x66>
 8007f56:	46c0      	nop			; (mov r8, r8)
 8007f58:	08009bc8 	.word	0x08009bc8
 8007f5c:	ffff0001 	.word	0xffff0001

08007f60 <_fwalk_reent>:
 8007f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f62:	0004      	movs	r4, r0
 8007f64:	0006      	movs	r6, r0
 8007f66:	2700      	movs	r7, #0
 8007f68:	9101      	str	r1, [sp, #4]
 8007f6a:	3448      	adds	r4, #72	; 0x48
 8007f6c:	6863      	ldr	r3, [r4, #4]
 8007f6e:	68a5      	ldr	r5, [r4, #8]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	9b00      	ldr	r3, [sp, #0]
 8007f74:	3b01      	subs	r3, #1
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	d504      	bpl.n	8007f84 <_fwalk_reent+0x24>
 8007f7a:	6824      	ldr	r4, [r4, #0]
 8007f7c:	2c00      	cmp	r4, #0
 8007f7e:	d1f5      	bne.n	8007f6c <_fwalk_reent+0xc>
 8007f80:	0038      	movs	r0, r7
 8007f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f84:	89ab      	ldrh	r3, [r5, #12]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d908      	bls.n	8007f9c <_fwalk_reent+0x3c>
 8007f8a:	220e      	movs	r2, #14
 8007f8c:	5eab      	ldrsh	r3, [r5, r2]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	d004      	beq.n	8007f9c <_fwalk_reent+0x3c>
 8007f92:	0029      	movs	r1, r5
 8007f94:	0030      	movs	r0, r6
 8007f96:	9b01      	ldr	r3, [sp, #4]
 8007f98:	4798      	blx	r3
 8007f9a:	4307      	orrs	r7, r0
 8007f9c:	3568      	adds	r5, #104	; 0x68
 8007f9e:	e7e8      	b.n	8007f72 <_fwalk_reent+0x12>

08007fa0 <_localeconv_r>:
 8007fa0:	4800      	ldr	r0, [pc, #0]	; (8007fa4 <_localeconv_r+0x4>)
 8007fa2:	4770      	bx	lr
 8007fa4:	20000160 	.word	0x20000160

08007fa8 <__retarget_lock_init_recursive>:
 8007fa8:	4770      	bx	lr

08007faa <__retarget_lock_acquire_recursive>:
 8007faa:	4770      	bx	lr

08007fac <__retarget_lock_release_recursive>:
 8007fac:	4770      	bx	lr
	...

08007fb0 <malloc>:
 8007fb0:	b510      	push	{r4, lr}
 8007fb2:	4b03      	ldr	r3, [pc, #12]	; (8007fc0 <malloc+0x10>)
 8007fb4:	0001      	movs	r1, r0
 8007fb6:	6818      	ldr	r0, [r3, #0]
 8007fb8:	f000 fc4c 	bl	8008854 <_malloc_r>
 8007fbc:	bd10      	pop	{r4, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	2000000c 	.word	0x2000000c

08007fc4 <memchr>:
 8007fc4:	b2c9      	uxtb	r1, r1
 8007fc6:	1882      	adds	r2, r0, r2
 8007fc8:	4290      	cmp	r0, r2
 8007fca:	d101      	bne.n	8007fd0 <memchr+0xc>
 8007fcc:	2000      	movs	r0, #0
 8007fce:	4770      	bx	lr
 8007fd0:	7803      	ldrb	r3, [r0, #0]
 8007fd2:	428b      	cmp	r3, r1
 8007fd4:	d0fb      	beq.n	8007fce <memchr+0xa>
 8007fd6:	3001      	adds	r0, #1
 8007fd8:	e7f6      	b.n	8007fc8 <memchr+0x4>

08007fda <memcpy>:
 8007fda:	2300      	movs	r3, #0
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d100      	bne.n	8007fe4 <memcpy+0xa>
 8007fe2:	bd10      	pop	{r4, pc}
 8007fe4:	5ccc      	ldrb	r4, [r1, r3]
 8007fe6:	54c4      	strb	r4, [r0, r3]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	e7f8      	b.n	8007fde <memcpy+0x4>

08007fec <_Balloc>:
 8007fec:	b570      	push	{r4, r5, r6, lr}
 8007fee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007ff0:	0006      	movs	r6, r0
 8007ff2:	000c      	movs	r4, r1
 8007ff4:	2d00      	cmp	r5, #0
 8007ff6:	d10e      	bne.n	8008016 <_Balloc+0x2a>
 8007ff8:	2010      	movs	r0, #16
 8007ffa:	f7ff ffd9 	bl	8007fb0 <malloc>
 8007ffe:	1e02      	subs	r2, r0, #0
 8008000:	6270      	str	r0, [r6, #36]	; 0x24
 8008002:	d104      	bne.n	800800e <_Balloc+0x22>
 8008004:	2166      	movs	r1, #102	; 0x66
 8008006:	4b19      	ldr	r3, [pc, #100]	; (800806c <_Balloc+0x80>)
 8008008:	4819      	ldr	r0, [pc, #100]	; (8008070 <_Balloc+0x84>)
 800800a:	f000 ff3b 	bl	8008e84 <__assert_func>
 800800e:	6045      	str	r5, [r0, #4]
 8008010:	6085      	str	r5, [r0, #8]
 8008012:	6005      	str	r5, [r0, #0]
 8008014:	60c5      	str	r5, [r0, #12]
 8008016:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8008018:	68eb      	ldr	r3, [r5, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d013      	beq.n	8008046 <_Balloc+0x5a>
 800801e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008020:	00a2      	lsls	r2, r4, #2
 8008022:	68db      	ldr	r3, [r3, #12]
 8008024:	189b      	adds	r3, r3, r2
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	2800      	cmp	r0, #0
 800802a:	d118      	bne.n	800805e <_Balloc+0x72>
 800802c:	2101      	movs	r1, #1
 800802e:	000d      	movs	r5, r1
 8008030:	40a5      	lsls	r5, r4
 8008032:	1d6a      	adds	r2, r5, #5
 8008034:	0030      	movs	r0, r6
 8008036:	0092      	lsls	r2, r2, #2
 8008038:	f000 fb74 	bl	8008724 <_calloc_r>
 800803c:	2800      	cmp	r0, #0
 800803e:	d00c      	beq.n	800805a <_Balloc+0x6e>
 8008040:	6044      	str	r4, [r0, #4]
 8008042:	6085      	str	r5, [r0, #8]
 8008044:	e00d      	b.n	8008062 <_Balloc+0x76>
 8008046:	2221      	movs	r2, #33	; 0x21
 8008048:	2104      	movs	r1, #4
 800804a:	0030      	movs	r0, r6
 800804c:	f000 fb6a 	bl	8008724 <_calloc_r>
 8008050:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008052:	60e8      	str	r0, [r5, #12]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e1      	bne.n	800801e <_Balloc+0x32>
 800805a:	2000      	movs	r0, #0
 800805c:	bd70      	pop	{r4, r5, r6, pc}
 800805e:	6802      	ldr	r2, [r0, #0]
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	2300      	movs	r3, #0
 8008064:	6103      	str	r3, [r0, #16]
 8008066:	60c3      	str	r3, [r0, #12]
 8008068:	e7f8      	b.n	800805c <_Balloc+0x70>
 800806a:	46c0      	nop			; (mov r8, r8)
 800806c:	08009c0d 	.word	0x08009c0d
 8008070:	08009cf0 	.word	0x08009cf0

08008074 <_Bfree>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008078:	0005      	movs	r5, r0
 800807a:	000c      	movs	r4, r1
 800807c:	2e00      	cmp	r6, #0
 800807e:	d10e      	bne.n	800809e <_Bfree+0x2a>
 8008080:	2010      	movs	r0, #16
 8008082:	f7ff ff95 	bl	8007fb0 <malloc>
 8008086:	1e02      	subs	r2, r0, #0
 8008088:	6268      	str	r0, [r5, #36]	; 0x24
 800808a:	d104      	bne.n	8008096 <_Bfree+0x22>
 800808c:	218a      	movs	r1, #138	; 0x8a
 800808e:	4b09      	ldr	r3, [pc, #36]	; (80080b4 <_Bfree+0x40>)
 8008090:	4809      	ldr	r0, [pc, #36]	; (80080b8 <_Bfree+0x44>)
 8008092:	f000 fef7 	bl	8008e84 <__assert_func>
 8008096:	6046      	str	r6, [r0, #4]
 8008098:	6086      	str	r6, [r0, #8]
 800809a:	6006      	str	r6, [r0, #0]
 800809c:	60c6      	str	r6, [r0, #12]
 800809e:	2c00      	cmp	r4, #0
 80080a0:	d007      	beq.n	80080b2 <_Bfree+0x3e>
 80080a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80080a4:	6862      	ldr	r2, [r4, #4]
 80080a6:	68db      	ldr	r3, [r3, #12]
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	189b      	adds	r3, r3, r2
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	6022      	str	r2, [r4, #0]
 80080b0:	601c      	str	r4, [r3, #0]
 80080b2:	bd70      	pop	{r4, r5, r6, pc}
 80080b4:	08009c0d 	.word	0x08009c0d
 80080b8:	08009cf0 	.word	0x08009cf0

080080bc <__multadd>:
 80080bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080be:	000e      	movs	r6, r1
 80080c0:	9001      	str	r0, [sp, #4]
 80080c2:	000c      	movs	r4, r1
 80080c4:	001d      	movs	r5, r3
 80080c6:	2000      	movs	r0, #0
 80080c8:	690f      	ldr	r7, [r1, #16]
 80080ca:	3614      	adds	r6, #20
 80080cc:	6833      	ldr	r3, [r6, #0]
 80080ce:	3001      	adds	r0, #1
 80080d0:	b299      	uxth	r1, r3
 80080d2:	4351      	muls	r1, r2
 80080d4:	0c1b      	lsrs	r3, r3, #16
 80080d6:	4353      	muls	r3, r2
 80080d8:	1949      	adds	r1, r1, r5
 80080da:	0c0d      	lsrs	r5, r1, #16
 80080dc:	195b      	adds	r3, r3, r5
 80080de:	0c1d      	lsrs	r5, r3, #16
 80080e0:	b289      	uxth	r1, r1
 80080e2:	041b      	lsls	r3, r3, #16
 80080e4:	185b      	adds	r3, r3, r1
 80080e6:	c608      	stmia	r6!, {r3}
 80080e8:	4287      	cmp	r7, r0
 80080ea:	dcef      	bgt.n	80080cc <__multadd+0x10>
 80080ec:	2d00      	cmp	r5, #0
 80080ee:	d022      	beq.n	8008136 <__multadd+0x7a>
 80080f0:	68a3      	ldr	r3, [r4, #8]
 80080f2:	42bb      	cmp	r3, r7
 80080f4:	dc19      	bgt.n	800812a <__multadd+0x6e>
 80080f6:	6863      	ldr	r3, [r4, #4]
 80080f8:	9801      	ldr	r0, [sp, #4]
 80080fa:	1c59      	adds	r1, r3, #1
 80080fc:	f7ff ff76 	bl	8007fec <_Balloc>
 8008100:	1e06      	subs	r6, r0, #0
 8008102:	d105      	bne.n	8008110 <__multadd+0x54>
 8008104:	0002      	movs	r2, r0
 8008106:	21b5      	movs	r1, #181	; 0xb5
 8008108:	4b0c      	ldr	r3, [pc, #48]	; (800813c <__multadd+0x80>)
 800810a:	480d      	ldr	r0, [pc, #52]	; (8008140 <__multadd+0x84>)
 800810c:	f000 feba 	bl	8008e84 <__assert_func>
 8008110:	0021      	movs	r1, r4
 8008112:	6923      	ldr	r3, [r4, #16]
 8008114:	310c      	adds	r1, #12
 8008116:	1c9a      	adds	r2, r3, #2
 8008118:	0092      	lsls	r2, r2, #2
 800811a:	300c      	adds	r0, #12
 800811c:	f7ff ff5d 	bl	8007fda <memcpy>
 8008120:	0021      	movs	r1, r4
 8008122:	9801      	ldr	r0, [sp, #4]
 8008124:	f7ff ffa6 	bl	8008074 <_Bfree>
 8008128:	0034      	movs	r4, r6
 800812a:	1d3b      	adds	r3, r7, #4
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	18e3      	adds	r3, r4, r3
 8008130:	605d      	str	r5, [r3, #4]
 8008132:	1c7b      	adds	r3, r7, #1
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	0020      	movs	r0, r4
 8008138:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	08009c7f 	.word	0x08009c7f
 8008140:	08009cf0 	.word	0x08009cf0

08008144 <__hi0bits>:
 8008144:	0003      	movs	r3, r0
 8008146:	0c02      	lsrs	r2, r0, #16
 8008148:	2000      	movs	r0, #0
 800814a:	4282      	cmp	r2, r0
 800814c:	d101      	bne.n	8008152 <__hi0bits+0xe>
 800814e:	041b      	lsls	r3, r3, #16
 8008150:	3010      	adds	r0, #16
 8008152:	0e1a      	lsrs	r2, r3, #24
 8008154:	d101      	bne.n	800815a <__hi0bits+0x16>
 8008156:	3008      	adds	r0, #8
 8008158:	021b      	lsls	r3, r3, #8
 800815a:	0f1a      	lsrs	r2, r3, #28
 800815c:	d101      	bne.n	8008162 <__hi0bits+0x1e>
 800815e:	3004      	adds	r0, #4
 8008160:	011b      	lsls	r3, r3, #4
 8008162:	0f9a      	lsrs	r2, r3, #30
 8008164:	d101      	bne.n	800816a <__hi0bits+0x26>
 8008166:	3002      	adds	r0, #2
 8008168:	009b      	lsls	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	db03      	blt.n	8008176 <__hi0bits+0x32>
 800816e:	3001      	adds	r0, #1
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	d400      	bmi.n	8008176 <__hi0bits+0x32>
 8008174:	2020      	movs	r0, #32
 8008176:	4770      	bx	lr

08008178 <__lo0bits>:
 8008178:	6803      	ldr	r3, [r0, #0]
 800817a:	0002      	movs	r2, r0
 800817c:	2107      	movs	r1, #7
 800817e:	0018      	movs	r0, r3
 8008180:	4008      	ands	r0, r1
 8008182:	420b      	tst	r3, r1
 8008184:	d00d      	beq.n	80081a2 <__lo0bits+0x2a>
 8008186:	3906      	subs	r1, #6
 8008188:	2000      	movs	r0, #0
 800818a:	420b      	tst	r3, r1
 800818c:	d105      	bne.n	800819a <__lo0bits+0x22>
 800818e:	3002      	adds	r0, #2
 8008190:	4203      	tst	r3, r0
 8008192:	d003      	beq.n	800819c <__lo0bits+0x24>
 8008194:	40cb      	lsrs	r3, r1
 8008196:	0008      	movs	r0, r1
 8008198:	6013      	str	r3, [r2, #0]
 800819a:	4770      	bx	lr
 800819c:	089b      	lsrs	r3, r3, #2
 800819e:	6013      	str	r3, [r2, #0]
 80081a0:	e7fb      	b.n	800819a <__lo0bits+0x22>
 80081a2:	b299      	uxth	r1, r3
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d101      	bne.n	80081ac <__lo0bits+0x34>
 80081a8:	2010      	movs	r0, #16
 80081aa:	0c1b      	lsrs	r3, r3, #16
 80081ac:	b2d9      	uxtb	r1, r3
 80081ae:	2900      	cmp	r1, #0
 80081b0:	d101      	bne.n	80081b6 <__lo0bits+0x3e>
 80081b2:	3008      	adds	r0, #8
 80081b4:	0a1b      	lsrs	r3, r3, #8
 80081b6:	0719      	lsls	r1, r3, #28
 80081b8:	d101      	bne.n	80081be <__lo0bits+0x46>
 80081ba:	3004      	adds	r0, #4
 80081bc:	091b      	lsrs	r3, r3, #4
 80081be:	0799      	lsls	r1, r3, #30
 80081c0:	d101      	bne.n	80081c6 <__lo0bits+0x4e>
 80081c2:	3002      	adds	r0, #2
 80081c4:	089b      	lsrs	r3, r3, #2
 80081c6:	07d9      	lsls	r1, r3, #31
 80081c8:	d4e9      	bmi.n	800819e <__lo0bits+0x26>
 80081ca:	3001      	adds	r0, #1
 80081cc:	085b      	lsrs	r3, r3, #1
 80081ce:	d1e6      	bne.n	800819e <__lo0bits+0x26>
 80081d0:	2020      	movs	r0, #32
 80081d2:	e7e2      	b.n	800819a <__lo0bits+0x22>

080081d4 <__i2b>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	000c      	movs	r4, r1
 80081d8:	2101      	movs	r1, #1
 80081da:	f7ff ff07 	bl	8007fec <_Balloc>
 80081de:	2800      	cmp	r0, #0
 80081e0:	d106      	bne.n	80081f0 <__i2b+0x1c>
 80081e2:	21a0      	movs	r1, #160	; 0xa0
 80081e4:	0002      	movs	r2, r0
 80081e6:	4b04      	ldr	r3, [pc, #16]	; (80081f8 <__i2b+0x24>)
 80081e8:	4804      	ldr	r0, [pc, #16]	; (80081fc <__i2b+0x28>)
 80081ea:	0049      	lsls	r1, r1, #1
 80081ec:	f000 fe4a 	bl	8008e84 <__assert_func>
 80081f0:	2301      	movs	r3, #1
 80081f2:	6144      	str	r4, [r0, #20]
 80081f4:	6103      	str	r3, [r0, #16]
 80081f6:	bd10      	pop	{r4, pc}
 80081f8:	08009c7f 	.word	0x08009c7f
 80081fc:	08009cf0 	.word	0x08009cf0

08008200 <__multiply>:
 8008200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008202:	690b      	ldr	r3, [r1, #16]
 8008204:	0014      	movs	r4, r2
 8008206:	6912      	ldr	r2, [r2, #16]
 8008208:	000d      	movs	r5, r1
 800820a:	b089      	sub	sp, #36	; 0x24
 800820c:	4293      	cmp	r3, r2
 800820e:	da01      	bge.n	8008214 <__multiply+0x14>
 8008210:	0025      	movs	r5, r4
 8008212:	000c      	movs	r4, r1
 8008214:	692f      	ldr	r7, [r5, #16]
 8008216:	6926      	ldr	r6, [r4, #16]
 8008218:	6869      	ldr	r1, [r5, #4]
 800821a:	19bb      	adds	r3, r7, r6
 800821c:	9302      	str	r3, [sp, #8]
 800821e:	68ab      	ldr	r3, [r5, #8]
 8008220:	19ba      	adds	r2, r7, r6
 8008222:	4293      	cmp	r3, r2
 8008224:	da00      	bge.n	8008228 <__multiply+0x28>
 8008226:	3101      	adds	r1, #1
 8008228:	f7ff fee0 	bl	8007fec <_Balloc>
 800822c:	9001      	str	r0, [sp, #4]
 800822e:	2800      	cmp	r0, #0
 8008230:	d106      	bne.n	8008240 <__multiply+0x40>
 8008232:	215e      	movs	r1, #94	; 0x5e
 8008234:	0002      	movs	r2, r0
 8008236:	4b48      	ldr	r3, [pc, #288]	; (8008358 <__multiply+0x158>)
 8008238:	4848      	ldr	r0, [pc, #288]	; (800835c <__multiply+0x15c>)
 800823a:	31ff      	adds	r1, #255	; 0xff
 800823c:	f000 fe22 	bl	8008e84 <__assert_func>
 8008240:	9b01      	ldr	r3, [sp, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	3314      	adds	r3, #20
 8008246:	469c      	mov	ip, r3
 8008248:	19bb      	adds	r3, r7, r6
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4463      	add	r3, ip
 800824e:	9303      	str	r3, [sp, #12]
 8008250:	4663      	mov	r3, ip
 8008252:	9903      	ldr	r1, [sp, #12]
 8008254:	428b      	cmp	r3, r1
 8008256:	d32c      	bcc.n	80082b2 <__multiply+0xb2>
 8008258:	002b      	movs	r3, r5
 800825a:	0022      	movs	r2, r4
 800825c:	3314      	adds	r3, #20
 800825e:	00bf      	lsls	r7, r7, #2
 8008260:	3214      	adds	r2, #20
 8008262:	9306      	str	r3, [sp, #24]
 8008264:	00b6      	lsls	r6, r6, #2
 8008266:	19db      	adds	r3, r3, r7
 8008268:	9304      	str	r3, [sp, #16]
 800826a:	1993      	adds	r3, r2, r6
 800826c:	9307      	str	r3, [sp, #28]
 800826e:	2304      	movs	r3, #4
 8008270:	9305      	str	r3, [sp, #20]
 8008272:	002b      	movs	r3, r5
 8008274:	9904      	ldr	r1, [sp, #16]
 8008276:	3315      	adds	r3, #21
 8008278:	9200      	str	r2, [sp, #0]
 800827a:	4299      	cmp	r1, r3
 800827c:	d305      	bcc.n	800828a <__multiply+0x8a>
 800827e:	1b4b      	subs	r3, r1, r5
 8008280:	3b15      	subs	r3, #21
 8008282:	089b      	lsrs	r3, r3, #2
 8008284:	3301      	adds	r3, #1
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	9305      	str	r3, [sp, #20]
 800828a:	9b07      	ldr	r3, [sp, #28]
 800828c:	9a00      	ldr	r2, [sp, #0]
 800828e:	429a      	cmp	r2, r3
 8008290:	d311      	bcc.n	80082b6 <__multiply+0xb6>
 8008292:	9b02      	ldr	r3, [sp, #8]
 8008294:	2b00      	cmp	r3, #0
 8008296:	dd06      	ble.n	80082a6 <__multiply+0xa6>
 8008298:	9b03      	ldr	r3, [sp, #12]
 800829a:	3b04      	subs	r3, #4
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	9300      	str	r3, [sp, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d053      	beq.n	800834e <__multiply+0x14e>
 80082a6:	9b01      	ldr	r3, [sp, #4]
 80082a8:	9a02      	ldr	r2, [sp, #8]
 80082aa:	0018      	movs	r0, r3
 80082ac:	611a      	str	r2, [r3, #16]
 80082ae:	b009      	add	sp, #36	; 0x24
 80082b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082b2:	c304      	stmia	r3!, {r2}
 80082b4:	e7cd      	b.n	8008252 <__multiply+0x52>
 80082b6:	9b00      	ldr	r3, [sp, #0]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	b298      	uxth	r0, r3
 80082bc:	2800      	cmp	r0, #0
 80082be:	d01b      	beq.n	80082f8 <__multiply+0xf8>
 80082c0:	4667      	mov	r7, ip
 80082c2:	2400      	movs	r4, #0
 80082c4:	9e06      	ldr	r6, [sp, #24]
 80082c6:	ce02      	ldmia	r6!, {r1}
 80082c8:	683a      	ldr	r2, [r7, #0]
 80082ca:	b28b      	uxth	r3, r1
 80082cc:	4343      	muls	r3, r0
 80082ce:	b292      	uxth	r2, r2
 80082d0:	189b      	adds	r3, r3, r2
 80082d2:	191b      	adds	r3, r3, r4
 80082d4:	0c0c      	lsrs	r4, r1, #16
 80082d6:	4344      	muls	r4, r0
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	0c11      	lsrs	r1, r2, #16
 80082dc:	1861      	adds	r1, r4, r1
 80082de:	0c1c      	lsrs	r4, r3, #16
 80082e0:	1909      	adds	r1, r1, r4
 80082e2:	0c0c      	lsrs	r4, r1, #16
 80082e4:	b29b      	uxth	r3, r3
 80082e6:	0409      	lsls	r1, r1, #16
 80082e8:	430b      	orrs	r3, r1
 80082ea:	c708      	stmia	r7!, {r3}
 80082ec:	9b04      	ldr	r3, [sp, #16]
 80082ee:	42b3      	cmp	r3, r6
 80082f0:	d8e9      	bhi.n	80082c6 <__multiply+0xc6>
 80082f2:	4663      	mov	r3, ip
 80082f4:	9a05      	ldr	r2, [sp, #20]
 80082f6:	509c      	str	r4, [r3, r2]
 80082f8:	9b00      	ldr	r3, [sp, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	0c1e      	lsrs	r6, r3, #16
 80082fe:	d020      	beq.n	8008342 <__multiply+0x142>
 8008300:	4663      	mov	r3, ip
 8008302:	002c      	movs	r4, r5
 8008304:	4660      	mov	r0, ip
 8008306:	2700      	movs	r7, #0
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3414      	adds	r4, #20
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	b29b      	uxth	r3, r3
 8008310:	b291      	uxth	r1, r2
 8008312:	4371      	muls	r1, r6
 8008314:	6802      	ldr	r2, [r0, #0]
 8008316:	0c12      	lsrs	r2, r2, #16
 8008318:	1889      	adds	r1, r1, r2
 800831a:	19cf      	adds	r7, r1, r7
 800831c:	0439      	lsls	r1, r7, #16
 800831e:	430b      	orrs	r3, r1
 8008320:	6003      	str	r3, [r0, #0]
 8008322:	cc02      	ldmia	r4!, {r1}
 8008324:	6843      	ldr	r3, [r0, #4]
 8008326:	0c09      	lsrs	r1, r1, #16
 8008328:	4371      	muls	r1, r6
 800832a:	b29b      	uxth	r3, r3
 800832c:	0c3f      	lsrs	r7, r7, #16
 800832e:	18cb      	adds	r3, r1, r3
 8008330:	9a04      	ldr	r2, [sp, #16]
 8008332:	19db      	adds	r3, r3, r7
 8008334:	0c1f      	lsrs	r7, r3, #16
 8008336:	3004      	adds	r0, #4
 8008338:	42a2      	cmp	r2, r4
 800833a:	d8e7      	bhi.n	800830c <__multiply+0x10c>
 800833c:	4662      	mov	r2, ip
 800833e:	9905      	ldr	r1, [sp, #20]
 8008340:	5053      	str	r3, [r2, r1]
 8008342:	9b00      	ldr	r3, [sp, #0]
 8008344:	3304      	adds	r3, #4
 8008346:	9300      	str	r3, [sp, #0]
 8008348:	2304      	movs	r3, #4
 800834a:	449c      	add	ip, r3
 800834c:	e79d      	b.n	800828a <__multiply+0x8a>
 800834e:	9b02      	ldr	r3, [sp, #8]
 8008350:	3b01      	subs	r3, #1
 8008352:	9302      	str	r3, [sp, #8]
 8008354:	e79d      	b.n	8008292 <__multiply+0x92>
 8008356:	46c0      	nop			; (mov r8, r8)
 8008358:	08009c7f 	.word	0x08009c7f
 800835c:	08009cf0 	.word	0x08009cf0

08008360 <__pow5mult>:
 8008360:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008362:	2303      	movs	r3, #3
 8008364:	0015      	movs	r5, r2
 8008366:	0007      	movs	r7, r0
 8008368:	000e      	movs	r6, r1
 800836a:	401a      	ands	r2, r3
 800836c:	421d      	tst	r5, r3
 800836e:	d008      	beq.n	8008382 <__pow5mult+0x22>
 8008370:	4925      	ldr	r1, [pc, #148]	; (8008408 <__pow5mult+0xa8>)
 8008372:	3a01      	subs	r2, #1
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	5852      	ldr	r2, [r2, r1]
 8008378:	2300      	movs	r3, #0
 800837a:	0031      	movs	r1, r6
 800837c:	f7ff fe9e 	bl	80080bc <__multadd>
 8008380:	0006      	movs	r6, r0
 8008382:	10ad      	asrs	r5, r5, #2
 8008384:	d03d      	beq.n	8008402 <__pow5mult+0xa2>
 8008386:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008388:	2c00      	cmp	r4, #0
 800838a:	d10f      	bne.n	80083ac <__pow5mult+0x4c>
 800838c:	2010      	movs	r0, #16
 800838e:	f7ff fe0f 	bl	8007fb0 <malloc>
 8008392:	1e02      	subs	r2, r0, #0
 8008394:	6278      	str	r0, [r7, #36]	; 0x24
 8008396:	d105      	bne.n	80083a4 <__pow5mult+0x44>
 8008398:	21d7      	movs	r1, #215	; 0xd7
 800839a:	4b1c      	ldr	r3, [pc, #112]	; (800840c <__pow5mult+0xac>)
 800839c:	481c      	ldr	r0, [pc, #112]	; (8008410 <__pow5mult+0xb0>)
 800839e:	0049      	lsls	r1, r1, #1
 80083a0:	f000 fd70 	bl	8008e84 <__assert_func>
 80083a4:	6044      	str	r4, [r0, #4]
 80083a6:	6084      	str	r4, [r0, #8]
 80083a8:	6004      	str	r4, [r0, #0]
 80083aa:	60c4      	str	r4, [r0, #12]
 80083ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ae:	689c      	ldr	r4, [r3, #8]
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	2c00      	cmp	r4, #0
 80083b4:	d108      	bne.n	80083c8 <__pow5mult+0x68>
 80083b6:	0038      	movs	r0, r7
 80083b8:	4916      	ldr	r1, [pc, #88]	; (8008414 <__pow5mult+0xb4>)
 80083ba:	f7ff ff0b 	bl	80081d4 <__i2b>
 80083be:	9b01      	ldr	r3, [sp, #4]
 80083c0:	0004      	movs	r4, r0
 80083c2:	6098      	str	r0, [r3, #8]
 80083c4:	2300      	movs	r3, #0
 80083c6:	6003      	str	r3, [r0, #0]
 80083c8:	2301      	movs	r3, #1
 80083ca:	421d      	tst	r5, r3
 80083cc:	d00a      	beq.n	80083e4 <__pow5mult+0x84>
 80083ce:	0031      	movs	r1, r6
 80083d0:	0022      	movs	r2, r4
 80083d2:	0038      	movs	r0, r7
 80083d4:	f7ff ff14 	bl	8008200 <__multiply>
 80083d8:	0031      	movs	r1, r6
 80083da:	9001      	str	r0, [sp, #4]
 80083dc:	0038      	movs	r0, r7
 80083de:	f7ff fe49 	bl	8008074 <_Bfree>
 80083e2:	9e01      	ldr	r6, [sp, #4]
 80083e4:	106d      	asrs	r5, r5, #1
 80083e6:	d00c      	beq.n	8008402 <__pow5mult+0xa2>
 80083e8:	6820      	ldr	r0, [r4, #0]
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d107      	bne.n	80083fe <__pow5mult+0x9e>
 80083ee:	0022      	movs	r2, r4
 80083f0:	0021      	movs	r1, r4
 80083f2:	0038      	movs	r0, r7
 80083f4:	f7ff ff04 	bl	8008200 <__multiply>
 80083f8:	2300      	movs	r3, #0
 80083fa:	6020      	str	r0, [r4, #0]
 80083fc:	6003      	str	r3, [r0, #0]
 80083fe:	0004      	movs	r4, r0
 8008400:	e7e2      	b.n	80083c8 <__pow5mult+0x68>
 8008402:	0030      	movs	r0, r6
 8008404:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	08009e40 	.word	0x08009e40
 800840c:	08009c0d 	.word	0x08009c0d
 8008410:	08009cf0 	.word	0x08009cf0
 8008414:	00000271 	.word	0x00000271

08008418 <__lshift>:
 8008418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800841a:	000c      	movs	r4, r1
 800841c:	0017      	movs	r7, r2
 800841e:	6923      	ldr	r3, [r4, #16]
 8008420:	1155      	asrs	r5, r2, #5
 8008422:	b087      	sub	sp, #28
 8008424:	18eb      	adds	r3, r5, r3
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	3301      	adds	r3, #1
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	6849      	ldr	r1, [r1, #4]
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	9004      	str	r0, [sp, #16]
 8008432:	9a01      	ldr	r2, [sp, #4]
 8008434:	4293      	cmp	r3, r2
 8008436:	db10      	blt.n	800845a <__lshift+0x42>
 8008438:	9804      	ldr	r0, [sp, #16]
 800843a:	f7ff fdd7 	bl	8007fec <_Balloc>
 800843e:	2300      	movs	r3, #0
 8008440:	0002      	movs	r2, r0
 8008442:	0006      	movs	r6, r0
 8008444:	0019      	movs	r1, r3
 8008446:	3214      	adds	r2, #20
 8008448:	4298      	cmp	r0, r3
 800844a:	d10c      	bne.n	8008466 <__lshift+0x4e>
 800844c:	21da      	movs	r1, #218	; 0xda
 800844e:	0002      	movs	r2, r0
 8008450:	4b26      	ldr	r3, [pc, #152]	; (80084ec <__lshift+0xd4>)
 8008452:	4827      	ldr	r0, [pc, #156]	; (80084f0 <__lshift+0xd8>)
 8008454:	31ff      	adds	r1, #255	; 0xff
 8008456:	f000 fd15 	bl	8008e84 <__assert_func>
 800845a:	3101      	adds	r1, #1
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	e7e8      	b.n	8008432 <__lshift+0x1a>
 8008460:	0098      	lsls	r0, r3, #2
 8008462:	5011      	str	r1, [r2, r0]
 8008464:	3301      	adds	r3, #1
 8008466:	42ab      	cmp	r3, r5
 8008468:	dbfa      	blt.n	8008460 <__lshift+0x48>
 800846a:	43eb      	mvns	r3, r5
 800846c:	17db      	asrs	r3, r3, #31
 800846e:	401d      	ands	r5, r3
 8008470:	211f      	movs	r1, #31
 8008472:	0023      	movs	r3, r4
 8008474:	0038      	movs	r0, r7
 8008476:	00ad      	lsls	r5, r5, #2
 8008478:	1955      	adds	r5, r2, r5
 800847a:	6922      	ldr	r2, [r4, #16]
 800847c:	3314      	adds	r3, #20
 800847e:	0092      	lsls	r2, r2, #2
 8008480:	4008      	ands	r0, r1
 8008482:	4684      	mov	ip, r0
 8008484:	189a      	adds	r2, r3, r2
 8008486:	420f      	tst	r7, r1
 8008488:	d02a      	beq.n	80084e0 <__lshift+0xc8>
 800848a:	3101      	adds	r1, #1
 800848c:	1a09      	subs	r1, r1, r0
 800848e:	9105      	str	r1, [sp, #20]
 8008490:	2100      	movs	r1, #0
 8008492:	9503      	str	r5, [sp, #12]
 8008494:	4667      	mov	r7, ip
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	40b8      	lsls	r0, r7
 800849a:	4301      	orrs	r1, r0
 800849c:	9803      	ldr	r0, [sp, #12]
 800849e:	c002      	stmia	r0!, {r1}
 80084a0:	cb02      	ldmia	r3!, {r1}
 80084a2:	9003      	str	r0, [sp, #12]
 80084a4:	9805      	ldr	r0, [sp, #20]
 80084a6:	40c1      	lsrs	r1, r0
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d8f3      	bhi.n	8008494 <__lshift+0x7c>
 80084ac:	0020      	movs	r0, r4
 80084ae:	3015      	adds	r0, #21
 80084b0:	2304      	movs	r3, #4
 80084b2:	4282      	cmp	r2, r0
 80084b4:	d304      	bcc.n	80084c0 <__lshift+0xa8>
 80084b6:	1b13      	subs	r3, r2, r4
 80084b8:	3b15      	subs	r3, #21
 80084ba:	089b      	lsrs	r3, r3, #2
 80084bc:	3301      	adds	r3, #1
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	50e9      	str	r1, [r5, r3]
 80084c2:	2900      	cmp	r1, #0
 80084c4:	d002      	beq.n	80084cc <__lshift+0xb4>
 80084c6:	9b02      	ldr	r3, [sp, #8]
 80084c8:	3302      	adds	r3, #2
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	9b01      	ldr	r3, [sp, #4]
 80084ce:	9804      	ldr	r0, [sp, #16]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	0021      	movs	r1, r4
 80084d4:	6133      	str	r3, [r6, #16]
 80084d6:	f7ff fdcd 	bl	8008074 <_Bfree>
 80084da:	0030      	movs	r0, r6
 80084dc:	b007      	add	sp, #28
 80084de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80084e0:	cb02      	ldmia	r3!, {r1}
 80084e2:	c502      	stmia	r5!, {r1}
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d8fb      	bhi.n	80084e0 <__lshift+0xc8>
 80084e8:	e7f0      	b.n	80084cc <__lshift+0xb4>
 80084ea:	46c0      	nop			; (mov r8, r8)
 80084ec:	08009c7f 	.word	0x08009c7f
 80084f0:	08009cf0 	.word	0x08009cf0

080084f4 <__mcmp>:
 80084f4:	6902      	ldr	r2, [r0, #16]
 80084f6:	690b      	ldr	r3, [r1, #16]
 80084f8:	b530      	push	{r4, r5, lr}
 80084fa:	0004      	movs	r4, r0
 80084fc:	1ad0      	subs	r0, r2, r3
 80084fe:	429a      	cmp	r2, r3
 8008500:	d10d      	bne.n	800851e <__mcmp+0x2a>
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	3414      	adds	r4, #20
 8008506:	3114      	adds	r1, #20
 8008508:	18e2      	adds	r2, r4, r3
 800850a:	18c9      	adds	r1, r1, r3
 800850c:	3a04      	subs	r2, #4
 800850e:	3904      	subs	r1, #4
 8008510:	6815      	ldr	r5, [r2, #0]
 8008512:	680b      	ldr	r3, [r1, #0]
 8008514:	429d      	cmp	r5, r3
 8008516:	d003      	beq.n	8008520 <__mcmp+0x2c>
 8008518:	2001      	movs	r0, #1
 800851a:	429d      	cmp	r5, r3
 800851c:	d303      	bcc.n	8008526 <__mcmp+0x32>
 800851e:	bd30      	pop	{r4, r5, pc}
 8008520:	4294      	cmp	r4, r2
 8008522:	d3f3      	bcc.n	800850c <__mcmp+0x18>
 8008524:	e7fb      	b.n	800851e <__mcmp+0x2a>
 8008526:	4240      	negs	r0, r0
 8008528:	e7f9      	b.n	800851e <__mcmp+0x2a>
	...

0800852c <__mdiff>:
 800852c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800852e:	000e      	movs	r6, r1
 8008530:	0007      	movs	r7, r0
 8008532:	0011      	movs	r1, r2
 8008534:	0030      	movs	r0, r6
 8008536:	b087      	sub	sp, #28
 8008538:	0014      	movs	r4, r2
 800853a:	f7ff ffdb 	bl	80084f4 <__mcmp>
 800853e:	1e05      	subs	r5, r0, #0
 8008540:	d110      	bne.n	8008564 <__mdiff+0x38>
 8008542:	0001      	movs	r1, r0
 8008544:	0038      	movs	r0, r7
 8008546:	f7ff fd51 	bl	8007fec <_Balloc>
 800854a:	1e02      	subs	r2, r0, #0
 800854c:	d104      	bne.n	8008558 <__mdiff+0x2c>
 800854e:	4b40      	ldr	r3, [pc, #256]	; (8008650 <__mdiff+0x124>)
 8008550:	4940      	ldr	r1, [pc, #256]	; (8008654 <__mdiff+0x128>)
 8008552:	4841      	ldr	r0, [pc, #260]	; (8008658 <__mdiff+0x12c>)
 8008554:	f000 fc96 	bl	8008e84 <__assert_func>
 8008558:	2301      	movs	r3, #1
 800855a:	6145      	str	r5, [r0, #20]
 800855c:	6103      	str	r3, [r0, #16]
 800855e:	0010      	movs	r0, r2
 8008560:	b007      	add	sp, #28
 8008562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008564:	2301      	movs	r3, #1
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	2800      	cmp	r0, #0
 800856a:	db04      	blt.n	8008576 <__mdiff+0x4a>
 800856c:	0023      	movs	r3, r4
 800856e:	0034      	movs	r4, r6
 8008570:	001e      	movs	r6, r3
 8008572:	2300      	movs	r3, #0
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	0038      	movs	r0, r7
 8008578:	6861      	ldr	r1, [r4, #4]
 800857a:	f7ff fd37 	bl	8007fec <_Balloc>
 800857e:	1e02      	subs	r2, r0, #0
 8008580:	d103      	bne.n	800858a <__mdiff+0x5e>
 8008582:	2190      	movs	r1, #144	; 0x90
 8008584:	4b32      	ldr	r3, [pc, #200]	; (8008650 <__mdiff+0x124>)
 8008586:	0089      	lsls	r1, r1, #2
 8008588:	e7e3      	b.n	8008552 <__mdiff+0x26>
 800858a:	9b01      	ldr	r3, [sp, #4]
 800858c:	2700      	movs	r7, #0
 800858e:	60c3      	str	r3, [r0, #12]
 8008590:	6920      	ldr	r0, [r4, #16]
 8008592:	3414      	adds	r4, #20
 8008594:	9401      	str	r4, [sp, #4]
 8008596:	9b01      	ldr	r3, [sp, #4]
 8008598:	0084      	lsls	r4, r0, #2
 800859a:	191b      	adds	r3, r3, r4
 800859c:	0034      	movs	r4, r6
 800859e:	9302      	str	r3, [sp, #8]
 80085a0:	6933      	ldr	r3, [r6, #16]
 80085a2:	3414      	adds	r4, #20
 80085a4:	0099      	lsls	r1, r3, #2
 80085a6:	1863      	adds	r3, r4, r1
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	0013      	movs	r3, r2
 80085ac:	3314      	adds	r3, #20
 80085ae:	469c      	mov	ip, r3
 80085b0:	9305      	str	r3, [sp, #20]
 80085b2:	9b01      	ldr	r3, [sp, #4]
 80085b4:	9304      	str	r3, [sp, #16]
 80085b6:	9b04      	ldr	r3, [sp, #16]
 80085b8:	cc02      	ldmia	r4!, {r1}
 80085ba:	cb20      	ldmia	r3!, {r5}
 80085bc:	9304      	str	r3, [sp, #16]
 80085be:	b2ab      	uxth	r3, r5
 80085c0:	19df      	adds	r7, r3, r7
 80085c2:	b28b      	uxth	r3, r1
 80085c4:	1afb      	subs	r3, r7, r3
 80085c6:	0c09      	lsrs	r1, r1, #16
 80085c8:	0c2d      	lsrs	r5, r5, #16
 80085ca:	1a6d      	subs	r5, r5, r1
 80085cc:	1419      	asrs	r1, r3, #16
 80085ce:	186d      	adds	r5, r5, r1
 80085d0:	4661      	mov	r1, ip
 80085d2:	142f      	asrs	r7, r5, #16
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	042d      	lsls	r5, r5, #16
 80085d8:	432b      	orrs	r3, r5
 80085da:	c108      	stmia	r1!, {r3}
 80085dc:	9b03      	ldr	r3, [sp, #12]
 80085de:	468c      	mov	ip, r1
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d8e8      	bhi.n	80085b6 <__mdiff+0x8a>
 80085e4:	0031      	movs	r1, r6
 80085e6:	9c03      	ldr	r4, [sp, #12]
 80085e8:	3115      	adds	r1, #21
 80085ea:	2304      	movs	r3, #4
 80085ec:	428c      	cmp	r4, r1
 80085ee:	d304      	bcc.n	80085fa <__mdiff+0xce>
 80085f0:	1ba3      	subs	r3, r4, r6
 80085f2:	3b15      	subs	r3, #21
 80085f4:	089b      	lsrs	r3, r3, #2
 80085f6:	3301      	adds	r3, #1
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	9901      	ldr	r1, [sp, #4]
 80085fc:	18cc      	adds	r4, r1, r3
 80085fe:	9905      	ldr	r1, [sp, #20]
 8008600:	0026      	movs	r6, r4
 8008602:	18cb      	adds	r3, r1, r3
 8008604:	469c      	mov	ip, r3
 8008606:	9902      	ldr	r1, [sp, #8]
 8008608:	428e      	cmp	r6, r1
 800860a:	d310      	bcc.n	800862e <__mdiff+0x102>
 800860c:	9e02      	ldr	r6, [sp, #8]
 800860e:	1ee1      	subs	r1, r4, #3
 8008610:	2500      	movs	r5, #0
 8008612:	428e      	cmp	r6, r1
 8008614:	d304      	bcc.n	8008620 <__mdiff+0xf4>
 8008616:	0031      	movs	r1, r6
 8008618:	3103      	adds	r1, #3
 800861a:	1b0c      	subs	r4, r1, r4
 800861c:	08a4      	lsrs	r4, r4, #2
 800861e:	00a5      	lsls	r5, r4, #2
 8008620:	195b      	adds	r3, r3, r5
 8008622:	3b04      	subs	r3, #4
 8008624:	6819      	ldr	r1, [r3, #0]
 8008626:	2900      	cmp	r1, #0
 8008628:	d00f      	beq.n	800864a <__mdiff+0x11e>
 800862a:	6110      	str	r0, [r2, #16]
 800862c:	e797      	b.n	800855e <__mdiff+0x32>
 800862e:	ce02      	ldmia	r6!, {r1}
 8008630:	b28d      	uxth	r5, r1
 8008632:	19ed      	adds	r5, r5, r7
 8008634:	0c0f      	lsrs	r7, r1, #16
 8008636:	1429      	asrs	r1, r5, #16
 8008638:	1879      	adds	r1, r7, r1
 800863a:	140f      	asrs	r7, r1, #16
 800863c:	b2ad      	uxth	r5, r5
 800863e:	0409      	lsls	r1, r1, #16
 8008640:	430d      	orrs	r5, r1
 8008642:	4661      	mov	r1, ip
 8008644:	c120      	stmia	r1!, {r5}
 8008646:	468c      	mov	ip, r1
 8008648:	e7dd      	b.n	8008606 <__mdiff+0xda>
 800864a:	3801      	subs	r0, #1
 800864c:	e7e9      	b.n	8008622 <__mdiff+0xf6>
 800864e:	46c0      	nop			; (mov r8, r8)
 8008650:	08009c7f 	.word	0x08009c7f
 8008654:	00000232 	.word	0x00000232
 8008658:	08009cf0 	.word	0x08009cf0

0800865c <__d2b>:
 800865c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800865e:	2101      	movs	r1, #1
 8008660:	0014      	movs	r4, r2
 8008662:	001e      	movs	r6, r3
 8008664:	9f08      	ldr	r7, [sp, #32]
 8008666:	f7ff fcc1 	bl	8007fec <_Balloc>
 800866a:	1e05      	subs	r5, r0, #0
 800866c:	d105      	bne.n	800867a <__d2b+0x1e>
 800866e:	0002      	movs	r2, r0
 8008670:	4b26      	ldr	r3, [pc, #152]	; (800870c <__d2b+0xb0>)
 8008672:	4927      	ldr	r1, [pc, #156]	; (8008710 <__d2b+0xb4>)
 8008674:	4827      	ldr	r0, [pc, #156]	; (8008714 <__d2b+0xb8>)
 8008676:	f000 fc05 	bl	8008e84 <__assert_func>
 800867a:	0333      	lsls	r3, r6, #12
 800867c:	0076      	lsls	r6, r6, #1
 800867e:	0b1b      	lsrs	r3, r3, #12
 8008680:	0d76      	lsrs	r6, r6, #21
 8008682:	d124      	bne.n	80086ce <__d2b+0x72>
 8008684:	9301      	str	r3, [sp, #4]
 8008686:	2c00      	cmp	r4, #0
 8008688:	d027      	beq.n	80086da <__d2b+0x7e>
 800868a:	4668      	mov	r0, sp
 800868c:	9400      	str	r4, [sp, #0]
 800868e:	f7ff fd73 	bl	8008178 <__lo0bits>
 8008692:	9c00      	ldr	r4, [sp, #0]
 8008694:	2800      	cmp	r0, #0
 8008696:	d01e      	beq.n	80086d6 <__d2b+0x7a>
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	2120      	movs	r1, #32
 800869c:	001a      	movs	r2, r3
 800869e:	1a09      	subs	r1, r1, r0
 80086a0:	408a      	lsls	r2, r1
 80086a2:	40c3      	lsrs	r3, r0
 80086a4:	4322      	orrs	r2, r4
 80086a6:	616a      	str	r2, [r5, #20]
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	9c01      	ldr	r4, [sp, #4]
 80086ac:	61ac      	str	r4, [r5, #24]
 80086ae:	1e63      	subs	r3, r4, #1
 80086b0:	419c      	sbcs	r4, r3
 80086b2:	3401      	adds	r4, #1
 80086b4:	612c      	str	r4, [r5, #16]
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	d018      	beq.n	80086ec <__d2b+0x90>
 80086ba:	4b17      	ldr	r3, [pc, #92]	; (8008718 <__d2b+0xbc>)
 80086bc:	18f6      	adds	r6, r6, r3
 80086be:	2335      	movs	r3, #53	; 0x35
 80086c0:	1836      	adds	r6, r6, r0
 80086c2:	1a18      	subs	r0, r3, r0
 80086c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c6:	603e      	str	r6, [r7, #0]
 80086c8:	6018      	str	r0, [r3, #0]
 80086ca:	0028      	movs	r0, r5
 80086cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80086ce:	2280      	movs	r2, #128	; 0x80
 80086d0:	0352      	lsls	r2, r2, #13
 80086d2:	4313      	orrs	r3, r2
 80086d4:	e7d6      	b.n	8008684 <__d2b+0x28>
 80086d6:	616c      	str	r4, [r5, #20]
 80086d8:	e7e7      	b.n	80086aa <__d2b+0x4e>
 80086da:	a801      	add	r0, sp, #4
 80086dc:	f7ff fd4c 	bl	8008178 <__lo0bits>
 80086e0:	2401      	movs	r4, #1
 80086e2:	9b01      	ldr	r3, [sp, #4]
 80086e4:	612c      	str	r4, [r5, #16]
 80086e6:	616b      	str	r3, [r5, #20]
 80086e8:	3020      	adds	r0, #32
 80086ea:	e7e4      	b.n	80086b6 <__d2b+0x5a>
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <__d2b+0xc0>)
 80086ee:	18c0      	adds	r0, r0, r3
 80086f0:	4b0b      	ldr	r3, [pc, #44]	; (8008720 <__d2b+0xc4>)
 80086f2:	6038      	str	r0, [r7, #0]
 80086f4:	18e3      	adds	r3, r4, r3
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	18eb      	adds	r3, r5, r3
 80086fa:	6958      	ldr	r0, [r3, #20]
 80086fc:	f7ff fd22 	bl	8008144 <__hi0bits>
 8008700:	0164      	lsls	r4, r4, #5
 8008702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008704:	1a24      	subs	r4, r4, r0
 8008706:	601c      	str	r4, [r3, #0]
 8008708:	e7df      	b.n	80086ca <__d2b+0x6e>
 800870a:	46c0      	nop			; (mov r8, r8)
 800870c:	08009c7f 	.word	0x08009c7f
 8008710:	0000030a 	.word	0x0000030a
 8008714:	08009cf0 	.word	0x08009cf0
 8008718:	fffffbcd 	.word	0xfffffbcd
 800871c:	fffffbce 	.word	0xfffffbce
 8008720:	3fffffff 	.word	0x3fffffff

08008724 <_calloc_r>:
 8008724:	b570      	push	{r4, r5, r6, lr}
 8008726:	0c13      	lsrs	r3, r2, #16
 8008728:	0c0d      	lsrs	r5, r1, #16
 800872a:	d11e      	bne.n	800876a <_calloc_r+0x46>
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10c      	bne.n	800874a <_calloc_r+0x26>
 8008730:	b289      	uxth	r1, r1
 8008732:	b294      	uxth	r4, r2
 8008734:	434c      	muls	r4, r1
 8008736:	0021      	movs	r1, r4
 8008738:	f000 f88c 	bl	8008854 <_malloc_r>
 800873c:	1e05      	subs	r5, r0, #0
 800873e:	d01b      	beq.n	8008778 <_calloc_r+0x54>
 8008740:	0022      	movs	r2, r4
 8008742:	2100      	movs	r1, #0
 8008744:	f7fd fff4 	bl	8006730 <memset>
 8008748:	e016      	b.n	8008778 <_calloc_r+0x54>
 800874a:	1c1d      	adds	r5, r3, #0
 800874c:	1c0b      	adds	r3, r1, #0
 800874e:	b292      	uxth	r2, r2
 8008750:	b289      	uxth	r1, r1
 8008752:	b29c      	uxth	r4, r3
 8008754:	4351      	muls	r1, r2
 8008756:	b2ab      	uxth	r3, r5
 8008758:	4363      	muls	r3, r4
 800875a:	0c0c      	lsrs	r4, r1, #16
 800875c:	191c      	adds	r4, r3, r4
 800875e:	0c22      	lsrs	r2, r4, #16
 8008760:	d107      	bne.n	8008772 <_calloc_r+0x4e>
 8008762:	0424      	lsls	r4, r4, #16
 8008764:	b289      	uxth	r1, r1
 8008766:	430c      	orrs	r4, r1
 8008768:	e7e5      	b.n	8008736 <_calloc_r+0x12>
 800876a:	2b00      	cmp	r3, #0
 800876c:	d101      	bne.n	8008772 <_calloc_r+0x4e>
 800876e:	1c13      	adds	r3, r2, #0
 8008770:	e7ed      	b.n	800874e <_calloc_r+0x2a>
 8008772:	230c      	movs	r3, #12
 8008774:	2500      	movs	r5, #0
 8008776:	6003      	str	r3, [r0, #0]
 8008778:	0028      	movs	r0, r5
 800877a:	bd70      	pop	{r4, r5, r6, pc}

0800877c <_free_r>:
 800877c:	b570      	push	{r4, r5, r6, lr}
 800877e:	0005      	movs	r5, r0
 8008780:	2900      	cmp	r1, #0
 8008782:	d010      	beq.n	80087a6 <_free_r+0x2a>
 8008784:	1f0c      	subs	r4, r1, #4
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	da00      	bge.n	800878e <_free_r+0x12>
 800878c:	18e4      	adds	r4, r4, r3
 800878e:	0028      	movs	r0, r5
 8008790:	f000 fd16 	bl	80091c0 <__malloc_lock>
 8008794:	4a1d      	ldr	r2, [pc, #116]	; (800880c <_free_r+0x90>)
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d105      	bne.n	80087a8 <_free_r+0x2c>
 800879c:	6063      	str	r3, [r4, #4]
 800879e:	6014      	str	r4, [r2, #0]
 80087a0:	0028      	movs	r0, r5
 80087a2:	f000 fd15 	bl	80091d0 <__malloc_unlock>
 80087a6:	bd70      	pop	{r4, r5, r6, pc}
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	d908      	bls.n	80087be <_free_r+0x42>
 80087ac:	6821      	ldr	r1, [r4, #0]
 80087ae:	1860      	adds	r0, r4, r1
 80087b0:	4283      	cmp	r3, r0
 80087b2:	d1f3      	bne.n	800879c <_free_r+0x20>
 80087b4:	6818      	ldr	r0, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	1841      	adds	r1, r0, r1
 80087ba:	6021      	str	r1, [r4, #0]
 80087bc:	e7ee      	b.n	800879c <_free_r+0x20>
 80087be:	001a      	movs	r2, r3
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <_free_r+0x4e>
 80087c6:	42a3      	cmp	r3, r4
 80087c8:	d9f9      	bls.n	80087be <_free_r+0x42>
 80087ca:	6811      	ldr	r1, [r2, #0]
 80087cc:	1850      	adds	r0, r2, r1
 80087ce:	42a0      	cmp	r0, r4
 80087d0:	d10b      	bne.n	80087ea <_free_r+0x6e>
 80087d2:	6820      	ldr	r0, [r4, #0]
 80087d4:	1809      	adds	r1, r1, r0
 80087d6:	1850      	adds	r0, r2, r1
 80087d8:	6011      	str	r1, [r2, #0]
 80087da:	4283      	cmp	r3, r0
 80087dc:	d1e0      	bne.n	80087a0 <_free_r+0x24>
 80087de:	6818      	ldr	r0, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	1841      	adds	r1, r0, r1
 80087e4:	6011      	str	r1, [r2, #0]
 80087e6:	6053      	str	r3, [r2, #4]
 80087e8:	e7da      	b.n	80087a0 <_free_r+0x24>
 80087ea:	42a0      	cmp	r0, r4
 80087ec:	d902      	bls.n	80087f4 <_free_r+0x78>
 80087ee:	230c      	movs	r3, #12
 80087f0:	602b      	str	r3, [r5, #0]
 80087f2:	e7d5      	b.n	80087a0 <_free_r+0x24>
 80087f4:	6821      	ldr	r1, [r4, #0]
 80087f6:	1860      	adds	r0, r4, r1
 80087f8:	4283      	cmp	r3, r0
 80087fa:	d103      	bne.n	8008804 <_free_r+0x88>
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	1841      	adds	r1, r0, r1
 8008802:	6021      	str	r1, [r4, #0]
 8008804:	6063      	str	r3, [r4, #4]
 8008806:	6054      	str	r4, [r2, #4]
 8008808:	e7ca      	b.n	80087a0 <_free_r+0x24>
 800880a:	46c0      	nop			; (mov r8, r8)
 800880c:	20000310 	.word	0x20000310

08008810 <sbrk_aligned>:
 8008810:	b570      	push	{r4, r5, r6, lr}
 8008812:	4e0f      	ldr	r6, [pc, #60]	; (8008850 <sbrk_aligned+0x40>)
 8008814:	000d      	movs	r5, r1
 8008816:	6831      	ldr	r1, [r6, #0]
 8008818:	0004      	movs	r4, r0
 800881a:	2900      	cmp	r1, #0
 800881c:	d102      	bne.n	8008824 <sbrk_aligned+0x14>
 800881e:	f000 f9f1 	bl	8008c04 <_sbrk_r>
 8008822:	6030      	str	r0, [r6, #0]
 8008824:	0029      	movs	r1, r5
 8008826:	0020      	movs	r0, r4
 8008828:	f000 f9ec 	bl	8008c04 <_sbrk_r>
 800882c:	1c43      	adds	r3, r0, #1
 800882e:	d00a      	beq.n	8008846 <sbrk_aligned+0x36>
 8008830:	2303      	movs	r3, #3
 8008832:	1cc5      	adds	r5, r0, #3
 8008834:	439d      	bics	r5, r3
 8008836:	42a8      	cmp	r0, r5
 8008838:	d007      	beq.n	800884a <sbrk_aligned+0x3a>
 800883a:	1a29      	subs	r1, r5, r0
 800883c:	0020      	movs	r0, r4
 800883e:	f000 f9e1 	bl	8008c04 <_sbrk_r>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	d101      	bne.n	800884a <sbrk_aligned+0x3a>
 8008846:	2501      	movs	r5, #1
 8008848:	426d      	negs	r5, r5
 800884a:	0028      	movs	r0, r5
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	46c0      	nop			; (mov r8, r8)
 8008850:	20000314 	.word	0x20000314

08008854 <_malloc_r>:
 8008854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008856:	2203      	movs	r2, #3
 8008858:	1ccb      	adds	r3, r1, #3
 800885a:	4393      	bics	r3, r2
 800885c:	3308      	adds	r3, #8
 800885e:	0006      	movs	r6, r0
 8008860:	001f      	movs	r7, r3
 8008862:	2b0c      	cmp	r3, #12
 8008864:	d232      	bcs.n	80088cc <_malloc_r+0x78>
 8008866:	270c      	movs	r7, #12
 8008868:	42b9      	cmp	r1, r7
 800886a:	d831      	bhi.n	80088d0 <_malloc_r+0x7c>
 800886c:	0030      	movs	r0, r6
 800886e:	f000 fca7 	bl	80091c0 <__malloc_lock>
 8008872:	4d32      	ldr	r5, [pc, #200]	; (800893c <_malloc_r+0xe8>)
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	001c      	movs	r4, r3
 8008878:	2c00      	cmp	r4, #0
 800887a:	d12e      	bne.n	80088da <_malloc_r+0x86>
 800887c:	0039      	movs	r1, r7
 800887e:	0030      	movs	r0, r6
 8008880:	f7ff ffc6 	bl	8008810 <sbrk_aligned>
 8008884:	0004      	movs	r4, r0
 8008886:	1c43      	adds	r3, r0, #1
 8008888:	d11e      	bne.n	80088c8 <_malloc_r+0x74>
 800888a:	682c      	ldr	r4, [r5, #0]
 800888c:	0025      	movs	r5, r4
 800888e:	2d00      	cmp	r5, #0
 8008890:	d14a      	bne.n	8008928 <_malloc_r+0xd4>
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	0029      	movs	r1, r5
 8008896:	18e3      	adds	r3, r4, r3
 8008898:	0030      	movs	r0, r6
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	f000 f9b2 	bl	8008c04 <_sbrk_r>
 80088a0:	9b01      	ldr	r3, [sp, #4]
 80088a2:	4283      	cmp	r3, r0
 80088a4:	d143      	bne.n	800892e <_malloc_r+0xda>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	3703      	adds	r7, #3
 80088aa:	1aff      	subs	r7, r7, r3
 80088ac:	2303      	movs	r3, #3
 80088ae:	439f      	bics	r7, r3
 80088b0:	3708      	adds	r7, #8
 80088b2:	2f0c      	cmp	r7, #12
 80088b4:	d200      	bcs.n	80088b8 <_malloc_r+0x64>
 80088b6:	270c      	movs	r7, #12
 80088b8:	0039      	movs	r1, r7
 80088ba:	0030      	movs	r0, r6
 80088bc:	f7ff ffa8 	bl	8008810 <sbrk_aligned>
 80088c0:	1c43      	adds	r3, r0, #1
 80088c2:	d034      	beq.n	800892e <_malloc_r+0xda>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	19df      	adds	r7, r3, r7
 80088c8:	6027      	str	r7, [r4, #0]
 80088ca:	e013      	b.n	80088f4 <_malloc_r+0xa0>
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	dacb      	bge.n	8008868 <_malloc_r+0x14>
 80088d0:	230c      	movs	r3, #12
 80088d2:	2500      	movs	r5, #0
 80088d4:	6033      	str	r3, [r6, #0]
 80088d6:	0028      	movs	r0, r5
 80088d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088da:	6822      	ldr	r2, [r4, #0]
 80088dc:	1bd1      	subs	r1, r2, r7
 80088de:	d420      	bmi.n	8008922 <_malloc_r+0xce>
 80088e0:	290b      	cmp	r1, #11
 80088e2:	d917      	bls.n	8008914 <_malloc_r+0xc0>
 80088e4:	19e2      	adds	r2, r4, r7
 80088e6:	6027      	str	r7, [r4, #0]
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d111      	bne.n	8008910 <_malloc_r+0xbc>
 80088ec:	602a      	str	r2, [r5, #0]
 80088ee:	6863      	ldr	r3, [r4, #4]
 80088f0:	6011      	str	r1, [r2, #0]
 80088f2:	6053      	str	r3, [r2, #4]
 80088f4:	0030      	movs	r0, r6
 80088f6:	0025      	movs	r5, r4
 80088f8:	f000 fc6a 	bl	80091d0 <__malloc_unlock>
 80088fc:	2207      	movs	r2, #7
 80088fe:	350b      	adds	r5, #11
 8008900:	1d23      	adds	r3, r4, #4
 8008902:	4395      	bics	r5, r2
 8008904:	1aea      	subs	r2, r5, r3
 8008906:	429d      	cmp	r5, r3
 8008908:	d0e5      	beq.n	80088d6 <_malloc_r+0x82>
 800890a:	1b5b      	subs	r3, r3, r5
 800890c:	50a3      	str	r3, [r4, r2]
 800890e:	e7e2      	b.n	80088d6 <_malloc_r+0x82>
 8008910:	605a      	str	r2, [r3, #4]
 8008912:	e7ec      	b.n	80088ee <_malloc_r+0x9a>
 8008914:	6862      	ldr	r2, [r4, #4]
 8008916:	42a3      	cmp	r3, r4
 8008918:	d101      	bne.n	800891e <_malloc_r+0xca>
 800891a:	602a      	str	r2, [r5, #0]
 800891c:	e7ea      	b.n	80088f4 <_malloc_r+0xa0>
 800891e:	605a      	str	r2, [r3, #4]
 8008920:	e7e8      	b.n	80088f4 <_malloc_r+0xa0>
 8008922:	0023      	movs	r3, r4
 8008924:	6864      	ldr	r4, [r4, #4]
 8008926:	e7a7      	b.n	8008878 <_malloc_r+0x24>
 8008928:	002c      	movs	r4, r5
 800892a:	686d      	ldr	r5, [r5, #4]
 800892c:	e7af      	b.n	800888e <_malloc_r+0x3a>
 800892e:	230c      	movs	r3, #12
 8008930:	0030      	movs	r0, r6
 8008932:	6033      	str	r3, [r6, #0]
 8008934:	f000 fc4c 	bl	80091d0 <__malloc_unlock>
 8008938:	e7cd      	b.n	80088d6 <_malloc_r+0x82>
 800893a:	46c0      	nop			; (mov r8, r8)
 800893c:	20000310 	.word	0x20000310

08008940 <__sfputc_r>:
 8008940:	6893      	ldr	r3, [r2, #8]
 8008942:	b510      	push	{r4, lr}
 8008944:	3b01      	subs	r3, #1
 8008946:	6093      	str	r3, [r2, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	da04      	bge.n	8008956 <__sfputc_r+0x16>
 800894c:	6994      	ldr	r4, [r2, #24]
 800894e:	42a3      	cmp	r3, r4
 8008950:	db07      	blt.n	8008962 <__sfputc_r+0x22>
 8008952:	290a      	cmp	r1, #10
 8008954:	d005      	beq.n	8008962 <__sfputc_r+0x22>
 8008956:	6813      	ldr	r3, [r2, #0]
 8008958:	1c58      	adds	r0, r3, #1
 800895a:	6010      	str	r0, [r2, #0]
 800895c:	7019      	strb	r1, [r3, #0]
 800895e:	0008      	movs	r0, r1
 8008960:	bd10      	pop	{r4, pc}
 8008962:	f000 f9ad 	bl	8008cc0 <__swbuf_r>
 8008966:	0001      	movs	r1, r0
 8008968:	e7f9      	b.n	800895e <__sfputc_r+0x1e>

0800896a <__sfputs_r>:
 800896a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800896c:	0006      	movs	r6, r0
 800896e:	000f      	movs	r7, r1
 8008970:	0014      	movs	r4, r2
 8008972:	18d5      	adds	r5, r2, r3
 8008974:	42ac      	cmp	r4, r5
 8008976:	d101      	bne.n	800897c <__sfputs_r+0x12>
 8008978:	2000      	movs	r0, #0
 800897a:	e007      	b.n	800898c <__sfputs_r+0x22>
 800897c:	7821      	ldrb	r1, [r4, #0]
 800897e:	003a      	movs	r2, r7
 8008980:	0030      	movs	r0, r6
 8008982:	f7ff ffdd 	bl	8008940 <__sfputc_r>
 8008986:	3401      	adds	r4, #1
 8008988:	1c43      	adds	r3, r0, #1
 800898a:	d1f3      	bne.n	8008974 <__sfputs_r+0xa>
 800898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008990 <_vfiprintf_r>:
 8008990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008992:	b0a1      	sub	sp, #132	; 0x84
 8008994:	0006      	movs	r6, r0
 8008996:	000c      	movs	r4, r1
 8008998:	001f      	movs	r7, r3
 800899a:	9203      	str	r2, [sp, #12]
 800899c:	2800      	cmp	r0, #0
 800899e:	d004      	beq.n	80089aa <_vfiprintf_r+0x1a>
 80089a0:	6983      	ldr	r3, [r0, #24]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <_vfiprintf_r+0x1a>
 80089a6:	f7ff fa5b 	bl	8007e60 <__sinit>
 80089aa:	4b8e      	ldr	r3, [pc, #568]	; (8008be4 <_vfiprintf_r+0x254>)
 80089ac:	429c      	cmp	r4, r3
 80089ae:	d11c      	bne.n	80089ea <_vfiprintf_r+0x5a>
 80089b0:	6874      	ldr	r4, [r6, #4]
 80089b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089b4:	07db      	lsls	r3, r3, #31
 80089b6:	d405      	bmi.n	80089c4 <_vfiprintf_r+0x34>
 80089b8:	89a3      	ldrh	r3, [r4, #12]
 80089ba:	059b      	lsls	r3, r3, #22
 80089bc:	d402      	bmi.n	80089c4 <_vfiprintf_r+0x34>
 80089be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80089c0:	f7ff faf3 	bl	8007faa <__retarget_lock_acquire_recursive>
 80089c4:	89a3      	ldrh	r3, [r4, #12]
 80089c6:	071b      	lsls	r3, r3, #28
 80089c8:	d502      	bpl.n	80089d0 <_vfiprintf_r+0x40>
 80089ca:	6923      	ldr	r3, [r4, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d11d      	bne.n	8008a0c <_vfiprintf_r+0x7c>
 80089d0:	0021      	movs	r1, r4
 80089d2:	0030      	movs	r0, r6
 80089d4:	f000 f9de 	bl	8008d94 <__swsetup_r>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d017      	beq.n	8008a0c <_vfiprintf_r+0x7c>
 80089dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d50d      	bpl.n	80089fe <_vfiprintf_r+0x6e>
 80089e2:	2001      	movs	r0, #1
 80089e4:	4240      	negs	r0, r0
 80089e6:	b021      	add	sp, #132	; 0x84
 80089e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ea:	4b7f      	ldr	r3, [pc, #508]	; (8008be8 <_vfiprintf_r+0x258>)
 80089ec:	429c      	cmp	r4, r3
 80089ee:	d101      	bne.n	80089f4 <_vfiprintf_r+0x64>
 80089f0:	68b4      	ldr	r4, [r6, #8]
 80089f2:	e7de      	b.n	80089b2 <_vfiprintf_r+0x22>
 80089f4:	4b7d      	ldr	r3, [pc, #500]	; (8008bec <_vfiprintf_r+0x25c>)
 80089f6:	429c      	cmp	r4, r3
 80089f8:	d1db      	bne.n	80089b2 <_vfiprintf_r+0x22>
 80089fa:	68f4      	ldr	r4, [r6, #12]
 80089fc:	e7d9      	b.n	80089b2 <_vfiprintf_r+0x22>
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	059b      	lsls	r3, r3, #22
 8008a02:	d4ee      	bmi.n	80089e2 <_vfiprintf_r+0x52>
 8008a04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a06:	f7ff fad1 	bl	8007fac <__retarget_lock_release_recursive>
 8008a0a:	e7ea      	b.n	80089e2 <_vfiprintf_r+0x52>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	ad08      	add	r5, sp, #32
 8008a10:	616b      	str	r3, [r5, #20]
 8008a12:	3320      	adds	r3, #32
 8008a14:	766b      	strb	r3, [r5, #25]
 8008a16:	3310      	adds	r3, #16
 8008a18:	76ab      	strb	r3, [r5, #26]
 8008a1a:	9707      	str	r7, [sp, #28]
 8008a1c:	9f03      	ldr	r7, [sp, #12]
 8008a1e:	783b      	ldrb	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d001      	beq.n	8008a28 <_vfiprintf_r+0x98>
 8008a24:	2b25      	cmp	r3, #37	; 0x25
 8008a26:	d14e      	bne.n	8008ac6 <_vfiprintf_r+0x136>
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	1afb      	subs	r3, r7, r3
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	9b03      	ldr	r3, [sp, #12]
 8008a30:	429f      	cmp	r7, r3
 8008a32:	d00d      	beq.n	8008a50 <_vfiprintf_r+0xc0>
 8008a34:	9b05      	ldr	r3, [sp, #20]
 8008a36:	0021      	movs	r1, r4
 8008a38:	0030      	movs	r0, r6
 8008a3a:	9a03      	ldr	r2, [sp, #12]
 8008a3c:	f7ff ff95 	bl	800896a <__sfputs_r>
 8008a40:	1c43      	adds	r3, r0, #1
 8008a42:	d100      	bne.n	8008a46 <_vfiprintf_r+0xb6>
 8008a44:	e0b5      	b.n	8008bb2 <_vfiprintf_r+0x222>
 8008a46:	696a      	ldr	r2, [r5, #20]
 8008a48:	9b05      	ldr	r3, [sp, #20]
 8008a4a:	4694      	mov	ip, r2
 8008a4c:	4463      	add	r3, ip
 8008a4e:	616b      	str	r3, [r5, #20]
 8008a50:	783b      	ldrb	r3, [r7, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d100      	bne.n	8008a58 <_vfiprintf_r+0xc8>
 8008a56:	e0ac      	b.n	8008bb2 <_vfiprintf_r+0x222>
 8008a58:	2201      	movs	r2, #1
 8008a5a:	1c7b      	adds	r3, r7, #1
 8008a5c:	9303      	str	r3, [sp, #12]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	4252      	negs	r2, r2
 8008a62:	606a      	str	r2, [r5, #4]
 8008a64:	a904      	add	r1, sp, #16
 8008a66:	3254      	adds	r2, #84	; 0x54
 8008a68:	1852      	adds	r2, r2, r1
 8008a6a:	602b      	str	r3, [r5, #0]
 8008a6c:	60eb      	str	r3, [r5, #12]
 8008a6e:	60ab      	str	r3, [r5, #8]
 8008a70:	7013      	strb	r3, [r2, #0]
 8008a72:	65ab      	str	r3, [r5, #88]	; 0x58
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	2205      	movs	r2, #5
 8008a78:	7819      	ldrb	r1, [r3, #0]
 8008a7a:	485d      	ldr	r0, [pc, #372]	; (8008bf0 <_vfiprintf_r+0x260>)
 8008a7c:	f7ff faa2 	bl	8007fc4 <memchr>
 8008a80:	9b03      	ldr	r3, [sp, #12]
 8008a82:	1c5f      	adds	r7, r3, #1
 8008a84:	2800      	cmp	r0, #0
 8008a86:	d120      	bne.n	8008aca <_vfiprintf_r+0x13a>
 8008a88:	682a      	ldr	r2, [r5, #0]
 8008a8a:	06d3      	lsls	r3, r2, #27
 8008a8c:	d504      	bpl.n	8008a98 <_vfiprintf_r+0x108>
 8008a8e:	2353      	movs	r3, #83	; 0x53
 8008a90:	a904      	add	r1, sp, #16
 8008a92:	185b      	adds	r3, r3, r1
 8008a94:	2120      	movs	r1, #32
 8008a96:	7019      	strb	r1, [r3, #0]
 8008a98:	0713      	lsls	r3, r2, #28
 8008a9a:	d504      	bpl.n	8008aa6 <_vfiprintf_r+0x116>
 8008a9c:	2353      	movs	r3, #83	; 0x53
 8008a9e:	a904      	add	r1, sp, #16
 8008aa0:	185b      	adds	r3, r3, r1
 8008aa2:	212b      	movs	r1, #43	; 0x2b
 8008aa4:	7019      	strb	r1, [r3, #0]
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8008aac:	d016      	beq.n	8008adc <_vfiprintf_r+0x14c>
 8008aae:	2100      	movs	r1, #0
 8008ab0:	68eb      	ldr	r3, [r5, #12]
 8008ab2:	9f03      	ldr	r7, [sp, #12]
 8008ab4:	783a      	ldrb	r2, [r7, #0]
 8008ab6:	1c78      	adds	r0, r7, #1
 8008ab8:	3a30      	subs	r2, #48	; 0x30
 8008aba:	4684      	mov	ip, r0
 8008abc:	2a09      	cmp	r2, #9
 8008abe:	d94f      	bls.n	8008b60 <_vfiprintf_r+0x1d0>
 8008ac0:	2900      	cmp	r1, #0
 8008ac2:	d111      	bne.n	8008ae8 <_vfiprintf_r+0x158>
 8008ac4:	e017      	b.n	8008af6 <_vfiprintf_r+0x166>
 8008ac6:	3701      	adds	r7, #1
 8008ac8:	e7a9      	b.n	8008a1e <_vfiprintf_r+0x8e>
 8008aca:	4b49      	ldr	r3, [pc, #292]	; (8008bf0 <_vfiprintf_r+0x260>)
 8008acc:	682a      	ldr	r2, [r5, #0]
 8008ace:	1ac0      	subs	r0, r0, r3
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	4083      	lsls	r3, r0
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	602b      	str	r3, [r5, #0]
 8008ad8:	9703      	str	r7, [sp, #12]
 8008ada:	e7cb      	b.n	8008a74 <_vfiprintf_r+0xe4>
 8008adc:	9b07      	ldr	r3, [sp, #28]
 8008ade:	1d19      	adds	r1, r3, #4
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	9107      	str	r1, [sp, #28]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	db01      	blt.n	8008aec <_vfiprintf_r+0x15c>
 8008ae8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008aea:	e004      	b.n	8008af6 <_vfiprintf_r+0x166>
 8008aec:	425b      	negs	r3, r3
 8008aee:	60eb      	str	r3, [r5, #12]
 8008af0:	2302      	movs	r3, #2
 8008af2:	4313      	orrs	r3, r2
 8008af4:	602b      	str	r3, [r5, #0]
 8008af6:	783b      	ldrb	r3, [r7, #0]
 8008af8:	2b2e      	cmp	r3, #46	; 0x2e
 8008afa:	d10a      	bne.n	8008b12 <_vfiprintf_r+0x182>
 8008afc:	787b      	ldrb	r3, [r7, #1]
 8008afe:	2b2a      	cmp	r3, #42	; 0x2a
 8008b00:	d137      	bne.n	8008b72 <_vfiprintf_r+0x1e2>
 8008b02:	9b07      	ldr	r3, [sp, #28]
 8008b04:	3702      	adds	r7, #2
 8008b06:	1d1a      	adds	r2, r3, #4
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	9207      	str	r2, [sp, #28]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	db2d      	blt.n	8008b6c <_vfiprintf_r+0x1dc>
 8008b10:	9309      	str	r3, [sp, #36]	; 0x24
 8008b12:	2203      	movs	r2, #3
 8008b14:	7839      	ldrb	r1, [r7, #0]
 8008b16:	4837      	ldr	r0, [pc, #220]	; (8008bf4 <_vfiprintf_r+0x264>)
 8008b18:	f7ff fa54 	bl	8007fc4 <memchr>
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	d007      	beq.n	8008b30 <_vfiprintf_r+0x1a0>
 8008b20:	4b34      	ldr	r3, [pc, #208]	; (8008bf4 <_vfiprintf_r+0x264>)
 8008b22:	682a      	ldr	r2, [r5, #0]
 8008b24:	1ac0      	subs	r0, r0, r3
 8008b26:	2340      	movs	r3, #64	; 0x40
 8008b28:	4083      	lsls	r3, r0
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	3701      	adds	r7, #1
 8008b2e:	602b      	str	r3, [r5, #0]
 8008b30:	7839      	ldrb	r1, [r7, #0]
 8008b32:	1c7b      	adds	r3, r7, #1
 8008b34:	2206      	movs	r2, #6
 8008b36:	4830      	ldr	r0, [pc, #192]	; (8008bf8 <_vfiprintf_r+0x268>)
 8008b38:	9303      	str	r3, [sp, #12]
 8008b3a:	7629      	strb	r1, [r5, #24]
 8008b3c:	f7ff fa42 	bl	8007fc4 <memchr>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d045      	beq.n	8008bd0 <_vfiprintf_r+0x240>
 8008b44:	4b2d      	ldr	r3, [pc, #180]	; (8008bfc <_vfiprintf_r+0x26c>)
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d127      	bne.n	8008b9a <_vfiprintf_r+0x20a>
 8008b4a:	2207      	movs	r2, #7
 8008b4c:	9b07      	ldr	r3, [sp, #28]
 8008b4e:	3307      	adds	r3, #7
 8008b50:	4393      	bics	r3, r2
 8008b52:	3308      	adds	r3, #8
 8008b54:	9307      	str	r3, [sp, #28]
 8008b56:	696b      	ldr	r3, [r5, #20]
 8008b58:	9a04      	ldr	r2, [sp, #16]
 8008b5a:	189b      	adds	r3, r3, r2
 8008b5c:	616b      	str	r3, [r5, #20]
 8008b5e:	e75d      	b.n	8008a1c <_vfiprintf_r+0x8c>
 8008b60:	210a      	movs	r1, #10
 8008b62:	434b      	muls	r3, r1
 8008b64:	4667      	mov	r7, ip
 8008b66:	189b      	adds	r3, r3, r2
 8008b68:	3909      	subs	r1, #9
 8008b6a:	e7a3      	b.n	8008ab4 <_vfiprintf_r+0x124>
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	425b      	negs	r3, r3
 8008b70:	e7ce      	b.n	8008b10 <_vfiprintf_r+0x180>
 8008b72:	2300      	movs	r3, #0
 8008b74:	001a      	movs	r2, r3
 8008b76:	3701      	adds	r7, #1
 8008b78:	606b      	str	r3, [r5, #4]
 8008b7a:	7839      	ldrb	r1, [r7, #0]
 8008b7c:	1c78      	adds	r0, r7, #1
 8008b7e:	3930      	subs	r1, #48	; 0x30
 8008b80:	4684      	mov	ip, r0
 8008b82:	2909      	cmp	r1, #9
 8008b84:	d903      	bls.n	8008b8e <_vfiprintf_r+0x1fe>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0c3      	beq.n	8008b12 <_vfiprintf_r+0x182>
 8008b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8008b8c:	e7c1      	b.n	8008b12 <_vfiprintf_r+0x182>
 8008b8e:	230a      	movs	r3, #10
 8008b90:	435a      	muls	r2, r3
 8008b92:	4667      	mov	r7, ip
 8008b94:	1852      	adds	r2, r2, r1
 8008b96:	3b09      	subs	r3, #9
 8008b98:	e7ef      	b.n	8008b7a <_vfiprintf_r+0x1ea>
 8008b9a:	ab07      	add	r3, sp, #28
 8008b9c:	9300      	str	r3, [sp, #0]
 8008b9e:	0022      	movs	r2, r4
 8008ba0:	0029      	movs	r1, r5
 8008ba2:	0030      	movs	r0, r6
 8008ba4:	4b16      	ldr	r3, [pc, #88]	; (8008c00 <_vfiprintf_r+0x270>)
 8008ba6:	f7fd fe75 	bl	8006894 <_printf_float>
 8008baa:	9004      	str	r0, [sp, #16]
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	d1d1      	bne.n	8008b56 <_vfiprintf_r+0x1c6>
 8008bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bb4:	07db      	lsls	r3, r3, #31
 8008bb6:	d405      	bmi.n	8008bc4 <_vfiprintf_r+0x234>
 8008bb8:	89a3      	ldrh	r3, [r4, #12]
 8008bba:	059b      	lsls	r3, r3, #22
 8008bbc:	d402      	bmi.n	8008bc4 <_vfiprintf_r+0x234>
 8008bbe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bc0:	f7ff f9f4 	bl	8007fac <__retarget_lock_release_recursive>
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	065b      	lsls	r3, r3, #25
 8008bc8:	d500      	bpl.n	8008bcc <_vfiprintf_r+0x23c>
 8008bca:	e70a      	b.n	80089e2 <_vfiprintf_r+0x52>
 8008bcc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008bce:	e70a      	b.n	80089e6 <_vfiprintf_r+0x56>
 8008bd0:	ab07      	add	r3, sp, #28
 8008bd2:	9300      	str	r3, [sp, #0]
 8008bd4:	0022      	movs	r2, r4
 8008bd6:	0029      	movs	r1, r5
 8008bd8:	0030      	movs	r0, r6
 8008bda:	4b09      	ldr	r3, [pc, #36]	; (8008c00 <_vfiprintf_r+0x270>)
 8008bdc:	f7fe f90c 	bl	8006df8 <_printf_i>
 8008be0:	e7e3      	b.n	8008baa <_vfiprintf_r+0x21a>
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	08009cb0 	.word	0x08009cb0
 8008be8:	08009cd0 	.word	0x08009cd0
 8008bec:	08009c90 	.word	0x08009c90
 8008bf0:	08009e4c 	.word	0x08009e4c
 8008bf4:	08009e52 	.word	0x08009e52
 8008bf8:	08009e56 	.word	0x08009e56
 8008bfc:	08006895 	.word	0x08006895
 8008c00:	0800896b 	.word	0x0800896b

08008c04 <_sbrk_r>:
 8008c04:	2300      	movs	r3, #0
 8008c06:	b570      	push	{r4, r5, r6, lr}
 8008c08:	4d06      	ldr	r5, [pc, #24]	; (8008c24 <_sbrk_r+0x20>)
 8008c0a:	0004      	movs	r4, r0
 8008c0c:	0008      	movs	r0, r1
 8008c0e:	602b      	str	r3, [r5, #0]
 8008c10:	f7fa fb6a 	bl	80032e8 <_sbrk>
 8008c14:	1c43      	adds	r3, r0, #1
 8008c16:	d103      	bne.n	8008c20 <_sbrk_r+0x1c>
 8008c18:	682b      	ldr	r3, [r5, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d000      	beq.n	8008c20 <_sbrk_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd70      	pop	{r4, r5, r6, pc}
 8008c22:	46c0      	nop			; (mov r8, r8)
 8008c24:	20000318 	.word	0x20000318

08008c28 <__sread>:
 8008c28:	b570      	push	{r4, r5, r6, lr}
 8008c2a:	000c      	movs	r4, r1
 8008c2c:	250e      	movs	r5, #14
 8008c2e:	5f49      	ldrsh	r1, [r1, r5]
 8008c30:	f000 fad6 	bl	80091e0 <_read_r>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	db03      	blt.n	8008c40 <__sread+0x18>
 8008c38:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008c3a:	181b      	adds	r3, r3, r0
 8008c3c:	6563      	str	r3, [r4, #84]	; 0x54
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	89a3      	ldrh	r3, [r4, #12]
 8008c42:	4a02      	ldr	r2, [pc, #8]	; (8008c4c <__sread+0x24>)
 8008c44:	4013      	ands	r3, r2
 8008c46:	81a3      	strh	r3, [r4, #12]
 8008c48:	e7f9      	b.n	8008c3e <__sread+0x16>
 8008c4a:	46c0      	nop			; (mov r8, r8)
 8008c4c:	ffffefff 	.word	0xffffefff

08008c50 <__swrite>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	001f      	movs	r7, r3
 8008c54:	898b      	ldrh	r3, [r1, #12]
 8008c56:	0005      	movs	r5, r0
 8008c58:	000c      	movs	r4, r1
 8008c5a:	0016      	movs	r6, r2
 8008c5c:	05db      	lsls	r3, r3, #23
 8008c5e:	d505      	bpl.n	8008c6c <__swrite+0x1c>
 8008c60:	230e      	movs	r3, #14
 8008c62:	5ec9      	ldrsh	r1, [r1, r3]
 8008c64:	2200      	movs	r2, #0
 8008c66:	2302      	movs	r3, #2
 8008c68:	f000 fa18 	bl	800909c <_lseek_r>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	4a05      	ldr	r2, [pc, #20]	; (8008c84 <__swrite+0x34>)
 8008c70:	0028      	movs	r0, r5
 8008c72:	4013      	ands	r3, r2
 8008c74:	81a3      	strh	r3, [r4, #12]
 8008c76:	0032      	movs	r2, r6
 8008c78:	230e      	movs	r3, #14
 8008c7a:	5ee1      	ldrsh	r1, [r4, r3]
 8008c7c:	003b      	movs	r3, r7
 8008c7e:	f000 f875 	bl	8008d6c <_write_r>
 8008c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c84:	ffffefff 	.word	0xffffefff

08008c88 <__sseek>:
 8008c88:	b570      	push	{r4, r5, r6, lr}
 8008c8a:	000c      	movs	r4, r1
 8008c8c:	250e      	movs	r5, #14
 8008c8e:	5f49      	ldrsh	r1, [r1, r5]
 8008c90:	f000 fa04 	bl	800909c <_lseek_r>
 8008c94:	89a3      	ldrh	r3, [r4, #12]
 8008c96:	1c42      	adds	r2, r0, #1
 8008c98:	d103      	bne.n	8008ca2 <__sseek+0x1a>
 8008c9a:	4a05      	ldr	r2, [pc, #20]	; (8008cb0 <__sseek+0x28>)
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	bd70      	pop	{r4, r5, r6, pc}
 8008ca2:	2280      	movs	r2, #128	; 0x80
 8008ca4:	0152      	lsls	r2, r2, #5
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	81a3      	strh	r3, [r4, #12]
 8008caa:	6560      	str	r0, [r4, #84]	; 0x54
 8008cac:	e7f8      	b.n	8008ca0 <__sseek+0x18>
 8008cae:	46c0      	nop			; (mov r8, r8)
 8008cb0:	ffffefff 	.word	0xffffefff

08008cb4 <__sclose>:
 8008cb4:	b510      	push	{r4, lr}
 8008cb6:	230e      	movs	r3, #14
 8008cb8:	5ec9      	ldrsh	r1, [r1, r3]
 8008cba:	f000 f901 	bl	8008ec0 <_close_r>
 8008cbe:	bd10      	pop	{r4, pc}

08008cc0 <__swbuf_r>:
 8008cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc2:	0005      	movs	r5, r0
 8008cc4:	000e      	movs	r6, r1
 8008cc6:	0014      	movs	r4, r2
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	d004      	beq.n	8008cd6 <__swbuf_r+0x16>
 8008ccc:	6983      	ldr	r3, [r0, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <__swbuf_r+0x16>
 8008cd2:	f7ff f8c5 	bl	8007e60 <__sinit>
 8008cd6:	4b22      	ldr	r3, [pc, #136]	; (8008d60 <__swbuf_r+0xa0>)
 8008cd8:	429c      	cmp	r4, r3
 8008cda:	d12e      	bne.n	8008d3a <__swbuf_r+0x7a>
 8008cdc:	686c      	ldr	r4, [r5, #4]
 8008cde:	69a3      	ldr	r3, [r4, #24]
 8008ce0:	60a3      	str	r3, [r4, #8]
 8008ce2:	89a3      	ldrh	r3, [r4, #12]
 8008ce4:	071b      	lsls	r3, r3, #28
 8008ce6:	d532      	bpl.n	8008d4e <__swbuf_r+0x8e>
 8008ce8:	6923      	ldr	r3, [r4, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d02f      	beq.n	8008d4e <__swbuf_r+0x8e>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	6922      	ldr	r2, [r4, #16]
 8008cf2:	b2f7      	uxtb	r7, r6
 8008cf4:	1a98      	subs	r0, r3, r2
 8008cf6:	6963      	ldr	r3, [r4, #20]
 8008cf8:	b2f6      	uxtb	r6, r6
 8008cfa:	4283      	cmp	r3, r0
 8008cfc:	dc05      	bgt.n	8008d0a <__swbuf_r+0x4a>
 8008cfe:	0021      	movs	r1, r4
 8008d00:	0028      	movs	r0, r5
 8008d02:	f000 f97b 	bl	8008ffc <_fflush_r>
 8008d06:	2800      	cmp	r0, #0
 8008d08:	d127      	bne.n	8008d5a <__swbuf_r+0x9a>
 8008d0a:	68a3      	ldr	r3, [r4, #8]
 8008d0c:	3001      	adds	r0, #1
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	60a3      	str	r3, [r4, #8]
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	1c5a      	adds	r2, r3, #1
 8008d16:	6022      	str	r2, [r4, #0]
 8008d18:	701f      	strb	r7, [r3, #0]
 8008d1a:	6963      	ldr	r3, [r4, #20]
 8008d1c:	4283      	cmp	r3, r0
 8008d1e:	d004      	beq.n	8008d2a <__swbuf_r+0x6a>
 8008d20:	89a3      	ldrh	r3, [r4, #12]
 8008d22:	07db      	lsls	r3, r3, #31
 8008d24:	d507      	bpl.n	8008d36 <__swbuf_r+0x76>
 8008d26:	2e0a      	cmp	r6, #10
 8008d28:	d105      	bne.n	8008d36 <__swbuf_r+0x76>
 8008d2a:	0021      	movs	r1, r4
 8008d2c:	0028      	movs	r0, r5
 8008d2e:	f000 f965 	bl	8008ffc <_fflush_r>
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d111      	bne.n	8008d5a <__swbuf_r+0x9a>
 8008d36:	0030      	movs	r0, r6
 8008d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d3a:	4b0a      	ldr	r3, [pc, #40]	; (8008d64 <__swbuf_r+0xa4>)
 8008d3c:	429c      	cmp	r4, r3
 8008d3e:	d101      	bne.n	8008d44 <__swbuf_r+0x84>
 8008d40:	68ac      	ldr	r4, [r5, #8]
 8008d42:	e7cc      	b.n	8008cde <__swbuf_r+0x1e>
 8008d44:	4b08      	ldr	r3, [pc, #32]	; (8008d68 <__swbuf_r+0xa8>)
 8008d46:	429c      	cmp	r4, r3
 8008d48:	d1c9      	bne.n	8008cde <__swbuf_r+0x1e>
 8008d4a:	68ec      	ldr	r4, [r5, #12]
 8008d4c:	e7c7      	b.n	8008cde <__swbuf_r+0x1e>
 8008d4e:	0021      	movs	r1, r4
 8008d50:	0028      	movs	r0, r5
 8008d52:	f000 f81f 	bl	8008d94 <__swsetup_r>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d0c9      	beq.n	8008cee <__swbuf_r+0x2e>
 8008d5a:	2601      	movs	r6, #1
 8008d5c:	4276      	negs	r6, r6
 8008d5e:	e7ea      	b.n	8008d36 <__swbuf_r+0x76>
 8008d60:	08009cb0 	.word	0x08009cb0
 8008d64:	08009cd0 	.word	0x08009cd0
 8008d68:	08009c90 	.word	0x08009c90

08008d6c <_write_r>:
 8008d6c:	b570      	push	{r4, r5, r6, lr}
 8008d6e:	0004      	movs	r4, r0
 8008d70:	0008      	movs	r0, r1
 8008d72:	0011      	movs	r1, r2
 8008d74:	001a      	movs	r2, r3
 8008d76:	2300      	movs	r3, #0
 8008d78:	4d05      	ldr	r5, [pc, #20]	; (8008d90 <_write_r+0x24>)
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7fa fa6c 	bl	8003258 <_write>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d103      	bne.n	8008d8c <_write_r+0x20>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d000      	beq.n	8008d8c <_write_r+0x20>
 8008d8a:	6023      	str	r3, [r4, #0]
 8008d8c:	bd70      	pop	{r4, r5, r6, pc}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	20000318 	.word	0x20000318

08008d94 <__swsetup_r>:
 8008d94:	4b37      	ldr	r3, [pc, #220]	; (8008e74 <__swsetup_r+0xe0>)
 8008d96:	b570      	push	{r4, r5, r6, lr}
 8008d98:	681d      	ldr	r5, [r3, #0]
 8008d9a:	0006      	movs	r6, r0
 8008d9c:	000c      	movs	r4, r1
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	d005      	beq.n	8008dae <__swsetup_r+0x1a>
 8008da2:	69ab      	ldr	r3, [r5, #24]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d102      	bne.n	8008dae <__swsetup_r+0x1a>
 8008da8:	0028      	movs	r0, r5
 8008daa:	f7ff f859 	bl	8007e60 <__sinit>
 8008dae:	4b32      	ldr	r3, [pc, #200]	; (8008e78 <__swsetup_r+0xe4>)
 8008db0:	429c      	cmp	r4, r3
 8008db2:	d10f      	bne.n	8008dd4 <__swsetup_r+0x40>
 8008db4:	686c      	ldr	r4, [r5, #4]
 8008db6:	230c      	movs	r3, #12
 8008db8:	5ee2      	ldrsh	r2, [r4, r3]
 8008dba:	b293      	uxth	r3, r2
 8008dbc:	0711      	lsls	r1, r2, #28
 8008dbe:	d42d      	bmi.n	8008e1c <__swsetup_r+0x88>
 8008dc0:	06d9      	lsls	r1, r3, #27
 8008dc2:	d411      	bmi.n	8008de8 <__swsetup_r+0x54>
 8008dc4:	2309      	movs	r3, #9
 8008dc6:	2001      	movs	r0, #1
 8008dc8:	6033      	str	r3, [r6, #0]
 8008dca:	3337      	adds	r3, #55	; 0x37
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	4240      	negs	r0, r0
 8008dd2:	bd70      	pop	{r4, r5, r6, pc}
 8008dd4:	4b29      	ldr	r3, [pc, #164]	; (8008e7c <__swsetup_r+0xe8>)
 8008dd6:	429c      	cmp	r4, r3
 8008dd8:	d101      	bne.n	8008dde <__swsetup_r+0x4a>
 8008dda:	68ac      	ldr	r4, [r5, #8]
 8008ddc:	e7eb      	b.n	8008db6 <__swsetup_r+0x22>
 8008dde:	4b28      	ldr	r3, [pc, #160]	; (8008e80 <__swsetup_r+0xec>)
 8008de0:	429c      	cmp	r4, r3
 8008de2:	d1e8      	bne.n	8008db6 <__swsetup_r+0x22>
 8008de4:	68ec      	ldr	r4, [r5, #12]
 8008de6:	e7e6      	b.n	8008db6 <__swsetup_r+0x22>
 8008de8:	075b      	lsls	r3, r3, #29
 8008dea:	d513      	bpl.n	8008e14 <__swsetup_r+0x80>
 8008dec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dee:	2900      	cmp	r1, #0
 8008df0:	d008      	beq.n	8008e04 <__swsetup_r+0x70>
 8008df2:	0023      	movs	r3, r4
 8008df4:	3344      	adds	r3, #68	; 0x44
 8008df6:	4299      	cmp	r1, r3
 8008df8:	d002      	beq.n	8008e00 <__swsetup_r+0x6c>
 8008dfa:	0030      	movs	r0, r6
 8008dfc:	f7ff fcbe 	bl	800877c <_free_r>
 8008e00:	2300      	movs	r3, #0
 8008e02:	6363      	str	r3, [r4, #52]	; 0x34
 8008e04:	2224      	movs	r2, #36	; 0x24
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	4393      	bics	r3, r2
 8008e0a:	81a3      	strh	r3, [r4, #12]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6063      	str	r3, [r4, #4]
 8008e10:	6923      	ldr	r3, [r4, #16]
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	2308      	movs	r3, #8
 8008e16:	89a2      	ldrh	r2, [r4, #12]
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	6923      	ldr	r3, [r4, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d10b      	bne.n	8008e3a <__swsetup_r+0xa6>
 8008e22:	21a0      	movs	r1, #160	; 0xa0
 8008e24:	2280      	movs	r2, #128	; 0x80
 8008e26:	89a3      	ldrh	r3, [r4, #12]
 8008e28:	0089      	lsls	r1, r1, #2
 8008e2a:	0092      	lsls	r2, r2, #2
 8008e2c:	400b      	ands	r3, r1
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d003      	beq.n	8008e3a <__swsetup_r+0xa6>
 8008e32:	0021      	movs	r1, r4
 8008e34:	0030      	movs	r0, r6
 8008e36:	f000 f96d 	bl	8009114 <__smakebuf_r>
 8008e3a:	220c      	movs	r2, #12
 8008e3c:	5ea3      	ldrsh	r3, [r4, r2]
 8008e3e:	2001      	movs	r0, #1
 8008e40:	001a      	movs	r2, r3
 8008e42:	b299      	uxth	r1, r3
 8008e44:	4002      	ands	r2, r0
 8008e46:	4203      	tst	r3, r0
 8008e48:	d00f      	beq.n	8008e6a <__swsetup_r+0xd6>
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	60a2      	str	r2, [r4, #8]
 8008e4e:	6962      	ldr	r2, [r4, #20]
 8008e50:	4252      	negs	r2, r2
 8008e52:	61a2      	str	r2, [r4, #24]
 8008e54:	2000      	movs	r0, #0
 8008e56:	6922      	ldr	r2, [r4, #16]
 8008e58:	4282      	cmp	r2, r0
 8008e5a:	d1ba      	bne.n	8008dd2 <__swsetup_r+0x3e>
 8008e5c:	060a      	lsls	r2, r1, #24
 8008e5e:	d5b8      	bpl.n	8008dd2 <__swsetup_r+0x3e>
 8008e60:	2240      	movs	r2, #64	; 0x40
 8008e62:	4313      	orrs	r3, r2
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	3801      	subs	r0, #1
 8008e68:	e7b3      	b.n	8008dd2 <__swsetup_r+0x3e>
 8008e6a:	0788      	lsls	r0, r1, #30
 8008e6c:	d400      	bmi.n	8008e70 <__swsetup_r+0xdc>
 8008e6e:	6962      	ldr	r2, [r4, #20]
 8008e70:	60a2      	str	r2, [r4, #8]
 8008e72:	e7ef      	b.n	8008e54 <__swsetup_r+0xc0>
 8008e74:	2000000c 	.word	0x2000000c
 8008e78:	08009cb0 	.word	0x08009cb0
 8008e7c:	08009cd0 	.word	0x08009cd0
 8008e80:	08009c90 	.word	0x08009c90

08008e84 <__assert_func>:
 8008e84:	b530      	push	{r4, r5, lr}
 8008e86:	0014      	movs	r4, r2
 8008e88:	001a      	movs	r2, r3
 8008e8a:	4b09      	ldr	r3, [pc, #36]	; (8008eb0 <__assert_func+0x2c>)
 8008e8c:	0005      	movs	r5, r0
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	b085      	sub	sp, #20
 8008e92:	68d8      	ldr	r0, [r3, #12]
 8008e94:	4b07      	ldr	r3, [pc, #28]	; (8008eb4 <__assert_func+0x30>)
 8008e96:	2c00      	cmp	r4, #0
 8008e98:	d101      	bne.n	8008e9e <__assert_func+0x1a>
 8008e9a:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <__assert_func+0x34>)
 8008e9c:	001c      	movs	r4, r3
 8008e9e:	9301      	str	r3, [sp, #4]
 8008ea0:	9100      	str	r1, [sp, #0]
 8008ea2:	002b      	movs	r3, r5
 8008ea4:	4905      	ldr	r1, [pc, #20]	; (8008ebc <__assert_func+0x38>)
 8008ea6:	9402      	str	r4, [sp, #8]
 8008ea8:	f000 f8e8 	bl	800907c <fiprintf>
 8008eac:	f000 f9b9 	bl	8009222 <abort>
 8008eb0:	2000000c 	.word	0x2000000c
 8008eb4:	08009e5d 	.word	0x08009e5d
 8008eb8:	08009e98 	.word	0x08009e98
 8008ebc:	08009e6a 	.word	0x08009e6a

08008ec0 <_close_r>:
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	b570      	push	{r4, r5, r6, lr}
 8008ec4:	4d06      	ldr	r5, [pc, #24]	; (8008ee0 <_close_r+0x20>)
 8008ec6:	0004      	movs	r4, r0
 8008ec8:	0008      	movs	r0, r1
 8008eca:	602b      	str	r3, [r5, #0]
 8008ecc:	f7fa f9e0 	bl	8003290 <_close>
 8008ed0:	1c43      	adds	r3, r0, #1
 8008ed2:	d103      	bne.n	8008edc <_close_r+0x1c>
 8008ed4:	682b      	ldr	r3, [r5, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d000      	beq.n	8008edc <_close_r+0x1c>
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	bd70      	pop	{r4, r5, r6, pc}
 8008ede:	46c0      	nop			; (mov r8, r8)
 8008ee0:	20000318 	.word	0x20000318

08008ee4 <__sflush_r>:
 8008ee4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ee6:	898b      	ldrh	r3, [r1, #12]
 8008ee8:	0005      	movs	r5, r0
 8008eea:	000c      	movs	r4, r1
 8008eec:	071a      	lsls	r2, r3, #28
 8008eee:	d45f      	bmi.n	8008fb0 <__sflush_r+0xcc>
 8008ef0:	684a      	ldr	r2, [r1, #4]
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	dc04      	bgt.n	8008f00 <__sflush_r+0x1c>
 8008ef6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008ef8:	2a00      	cmp	r2, #0
 8008efa:	dc01      	bgt.n	8008f00 <__sflush_r+0x1c>
 8008efc:	2000      	movs	r0, #0
 8008efe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008f00:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008f02:	2f00      	cmp	r7, #0
 8008f04:	d0fa      	beq.n	8008efc <__sflush_r+0x18>
 8008f06:	2200      	movs	r2, #0
 8008f08:	2180      	movs	r1, #128	; 0x80
 8008f0a:	682e      	ldr	r6, [r5, #0]
 8008f0c:	602a      	str	r2, [r5, #0]
 8008f0e:	001a      	movs	r2, r3
 8008f10:	0149      	lsls	r1, r1, #5
 8008f12:	400a      	ands	r2, r1
 8008f14:	420b      	tst	r3, r1
 8008f16:	d034      	beq.n	8008f82 <__sflush_r+0x9e>
 8008f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f1a:	89a3      	ldrh	r3, [r4, #12]
 8008f1c:	075b      	lsls	r3, r3, #29
 8008f1e:	d506      	bpl.n	8008f2e <__sflush_r+0x4a>
 8008f20:	6863      	ldr	r3, [r4, #4]
 8008f22:	1ac0      	subs	r0, r0, r3
 8008f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d001      	beq.n	8008f2e <__sflush_r+0x4a>
 8008f2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f2c:	1ac0      	subs	r0, r0, r3
 8008f2e:	0002      	movs	r2, r0
 8008f30:	6a21      	ldr	r1, [r4, #32]
 8008f32:	2300      	movs	r3, #0
 8008f34:	0028      	movs	r0, r5
 8008f36:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008f38:	47b8      	blx	r7
 8008f3a:	89a1      	ldrh	r1, [r4, #12]
 8008f3c:	1c43      	adds	r3, r0, #1
 8008f3e:	d106      	bne.n	8008f4e <__sflush_r+0x6a>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	2b1d      	cmp	r3, #29
 8008f44:	d831      	bhi.n	8008faa <__sflush_r+0xc6>
 8008f46:	4a2c      	ldr	r2, [pc, #176]	; (8008ff8 <__sflush_r+0x114>)
 8008f48:	40da      	lsrs	r2, r3
 8008f4a:	07d3      	lsls	r3, r2, #31
 8008f4c:	d52d      	bpl.n	8008faa <__sflush_r+0xc6>
 8008f4e:	2300      	movs	r3, #0
 8008f50:	6063      	str	r3, [r4, #4]
 8008f52:	6923      	ldr	r3, [r4, #16]
 8008f54:	6023      	str	r3, [r4, #0]
 8008f56:	04cb      	lsls	r3, r1, #19
 8008f58:	d505      	bpl.n	8008f66 <__sflush_r+0x82>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	d102      	bne.n	8008f64 <__sflush_r+0x80>
 8008f5e:	682b      	ldr	r3, [r5, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d100      	bne.n	8008f66 <__sflush_r+0x82>
 8008f64:	6560      	str	r0, [r4, #84]	; 0x54
 8008f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f68:	602e      	str	r6, [r5, #0]
 8008f6a:	2900      	cmp	r1, #0
 8008f6c:	d0c6      	beq.n	8008efc <__sflush_r+0x18>
 8008f6e:	0023      	movs	r3, r4
 8008f70:	3344      	adds	r3, #68	; 0x44
 8008f72:	4299      	cmp	r1, r3
 8008f74:	d002      	beq.n	8008f7c <__sflush_r+0x98>
 8008f76:	0028      	movs	r0, r5
 8008f78:	f7ff fc00 	bl	800877c <_free_r>
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	6360      	str	r0, [r4, #52]	; 0x34
 8008f80:	e7bd      	b.n	8008efe <__sflush_r+0x1a>
 8008f82:	2301      	movs	r3, #1
 8008f84:	0028      	movs	r0, r5
 8008f86:	6a21      	ldr	r1, [r4, #32]
 8008f88:	47b8      	blx	r7
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	d1c5      	bne.n	8008f1a <__sflush_r+0x36>
 8008f8e:	682b      	ldr	r3, [r5, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d0c2      	beq.n	8008f1a <__sflush_r+0x36>
 8008f94:	2b1d      	cmp	r3, #29
 8008f96:	d001      	beq.n	8008f9c <__sflush_r+0xb8>
 8008f98:	2b16      	cmp	r3, #22
 8008f9a:	d101      	bne.n	8008fa0 <__sflush_r+0xbc>
 8008f9c:	602e      	str	r6, [r5, #0]
 8008f9e:	e7ad      	b.n	8008efc <__sflush_r+0x18>
 8008fa0:	2340      	movs	r3, #64	; 0x40
 8008fa2:	89a2      	ldrh	r2, [r4, #12]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	e7a9      	b.n	8008efe <__sflush_r+0x1a>
 8008faa:	2340      	movs	r3, #64	; 0x40
 8008fac:	430b      	orrs	r3, r1
 8008fae:	e7fa      	b.n	8008fa6 <__sflush_r+0xc2>
 8008fb0:	690f      	ldr	r7, [r1, #16]
 8008fb2:	2f00      	cmp	r7, #0
 8008fb4:	d0a2      	beq.n	8008efc <__sflush_r+0x18>
 8008fb6:	680a      	ldr	r2, [r1, #0]
 8008fb8:	600f      	str	r7, [r1, #0]
 8008fba:	1bd2      	subs	r2, r2, r7
 8008fbc:	9201      	str	r2, [sp, #4]
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	079b      	lsls	r3, r3, #30
 8008fc2:	d100      	bne.n	8008fc6 <__sflush_r+0xe2>
 8008fc4:	694a      	ldr	r2, [r1, #20]
 8008fc6:	60a2      	str	r2, [r4, #8]
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	dc00      	bgt.n	8008fd0 <__sflush_r+0xec>
 8008fce:	e795      	b.n	8008efc <__sflush_r+0x18>
 8008fd0:	003a      	movs	r2, r7
 8008fd2:	0028      	movs	r0, r5
 8008fd4:	9b01      	ldr	r3, [sp, #4]
 8008fd6:	6a21      	ldr	r1, [r4, #32]
 8008fd8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fda:	47b0      	blx	r6
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	dc06      	bgt.n	8008fee <__sflush_r+0x10a>
 8008fe0:	2340      	movs	r3, #64	; 0x40
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	89a2      	ldrh	r2, [r4, #12]
 8008fe6:	4240      	negs	r0, r0
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	e787      	b.n	8008efe <__sflush_r+0x1a>
 8008fee:	9b01      	ldr	r3, [sp, #4]
 8008ff0:	183f      	adds	r7, r7, r0
 8008ff2:	1a1b      	subs	r3, r3, r0
 8008ff4:	9301      	str	r3, [sp, #4]
 8008ff6:	e7e7      	b.n	8008fc8 <__sflush_r+0xe4>
 8008ff8:	20400001 	.word	0x20400001

08008ffc <_fflush_r>:
 8008ffc:	690b      	ldr	r3, [r1, #16]
 8008ffe:	b570      	push	{r4, r5, r6, lr}
 8009000:	0005      	movs	r5, r0
 8009002:	000c      	movs	r4, r1
 8009004:	2b00      	cmp	r3, #0
 8009006:	d102      	bne.n	800900e <_fflush_r+0x12>
 8009008:	2500      	movs	r5, #0
 800900a:	0028      	movs	r0, r5
 800900c:	bd70      	pop	{r4, r5, r6, pc}
 800900e:	2800      	cmp	r0, #0
 8009010:	d004      	beq.n	800901c <_fflush_r+0x20>
 8009012:	6983      	ldr	r3, [r0, #24]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d101      	bne.n	800901c <_fflush_r+0x20>
 8009018:	f7fe ff22 	bl	8007e60 <__sinit>
 800901c:	4b14      	ldr	r3, [pc, #80]	; (8009070 <_fflush_r+0x74>)
 800901e:	429c      	cmp	r4, r3
 8009020:	d11b      	bne.n	800905a <_fflush_r+0x5e>
 8009022:	686c      	ldr	r4, [r5, #4]
 8009024:	220c      	movs	r2, #12
 8009026:	5ea3      	ldrsh	r3, [r4, r2]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0ed      	beq.n	8009008 <_fflush_r+0xc>
 800902c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800902e:	07d2      	lsls	r2, r2, #31
 8009030:	d404      	bmi.n	800903c <_fflush_r+0x40>
 8009032:	059b      	lsls	r3, r3, #22
 8009034:	d402      	bmi.n	800903c <_fflush_r+0x40>
 8009036:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009038:	f7fe ffb7 	bl	8007faa <__retarget_lock_acquire_recursive>
 800903c:	0028      	movs	r0, r5
 800903e:	0021      	movs	r1, r4
 8009040:	f7ff ff50 	bl	8008ee4 <__sflush_r>
 8009044:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009046:	0005      	movs	r5, r0
 8009048:	07db      	lsls	r3, r3, #31
 800904a:	d4de      	bmi.n	800900a <_fflush_r+0xe>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	059b      	lsls	r3, r3, #22
 8009050:	d4db      	bmi.n	800900a <_fflush_r+0xe>
 8009052:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009054:	f7fe ffaa 	bl	8007fac <__retarget_lock_release_recursive>
 8009058:	e7d7      	b.n	800900a <_fflush_r+0xe>
 800905a:	4b06      	ldr	r3, [pc, #24]	; (8009074 <_fflush_r+0x78>)
 800905c:	429c      	cmp	r4, r3
 800905e:	d101      	bne.n	8009064 <_fflush_r+0x68>
 8009060:	68ac      	ldr	r4, [r5, #8]
 8009062:	e7df      	b.n	8009024 <_fflush_r+0x28>
 8009064:	4b04      	ldr	r3, [pc, #16]	; (8009078 <_fflush_r+0x7c>)
 8009066:	429c      	cmp	r4, r3
 8009068:	d1dc      	bne.n	8009024 <_fflush_r+0x28>
 800906a:	68ec      	ldr	r4, [r5, #12]
 800906c:	e7da      	b.n	8009024 <_fflush_r+0x28>
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	08009cb0 	.word	0x08009cb0
 8009074:	08009cd0 	.word	0x08009cd0
 8009078:	08009c90 	.word	0x08009c90

0800907c <fiprintf>:
 800907c:	b40e      	push	{r1, r2, r3}
 800907e:	b503      	push	{r0, r1, lr}
 8009080:	0001      	movs	r1, r0
 8009082:	ab03      	add	r3, sp, #12
 8009084:	4804      	ldr	r0, [pc, #16]	; (8009098 <fiprintf+0x1c>)
 8009086:	cb04      	ldmia	r3!, {r2}
 8009088:	6800      	ldr	r0, [r0, #0]
 800908a:	9301      	str	r3, [sp, #4]
 800908c:	f7ff fc80 	bl	8008990 <_vfiprintf_r>
 8009090:	b002      	add	sp, #8
 8009092:	bc08      	pop	{r3}
 8009094:	b003      	add	sp, #12
 8009096:	4718      	bx	r3
 8009098:	2000000c 	.word	0x2000000c

0800909c <_lseek_r>:
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	0004      	movs	r4, r0
 80090a0:	0008      	movs	r0, r1
 80090a2:	0011      	movs	r1, r2
 80090a4:	001a      	movs	r2, r3
 80090a6:	2300      	movs	r3, #0
 80090a8:	4d05      	ldr	r5, [pc, #20]	; (80090c0 <_lseek_r+0x24>)
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7fa f911 	bl	80032d2 <_lseek>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d103      	bne.n	80090bc <_lseek_r+0x20>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d000      	beq.n	80090bc <_lseek_r+0x20>
 80090ba:	6023      	str	r3, [r4, #0]
 80090bc:	bd70      	pop	{r4, r5, r6, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	20000318 	.word	0x20000318

080090c4 <__swhatbuf_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	000e      	movs	r6, r1
 80090c8:	001d      	movs	r5, r3
 80090ca:	230e      	movs	r3, #14
 80090cc:	5ec9      	ldrsh	r1, [r1, r3]
 80090ce:	0014      	movs	r4, r2
 80090d0:	b096      	sub	sp, #88	; 0x58
 80090d2:	2900      	cmp	r1, #0
 80090d4:	da08      	bge.n	80090e8 <__swhatbuf_r+0x24>
 80090d6:	220c      	movs	r2, #12
 80090d8:	5eb3      	ldrsh	r3, [r6, r2]
 80090da:	2200      	movs	r2, #0
 80090dc:	602a      	str	r2, [r5, #0]
 80090de:	061b      	lsls	r3, r3, #24
 80090e0:	d411      	bmi.n	8009106 <__swhatbuf_r+0x42>
 80090e2:	2380      	movs	r3, #128	; 0x80
 80090e4:	00db      	lsls	r3, r3, #3
 80090e6:	e00f      	b.n	8009108 <__swhatbuf_r+0x44>
 80090e8:	466a      	mov	r2, sp
 80090ea:	f000 f8a1 	bl	8009230 <_fstat_r>
 80090ee:	2800      	cmp	r0, #0
 80090f0:	dbf1      	blt.n	80090d6 <__swhatbuf_r+0x12>
 80090f2:	23f0      	movs	r3, #240	; 0xf0
 80090f4:	9901      	ldr	r1, [sp, #4]
 80090f6:	021b      	lsls	r3, r3, #8
 80090f8:	4019      	ands	r1, r3
 80090fa:	4b05      	ldr	r3, [pc, #20]	; (8009110 <__swhatbuf_r+0x4c>)
 80090fc:	18c9      	adds	r1, r1, r3
 80090fe:	424b      	negs	r3, r1
 8009100:	4159      	adcs	r1, r3
 8009102:	6029      	str	r1, [r5, #0]
 8009104:	e7ed      	b.n	80090e2 <__swhatbuf_r+0x1e>
 8009106:	2340      	movs	r3, #64	; 0x40
 8009108:	2000      	movs	r0, #0
 800910a:	6023      	str	r3, [r4, #0]
 800910c:	b016      	add	sp, #88	; 0x58
 800910e:	bd70      	pop	{r4, r5, r6, pc}
 8009110:	ffffe000 	.word	0xffffe000

08009114 <__smakebuf_r>:
 8009114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009116:	2602      	movs	r6, #2
 8009118:	898b      	ldrh	r3, [r1, #12]
 800911a:	0005      	movs	r5, r0
 800911c:	000c      	movs	r4, r1
 800911e:	4233      	tst	r3, r6
 8009120:	d006      	beq.n	8009130 <__smakebuf_r+0x1c>
 8009122:	0023      	movs	r3, r4
 8009124:	3347      	adds	r3, #71	; 0x47
 8009126:	6023      	str	r3, [r4, #0]
 8009128:	6123      	str	r3, [r4, #16]
 800912a:	2301      	movs	r3, #1
 800912c:	6163      	str	r3, [r4, #20]
 800912e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009130:	466a      	mov	r2, sp
 8009132:	ab01      	add	r3, sp, #4
 8009134:	f7ff ffc6 	bl	80090c4 <__swhatbuf_r>
 8009138:	9900      	ldr	r1, [sp, #0]
 800913a:	0007      	movs	r7, r0
 800913c:	0028      	movs	r0, r5
 800913e:	f7ff fb89 	bl	8008854 <_malloc_r>
 8009142:	2800      	cmp	r0, #0
 8009144:	d108      	bne.n	8009158 <__smakebuf_r+0x44>
 8009146:	220c      	movs	r2, #12
 8009148:	5ea3      	ldrsh	r3, [r4, r2]
 800914a:	059a      	lsls	r2, r3, #22
 800914c:	d4ef      	bmi.n	800912e <__smakebuf_r+0x1a>
 800914e:	2203      	movs	r2, #3
 8009150:	4393      	bics	r3, r2
 8009152:	431e      	orrs	r6, r3
 8009154:	81a6      	strh	r6, [r4, #12]
 8009156:	e7e4      	b.n	8009122 <__smakebuf_r+0xe>
 8009158:	4b0f      	ldr	r3, [pc, #60]	; (8009198 <__smakebuf_r+0x84>)
 800915a:	62ab      	str	r3, [r5, #40]	; 0x28
 800915c:	2380      	movs	r3, #128	; 0x80
 800915e:	89a2      	ldrh	r2, [r4, #12]
 8009160:	6020      	str	r0, [r4, #0]
 8009162:	4313      	orrs	r3, r2
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	9b00      	ldr	r3, [sp, #0]
 8009168:	6120      	str	r0, [r4, #16]
 800916a:	6163      	str	r3, [r4, #20]
 800916c:	9b01      	ldr	r3, [sp, #4]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d00d      	beq.n	800918e <__smakebuf_r+0x7a>
 8009172:	0028      	movs	r0, r5
 8009174:	230e      	movs	r3, #14
 8009176:	5ee1      	ldrsh	r1, [r4, r3]
 8009178:	f000 f86c 	bl	8009254 <_isatty_r>
 800917c:	2800      	cmp	r0, #0
 800917e:	d006      	beq.n	800918e <__smakebuf_r+0x7a>
 8009180:	2203      	movs	r2, #3
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	4393      	bics	r3, r2
 8009186:	001a      	movs	r2, r3
 8009188:	2301      	movs	r3, #1
 800918a:	4313      	orrs	r3, r2
 800918c:	81a3      	strh	r3, [r4, #12]
 800918e:	89a0      	ldrh	r0, [r4, #12]
 8009190:	4307      	orrs	r7, r0
 8009192:	81a7      	strh	r7, [r4, #12]
 8009194:	e7cb      	b.n	800912e <__smakebuf_r+0x1a>
 8009196:	46c0      	nop			; (mov r8, r8)
 8009198:	08007de5 	.word	0x08007de5

0800919c <__ascii_mbtowc>:
 800919c:	b082      	sub	sp, #8
 800919e:	2900      	cmp	r1, #0
 80091a0:	d100      	bne.n	80091a4 <__ascii_mbtowc+0x8>
 80091a2:	a901      	add	r1, sp, #4
 80091a4:	1e10      	subs	r0, r2, #0
 80091a6:	d006      	beq.n	80091b6 <__ascii_mbtowc+0x1a>
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d006      	beq.n	80091ba <__ascii_mbtowc+0x1e>
 80091ac:	7813      	ldrb	r3, [r2, #0]
 80091ae:	600b      	str	r3, [r1, #0]
 80091b0:	7810      	ldrb	r0, [r2, #0]
 80091b2:	1e43      	subs	r3, r0, #1
 80091b4:	4198      	sbcs	r0, r3
 80091b6:	b002      	add	sp, #8
 80091b8:	4770      	bx	lr
 80091ba:	2002      	movs	r0, #2
 80091bc:	4240      	negs	r0, r0
 80091be:	e7fa      	b.n	80091b6 <__ascii_mbtowc+0x1a>

080091c0 <__malloc_lock>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	4802      	ldr	r0, [pc, #8]	; (80091cc <__malloc_lock+0xc>)
 80091c4:	f7fe fef1 	bl	8007faa <__retarget_lock_acquire_recursive>
 80091c8:	bd10      	pop	{r4, pc}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	2000030c 	.word	0x2000030c

080091d0 <__malloc_unlock>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4802      	ldr	r0, [pc, #8]	; (80091dc <__malloc_unlock+0xc>)
 80091d4:	f7fe feea 	bl	8007fac <__retarget_lock_release_recursive>
 80091d8:	bd10      	pop	{r4, pc}
 80091da:	46c0      	nop			; (mov r8, r8)
 80091dc:	2000030c 	.word	0x2000030c

080091e0 <_read_r>:
 80091e0:	b570      	push	{r4, r5, r6, lr}
 80091e2:	0004      	movs	r4, r0
 80091e4:	0008      	movs	r0, r1
 80091e6:	0011      	movs	r1, r2
 80091e8:	001a      	movs	r2, r3
 80091ea:	2300      	movs	r3, #0
 80091ec:	4d05      	ldr	r5, [pc, #20]	; (8009204 <_read_r+0x24>)
 80091ee:	602b      	str	r3, [r5, #0]
 80091f0:	f7fa f815 	bl	800321e <_read>
 80091f4:	1c43      	adds	r3, r0, #1
 80091f6:	d103      	bne.n	8009200 <_read_r+0x20>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d000      	beq.n	8009200 <_read_r+0x20>
 80091fe:	6023      	str	r3, [r4, #0]
 8009200:	bd70      	pop	{r4, r5, r6, pc}
 8009202:	46c0      	nop			; (mov r8, r8)
 8009204:	20000318 	.word	0x20000318

08009208 <__ascii_wctomb>:
 8009208:	0003      	movs	r3, r0
 800920a:	1e08      	subs	r0, r1, #0
 800920c:	d005      	beq.n	800921a <__ascii_wctomb+0x12>
 800920e:	2aff      	cmp	r2, #255	; 0xff
 8009210:	d904      	bls.n	800921c <__ascii_wctomb+0x14>
 8009212:	228a      	movs	r2, #138	; 0x8a
 8009214:	2001      	movs	r0, #1
 8009216:	601a      	str	r2, [r3, #0]
 8009218:	4240      	negs	r0, r0
 800921a:	4770      	bx	lr
 800921c:	2001      	movs	r0, #1
 800921e:	700a      	strb	r2, [r1, #0]
 8009220:	e7fb      	b.n	800921a <__ascii_wctomb+0x12>

08009222 <abort>:
 8009222:	2006      	movs	r0, #6
 8009224:	b510      	push	{r4, lr}
 8009226:	f000 f851 	bl	80092cc <raise>
 800922a:	2001      	movs	r0, #1
 800922c:	f7f9 ffeb 	bl	8003206 <_exit>

08009230 <_fstat_r>:
 8009230:	2300      	movs	r3, #0
 8009232:	b570      	push	{r4, r5, r6, lr}
 8009234:	4d06      	ldr	r5, [pc, #24]	; (8009250 <_fstat_r+0x20>)
 8009236:	0004      	movs	r4, r0
 8009238:	0008      	movs	r0, r1
 800923a:	0011      	movs	r1, r2
 800923c:	602b      	str	r3, [r5, #0]
 800923e:	f7fa f831 	bl	80032a4 <_fstat>
 8009242:	1c43      	adds	r3, r0, #1
 8009244:	d103      	bne.n	800924e <_fstat_r+0x1e>
 8009246:	682b      	ldr	r3, [r5, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d000      	beq.n	800924e <_fstat_r+0x1e>
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	bd70      	pop	{r4, r5, r6, pc}
 8009250:	20000318 	.word	0x20000318

08009254 <_isatty_r>:
 8009254:	2300      	movs	r3, #0
 8009256:	b570      	push	{r4, r5, r6, lr}
 8009258:	4d06      	ldr	r5, [pc, #24]	; (8009274 <_isatty_r+0x20>)
 800925a:	0004      	movs	r4, r0
 800925c:	0008      	movs	r0, r1
 800925e:	602b      	str	r3, [r5, #0]
 8009260:	f7fa f82e 	bl	80032c0 <_isatty>
 8009264:	1c43      	adds	r3, r0, #1
 8009266:	d103      	bne.n	8009270 <_isatty_r+0x1c>
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d000      	beq.n	8009270 <_isatty_r+0x1c>
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	bd70      	pop	{r4, r5, r6, pc}
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	20000318 	.word	0x20000318

08009278 <_raise_r>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	0004      	movs	r4, r0
 800927c:	000d      	movs	r5, r1
 800927e:	291f      	cmp	r1, #31
 8009280:	d904      	bls.n	800928c <_raise_r+0x14>
 8009282:	2316      	movs	r3, #22
 8009284:	6003      	str	r3, [r0, #0]
 8009286:	2001      	movs	r0, #1
 8009288:	4240      	negs	r0, r0
 800928a:	bd70      	pop	{r4, r5, r6, pc}
 800928c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800928e:	2b00      	cmp	r3, #0
 8009290:	d004      	beq.n	800929c <_raise_r+0x24>
 8009292:	008a      	lsls	r2, r1, #2
 8009294:	189b      	adds	r3, r3, r2
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	2a00      	cmp	r2, #0
 800929a:	d108      	bne.n	80092ae <_raise_r+0x36>
 800929c:	0020      	movs	r0, r4
 800929e:	f000 f831 	bl	8009304 <_getpid_r>
 80092a2:	002a      	movs	r2, r5
 80092a4:	0001      	movs	r1, r0
 80092a6:	0020      	movs	r0, r4
 80092a8:	f000 f81a 	bl	80092e0 <_kill_r>
 80092ac:	e7ed      	b.n	800928a <_raise_r+0x12>
 80092ae:	2000      	movs	r0, #0
 80092b0:	2a01      	cmp	r2, #1
 80092b2:	d0ea      	beq.n	800928a <_raise_r+0x12>
 80092b4:	1c51      	adds	r1, r2, #1
 80092b6:	d103      	bne.n	80092c0 <_raise_r+0x48>
 80092b8:	2316      	movs	r3, #22
 80092ba:	3001      	adds	r0, #1
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	e7e4      	b.n	800928a <_raise_r+0x12>
 80092c0:	2400      	movs	r4, #0
 80092c2:	0028      	movs	r0, r5
 80092c4:	601c      	str	r4, [r3, #0]
 80092c6:	4790      	blx	r2
 80092c8:	0020      	movs	r0, r4
 80092ca:	e7de      	b.n	800928a <_raise_r+0x12>

080092cc <raise>:
 80092cc:	b510      	push	{r4, lr}
 80092ce:	4b03      	ldr	r3, [pc, #12]	; (80092dc <raise+0x10>)
 80092d0:	0001      	movs	r1, r0
 80092d2:	6818      	ldr	r0, [r3, #0]
 80092d4:	f7ff ffd0 	bl	8009278 <_raise_r>
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	46c0      	nop			; (mov r8, r8)
 80092dc:	2000000c 	.word	0x2000000c

080092e0 <_kill_r>:
 80092e0:	2300      	movs	r3, #0
 80092e2:	b570      	push	{r4, r5, r6, lr}
 80092e4:	4d06      	ldr	r5, [pc, #24]	; (8009300 <_kill_r+0x20>)
 80092e6:	0004      	movs	r4, r0
 80092e8:	0008      	movs	r0, r1
 80092ea:	0011      	movs	r1, r2
 80092ec:	602b      	str	r3, [r5, #0]
 80092ee:	f7f9 ff7a 	bl	80031e6 <_kill>
 80092f2:	1c43      	adds	r3, r0, #1
 80092f4:	d103      	bne.n	80092fe <_kill_r+0x1e>
 80092f6:	682b      	ldr	r3, [r5, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d000      	beq.n	80092fe <_kill_r+0x1e>
 80092fc:	6023      	str	r3, [r4, #0]
 80092fe:	bd70      	pop	{r4, r5, r6, pc}
 8009300:	20000318 	.word	0x20000318

08009304 <_getpid_r>:
 8009304:	b510      	push	{r4, lr}
 8009306:	f7f9 ff68 	bl	80031da <_getpid>
 800930a:	bd10      	pop	{r4, pc}

0800930c <atan>:
 800930c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800930e:	4b98      	ldr	r3, [pc, #608]	; (8009570 <atan+0x264>)
 8009310:	b085      	sub	sp, #20
 8009312:	004e      	lsls	r6, r1, #1
 8009314:	0004      	movs	r4, r0
 8009316:	000d      	movs	r5, r1
 8009318:	9103      	str	r1, [sp, #12]
 800931a:	0876      	lsrs	r6, r6, #1
 800931c:	429e      	cmp	r6, r3
 800931e:	dd18      	ble.n	8009352 <atan+0x46>
 8009320:	4b94      	ldr	r3, [pc, #592]	; (8009574 <atan+0x268>)
 8009322:	429e      	cmp	r6, r3
 8009324:	dc02      	bgt.n	800932c <atan+0x20>
 8009326:	d10a      	bne.n	800933e <atan+0x32>
 8009328:	2800      	cmp	r0, #0
 800932a:	d008      	beq.n	800933e <atan+0x32>
 800932c:	0022      	movs	r2, r4
 800932e:	002b      	movs	r3, r5
 8009330:	0020      	movs	r0, r4
 8009332:	0029      	movs	r1, r5
 8009334:	f7f7 fdce 	bl	8000ed4 <__aeabi_dadd>
 8009338:	0004      	movs	r4, r0
 800933a:	000d      	movs	r5, r1
 800933c:	e005      	b.n	800934a <atan+0x3e>
 800933e:	9b03      	ldr	r3, [sp, #12]
 8009340:	4c8d      	ldr	r4, [pc, #564]	; (8009578 <atan+0x26c>)
 8009342:	2b00      	cmp	r3, #0
 8009344:	dd00      	ble.n	8009348 <atan+0x3c>
 8009346:	e110      	b.n	800956a <atan+0x25e>
 8009348:	4d8c      	ldr	r5, [pc, #560]	; (800957c <atan+0x270>)
 800934a:	0020      	movs	r0, r4
 800934c:	0029      	movs	r1, r5
 800934e:	b005      	add	sp, #20
 8009350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009352:	4b8b      	ldr	r3, [pc, #556]	; (8009580 <atan+0x274>)
 8009354:	429e      	cmp	r6, r3
 8009356:	dc0f      	bgt.n	8009378 <atan+0x6c>
 8009358:	4b8a      	ldr	r3, [pc, #552]	; (8009584 <atan+0x278>)
 800935a:	429e      	cmp	r6, r3
 800935c:	dc09      	bgt.n	8009372 <atan+0x66>
 800935e:	4a8a      	ldr	r2, [pc, #552]	; (8009588 <atan+0x27c>)
 8009360:	4b8a      	ldr	r3, [pc, #552]	; (800958c <atan+0x280>)
 8009362:	f7f7 fdb7 	bl	8000ed4 <__aeabi_dadd>
 8009366:	2200      	movs	r2, #0
 8009368:	4b89      	ldr	r3, [pc, #548]	; (8009590 <atan+0x284>)
 800936a:	f7f7 f889 	bl	8000480 <__aeabi_dcmpgt>
 800936e:	2800      	cmp	r0, #0
 8009370:	d1eb      	bne.n	800934a <atan+0x3e>
 8009372:	2301      	movs	r3, #1
 8009374:	425b      	negs	r3, r3
 8009376:	e025      	b.n	80093c4 <atan+0xb8>
 8009378:	f000 f948 	bl	800960c <fabs>
 800937c:	4b85      	ldr	r3, [pc, #532]	; (8009594 <atan+0x288>)
 800937e:	0004      	movs	r4, r0
 8009380:	000d      	movs	r5, r1
 8009382:	429e      	cmp	r6, r3
 8009384:	dd00      	ble.n	8009388 <atan+0x7c>
 8009386:	e0aa      	b.n	80094de <atan+0x1d2>
 8009388:	4b83      	ldr	r3, [pc, #524]	; (8009598 <atan+0x28c>)
 800938a:	429e      	cmp	r6, r3
 800938c:	dd00      	ble.n	8009390 <atan+0x84>
 800938e:	e090      	b.n	80094b2 <atan+0x1a6>
 8009390:	0002      	movs	r2, r0
 8009392:	000b      	movs	r3, r1
 8009394:	f7f7 fd9e 	bl	8000ed4 <__aeabi_dadd>
 8009398:	2200      	movs	r2, #0
 800939a:	4b7d      	ldr	r3, [pc, #500]	; (8009590 <atan+0x284>)
 800939c:	f7f8 ff44 	bl	8002228 <__aeabi_dsub>
 80093a0:	2380      	movs	r3, #128	; 0x80
 80093a2:	0006      	movs	r6, r0
 80093a4:	000f      	movs	r7, r1
 80093a6:	2200      	movs	r2, #0
 80093a8:	0020      	movs	r0, r4
 80093aa:	0029      	movs	r1, r5
 80093ac:	05db      	lsls	r3, r3, #23
 80093ae:	f7f7 fd91 	bl	8000ed4 <__aeabi_dadd>
 80093b2:	000b      	movs	r3, r1
 80093b4:	0002      	movs	r2, r0
 80093b6:	0039      	movs	r1, r7
 80093b8:	0030      	movs	r0, r6
 80093ba:	f7f8 f8c7 	bl	800154c <__aeabi_ddiv>
 80093be:	2300      	movs	r3, #0
 80093c0:	0004      	movs	r4, r0
 80093c2:	000d      	movs	r5, r1
 80093c4:	0022      	movs	r2, r4
 80093c6:	9302      	str	r3, [sp, #8]
 80093c8:	0020      	movs	r0, r4
 80093ca:	002b      	movs	r3, r5
 80093cc:	0029      	movs	r1, r5
 80093ce:	f7f8 fcbf 	bl	8001d50 <__aeabi_dmul>
 80093d2:	0002      	movs	r2, r0
 80093d4:	000b      	movs	r3, r1
 80093d6:	9000      	str	r0, [sp, #0]
 80093d8:	9101      	str	r1, [sp, #4]
 80093da:	f7f8 fcb9 	bl	8001d50 <__aeabi_dmul>
 80093de:	0006      	movs	r6, r0
 80093e0:	000f      	movs	r7, r1
 80093e2:	4a6e      	ldr	r2, [pc, #440]	; (800959c <atan+0x290>)
 80093e4:	4b6e      	ldr	r3, [pc, #440]	; (80095a0 <atan+0x294>)
 80093e6:	f7f8 fcb3 	bl	8001d50 <__aeabi_dmul>
 80093ea:	4a6e      	ldr	r2, [pc, #440]	; (80095a4 <atan+0x298>)
 80093ec:	4b6e      	ldr	r3, [pc, #440]	; (80095a8 <atan+0x29c>)
 80093ee:	f7f7 fd71 	bl	8000ed4 <__aeabi_dadd>
 80093f2:	0032      	movs	r2, r6
 80093f4:	003b      	movs	r3, r7
 80093f6:	f7f8 fcab 	bl	8001d50 <__aeabi_dmul>
 80093fa:	4a6c      	ldr	r2, [pc, #432]	; (80095ac <atan+0x2a0>)
 80093fc:	4b6c      	ldr	r3, [pc, #432]	; (80095b0 <atan+0x2a4>)
 80093fe:	f7f7 fd69 	bl	8000ed4 <__aeabi_dadd>
 8009402:	0032      	movs	r2, r6
 8009404:	003b      	movs	r3, r7
 8009406:	f7f8 fca3 	bl	8001d50 <__aeabi_dmul>
 800940a:	4a6a      	ldr	r2, [pc, #424]	; (80095b4 <atan+0x2a8>)
 800940c:	4b6a      	ldr	r3, [pc, #424]	; (80095b8 <atan+0x2ac>)
 800940e:	f7f7 fd61 	bl	8000ed4 <__aeabi_dadd>
 8009412:	0032      	movs	r2, r6
 8009414:	003b      	movs	r3, r7
 8009416:	f7f8 fc9b 	bl	8001d50 <__aeabi_dmul>
 800941a:	4a68      	ldr	r2, [pc, #416]	; (80095bc <atan+0x2b0>)
 800941c:	4b68      	ldr	r3, [pc, #416]	; (80095c0 <atan+0x2b4>)
 800941e:	f7f7 fd59 	bl	8000ed4 <__aeabi_dadd>
 8009422:	0032      	movs	r2, r6
 8009424:	003b      	movs	r3, r7
 8009426:	f7f8 fc93 	bl	8001d50 <__aeabi_dmul>
 800942a:	4a66      	ldr	r2, [pc, #408]	; (80095c4 <atan+0x2b8>)
 800942c:	4b66      	ldr	r3, [pc, #408]	; (80095c8 <atan+0x2bc>)
 800942e:	f7f7 fd51 	bl	8000ed4 <__aeabi_dadd>
 8009432:	9a00      	ldr	r2, [sp, #0]
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	f7f8 fc8b 	bl	8001d50 <__aeabi_dmul>
 800943a:	4a64      	ldr	r2, [pc, #400]	; (80095cc <atan+0x2c0>)
 800943c:	9000      	str	r0, [sp, #0]
 800943e:	9101      	str	r1, [sp, #4]
 8009440:	4b63      	ldr	r3, [pc, #396]	; (80095d0 <atan+0x2c4>)
 8009442:	0030      	movs	r0, r6
 8009444:	0039      	movs	r1, r7
 8009446:	f7f8 fc83 	bl	8001d50 <__aeabi_dmul>
 800944a:	4a62      	ldr	r2, [pc, #392]	; (80095d4 <atan+0x2c8>)
 800944c:	4b62      	ldr	r3, [pc, #392]	; (80095d8 <atan+0x2cc>)
 800944e:	f7f8 feeb 	bl	8002228 <__aeabi_dsub>
 8009452:	0032      	movs	r2, r6
 8009454:	003b      	movs	r3, r7
 8009456:	f7f8 fc7b 	bl	8001d50 <__aeabi_dmul>
 800945a:	4a60      	ldr	r2, [pc, #384]	; (80095dc <atan+0x2d0>)
 800945c:	4b60      	ldr	r3, [pc, #384]	; (80095e0 <atan+0x2d4>)
 800945e:	f7f8 fee3 	bl	8002228 <__aeabi_dsub>
 8009462:	0032      	movs	r2, r6
 8009464:	003b      	movs	r3, r7
 8009466:	f7f8 fc73 	bl	8001d50 <__aeabi_dmul>
 800946a:	4a5e      	ldr	r2, [pc, #376]	; (80095e4 <atan+0x2d8>)
 800946c:	4b5e      	ldr	r3, [pc, #376]	; (80095e8 <atan+0x2dc>)
 800946e:	f7f8 fedb 	bl	8002228 <__aeabi_dsub>
 8009472:	0032      	movs	r2, r6
 8009474:	003b      	movs	r3, r7
 8009476:	f7f8 fc6b 	bl	8001d50 <__aeabi_dmul>
 800947a:	4a5c      	ldr	r2, [pc, #368]	; (80095ec <atan+0x2e0>)
 800947c:	4b5c      	ldr	r3, [pc, #368]	; (80095f0 <atan+0x2e4>)
 800947e:	f7f8 fed3 	bl	8002228 <__aeabi_dsub>
 8009482:	0032      	movs	r2, r6
 8009484:	003b      	movs	r3, r7
 8009486:	f7f8 fc63 	bl	8001d50 <__aeabi_dmul>
 800948a:	0002      	movs	r2, r0
 800948c:	000b      	movs	r3, r1
 800948e:	9800      	ldr	r0, [sp, #0]
 8009490:	9901      	ldr	r1, [sp, #4]
 8009492:	f7f7 fd1f 	bl	8000ed4 <__aeabi_dadd>
 8009496:	002b      	movs	r3, r5
 8009498:	0022      	movs	r2, r4
 800949a:	f7f8 fc59 	bl	8001d50 <__aeabi_dmul>
 800949e:	9b02      	ldr	r3, [sp, #8]
 80094a0:	3301      	adds	r3, #1
 80094a2:	d143      	bne.n	800952c <atan+0x220>
 80094a4:	0002      	movs	r2, r0
 80094a6:	000b      	movs	r3, r1
 80094a8:	0020      	movs	r0, r4
 80094aa:	0029      	movs	r1, r5
 80094ac:	f7f8 febc 	bl	8002228 <__aeabi_dsub>
 80094b0:	e742      	b.n	8009338 <atan+0x2c>
 80094b2:	2200      	movs	r2, #0
 80094b4:	4b36      	ldr	r3, [pc, #216]	; (8009590 <atan+0x284>)
 80094b6:	f7f8 feb7 	bl	8002228 <__aeabi_dsub>
 80094ba:	2200      	movs	r2, #0
 80094bc:	0006      	movs	r6, r0
 80094be:	000f      	movs	r7, r1
 80094c0:	0020      	movs	r0, r4
 80094c2:	0029      	movs	r1, r5
 80094c4:	4b32      	ldr	r3, [pc, #200]	; (8009590 <atan+0x284>)
 80094c6:	f7f7 fd05 	bl	8000ed4 <__aeabi_dadd>
 80094ca:	000b      	movs	r3, r1
 80094cc:	0002      	movs	r2, r0
 80094ce:	0039      	movs	r1, r7
 80094d0:	0030      	movs	r0, r6
 80094d2:	f7f8 f83b 	bl	800154c <__aeabi_ddiv>
 80094d6:	2301      	movs	r3, #1
 80094d8:	0004      	movs	r4, r0
 80094da:	000d      	movs	r5, r1
 80094dc:	e772      	b.n	80093c4 <atan+0xb8>
 80094de:	4b45      	ldr	r3, [pc, #276]	; (80095f4 <atan+0x2e8>)
 80094e0:	429e      	cmp	r6, r3
 80094e2:	dc19      	bgt.n	8009518 <atan+0x20c>
 80094e4:	2200      	movs	r2, #0
 80094e6:	4b44      	ldr	r3, [pc, #272]	; (80095f8 <atan+0x2ec>)
 80094e8:	f7f8 fe9e 	bl	8002228 <__aeabi_dsub>
 80094ec:	2200      	movs	r2, #0
 80094ee:	0006      	movs	r6, r0
 80094f0:	000f      	movs	r7, r1
 80094f2:	0020      	movs	r0, r4
 80094f4:	0029      	movs	r1, r5
 80094f6:	4b40      	ldr	r3, [pc, #256]	; (80095f8 <atan+0x2ec>)
 80094f8:	f7f8 fc2a 	bl	8001d50 <__aeabi_dmul>
 80094fc:	2200      	movs	r2, #0
 80094fe:	4b24      	ldr	r3, [pc, #144]	; (8009590 <atan+0x284>)
 8009500:	f7f7 fce8 	bl	8000ed4 <__aeabi_dadd>
 8009504:	000b      	movs	r3, r1
 8009506:	0002      	movs	r2, r0
 8009508:	0039      	movs	r1, r7
 800950a:	0030      	movs	r0, r6
 800950c:	f7f8 f81e 	bl	800154c <__aeabi_ddiv>
 8009510:	2302      	movs	r3, #2
 8009512:	0004      	movs	r4, r0
 8009514:	000d      	movs	r5, r1
 8009516:	e755      	b.n	80093c4 <atan+0xb8>
 8009518:	000b      	movs	r3, r1
 800951a:	0002      	movs	r2, r0
 800951c:	4937      	ldr	r1, [pc, #220]	; (80095fc <atan+0x2f0>)
 800951e:	2000      	movs	r0, #0
 8009520:	f7f8 f814 	bl	800154c <__aeabi_ddiv>
 8009524:	2303      	movs	r3, #3
 8009526:	0004      	movs	r4, r0
 8009528:	000d      	movs	r5, r1
 800952a:	e74b      	b.n	80093c4 <atan+0xb8>
 800952c:	9b02      	ldr	r3, [sp, #8]
 800952e:	4f34      	ldr	r7, [pc, #208]	; (8009600 <atan+0x2f4>)
 8009530:	00de      	lsls	r6, r3, #3
 8009532:	4b34      	ldr	r3, [pc, #208]	; (8009604 <atan+0x2f8>)
 8009534:	19bf      	adds	r7, r7, r6
 8009536:	199e      	adds	r6, r3, r6
 8009538:	6832      	ldr	r2, [r6, #0]
 800953a:	6873      	ldr	r3, [r6, #4]
 800953c:	f7f8 fe74 	bl	8002228 <__aeabi_dsub>
 8009540:	0022      	movs	r2, r4
 8009542:	002b      	movs	r3, r5
 8009544:	f7f8 fe70 	bl	8002228 <__aeabi_dsub>
 8009548:	000b      	movs	r3, r1
 800954a:	0002      	movs	r2, r0
 800954c:	6838      	ldr	r0, [r7, #0]
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	f7f8 fe6a 	bl	8002228 <__aeabi_dsub>
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	0004      	movs	r4, r0
 8009558:	000d      	movs	r5, r1
 800955a:	2b00      	cmp	r3, #0
 800955c:	db00      	blt.n	8009560 <atan+0x254>
 800955e:	e6f4      	b.n	800934a <atan+0x3e>
 8009560:	2180      	movs	r1, #128	; 0x80
 8009562:	0609      	lsls	r1, r1, #24
 8009564:	186b      	adds	r3, r5, r1
 8009566:	001d      	movs	r5, r3
 8009568:	e6ef      	b.n	800934a <atan+0x3e>
 800956a:	4d27      	ldr	r5, [pc, #156]	; (8009608 <atan+0x2fc>)
 800956c:	e6ed      	b.n	800934a <atan+0x3e>
 800956e:	46c0      	nop			; (mov r8, r8)
 8009570:	440fffff 	.word	0x440fffff
 8009574:	7ff00000 	.word	0x7ff00000
 8009578:	54442d18 	.word	0x54442d18
 800957c:	bff921fb 	.word	0xbff921fb
 8009580:	3fdbffff 	.word	0x3fdbffff
 8009584:	3e1fffff 	.word	0x3e1fffff
 8009588:	8800759c 	.word	0x8800759c
 800958c:	7e37e43c 	.word	0x7e37e43c
 8009590:	3ff00000 	.word	0x3ff00000
 8009594:	3ff2ffff 	.word	0x3ff2ffff
 8009598:	3fe5ffff 	.word	0x3fe5ffff
 800959c:	e322da11 	.word	0xe322da11
 80095a0:	3f90ad3a 	.word	0x3f90ad3a
 80095a4:	24760deb 	.word	0x24760deb
 80095a8:	3fa97b4b 	.word	0x3fa97b4b
 80095ac:	a0d03d51 	.word	0xa0d03d51
 80095b0:	3fb10d66 	.word	0x3fb10d66
 80095b4:	c54c206e 	.word	0xc54c206e
 80095b8:	3fb745cd 	.word	0x3fb745cd
 80095bc:	920083ff 	.word	0x920083ff
 80095c0:	3fc24924 	.word	0x3fc24924
 80095c4:	5555550d 	.word	0x5555550d
 80095c8:	3fd55555 	.word	0x3fd55555
 80095cc:	2c6a6c2f 	.word	0x2c6a6c2f
 80095d0:	bfa2b444 	.word	0xbfa2b444
 80095d4:	52defd9a 	.word	0x52defd9a
 80095d8:	3fadde2d 	.word	0x3fadde2d
 80095dc:	af749a6d 	.word	0xaf749a6d
 80095e0:	3fb3b0f2 	.word	0x3fb3b0f2
 80095e4:	fe231671 	.word	0xfe231671
 80095e8:	3fbc71c6 	.word	0x3fbc71c6
 80095ec:	9998ebc4 	.word	0x9998ebc4
 80095f0:	3fc99999 	.word	0x3fc99999
 80095f4:	40037fff 	.word	0x40037fff
 80095f8:	3ff80000 	.word	0x3ff80000
 80095fc:	bff00000 	.word	0xbff00000
 8009600:	08009fa8 	.word	0x08009fa8
 8009604:	08009fc8 	.word	0x08009fc8
 8009608:	3ff921fb 	.word	0x3ff921fb

0800960c <fabs>:
 800960c:	004b      	lsls	r3, r1, #1
 800960e:	0859      	lsrs	r1, r3, #1
 8009610:	4770      	bx	lr

08009612 <atan2>:
 8009612:	b510      	push	{r4, lr}
 8009614:	f000 f828 	bl	8009668 <__ieee754_atan2>
 8009618:	bd10      	pop	{r4, pc}

0800961a <sqrt>:
 800961a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961c:	0004      	movs	r4, r0
 800961e:	000d      	movs	r5, r1
 8009620:	f000 f8ce 	bl	80097c0 <__ieee754_sqrt>
 8009624:	0022      	movs	r2, r4
 8009626:	0006      	movs	r6, r0
 8009628:	000f      	movs	r7, r1
 800962a:	002b      	movs	r3, r5
 800962c:	0020      	movs	r0, r4
 800962e:	0029      	movs	r1, r5
 8009630:	f7f9 f98c 	bl	800294c <__aeabi_dcmpun>
 8009634:	2800      	cmp	r0, #0
 8009636:	d113      	bne.n	8009660 <sqrt+0x46>
 8009638:	2200      	movs	r2, #0
 800963a:	2300      	movs	r3, #0
 800963c:	0020      	movs	r0, r4
 800963e:	0029      	movs	r1, r5
 8009640:	f7f6 ff0a 	bl	8000458 <__aeabi_dcmplt>
 8009644:	2800      	cmp	r0, #0
 8009646:	d00b      	beq.n	8009660 <sqrt+0x46>
 8009648:	f7fd f848 	bl	80066dc <__errno>
 800964c:	2321      	movs	r3, #33	; 0x21
 800964e:	2200      	movs	r2, #0
 8009650:	6003      	str	r3, [r0, #0]
 8009652:	2300      	movs	r3, #0
 8009654:	0010      	movs	r0, r2
 8009656:	0019      	movs	r1, r3
 8009658:	f7f7 ff78 	bl	800154c <__aeabi_ddiv>
 800965c:	0006      	movs	r6, r0
 800965e:	000f      	movs	r7, r1
 8009660:	0030      	movs	r0, r6
 8009662:	0039      	movs	r1, r7
 8009664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009668 <__ieee754_atan2>:
 8009668:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800966a:	0016      	movs	r6, r2
 800966c:	001d      	movs	r5, r3
 800966e:	005a      	lsls	r2, r3, #1
 8009670:	9300      	str	r3, [sp, #0]
 8009672:	4273      	negs	r3, r6
 8009674:	4333      	orrs	r3, r6
 8009676:	4f46      	ldr	r7, [pc, #280]	; (8009790 <__ieee754_atan2+0x128>)
 8009678:	0852      	lsrs	r2, r2, #1
 800967a:	0fdb      	lsrs	r3, r3, #31
 800967c:	4313      	orrs	r3, r2
 800967e:	42bb      	cmp	r3, r7
 8009680:	d809      	bhi.n	8009696 <__ieee754_atan2+0x2e>
 8009682:	4244      	negs	r4, r0
 8009684:	004b      	lsls	r3, r1, #1
 8009686:	4304      	orrs	r4, r0
 8009688:	085b      	lsrs	r3, r3, #1
 800968a:	0fe4      	lsrs	r4, r4, #31
 800968c:	9100      	str	r1, [sp, #0]
 800968e:	9001      	str	r0, [sp, #4]
 8009690:	431c      	orrs	r4, r3
 8009692:	42bc      	cmp	r4, r7
 8009694:	d905      	bls.n	80096a2 <__ieee754_atan2+0x3a>
 8009696:	0032      	movs	r2, r6
 8009698:	002b      	movs	r3, r5
 800969a:	f7f7 fc1b 	bl	8000ed4 <__aeabi_dadd>
 800969e:	b003      	add	sp, #12
 80096a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096a2:	4c3c      	ldr	r4, [pc, #240]	; (8009794 <__ieee754_atan2+0x12c>)
 80096a4:	192c      	adds	r4, r5, r4
 80096a6:	4334      	orrs	r4, r6
 80096a8:	d102      	bne.n	80096b0 <__ieee754_atan2+0x48>
 80096aa:	f7ff fe2f 	bl	800930c <atan>
 80096ae:	e7f6      	b.n	800969e <__ieee754_atan2+0x36>
 80096b0:	17ac      	asrs	r4, r5, #30
 80096b2:	46a4      	mov	ip, r4
 80096b4:	2402      	movs	r4, #2
 80096b6:	4667      	mov	r7, ip
 80096b8:	403c      	ands	r4, r7
 80096ba:	9f00      	ldr	r7, [sp, #0]
 80096bc:	0fff      	lsrs	r7, r7, #31
 80096be:	433c      	orrs	r4, r7
 80096c0:	9f01      	ldr	r7, [sp, #4]
 80096c2:	431f      	orrs	r7, r3
 80096c4:	d106      	bne.n	80096d4 <__ieee754_atan2+0x6c>
 80096c6:	2c02      	cmp	r4, #2
 80096c8:	d056      	beq.n	8009778 <__ieee754_atan2+0x110>
 80096ca:	2c03      	cmp	r4, #3
 80096cc:	d1e7      	bne.n	800969e <__ieee754_atan2+0x36>
 80096ce:	4832      	ldr	r0, [pc, #200]	; (8009798 <__ieee754_atan2+0x130>)
 80096d0:	4932      	ldr	r1, [pc, #200]	; (800979c <__ieee754_atan2+0x134>)
 80096d2:	e7e4      	b.n	800969e <__ieee754_atan2+0x36>
 80096d4:	0017      	movs	r7, r2
 80096d6:	4337      	orrs	r7, r6
 80096d8:	d105      	bne.n	80096e6 <__ieee754_atan2+0x7e>
 80096da:	9b00      	ldr	r3, [sp, #0]
 80096dc:	482e      	ldr	r0, [pc, #184]	; (8009798 <__ieee754_atan2+0x130>)
 80096de:	2b00      	cmp	r3, #0
 80096e0:	da53      	bge.n	800978a <__ieee754_atan2+0x122>
 80096e2:	492f      	ldr	r1, [pc, #188]	; (80097a0 <__ieee754_atan2+0x138>)
 80096e4:	e7db      	b.n	800969e <__ieee754_atan2+0x36>
 80096e6:	4f2a      	ldr	r7, [pc, #168]	; (8009790 <__ieee754_atan2+0x128>)
 80096e8:	42ba      	cmp	r2, r7
 80096ea:	d10f      	bne.n	800970c <__ieee754_atan2+0xa4>
 80096ec:	3c01      	subs	r4, #1
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d107      	bne.n	8009702 <__ieee754_atan2+0x9a>
 80096f2:	2c02      	cmp	r4, #2
 80096f4:	d843      	bhi.n	800977e <__ieee754_atan2+0x116>
 80096f6:	4b2b      	ldr	r3, [pc, #172]	; (80097a4 <__ieee754_atan2+0x13c>)
 80096f8:	00e4      	lsls	r4, r4, #3
 80096fa:	191c      	adds	r4, r3, r4
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	6861      	ldr	r1, [r4, #4]
 8009700:	e7cd      	b.n	800969e <__ieee754_atan2+0x36>
 8009702:	2c02      	cmp	r4, #2
 8009704:	d83e      	bhi.n	8009784 <__ieee754_atan2+0x11c>
 8009706:	4b28      	ldr	r3, [pc, #160]	; (80097a8 <__ieee754_atan2+0x140>)
 8009708:	00e4      	lsls	r4, r4, #3
 800970a:	e7f6      	b.n	80096fa <__ieee754_atan2+0x92>
 800970c:	4f20      	ldr	r7, [pc, #128]	; (8009790 <__ieee754_atan2+0x128>)
 800970e:	42bb      	cmp	r3, r7
 8009710:	d0e3      	beq.n	80096da <__ieee754_atan2+0x72>
 8009712:	1a9b      	subs	r3, r3, r2
 8009714:	151b      	asrs	r3, r3, #20
 8009716:	2b3c      	cmp	r3, #60	; 0x3c
 8009718:	dc18      	bgt.n	800974c <__ieee754_atan2+0xe4>
 800971a:	2d00      	cmp	r5, #0
 800971c:	da01      	bge.n	8009722 <__ieee754_atan2+0xba>
 800971e:	333c      	adds	r3, #60	; 0x3c
 8009720:	db17      	blt.n	8009752 <__ieee754_atan2+0xea>
 8009722:	0032      	movs	r2, r6
 8009724:	002b      	movs	r3, r5
 8009726:	f7f7 ff11 	bl	800154c <__aeabi_ddiv>
 800972a:	f7ff ff6f 	bl	800960c <fabs>
 800972e:	f7ff fded 	bl	800930c <atan>
 8009732:	2c01      	cmp	r4, #1
 8009734:	d010      	beq.n	8009758 <__ieee754_atan2+0xf0>
 8009736:	2c02      	cmp	r4, #2
 8009738:	d013      	beq.n	8009762 <__ieee754_atan2+0xfa>
 800973a:	2c00      	cmp	r4, #0
 800973c:	d0af      	beq.n	800969e <__ieee754_atan2+0x36>
 800973e:	4a1b      	ldr	r2, [pc, #108]	; (80097ac <__ieee754_atan2+0x144>)
 8009740:	4b1b      	ldr	r3, [pc, #108]	; (80097b0 <__ieee754_atan2+0x148>)
 8009742:	f7f8 fd71 	bl	8002228 <__aeabi_dsub>
 8009746:	4a14      	ldr	r2, [pc, #80]	; (8009798 <__ieee754_atan2+0x130>)
 8009748:	4b1a      	ldr	r3, [pc, #104]	; (80097b4 <__ieee754_atan2+0x14c>)
 800974a:	e012      	b.n	8009772 <__ieee754_atan2+0x10a>
 800974c:	4812      	ldr	r0, [pc, #72]	; (8009798 <__ieee754_atan2+0x130>)
 800974e:	491a      	ldr	r1, [pc, #104]	; (80097b8 <__ieee754_atan2+0x150>)
 8009750:	e7ef      	b.n	8009732 <__ieee754_atan2+0xca>
 8009752:	2000      	movs	r0, #0
 8009754:	2100      	movs	r1, #0
 8009756:	e7ec      	b.n	8009732 <__ieee754_atan2+0xca>
 8009758:	2480      	movs	r4, #128	; 0x80
 800975a:	0624      	lsls	r4, r4, #24
 800975c:	190b      	adds	r3, r1, r4
 800975e:	0019      	movs	r1, r3
 8009760:	e79d      	b.n	800969e <__ieee754_atan2+0x36>
 8009762:	4a12      	ldr	r2, [pc, #72]	; (80097ac <__ieee754_atan2+0x144>)
 8009764:	4b12      	ldr	r3, [pc, #72]	; (80097b0 <__ieee754_atan2+0x148>)
 8009766:	f7f8 fd5f 	bl	8002228 <__aeabi_dsub>
 800976a:	0002      	movs	r2, r0
 800976c:	000b      	movs	r3, r1
 800976e:	480a      	ldr	r0, [pc, #40]	; (8009798 <__ieee754_atan2+0x130>)
 8009770:	4910      	ldr	r1, [pc, #64]	; (80097b4 <__ieee754_atan2+0x14c>)
 8009772:	f7f8 fd59 	bl	8002228 <__aeabi_dsub>
 8009776:	e792      	b.n	800969e <__ieee754_atan2+0x36>
 8009778:	4807      	ldr	r0, [pc, #28]	; (8009798 <__ieee754_atan2+0x130>)
 800977a:	490e      	ldr	r1, [pc, #56]	; (80097b4 <__ieee754_atan2+0x14c>)
 800977c:	e78f      	b.n	800969e <__ieee754_atan2+0x36>
 800977e:	4806      	ldr	r0, [pc, #24]	; (8009798 <__ieee754_atan2+0x130>)
 8009780:	490e      	ldr	r1, [pc, #56]	; (80097bc <__ieee754_atan2+0x154>)
 8009782:	e78c      	b.n	800969e <__ieee754_atan2+0x36>
 8009784:	2000      	movs	r0, #0
 8009786:	2100      	movs	r1, #0
 8009788:	e789      	b.n	800969e <__ieee754_atan2+0x36>
 800978a:	490b      	ldr	r1, [pc, #44]	; (80097b8 <__ieee754_atan2+0x150>)
 800978c:	e787      	b.n	800969e <__ieee754_atan2+0x36>
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	7ff00000 	.word	0x7ff00000
 8009794:	c0100000 	.word	0xc0100000
 8009798:	54442d18 	.word	0x54442d18
 800979c:	c00921fb 	.word	0xc00921fb
 80097a0:	bff921fb 	.word	0xbff921fb
 80097a4:	08009fe8 	.word	0x08009fe8
 80097a8:	0800a000 	.word	0x0800a000
 80097ac:	33145c07 	.word	0x33145c07
 80097b0:	3ca1a626 	.word	0x3ca1a626
 80097b4:	400921fb 	.word	0x400921fb
 80097b8:	3ff921fb 	.word	0x3ff921fb
 80097bc:	3fe921fb 	.word	0x3fe921fb

080097c0 <__ieee754_sqrt>:
 80097c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097c2:	000b      	movs	r3, r1
 80097c4:	000c      	movs	r4, r1
 80097c6:	4956      	ldr	r1, [pc, #344]	; (8009920 <__ieee754_sqrt+0x160>)
 80097c8:	0005      	movs	r5, r0
 80097ca:	0002      	movs	r2, r0
 80097cc:	0008      	movs	r0, r1
 80097ce:	b085      	sub	sp, #20
 80097d0:	4020      	ands	r0, r4
 80097d2:	4288      	cmp	r0, r1
 80097d4:	d10f      	bne.n	80097f6 <__ieee754_sqrt+0x36>
 80097d6:	0028      	movs	r0, r5
 80097d8:	0021      	movs	r1, r4
 80097da:	f7f8 fab9 	bl	8001d50 <__aeabi_dmul>
 80097de:	0002      	movs	r2, r0
 80097e0:	000b      	movs	r3, r1
 80097e2:	0028      	movs	r0, r5
 80097e4:	0021      	movs	r1, r4
 80097e6:	f7f7 fb75 	bl	8000ed4 <__aeabi_dadd>
 80097ea:	0005      	movs	r5, r0
 80097ec:	000c      	movs	r4, r1
 80097ee:	0028      	movs	r0, r5
 80097f0:	0021      	movs	r1, r4
 80097f2:	b005      	add	sp, #20
 80097f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097f6:	2c00      	cmp	r4, #0
 80097f8:	dc10      	bgt.n	800981c <__ieee754_sqrt+0x5c>
 80097fa:	0061      	lsls	r1, r4, #1
 80097fc:	0849      	lsrs	r1, r1, #1
 80097fe:	4329      	orrs	r1, r5
 8009800:	d0f5      	beq.n	80097ee <__ieee754_sqrt+0x2e>
 8009802:	2100      	movs	r1, #0
 8009804:	428c      	cmp	r4, r1
 8009806:	d100      	bne.n	800980a <__ieee754_sqrt+0x4a>
 8009808:	e080      	b.n	800990c <__ieee754_sqrt+0x14c>
 800980a:	0028      	movs	r0, r5
 800980c:	0021      	movs	r1, r4
 800980e:	f7f8 fd0b 	bl	8002228 <__aeabi_dsub>
 8009812:	0002      	movs	r2, r0
 8009814:	000b      	movs	r3, r1
 8009816:	f7f7 fe99 	bl	800154c <__aeabi_ddiv>
 800981a:	e7e6      	b.n	80097ea <__ieee754_sqrt+0x2a>
 800981c:	1521      	asrs	r1, r4, #20
 800981e:	d075      	beq.n	800990c <__ieee754_sqrt+0x14c>
 8009820:	4840      	ldr	r0, [pc, #256]	; (8009924 <__ieee754_sqrt+0x164>)
 8009822:	031b      	lsls	r3, r3, #12
 8009824:	180c      	adds	r4, r1, r0
 8009826:	2080      	movs	r0, #128	; 0x80
 8009828:	0b1b      	lsrs	r3, r3, #12
 800982a:	0340      	lsls	r0, r0, #13
 800982c:	4303      	orrs	r3, r0
 800982e:	07c9      	lsls	r1, r1, #31
 8009830:	d403      	bmi.n	800983a <__ieee754_sqrt+0x7a>
 8009832:	0fd1      	lsrs	r1, r2, #31
 8009834:	005b      	lsls	r3, r3, #1
 8009836:	185b      	adds	r3, r3, r1
 8009838:	0052      	lsls	r2, r2, #1
 800983a:	1061      	asrs	r1, r4, #1
 800983c:	2400      	movs	r4, #0
 800983e:	9103      	str	r1, [sp, #12]
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	0fd1      	lsrs	r1, r2, #31
 8009844:	185b      	adds	r3, r3, r1
 8009846:	2180      	movs	r1, #128	; 0x80
 8009848:	2516      	movs	r5, #22
 800984a:	0020      	movs	r0, r4
 800984c:	0052      	lsls	r2, r2, #1
 800984e:	0389      	lsls	r1, r1, #14
 8009850:	1846      	adds	r6, r0, r1
 8009852:	429e      	cmp	r6, r3
 8009854:	dc02      	bgt.n	800985c <__ieee754_sqrt+0x9c>
 8009856:	1870      	adds	r0, r6, r1
 8009858:	1b9b      	subs	r3, r3, r6
 800985a:	1864      	adds	r4, r4, r1
 800985c:	0fd6      	lsrs	r6, r2, #31
 800985e:	005b      	lsls	r3, r3, #1
 8009860:	3d01      	subs	r5, #1
 8009862:	18f3      	adds	r3, r6, r3
 8009864:	0052      	lsls	r2, r2, #1
 8009866:	0849      	lsrs	r1, r1, #1
 8009868:	2d00      	cmp	r5, #0
 800986a:	d1f1      	bne.n	8009850 <__ieee754_sqrt+0x90>
 800986c:	2620      	movs	r6, #32
 800986e:	2780      	movs	r7, #128	; 0x80
 8009870:	0029      	movs	r1, r5
 8009872:	9601      	str	r6, [sp, #4]
 8009874:	063f      	lsls	r7, r7, #24
 8009876:	197e      	adds	r6, r7, r5
 8009878:	46b4      	mov	ip, r6
 800987a:	4283      	cmp	r3, r0
 800987c:	dc02      	bgt.n	8009884 <__ieee754_sqrt+0xc4>
 800987e:	d114      	bne.n	80098aa <__ieee754_sqrt+0xea>
 8009880:	4296      	cmp	r6, r2
 8009882:	d812      	bhi.n	80098aa <__ieee754_sqrt+0xea>
 8009884:	4665      	mov	r5, ip
 8009886:	4666      	mov	r6, ip
 8009888:	19ed      	adds	r5, r5, r7
 800988a:	9002      	str	r0, [sp, #8]
 800988c:	2e00      	cmp	r6, #0
 800988e:	da03      	bge.n	8009898 <__ieee754_sqrt+0xd8>
 8009890:	43ee      	mvns	r6, r5
 8009892:	0ff6      	lsrs	r6, r6, #31
 8009894:	1986      	adds	r6, r0, r6
 8009896:	9602      	str	r6, [sp, #8]
 8009898:	1a1b      	subs	r3, r3, r0
 800989a:	4562      	cmp	r2, ip
 800989c:	4180      	sbcs	r0, r0
 800989e:	4240      	negs	r0, r0
 80098a0:	1a1b      	subs	r3, r3, r0
 80098a2:	4660      	mov	r0, ip
 80098a4:	1a12      	subs	r2, r2, r0
 80098a6:	9802      	ldr	r0, [sp, #8]
 80098a8:	19c9      	adds	r1, r1, r7
 80098aa:	0fd6      	lsrs	r6, r2, #31
 80098ac:	005b      	lsls	r3, r3, #1
 80098ae:	199b      	adds	r3, r3, r6
 80098b0:	9e01      	ldr	r6, [sp, #4]
 80098b2:	0052      	lsls	r2, r2, #1
 80098b4:	3e01      	subs	r6, #1
 80098b6:	087f      	lsrs	r7, r7, #1
 80098b8:	9601      	str	r6, [sp, #4]
 80098ba:	2e00      	cmp	r6, #0
 80098bc:	d1db      	bne.n	8009876 <__ieee754_sqrt+0xb6>
 80098be:	4313      	orrs	r3, r2
 80098c0:	d003      	beq.n	80098ca <__ieee754_sqrt+0x10a>
 80098c2:	1c4b      	adds	r3, r1, #1
 80098c4:	d127      	bne.n	8009916 <__ieee754_sqrt+0x156>
 80098c6:	0031      	movs	r1, r6
 80098c8:	3401      	adds	r4, #1
 80098ca:	4b17      	ldr	r3, [pc, #92]	; (8009928 <__ieee754_sqrt+0x168>)
 80098cc:	1060      	asrs	r0, r4, #1
 80098ce:	18c0      	adds	r0, r0, r3
 80098d0:	0849      	lsrs	r1, r1, #1
 80098d2:	07e3      	lsls	r3, r4, #31
 80098d4:	d502      	bpl.n	80098dc <__ieee754_sqrt+0x11c>
 80098d6:	2380      	movs	r3, #128	; 0x80
 80098d8:	061b      	lsls	r3, r3, #24
 80098da:	4319      	orrs	r1, r3
 80098dc:	9b03      	ldr	r3, [sp, #12]
 80098de:	000d      	movs	r5, r1
 80098e0:	051c      	lsls	r4, r3, #20
 80098e2:	1823      	adds	r3, r4, r0
 80098e4:	001c      	movs	r4, r3
 80098e6:	e782      	b.n	80097ee <__ieee754_sqrt+0x2e>
 80098e8:	0ad3      	lsrs	r3, r2, #11
 80098ea:	3815      	subs	r0, #21
 80098ec:	0552      	lsls	r2, r2, #21
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d0fa      	beq.n	80098e8 <__ieee754_sqrt+0x128>
 80098f2:	2480      	movs	r4, #128	; 0x80
 80098f4:	0364      	lsls	r4, r4, #13
 80098f6:	4223      	tst	r3, r4
 80098f8:	d00a      	beq.n	8009910 <__ieee754_sqrt+0x150>
 80098fa:	2420      	movs	r4, #32
 80098fc:	0016      	movs	r6, r2
 80098fe:	1a64      	subs	r4, r4, r1
 8009900:	40e6      	lsrs	r6, r4
 8009902:	1e4d      	subs	r5, r1, #1
 8009904:	408a      	lsls	r2, r1
 8009906:	4333      	orrs	r3, r6
 8009908:	1b41      	subs	r1, r0, r5
 800990a:	e789      	b.n	8009820 <__ieee754_sqrt+0x60>
 800990c:	2000      	movs	r0, #0
 800990e:	e7ee      	b.n	80098ee <__ieee754_sqrt+0x12e>
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	3101      	adds	r1, #1
 8009914:	e7ef      	b.n	80098f6 <__ieee754_sqrt+0x136>
 8009916:	2301      	movs	r3, #1
 8009918:	3101      	adds	r1, #1
 800991a:	4399      	bics	r1, r3
 800991c:	e7d5      	b.n	80098ca <__ieee754_sqrt+0x10a>
 800991e:	46c0      	nop			; (mov r8, r8)
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	fffffc01 	.word	0xfffffc01
 8009928:	3fe00000 	.word	0x3fe00000

0800992c <_init>:
 800992c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800992e:	46c0      	nop			; (mov r8, r8)
 8009930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009932:	bc08      	pop	{r3}
 8009934:	469e      	mov	lr, r3
 8009936:	4770      	bx	lr

08009938 <_fini>:
 8009938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800993a:	46c0      	nop			; (mov r8, r8)
 800993c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993e:	bc08      	pop	{r3}
 8009940:	469e      	mov	lr, r3
 8009942:	4770      	bx	lr
