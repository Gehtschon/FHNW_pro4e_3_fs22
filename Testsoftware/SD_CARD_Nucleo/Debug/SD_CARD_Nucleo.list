
SD_CARD_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067e8  080067e8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080067e8  080067e8  000167e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067f0  080067f0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f4  080067f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080067f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  20000084  0800687c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800687c  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff0a  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002271  00000000  00000000  0002ffbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da0  00000000  00000000  00032230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca8  00000000  00000000  00032fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e77  00000000  00000000  00033c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001236a  00000000  00000000  00057aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d34b2  00000000  00000000  00069e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013d30b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b88  00000000  00000000  0013d35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080064d8 	.word	0x080064d8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	080064d8 	.word	0x080064d8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000594:	b40f      	push	{r0, r1, r2, r3}
 8000596:	b580      	push	{r7, lr}
 8000598:	b082      	sub	sp, #8
 800059a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005aa:	480b      	ldr	r0, [pc, #44]	; (80005d8 <myprintf+0x44>)
 80005ac:	f005 fb38 	bl	8005c20 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <myprintf+0x44>)
 80005b2:	f7ff fe15 	bl	80001e0 <strlen>
 80005b6:	4603      	mov	r3, r0
 80005b8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	b29a      	uxth	r2, r3
 80005be:	f04f 33ff 	mov.w	r3, #4294967295
 80005c2:	4905      	ldr	r1, [pc, #20]	; (80005d8 <myprintf+0x44>)
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <myprintf+0x48>)
 80005c6:	f002 f9a4 	bl	8002912 <HAL_UART_Transmit>

}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005d4:	b004      	add	sp, #16
 80005d6:	4770      	bx	lr
 80005d8:	20000188 	.word	0x20000188
 80005dc:	20000104 	.word	0x20000104

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f000 fb90 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f904 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f9c2 	bl	8000978 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f990 	bl	8000918 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005f8:	f000 f950 	bl	800089c <MX_SPI1_Init>
  MX_FATFS_Init();
 80005fc:	f002 fe54 	bl	80032a8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8000600:	486e      	ldr	r0, [pc, #440]	; (80007bc <main+0x1dc>)
 8000602:	f7ff ffc7 	bl	8000594 <myprintf>

  HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060a:	f000 fbfb 	bl	8000e04 <HAL_Delay>
  FATFS FatFs; 	//Fatfs handle
  FIL fil; 		//File handle
  FRESULT fres; //Result after operations

  //Open the file system
  fres = f_mount(&FatFs, "", 1); //1=mount now
 800060e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8000612:	2201      	movs	r2, #1
 8000614:	496a      	ldr	r1, [pc, #424]	; (80007c0 <main+0x1e0>)
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fbf6 	bl	8004e08 <f_mount>
 800061c:	4603      	mov	r3, r0
 800061e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 8000622:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000626:	2b00      	cmp	r3, #0
 8000628:	d006      	beq.n	8000638 <main+0x58>
	myprintf("f_mount error (%i)\r\n", fres);
 800062a:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800062e:	4619      	mov	r1, r3
 8000630:	4864      	ldr	r0, [pc, #400]	; (80007c4 <main+0x1e4>)
 8000632:	f7ff ffaf 	bl	8000594 <myprintf>
	while(1);
 8000636:	e7fe      	b.n	8000636 <main+0x56>
  //Let's get some statistics from the SD card
  DWORD free_clusters, free_sectors, total_sectors;

  FATFS* getFreeFs;

  fres = f_getfree("", &free_clusters, &getFreeFs);
 8000638:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800063c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000640:	4619      	mov	r1, r3
 8000642:	485f      	ldr	r0, [pc, #380]	; (80007c0 <main+0x1e0>)
 8000644:	f005 f940 	bl	80058c8 <f_getfree>
 8000648:	4603      	mov	r3, r0
 800064a:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 800064e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <main+0x84>
	myprintf("f_getfree error (%i)\r\n", fres);
 8000656:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800065a:	4619      	mov	r1, r3
 800065c:	485a      	ldr	r0, [pc, #360]	; (80007c8 <main+0x1e8>)
 800065e:	f7ff ff99 	bl	8000594 <myprintf>
	while(1);
 8000662:	e7fe      	b.n	8000662 <main+0x82>
  }

  //Formula comes from ChaN's documentation
  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000664:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000668:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	695b      	ldr	r3, [r3, #20]
 8000670:	3b02      	subs	r3, #2
 8000672:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8000676:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 800067a:	6812      	ldr	r2, [r2, #0]
 800067c:	8952      	ldrh	r2, [r2, #10]
 800067e:	fb02 f303 	mul.w	r3, r2, r3
 8000682:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
  free_sectors = free_clusters * getFreeFs->csize;
 8000686:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800068a:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	895b      	ldrh	r3, [r3, #10]
 8000692:	461a      	mov	r2, r3
 8000694:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000698:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	fb02 f303 	mul.w	r3, r2, r3
 80006a2:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 80006a6:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80006aa:	0859      	lsrs	r1, r3, #1
 80006ac:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80006b0:	085b      	lsrs	r3, r3, #1
 80006b2:	461a      	mov	r2, r3
 80006b4:	4845      	ldr	r0, [pc, #276]	; (80007cc <main+0x1ec>)
 80006b6:	f7ff ff6d 	bl	8000594 <myprintf>

  //Now let's try to open file "test.txt"
  fres = f_open(&fil, "test.txt", FA_READ);
 80006ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006be:	2201      	movs	r2, #1
 80006c0:	4943      	ldr	r1, [pc, #268]	; (80007d0 <main+0x1f0>)
 80006c2:	4618      	mov	r0, r3
 80006c4:	f004 fbe6 	bl	8004e94 <f_open>
 80006c8:	4603      	mov	r3, r0
 80006ca:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if (fres != FR_OK) {
 80006ce:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d003      	beq.n	80006de <main+0xfe>
	myprintf("f_open error (%i)\r\n");
 80006d6:	483f      	ldr	r0, [pc, #252]	; (80007d4 <main+0x1f4>)
 80006d8:	f7ff ff5c 	bl	8000594 <myprintf>
	while(1);
 80006dc:	e7fe      	b.n	80006dc <main+0xfc>
  }
  myprintf("I was able to open 'test.txt' for reading!\r\n");
 80006de:	483e      	ldr	r0, [pc, #248]	; (80007d8 <main+0x1f8>)
 80006e0:	f7ff ff58 	bl	8000594 <myprintf>
  //Read 30 bytes from "test.txt" on the SD card
  BYTE readBuf[30];

  //We can either use f_read OR f_gets to get data out of files
  //f_gets is a wrapper on f_read that does some string formatting for us
  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 80006e4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80006e8:	f107 0308 	add.w	r3, r7, #8
 80006ec:	211e      	movs	r1, #30
 80006ee:	4618      	mov	r0, r3
 80006f0:	f005 f99f 	bl	8005a32 <f_gets>
 80006f4:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
  if(rres != 0) {
 80006f8:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d006      	beq.n	800070e <main+0x12e>
	myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4619      	mov	r1, r3
 8000706:	4835      	ldr	r0, [pc, #212]	; (80007dc <main+0x1fc>)
 8000708:	f7ff ff44 	bl	8000594 <myprintf>
 800070c:	e005      	b.n	800071a <main+0x13a>
  } else {
	myprintf("f_gets error (%i)\r\n", fres);
 800070e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000712:	4619      	mov	r1, r3
 8000714:	4832      	ldr	r0, [pc, #200]	; (80007e0 <main+0x200>)
 8000716:	f7ff ff3d 	bl	8000594 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 800071a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800071e:	4618      	mov	r0, r3
 8000720:	f005 f8a8 	bl	8005874 <f_close>

  //Now let's try and write a file "write.txt"
  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8000724:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000728:	221a      	movs	r2, #26
 800072a:	492e      	ldr	r1, [pc, #184]	; (80007e4 <main+0x204>)
 800072c:	4618      	mov	r0, r3
 800072e:	f004 fbb1 	bl	8004e94 <f_open>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 8000738:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800073c:	2b00      	cmp	r3, #0
 800073e:	d103      	bne.n	8000748 <main+0x168>
	myprintf("I was able to open 'write.txt' for writing\r\n");
 8000740:	4829      	ldr	r0, [pc, #164]	; (80007e8 <main+0x208>)
 8000742:	f7ff ff27 	bl	8000594 <myprintf>
 8000746:	e005      	b.n	8000754 <main+0x174>
  } else {
	myprintf("f_open error (%i)\r\n", fres);
 8000748:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800074c:	4619      	mov	r1, r3
 800074e:	4821      	ldr	r0, [pc, #132]	; (80007d4 <main+0x1f4>)
 8000750:	f7ff ff20 	bl	8000594 <myprintf>
  }

  //Copy in a string
  strncpy((char*)readBuf, "a new file is made!", 19);
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	4a24      	ldr	r2, [pc, #144]	; (80007ec <main+0x20c>)
 800075a:	461c      	mov	r4, r3
 800075c:	4615      	mov	r5, r2
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	682b      	ldr	r3, [r5, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	8022      	strh	r2, [r4, #0]
 8000768:	3402      	adds	r4, #2
 800076a:	0c1b      	lsrs	r3, r3, #16
 800076c:	7023      	strb	r3, [r4, #0]
  UINT bytesWrote;
  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	f107 0108 	add.w	r1, r7, #8
 8000774:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000778:	2213      	movs	r2, #19
 800077a:	f004 fe88 	bl	800548e <f_write>
 800077e:	4603      	mov	r3, r0
 8000780:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
  if(fres == FR_OK) {
 8000784:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8000788:	2b00      	cmp	r3, #0
 800078a:	d109      	bne.n	80007a0 <main+0x1c0>
	myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800078c:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8000790:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4619      	mov	r1, r3
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <main+0x210>)
 800079a:	f7ff fefb 	bl	8000594 <myprintf>
 800079e:	e002      	b.n	80007a6 <main+0x1c6>
  } else {
	myprintf("f_write error (%i)\r\n");
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <main+0x214>)
 80007a2:	f7ff fef7 	bl	8000594 <myprintf>
  }

  //Be a tidy kiwi - don't forget to close your file!
  f_close(&fil);
 80007a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007aa:	4618      	mov	r0, r3
 80007ac:	f005 f862 	bl	8005874 <f_close>

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	4903      	ldr	r1, [pc, #12]	; (80007c0 <main+0x1e0>)
 80007b4:	2000      	movs	r0, #0
 80007b6:	f004 fb27 	bl	8004e08 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <main+0x1da>
 80007bc:	080064f0 	.word	0x080064f0
 80007c0:	08006510 	.word	0x08006510
 80007c4:	08006514 	.word	0x08006514
 80007c8:	0800652c 	.word	0x0800652c
 80007cc:	08006544 	.word	0x08006544
 80007d0:	0800658c 	.word	0x0800658c
 80007d4:	08006598 	.word	0x08006598
 80007d8:	080065ac 	.word	0x080065ac
 80007dc:	080065dc 	.word	0x080065dc
 80007e0:	08006608 	.word	0x08006608
 80007e4:	0800661c 	.word	0x0800661c
 80007e8:	08006628 	.word	0x08006628
 80007ec:	08006658 	.word	0x08006658
 80007f0:	0800666c 	.word	0x0800666c
 80007f4:	08006690 	.word	0x08006690

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b096      	sub	sp, #88	; 0x58
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2244      	movs	r2, #68	; 0x44
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 f9d6 	bl	8005bb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
 8000812:	605a      	str	r2, [r3, #4]
 8000814:	609a      	str	r2, [r3, #8]
 8000816:	60da      	str	r2, [r3, #12]
 8000818:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800081a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800081e:	f000 fd9b 	bl	8001358 <HAL_PWREx_ControlVoltageScaling>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000828:	f000 f90c 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800082c:	2302      	movs	r3, #2
 800082e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000830:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000834:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000836:	2340      	movs	r3, #64	; 0x40
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083a:	2302      	movs	r3, #2
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800083e:	2302      	movs	r3, #2
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000842:	2301      	movs	r3, #1
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000846:	230a      	movs	r3, #10
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084a:	2307      	movs	r3, #7
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800084e:	2302      	movs	r3, #2
 8000850:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000852:	2302      	movs	r3, #2
 8000854:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4618      	mov	r0, r3
 800085c:	f000 fdd2 	bl	8001404 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000866:	f000 f8ed 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	230f      	movs	r3, #15
 800086c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800087e:	463b      	mov	r3, r7
 8000880:	2104      	movs	r1, #4
 8000882:	4618      	mov	r0, r3
 8000884:	f001 f9d2 	bl	8001c2c <HAL_RCC_ClockConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800088e:	f000 f8d9 	bl	8000a44 <Error_Handler>
  }
}
 8000892:	bf00      	nop
 8000894:	3758      	adds	r7, #88	; 0x58
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008a0:	4b1b      	ldr	r3, [pc, #108]	; (8000910 <MX_SPI1_Init+0x74>)
 80008a2:	4a1c      	ldr	r2, [pc, #112]	; (8000914 <MX_SPI1_Init+0x78>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b1a      	ldr	r3, [pc, #104]	; (8000910 <MX_SPI1_Init+0x74>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <MX_SPI1_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b16      	ldr	r3, [pc, #88]	; (8000910 <MX_SPI1_Init+0x74>)
 80008b6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <MX_SPI1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <MX_SPI1_Init+0x74>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008c8:	4b11      	ldr	r3, [pc, #68]	; (8000910 <MX_SPI1_Init+0x74>)
 80008ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80008d0:	4b0f      	ldr	r3, [pc, #60]	; (8000910 <MX_SPI1_Init+0x74>)
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <MX_SPI1_Init+0x74>)
 80008d8:	2200      	movs	r2, #0
 80008da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <MX_SPI1_Init+0x74>)
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <MX_SPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008e8:	4b09      	ldr	r3, [pc, #36]	; (8000910 <MX_SPI1_Init+0x74>)
 80008ea:	2207      	movs	r2, #7
 80008ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <MX_SPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <MX_SPI1_Init+0x74>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008fa:	4805      	ldr	r0, [pc, #20]	; (8000910 <MX_SPI1_Init+0x74>)
 80008fc:	f001 ff18 	bl	8002730 <HAL_SPI_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000906:	f000 f89d 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	200000a0 	.word	0x200000a0
 8000914:	40013000 	.word	0x40013000

08000918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800091e:	4a15      	ldr	r2, [pc, #84]	; (8000974 <MX_USART2_UART_Init+0x5c>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000922:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000924:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b09      	ldr	r3, [pc, #36]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800094e:	4b08      	ldr	r3, [pc, #32]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_USART2_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800095a:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_USART2_UART_Init+0x58>)
 800095c:	f001 ff8b 	bl	8002876 <HAL_UART_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000966:	f000 f86d 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000104 	.word	0x20000104
 8000974:	40004400 	.word	0x40004400

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b2a      	ldr	r3, [pc, #168]	; (8000a38 <MX_GPIO_Init+0xc0>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <MX_GPIO_Init+0xc0>)
 8000994:	f043 0304 	orr.w	r3, r3, #4
 8000998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800099a:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <MX_GPIO_Init+0xc0>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	f003 0304 	and.w	r3, r3, #4
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	4a23      	ldr	r2, [pc, #140]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a1d      	ldr	r2, [pc, #116]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a17      	ldr	r2, [pc, #92]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009dc:	f043 0302 	orr.w	r3, r3, #2
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <MX_GPIO_Init+0xc0>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0302 	and.w	r3, r3, #2
 80009ea:	607b      	str	r3, [r7, #4]
 80009ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2102      	movs	r1, #2
 80009f2:	4812      	ldr	r0, [pc, #72]	; (8000a3c <MX_GPIO_Init+0xc4>)
 80009f4:	f000 fc8a 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	480c      	ldr	r0, [pc, #48]	; (8000a40 <MX_GPIO_Init+0xc8>)
 8000a10:	f000 fb02 	bl	8001018 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8000a14:	2302      	movs	r3, #2
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_GPIO_Init+0xc4>)
 8000a2c:	f000 faf4 	bl	8001018 <HAL_GPIO_Init>

}
 8000a30:	bf00      	nop
 8000a32:	3728      	adds	r7, #40	; 0x28
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	48000400 	.word	0x48000400
 8000a40:	48000800 	.word	0x48000800

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <Error_Handler+0x8>
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <HAL_MspInit+0x44>)
 8000a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a5a:	4a0e      	ldr	r2, [pc, #56]	; (8000a94 <HAL_MspInit+0x44>)
 8000a5c:	f043 0301 	orr.w	r3, r3, #1
 8000a60:	6613      	str	r3, [r2, #96]	; 0x60
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <HAL_MspInit+0x44>)
 8000a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <HAL_MspInit+0x44>)
 8000a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a72:	4a08      	ldr	r2, [pc, #32]	; (8000a94 <HAL_MspInit+0x44>)
 8000a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a78:	6593      	str	r3, [r2, #88]	; 0x58
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_MspInit+0x44>)
 8000a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a82:	603b      	str	r3, [r7, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40021000 	.word	0x40021000

08000a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a17      	ldr	r2, [pc, #92]	; (8000b14 <HAL_SPI_MspInit+0x7c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d128      	bne.n	8000b0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_SPI_MspInit+0x80>)
 8000abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000abe:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <HAL_SPI_MspInit+0x80>)
 8000ac0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_SPI_MspInit+0x80>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <HAL_SPI_MspInit+0x80>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_SPI_MspInit+0x80>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_SPI_MspInit+0x80>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000aea:	23e0      	movs	r3, #224	; 0xe0
 8000aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	2302      	movs	r3, #2
 8000af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af6:	2303      	movs	r3, #3
 8000af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000afa:	2305      	movs	r3, #5
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b08:	f000 fa86 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3728      	adds	r7, #40	; 0x28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40013000 	.word	0x40013000
 8000b18:	40021000 	.word	0x40021000

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b0a4      	sub	sp, #144	; 0x90
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2268      	movs	r2, #104	; 0x68
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f005 f83b 	bl	8005bb8 <memset>
  if(huart->Instance==USART2)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a21      	ldr	r2, [pc, #132]	; (8000bcc <HAL_UART_MspInit+0xb0>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d13a      	bne.n	8000bc2 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f001 fa8b 	bl	8002074 <HAL_RCCEx_PeriphCLKConfig>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b64:	f7ff ff6e 	bl	8000a44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b68:	4b19      	ldr	r3, [pc, #100]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	4a18      	ldr	r2, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6593      	str	r3, [r2, #88]	; 0x58
 8000b74:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b84:	4a12      	ldr	r2, [pc, #72]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b8c:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <HAL_UART_MspInit+0xb4>)
 8000b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b90:	f003 0301 	and.w	r3, r3, #1
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b98:	230c      	movs	r3, #12
 8000b9a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba8:	2303      	movs	r3, #3
 8000baa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f000 fa2b 	bl	8001018 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	3790      	adds	r7, #144	; 0x90
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd8:	e7fe      	b.n	8000bd8 <NMI_Handler+0x4>

08000bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bde:	e7fe      	b.n	8000bde <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	e7fe      	b.n	8000be4 <MemManage_Handler+0x4>

08000be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be6:	b480      	push	{r7}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bea:	e7fe      	b.n	8000bea <BusFault_Handler+0x4>

08000bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf0:	e7fe      	b.n	8000bf0 <UsageFault_Handler+0x4>

08000bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c20:	f000 f8d0 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	; (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	; (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d207      	bcs.n	8000c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c58:	f004 ff84 	bl	8005b64 <__errno>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	220c      	movs	r2, #12
 8000c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	e009      	b.n	8000c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c68:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <_sbrk+0x64>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <_sbrk+0x64>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4413      	add	r3, r2
 8000c76:	4a05      	ldr	r2, [pc, #20]	; (8000c8c <_sbrk+0x64>)
 8000c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7a:	68fb      	ldr	r3, [r7, #12]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20028000 	.word	0x20028000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	20000288 	.word	0x20000288
 8000c90:	200002e0 	.word	0x200002e0

08000c94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	; (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f004 ff43 	bl	8005b70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fc79 	bl	80005e0 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000cfc:	080067f8 	.word	0x080067f8
  ldr r2, =_sbss
 8000d00:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000d04:	200002dc 	.word	0x200002dc

08000d08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f944 	bl	8000fb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f80f 	bl	8000d4c <HAL_InitTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3a:	f7ff fe89 	bl	8000a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f941 	bl	8000ffe <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f919 	bl	8000fc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000008 	.word	0x20000008
 8000de8:	2000028c 	.word	0x2000028c

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000028c 	.word	0x2000028c

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000008 	.word	0x20000008

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3b01      	subs	r3, #1
 8000f78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f7c:	d301      	bcc.n	8000f82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00f      	b.n	8000fa2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f82:	4a0a      	ldr	r2, [pc, #40]	; (8000fac <SysTick_Config+0x40>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f8a:	210f      	movs	r1, #15
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f7ff ff8e 	bl	8000eb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <SysTick_Config+0x40>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f9a:	4b04      	ldr	r3, [pc, #16]	; (8000fac <SysTick_Config+0x40>)
 8000f9c:	2207      	movs	r2, #7
 8000f9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	e000e010 	.word	0xe000e010

08000fb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f7ff ff47 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	4603      	mov	r3, r0
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd8:	f7ff ff5c 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8000fdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fde:	687a      	ldr	r2, [r7, #4]
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	6978      	ldr	r0, [r7, #20]
 8000fe4:	f7ff ff8e 	bl	8000f04 <NVIC_EncodePriority>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ff5d 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b082      	sub	sp, #8
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ffb0 	bl	8000f6c <SysTick_Config>
 800100c:	4603      	mov	r3, r0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	b480      	push	{r7}
 800101a:	b087      	sub	sp, #28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001026:	e154      	b.n	80012d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	2101      	movs	r1, #1
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	fa01 f303 	lsl.w	r3, r1, r3
 8001034:	4013      	ands	r3, r2
 8001036:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	f000 8146 	beq.w	80012cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b01      	cmp	r3, #1
 800104a:	d005      	beq.n	8001058 <HAL_GPIO_Init+0x40>
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d130      	bne.n	80010ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	68da      	ldr	r2, [r3, #12]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4313      	orrs	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800108e:	2201      	movs	r2, #1
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	091b      	lsrs	r3, r3, #4
 80010a4:	f003 0201 	and.w	r2, r3, #1
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	4313      	orrs	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d017      	beq.n	80010f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	2203      	movs	r2, #3
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	4013      	ands	r3, r2
 80010dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	689a      	ldr	r2, [r3, #8]
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d123      	bne.n	800114a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	08da      	lsrs	r2, r3, #3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	3208      	adds	r2, #8
 800110a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800110e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	691a      	ldr	r2, [r3, #16]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	6939      	ldr	r1, [r7, #16]
 8001146:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	2203      	movs	r2, #3
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	4013      	ands	r3, r2
 8001160:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	f003 0203 	and.w	r2, r3, #3
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4313      	orrs	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001186:	2b00      	cmp	r3, #0
 8001188:	f000 80a0 	beq.w	80012cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118c:	4b58      	ldr	r3, [pc, #352]	; (80012f0 <HAL_GPIO_Init+0x2d8>)
 800118e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001190:	4a57      	ldr	r2, [pc, #348]	; (80012f0 <HAL_GPIO_Init+0x2d8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6613      	str	r3, [r2, #96]	; 0x60
 8001198:	4b55      	ldr	r3, [pc, #340]	; (80012f0 <HAL_GPIO_Init+0x2d8>)
 800119a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011a4:	4a53      	ldr	r2, [pc, #332]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	089b      	lsrs	r3, r3, #2
 80011aa:	3302      	adds	r3, #2
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f003 0303 	and.w	r3, r3, #3
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	693a      	ldr	r2, [r7, #16]
 80011c4:	4013      	ands	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ce:	d019      	beq.n	8001204 <HAL_GPIO_Init+0x1ec>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a49      	ldr	r2, [pc, #292]	; (80012f8 <HAL_GPIO_Init+0x2e0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d013      	beq.n	8001200 <HAL_GPIO_Init+0x1e8>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	4a48      	ldr	r2, [pc, #288]	; (80012fc <HAL_GPIO_Init+0x2e4>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d00d      	beq.n	80011fc <HAL_GPIO_Init+0x1e4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a47      	ldr	r2, [pc, #284]	; (8001300 <HAL_GPIO_Init+0x2e8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x1e0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a46      	ldr	r2, [pc, #280]	; (8001304 <HAL_GPIO_Init+0x2ec>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_Init+0x1dc>
 80011f0:	2304      	movs	r3, #4
 80011f2:	e008      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 80011f4:	2307      	movs	r3, #7
 80011f6:	e006      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 80011f8:	2303      	movs	r3, #3
 80011fa:	e004      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e002      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <HAL_GPIO_Init+0x1ee>
 8001204:	2300      	movs	r3, #0
 8001206:	697a      	ldr	r2, [r7, #20]
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	0092      	lsls	r2, r2, #2
 800120e:	4093      	lsls	r3, r2
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001216:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_GPIO_Init+0x2dc>)
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3302      	adds	r3, #2
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001224:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	43db      	mvns	r3, r3
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4013      	ands	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001248:	4a2f      	ldr	r2, [pc, #188]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	43db      	mvns	r3, r3
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	4013      	ands	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001272:	4a25      	ldr	r2, [pc, #148]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	43db      	mvns	r3, r3
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4013      	ands	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800129c:	4a1a      	ldr	r2, [pc, #104]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4013      	ands	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <HAL_GPIO_Init+0x2f0>)
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f47f aea3 	bne.w	8001028 <HAL_GPIO_Init+0x10>
  }
}
 80012e2:	bf00      	nop
 80012e4:	bf00      	nop
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000
 80012f8:	48000400 	.word	0x48000400
 80012fc:	48000800 	.word	0x48000800
 8001300:	48000c00 	.word	0x48000c00
 8001304:	48001000 	.word	0x48001000
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001340:	4b04      	ldr	r3, [pc, #16]	; (8001354 <HAL_PWREx_GetVoltageRange+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001366:	d130      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001368:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001374:	d038      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800137e:	4a1e      	ldr	r2, [pc, #120]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001380:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2232      	movs	r2, #50	; 0x32
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139c:	e002      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b0:	d102      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c4:	d110      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e00f      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013d6:	d007      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013e0:	4a05      	ldr	r2, [pc, #20]	; (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d102      	bne.n	8001418 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f000 bc02 	b.w	8001c1c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001418:	4b96      	ldr	r3, [pc, #600]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 030c 	and.w	r3, r3, #12
 8001420:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001422:	4b94      	ldr	r3, [pc, #592]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	f003 0303 	and.w	r3, r3, #3
 800142a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80e4 	beq.w	8001602 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d007      	beq.n	8001450 <HAL_RCC_OscConfig+0x4c>
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	2b0c      	cmp	r3, #12
 8001444:	f040 808b 	bne.w	800155e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	2b01      	cmp	r3, #1
 800144c:	f040 8087 	bne.w	800155e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001450:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d005      	beq.n	8001468 <HAL_RCC_OscConfig+0x64>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e3d9      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4b81      	ldr	r3, [pc, #516]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0308 	and.w	r3, r3, #8
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <HAL_RCC_OscConfig+0x7e>
 8001478:	4b7e      	ldr	r3, [pc, #504]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001480:	e005      	b.n	800148e <HAL_RCC_OscConfig+0x8a>
 8001482:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001484:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001488:	091b      	lsrs	r3, r3, #4
 800148a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800148e:	4293      	cmp	r3, r2
 8001490:	d223      	bcs.n	80014da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a1b      	ldr	r3, [r3, #32]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fd8c 	bl	8001fb4 <RCC_SetFlashLatencyFromMSIRange>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e3ba      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a6:	4b73      	ldr	r3, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a72      	ldr	r2, [pc, #456]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b70      	ldr	r3, [pc, #448]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1b      	ldr	r3, [r3, #32]
 80014be:	496d      	ldr	r1, [pc, #436]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4b6b      	ldr	r3, [pc, #428]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4968      	ldr	r1, [pc, #416]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014d4:	4313      	orrs	r3, r2
 80014d6:	604b      	str	r3, [r1, #4]
 80014d8:	e025      	b.n	8001526 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014da:	4b66      	ldr	r3, [pc, #408]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a65      	ldr	r2, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e0:	f043 0308 	orr.w	r3, r3, #8
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b63      	ldr	r3, [pc, #396]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4960      	ldr	r1, [pc, #384]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f8:	4b5e      	ldr	r3, [pc, #376]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	495b      	ldr	r1, [pc, #364]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d109      	bne.n	8001526 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a1b      	ldr	r3, [r3, #32]
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fd4c 	bl	8001fb4 <RCC_SetFlashLatencyFromMSIRange>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e37a      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001526:	f000 fc81 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b51      	ldr	r3, [pc, #324]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	4950      	ldr	r1, [pc, #320]	; (8001678 <HAL_RCC_OscConfig+0x274>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	f003 031f 	and.w	r3, r3, #31
 800153e:	fa22 f303 	lsr.w	r3, r2, r3
 8001542:	4a4e      	ldr	r2, [pc, #312]	; (800167c <HAL_RCC_OscConfig+0x278>)
 8001544:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001546:	4b4e      	ldr	r3, [pc, #312]	; (8001680 <HAL_RCC_OscConfig+0x27c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff fbfe 	bl	8000d4c <HAL_InitTick>
 8001550:	4603      	mov	r3, r0
 8001552:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d052      	beq.n	8001600 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	e35e      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d032      	beq.n	80015cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001566:	4b43      	ldr	r3, [pc, #268]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a42      	ldr	r2, [pc, #264]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800156c:	f043 0301 	orr.w	r3, r3, #1
 8001570:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001572:	f7ff fc3b 	bl	8000dec <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001578:	e008      	b.n	800158c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800157a:	f7ff fc37 	bl	8000dec <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b02      	cmp	r3, #2
 8001586:	d901      	bls.n	800158c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001588:	2303      	movs	r3, #3
 800158a:	e347      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158c:	4b39      	ldr	r3, [pc, #228]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0302 	and.w	r3, r3, #2
 8001594:	2b00      	cmp	r3, #0
 8001596:	d0f0      	beq.n	800157a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001598:	4b36      	ldr	r3, [pc, #216]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a35      	ldr	r2, [pc, #212]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b33      	ldr	r3, [pc, #204]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4930      	ldr	r1, [pc, #192]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b6:	4b2f      	ldr	r3, [pc, #188]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	492b      	ldr	r1, [pc, #172]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015c6:	4313      	orrs	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
 80015ca:	e01a      	b.n	8001602 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015cc:	4b29      	ldr	r3, [pc, #164]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a28      	ldr	r2, [pc, #160]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015d2:	f023 0301 	bic.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc08 	bl	8000dec <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e0:	f7ff fc04 	bl	8000dec <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e314      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d1f0      	bne.n	80015e0 <HAL_RCC_OscConfig+0x1dc>
 80015fe:	e000      	b.n	8001602 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001600:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d073      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b08      	cmp	r3, #8
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x21c>
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	2b0c      	cmp	r3, #12
 8001618:	d10e      	bne.n	8001638 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	2b03      	cmp	r3, #3
 800161e:	d10b      	bne.n	8001638 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001620:	4b14      	ldr	r3, [pc, #80]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d063      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d15f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e2f1      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001640:	d106      	bne.n	8001650 <HAL_RCC_OscConfig+0x24c>
 8001642:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800164c:	6013      	str	r3, [r2, #0]
 800164e:	e025      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001658:	d114      	bne.n	8001684 <HAL_RCC_OscConfig+0x280>
 800165a:	4b06      	ldr	r3, [pc, #24]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a05      	ldr	r2, [pc, #20]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001660:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	4b03      	ldr	r3, [pc, #12]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a02      	ldr	r2, [pc, #8]	; (8001674 <HAL_RCC_OscConfig+0x270>)
 800166c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e013      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 8001674:	40021000 	.word	0x40021000
 8001678:	080066ec 	.word	0x080066ec
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
 8001684:	4ba0      	ldr	r3, [pc, #640]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a9f      	ldr	r2, [pc, #636]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b9d      	ldr	r3, [pc, #628]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a9c      	ldr	r2, [pc, #624]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fba2 	bl	8000dec <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb9e 	bl	8000dec <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	; 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e2ae      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4b92      	ldr	r3, [pc, #584]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x2a8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb8e 	bl	8000dec <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb8a 	bl	8000dec <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e29a      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	4b88      	ldr	r3, [pc, #544]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2d0>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x310>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d119      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d116      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b7c      	ldr	r3, [pc, #496]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x328>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e277      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b76      	ldr	r3, [pc, #472]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4973      	ldr	r1, [pc, #460]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	e040      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fb49 	bl	8000dec <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fb45 	bl	8000dec <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e255      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	495f      	ldr	r1, [pc, #380]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e018      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b5d      	ldr	r3, [pc, #372]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5c      	ldr	r2, [pc, #368]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fb25 	bl	8000dec <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fb21 	bl	8000dec <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e231      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03c      	beq.n	800184a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01c      	beq.n	8001812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d8:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017de:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fb00 	bl	8000dec <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff fafc 	bl	8000dec <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e20c      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3ec>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001818:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fae3 	bl	8000dec <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff fadf 	bl	8000dec <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1ef      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	4a26      	ldr	r2, [pc, #152]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	; 0x58
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001890:	4b1e      	ldr	r3, [pc, #120]	; (800190c <HAL_RCC_OscConfig+0x508>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_RCC_OscConfig+0x508>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff faa6 	bl	8000dec <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a4:	f7ff faa2 	bl	8000dec <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e1b2      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4b15      	ldr	r3, [pc, #84]	; (800190c <HAL_RCC_OscConfig+0x508>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x4d8>
 80018ca:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d0:	4a0d      	ldr	r2, [pc, #52]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018da:	e029      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d115      	bne.n	8001910 <HAL_RCC_OscConfig+0x50c>
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	4a03      	ldr	r2, [pc, #12]	; (8001908 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	40007000 	.word	0x40007000
 8001910:	4b9a      	ldr	r3, [pc, #616]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	4a99      	ldr	r2, [pc, #612]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001920:	4b96      	ldr	r3, [pc, #600]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	4a95      	ldr	r2, [pc, #596]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d016      	beq.n	8001966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fa58 	bl	8000dec <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fa54 	bl	8000dec <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e162      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ed      	beq.n	8001940 <HAL_RCC_OscConfig+0x53c>
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff fa41 	bl	8000dec <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fa3d 	bl	8000dec <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e14b      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ed      	bne.n	800196e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800199c:	4a77      	ldr	r2, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d03c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d01c      	beq.n	80019f2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019b8:	4b70      	ldr	r3, [pc, #448]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 80019ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019be:	4a6f      	ldr	r2, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa10 	bl	8000dec <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019d0:	f7ff fa0c 	bl	8000dec <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e11c      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019e2:	4b66      	ldr	r3, [pc, #408]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 80019e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d0ef      	beq.n	80019d0 <HAL_RCC_OscConfig+0x5cc>
 80019f0:	e01b      	b.n	8001a2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019f2:	4b62      	ldr	r3, [pc, #392]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 80019f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019f8:	4a60      	ldr	r2, [pc, #384]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a02:	f7ff f9f3 	bl	8000dec <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a0a:	f7ff f9ef 	bl	8000dec <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e0ff      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a1c:	4b57      	ldr	r3, [pc, #348]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001a1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a22:	f003 0302 	and.w	r3, r3, #2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1ef      	bne.n	8001a0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80f3 	beq.w	8001c1a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	f040 80c9 	bne.w	8001bd0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a3e:	4b4f      	ldr	r3, [pc, #316]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d12c      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d123      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d11b      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d113      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8e:	085b      	lsrs	r3, r3, #1
 8001a90:	3b01      	subs	r3, #1
 8001a92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa2:	085b      	lsrs	r3, r3, #1
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d06b      	beq.n	8001b84 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	2b0c      	cmp	r3, #12
 8001ab0:	d062      	beq.n	8001b78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ab2:	4b32      	ldr	r3, [pc, #200]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0ac      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2d      	ldr	r2, [pc, #180]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001ac8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001acc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ace:	f7ff f98d 	bl	8000dec <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff f989 	bl	8000dec <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e099      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	4b24      	ldr	r3, [pc, #144]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	4b21      	ldr	r3, [pc, #132]	; (8001b80 <HAL_RCC_OscConfig+0x77c>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b04:	3a01      	subs	r2, #1
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	4311      	orrs	r1, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b0e:	0212      	lsls	r2, r2, #8
 8001b10:	4311      	orrs	r1, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b16:	0852      	lsrs	r2, r2, #1
 8001b18:	3a01      	subs	r2, #1
 8001b1a:	0552      	lsls	r2, r2, #21
 8001b1c:	4311      	orrs	r1, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b22:	0852      	lsrs	r2, r2, #1
 8001b24:	3a01      	subs	r2, #1
 8001b26:	0652      	lsls	r2, r2, #25
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2e:	06d2      	lsls	r2, r2, #27
 8001b30:	430a      	orrs	r2, r1
 8001b32:	4912      	ldr	r1, [pc, #72]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a0c      	ldr	r2, [pc, #48]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b50:	f7ff f94c 	bl	8000dec <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f948 	bl	8000dec <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e058      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6a:	4b04      	ldr	r3, [pc, #16]	; (8001b7c <HAL_RCC_OscConfig+0x778>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d0f0      	beq.n	8001b58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b76:	e050      	b.n	8001c1a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e04f      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d144      	bne.n	8001c1a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b90:	4b24      	ldr	r3, [pc, #144]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a23      	ldr	r2, [pc, #140]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b9c:	4b21      	ldr	r3, [pc, #132]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001ba2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ba8:	f7ff f920 	bl	8000dec <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7ff f91c 	bl	8000dec <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e02c      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc2:	4b18      	ldr	r3, [pc, #96]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x7ac>
 8001bce:	e024      	b.n	8001c1a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d01f      	beq.n	8001c16 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a12      	ldr	r2, [pc, #72]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be2:	f7ff f903 	bl	8000dec <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	e008      	b.n	8001bfc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bea:	f7ff f8ff 	bl	8000dec <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d1f0      	bne.n	8001bea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001c0a:	68da      	ldr	r2, [r3, #12]
 8001c0c:	4905      	ldr	r1, [pc, #20]	; (8001c24 <HAL_RCC_OscConfig+0x820>)
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_RCC_OscConfig+0x824>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	60cb      	str	r3, [r1, #12]
 8001c14:	e001      	b.n	8001c1a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40021000 	.word	0x40021000
 8001c28:	feeefffc 	.word	0xfeeefffc

08001c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d101      	bne.n	8001c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0e7      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c40:	4b75      	ldr	r3, [pc, #468]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d910      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b72      	ldr	r3, [pc, #456]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 0207 	bic.w	r2, r3, #7
 8001c56:	4970      	ldr	r1, [pc, #448]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5e:	4b6e      	ldr	r3, [pc, #440]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d001      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e0cf      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d010      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	4b66      	ldr	r3, [pc, #408]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d908      	bls.n	8001c9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c8c:	4b63      	ldr	r3, [pc, #396]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4960      	ldr	r1, [pc, #384]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d04c      	beq.n	8001d44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b03      	cmp	r3, #3
 8001cb0:	d107      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb2:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d121      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e0a6      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d107      	bne.n	8001cda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cca:	4b54      	ldr	r3, [pc, #336]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d115      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e09a      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ce2:	4b4e      	ldr	r3, [pc, #312]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e08e      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf2:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e086      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d02:	4b46      	ldr	r3, [pc, #280]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f023 0203 	bic.w	r2, r3, #3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	4943      	ldr	r1, [pc, #268]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d14:	f7ff f86a 	bl	8000dec <HAL_GetTick>
 8001d18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1a:	e00a      	b.n	8001d32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1c:	f7ff f866 	bl	8000dec <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e06e      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	4b3a      	ldr	r3, [pc, #232]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 020c 	and.w	r2, r3, #12
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d1eb      	bne.n	8001d1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d010      	beq.n	8001d72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	4b31      	ldr	r3, [pc, #196]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d208      	bcs.n	8001d72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d60:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	492b      	ldr	r1, [pc, #172]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d210      	bcs.n	8001da2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d80:	4b25      	ldr	r3, [pc, #148]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f023 0207 	bic.w	r2, r3, #7
 8001d88:	4923      	ldr	r1, [pc, #140]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <HAL_RCC_ClockConfig+0x1ec>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e036      	b.n	8001e10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d008      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dae:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4918      	ldr	r1, [pc, #96]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d009      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dcc:	4b13      	ldr	r3, [pc, #76]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4910      	ldr	r1, [pc, #64]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de0:	f000 f824 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8001de4:	4602      	mov	r2, r0
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_RCC_ClockConfig+0x1f0>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	091b      	lsrs	r3, r3, #4
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	490b      	ldr	r1, [pc, #44]	; (8001e20 <HAL_RCC_ClockConfig+0x1f4>)
 8001df2:	5ccb      	ldrb	r3, [r1, r3]
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	4a09      	ldr	r2, [pc, #36]	; (8001e24 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e00:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_ClockConfig+0x1fc>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe ffa1 	bl	8000d4c <HAL_InitTick>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3710      	adds	r7, #16
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	080066ec 	.word	0x080066ec
 8001e24:	20000000 	.word	0x20000000
 8001e28:	20000004 	.word	0x20000004

08001e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3a:	4b3e      	ldr	r3, [pc, #248]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e44:	4b3b      	ldr	r3, [pc, #236]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_GetSysClockFreq+0x34>
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	2b0c      	cmp	r3, #12
 8001e58:	d121      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d11e      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0308 	and.w	r3, r3, #8
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d107      	bne.n	8001e7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	0a1b      	lsrs	r3, r3, #8
 8001e74:	f003 030f 	and.w	r3, r3, #15
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e005      	b.n	8001e88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e7c:	4b2d      	ldr	r3, [pc, #180]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	091b      	lsrs	r3, r3, #4
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e88:	4a2b      	ldr	r2, [pc, #172]	; (8001f38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d102      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ea4:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ea6:	61bb      	str	r3, [r7, #24]
 8001ea8:	e004      	b.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b08      	cmp	r3, #8
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d134      	bne.n	8001f24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d003      	beq.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d003      	beq.n	8001ed8 <HAL_RCC_GetSysClockFreq+0xac>
 8001ed0:	e005      	b.n	8001ede <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ed2:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001ed4:	617b      	str	r3, [r7, #20]
      break;
 8001ed6:	e005      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001eda:	617b      	str	r3, [r7, #20]
      break;
 8001edc:	e002      	b.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	617b      	str	r3, [r7, #20]
      break;
 8001ee2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	3301      	adds	r3, #1
 8001ef0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	0a1b      	lsrs	r3, r3, #8
 8001ef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001efc:	697a      	ldr	r2, [r7, #20]
 8001efe:	fb03 f202 	mul.w	r2, r3, r2
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	0e5b      	lsrs	r3, r3, #25
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	3301      	adds	r3, #1
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f1a:	697a      	ldr	r2, [r7, #20]
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f24:	69bb      	ldr	r3, [r7, #24]
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08006704 	.word	0x08006704
 8001f3c:	00f42400 	.word	0x00f42400
 8001f40:	007a1200 	.word	0x007a1200

08001f44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	20000000 	.word	0x20000000

08001f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f60:	f7ff fff0 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f64:	4602      	mov	r2, r0
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	4904      	ldr	r1, [pc, #16]	; (8001f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f72:	5ccb      	ldrb	r3, [r1, r3]
 8001f74:	f003 031f 	and.w	r3, r3, #31
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	40021000 	.word	0x40021000
 8001f84:	080066fc 	.word	0x080066fc

08001f88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f8c:	f7ff ffda 	bl	8001f44 <HAL_RCC_GetHCLKFreq>
 8001f90:	4602      	mov	r2, r0
 8001f92:	4b06      	ldr	r3, [pc, #24]	; (8001fac <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	0adb      	lsrs	r3, r3, #11
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	4904      	ldr	r1, [pc, #16]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f9e:	5ccb      	ldrb	r3, [r1, r3]
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	080066fc 	.word	0x080066fc

08001fb4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001fcc:	f7ff f9b6 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001fd0:	6178      	str	r0, [r7, #20]
 8001fd2:	e014      	b.n	8001ffe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4a24      	ldr	r2, [pc, #144]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fec:	f7ff f9a6 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001ff0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002004:	d10b      	bne.n	800201e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b80      	cmp	r3, #128	; 0x80
 800200a:	d919      	bls.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2ba0      	cmp	r3, #160	; 0xa0
 8002010:	d902      	bls.n	8002018 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002012:	2302      	movs	r3, #2
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	e013      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002018:	2301      	movs	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	e010      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b80      	cmp	r3, #128	; 0x80
 8002022:	d902      	bls.n	800202a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002024:	2303      	movs	r3, #3
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	e00a      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b80      	cmp	r3, #128	; 0x80
 800202e:	d102      	bne.n	8002036 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002030:	2302      	movs	r3, #2
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	e004      	b.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b70      	cmp	r3, #112	; 0x70
 800203a:	d101      	bne.n	8002040 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800203c:	2301      	movs	r3, #1
 800203e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002040:	4b0b      	ldr	r3, [pc, #44]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 0207 	bic.w	r2, r3, #7
 8002048:	4909      	ldr	r1, [pc, #36]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	693a      	ldr	r2, [r7, #16]
 800205a:	429a      	cmp	r2, r3
 800205c:	d001      	beq.n	8002062 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000
 8002070:	40022000 	.word	0x40022000

08002074 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b086      	sub	sp, #24
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800207c:	2300      	movs	r3, #0
 800207e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002080:	2300      	movs	r3, #0
 8002082:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800208c:	2b00      	cmp	r3, #0
 800208e:	d031      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002094:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002098:	d01a      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800209a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800209e:	d814      	bhi.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d009      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80020a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020a8:	d10f      	bne.n	80020ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80020aa:	4b5d      	ldr	r3, [pc, #372]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	4a5c      	ldr	r2, [pc, #368]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020b6:	e00c      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3304      	adds	r3, #4
 80020bc:	2100      	movs	r1, #0
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 fa44 	bl	800254c <RCCEx_PLLSAI1_Config>
 80020c4:	4603      	mov	r3, r0
 80020c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020c8:	e003      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	74fb      	strb	r3, [r7, #19]
      break;
 80020ce:	e000      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80020d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80020d2:	7cfb      	ldrb	r3, [r7, #19]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10b      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d8:	4b51      	ldr	r3, [pc, #324]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	494e      	ldr	r1, [pc, #312]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ee:	e001      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 809e 	beq.w	800223e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002106:	4b46      	ldr	r3, [pc, #280]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002112:	2301      	movs	r3, #1
 8002114:	e000      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002116:	2300      	movs	r3, #0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d00d      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800211c:	4b40      	ldr	r3, [pc, #256]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002120:	4a3f      	ldr	r2, [pc, #252]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002126:	6593      	str	r3, [r2, #88]	; 0x58
 8002128:	4b3d      	ldr	r3, [pc, #244]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002134:	2301      	movs	r3, #1
 8002136:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002138:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a39      	ldr	r2, [pc, #228]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800213e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002144:	f7fe fe52 	bl	8000dec <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800214a:	e009      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800214c:	f7fe fe4e 	bl	8000dec <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d902      	bls.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	74fb      	strb	r3, [r7, #19]
        break;
 800215e:	e005      	b.n	800216c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002160:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002168:	2b00      	cmp	r3, #0
 800216a:	d0ef      	beq.n	800214c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800216c:	7cfb      	ldrb	r3, [r7, #19]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d15a      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002172:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800217c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d01e      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	429a      	cmp	r2, r3
 800218c:	d019      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002198:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800219c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a0:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021aa:	4b1d      	ldr	r3, [pc, #116]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b0:	4a1b      	ldr	r2, [pc, #108]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021ba:	4a19      	ldr	r2, [pc, #100]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d016      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fe0e 	bl	8000dec <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021d2:	e00b      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d4:	f7fe fe0a 	bl	8000dec <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d902      	bls.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	74fb      	strb	r3, [r7, #19]
            break;
 80021ea:	e006      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d0ec      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10b      	bne.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002200:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800220e:	4904      	ldr	r1, [pc, #16]	; (8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002216:	e009      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002218:	7cfb      	ldrb	r3, [r7, #19]
 800221a:	74bb      	strb	r3, [r7, #18]
 800221c:	e006      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800221e:	bf00      	nop
 8002220:	40021000 	.word	0x40021000
 8002224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800222c:	7c7b      	ldrb	r3, [r7, #17]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d105      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b9e      	ldr	r3, [pc, #632]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	4a9d      	ldr	r2, [pc, #628]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800224a:	4b98      	ldr	r3, [pc, #608]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800224c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002250:	f023 0203 	bic.w	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4994      	ldr	r1, [pc, #592]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800225a:	4313      	orrs	r3, r2
 800225c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00a      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800226c:	4b8f      	ldr	r3, [pc, #572]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800226e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002272:	f023 020c 	bic.w	r2, r3, #12
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	498c      	ldr	r1, [pc, #560]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800227c:	4313      	orrs	r3, r2
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800228e:	4b87      	ldr	r3, [pc, #540]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800229c:	4983      	ldr	r1, [pc, #524]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022b0:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022be:	497b      	ldr	r1, [pc, #492]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0320 	and.w	r3, r3, #32
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d2:	4b76      	ldr	r3, [pc, #472]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	4972      	ldr	r1, [pc, #456]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	496a      	ldr	r1, [pc, #424]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002316:	4b65      	ldr	r3, [pc, #404]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002324:	4961      	ldr	r1, [pc, #388]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002338:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002346:	4959      	ldr	r1, [pc, #356]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800235a:	4b54      	ldr	r3, [pc, #336]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002368:	4950      	ldr	r1, [pc, #320]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800237c:	4b4b      	ldr	r3, [pc, #300]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	4948      	ldr	r1, [pc, #288]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800239e:	4b43      	ldr	r3, [pc, #268]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023a4:	f023 0203 	bic.w	r2, r3, #3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	493f      	ldr	r1, [pc, #252]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d028      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023c0:	4b3a      	ldr	r3, [pc, #232]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	4937      	ldr	r1, [pc, #220]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023de:	d106      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023e0:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4a31      	ldr	r2, [pc, #196]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ea:	60d3      	str	r3, [r2, #12]
 80023ec:	e011      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023f6:	d10c      	bne.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	2101      	movs	r1, #1
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f8a4 	bl	800254c <RCCEx_PLLSAI1_Config>
 8002404:	4603      	mov	r3, r0
 8002406:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002408:	7cfb      	ldrb	r3, [r7, #19]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 800240e:	7cfb      	ldrb	r3, [r7, #19]
 8002410:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d028      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800241e:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002424:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	491f      	ldr	r1, [pc, #124]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800242e:	4313      	orrs	r3, r2
 8002430:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002438:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800243c:	d106      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002444:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002448:	60d3      	str	r3, [r2, #12]
 800244a:	e011      	b.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002454:	d10c      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3304      	adds	r3, #4
 800245a:	2101      	movs	r1, #1
 800245c:	4618      	mov	r0, r3
 800245e:	f000 f875 	bl	800254c <RCCEx_PLLSAI1_Config>
 8002462:	4603      	mov	r3, r0
 8002464:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d02b      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	4908      	ldr	r1, [pc, #32]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800249a:	d109      	bne.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	4a02      	ldr	r2, [pc, #8]	; (80024ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80024a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024a6:	60d3      	str	r3, [r2, #12]
 80024a8:	e014      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024b8:	d10c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3304      	adds	r3, #4
 80024be:	2101      	movs	r1, #1
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 f843 	bl	800254c <RCCEx_PLLSAI1_Config>
 80024c6:	4603      	mov	r3, r0
 80024c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024ca:	7cfb      	ldrb	r3, [r7, #19]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80024d0:	7cfb      	ldrb	r3, [r7, #19]
 80024d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d01c      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ee:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024fe:	d10c      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3304      	adds	r3, #4
 8002504:	2102      	movs	r1, #2
 8002506:	4618      	mov	r0, r3
 8002508:	f000 f820 	bl	800254c <RCCEx_PLLSAI1_Config>
 800250c:	4603      	mov	r3, r0
 800250e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002516:	7cfb      	ldrb	r3, [r7, #19]
 8002518:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002526:	4b08      	ldr	r3, [pc, #32]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002534:	4904      	ldr	r1, [pc, #16]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800253c:	7cbb      	ldrb	r3, [r7, #18]
}
 800253e:	4618      	mov	r0, r3
 8002540:	3718      	adds	r7, #24
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000

0800254c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800255a:	4b74      	ldr	r3, [pc, #464]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d018      	beq.n	8002598 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002566:	4b71      	ldr	r3, [pc, #452]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f003 0203 	and.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d10d      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
       ||
 800257a:	2b00      	cmp	r3, #0
 800257c:	d009      	beq.n	8002592 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800257e:	4b6b      	ldr	r3, [pc, #428]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	091b      	lsrs	r3, r3, #4
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	1c5a      	adds	r2, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	685b      	ldr	r3, [r3, #4]
       ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d047      	beq.n	8002622 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e044      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d018      	beq.n	80025d2 <RCCEx_PLLSAI1_Config+0x86>
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d825      	bhi.n	80025f0 <RCCEx_PLLSAI1_Config+0xa4>
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d002      	beq.n	80025ae <RCCEx_PLLSAI1_Config+0x62>
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d009      	beq.n	80025c0 <RCCEx_PLLSAI1_Config+0x74>
 80025ac:	e020      	b.n	80025f0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d11d      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025be:	e01a      	b.n	80025f6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c0:	4b5a      	ldr	r3, [pc, #360]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d116      	bne.n	80025fa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d0:	e013      	b.n	80025fa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025d2:	4b56      	ldr	r3, [pc, #344]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10f      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025de:	4b53      	ldr	r3, [pc, #332]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025ee:	e006      	b.n	80025fe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      break;
 80025f4:	e004      	b.n	8002600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025f6:	bf00      	nop
 80025f8:	e002      	b.n	8002600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fa:	bf00      	nop
 80025fc:	e000      	b.n	8002600 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80025fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002600:	7bfb      	ldrb	r3, [r7, #15]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002606:	4b49      	ldr	r3, [pc, #292]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	3b01      	subs	r3, #1
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	430b      	orrs	r3, r1
 800261c:	4943      	ldr	r1, [pc, #268]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 800261e:	4313      	orrs	r3, r2
 8002620:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d17c      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002628:	4b40      	ldr	r3, [pc, #256]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a3f      	ldr	r2, [pc, #252]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 800262e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002634:	f7fe fbda 	bl	8000dec <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800263a:	e009      	b.n	8002650 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800263c:	f7fe fbd6 	bl	8000dec <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d902      	bls.n	8002650 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	73fb      	strb	r3, [r7, #15]
        break;
 800264e:	e005      	b.n	800265c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002650:	4b36      	ldr	r3, [pc, #216]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1ef      	bne.n	800263c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800265c:	7bfb      	ldrb	r3, [r7, #15]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d15f      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d110      	bne.n	800268a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002670:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	6892      	ldr	r2, [r2, #8]
 8002678:	0211      	lsls	r1, r2, #8
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	06d2      	lsls	r2, r2, #27
 8002680:	430a      	orrs	r2, r1
 8002682:	492a      	ldr	r1, [pc, #168]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	4313      	orrs	r3, r2
 8002686:	610b      	str	r3, [r1, #16]
 8002688:	e027      	b.n	80026da <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d112      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002690:	4b26      	ldr	r3, [pc, #152]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002698:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6892      	ldr	r2, [r2, #8]
 80026a0:	0211      	lsls	r1, r2, #8
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6912      	ldr	r2, [r2, #16]
 80026a6:	0852      	lsrs	r2, r2, #1
 80026a8:	3a01      	subs	r2, #1
 80026aa:	0552      	lsls	r2, r2, #21
 80026ac:	430a      	orrs	r2, r1
 80026ae:	491f      	ldr	r1, [pc, #124]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	610b      	str	r3, [r1, #16]
 80026b4:	e011      	b.n	80026da <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026b6:	4b1d      	ldr	r3, [pc, #116]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6892      	ldr	r2, [r2, #8]
 80026c6:	0211      	lsls	r1, r2, #8
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6952      	ldr	r2, [r2, #20]
 80026cc:	0852      	lsrs	r2, r2, #1
 80026ce:	3a01      	subs	r2, #1
 80026d0:	0652      	lsls	r2, r2, #25
 80026d2:	430a      	orrs	r2, r1
 80026d4:	4915      	ldr	r1, [pc, #84]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80026da:	4b14      	ldr	r3, [pc, #80]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a13      	ldr	r2, [pc, #76]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80026e4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e6:	f7fe fb81 	bl	8000dec <HAL_GetTick>
 80026ea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80026ec:	e009      	b.n	8002702 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026ee:	f7fe fb7d 	bl	8000dec <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d902      	bls.n	8002702 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	73fb      	strb	r3, [r7, #15]
          break;
 8002700:	e005      	b.n	800270e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0ef      	beq.n	80026ee <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d106      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4903      	ldr	r1, [pc, #12]	; (800272c <RCCEx_PLLSAI1_Config+0x1e0>)
 800271e:	4313      	orrs	r3, r2
 8002720:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002722:	7bfb      	ldrb	r3, [r7, #15]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000

08002730 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e095      	b.n	800286e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	2b00      	cmp	r3, #0
 8002748:	d108      	bne.n	800275c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002752:	d009      	beq.n	8002768 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	61da      	str	r2, [r3, #28]
 800275a:	e005      	b.n	8002768 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fe f988 	bl	8000a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2202      	movs	r2, #2
 800278c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800279e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027a8:	d902      	bls.n	80027b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027aa:	2300      	movs	r3, #0
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	e002      	b.n	80027b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80027be:	d007      	beq.n	80027d0 <HAL_SPI_Init+0xa0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80027c8:	d002      	beq.n	80027d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	431a      	orrs	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027fe:	431a      	orrs	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69db      	ldr	r3, [r3, #28]
 8002804:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002808:	431a      	orrs	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	ea42 0103 	orr.w	r1, r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	0c1b      	lsrs	r3, r3, #16
 800282c:	f003 0204 	and.w	r2, r3, #4
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	f003 0310 	and.w	r3, r3, #16
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800284c:	ea42 0103 	orr.w	r1, r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b082      	sub	sp, #8
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d101      	bne.n	8002888 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e040      	b.n	800290a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800288c:	2b00      	cmp	r3, #0
 800288e:	d106      	bne.n	800289e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7fe f93f 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2224      	movs	r2, #36	; 0x24
 80028a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f8c1 	bl	8002a3c <UART_SetConfig>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e022      	b.n	800290a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d002      	beq.n	80028d2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f000 fb3b 	bl	8002f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f042 0201 	orr.w	r2, r2, #1
 8002900:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 fbc2 	bl	800308c <UART_CheckIdleState>
 8002908:	4603      	mov	r3, r0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b08a      	sub	sp, #40	; 0x28
 8002916:	af02      	add	r7, sp, #8
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	603b      	str	r3, [r7, #0]
 800291e:	4613      	mov	r3, r2
 8002920:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002926:	2b20      	cmp	r3, #32
 8002928:	f040 8082 	bne.w	8002a30 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d002      	beq.n	8002938 <HAL_UART_Transmit+0x26>
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e07a      	b.n	8002a32 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_UART_Transmit+0x38>
 8002946:	2302      	movs	r3, #2
 8002948:	e073      	b.n	8002a32 <HAL_UART_Transmit+0x120>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2221      	movs	r2, #33	; 0x21
 800295e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002960:	f7fe fa44 	bl	8000dec <HAL_GetTick>
 8002964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	88fa      	ldrh	r2, [r7, #6]
 800296a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	88fa      	ldrh	r2, [r7, #6]
 8002972:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800297e:	d108      	bne.n	8002992 <HAL_UART_Transmit+0x80>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d104      	bne.n	8002992 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	61bb      	str	r3, [r7, #24]
 8002990:	e003      	b.n	800299a <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029a2:	e02d      	b.n	8002a00 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2200      	movs	r2, #0
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fbb5 	bl	800311e <UART_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e039      	b.n	8002a32 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10b      	bne.n	80029dc <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029d0:	b292      	uxth	r2, r2
 80029d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	3302      	adds	r3, #2
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	e008      	b.n	80029ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	b292      	uxth	r2, r2
 80029e6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	3301      	adds	r3, #1
 80029ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1cb      	bne.n	80029a4 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2140      	movs	r1, #64	; 0x40
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fb81 	bl	800311e <UART_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e005      	b.n	8002a32 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2220      	movs	r2, #32
 8002a2a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e000      	b.n	8002a32 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a30:	2302      	movs	r3, #2
  }
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3720      	adds	r7, #32
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
	...

08002a3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a40:	b08a      	sub	sp, #40	; 0x28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689a      	ldr	r2, [r3, #8]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <UART_SetConfig+0x2c4>)
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	6812      	ldr	r2, [r2, #0]
 8002a72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a74:	430b      	orrs	r3, r1
 8002a76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a9a      	ldr	r2, [pc, #616]	; (8002d04 <UART_SetConfig+0x2c8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d004      	beq.n	8002aa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a91      	ldr	r2, [pc, #580]	; (8002d08 <UART_SetConfig+0x2cc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d126      	bne.n	8002b14 <UART_SetConfig+0xd8>
 8002ac6:	4b91      	ldr	r3, [pc, #580]	; (8002d0c <UART_SetConfig+0x2d0>)
 8002ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b03      	cmp	r3, #3
 8002ad2:	d81b      	bhi.n	8002b0c <UART_SetConfig+0xd0>
 8002ad4:	a201      	add	r2, pc, #4	; (adr r2, 8002adc <UART_SetConfig+0xa0>)
 8002ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ada:	bf00      	nop
 8002adc:	08002aed 	.word	0x08002aed
 8002ae0:	08002afd 	.word	0x08002afd
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002b05 	.word	0x08002b05
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002af2:	e0d6      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002af4:	2302      	movs	r3, #2
 8002af6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002afa:	e0d2      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002afc:	2304      	movs	r3, #4
 8002afe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b02:	e0ce      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b04:	2308      	movs	r3, #8
 8002b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b0a:	e0ca      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b0c:	2310      	movs	r3, #16
 8002b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b12:	e0c6      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7d      	ldr	r2, [pc, #500]	; (8002d10 <UART_SetConfig+0x2d4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d138      	bne.n	8002b90 <UART_SetConfig+0x154>
 8002b1e:	4b7b      	ldr	r3, [pc, #492]	; (8002d0c <UART_SetConfig+0x2d0>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f003 030c 	and.w	r3, r3, #12
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d82d      	bhi.n	8002b88 <UART_SetConfig+0x14c>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <UART_SetConfig+0xf8>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b89 	.word	0x08002b89
 8002b40:	08002b89 	.word	0x08002b89
 8002b44:	08002b79 	.word	0x08002b79
 8002b48:	08002b89 	.word	0x08002b89
 8002b4c:	08002b89 	.word	0x08002b89
 8002b50:	08002b89 	.word	0x08002b89
 8002b54:	08002b71 	.word	0x08002b71
 8002b58:	08002b89 	.word	0x08002b89
 8002b5c:	08002b89 	.word	0x08002b89
 8002b60:	08002b89 	.word	0x08002b89
 8002b64:	08002b81 	.word	0x08002b81
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6e:	e098      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b70:	2302      	movs	r3, #2
 8002b72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b76:	e094      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b78:	2304      	movs	r3, #4
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b7e:	e090      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b80:	2308      	movs	r3, #8
 8002b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b86:	e08c      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b8e:	e088      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a5f      	ldr	r2, [pc, #380]	; (8002d14 <UART_SetConfig+0x2d8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d125      	bne.n	8002be6 <UART_SetConfig+0x1aa>
 8002b9a:	4b5c      	ldr	r3, [pc, #368]	; (8002d0c <UART_SetConfig+0x2d0>)
 8002b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002ba4:	2b30      	cmp	r3, #48	; 0x30
 8002ba6:	d016      	beq.n	8002bd6 <UART_SetConfig+0x19a>
 8002ba8:	2b30      	cmp	r3, #48	; 0x30
 8002baa:	d818      	bhi.n	8002bde <UART_SetConfig+0x1a2>
 8002bac:	2b20      	cmp	r3, #32
 8002bae:	d00a      	beq.n	8002bc6 <UART_SetConfig+0x18a>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d814      	bhi.n	8002bde <UART_SetConfig+0x1a2>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <UART_SetConfig+0x182>
 8002bb8:	2b10      	cmp	r3, #16
 8002bba:	d008      	beq.n	8002bce <UART_SetConfig+0x192>
 8002bbc:	e00f      	b.n	8002bde <UART_SetConfig+0x1a2>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bc4:	e06d      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bcc:	e069      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bd4:	e065      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002bdc:	e061      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002bde:	2310      	movs	r3, #16
 8002be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002be4:	e05d      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a4b      	ldr	r2, [pc, #300]	; (8002d18 <UART_SetConfig+0x2dc>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d125      	bne.n	8002c3c <UART_SetConfig+0x200>
 8002bf0:	4b46      	ldr	r3, [pc, #280]	; (8002d0c <UART_SetConfig+0x2d0>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8002bfc:	d016      	beq.n	8002c2c <UART_SetConfig+0x1f0>
 8002bfe:	2bc0      	cmp	r3, #192	; 0xc0
 8002c00:	d818      	bhi.n	8002c34 <UART_SetConfig+0x1f8>
 8002c02:	2b80      	cmp	r3, #128	; 0x80
 8002c04:	d00a      	beq.n	8002c1c <UART_SetConfig+0x1e0>
 8002c06:	2b80      	cmp	r3, #128	; 0x80
 8002c08:	d814      	bhi.n	8002c34 <UART_SetConfig+0x1f8>
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <UART_SetConfig+0x1d8>
 8002c0e:	2b40      	cmp	r3, #64	; 0x40
 8002c10:	d008      	beq.n	8002c24 <UART_SetConfig+0x1e8>
 8002c12:	e00f      	b.n	8002c34 <UART_SetConfig+0x1f8>
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c1a:	e042      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c22:	e03e      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c24:	2304      	movs	r3, #4
 8002c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c2a:	e03a      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c32:	e036      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c34:	2310      	movs	r3, #16
 8002c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c3a:	e032      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a30      	ldr	r2, [pc, #192]	; (8002d04 <UART_SetConfig+0x2c8>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d12a      	bne.n	8002c9c <UART_SetConfig+0x260>
 8002c46:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <UART_SetConfig+0x2d0>)
 8002c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c54:	d01a      	beq.n	8002c8c <UART_SetConfig+0x250>
 8002c56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c5a:	d81b      	bhi.n	8002c94 <UART_SetConfig+0x258>
 8002c5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c60:	d00c      	beq.n	8002c7c <UART_SetConfig+0x240>
 8002c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c66:	d815      	bhi.n	8002c94 <UART_SetConfig+0x258>
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <UART_SetConfig+0x238>
 8002c6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c70:	d008      	beq.n	8002c84 <UART_SetConfig+0x248>
 8002c72:	e00f      	b.n	8002c94 <UART_SetConfig+0x258>
 8002c74:	2300      	movs	r3, #0
 8002c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c7a:	e012      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c82:	e00e      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c84:	2304      	movs	r3, #4
 8002c86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c8a:	e00a      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c8c:	2308      	movs	r3, #8
 8002c8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c92:	e006      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c94:	2310      	movs	r3, #16
 8002c96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c9a:	e002      	b.n	8002ca2 <UART_SetConfig+0x266>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a17      	ldr	r2, [pc, #92]	; (8002d04 <UART_SetConfig+0x2c8>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	f040 808b 	bne.w	8002dc4 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002cae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cb2:	2b08      	cmp	r3, #8
 8002cb4:	d834      	bhi.n	8002d20 <UART_SetConfig+0x2e4>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0x280>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002d21 	.word	0x08002d21
 8002cc4:	08002ce9 	.word	0x08002ce9
 8002cc8:	08002d21 	.word	0x08002d21
 8002ccc:	08002cef 	.word	0x08002cef
 8002cd0:	08002d21 	.word	0x08002d21
 8002cd4:	08002d21 	.word	0x08002d21
 8002cd8:	08002d21 	.word	0x08002d21
 8002cdc:	08002cf7 	.word	0x08002cf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7ff f93c 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002ce4:	61f8      	str	r0, [r7, #28]
        break;
 8002ce6:	e021      	b.n	8002d2c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <UART_SetConfig+0x2e0>)
 8002cea:	61fb      	str	r3, [r7, #28]
        break;
 8002cec:	e01e      	b.n	8002d2c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cee:	f7ff f89d 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8002cf2:	61f8      	str	r0, [r7, #28]
        break;
 8002cf4:	e01a      	b.n	8002d2c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfa:	61fb      	str	r3, [r7, #28]
        break;
 8002cfc:	e016      	b.n	8002d2c <UART_SetConfig+0x2f0>
 8002cfe:	bf00      	nop
 8002d00:	efff69f3 	.word	0xefff69f3
 8002d04:	40008000 	.word	0x40008000
 8002d08:	40013800 	.word	0x40013800
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40004400 	.word	0x40004400
 8002d14:	40004800 	.word	0x40004800
 8002d18:	40004c00 	.word	0x40004c00
 8002d1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002d20:	2300      	movs	r3, #0
 8002d22:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002d2a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f000 80fa 	beq.w	8002f28 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	4413      	add	r3, r2
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d305      	bcc.n	8002d50 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002d4a:	69fa      	ldr	r2, [r7, #28]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d903      	bls.n	8002d58 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002d56:	e0e7      	b.n	8002f28 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	461c      	mov	r4, r3
 8002d5e:	4615      	mov	r5, r2
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	022b      	lsls	r3, r5, #8
 8002d6a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002d6e:	0222      	lsls	r2, r4, #8
 8002d70:	68f9      	ldr	r1, [r7, #12]
 8002d72:	6849      	ldr	r1, [r1, #4]
 8002d74:	0849      	lsrs	r1, r1, #1
 8002d76:	2000      	movs	r0, #0
 8002d78:	4688      	mov	r8, r1
 8002d7a:	4681      	mov	r9, r0
 8002d7c:	eb12 0a08 	adds.w	sl, r2, r8
 8002d80:	eb43 0b09 	adc.w	fp, r3, r9
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d92:	4650      	mov	r0, sl
 8002d94:	4659      	mov	r1, fp
 8002d96:	f7fd fa7b 	bl	8000290 <__aeabi_uldivmod>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4613      	mov	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002da8:	d308      	bcc.n	8002dbc <UART_SetConfig+0x380>
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002db0:	d204      	bcs.n	8002dbc <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	60da      	str	r2, [r3, #12]
 8002dba:	e0b5      	b.n	8002f28 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002dc2:	e0b1      	b.n	8002f28 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d15d      	bne.n	8002e8a <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8002dce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d827      	bhi.n	8002e26 <UART_SetConfig+0x3ea>
 8002dd6:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <UART_SetConfig+0x3a0>)
 8002dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ddc:	08002e01 	.word	0x08002e01
 8002de0:	08002e09 	.word	0x08002e09
 8002de4:	08002e11 	.word	0x08002e11
 8002de8:	08002e27 	.word	0x08002e27
 8002dec:	08002e17 	.word	0x08002e17
 8002df0:	08002e27 	.word	0x08002e27
 8002df4:	08002e27 	.word	0x08002e27
 8002df8:	08002e27 	.word	0x08002e27
 8002dfc:	08002e1f 	.word	0x08002e1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e00:	f7ff f8ac 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002e04:	61f8      	str	r0, [r7, #28]
        break;
 8002e06:	e014      	b.n	8002e32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e08:	f7ff f8be 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 8002e0c:	61f8      	str	r0, [r7, #28]
        break;
 8002e0e:	e010      	b.n	8002e32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e10:	4b4c      	ldr	r3, [pc, #304]	; (8002f44 <UART_SetConfig+0x508>)
 8002e12:	61fb      	str	r3, [r7, #28]
        break;
 8002e14:	e00d      	b.n	8002e32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e16:	f7ff f809 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8002e1a:	61f8      	str	r0, [r7, #28]
        break;
 8002e1c:	e009      	b.n	8002e32 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e22:	61fb      	str	r3, [r7, #28]
        break;
 8002e24:	e005      	b.n	8002e32 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d077      	beq.n	8002f28 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005a      	lsls	r2, r3, #1
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	085b      	lsrs	r3, r3, #1
 8002e42:	441a      	add	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d916      	bls.n	8002e82 <UART_SetConfig+0x446>
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e5a:	d212      	bcs.n	8002e82 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	f023 030f 	bic.w	r3, r3, #15
 8002e64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	085b      	lsrs	r3, r3, #1
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	8afb      	ldrh	r3, [r7, #22]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	8afa      	ldrh	r2, [r7, #22]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	e052      	b.n	8002f28 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e88:	e04e      	b.n	8002f28 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d827      	bhi.n	8002ee2 <UART_SetConfig+0x4a6>
 8002e92:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <UART_SetConfig+0x45c>)
 8002e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e98:	08002ebd 	.word	0x08002ebd
 8002e9c:	08002ec5 	.word	0x08002ec5
 8002ea0:	08002ecd 	.word	0x08002ecd
 8002ea4:	08002ee3 	.word	0x08002ee3
 8002ea8:	08002ed3 	.word	0x08002ed3
 8002eac:	08002ee3 	.word	0x08002ee3
 8002eb0:	08002ee3 	.word	0x08002ee3
 8002eb4:	08002ee3 	.word	0x08002ee3
 8002eb8:	08002edb 	.word	0x08002edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f7ff f84e 	bl	8001f5c <HAL_RCC_GetPCLK1Freq>
 8002ec0:	61f8      	str	r0, [r7, #28]
        break;
 8002ec2:	e014      	b.n	8002eee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ec4:	f7ff f860 	bl	8001f88 <HAL_RCC_GetPCLK2Freq>
 8002ec8:	61f8      	str	r0, [r7, #28]
        break;
 8002eca:	e010      	b.n	8002eee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <UART_SetConfig+0x508>)
 8002ece:	61fb      	str	r3, [r7, #28]
        break;
 8002ed0:	e00d      	b.n	8002eee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed2:	f7fe ffab 	bl	8001e2c <HAL_RCC_GetSysClockFreq>
 8002ed6:	61f8      	str	r0, [r7, #28]
        break;
 8002ed8:	e009      	b.n	8002eee <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	61fb      	str	r3, [r7, #28]
        break;
 8002ee0:	e005      	b.n	8002eee <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002eec:	bf00      	nop
    }

    if (pclk != 0U)
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d019      	beq.n	8002f28 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	085a      	lsrs	r2, r3, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	441a      	add	r2, r3
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	2b0f      	cmp	r3, #15
 8002f0c:	d909      	bls.n	8002f22 <UART_SetConfig+0x4e6>
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f14:	d205      	bcs.n	8002f22 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	b29a      	uxth	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e002      	b.n	8002f28 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3728      	adds	r7, #40	; 0x28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f42:	bf00      	nop
 8002f44:	00f42400 	.word	0x00f42400

08002f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	f003 0310 	and.w	r3, r3, #16
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00a      	beq.n	8002ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00a      	beq.n	800301c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01a      	beq.n	800305e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003046:	d10a      	bne.n	800305e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr

0800308c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800309c:	f7fd fea6 	bl	8000dec <HAL_GetTick>
 80030a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d10e      	bne.n	80030ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f82d 	bl	800311e <UART_WaitOnFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e023      	b.n	8003116 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0304 	and.w	r3, r3, #4
 80030d8:	2b04      	cmp	r3, #4
 80030da:	d10e      	bne.n	80030fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f817 	bl	800311e <UART_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e00d      	b.n	8003116 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2220      	movs	r2, #32
 80030fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800311e:	b580      	push	{r7, lr}
 8003120:	b09c      	sub	sp, #112	; 0x70
 8003122:	af00      	add	r7, sp, #0
 8003124:	60f8      	str	r0, [r7, #12]
 8003126:	60b9      	str	r1, [r7, #8]
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4613      	mov	r3, r2
 800312c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800312e:	e0a5      	b.n	800327c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	f000 80a1 	beq.w	800327c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800313a:	f7fd fe57 	bl	8000dec <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <UART_WaitOnFlagUntilTimeout+0x32>
 800314a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800314c:	2b00      	cmp	r3, #0
 800314e:	d13e      	bne.n	80031ce <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003164:	667b      	str	r3, [r7, #100]	; 0x64
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800316e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003170:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003172:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003174:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003176:	e841 2300 	strex	r3, r2, [r1]
 800317a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800317c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1e6      	bne.n	8003150 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	3308      	adds	r3, #8
 8003188:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003194:	f023 0301 	bic.w	r3, r3, #1
 8003198:	663b      	str	r3, [r7, #96]	; 0x60
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	3308      	adds	r3, #8
 80031a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80031a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e5      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2220      	movs	r2, #32
 80031ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e067      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d04f      	beq.n	800327c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d147      	bne.n	800327c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800320a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	461a      	mov	r2, r3
 8003212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
 8003216:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003218:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800321a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800321c:	e841 2300 	strex	r3, r2, [r1]
 8003220:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1e6      	bne.n	80031f6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3308      	adds	r3, #8
 800322e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	613b      	str	r3, [r7, #16]
   return(result);
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3308      	adds	r3, #8
 8003246:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003248:	623a      	str	r2, [r7, #32]
 800324a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800324c:	69f9      	ldr	r1, [r7, #28]
 800324e:	6a3a      	ldr	r2, [r7, #32]
 8003250:	e841 2300 	strex	r3, r2, [r1]
 8003254:	61bb      	str	r3, [r7, #24]
   return(result);
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1e5      	bne.n	8003228 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2220      	movs	r2, #32
 8003260:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2220      	movs	r2, #32
 800326c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e010      	b.n	800329e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69da      	ldr	r2, [r3, #28]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	4013      	ands	r3, r2
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	bf0c      	ite	eq
 800328c:	2301      	moveq	r3, #1
 800328e:	2300      	movne	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	429a      	cmp	r2, r3
 8003298:	f43f af4a 	beq.w	8003130 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3770      	adds	r7, #112	; 0x70
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80032ac:	4904      	ldr	r1, [pc, #16]	; (80032c0 <MX_FATFS_Init+0x18>)
 80032ae:	4805      	ldr	r0, [pc, #20]	; (80032c4 <MX_FATFS_Init+0x1c>)
 80032b0:	f002 fc48 	bl	8005b44 <FATFS_LinkDriver>
 80032b4:	4603      	mov	r3, r0
 80032b6:	461a      	mov	r2, r3
 80032b8:	4b03      	ldr	r3, [pc, #12]	; (80032c8 <MX_FATFS_Init+0x20>)
 80032ba:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20000294 	.word	0x20000294
 80032c4:	2000000c 	.word	0x2000000c
 80032c8:	20000290 	.word	0x20000290

080032cc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80032d0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80032dc:	b480      	push	{r7}
 80032de:	b083      	sub	sp, #12
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80032e6:	4b06      	ldr	r3, [pc, #24]	; (8003300 <USER_initialize+0x24>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	701a      	strb	r2, [r3, #0]
    return Stat;
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <USER_initialize+0x24>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	20000009 	.word	0x20000009

08003304 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <USER_status+0x24>)
 8003310:	2201      	movs	r2, #1
 8003312:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003314:	4b04      	ldr	r3, [pc, #16]	; (8003328 <USER_status+0x24>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800331a:	4618      	mov	r0, r3
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	20000009 	.word	0x20000009

0800332c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4603      	mov	r3, r0
 800333a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 800333c:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800333e:	4618      	mov	r0, r3
 8003340:	3714      	adds	r7, #20
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	60b9      	str	r1, [r7, #8]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	603b      	str	r3, [r7, #0]
 8003356:	4603      	mov	r3, r0
 8003358:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800335a:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	603a      	str	r2, [r7, #0]
 8003372:	71fb      	strb	r3, [r7, #7]
 8003374:	460b      	mov	r3, r1
 8003376:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
    return res;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800337e:	4618      	mov	r0, r3
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
	...

0800338c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	4603      	mov	r3, r0
 8003394:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003396:	79fb      	ldrb	r3, [r7, #7]
 8003398:	4a08      	ldr	r2, [pc, #32]	; (80033bc <disk_status+0x30>)
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	79fa      	ldrb	r2, [r7, #7]
 80033a4:	4905      	ldr	r1, [pc, #20]	; (80033bc <disk_status+0x30>)
 80033a6:	440a      	add	r2, r1
 80033a8:	7a12      	ldrb	r2, [r2, #8]
 80033aa:	4610      	mov	r0, r2
 80033ac:	4798      	blx	r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200002c0 	.word	0x200002c0

080033c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	4603      	mov	r3, r0
 80033c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80033ca:	2300      	movs	r3, #0
 80033cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80033ce:	79fb      	ldrb	r3, [r7, #7]
 80033d0:	4a0d      	ldr	r2, [pc, #52]	; (8003408 <disk_initialize+0x48>)
 80033d2:	5cd3      	ldrb	r3, [r2, r3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d111      	bne.n	80033fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80033d8:	79fb      	ldrb	r3, [r7, #7]
 80033da:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <disk_initialize+0x48>)
 80033dc:	2101      	movs	r1, #1
 80033de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033e0:	79fb      	ldrb	r3, [r7, #7]
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <disk_initialize+0x48>)
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	4906      	ldr	r1, [pc, #24]	; (8003408 <disk_initialize+0x48>)
 80033f0:	440a      	add	r2, r1
 80033f2:	7a12      	ldrb	r2, [r2, #8]
 80033f4:	4610      	mov	r0, r2
 80033f6:	4798      	blx	r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200002c0 	.word	0x200002c0

0800340c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800340c:	b590      	push	{r4, r7, lr}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	4603      	mov	r3, r0
 800341a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800341c:	7bfb      	ldrb	r3, [r7, #15]
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <disk_read+0x3c>)
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	689c      	ldr	r4, [r3, #8]
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	4a07      	ldr	r2, [pc, #28]	; (8003448 <disk_read+0x3c>)
 800342c:	4413      	add	r3, r2
 800342e:	7a18      	ldrb	r0, [r3, #8]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	47a0      	blx	r4
 8003438:	4603      	mov	r3, r0
 800343a:	75fb      	strb	r3, [r7, #23]
  return res;
 800343c:	7dfb      	ldrb	r3, [r7, #23]
}
 800343e:	4618      	mov	r0, r3
 8003440:	371c      	adds	r7, #28
 8003442:	46bd      	mov	sp, r7
 8003444:	bd90      	pop	{r4, r7, pc}
 8003446:	bf00      	nop
 8003448:	200002c0 	.word	0x200002c0

0800344c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800344c:	b590      	push	{r4, r7, lr}
 800344e:	b087      	sub	sp, #28
 8003450:	af00      	add	r7, sp, #0
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	4603      	mov	r3, r0
 800345a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <disk_write+0x3c>)
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	68dc      	ldr	r4, [r3, #12]
 8003468:	7bfb      	ldrb	r3, [r7, #15]
 800346a:	4a07      	ldr	r2, [pc, #28]	; (8003488 <disk_write+0x3c>)
 800346c:	4413      	add	r3, r2
 800346e:	7a18      	ldrb	r0, [r3, #8]
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	47a0      	blx	r4
 8003478:	4603      	mov	r3, r0
 800347a:	75fb      	strb	r3, [r7, #23]
  return res;
 800347c:	7dfb      	ldrb	r3, [r7, #23]
}
 800347e:	4618      	mov	r0, r3
 8003480:	371c      	adds	r7, #28
 8003482:	46bd      	mov	sp, r7
 8003484:	bd90      	pop	{r4, r7, pc}
 8003486:	bf00      	nop
 8003488:	200002c0 	.word	0x200002c0

0800348c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	603a      	str	r2, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
 8003498:	460b      	mov	r3, r1
 800349a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <disk_ioctl+0x38>)
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4413      	add	r3, r2
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	79fa      	ldrb	r2, [r7, #7]
 80034aa:	4906      	ldr	r1, [pc, #24]	; (80034c4 <disk_ioctl+0x38>)
 80034ac:	440a      	add	r2, r1
 80034ae:	7a10      	ldrb	r0, [r2, #8]
 80034b0:	79b9      	ldrb	r1, [r7, #6]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	4798      	blx	r3
 80034b6:	4603      	mov	r3, r0
 80034b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80034ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3710      	adds	r7, #16
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	200002c0 	.word	0x200002c0

080034c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3301      	adds	r3, #1
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	021b      	lsls	r3, r3, #8
 80034dc:	b21a      	sxth	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	b21b      	sxth	r3, r3
 80034e4:	4313      	orrs	r3, r2
 80034e6:	b21b      	sxth	r3, r3
 80034e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80034ea:	89fb      	ldrh	r3, [r7, #14]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80034f8:	b480      	push	{r7}
 80034fa:	b085      	sub	sp, #20
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3303      	adds	r3, #3
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	3202      	adds	r2, #2
 8003510:	7812      	ldrb	r2, [r2, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	021b      	lsls	r3, r3, #8
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	3201      	adds	r2, #1
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	4313      	orrs	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	7812      	ldrb	r2, [r2, #0]
 800352c:	4313      	orrs	r3, r2
 800352e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003530:	68fb      	ldr	r3, [r7, #12]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	887a      	ldrh	r2, [r7, #2]
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	887b      	ldrh	r3, [r7, #2]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	887a      	ldrh	r2, [r7, #2]
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	701a      	strb	r2, [r3, #0]
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b2d2      	uxtb	r2, r2
 8003588:	701a      	strb	r2, [r3, #0]
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	607a      	str	r2, [r7, #4]
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	1c5a      	adds	r2, r3, #1
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	b2d2      	uxtb	r2, r2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	0a1b      	lsrs	r3, r3, #8
 80035b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	607a      	str	r2, [r7, #4]
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	b2d2      	uxtb	r2, r2
 80035be:	701a      	strb	r2, [r3, #0]
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00d      	beq.n	8003602 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	1c53      	adds	r3, r2, #1
 80035ea:	613b      	str	r3, [r7, #16]
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	1c59      	adds	r1, r3, #1
 80035f0:	6179      	str	r1, [r7, #20]
 80035f2:	7812      	ldrb	r2, [r2, #0]
 80035f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f1      	bne.n	80035e6 <mem_cpy+0x1a>
	}
}
 8003602:	bf00      	nop
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800360e:	b480      	push	{r7}
 8003610:	b087      	sub	sp, #28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	617a      	str	r2, [r7, #20]
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3b01      	subs	r3, #1
 800362e:	607b      	str	r3, [r7, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f3      	bne.n	800361e <mem_set+0x10>
}
 8003636:	bf00      	nop
 8003638:	bf00      	nop
 800363a:	371c      	adds	r7, #28
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003644:	b480      	push	{r7}
 8003646:	b089      	sub	sp, #36	; 0x24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	61fb      	str	r3, [r7, #28]
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	1c5a      	adds	r2, r3, #1
 8003660:	61fa      	str	r2, [r7, #28]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	61ba      	str	r2, [r7, #24]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	1acb      	subs	r3, r1, r3
 8003670:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3b01      	subs	r3, #1
 8003676:	607b      	str	r3, [r7, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <mem_cmp+0x40>
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0eb      	beq.n	800365c <mem_cmp+0x18>

	return r;
 8003684:	697b      	ldr	r3, [r7, #20]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3724      	adds	r7, #36	; 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800369c:	e002      	b.n	80036a4 <chk_chr+0x12>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	3301      	adds	r3, #1
 80036a2:	607b      	str	r3, [r7, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d005      	beq.n	80036b8 <chk_chr+0x26>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d1f2      	bne.n	800369e <chk_chr+0xc>
	return *str;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	781b      	ldrb	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036d2:	2300      	movs	r3, #0
 80036d4:	60bb      	str	r3, [r7, #8]
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e029      	b.n	8003730 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80036dc:	4a27      	ldr	r2, [pc, #156]	; (800377c <chk_lock+0xb4>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4413      	add	r3, r2
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d01d      	beq.n	8003726 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036ea:	4a24      	ldr	r2, [pc, #144]	; (800377c <chk_lock+0xb4>)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	4413      	add	r3, r2
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d116      	bne.n	800372a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <chk_lock+0xb4>)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	4413      	add	r3, r2
 8003704:	3304      	adds	r3, #4
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800370c:	429a      	cmp	r2, r3
 800370e:	d10c      	bne.n	800372a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <chk_lock+0xb4>)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	011b      	lsls	r3, r3, #4
 8003716:	4413      	add	r3, r2
 8003718:	3308      	adds	r3, #8
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003720:	429a      	cmp	r2, r3
 8003722:	d102      	bne.n	800372a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003724:	e007      	b.n	8003736 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003726:	2301      	movs	r3, #1
 8003728:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3301      	adds	r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d9d2      	bls.n	80036dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d109      	bne.n	8003750 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d102      	bne.n	8003748 <chk_lock+0x80>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b02      	cmp	r3, #2
 8003746:	d101      	bne.n	800374c <chk_lock+0x84>
 8003748:	2300      	movs	r3, #0
 800374a:	e010      	b.n	800376e <chk_lock+0xa6>
 800374c:	2312      	movs	r3, #18
 800374e:	e00e      	b.n	800376e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d108      	bne.n	8003768 <chk_lock+0xa0>
 8003756:	4a09      	ldr	r2, [pc, #36]	; (800377c <chk_lock+0xb4>)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	4413      	add	r3, r2
 800375e:	330c      	adds	r3, #12
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003766:	d101      	bne.n	800376c <chk_lock+0xa4>
 8003768:	2310      	movs	r3, #16
 800376a:	e000      	b.n	800376e <chk_lock+0xa6>
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200002a0 	.word	0x200002a0

08003780 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003786:	2300      	movs	r3, #0
 8003788:	607b      	str	r3, [r7, #4]
 800378a:	e002      	b.n	8003792 <enq_lock+0x12>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3301      	adds	r3, #1
 8003790:	607b      	str	r3, [r7, #4]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d806      	bhi.n	80037a6 <enq_lock+0x26>
 8003798:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <enq_lock+0x40>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	4413      	add	r3, r2
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f2      	bne.n	800378c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	bf14      	ite	ne
 80037ac:	2301      	movne	r3, #1
 80037ae:	2300      	moveq	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	200002a0 	.word	0x200002a0

080037c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]
 80037d2:	e01f      	b.n	8003814 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80037d4:	4a41      	ldr	r2, [pc, #260]	; (80038dc <inc_lock+0x118>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	4413      	add	r3, r2
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d113      	bne.n	800380e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80037e6:	4a3d      	ldr	r2, [pc, #244]	; (80038dc <inc_lock+0x118>)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	4413      	add	r3, r2
 80037ee:	3304      	adds	r3, #4
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d109      	bne.n	800380e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80037fa:	4a38      	ldr	r2, [pc, #224]	; (80038dc <inc_lock+0x118>)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	4413      	add	r3, r2
 8003802:	3308      	adds	r3, #8
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800380a:	429a      	cmp	r2, r3
 800380c:	d006      	beq.n	800381c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	3301      	adds	r3, #1
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d9dc      	bls.n	80037d4 <inc_lock+0x10>
 800381a:	e000      	b.n	800381e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800381c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2b02      	cmp	r3, #2
 8003822:	d132      	bne.n	800388a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	e002      	b.n	8003830 <inc_lock+0x6c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	3301      	adds	r3, #1
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d806      	bhi.n	8003844 <inc_lock+0x80>
 8003836:	4a29      	ldr	r2, [pc, #164]	; (80038dc <inc_lock+0x118>)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	011b      	lsls	r3, r3, #4
 800383c:	4413      	add	r3, r2
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1f2      	bne.n	800382a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d101      	bne.n	800384e <inc_lock+0x8a>
 800384a:	2300      	movs	r3, #0
 800384c:	e040      	b.n	80038d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	4922      	ldr	r1, [pc, #136]	; (80038dc <inc_lock+0x118>)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	440b      	add	r3, r1
 800385a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	491e      	ldr	r1, [pc, #120]	; (80038dc <inc_lock+0x118>)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	440b      	add	r3, r1
 8003868:	3304      	adds	r3, #4
 800386a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	695a      	ldr	r2, [r3, #20]
 8003870:	491a      	ldr	r1, [pc, #104]	; (80038dc <inc_lock+0x118>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	440b      	add	r3, r1
 8003878:	3308      	adds	r3, #8
 800387a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800387c:	4a17      	ldr	r2, [pc, #92]	; (80038dc <inc_lock+0x118>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4413      	add	r3, r2
 8003884:	330c      	adds	r3, #12
 8003886:	2200      	movs	r2, #0
 8003888:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <inc_lock+0xe0>
 8003890:	4a12      	ldr	r2, [pc, #72]	; (80038dc <inc_lock+0x118>)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	4413      	add	r3, r2
 8003898:	330c      	adds	r3, #12
 800389a:	881b      	ldrh	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d001      	beq.n	80038a4 <inc_lock+0xe0>
 80038a0:	2300      	movs	r3, #0
 80038a2:	e015      	b.n	80038d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d108      	bne.n	80038bc <inc_lock+0xf8>
 80038aa:	4a0c      	ldr	r2, [pc, #48]	; (80038dc <inc_lock+0x118>)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	4413      	add	r3, r2
 80038b2:	330c      	adds	r3, #12
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	3301      	adds	r3, #1
 80038b8:	b29a      	uxth	r2, r3
 80038ba:	e001      	b.n	80038c0 <inc_lock+0xfc>
 80038bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038c0:	4906      	ldr	r1, [pc, #24]	; (80038dc <inc_lock+0x118>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	440b      	add	r3, r1
 80038c8:	330c      	adds	r3, #12
 80038ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	3301      	adds	r3, #1
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3714      	adds	r7, #20
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr
 80038dc:	200002a0 	.word	0x200002a0

080038e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b085      	sub	sp, #20
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d825      	bhi.n	8003940 <dec_lock+0x60>
		n = Files[i].ctr;
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <dec_lock+0x74>)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	330c      	adds	r3, #12
 80038fe:	881b      	ldrh	r3, [r3, #0]
 8003900:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003902:	89fb      	ldrh	r3, [r7, #14]
 8003904:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003908:	d101      	bne.n	800390e <dec_lock+0x2e>
 800390a:	2300      	movs	r3, #0
 800390c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800390e:	89fb      	ldrh	r3, [r7, #14]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <dec_lock+0x3a>
 8003914:	89fb      	ldrh	r3, [r7, #14]
 8003916:	3b01      	subs	r3, #1
 8003918:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800391a:	4a0e      	ldr	r2, [pc, #56]	; (8003954 <dec_lock+0x74>)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	011b      	lsls	r3, r3, #4
 8003920:	4413      	add	r3, r2
 8003922:	330c      	adds	r3, #12
 8003924:	89fa      	ldrh	r2, [r7, #14]
 8003926:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003928:	89fb      	ldrh	r3, [r7, #14]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d105      	bne.n	800393a <dec_lock+0x5a>
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <dec_lock+0x74>)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	011b      	lsls	r3, r3, #4
 8003934:	4413      	add	r3, r2
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	737b      	strb	r3, [r7, #13]
 800393e:	e001      	b.n	8003944 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003940:	2302      	movs	r3, #2
 8003942:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003944:	7b7b      	ldrb	r3, [r7, #13]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	200002a0 	.word	0x200002a0

08003958 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003960:	2300      	movs	r3, #0
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	e010      	b.n	8003988 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003966:	4a0d      	ldr	r2, [pc, #52]	; (800399c <clear_lock+0x44>)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	4413      	add	r3, r2
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	429a      	cmp	r2, r3
 8003974:	d105      	bne.n	8003982 <clear_lock+0x2a>
 8003976:	4a09      	ldr	r2, [pc, #36]	; (800399c <clear_lock+0x44>)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	4413      	add	r3, r2
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3301      	adds	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d9eb      	bls.n	8003966 <clear_lock+0xe>
	}
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	200002a0 	.word	0x200002a0

080039a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	78db      	ldrb	r3, [r3, #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d034      	beq.n	8003a1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7858      	ldrb	r0, [r3, #1]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039c4:	2301      	movs	r3, #1
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	f7ff fd40 	bl	800344c <disk_write>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	e022      	b.n	8003a1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	1ad2      	subs	r2, r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d217      	bcs.n	8003a1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	613b      	str	r3, [r7, #16]
 80039f4:	e010      	b.n	8003a18 <sync_window+0x78>
					wsect += fs->fsize;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4413      	add	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	7858      	ldrb	r0, [r3, #1]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	697a      	ldr	r2, [r7, #20]
 8003a0e:	f7ff fd1d 	bl	800344c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	3b01      	subs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d8eb      	bhi.n	80039f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3a:	683a      	ldr	r2, [r7, #0]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d01b      	beq.n	8003a78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f7ff ffad 	bl	80039a0 <sync_window>
 8003a46:	4603      	mov	r3, r0
 8003a48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d113      	bne.n	8003a78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	7858      	ldrb	r0, [r3, #1]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	f7ff fcd5 	bl	800340c <disk_read>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d004      	beq.n	8003a72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a68:	f04f 33ff 	mov.w	r3, #4294967295
 8003a6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff ff87 	bl	80039a0 <sync_window>
 8003a92:	4603      	mov	r3, r0
 8003a94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a96:	7bfb      	ldrb	r3, [r7, #15]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d158      	bne.n	8003b4e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	2b03      	cmp	r3, #3
 8003aa2:	d148      	bne.n	8003b36 <sync_fs+0xb2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	791b      	ldrb	r3, [r3, #4]
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	d144      	bne.n	8003b36 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3330      	adds	r3, #48	; 0x30
 8003ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fda9 	bl	800360e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3330      	adds	r3, #48	; 0x30
 8003ac0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003ac4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7ff fd38 	bl	800353e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	3330      	adds	r3, #48	; 0x30
 8003ad2:	4921      	ldr	r1, [pc, #132]	; (8003b58 <sync_fs+0xd4>)
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fd4d 	bl	8003574 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3330      	adds	r3, #48	; 0x30
 8003ade:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003ae2:	491e      	ldr	r1, [pc, #120]	; (8003b5c <sync_fs+0xd8>)
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fd45 	bl	8003574 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3330      	adds	r3, #48	; 0x30
 8003aee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	4619      	mov	r1, r3
 8003af8:	4610      	mov	r0, r2
 8003afa:	f7ff fd3b 	bl	8003574 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	3330      	adds	r3, #48	; 0x30
 8003b02:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	4610      	mov	r0, r2
 8003b0e:	f7ff fd31 	bl	8003574 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	7858      	ldrb	r0, [r3, #1]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f7ff fc8e 	bl	800344c <disk_write>
			fs->fsi_flag = 0;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	785b      	ldrb	r3, [r3, #1]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2100      	movs	r1, #0
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fca4 	bl	800348c <disk_ioctl>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <sync_fs+0xca>
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3710      	adds	r7, #16
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	41615252 	.word	0x41615252
 8003b5c:	61417272 	.word	0x61417272

08003b60 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	3b02      	subs	r3, #2
 8003b6e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	3b02      	subs	r3, #2
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d301      	bcc.n	8003b80 <clust2sect+0x20>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	e008      	b.n	8003b92 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	895b      	ldrh	r3, [r3, #10]
 8003b84:	461a      	mov	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	fb03 f202 	mul.w	r2, r3, r2
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	4413      	add	r3, r2
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b086      	sub	sp, #24
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d904      	bls.n	8003bbe <get_fat+0x20>
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	695b      	ldr	r3, [r3, #20]
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d302      	bcc.n	8003bc4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	e08f      	b.n	8003ce4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d062      	beq.n	8003c98 <get_fat+0xfa>
 8003bd2:	2b03      	cmp	r3, #3
 8003bd4:	dc7c      	bgt.n	8003cd0 <get_fat+0x132>
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d002      	beq.n	8003be0 <get_fat+0x42>
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d042      	beq.n	8003c64 <get_fat+0xc6>
 8003bde:	e077      	b.n	8003cd0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6a1a      	ldr	r2, [r3, #32]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0a5b      	lsrs	r3, r3, #9
 8003bf6:	4413      	add	r3, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	6938      	ldr	r0, [r7, #16]
 8003bfc:	f7ff ff14 	bl	8003a28 <move_window>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d167      	bne.n	8003cd6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	1c5a      	adds	r2, r3, #1
 8003c0a:	60fa      	str	r2, [r7, #12]
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4413      	add	r3, r2
 8003c14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c18:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0a5b      	lsrs	r3, r3, #9
 8003c22:	4413      	add	r3, r2
 8003c24:	4619      	mov	r1, r3
 8003c26:	6938      	ldr	r0, [r7, #16]
 8003c28:	f7ff fefe 	bl	8003a28 <move_window>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d153      	bne.n	8003cda <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c40:	021b      	lsls	r3, r3, #8
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <get_fat+0xbc>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	e002      	b.n	8003c60 <get_fat+0xc2>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c60:	617b      	str	r3, [r7, #20]
			break;
 8003c62:	e03f      	b.n	8003ce4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	6a1a      	ldr	r2, [r3, #32]
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	0a1b      	lsrs	r3, r3, #8
 8003c6c:	4413      	add	r3, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6938      	ldr	r0, [r7, #16]
 8003c72:	f7ff fed9 	bl	8003a28 <move_window>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d130      	bne.n	8003cde <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c8a:	4413      	add	r3, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff fc1b 	bl	80034c8 <ld_word>
 8003c92:	4603      	mov	r3, r0
 8003c94:	617b      	str	r3, [r7, #20]
			break;
 8003c96:	e025      	b.n	8003ce4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	4413      	add	r3, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6938      	ldr	r0, [r7, #16]
 8003ca6:	f7ff febf 	bl	8003a28 <move_window>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d118      	bne.n	8003ce2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fc19 	bl	80034f8 <ld_dword>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ccc:	617b      	str	r3, [r7, #20]
			break;
 8003cce:	e009      	b.n	8003ce4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	e006      	b.n	8003ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003ce2:	bf00      	nop
		}
	}

	return val;
 8003ce4:	697b      	ldr	r3, [r7, #20]
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003cee:	b590      	push	{r4, r7, lr}
 8003cf0:	b089      	sub	sp, #36	; 0x24
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	f240 80d2 	bls.w	8003eaa <put_fat+0x1bc>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	68ba      	ldr	r2, [r7, #8]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	f080 80cc 	bcs.w	8003eaa <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	f000 8096 	beq.w	8003e48 <put_fat+0x15a>
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	f300 80cd 	bgt.w	8003ebc <put_fat+0x1ce>
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d002      	beq.n	8003d2c <put_fat+0x3e>
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d06e      	beq.n	8003e08 <put_fat+0x11a>
 8003d2a:	e0c7      	b.n	8003ebc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61bb      	str	r3, [r7, #24]
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	085b      	lsrs	r3, r3, #1
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4413      	add	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1a      	ldr	r2, [r3, #32]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	0a5b      	lsrs	r3, r3, #9
 8003d42:	4413      	add	r3, r2
 8003d44:	4619      	mov	r1, r3
 8003d46:	68f8      	ldr	r0, [r7, #12]
 8003d48:	f7ff fe6e 	bl	8003a28 <move_window>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d50:	7ffb      	ldrb	r3, [r7, #31]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f040 80ab 	bne.w	8003eae <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	1c59      	adds	r1, r3, #1
 8003d62:	61b9      	str	r1, [r7, #24]
 8003d64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d68:	4413      	add	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <put_fat+0xa4>
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	b25b      	sxtb	r3, r3
 8003d7c:	f003 030f 	and.w	r3, r3, #15
 8003d80:	b25a      	sxtb	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	b25b      	sxtb	r3, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	b25b      	sxtb	r3, r3
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	e001      	b.n	8003d96 <put_fat+0xa8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	697a      	ldr	r2, [r7, #20]
 8003d98:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	0a5b      	lsrs	r3, r3, #9
 8003da8:	4413      	add	r3, r2
 8003daa:	4619      	mov	r1, r3
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fe3b 	bl	8003a28 <move_window>
 8003db2:	4603      	mov	r3, r0
 8003db4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003db6:	7ffb      	ldrb	r3, [r7, #31]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d17a      	bne.n	8003eb2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc8:	4413      	add	r3, r2
 8003dca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	f003 0301 	and.w	r3, r3, #1
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <put_fat+0xf0>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	e00e      	b.n	8003dfc <put_fat+0x10e>
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f023 030f 	bic.w	r3, r3, #15
 8003de8:	b25a      	sxtb	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0a1b      	lsrs	r3, r3, #8
 8003dee:	b25b      	sxtb	r3, r3
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	b25b      	sxtb	r3, r3
 8003df6:	4313      	orrs	r3, r2
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2201      	movs	r2, #1
 8003e04:	70da      	strb	r2, [r3, #3]
			break;
 8003e06:	e059      	b.n	8003ebc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	0a1b      	lsrs	r3, r3, #8
 8003e10:	4413      	add	r3, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fe07 	bl	8003a28 <move_window>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e1e:	7ffb      	ldrb	r3, [r7, #31]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d148      	bne.n	8003eb6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003e32:	4413      	add	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	b292      	uxth	r2, r2
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff fb7f 	bl	800353e <st_word>
			fs->wflag = 1;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2201      	movs	r2, #1
 8003e44:	70da      	strb	r2, [r3, #3]
			break;
 8003e46:	e039      	b.n	8003ebc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a1a      	ldr	r2, [r3, #32]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	09db      	lsrs	r3, r3, #7
 8003e50:	4413      	add	r3, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	68f8      	ldr	r0, [r7, #12]
 8003e56:	f7ff fde7 	bl	8003a28 <move_window>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e5e:	7ffb      	ldrb	r3, [r7, #31]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d12a      	bne.n	8003eba <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e78:	4413      	add	r3, r2
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7ff fb3c 	bl	80034f8 <ld_dword>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e86:	4323      	orrs	r3, r4
 8003e88:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e98:	4413      	add	r3, r2
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fb69 	bl	8003574 <st_dword>
			fs->wflag = 1;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	70da      	strb	r2, [r3, #3]
			break;
 8003ea8:	e008      	b.n	8003ebc <put_fat+0x1ce>
		}
	}
 8003eaa:	bf00      	nop
 8003eac:	e006      	b.n	8003ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003eae:	bf00      	nop
 8003eb0:	e004      	b.n	8003ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003eb2:	bf00      	nop
 8003eb4:	e002      	b.n	8003ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003eb6:	bf00      	nop
 8003eb8:	e000      	b.n	8003ebc <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003eba:	bf00      	nop
	return res;
 8003ebc:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3724      	adds	r7, #36	; 0x24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd90      	pop	{r4, r7, pc}

08003ec6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b088      	sub	sp, #32
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d904      	bls.n	8003eec <remove_chain+0x26>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d301      	bcc.n	8003ef0 <remove_chain+0x2a>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e04b      	b.n	8003f88 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8003efa:	6879      	ldr	r1, [r7, #4]
 8003efc:	69b8      	ldr	r0, [r7, #24]
 8003efe:	f7ff fef6 	bl	8003cee <put_fat>
 8003f02:	4603      	mov	r3, r0
 8003f04:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003f06:	7ffb      	ldrb	r3, [r7, #31]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <remove_chain+0x4a>
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
 8003f0e:	e03b      	b.n	8003f88 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003f10:	68b9      	ldr	r1, [r7, #8]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f7ff fe43 	bl	8003b9e <get_fat>
 8003f18:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d031      	beq.n	8003f84 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <remove_chain+0x64>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e02e      	b.n	8003f88 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f30:	d101      	bne.n	8003f36 <remove_chain+0x70>
 8003f32:	2301      	movs	r3, #1
 8003f34:	e028      	b.n	8003f88 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003f36:	2200      	movs	r2, #0
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	69b8      	ldr	r0, [r7, #24]
 8003f3c:	f7ff fed7 	bl	8003cee <put_fat>
 8003f40:	4603      	mov	r3, r0
 8003f42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003f44:	7ffb      	ldrb	r3, [r7, #31]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <remove_chain+0x88>
 8003f4a:	7ffb      	ldrb	r3, [r7, #31]
 8003f4c:	e01c      	b.n	8003f88 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	691a      	ldr	r2, [r3, #16]
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	3b02      	subs	r3, #2
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d20b      	bcs.n	8003f74 <remove_chain+0xae>
			fs->free_clst++;
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	1c5a      	adds	r2, r3, #1
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	791b      	ldrb	r3, [r3, #4]
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3c6      	bcc.n	8003f10 <remove_chain+0x4a>
 8003f82:	e000      	b.n	8003f86 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003f84:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3720      	adds	r7, #32
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b088      	sub	sp, #32
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d10d      	bne.n	8003fc2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d004      	beq.n	8003fbc <create_chain+0x2c>
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d31b      	bcc.n	8003ff4 <create_chain+0x64>
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e018      	b.n	8003ff4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fdea 	bl	8003b9e <get_fat>
 8003fca:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d801      	bhi.n	8003fd6 <create_chain+0x46>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e070      	b.n	80040b8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d101      	bne.n	8003fe2 <create_chain+0x52>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	e06a      	b.n	80040b8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d201      	bcs.n	8003ff0 <create_chain+0x60>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	e063      	b.n	80040b8 <create_chain+0x128>
		scl = clst;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	429a      	cmp	r2, r3
 8004006:	d307      	bcc.n	8004018 <create_chain+0x88>
				ncl = 2;
 8004008:	2302      	movs	r3, #2
 800400a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	429a      	cmp	r2, r3
 8004012:	d901      	bls.n	8004018 <create_chain+0x88>
 8004014:	2300      	movs	r3, #0
 8004016:	e04f      	b.n	80040b8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004018:	69f9      	ldr	r1, [r7, #28]
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fdbf 	bl	8003b9e <get_fat>
 8004020:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00e      	beq.n	8004046 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d003      	beq.n	8004036 <create_chain+0xa6>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004034:	d101      	bne.n	800403a <create_chain+0xaa>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	e03e      	b.n	80040b8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800403a:	69fa      	ldr	r2, [r7, #28]
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	429a      	cmp	r2, r3
 8004040:	d1da      	bne.n	8003ff8 <create_chain+0x68>
 8004042:	2300      	movs	r3, #0
 8004044:	e038      	b.n	80040b8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004046:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004048:	f04f 32ff 	mov.w	r2, #4294967295
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	6938      	ldr	r0, [r7, #16]
 8004050:	f7ff fe4d 	bl	8003cee <put_fat>
 8004054:	4603      	mov	r3, r0
 8004056:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004058:	7dfb      	ldrb	r3, [r7, #23]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <create_chain+0xe2>
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d006      	beq.n	8004072 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004064:	69fa      	ldr	r2, [r7, #28]
 8004066:	6839      	ldr	r1, [r7, #0]
 8004068:	6938      	ldr	r0, [r7, #16]
 800406a:	f7ff fe40 	bl	8003cee <put_fat>
 800406e:	4603      	mov	r3, r0
 8004070:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004072:	7dfb      	ldrb	r3, [r7, #23]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d116      	bne.n	80040a6 <create_chain+0x116>
		fs->last_clst = ncl;
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	3b02      	subs	r3, #2
 8004088:	429a      	cmp	r2, r3
 800408a:	d804      	bhi.n	8004096 <create_chain+0x106>
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	691b      	ldr	r3, [r3, #16]
 8004090:	1e5a      	subs	r2, r3, #1
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	791b      	ldrb	r3, [r3, #4]
 800409a:	f043 0301 	orr.w	r3, r3, #1
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	711a      	strb	r2, [r3, #4]
 80040a4:	e007      	b.n	80040b6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80040a6:	7dfb      	ldrb	r3, [r7, #23]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d102      	bne.n	80040b2 <create_chain+0x122>
 80040ac:	f04f 33ff 	mov.w	r3, #4294967295
 80040b0:	e000      	b.n	80040b4 <create_chain+0x124>
 80040b2:	2301      	movs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80040b6:	69fb      	ldr	r3, [r7, #28]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3720      	adds	r7, #32
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	3304      	adds	r3, #4
 80040d6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	0a5b      	lsrs	r3, r3, #9
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	8952      	ldrh	r2, [r2, #10]
 80040e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1d1a      	adds	r2, r3, #4
 80040ea:	613a      	str	r2, [r7, #16]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <clmt_clust+0x3a>
 80040f6:	2300      	movs	r3, #0
 80040f8:	e010      	b.n	800411c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d307      	bcc.n	8004112 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	617b      	str	r3, [r7, #20]
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	3304      	adds	r3, #4
 800410e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004110:	e7e9      	b.n	80040e6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004112:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	4413      	add	r3, r2
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800413e:	d204      	bcs.n	800414a <dir_sdi+0x22>
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	f003 031f 	and.w	r3, r3, #31
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <dir_sdi+0x26>
		return FR_INT_ERR;
 800414a:	2302      	movs	r3, #2
 800414c:	e063      	b.n	8004216 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d106      	bne.n	800416e <dir_sdi+0x46>
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d902      	bls.n	800416e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10c      	bne.n	800418e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	095b      	lsrs	r3, r3, #5
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	8912      	ldrh	r2, [r2, #8]
 800417c:	4293      	cmp	r3, r2
 800417e:	d301      	bcc.n	8004184 <dir_sdi+0x5c>
 8004180:	2302      	movs	r3, #2
 8004182:	e048      	b.n	8004216 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	61da      	str	r2, [r3, #28]
 800418c:	e029      	b.n	80041e2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	895b      	ldrh	r3, [r3, #10]
 8004192:	025b      	lsls	r3, r3, #9
 8004194:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004196:	e019      	b.n	80041cc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6979      	ldr	r1, [r7, #20]
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff fcfe 	bl	8003b9e <get_fat>
 80041a2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041aa:	d101      	bne.n	80041b0 <dir_sdi+0x88>
 80041ac:	2301      	movs	r3, #1
 80041ae:	e032      	b.n	8004216 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d904      	bls.n	80041c0 <dir_sdi+0x98>
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d301      	bcc.n	80041c4 <dir_sdi+0x9c>
 80041c0:	2302      	movs	r3, #2
 80041c2:	e028      	b.n	8004216 <dir_sdi+0xee>
			ofs -= csz;
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d2e1      	bcs.n	8004198 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80041d4:	6979      	ldr	r1, [r7, #20]
 80041d6:	6938      	ldr	r0, [r7, #16]
 80041d8:	f7ff fcc2 	bl	8003b60 <clust2sect>
 80041dc:	4602      	mov	r2, r0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d101      	bne.n	80041f4 <dir_sdi+0xcc>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e010      	b.n	8004216 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	0a5b      	lsrs	r3, r3, #9
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	441a      	add	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b086      	sub	sp, #24
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
 8004226:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	3320      	adds	r3, #32
 8004234:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <dir_next+0x28>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004244:	d301      	bcc.n	800424a <dir_next+0x2c>
 8004246:	2304      	movs	r3, #4
 8004248:	e0aa      	b.n	80043a0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 8098 	bne.w	8004386 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	8912      	ldrh	r2, [r2, #8]
 8004270:	4293      	cmp	r3, r2
 8004272:	f0c0 8088 	bcc.w	8004386 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	61da      	str	r2, [r3, #28]
 800427c:	2304      	movs	r3, #4
 800427e:	e08f      	b.n	80043a0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	0a5b      	lsrs	r3, r3, #9
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	8952      	ldrh	r2, [r2, #10]
 8004288:	3a01      	subs	r2, #1
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d17a      	bne.n	8004386 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	4619      	mov	r1, r3
 8004298:	4610      	mov	r0, r2
 800429a:	f7ff fc80 	bl	8003b9e <get_fat>
 800429e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d801      	bhi.n	80042aa <dir_next+0x8c>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e07a      	b.n	80043a0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b0:	d101      	bne.n	80042b6 <dir_next+0x98>
 80042b2:	2301      	movs	r3, #1
 80042b4:	e074      	b.n	80043a0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d358      	bcc.n	8004372 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d104      	bne.n	80042d0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	61da      	str	r2, [r3, #28]
 80042cc:	2304      	movs	r3, #4
 80042ce:	e067      	b.n	80043a0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7ff fe59 	bl	8003f90 <create_chain>
 80042de:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <dir_next+0xcc>
 80042e6:	2307      	movs	r3, #7
 80042e8:	e05a      	b.n	80043a0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d101      	bne.n	80042f4 <dir_next+0xd6>
 80042f0:	2302      	movs	r3, #2
 80042f2:	e055      	b.n	80043a0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d101      	bne.n	8004300 <dir_next+0xe2>
 80042fc:	2301      	movs	r3, #1
 80042fe:	e04f      	b.n	80043a0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004300:	68f8      	ldr	r0, [r7, #12]
 8004302:	f7ff fb4d 	bl	80039a0 <sync_window>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <dir_next+0xf2>
 800430c:	2301      	movs	r3, #1
 800430e:	e047      	b.n	80043a0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3330      	adds	r3, #48	; 0x30
 8004314:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004318:	2100      	movs	r1, #0
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff f977 	bl	800360e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004320:	2300      	movs	r3, #0
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	6979      	ldr	r1, [r7, #20]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f7ff fc1a 	bl	8003b60 <clust2sect>
 800432c:	4602      	mov	r2, r0
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	62da      	str	r2, [r3, #44]	; 0x2c
 8004332:	e012      	b.n	800435a <dir_next+0x13c>
						fs->wflag = 1;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f7ff fb30 	bl	80039a0 <sync_window>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <dir_next+0x12c>
 8004346:	2301      	movs	r3, #1
 8004348:	e02a      	b.n	80043a0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	3301      	adds	r3, #1
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	62da      	str	r2, [r3, #44]	; 0x2c
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	895b      	ldrh	r3, [r3, #10]
 800435e:	461a      	mov	r2, r3
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4293      	cmp	r3, r2
 8004364:	d3e6      	bcc.n	8004334 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad2      	subs	r2, r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004378:	6979      	ldr	r1, [r7, #20]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f7ff fbf0 	bl	8003b60 <clust2sect>
 8004380:	4602      	mov	r2, r0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004398:	441a      	add	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3718      	adds	r7, #24
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b086      	sub	sp, #24
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80043b8:	2100      	movs	r1, #0
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f7ff feb4 	bl	8004128 <dir_sdi>
 80043c0:	4603      	mov	r3, r0
 80043c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80043c4:	7dfb      	ldrb	r3, [r7, #23]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d12b      	bne.n	8004422 <dir_alloc+0x7a>
		n = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	4619      	mov	r1, r3
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f7ff fb27 	bl	8003a28 <move_window>
 80043da:	4603      	mov	r3, r0
 80043dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80043de:	7dfb      	ldrb	r3, [r7, #23]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d11d      	bne.n	8004420 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2be5      	cmp	r3, #229	; 0xe5
 80043ec:	d004      	beq.n	80043f8 <dir_alloc+0x50>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	3301      	adds	r3, #1
 80043fc:	613b      	str	r3, [r7, #16]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d102      	bne.n	800440c <dir_alloc+0x64>
 8004406:	e00c      	b.n	8004422 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004408:	2300      	movs	r3, #0
 800440a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800440c:	2101      	movs	r1, #1
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7ff ff05 	bl	800421e <dir_next>
 8004414:	4603      	mov	r3, r0
 8004416:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004418:	7dfb      	ldrb	r3, [r7, #23]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0d7      	beq.n	80043ce <dir_alloc+0x26>
 800441e:	e000      	b.n	8004422 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004420:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004422:	7dfb      	ldrb	r3, [r7, #23]
 8004424:	2b04      	cmp	r3, #4
 8004426:	d101      	bne.n	800442c <dir_alloc+0x84>
 8004428:	2307      	movs	r3, #7
 800442a:	75fb      	strb	r3, [r7, #23]
	return res;
 800442c:	7dfb      	ldrb	r3, [r7, #23]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004436:	b580      	push	{r7, lr}
 8004438:	b084      	sub	sp, #16
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
 800443e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	331a      	adds	r3, #26
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f83f 	bl	80034c8 <ld_word>
 800444a:	4603      	mov	r3, r0
 800444c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d109      	bne.n	800446a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	4618      	mov	r0, r3
 800445c:	f7ff f834 	bl	80034c8 <ld_word>
 8004460:	4603      	mov	r3, r0
 8004462:	041b      	lsls	r3, r3, #16
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	60b9      	str	r1, [r7, #8]
 800447e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	331a      	adds	r3, #26
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	b292      	uxth	r2, r2
 8004488:	4611      	mov	r1, r2
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff f857 	bl	800353e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b03      	cmp	r3, #3
 8004496:	d109      	bne.n	80044ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f103 0214 	add.w	r2, r3, #20
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	0c1b      	lsrs	r3, r3, #16
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	4619      	mov	r1, r3
 80044a6:	4610      	mov	r0, r2
 80044a8:	f7ff f849 	bl	800353e <st_word>
	}
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80044c2:	2100      	movs	r1, #0
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f7ff fe2f 	bl	8004128 <dir_sdi>
 80044ca:	4603      	mov	r3, r0
 80044cc:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d001      	beq.n	80044d8 <dir_find+0x24>
 80044d4:	7dfb      	ldrb	r3, [r7, #23]
 80044d6:	e03e      	b.n	8004556 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	69db      	ldr	r3, [r3, #28]
 80044dc:	4619      	mov	r1, r3
 80044de:	6938      	ldr	r0, [r7, #16]
 80044e0:	f7ff faa2 	bl	8003a28 <move_window>
 80044e4:	4603      	mov	r3, r0
 80044e6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80044e8:	7dfb      	ldrb	r3, [r7, #23]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d12f      	bne.n	800454e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80044f6:	7bfb      	ldrb	r3, [r7, #15]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d102      	bne.n	8004502 <dir_find+0x4e>
 80044fc:	2304      	movs	r3, #4
 80044fe:	75fb      	strb	r3, [r7, #23]
 8004500:	e028      	b.n	8004554 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	330b      	adds	r3, #11
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800450e:	b2da      	uxtb	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	330b      	adds	r3, #11
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	f003 0308 	and.w	r3, r3, #8
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <dir_find+0x86>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a18      	ldr	r0, [r3, #32]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	3324      	adds	r3, #36	; 0x24
 800452c:	220b      	movs	r2, #11
 800452e:	4619      	mov	r1, r3
 8004530:	f7ff f888 	bl	8003644 <mem_cmp>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800453a:	2100      	movs	r1, #0
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7ff fe6e 	bl	800421e <dir_next>
 8004542:	4603      	mov	r3, r0
 8004544:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004546:	7dfb      	ldrb	r3, [r7, #23]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0c5      	beq.n	80044d8 <dir_find+0x24>
 800454c:	e002      	b.n	8004554 <dir_find+0xa0>
		if (res != FR_OK) break;
 800454e:	bf00      	nop
 8004550:	e000      	b.n	8004554 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004552:	bf00      	nop

	return res;
 8004554:	7dfb      	ldrb	r3, [r7, #23]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3718      	adds	r7, #24
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b084      	sub	sp, #16
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800456c:	2101      	movs	r1, #1
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff ff1a 	bl	80043a8 <dir_alloc>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11c      	bne.n	80045b8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	4619      	mov	r1, r3
 8004584:	68b8      	ldr	r0, [r7, #8]
 8004586:	f7ff fa4f 	bl	8003a28 <move_window>
 800458a:	4603      	mov	r3, r0
 800458c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d111      	bne.n	80045b8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	2220      	movs	r2, #32
 800459a:	2100      	movs	r1, #0
 800459c:	4618      	mov	r0, r3
 800459e:	f7ff f836 	bl	800360e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a18      	ldr	r0, [r3, #32]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	3324      	adds	r3, #36	; 0x24
 80045aa:	220b      	movs	r2, #11
 80045ac:	4619      	mov	r1, r3
 80045ae:	f7ff f80d 	bl	80035cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	2201      	movs	r2, #1
 80045b6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80045da:	220b      	movs	r2, #11
 80045dc:	2120      	movs	r1, #32
 80045de:	68b8      	ldr	r0, [r7, #8]
 80045e0:	f7ff f815 	bl	800360e <mem_set>
	si = i = 0; ni = 8;
 80045e4:	2300      	movs	r3, #0
 80045e6:	613b      	str	r3, [r7, #16]
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	2308      	movs	r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	61fa      	str	r2, [r7, #28]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80045fe:	7efb      	ldrb	r3, [r7, #27]
 8004600:	2b20      	cmp	r3, #32
 8004602:	d94e      	bls.n	80046a2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8004604:	7efb      	ldrb	r3, [r7, #27]
 8004606:	2b2f      	cmp	r3, #47	; 0x2f
 8004608:	d006      	beq.n	8004618 <create_name+0x54>
 800460a:	7efb      	ldrb	r3, [r7, #27]
 800460c:	2b5c      	cmp	r3, #92	; 0x5c
 800460e:	d110      	bne.n	8004632 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004610:	e002      	b.n	8004618 <create_name+0x54>
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3301      	adds	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	4413      	add	r3, r2
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b2f      	cmp	r3, #47	; 0x2f
 8004622:	d0f6      	beq.n	8004612 <create_name+0x4e>
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	4413      	add	r3, r2
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	2b5c      	cmp	r3, #92	; 0x5c
 800462e:	d0f0      	beq.n	8004612 <create_name+0x4e>
			break;
 8004630:	e038      	b.n	80046a4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004632:	7efb      	ldrb	r3, [r7, #27]
 8004634:	2b2e      	cmp	r3, #46	; 0x2e
 8004636:	d003      	beq.n	8004640 <create_name+0x7c>
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	429a      	cmp	r2, r3
 800463e:	d30c      	bcc.n	800465a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b0b      	cmp	r3, #11
 8004644:	d002      	beq.n	800464c <create_name+0x88>
 8004646:	7efb      	ldrb	r3, [r7, #27]
 8004648:	2b2e      	cmp	r3, #46	; 0x2e
 800464a:	d001      	beq.n	8004650 <create_name+0x8c>
 800464c:	2306      	movs	r3, #6
 800464e:	e044      	b.n	80046da <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004650:	2308      	movs	r3, #8
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	230b      	movs	r3, #11
 8004656:	617b      	str	r3, [r7, #20]
			continue;
 8004658:	e022      	b.n	80046a0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800465a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800465e:	2b00      	cmp	r3, #0
 8004660:	da04      	bge.n	800466c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004662:	7efb      	ldrb	r3, [r7, #27]
 8004664:	3b80      	subs	r3, #128	; 0x80
 8004666:	4a1f      	ldr	r2, [pc, #124]	; (80046e4 <create_name+0x120>)
 8004668:	5cd3      	ldrb	r3, [r2, r3]
 800466a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800466c:	7efb      	ldrb	r3, [r7, #27]
 800466e:	4619      	mov	r1, r3
 8004670:	481d      	ldr	r0, [pc, #116]	; (80046e8 <create_name+0x124>)
 8004672:	f7ff f80e 	bl	8003692 <chk_chr>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <create_name+0xbc>
 800467c:	2306      	movs	r3, #6
 800467e:	e02c      	b.n	80046da <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004680:	7efb      	ldrb	r3, [r7, #27]
 8004682:	2b60      	cmp	r3, #96	; 0x60
 8004684:	d905      	bls.n	8004692 <create_name+0xce>
 8004686:	7efb      	ldrb	r3, [r7, #27]
 8004688:	2b7a      	cmp	r3, #122	; 0x7a
 800468a:	d802      	bhi.n	8004692 <create_name+0xce>
 800468c:	7efb      	ldrb	r3, [r7, #27]
 800468e:	3b20      	subs	r3, #32
 8004690:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	613a      	str	r2, [r7, #16]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	4413      	add	r3, r2
 800469c:	7efa      	ldrb	r2, [r7, #27]
 800469e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80046a0:	e7a6      	b.n	80045f0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80046a2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	441a      	add	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <create_name+0xf4>
 80046b4:	2306      	movs	r3, #6
 80046b6:	e010      	b.n	80046da <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2be5      	cmp	r3, #229	; 0xe5
 80046be:	d102      	bne.n	80046c6 <create_name+0x102>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2205      	movs	r2, #5
 80046c4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80046c6:	7efb      	ldrb	r3, [r7, #27]
 80046c8:	2b20      	cmp	r3, #32
 80046ca:	d801      	bhi.n	80046d0 <create_name+0x10c>
 80046cc:	2204      	movs	r2, #4
 80046ce:	e000      	b.n	80046d2 <create_name+0x10e>
 80046d0:	2200      	movs	r2, #0
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	330b      	adds	r3, #11
 80046d6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80046d8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3720      	adds	r7, #32
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	08006734 	.word	0x08006734
 80046e8:	080066a8 	.word	0x080066a8

080046ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b086      	sub	sp, #24
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8004700:	e002      	b.n	8004708 <follow_path+0x1c>
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	3301      	adds	r3, #1
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b2f      	cmp	r3, #47	; 0x2f
 800470e:	d0f8      	beq.n	8004702 <follow_path+0x16>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b5c      	cmp	r3, #92	; 0x5c
 8004716:	d0f4      	beq.n	8004702 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b1f      	cmp	r3, #31
 8004724:	d80a      	bhi.n	800473c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2280      	movs	r2, #128	; 0x80
 800472a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800472e:	2100      	movs	r1, #0
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff fcf9 	bl	8004128 <dir_sdi>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]
 800473a:	e043      	b.n	80047c4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800473c:	463b      	mov	r3, r7
 800473e:	4619      	mov	r1, r3
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff3f 	bl	80045c4 <create_name>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d134      	bne.n	80047ba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f7ff feaf 	bl	80044b4 <dir_find>
 8004756:	4603      	mov	r3, r0
 8004758:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004760:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004762:	7dfb      	ldrb	r3, [r7, #23]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004768:	7dfb      	ldrb	r3, [r7, #23]
 800476a:	2b04      	cmp	r3, #4
 800476c:	d127      	bne.n	80047be <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800476e:	7afb      	ldrb	r3, [r7, #11]
 8004770:	f003 0304 	and.w	r3, r3, #4
 8004774:	2b00      	cmp	r3, #0
 8004776:	d122      	bne.n	80047be <follow_path+0xd2>
 8004778:	2305      	movs	r3, #5
 800477a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800477c:	e01f      	b.n	80047be <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d11c      	bne.n	80047c2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	799b      	ldrb	r3, [r3, #6]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d102      	bne.n	800479a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004794:	2305      	movs	r3, #5
 8004796:	75fb      	strb	r3, [r7, #23]
 8004798:	e014      	b.n	80047c4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a8:	4413      	add	r3, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f7ff fe42 	bl	8004436 <ld_clust>
 80047b2:	4602      	mov	r2, r0
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80047b8:	e7c0      	b.n	800473c <follow_path+0x50>
			if (res != FR_OK) break;
 80047ba:	bf00      	nop
 80047bc:	e002      	b.n	80047c4 <follow_path+0xd8>
				break;
 80047be:	bf00      	nop
 80047c0:	e000      	b.n	80047c4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80047c2:	bf00      	nop
			}
		}
	}

	return res;
 80047c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}

080047ce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b087      	sub	sp, #28
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80047d6:	f04f 33ff 	mov.w	r3, #4294967295
 80047da:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d031      	beq.n	8004848 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	617b      	str	r3, [r7, #20]
 80047ea:	e002      	b.n	80047f2 <get_ldnumber+0x24>
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	3301      	adds	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b20      	cmp	r3, #32
 80047f8:	d903      	bls.n	8004802 <get_ldnumber+0x34>
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b3a      	cmp	r3, #58	; 0x3a
 8004800:	d1f4      	bne.n	80047ec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b3a      	cmp	r3, #58	; 0x3a
 8004808:	d11c      	bne.n	8004844 <get_ldnumber+0x76>
			tp = *path;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1c5a      	adds	r2, r3, #1
 8004814:	60fa      	str	r2, [r7, #12]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	3b30      	subs	r3, #48	; 0x30
 800481a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b09      	cmp	r3, #9
 8004820:	d80e      	bhi.n	8004840 <get_ldnumber+0x72>
 8004822:	68fa      	ldr	r2, [r7, #12]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	429a      	cmp	r2, r3
 8004828:	d10a      	bne.n	8004840 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d107      	bne.n	8004840 <get_ldnumber+0x72>
					vol = (int)i;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3301      	adds	r3, #1
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	e002      	b.n	800484a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004848:	693b      	ldr	r3, [r7, #16]
}
 800484a:	4618      	mov	r0, r3
 800484c:	371c      	adds	r7, #28
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
	...

08004858 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	70da      	strb	r2, [r3, #3]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f04f 32ff 	mov.w	r2, #4294967295
 800486e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004870:	6839      	ldr	r1, [r7, #0]
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff f8d8 	bl	8003a28 <move_window>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <check_fs+0x2a>
 800487e:	2304      	movs	r3, #4
 8004880:	e038      	b.n	80048f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	3330      	adds	r3, #48	; 0x30
 8004886:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe fe1c 	bl	80034c8 <ld_word>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <check_fs+0x48>
 800489c:	2303      	movs	r3, #3
 800489e:	e029      	b.n	80048f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048a6:	2be9      	cmp	r3, #233	; 0xe9
 80048a8:	d009      	beq.n	80048be <check_fs+0x66>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80048b0:	2beb      	cmp	r3, #235	; 0xeb
 80048b2:	d11e      	bne.n	80048f2 <check_fs+0x9a>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80048ba:	2b90      	cmp	r3, #144	; 0x90
 80048bc:	d119      	bne.n	80048f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	3330      	adds	r3, #48	; 0x30
 80048c2:	3336      	adds	r3, #54	; 0x36
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fe fe17 	bl	80034f8 <ld_dword>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <check_fs+0xa4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d101      	bne.n	80048da <check_fs+0x82>
 80048d6:	2300      	movs	r3, #0
 80048d8:	e00c      	b.n	80048f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3330      	adds	r3, #48	; 0x30
 80048de:	3352      	adds	r3, #82	; 0x52
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fe fe09 	bl	80034f8 <ld_dword>
 80048e6:	4603      	mov	r3, r0
 80048e8:	4a05      	ldr	r2, [pc, #20]	; (8004900 <check_fs+0xa8>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <check_fs+0x9a>
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80048f2:	2302      	movs	r3, #2
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	00544146 	.word	0x00544146
 8004900:	33544146 	.word	0x33544146

08004904 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b096      	sub	sp, #88	; 0x58
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	4613      	mov	r3, r2
 8004910:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f7ff ff58 	bl	80047ce <get_ldnumber>
 800491e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	da01      	bge.n	800492a <find_volume+0x26>
 8004926:	230b      	movs	r3, #11
 8004928:	e22d      	b.n	8004d86 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800492a:	4aa1      	ldr	r2, [pc, #644]	; (8004bb0 <find_volume+0x2ac>)
 800492c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800492e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004932:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <find_volume+0x3a>
 800493a:	230c      	movs	r3, #12
 800493c:	e223      	b.n	8004d86 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004942:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	f023 0301 	bic.w	r3, r3, #1
 800494a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800494c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01a      	beq.n	800498a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004956:	785b      	ldrb	r3, [r3, #1]
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fd17 	bl	800338c <disk_status>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10c      	bne.n	800498a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004970:	79fb      	ldrb	r3, [r7, #7]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <find_volume+0x82>
 8004976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004982:	230a      	movs	r3, #10
 8004984:	e1ff      	b.n	8004d86 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8004986:	2300      	movs	r3, #0
 8004988:	e1fd      	b.n	8004d86 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2200      	movs	r2, #0
 800498e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	b2da      	uxtb	r2, r3
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe fd0f 	bl	80033c0 <disk_initialize>
 80049a2:	4603      	mov	r3, r0
 80049a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80049a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049ac:	f003 0301 	and.w	r3, r3, #1
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80049b4:	2303      	movs	r3, #3
 80049b6:	e1e6      	b.n	8004d86 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80049b8:	79fb      	ldrb	r3, [r7, #7]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d007      	beq.n	80049ce <find_volume+0xca>
 80049be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049c2:	f003 0304 	and.w	r3, r3, #4
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80049ca:	230a      	movs	r3, #10
 80049cc:	e1db      	b.n	8004d86 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80049d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049d6:	f7ff ff3f 	bl	8004858 <check_fs>
 80049da:	4603      	mov	r3, r0
 80049dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80049e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d149      	bne.n	8004a7c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80049e8:	2300      	movs	r3, #0
 80049ea:	643b      	str	r3, [r7, #64]	; 0x40
 80049ec:	e01e      	b.n	8004a2c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049f6:	011b      	lsls	r3, r3, #4
 80049f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80049fc:	4413      	add	r3, r2
 80049fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	3304      	adds	r3, #4
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <find_volume+0x114>
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fe fd72 	bl	80034f8 <ld_dword>
 8004a14:	4602      	mov	r2, r0
 8004a16:	e000      	b.n	8004a1a <find_volume+0x116>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	3358      	adds	r3, #88	; 0x58
 8004a20:	443b      	add	r3, r7
 8004a22:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a28:	3301      	adds	r3, #1
 8004a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d9dd      	bls.n	80049ee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004a32:	2300      	movs	r3, #0
 8004a34:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d002      	beq.n	8004a42 <find_volume+0x13e>
 8004a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a3e:	3b01      	subs	r3, #1
 8004a40:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3358      	adds	r3, #88	; 0x58
 8004a48:	443b      	add	r3, r7
 8004a4a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004a4e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <find_volume+0x15e>
 8004a56:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a58:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a5a:	f7ff fefd 	bl	8004858 <check_fs>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	e000      	b.n	8004a64 <find_volume+0x160>
 8004a62:	2303      	movs	r3, #3
 8004a64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d905      	bls.n	8004a7c <find_volume+0x178>
 8004a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a72:	3301      	adds	r3, #1
 8004a74:	643b      	str	r3, [r7, #64]	; 0x40
 8004a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a78:	2b03      	cmp	r3, #3
 8004a7a:	d9e2      	bls.n	8004a42 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a80:	2b04      	cmp	r3, #4
 8004a82:	d101      	bne.n	8004a88 <find_volume+0x184>
 8004a84:	2301      	movs	r3, #1
 8004a86:	e17e      	b.n	8004d86 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d901      	bls.n	8004a94 <find_volume+0x190>
 8004a90:	230d      	movs	r3, #13
 8004a92:	e178      	b.n	8004d86 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	3330      	adds	r3, #48	; 0x30
 8004a98:	330b      	adds	r3, #11
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7fe fd14 	bl	80034c8 <ld_word>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aa6:	d001      	beq.n	8004aac <find_volume+0x1a8>
 8004aa8:	230d      	movs	r3, #13
 8004aaa:	e16c      	b.n	8004d86 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	3330      	adds	r3, #48	; 0x30
 8004ab0:	3316      	adds	r3, #22
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fd08 	bl	80034c8 <ld_word>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004abc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d106      	bne.n	8004ad0 <find_volume+0x1cc>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	3330      	adds	r3, #48	; 0x30
 8004ac6:	3324      	adds	r3, #36	; 0x24
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fd15 	bl	80034f8 <ld_dword>
 8004ace:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ad4:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae2:	789b      	ldrb	r3, [r3, #2]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d005      	beq.n	8004af4 <find_volume+0x1f0>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	789b      	ldrb	r3, [r3, #2]
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d001      	beq.n	8004af4 <find_volume+0x1f0>
 8004af0:	230d      	movs	r3, #13
 8004af2:	e148      	b.n	8004d86 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af6:	789b      	ldrb	r3, [r3, #2]
 8004af8:	461a      	mov	r2, r3
 8004afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004afc:	fb02 f303 	mul.w	r3, r2, r3
 8004b00:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	895b      	ldrh	r3, [r3, #10]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d008      	beq.n	8004b28 <find_volume+0x224>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b18:	895b      	ldrh	r3, [r3, #10]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1e:	895b      	ldrh	r3, [r3, #10]
 8004b20:	3b01      	subs	r3, #1
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d001      	beq.n	8004b2c <find_volume+0x228>
 8004b28:	230d      	movs	r3, #13
 8004b2a:	e12c      	b.n	8004d86 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	3330      	adds	r3, #48	; 0x30
 8004b30:	3311      	adds	r3, #17
 8004b32:	4618      	mov	r0, r3
 8004b34:	f7fe fcc8 	bl	80034c8 <ld_word>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b42:	891b      	ldrh	r3, [r3, #8]
 8004b44:	f003 030f 	and.w	r3, r3, #15
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <find_volume+0x24e>
 8004b4e:	230d      	movs	r3, #13
 8004b50:	e119      	b.n	8004d86 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	3330      	adds	r3, #48	; 0x30
 8004b56:	3313      	adds	r3, #19
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fe fcb5 	bl	80034c8 <ld_word>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <find_volume+0x272>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b6a:	3330      	adds	r3, #48	; 0x30
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe fcc2 	bl	80034f8 <ld_dword>
 8004b74:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b78:	3330      	adds	r3, #48	; 0x30
 8004b7a:	330e      	adds	r3, #14
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fe fca3 	bl	80034c8 <ld_word>
 8004b82:	4603      	mov	r3, r0
 8004b84:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004b86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <find_volume+0x28c>
 8004b8c:	230d      	movs	r3, #13
 8004b8e:	e0fa      	b.n	8004d86 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004b90:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b94:	4413      	add	r3, r2
 8004b96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b98:	8912      	ldrh	r2, [r2, #8]
 8004b9a:	0912      	lsrs	r2, r2, #4
 8004b9c:	b292      	uxth	r2, r2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004ba2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d204      	bcs.n	8004bb4 <find_volume+0x2b0>
 8004baa:	230d      	movs	r3, #13
 8004bac:	e0eb      	b.n	8004d86 <find_volume+0x482>
 8004bae:	bf00      	nop
 8004bb0:	20000298 	.word	0x20000298
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004bbc:	8952      	ldrh	r2, [r2, #10]
 8004bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bc2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <find_volume+0x2ca>
 8004bca:	230d      	movs	r3, #13
 8004bcc:	e0db      	b.n	8004d86 <find_volume+0x482>
		fmt = FS_FAT32;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d802      	bhi.n	8004be4 <find_volume+0x2e0>
 8004bde:	2302      	movs	r3, #2
 8004be0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d802      	bhi.n	8004bf4 <find_volume+0x2f0>
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfa:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c00:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004c02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c06:	441a      	add	r2, r3
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004c0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	441a      	add	r2, r3
 8004c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c14:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004c16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d11e      	bne.n	8004c5c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c20:	3330      	adds	r3, #48	; 0x30
 8004c22:	332a      	adds	r3, #42	; 0x2a
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe fc4f 	bl	80034c8 <ld_word>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d001      	beq.n	8004c34 <find_volume+0x330>
 8004c30:	230d      	movs	r3, #13
 8004c32:	e0a8      	b.n	8004d86 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	891b      	ldrh	r3, [r3, #8]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <find_volume+0x33c>
 8004c3c:	230d      	movs	r3, #13
 8004c3e:	e0a2      	b.n	8004d86 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	3330      	adds	r3, #48	; 0x30
 8004c44:	332c      	adds	r3, #44	; 0x2c
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fe fc56 	bl	80034f8 <ld_dword>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5a:	e01f      	b.n	8004c9c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	891b      	ldrh	r3, [r3, #8]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <find_volume+0x364>
 8004c64:	230d      	movs	r3, #13
 8004c66:	e08e      	b.n	8004d86 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	6a1a      	ldr	r2, [r3, #32]
 8004c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c6e:	441a      	add	r2, r3
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d103      	bne.n	8004c84 <find_volume+0x380>
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	005b      	lsls	r3, r3, #1
 8004c82:	e00a      	b.n	8004c9a <find_volume+0x396>
 8004c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c86:	695a      	ldr	r2, [r3, #20]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	4413      	add	r3, r2
 8004c8e:	085a      	lsrs	r2, r3, #1
 8004c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004c9a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9e:	699a      	ldr	r2, [r3, #24]
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004ca6:	0a5b      	lsrs	r3, r3, #9
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d201      	bcs.n	8004cb0 <find_volume+0x3ac>
 8004cac:	230d      	movs	r3, #13
 8004cae:	e06a      	b.n	8004d86 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb6:	611a      	str	r2, [r3, #16]
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cbe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	2280      	movs	r2, #128	; 0x80
 8004cc4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d149      	bne.n	8004d62 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd0:	3330      	adds	r3, #48	; 0x30
 8004cd2:	3330      	adds	r3, #48	; 0x30
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	f7fe fbf7 	bl	80034c8 <ld_word>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d140      	bne.n	8004d62 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	4619      	mov	r1, r3
 8004ce6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004ce8:	f7fe fe9e 	bl	8003a28 <move_window>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d137      	bne.n	8004d62 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8004cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfa:	3330      	adds	r3, #48	; 0x30
 8004cfc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004d00:	4618      	mov	r0, r3
 8004d02:	f7fe fbe1 	bl	80034c8 <ld_word>
 8004d06:	4603      	mov	r3, r0
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d127      	bne.n	8004d62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	3330      	adds	r3, #48	; 0x30
 8004d16:	4618      	mov	r0, r3
 8004d18:	f7fe fbee 	bl	80034f8 <ld_dword>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a1c      	ldr	r2, [pc, #112]	; (8004d90 <find_volume+0x48c>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d11e      	bne.n	8004d62 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d26:	3330      	adds	r3, #48	; 0x30
 8004d28:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fbe3 	bl	80034f8 <ld_dword>
 8004d32:	4603      	mov	r3, r0
 8004d34:	4a17      	ldr	r2, [pc, #92]	; (8004d94 <find_volume+0x490>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d113      	bne.n	8004d62 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	3330      	adds	r3, #48	; 0x30
 8004d3e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fbd8 	bl	80034f8 <ld_dword>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	3330      	adds	r3, #48	; 0x30
 8004d52:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fbce 	bl	80034f8 <ld_dword>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d60:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d64:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d68:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <find_volume+0x494>)
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <find_volume+0x494>)
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <find_volume+0x494>)
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d80:	f7fe fdea 	bl	8003958 <clear_lock>
#endif
	return FR_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3758      	adds	r7, #88	; 0x58
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	41615252 	.word	0x41615252
 8004d94:	61417272 	.word	0x61417272
 8004d98:	2000029c 	.word	0x2000029c

08004d9c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004da6:	2309      	movs	r3, #9
 8004da8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01c      	beq.n	8004dea <validate+0x4e>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d018      	beq.n	8004dea <validate+0x4e>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d013      	beq.n	8004dea <validate+0x4e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	889a      	ldrh	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	88db      	ldrh	r3, [r3, #6]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d10c      	bne.n	8004dea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	785b      	ldrb	r3, [r3, #1]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe fad8 	bl	800338c <disk_status>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <validate+0x4e>
			res = FR_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004dea:	7bfb      	ldrb	r3, [r7, #15]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d102      	bne.n	8004df6 <validate+0x5a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	e000      	b.n	8004df8 <validate+0x5c>
 8004df6:	2300      	movs	r3, #0
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	6013      	str	r3, [r2, #0]
	return res;
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4613      	mov	r3, r2
 8004e14:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004e1a:	f107 0310 	add.w	r3, r7, #16
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fcd5 	bl	80047ce <get_ldnumber>
 8004e24:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	da01      	bge.n	8004e30 <f_mount+0x28>
 8004e2c:	230b      	movs	r3, #11
 8004e2e:	e02b      	b.n	8004e88 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004e30:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <f_mount+0x88>)
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e38:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004e40:	69b8      	ldr	r0, [r7, #24]
 8004e42:	f7fe fd89 	bl	8003958 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	490d      	ldr	r1, [pc, #52]	; (8004e90 <f_mount+0x88>)
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <f_mount+0x66>
 8004e68:	79fb      	ldrb	r3, [r7, #7]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d001      	beq.n	8004e72 <f_mount+0x6a>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e00a      	b.n	8004e88 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004e72:	f107 010c 	add.w	r1, r7, #12
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7ff fd41 	bl	8004904 <find_volume>
 8004e82:	4603      	mov	r3, r0
 8004e84:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3720      	adds	r7, #32
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	20000298 	.word	0x20000298

08004e94 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b098      	sub	sp, #96	; 0x60
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <f_open+0x18>
 8004ea8:	2309      	movs	r3, #9
 8004eaa:	e1ad      	b.n	8005208 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004eac:	79fb      	ldrb	r3, [r7, #7]
 8004eae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004eb2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004eb4:	79fa      	ldrb	r2, [r7, #7]
 8004eb6:	f107 0110 	add.w	r1, r7, #16
 8004eba:	f107 0308 	add.w	r3, r7, #8
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7ff fd20 	bl	8004904 <find_volume>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004eca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f040 8191 	bne.w	80051f6 <f_open+0x362>
		dj.obj.fs = fs;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	f107 0314 	add.w	r3, r7, #20
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7ff fc03 	bl	80046ec <follow_path>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004eec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d11a      	bne.n	8004f2a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004ef4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ef8:	b25b      	sxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	da03      	bge.n	8004f06 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004efe:	2306      	movs	r3, #6
 8004f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f04:	e011      	b.n	8004f2a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004f06:	79fb      	ldrb	r3, [r7, #7]
 8004f08:	f023 0301 	bic.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	bf14      	ite	ne
 8004f10:	2301      	movne	r3, #1
 8004f12:	2300      	moveq	r3, #0
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	461a      	mov	r2, r3
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fbd2 	bl	80036c8 <chk_lock>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004f2a:	79fb      	ldrb	r3, [r7, #7]
 8004f2c:	f003 031c 	and.w	r3, r3, #28
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d07f      	beq.n	8005034 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d017      	beq.n	8004f6c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004f3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d10e      	bne.n	8004f62 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004f44:	f7fe fc1c 	bl	8003780 <enq_lock>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d006      	beq.n	8004f5c <f_open+0xc8>
 8004f4e:	f107 0314 	add.w	r3, r7, #20
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7ff fb03 	bl	800455e <dir_register>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	e000      	b.n	8004f5e <f_open+0xca>
 8004f5c:	2312      	movs	r3, #18
 8004f5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004f62:	79fb      	ldrb	r3, [r7, #7]
 8004f64:	f043 0308 	orr.w	r3, r3, #8
 8004f68:	71fb      	strb	r3, [r7, #7]
 8004f6a:	e010      	b.n	8004f8e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004f6c:	7ebb      	ldrb	r3, [r7, #26]
 8004f6e:	f003 0311 	and.w	r3, r3, #17
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d003      	beq.n	8004f7e <f_open+0xea>
					res = FR_DENIED;
 8004f76:	2307      	movs	r3, #7
 8004f78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f7c:	e007      	b.n	8004f8e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <f_open+0xfa>
 8004f88:	2308      	movs	r3, #8
 8004f8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004f8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d168      	bne.n	8005068 <f_open+0x1d4>
 8004f96:	79fb      	ldrb	r3, [r7, #7]
 8004f98:	f003 0308 	and.w	r3, r3, #8
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d063      	beq.n	8005068 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004fa0:	f7fe f994 	bl	80032cc <get_fattime>
 8004fa4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	330e      	adds	r3, #14
 8004faa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fe fae1 	bl	8003574 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb4:	3316      	adds	r3, #22
 8004fb6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe fadb 	bl	8003574 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc0:	330b      	adds	r3, #11
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fca:	4611      	mov	r1, r2
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7ff fa32 	bl	8004436 <ld_clust>
 8004fd2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fa4a 	bl	8004474 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	331c      	adds	r3, #28
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fac4 	bl	8003574 <st_dword>
					fs->wflag = 1;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d037      	beq.n	8005068 <f_open+0x1d4>
						dw = fs->winsect;
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	2200      	movs	r2, #0
 8005004:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005006:	4618      	mov	r0, r3
 8005008:	f7fe ff5d 	bl	8003ec6 <remove_chain>
 800500c:	4603      	mov	r3, r0
 800500e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005012:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005016:	2b00      	cmp	r3, #0
 8005018:	d126      	bne.n	8005068 <f_open+0x1d4>
							res = move_window(fs, dw);
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800501e:	4618      	mov	r0, r3
 8005020:	f7fe fd02 	bl	8003a28 <move_window>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800502e:	3a01      	subs	r2, #1
 8005030:	60da      	str	r2, [r3, #12]
 8005032:	e019      	b.n	8005068 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005038:	2b00      	cmp	r3, #0
 800503a:	d115      	bne.n	8005068 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800503c:	7ebb      	ldrb	r3, [r7, #26]
 800503e:	f003 0310 	and.w	r3, r3, #16
 8005042:	2b00      	cmp	r3, #0
 8005044:	d003      	beq.n	800504e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005046:	2304      	movs	r3, #4
 8005048:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800504c:	e00c      	b.n	8005068 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800504e:	79fb      	ldrb	r3, [r7, #7]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <f_open+0x1d4>
 8005058:	7ebb      	ldrb	r3, [r7, #26]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d002      	beq.n	8005068 <f_open+0x1d4>
						res = FR_DENIED;
 8005062:	2307      	movs	r3, #7
 8005064:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005068:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800506c:	2b00      	cmp	r3, #0
 800506e:	d128      	bne.n	80050c2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800507a:	79fb      	ldrb	r3, [r7, #7]
 800507c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005080:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800508a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005090:	79fb      	ldrb	r3, [r7, #7]
 8005092:	f023 0301 	bic.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	bf14      	ite	ne
 800509a:	2301      	movne	r3, #1
 800509c:	2300      	moveq	r3, #0
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	461a      	mov	r2, r3
 80050a2:	f107 0314 	add.w	r3, r7, #20
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fe fb8b 	bl	80037c4 <inc_lock>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	691b      	ldr	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d102      	bne.n	80050c2 <f_open+0x22e>
 80050bc:	2302      	movs	r3, #2
 80050be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80050c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f040 8095 	bne.w	80051f6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050d0:	4611      	mov	r1, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff f9af 	bl	8004436 <ld_clust>
 80050d8:	4602      	mov	r2, r0
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80050de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e0:	331c      	adds	r3, #28
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe fa08 	bl	80034f8 <ld_dword>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	88da      	ldrh	r2, [r3, #6]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	79fa      	ldrb	r2, [r7, #7]
 8005106:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3330      	adds	r3, #48	; 0x30
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005122:	2100      	movs	r1, #0
 8005124:	4618      	mov	r0, r3
 8005126:	f7fe fa72 	bl	800360e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d060      	beq.n	80051f6 <f_open+0x362>
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	68db      	ldr	r3, [r3, #12]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05c      	beq.n	80051f6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	895b      	ldrh	r3, [r3, #10]
 8005148:	025b      	lsls	r3, r3, #9
 800514a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	657b      	str	r3, [r7, #84]	; 0x54
 8005158:	e016      	b.n	8005188 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe fd1d 	bl	8003b9e <get_fat>
 8005164:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005166:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005168:	2b01      	cmp	r3, #1
 800516a:	d802      	bhi.n	8005172 <f_open+0x2de>
 800516c:	2302      	movs	r3, #2
 800516e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005178:	d102      	bne.n	8005180 <f_open+0x2ec>
 800517a:	2301      	movs	r3, #1
 800517c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005180:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	657b      	str	r3, [r7, #84]	; 0x54
 8005188:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <f_open+0x304>
 8005190:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005194:	429a      	cmp	r2, r3
 8005196:	d8e0      	bhi.n	800515a <f_open+0x2c6>
				}
				fp->clust = clst;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800519c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800519e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d127      	bne.n	80051f6 <f_open+0x362>
 80051a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d022      	beq.n	80051f6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80051b4:	4618      	mov	r0, r3
 80051b6:	f7fe fcd3 	bl	8003b60 <clust2sect>
 80051ba:	6478      	str	r0, [r7, #68]	; 0x44
 80051bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d103      	bne.n	80051ca <f_open+0x336>
						res = FR_INT_ERR;
 80051c2:	2302      	movs	r3, #2
 80051c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80051c8:	e015      	b.n	80051f6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80051ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051cc:	0a5a      	lsrs	r2, r3, #9
 80051ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d0:	441a      	add	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	7858      	ldrb	r0, [r3, #1]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	2301      	movs	r3, #1
 80051e6:	f7fe f911 	bl	800340c <disk_read>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <f_open+0x362>
 80051f0:	2301      	movs	r3, #1
 80051f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80051f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d002      	beq.n	8005204 <f_open+0x370>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005204:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8005208:	4618      	mov	r0, r3
 800520a:	3760      	adds	r7, #96	; 0x60
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f107 0214 	add.w	r2, r7, #20
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f7ff fdb3 	bl	8004d9c <validate>
 8005236:	4603      	mov	r3, r0
 8005238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800523c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005240:	2b00      	cmp	r3, #0
 8005242:	d107      	bne.n	8005254 <f_read+0x44>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	7d5b      	ldrb	r3, [r3, #21]
 8005248:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800524c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005250:	2b00      	cmp	r3, #0
 8005252:	d002      	beq.n	800525a <f_read+0x4a>
 8005254:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005258:	e115      	b.n	8005486 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	7d1b      	ldrb	r3, [r3, #20]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <f_read+0x5a>
 8005266:	2307      	movs	r3, #7
 8005268:	e10d      	b.n	8005486 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	68da      	ldr	r2, [r3, #12]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6a3b      	ldr	r3, [r7, #32]
 800527a:	429a      	cmp	r2, r3
 800527c:	f240 80fe 	bls.w	800547c <f_read+0x26c>
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005284:	e0fa      	b.n	800547c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800528e:	2b00      	cmp	r3, #0
 8005290:	f040 80c6 	bne.w	8005420 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	0a5b      	lsrs	r3, r3, #9
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	8952      	ldrh	r2, [r2, #10]
 800529e:	3a01      	subs	r2, #1
 80052a0:	4013      	ands	r3, r2
 80052a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12f      	bne.n	800530a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d103      	bne.n	80052ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	633b      	str	r3, [r7, #48]	; 0x30
 80052b8:	e013      	b.n	80052e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d007      	beq.n	80052d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	4619      	mov	r1, r3
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7fe fef9 	bl	80040c0 <clmt_clust>
 80052ce:	6338      	str	r0, [r7, #48]	; 0x30
 80052d0:	e007      	b.n	80052e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	69db      	ldr	r3, [r3, #28]
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f7fe fc5f 	bl	8003b9e <get_fat>
 80052e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d804      	bhi.n	80052f2 <f_read+0xe2>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2202      	movs	r2, #2
 80052ec:	755a      	strb	r2, [r3, #21]
 80052ee:	2302      	movs	r3, #2
 80052f0:	e0c9      	b.n	8005486 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d104      	bne.n	8005304 <f_read+0xf4>
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	755a      	strb	r2, [r3, #21]
 8005300:	2301      	movs	r3, #1
 8005302:	e0c0      	b.n	8005486 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005308:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	4619      	mov	r1, r3
 8005312:	4610      	mov	r0, r2
 8005314:	f7fe fc24 	bl	8003b60 <clust2sect>
 8005318:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d104      	bne.n	800532a <f_read+0x11a>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2202      	movs	r2, #2
 8005324:	755a      	strb	r2, [r3, #21]
 8005326:	2302      	movs	r3, #2
 8005328:	e0ad      	b.n	8005486 <f_read+0x276>
			sect += csect;
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	4413      	add	r3, r2
 8005330:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	0a5b      	lsrs	r3, r3, #9
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d039      	beq.n	80053b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005342:	4413      	add	r3, r2
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	8952      	ldrh	r2, [r2, #10]
 8005348:	4293      	cmp	r3, r2
 800534a:	d905      	bls.n	8005358 <f_read+0x148>
					cc = fs->csize - csect;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	895b      	ldrh	r3, [r3, #10]
 8005350:	461a      	mov	r2, r3
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	7858      	ldrb	r0, [r3, #1]
 800535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005362:	f7fe f853 	bl	800340c <disk_read>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <f_read+0x166>
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2201      	movs	r2, #1
 8005370:	755a      	strb	r2, [r3, #21]
 8005372:	2301      	movs	r3, #1
 8005374:	e087      	b.n	8005486 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	7d1b      	ldrb	r3, [r3, #20]
 800537a:	b25b      	sxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	da14      	bge.n	80053aa <f_read+0x19a>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800538a:	429a      	cmp	r2, r3
 800538c:	d90d      	bls.n	80053aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a1a      	ldr	r2, [r3, #32]
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	025b      	lsls	r3, r3, #9
 8005398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800539a:	18d0      	adds	r0, r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3330      	adds	r3, #48	; 0x30
 80053a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053a4:	4619      	mov	r1, r3
 80053a6:	f7fe f911 	bl	80035cc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	025b      	lsls	r3, r3, #9
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80053b0:	e050      	b.n	8005454 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d02e      	beq.n	800541a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	7d1b      	ldrb	r3, [r3, #20]
 80053c0:	b25b      	sxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	da18      	bge.n	80053f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	7858      	ldrb	r0, [r3, #1]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	2301      	movs	r3, #1
 80053d6:	f7fe f839 	bl	800344c <disk_write>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <f_read+0x1da>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2201      	movs	r2, #1
 80053e4:	755a      	strb	r2, [r3, #21]
 80053e6:	2301      	movs	r3, #1
 80053e8:	e04d      	b.n	8005486 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	7d1b      	ldrb	r3, [r3, #20]
 80053ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	7858      	ldrb	r0, [r3, #1]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005402:	2301      	movs	r3, #1
 8005404:	69ba      	ldr	r2, [r7, #24]
 8005406:	f7fe f801 	bl	800340c <disk_read>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d004      	beq.n	800541a <f_read+0x20a>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	755a      	strb	r2, [r3, #21]
 8005416:	2301      	movs	r3, #1
 8005418:	e035      	b.n	8005486 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	699b      	ldr	r3, [r3, #24]
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d901      	bls.n	800543a <f_read+0x22a>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005448:	4413      	add	r3, r2
 800544a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800544c:	4619      	mov	r1, r3
 800544e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005450:	f7fe f8bc 	bl	80035cc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	4413      	add	r3, r2
 800545a:	627b      	str	r3, [r7, #36]	; 0x24
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	699a      	ldr	r2, [r3, #24]
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	441a      	add	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	619a      	str	r2, [r3, #24]
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	441a      	add	r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	687a      	ldr	r2, [r7, #4]
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f47f af01 	bne.w	8005286 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3738      	adds	r7, #56	; 0x38
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b08c      	sub	sp, #48	; 0x30
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	607a      	str	r2, [r7, #4]
 800549a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f107 0210 	add.w	r2, r7, #16
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fc74 	bl	8004d9c <validate>
 80054b4:	4603      	mov	r3, r0
 80054b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80054ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d107      	bne.n	80054d2 <f_write+0x44>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	7d5b      	ldrb	r3, [r3, #21]
 80054c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <f_write+0x4a>
 80054d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80054d6:	e14b      	b.n	8005770 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	7d1b      	ldrb	r3, [r3, #20]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <f_write+0x5a>
 80054e4:	2307      	movs	r3, #7
 80054e6:	e143      	b.n	8005770 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	441a      	add	r2, r3
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	429a      	cmp	r2, r3
 80054f6:	f080 812d 	bcs.w	8005754 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	43db      	mvns	r3, r3
 8005500:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005502:	e127      	b.n	8005754 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800550c:	2b00      	cmp	r3, #0
 800550e:	f040 80e3 	bne.w	80056d8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	0a5b      	lsrs	r3, r3, #9
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	8952      	ldrh	r2, [r2, #10]
 800551c:	3a01      	subs	r2, #1
 800551e:	4013      	ands	r3, r2
 8005520:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d143      	bne.n	80055b0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d10c      	bne.n	800554a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11a      	bne.n	8005572 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2100      	movs	r1, #0
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe fd25 	bl	8003f90 <create_chain>
 8005546:	62b8      	str	r0, [r7, #40]	; 0x28
 8005548:	e013      	b.n	8005572 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d007      	beq.n	8005562 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	4619      	mov	r1, r3
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7fe fdb1 	bl	80040c0 <clmt_clust>
 800555e:	62b8      	str	r0, [r7, #40]	; 0x28
 8005560:	e007      	b.n	8005572 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	4619      	mov	r1, r3
 800556a:	4610      	mov	r0, r2
 800556c:	f7fe fd10 	bl	8003f90 <create_chain>
 8005570:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005574:	2b00      	cmp	r3, #0
 8005576:	f000 80f2 	beq.w	800575e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800557a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557c:	2b01      	cmp	r3, #1
 800557e:	d104      	bne.n	800558a <f_write+0xfc>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2202      	movs	r2, #2
 8005584:	755a      	strb	r2, [r3, #21]
 8005586:	2302      	movs	r3, #2
 8005588:	e0f2      	b.n	8005770 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d104      	bne.n	800559c <f_write+0x10e>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	755a      	strb	r2, [r3, #21]
 8005598:	2301      	movs	r3, #1
 800559a:	e0e9      	b.n	8005770 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d102      	bne.n	80055b0 <f_write+0x122>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	7d1b      	ldrb	r3, [r3, #20]
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da18      	bge.n	80055ec <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	7858      	ldrb	r0, [r3, #1]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6a1a      	ldr	r2, [r3, #32]
 80055c8:	2301      	movs	r3, #1
 80055ca:	f7fd ff3f 	bl	800344c <disk_write>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <f_write+0x150>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2201      	movs	r2, #1
 80055d8:	755a      	strb	r2, [r3, #21]
 80055da:	2301      	movs	r3, #1
 80055dc:	e0c8      	b.n	8005770 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	7d1b      	ldrb	r3, [r3, #20]
 80055e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e6:	b2da      	uxtb	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f7fe fab3 	bl	8003b60 <clust2sect>
 80055fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d104      	bne.n	800560c <f_write+0x17e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2202      	movs	r2, #2
 8005606:	755a      	strb	r2, [r3, #21]
 8005608:	2302      	movs	r3, #2
 800560a:	e0b1      	b.n	8005770 <f_write+0x2e2>
			sect += csect;
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	4413      	add	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	0a5b      	lsrs	r3, r3, #9
 8005618:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d03c      	beq.n	800569a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005620:	69ba      	ldr	r2, [r7, #24]
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	4413      	add	r3, r2
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	8952      	ldrh	r2, [r2, #10]
 800562a:	4293      	cmp	r3, r2
 800562c:	d905      	bls.n	800563a <f_write+0x1ac>
					cc = fs->csize - csect;
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	895b      	ldrh	r3, [r3, #10]
 8005632:	461a      	mov	r2, r3
 8005634:	69bb      	ldr	r3, [r7, #24]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	7858      	ldrb	r0, [r3, #1]
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	69f9      	ldr	r1, [r7, #28]
 8005644:	f7fd ff02 	bl	800344c <disk_write>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d004      	beq.n	8005658 <f_write+0x1ca>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2201      	movs	r2, #1
 8005652:	755a      	strb	r2, [r3, #21]
 8005654:	2301      	movs	r3, #1
 8005656:	e08b      	b.n	8005770 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1a      	ldr	r2, [r3, #32]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	6a3a      	ldr	r2, [r7, #32]
 8005662:	429a      	cmp	r2, r3
 8005664:	d915      	bls.n	8005692 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1a      	ldr	r2, [r3, #32]
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	025b      	lsls	r3, r3, #9
 8005676:	69fa      	ldr	r2, [r7, #28]
 8005678:	4413      	add	r3, r2
 800567a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567e:	4619      	mov	r1, r3
 8005680:	f7fd ffa4 	bl	80035cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	7d1b      	ldrb	r3, [r3, #20]
 8005688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800568c:	b2da      	uxtb	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8005692:	6a3b      	ldr	r3, [r7, #32]
 8005694:	025b      	lsls	r3, r3, #9
 8005696:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8005698:	e03f      	b.n	800571a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d016      	beq.n	80056d2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d210      	bcs.n	80056d2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	7858      	ldrb	r0, [r3, #1]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80056ba:	2301      	movs	r3, #1
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	f7fd fea5 	bl	800340c <disk_read>
 80056c2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	755a      	strb	r2, [r3, #21]
 80056ce:	2301      	movs	r3, #1
 80056d0:	e04e      	b.n	8005770 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80056e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d901      	bls.n	80056f2 <f_write+0x264>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005700:	4413      	add	r3, r2
 8005702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005704:	69f9      	ldr	r1, [r7, #28]
 8005706:	4618      	mov	r0, r3
 8005708:	f7fd ff60 	bl	80035cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	7d1b      	ldrb	r3, [r3, #20]
 8005710:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005714:	b2da      	uxtb	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800571a:	69fa      	ldr	r2, [r7, #28]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	4413      	add	r3, r2
 8005720:	61fb      	str	r3, [r7, #28]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	699a      	ldr	r2, [r3, #24]
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	441a      	add	r2, r3
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	619a      	str	r2, [r3, #24]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	429a      	cmp	r2, r3
 8005738:	bf38      	it	cc
 800573a:	461a      	movcc	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	60da      	str	r2, [r3, #12]
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	441a      	add	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f47f aed4 	bne.w	8005504 <f_write+0x76>
 800575c:	e000      	b.n	8005760 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800575e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	7d1b      	ldrb	r3, [r3, #20]
 8005764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005768:	b2da      	uxtb	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3730      	adds	r7, #48	; 0x30
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f107 0208 	add.w	r2, r7, #8
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f7ff fb07 	bl	8004d9c <validate>
 800578e:	4603      	mov	r3, r0
 8005790:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005792:	7dfb      	ldrb	r3, [r7, #23]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d168      	bne.n	800586a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7d1b      	ldrb	r3, [r3, #20]
 800579c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d062      	beq.n	800586a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	7d1b      	ldrb	r3, [r3, #20]
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	da15      	bge.n	80057da <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	7858      	ldrb	r0, [r3, #1]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	2301      	movs	r3, #1
 80057be:	f7fd fe45 	bl	800344c <disk_write>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d001      	beq.n	80057cc <f_sync+0x54>
 80057c8:	2301      	movs	r3, #1
 80057ca:	e04f      	b.n	800586c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	7d1b      	ldrb	r3, [r3, #20]
 80057d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80057da:	f7fd fd77 	bl	80032cc <get_fattime>
 80057de:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e6:	4619      	mov	r1, r3
 80057e8:	4610      	mov	r0, r2
 80057ea:	f7fe f91d 	bl	8003a28 <move_window>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d138      	bne.n	800586a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057fc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	330b      	adds	r3, #11
 8005802:	781a      	ldrb	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	330b      	adds	r3, #11
 8005808:	f042 0220 	orr.w	r2, r2, #32
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6818      	ldr	r0, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	461a      	mov	r2, r3
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	f7fe fe2a 	bl	8004474 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f103 021c 	add.w	r2, r3, #28
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	4619      	mov	r1, r3
 800582c:	4610      	mov	r0, r2
 800582e:	f7fd fea1 	bl	8003574 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	3316      	adds	r3, #22
 8005836:	6939      	ldr	r1, [r7, #16]
 8005838:	4618      	mov	r0, r3
 800583a:	f7fd fe9b 	bl	8003574 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	3312      	adds	r3, #18
 8005842:	2100      	movs	r1, #0
 8005844:	4618      	mov	r0, r3
 8005846:	f7fd fe7a 	bl	800353e <st_word>
					fs->wflag = 1;
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2201      	movs	r2, #1
 800584e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4618      	mov	r0, r3
 8005854:	f7fe f916 	bl	8003a84 <sync_fs>
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7d1b      	ldrb	r3, [r3, #20]
 8005860:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005864:	b2da      	uxtb	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800586a:	7dfb      	ldrb	r3, [r7, #23]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3718      	adds	r7, #24
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7ff ff7b 	bl	8005778 <f_sync>
 8005882:	4603      	mov	r3, r0
 8005884:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8005886:	7bfb      	ldrb	r3, [r7, #15]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d118      	bne.n	80058be <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f107 0208 	add.w	r2, r7, #8
 8005892:	4611      	mov	r1, r2
 8005894:	4618      	mov	r0, r3
 8005896:	f7ff fa81 	bl	8004d9c <validate>
 800589a:	4603      	mov	r3, r0
 800589c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800589e:	7bfb      	ldrb	r3, [r7, #15]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10c      	bne.n	80058be <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe f819 	bl	80038e0 <dec_lock>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b092      	sub	sp, #72	; 0x48
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80058d4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80058d8:	f107 030c 	add.w	r3, r7, #12
 80058dc:	2200      	movs	r2, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f7ff f810 	bl	8004904 <find_volume>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80058ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f040 8099 	bne.w	8005a26 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80058f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	691a      	ldr	r2, [r3, #16]
 80058fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	3b02      	subs	r3, #2
 8005904:	429a      	cmp	r2, r3
 8005906:	d804      	bhi.n	8005912 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	691a      	ldr	r2, [r3, #16]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	e089      	b.n	8005a26 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8005916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d128      	bne.n	8005970 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800591e:	2302      	movs	r3, #2
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005924:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8005926:	f107 0314 	add.w	r3, r7, #20
 800592a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800592c:	4618      	mov	r0, r3
 800592e:	f7fe f936 	bl	8003b9e <get_fat>
 8005932:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8005934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800593a:	d103      	bne.n	8005944 <f_getfree+0x7c>
 800593c:	2301      	movs	r3, #1
 800593e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005942:	e063      	b.n	8005a0c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d103      	bne.n	8005952 <f_getfree+0x8a>
 800594a:	2302      	movs	r3, #2
 800594c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005950:	e05c      	b.n	8005a0c <f_getfree+0x144>
					if (stat == 0) nfree++;
 8005952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005954:	2b00      	cmp	r3, #0
 8005956:	d102      	bne.n	800595e <f_getfree+0x96>
 8005958:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800595a:	3301      	adds	r3, #1
 800595c:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800595e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005960:	3301      	adds	r3, #1
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800596a:	429a      	cmp	r2, r3
 800596c:	d3db      	bcc.n	8005926 <f_getfree+0x5e>
 800596e:	e04d      	b.n	8005a0c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800597c:	2300      	movs	r3, #0
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
 8005980:	2300      	movs	r3, #0
 8005982:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8005984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005986:	2b00      	cmp	r3, #0
 8005988:	d113      	bne.n	80059b2 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	63ba      	str	r2, [r7, #56]	; 0x38
 8005992:	4619      	mov	r1, r3
 8005994:	f7fe f848 	bl	8003a28 <move_window>
 8005998:	4603      	mov	r3, r0
 800599a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800599e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d131      	bne.n	8005a0a <f_getfree+0x142>
							p = fs->win;
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	3330      	adds	r3, #48	; 0x30
 80059aa:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80059ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059b0:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80059b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d10f      	bne.n	80059da <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80059ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059bc:	f7fd fd84 	bl	80034c8 <ld_word>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <f_getfree+0x104>
 80059c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c8:	3301      	adds	r3, #1
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	3302      	adds	r3, #2
 80059d0:	633b      	str	r3, [r7, #48]	; 0x30
 80059d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059d4:	3b02      	subs	r3, #2
 80059d6:	637b      	str	r3, [r7, #52]	; 0x34
 80059d8:	e010      	b.n	80059fc <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80059da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059dc:	f7fd fd8c 	bl	80034f8 <ld_dword>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d102      	bne.n	80059f0 <f_getfree+0x128>
 80059ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ec:	3301      	adds	r3, #1
 80059ee:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	3304      	adds	r3, #4
 80059f4:	633b      	str	r3, [r7, #48]	; 0x30
 80059f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f8:	3b04      	subs	r3, #4
 80059fa:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80059fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059fe:	3b01      	subs	r3, #1
 8005a00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1bd      	bne.n	8005984 <f_getfree+0xbc>
 8005a08:	e000      	b.n	8005a0c <f_getfree+0x144>
							if (res != FR_OK) break;
 8005a0a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a10:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a16:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8005a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1a:	791a      	ldrb	r2, [r3, #4]
 8005a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	b2d2      	uxtb	r2, r2
 8005a24:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8005a26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3748      	adds	r7, #72	; 0x48
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b088      	sub	sp, #32
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	60f8      	str	r0, [r7, #12]
 8005a3a:	60b9      	str	r1, [r7, #8]
 8005a3c:	607a      	str	r2, [r7, #4]
	int n = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005a46:	e01b      	b.n	8005a80 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8005a48:	f107 0310 	add.w	r3, r7, #16
 8005a4c:	f107 0114 	add.w	r1, r7, #20
 8005a50:	2201      	movs	r2, #1
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff fbdc 	bl	8005210 <f_read>
		if (rc != 1) break;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d116      	bne.n	8005a8c <f_gets+0x5a>
		c = s[0];
 8005a5e:	7d3b      	ldrb	r3, [r7, #20]
 8005a60:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8005a62:	7dfb      	ldrb	r3, [r7, #23]
 8005a64:	2b0d      	cmp	r3, #13
 8005a66:	d100      	bne.n	8005a6a <f_gets+0x38>
 8005a68:	e00a      	b.n	8005a80 <f_gets+0x4e>
		*p++ = c;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	61ba      	str	r2, [r7, #24]
 8005a70:	7dfa      	ldrb	r2, [r7, #23]
 8005a72:	701a      	strb	r2, [r3, #0]
		n++;
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	3301      	adds	r3, #1
 8005a78:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8005a7a:	7dfb      	ldrb	r3, [r7, #23]
 8005a7c:	2b0a      	cmp	r3, #10
 8005a7e:	d007      	beq.n	8005a90 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	3b01      	subs	r3, #1
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	dbde      	blt.n	8005a48 <f_gets+0x16>
 8005a8a:	e002      	b.n	8005a92 <f_gets+0x60>
		if (rc != 1) break;
 8005a8c:	bf00      	nop
 8005a8e:	e000      	b.n	8005a92 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8005a90:	bf00      	nop
	}
	*p = 0;
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d001      	beq.n	8005aa2 <f_gets+0x70>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	e000      	b.n	8005aa4 <f_gets+0x72>
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3720      	adds	r7, #32
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b087      	sub	sp, #28
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005aba:	2301      	movs	r3, #1
 8005abc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005ac2:	4b1f      	ldr	r3, [pc, #124]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005ac4:	7a5b      	ldrb	r3, [r3, #9]
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d131      	bne.n	8005b30 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005acc:	4b1c      	ldr	r3, [pc, #112]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005ace:	7a5b      	ldrb	r3, [r3, #9]
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	4b1a      	ldr	r3, [pc, #104]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005adc:	7a5b      	ldrb	r3, [r3, #9]
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	4a17      	ldr	r2, [pc, #92]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005aea:	4b15      	ldr	r3, [pc, #84]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005aec:	7a5b      	ldrb	r3, [r3, #9]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	461a      	mov	r2, r3
 8005af2:	4b13      	ldr	r3, [pc, #76]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005af4:	4413      	add	r3, r2
 8005af6:	79fa      	ldrb	r2, [r7, #7]
 8005af8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005afa:	4b11      	ldr	r3, [pc, #68]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005afc:	7a5b      	ldrb	r3, [r3, #9]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	1c5a      	adds	r2, r3, #1
 8005b02:	b2d1      	uxtb	r1, r2
 8005b04:	4a0e      	ldr	r2, [pc, #56]	; (8005b40 <FATFS_LinkDriverEx+0x94>)
 8005b06:	7251      	strb	r1, [r2, #9]
 8005b08:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005b0a:	7dbb      	ldrb	r3, [r7, #22]
 8005b0c:	3330      	adds	r3, #48	; 0x30
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	3301      	adds	r3, #1
 8005b18:	223a      	movs	r2, #58	; 0x3a
 8005b1a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	3302      	adds	r3, #2
 8005b20:	222f      	movs	r2, #47	; 0x2f
 8005b22:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	3303      	adds	r3, #3
 8005b28:	2200      	movs	r2, #0
 8005b2a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	200002c0 	.word	0x200002c0

08005b44 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005b4e:	2200      	movs	r2, #0
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f7ff ffaa 	bl	8005aac <FATFS_LinkDriverEx>
 8005b58:	4603      	mov	r3, r0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
	...

08005b64 <__errno>:
 8005b64:	4b01      	ldr	r3, [pc, #4]	; (8005b6c <__errno+0x8>)
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	20000020 	.word	0x20000020

08005b70 <__libc_init_array>:
 8005b70:	b570      	push	{r4, r5, r6, lr}
 8005b72:	4d0d      	ldr	r5, [pc, #52]	; (8005ba8 <__libc_init_array+0x38>)
 8005b74:	4c0d      	ldr	r4, [pc, #52]	; (8005bac <__libc_init_array+0x3c>)
 8005b76:	1b64      	subs	r4, r4, r5
 8005b78:	10a4      	asrs	r4, r4, #2
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	42a6      	cmp	r6, r4
 8005b7e:	d109      	bne.n	8005b94 <__libc_init_array+0x24>
 8005b80:	4d0b      	ldr	r5, [pc, #44]	; (8005bb0 <__libc_init_array+0x40>)
 8005b82:	4c0c      	ldr	r4, [pc, #48]	; (8005bb4 <__libc_init_array+0x44>)
 8005b84:	f000 fca8 	bl	80064d8 <_init>
 8005b88:	1b64      	subs	r4, r4, r5
 8005b8a:	10a4      	asrs	r4, r4, #2
 8005b8c:	2600      	movs	r6, #0
 8005b8e:	42a6      	cmp	r6, r4
 8005b90:	d105      	bne.n	8005b9e <__libc_init_array+0x2e>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b98:	4798      	blx	r3
 8005b9a:	3601      	adds	r6, #1
 8005b9c:	e7ee      	b.n	8005b7c <__libc_init_array+0xc>
 8005b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba2:	4798      	blx	r3
 8005ba4:	3601      	adds	r6, #1
 8005ba6:	e7f2      	b.n	8005b8e <__libc_init_array+0x1e>
 8005ba8:	080067f0 	.word	0x080067f0
 8005bac:	080067f0 	.word	0x080067f0
 8005bb0:	080067f0 	.word	0x080067f0
 8005bb4:	080067f4 	.word	0x080067f4

08005bb8 <memset>:
 8005bb8:	4402      	add	r2, r0
 8005bba:	4603      	mov	r3, r0
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d100      	bne.n	8005bc2 <memset+0xa>
 8005bc0:	4770      	bx	lr
 8005bc2:	f803 1b01 	strb.w	r1, [r3], #1
 8005bc6:	e7f9      	b.n	8005bbc <memset+0x4>

08005bc8 <_vsniprintf_r>:
 8005bc8:	b530      	push	{r4, r5, lr}
 8005bca:	4614      	mov	r4, r2
 8005bcc:	2c00      	cmp	r4, #0
 8005bce:	b09b      	sub	sp, #108	; 0x6c
 8005bd0:	4605      	mov	r5, r0
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	da05      	bge.n	8005be2 <_vsniprintf_r+0x1a>
 8005bd6:	238b      	movs	r3, #139	; 0x8b
 8005bd8:	6003      	str	r3, [r0, #0]
 8005bda:	f04f 30ff 	mov.w	r0, #4294967295
 8005bde:	b01b      	add	sp, #108	; 0x6c
 8005be0:	bd30      	pop	{r4, r5, pc}
 8005be2:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005be6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8005bea:	bf14      	ite	ne
 8005bec:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005bf0:	4623      	moveq	r3, r4
 8005bf2:	9302      	str	r3, [sp, #8]
 8005bf4:	9305      	str	r3, [sp, #20]
 8005bf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005bfa:	9100      	str	r1, [sp, #0]
 8005bfc:	9104      	str	r1, [sp, #16]
 8005bfe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005c02:	4669      	mov	r1, sp
 8005c04:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005c06:	f000 f875 	bl	8005cf4 <_svfiprintf_r>
 8005c0a:	1c43      	adds	r3, r0, #1
 8005c0c:	bfbc      	itt	lt
 8005c0e:	238b      	movlt	r3, #139	; 0x8b
 8005c10:	602b      	strlt	r3, [r5, #0]
 8005c12:	2c00      	cmp	r4, #0
 8005c14:	d0e3      	beq.n	8005bde <_vsniprintf_r+0x16>
 8005c16:	9b00      	ldr	r3, [sp, #0]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	701a      	strb	r2, [r3, #0]
 8005c1c:	e7df      	b.n	8005bde <_vsniprintf_r+0x16>
	...

08005c20 <vsniprintf>:
 8005c20:	b507      	push	{r0, r1, r2, lr}
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	460a      	mov	r2, r1
 8005c28:	4601      	mov	r1, r0
 8005c2a:	4803      	ldr	r0, [pc, #12]	; (8005c38 <vsniprintf+0x18>)
 8005c2c:	6800      	ldr	r0, [r0, #0]
 8005c2e:	f7ff ffcb 	bl	8005bc8 <_vsniprintf_r>
 8005c32:	b003      	add	sp, #12
 8005c34:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c38:	20000020 	.word	0x20000020

08005c3c <__ssputs_r>:
 8005c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	688e      	ldr	r6, [r1, #8]
 8005c42:	429e      	cmp	r6, r3
 8005c44:	4682      	mov	sl, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	4690      	mov	r8, r2
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	d838      	bhi.n	8005cc0 <__ssputs_r+0x84>
 8005c4e:	898a      	ldrh	r2, [r1, #12]
 8005c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c54:	d032      	beq.n	8005cbc <__ssputs_r+0x80>
 8005c56:	6825      	ldr	r5, [r4, #0]
 8005c58:	6909      	ldr	r1, [r1, #16]
 8005c5a:	eba5 0901 	sub.w	r9, r5, r1
 8005c5e:	6965      	ldr	r5, [r4, #20]
 8005c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c68:	3301      	adds	r3, #1
 8005c6a:	444b      	add	r3, r9
 8005c6c:	106d      	asrs	r5, r5, #1
 8005c6e:	429d      	cmp	r5, r3
 8005c70:	bf38      	it	cc
 8005c72:	461d      	movcc	r5, r3
 8005c74:	0553      	lsls	r3, r2, #21
 8005c76:	d531      	bpl.n	8005cdc <__ssputs_r+0xa0>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f000 fb63 	bl	8006344 <_malloc_r>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b950      	cbnz	r0, 8005c98 <__ssputs_r+0x5c>
 8005c82:	230c      	movs	r3, #12
 8005c84:	f8ca 3000 	str.w	r3, [sl]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c98:	6921      	ldr	r1, [r4, #16]
 8005c9a:	464a      	mov	r2, r9
 8005c9c:	f000 fabe 	bl	800621c <memcpy>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	6126      	str	r6, [r4, #16]
 8005cae:	6165      	str	r5, [r4, #20]
 8005cb0:	444e      	add	r6, r9
 8005cb2:	eba5 0509 	sub.w	r5, r5, r9
 8005cb6:	6026      	str	r6, [r4, #0]
 8005cb8:	60a5      	str	r5, [r4, #8]
 8005cba:	463e      	mov	r6, r7
 8005cbc:	42be      	cmp	r6, r7
 8005cbe:	d900      	bls.n	8005cc2 <__ssputs_r+0x86>
 8005cc0:	463e      	mov	r6, r7
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	4632      	mov	r2, r6
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	f000 fab6 	bl	8006238 <memmove>
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	1b9b      	subs	r3, r3, r6
 8005cd0:	60a3      	str	r3, [r4, #8]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	4433      	add	r3, r6
 8005cd6:	6023      	str	r3, [r4, #0]
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7db      	b.n	8005c94 <__ssputs_r+0x58>
 8005cdc:	462a      	mov	r2, r5
 8005cde:	f000 fba5 	bl	800642c <_realloc_r>
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d1e1      	bne.n	8005cac <__ssputs_r+0x70>
 8005ce8:	6921      	ldr	r1, [r4, #16]
 8005cea:	4650      	mov	r0, sl
 8005cec:	f000 fabe 	bl	800626c <_free_r>
 8005cf0:	e7c7      	b.n	8005c82 <__ssputs_r+0x46>
	...

08005cf4 <_svfiprintf_r>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	898b      	ldrh	r3, [r1, #12]
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	b09d      	sub	sp, #116	; 0x74
 8005d00:	4607      	mov	r7, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	4614      	mov	r4, r2
 8005d06:	d50e      	bpl.n	8005d26 <_svfiprintf_r+0x32>
 8005d08:	690b      	ldr	r3, [r1, #16]
 8005d0a:	b963      	cbnz	r3, 8005d26 <_svfiprintf_r+0x32>
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	f000 fb19 	bl	8006344 <_malloc_r>
 8005d12:	6028      	str	r0, [r5, #0]
 8005d14:	6128      	str	r0, [r5, #16]
 8005d16:	b920      	cbnz	r0, 8005d22 <_svfiprintf_r+0x2e>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e0d1      	b.n	8005ec6 <_svfiprintf_r+0x1d2>
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	616b      	str	r3, [r5, #20]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2a:	2320      	movs	r3, #32
 8005d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d34:	2330      	movs	r3, #48	; 0x30
 8005d36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ee0 <_svfiprintf_r+0x1ec>
 8005d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d3e:	f04f 0901 	mov.w	r9, #1
 8005d42:	4623      	mov	r3, r4
 8005d44:	469a      	mov	sl, r3
 8005d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d4a:	b10a      	cbz	r2, 8005d50 <_svfiprintf_r+0x5c>
 8005d4c:	2a25      	cmp	r2, #37	; 0x25
 8005d4e:	d1f9      	bne.n	8005d44 <_svfiprintf_r+0x50>
 8005d50:	ebba 0b04 	subs.w	fp, sl, r4
 8005d54:	d00b      	beq.n	8005d6e <_svfiprintf_r+0x7a>
 8005d56:	465b      	mov	r3, fp
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff ff6d 	bl	8005c3c <__ssputs_r>
 8005d62:	3001      	adds	r0, #1
 8005d64:	f000 80aa 	beq.w	8005ebc <_svfiprintf_r+0x1c8>
 8005d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d6a:	445a      	add	r2, fp
 8005d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80a2 	beq.w	8005ebc <_svfiprintf_r+0x1c8>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d82:	f10a 0a01 	add.w	sl, sl, #1
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	9307      	str	r3, [sp, #28]
 8005d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005d90:	4654      	mov	r4, sl
 8005d92:	2205      	movs	r2, #5
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	4851      	ldr	r0, [pc, #324]	; (8005ee0 <_svfiprintf_r+0x1ec>)
 8005d9a:	f7fa fa29 	bl	80001f0 <memchr>
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	b9d8      	cbnz	r0, 8005dda <_svfiprintf_r+0xe6>
 8005da2:	06d0      	lsls	r0, r2, #27
 8005da4:	bf44      	itt	mi
 8005da6:	2320      	movmi	r3, #32
 8005da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dac:	0711      	lsls	r1, r2, #28
 8005dae:	bf44      	itt	mi
 8005db0:	232b      	movmi	r3, #43	; 0x2b
 8005db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dba:	2b2a      	cmp	r3, #42	; 0x2a
 8005dbc:	d015      	beq.n	8005dea <_svfiprintf_r+0xf6>
 8005dbe:	9a07      	ldr	r2, [sp, #28]
 8005dc0:	4654      	mov	r4, sl
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dce:	3b30      	subs	r3, #48	; 0x30
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d94e      	bls.n	8005e72 <_svfiprintf_r+0x17e>
 8005dd4:	b1b0      	cbz	r0, 8005e04 <_svfiprintf_r+0x110>
 8005dd6:	9207      	str	r2, [sp, #28]
 8005dd8:	e014      	b.n	8005e04 <_svfiprintf_r+0x110>
 8005dda:	eba0 0308 	sub.w	r3, r0, r8
 8005dde:	fa09 f303 	lsl.w	r3, r9, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	46a2      	mov	sl, r4
 8005de8:	e7d2      	b.n	8005d90 <_svfiprintf_r+0x9c>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	9103      	str	r1, [sp, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfbb      	ittet	lt
 8005df6:	425b      	neglt	r3, r3
 8005df8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dfc:	9307      	strge	r3, [sp, #28]
 8005dfe:	9307      	strlt	r3, [sp, #28]
 8005e00:	bfb8      	it	lt
 8005e02:	9204      	strlt	r2, [sp, #16]
 8005e04:	7823      	ldrb	r3, [r4, #0]
 8005e06:	2b2e      	cmp	r3, #46	; 0x2e
 8005e08:	d10c      	bne.n	8005e24 <_svfiprintf_r+0x130>
 8005e0a:	7863      	ldrb	r3, [r4, #1]
 8005e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0e:	d135      	bne.n	8005e7c <_svfiprintf_r+0x188>
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	9203      	str	r2, [sp, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bfb8      	it	lt
 8005e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e20:	3402      	adds	r4, #2
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ef0 <_svfiprintf_r+0x1fc>
 8005e28:	7821      	ldrb	r1, [r4, #0]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	4650      	mov	r0, sl
 8005e2e:	f7fa f9df 	bl	80001f0 <memchr>
 8005e32:	b140      	cbz	r0, 8005e46 <_svfiprintf_r+0x152>
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	eba0 000a 	sub.w	r0, r0, sl
 8005e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	4303      	orrs	r3, r0
 8005e42:	3401      	adds	r4, #1
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4826      	ldr	r0, [pc, #152]	; (8005ee4 <_svfiprintf_r+0x1f0>)
 8005e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e50:	2206      	movs	r2, #6
 8005e52:	f7fa f9cd 	bl	80001f0 <memchr>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d038      	beq.n	8005ecc <_svfiprintf_r+0x1d8>
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <_svfiprintf_r+0x1f4>)
 8005e5c:	bb1b      	cbnz	r3, 8005ea6 <_svfiprintf_r+0x1b2>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	3307      	adds	r3, #7
 8005e62:	f023 0307 	bic.w	r3, r3, #7
 8005e66:	3308      	adds	r3, #8
 8005e68:	9303      	str	r3, [sp, #12]
 8005e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6c:	4433      	add	r3, r6
 8005e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e70:	e767      	b.n	8005d42 <_svfiprintf_r+0x4e>
 8005e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e76:	460c      	mov	r4, r1
 8005e78:	2001      	movs	r0, #1
 8005e7a:	e7a5      	b.n	8005dc8 <_svfiprintf_r+0xd4>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	3401      	adds	r4, #1
 8005e80:	9305      	str	r3, [sp, #20]
 8005e82:	4619      	mov	r1, r3
 8005e84:	f04f 0c0a 	mov.w	ip, #10
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8e:	3a30      	subs	r2, #48	; 0x30
 8005e90:	2a09      	cmp	r2, #9
 8005e92:	d903      	bls.n	8005e9c <_svfiprintf_r+0x1a8>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0c5      	beq.n	8005e24 <_svfiprintf_r+0x130>
 8005e98:	9105      	str	r1, [sp, #20]
 8005e9a:	e7c3      	b.n	8005e24 <_svfiprintf_r+0x130>
 8005e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e7f0      	b.n	8005e88 <_svfiprintf_r+0x194>
 8005ea6:	ab03      	add	r3, sp, #12
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	462a      	mov	r2, r5
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <_svfiprintf_r+0x1f8>)
 8005eae:	a904      	add	r1, sp, #16
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f3af 8000 	nop.w
 8005eb6:	1c42      	adds	r2, r0, #1
 8005eb8:	4606      	mov	r6, r0
 8005eba:	d1d6      	bne.n	8005e6a <_svfiprintf_r+0x176>
 8005ebc:	89ab      	ldrh	r3, [r5, #12]
 8005ebe:	065b      	lsls	r3, r3, #25
 8005ec0:	f53f af2c 	bmi.w	8005d1c <_svfiprintf_r+0x28>
 8005ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec6:	b01d      	add	sp, #116	; 0x74
 8005ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ecc:	ab03      	add	r3, sp, #12
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <_svfiprintf_r+0x1f8>)
 8005ed4:	a904      	add	r1, sp, #16
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f000 f87a 	bl	8005fd0 <_printf_i>
 8005edc:	e7eb      	b.n	8005eb6 <_svfiprintf_r+0x1c2>
 8005ede:	bf00      	nop
 8005ee0:	080067b4 	.word	0x080067b4
 8005ee4:	080067be 	.word	0x080067be
 8005ee8:	00000000 	.word	0x00000000
 8005eec:	08005c3d 	.word	0x08005c3d
 8005ef0:	080067ba 	.word	0x080067ba

08005ef4 <_printf_common>:
 8005ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	4616      	mov	r6, r2
 8005efa:	4699      	mov	r9, r3
 8005efc:	688a      	ldr	r2, [r1, #8]
 8005efe:	690b      	ldr	r3, [r1, #16]
 8005f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f04:	4293      	cmp	r3, r2
 8005f06:	bfb8      	it	lt
 8005f08:	4613      	movlt	r3, r2
 8005f0a:	6033      	str	r3, [r6, #0]
 8005f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f10:	4607      	mov	r7, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	b10a      	cbz	r2, 8005f1a <_printf_common+0x26>
 8005f16:	3301      	adds	r3, #1
 8005f18:	6033      	str	r3, [r6, #0]
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	0699      	lsls	r1, r3, #26
 8005f1e:	bf42      	ittt	mi
 8005f20:	6833      	ldrmi	r3, [r6, #0]
 8005f22:	3302      	addmi	r3, #2
 8005f24:	6033      	strmi	r3, [r6, #0]
 8005f26:	6825      	ldr	r5, [r4, #0]
 8005f28:	f015 0506 	ands.w	r5, r5, #6
 8005f2c:	d106      	bne.n	8005f3c <_printf_common+0x48>
 8005f2e:	f104 0a19 	add.w	sl, r4, #25
 8005f32:	68e3      	ldr	r3, [r4, #12]
 8005f34:	6832      	ldr	r2, [r6, #0]
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	42ab      	cmp	r3, r5
 8005f3a:	dc26      	bgt.n	8005f8a <_printf_common+0x96>
 8005f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f40:	1e13      	subs	r3, r2, #0
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	bf18      	it	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	0692      	lsls	r2, r2, #26
 8005f4a:	d42b      	bmi.n	8005fa4 <_printf_common+0xb0>
 8005f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f50:	4649      	mov	r1, r9
 8005f52:	4638      	mov	r0, r7
 8005f54:	47c0      	blx	r8
 8005f56:	3001      	adds	r0, #1
 8005f58:	d01e      	beq.n	8005f98 <_printf_common+0xa4>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	68e5      	ldr	r5, [r4, #12]
 8005f5e:	6832      	ldr	r2, [r6, #0]
 8005f60:	f003 0306 	and.w	r3, r3, #6
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	bf08      	it	eq
 8005f68:	1aad      	subeq	r5, r5, r2
 8005f6a:	68a3      	ldr	r3, [r4, #8]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	bf0c      	ite	eq
 8005f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f74:	2500      	movne	r5, #0
 8005f76:	4293      	cmp	r3, r2
 8005f78:	bfc4      	itt	gt
 8005f7a:	1a9b      	subgt	r3, r3, r2
 8005f7c:	18ed      	addgt	r5, r5, r3
 8005f7e:	2600      	movs	r6, #0
 8005f80:	341a      	adds	r4, #26
 8005f82:	42b5      	cmp	r5, r6
 8005f84:	d11a      	bne.n	8005fbc <_printf_common+0xc8>
 8005f86:	2000      	movs	r0, #0
 8005f88:	e008      	b.n	8005f9c <_printf_common+0xa8>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4638      	mov	r0, r7
 8005f92:	47c0      	blx	r8
 8005f94:	3001      	adds	r0, #1
 8005f96:	d103      	bne.n	8005fa0 <_printf_common+0xac>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	e7c6      	b.n	8005f32 <_printf_common+0x3e>
 8005fa4:	18e1      	adds	r1, r4, r3
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	2030      	movs	r0, #48	; 0x30
 8005faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fae:	4422      	add	r2, r4
 8005fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb8:	3302      	adds	r3, #2
 8005fba:	e7c7      	b.n	8005f4c <_printf_common+0x58>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d0e6      	beq.n	8005f98 <_printf_common+0xa4>
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7d9      	b.n	8005f82 <_printf_common+0x8e>
	...

08005fd0 <_printf_i>:
 8005fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	7e0f      	ldrb	r7, [r1, #24]
 8005fd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fd8:	2f78      	cmp	r7, #120	; 0x78
 8005fda:	4691      	mov	r9, r2
 8005fdc:	4680      	mov	r8, r0
 8005fde:	460c      	mov	r4, r1
 8005fe0:	469a      	mov	sl, r3
 8005fe2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fe6:	d807      	bhi.n	8005ff8 <_printf_i+0x28>
 8005fe8:	2f62      	cmp	r7, #98	; 0x62
 8005fea:	d80a      	bhi.n	8006002 <_printf_i+0x32>
 8005fec:	2f00      	cmp	r7, #0
 8005fee:	f000 80d8 	beq.w	80061a2 <_printf_i+0x1d2>
 8005ff2:	2f58      	cmp	r7, #88	; 0x58
 8005ff4:	f000 80a3 	beq.w	800613e <_printf_i+0x16e>
 8005ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006000:	e03a      	b.n	8006078 <_printf_i+0xa8>
 8006002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006006:	2b15      	cmp	r3, #21
 8006008:	d8f6      	bhi.n	8005ff8 <_printf_i+0x28>
 800600a:	a101      	add	r1, pc, #4	; (adr r1, 8006010 <_printf_i+0x40>)
 800600c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006010:	08006069 	.word	0x08006069
 8006014:	0800607d 	.word	0x0800607d
 8006018:	08005ff9 	.word	0x08005ff9
 800601c:	08005ff9 	.word	0x08005ff9
 8006020:	08005ff9 	.word	0x08005ff9
 8006024:	08005ff9 	.word	0x08005ff9
 8006028:	0800607d 	.word	0x0800607d
 800602c:	08005ff9 	.word	0x08005ff9
 8006030:	08005ff9 	.word	0x08005ff9
 8006034:	08005ff9 	.word	0x08005ff9
 8006038:	08005ff9 	.word	0x08005ff9
 800603c:	08006189 	.word	0x08006189
 8006040:	080060ad 	.word	0x080060ad
 8006044:	0800616b 	.word	0x0800616b
 8006048:	08005ff9 	.word	0x08005ff9
 800604c:	08005ff9 	.word	0x08005ff9
 8006050:	080061ab 	.word	0x080061ab
 8006054:	08005ff9 	.word	0x08005ff9
 8006058:	080060ad 	.word	0x080060ad
 800605c:	08005ff9 	.word	0x08005ff9
 8006060:	08005ff9 	.word	0x08005ff9
 8006064:	08006173 	.word	0x08006173
 8006068:	682b      	ldr	r3, [r5, #0]
 800606a:	1d1a      	adds	r2, r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	602a      	str	r2, [r5, #0]
 8006070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006078:	2301      	movs	r3, #1
 800607a:	e0a3      	b.n	80061c4 <_printf_i+0x1f4>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	6829      	ldr	r1, [r5, #0]
 8006080:	0606      	lsls	r6, r0, #24
 8006082:	f101 0304 	add.w	r3, r1, #4
 8006086:	d50a      	bpl.n	800609e <_printf_i+0xce>
 8006088:	680e      	ldr	r6, [r1, #0]
 800608a:	602b      	str	r3, [r5, #0]
 800608c:	2e00      	cmp	r6, #0
 800608e:	da03      	bge.n	8006098 <_printf_i+0xc8>
 8006090:	232d      	movs	r3, #45	; 0x2d
 8006092:	4276      	negs	r6, r6
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006098:	485e      	ldr	r0, [pc, #376]	; (8006214 <_printf_i+0x244>)
 800609a:	230a      	movs	r3, #10
 800609c:	e019      	b.n	80060d2 <_printf_i+0x102>
 800609e:	680e      	ldr	r6, [r1, #0]
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80060a6:	bf18      	it	ne
 80060a8:	b236      	sxthne	r6, r6
 80060aa:	e7ef      	b.n	800608c <_printf_i+0xbc>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	6820      	ldr	r0, [r4, #0]
 80060b0:	1d19      	adds	r1, r3, #4
 80060b2:	6029      	str	r1, [r5, #0]
 80060b4:	0601      	lsls	r1, r0, #24
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0xec>
 80060b8:	681e      	ldr	r6, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <_printf_i+0xf2>
 80060bc:	0646      	lsls	r6, r0, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0xe8>
 80060c0:	881e      	ldrh	r6, [r3, #0]
 80060c2:	4854      	ldr	r0, [pc, #336]	; (8006214 <_printf_i+0x244>)
 80060c4:	2f6f      	cmp	r7, #111	; 0x6f
 80060c6:	bf0c      	ite	eq
 80060c8:	2308      	moveq	r3, #8
 80060ca:	230a      	movne	r3, #10
 80060cc:	2100      	movs	r1, #0
 80060ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060d2:	6865      	ldr	r5, [r4, #4]
 80060d4:	60a5      	str	r5, [r4, #8]
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	bfa2      	ittt	ge
 80060da:	6821      	ldrge	r1, [r4, #0]
 80060dc:	f021 0104 	bicge.w	r1, r1, #4
 80060e0:	6021      	strge	r1, [r4, #0]
 80060e2:	b90e      	cbnz	r6, 80060e8 <_printf_i+0x118>
 80060e4:	2d00      	cmp	r5, #0
 80060e6:	d04d      	beq.n	8006184 <_printf_i+0x1b4>
 80060e8:	4615      	mov	r5, r2
 80060ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80060ee:	fb03 6711 	mls	r7, r3, r1, r6
 80060f2:	5dc7      	ldrb	r7, [r0, r7]
 80060f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060f8:	4637      	mov	r7, r6
 80060fa:	42bb      	cmp	r3, r7
 80060fc:	460e      	mov	r6, r1
 80060fe:	d9f4      	bls.n	80060ea <_printf_i+0x11a>
 8006100:	2b08      	cmp	r3, #8
 8006102:	d10b      	bne.n	800611c <_printf_i+0x14c>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	07de      	lsls	r6, r3, #31
 8006108:	d508      	bpl.n	800611c <_printf_i+0x14c>
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	6861      	ldr	r1, [r4, #4]
 800610e:	4299      	cmp	r1, r3
 8006110:	bfde      	ittt	le
 8006112:	2330      	movle	r3, #48	; 0x30
 8006114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006118:	f105 35ff 	addle.w	r5, r5, #4294967295
 800611c:	1b52      	subs	r2, r2, r5
 800611e:	6122      	str	r2, [r4, #16]
 8006120:	f8cd a000 	str.w	sl, [sp]
 8006124:	464b      	mov	r3, r9
 8006126:	aa03      	add	r2, sp, #12
 8006128:	4621      	mov	r1, r4
 800612a:	4640      	mov	r0, r8
 800612c:	f7ff fee2 	bl	8005ef4 <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	d14c      	bne.n	80061ce <_printf_i+0x1fe>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	b004      	add	sp, #16
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	4835      	ldr	r0, [pc, #212]	; (8006214 <_printf_i+0x244>)
 8006140:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006144:	6829      	ldr	r1, [r5, #0]
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	f851 6b04 	ldr.w	r6, [r1], #4
 800614c:	6029      	str	r1, [r5, #0]
 800614e:	061d      	lsls	r5, r3, #24
 8006150:	d514      	bpl.n	800617c <_printf_i+0x1ac>
 8006152:	07df      	lsls	r7, r3, #31
 8006154:	bf44      	itt	mi
 8006156:	f043 0320 	orrmi.w	r3, r3, #32
 800615a:	6023      	strmi	r3, [r4, #0]
 800615c:	b91e      	cbnz	r6, 8006166 <_printf_i+0x196>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f023 0320 	bic.w	r3, r3, #32
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	2310      	movs	r3, #16
 8006168:	e7b0      	b.n	80060cc <_printf_i+0xfc>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f043 0320 	orr.w	r3, r3, #32
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	2378      	movs	r3, #120	; 0x78
 8006174:	4828      	ldr	r0, [pc, #160]	; (8006218 <_printf_i+0x248>)
 8006176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800617a:	e7e3      	b.n	8006144 <_printf_i+0x174>
 800617c:	0659      	lsls	r1, r3, #25
 800617e:	bf48      	it	mi
 8006180:	b2b6      	uxthmi	r6, r6
 8006182:	e7e6      	b.n	8006152 <_printf_i+0x182>
 8006184:	4615      	mov	r5, r2
 8006186:	e7bb      	b.n	8006100 <_printf_i+0x130>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	6826      	ldr	r6, [r4, #0]
 800618c:	6961      	ldr	r1, [r4, #20]
 800618e:	1d18      	adds	r0, r3, #4
 8006190:	6028      	str	r0, [r5, #0]
 8006192:	0635      	lsls	r5, r6, #24
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	d501      	bpl.n	800619c <_printf_i+0x1cc>
 8006198:	6019      	str	r1, [r3, #0]
 800619a:	e002      	b.n	80061a2 <_printf_i+0x1d2>
 800619c:	0670      	lsls	r0, r6, #25
 800619e:	d5fb      	bpl.n	8006198 <_printf_i+0x1c8>
 80061a0:	8019      	strh	r1, [r3, #0]
 80061a2:	2300      	movs	r3, #0
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	4615      	mov	r5, r2
 80061a8:	e7ba      	b.n	8006120 <_printf_i+0x150>
 80061aa:	682b      	ldr	r3, [r5, #0]
 80061ac:	1d1a      	adds	r2, r3, #4
 80061ae:	602a      	str	r2, [r5, #0]
 80061b0:	681d      	ldr	r5, [r3, #0]
 80061b2:	6862      	ldr	r2, [r4, #4]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fa f81a 	bl	80001f0 <memchr>
 80061bc:	b108      	cbz	r0, 80061c2 <_printf_i+0x1f2>
 80061be:	1b40      	subs	r0, r0, r5
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	2300      	movs	r3, #0
 80061c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061cc:	e7a8      	b.n	8006120 <_printf_i+0x150>
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	462a      	mov	r2, r5
 80061d2:	4649      	mov	r1, r9
 80061d4:	4640      	mov	r0, r8
 80061d6:	47d0      	blx	sl
 80061d8:	3001      	adds	r0, #1
 80061da:	d0ab      	beq.n	8006134 <_printf_i+0x164>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	079b      	lsls	r3, r3, #30
 80061e0:	d413      	bmi.n	800620a <_printf_i+0x23a>
 80061e2:	68e0      	ldr	r0, [r4, #12]
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	4298      	cmp	r0, r3
 80061e8:	bfb8      	it	lt
 80061ea:	4618      	movlt	r0, r3
 80061ec:	e7a4      	b.n	8006138 <_printf_i+0x168>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4632      	mov	r2, r6
 80061f2:	4649      	mov	r1, r9
 80061f4:	4640      	mov	r0, r8
 80061f6:	47d0      	blx	sl
 80061f8:	3001      	adds	r0, #1
 80061fa:	d09b      	beq.n	8006134 <_printf_i+0x164>
 80061fc:	3501      	adds	r5, #1
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	9903      	ldr	r1, [sp, #12]
 8006202:	1a5b      	subs	r3, r3, r1
 8006204:	42ab      	cmp	r3, r5
 8006206:	dcf2      	bgt.n	80061ee <_printf_i+0x21e>
 8006208:	e7eb      	b.n	80061e2 <_printf_i+0x212>
 800620a:	2500      	movs	r5, #0
 800620c:	f104 0619 	add.w	r6, r4, #25
 8006210:	e7f5      	b.n	80061fe <_printf_i+0x22e>
 8006212:	bf00      	nop
 8006214:	080067c5 	.word	0x080067c5
 8006218:	080067d6 	.word	0x080067d6

0800621c <memcpy>:
 800621c:	440a      	add	r2, r1
 800621e:	4291      	cmp	r1, r2
 8006220:	f100 33ff 	add.w	r3, r0, #4294967295
 8006224:	d100      	bne.n	8006228 <memcpy+0xc>
 8006226:	4770      	bx	lr
 8006228:	b510      	push	{r4, lr}
 800622a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006232:	4291      	cmp	r1, r2
 8006234:	d1f9      	bne.n	800622a <memcpy+0xe>
 8006236:	bd10      	pop	{r4, pc}

08006238 <memmove>:
 8006238:	4288      	cmp	r0, r1
 800623a:	b510      	push	{r4, lr}
 800623c:	eb01 0402 	add.w	r4, r1, r2
 8006240:	d902      	bls.n	8006248 <memmove+0x10>
 8006242:	4284      	cmp	r4, r0
 8006244:	4623      	mov	r3, r4
 8006246:	d807      	bhi.n	8006258 <memmove+0x20>
 8006248:	1e43      	subs	r3, r0, #1
 800624a:	42a1      	cmp	r1, r4
 800624c:	d008      	beq.n	8006260 <memmove+0x28>
 800624e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006256:	e7f8      	b.n	800624a <memmove+0x12>
 8006258:	4402      	add	r2, r0
 800625a:	4601      	mov	r1, r0
 800625c:	428a      	cmp	r2, r1
 800625e:	d100      	bne.n	8006262 <memmove+0x2a>
 8006260:	bd10      	pop	{r4, pc}
 8006262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800626a:	e7f7      	b.n	800625c <memmove+0x24>

0800626c <_free_r>:
 800626c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626e:	2900      	cmp	r1, #0
 8006270:	d044      	beq.n	80062fc <_free_r+0x90>
 8006272:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006276:	9001      	str	r0, [sp, #4]
 8006278:	2b00      	cmp	r3, #0
 800627a:	f1a1 0404 	sub.w	r4, r1, #4
 800627e:	bfb8      	it	lt
 8006280:	18e4      	addlt	r4, r4, r3
 8006282:	f000 f913 	bl	80064ac <__malloc_lock>
 8006286:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <_free_r+0x94>)
 8006288:	9801      	ldr	r0, [sp, #4]
 800628a:	6813      	ldr	r3, [r2, #0]
 800628c:	b933      	cbnz	r3, 800629c <_free_r+0x30>
 800628e:	6063      	str	r3, [r4, #4]
 8006290:	6014      	str	r4, [r2, #0]
 8006292:	b003      	add	sp, #12
 8006294:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006298:	f000 b90e 	b.w	80064b8 <__malloc_unlock>
 800629c:	42a3      	cmp	r3, r4
 800629e:	d908      	bls.n	80062b2 <_free_r+0x46>
 80062a0:	6825      	ldr	r5, [r4, #0]
 80062a2:	1961      	adds	r1, r4, r5
 80062a4:	428b      	cmp	r3, r1
 80062a6:	bf01      	itttt	eq
 80062a8:	6819      	ldreq	r1, [r3, #0]
 80062aa:	685b      	ldreq	r3, [r3, #4]
 80062ac:	1949      	addeq	r1, r1, r5
 80062ae:	6021      	streq	r1, [r4, #0]
 80062b0:	e7ed      	b.n	800628e <_free_r+0x22>
 80062b2:	461a      	mov	r2, r3
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b10b      	cbz	r3, 80062bc <_free_r+0x50>
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d9fa      	bls.n	80062b2 <_free_r+0x46>
 80062bc:	6811      	ldr	r1, [r2, #0]
 80062be:	1855      	adds	r5, r2, r1
 80062c0:	42a5      	cmp	r5, r4
 80062c2:	d10b      	bne.n	80062dc <_free_r+0x70>
 80062c4:	6824      	ldr	r4, [r4, #0]
 80062c6:	4421      	add	r1, r4
 80062c8:	1854      	adds	r4, r2, r1
 80062ca:	42a3      	cmp	r3, r4
 80062cc:	6011      	str	r1, [r2, #0]
 80062ce:	d1e0      	bne.n	8006292 <_free_r+0x26>
 80062d0:	681c      	ldr	r4, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	6053      	str	r3, [r2, #4]
 80062d6:	4421      	add	r1, r4
 80062d8:	6011      	str	r1, [r2, #0]
 80062da:	e7da      	b.n	8006292 <_free_r+0x26>
 80062dc:	d902      	bls.n	80062e4 <_free_r+0x78>
 80062de:	230c      	movs	r3, #12
 80062e0:	6003      	str	r3, [r0, #0]
 80062e2:	e7d6      	b.n	8006292 <_free_r+0x26>
 80062e4:	6825      	ldr	r5, [r4, #0]
 80062e6:	1961      	adds	r1, r4, r5
 80062e8:	428b      	cmp	r3, r1
 80062ea:	bf04      	itt	eq
 80062ec:	6819      	ldreq	r1, [r3, #0]
 80062ee:	685b      	ldreq	r3, [r3, #4]
 80062f0:	6063      	str	r3, [r4, #4]
 80062f2:	bf04      	itt	eq
 80062f4:	1949      	addeq	r1, r1, r5
 80062f6:	6021      	streq	r1, [r4, #0]
 80062f8:	6054      	str	r4, [r2, #4]
 80062fa:	e7ca      	b.n	8006292 <_free_r+0x26>
 80062fc:	b003      	add	sp, #12
 80062fe:	bd30      	pop	{r4, r5, pc}
 8006300:	200002cc 	.word	0x200002cc

08006304 <sbrk_aligned>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	4e0e      	ldr	r6, [pc, #56]	; (8006340 <sbrk_aligned+0x3c>)
 8006308:	460c      	mov	r4, r1
 800630a:	6831      	ldr	r1, [r6, #0]
 800630c:	4605      	mov	r5, r0
 800630e:	b911      	cbnz	r1, 8006316 <sbrk_aligned+0x12>
 8006310:	f000 f8bc 	bl	800648c <_sbrk_r>
 8006314:	6030      	str	r0, [r6, #0]
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 f8b7 	bl	800648c <_sbrk_r>
 800631e:	1c43      	adds	r3, r0, #1
 8006320:	d00a      	beq.n	8006338 <sbrk_aligned+0x34>
 8006322:	1cc4      	adds	r4, r0, #3
 8006324:	f024 0403 	bic.w	r4, r4, #3
 8006328:	42a0      	cmp	r0, r4
 800632a:	d007      	beq.n	800633c <sbrk_aligned+0x38>
 800632c:	1a21      	subs	r1, r4, r0
 800632e:	4628      	mov	r0, r5
 8006330:	f000 f8ac 	bl	800648c <_sbrk_r>
 8006334:	3001      	adds	r0, #1
 8006336:	d101      	bne.n	800633c <sbrk_aligned+0x38>
 8006338:	f04f 34ff 	mov.w	r4, #4294967295
 800633c:	4620      	mov	r0, r4
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	200002d0 	.word	0x200002d0

08006344 <_malloc_r>:
 8006344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006348:	1ccd      	adds	r5, r1, #3
 800634a:	f025 0503 	bic.w	r5, r5, #3
 800634e:	3508      	adds	r5, #8
 8006350:	2d0c      	cmp	r5, #12
 8006352:	bf38      	it	cc
 8006354:	250c      	movcc	r5, #12
 8006356:	2d00      	cmp	r5, #0
 8006358:	4607      	mov	r7, r0
 800635a:	db01      	blt.n	8006360 <_malloc_r+0x1c>
 800635c:	42a9      	cmp	r1, r5
 800635e:	d905      	bls.n	800636c <_malloc_r+0x28>
 8006360:	230c      	movs	r3, #12
 8006362:	603b      	str	r3, [r7, #0]
 8006364:	2600      	movs	r6, #0
 8006366:	4630      	mov	r0, r6
 8006368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800636c:	4e2e      	ldr	r6, [pc, #184]	; (8006428 <_malloc_r+0xe4>)
 800636e:	f000 f89d 	bl	80064ac <__malloc_lock>
 8006372:	6833      	ldr	r3, [r6, #0]
 8006374:	461c      	mov	r4, r3
 8006376:	bb34      	cbnz	r4, 80063c6 <_malloc_r+0x82>
 8006378:	4629      	mov	r1, r5
 800637a:	4638      	mov	r0, r7
 800637c:	f7ff ffc2 	bl	8006304 <sbrk_aligned>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	4604      	mov	r4, r0
 8006384:	d14d      	bne.n	8006422 <_malloc_r+0xde>
 8006386:	6834      	ldr	r4, [r6, #0]
 8006388:	4626      	mov	r6, r4
 800638a:	2e00      	cmp	r6, #0
 800638c:	d140      	bne.n	8006410 <_malloc_r+0xcc>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	4631      	mov	r1, r6
 8006392:	4638      	mov	r0, r7
 8006394:	eb04 0803 	add.w	r8, r4, r3
 8006398:	f000 f878 	bl	800648c <_sbrk_r>
 800639c:	4580      	cmp	r8, r0
 800639e:	d13a      	bne.n	8006416 <_malloc_r+0xd2>
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	3503      	adds	r5, #3
 80063a4:	1a6d      	subs	r5, r5, r1
 80063a6:	f025 0503 	bic.w	r5, r5, #3
 80063aa:	3508      	adds	r5, #8
 80063ac:	2d0c      	cmp	r5, #12
 80063ae:	bf38      	it	cc
 80063b0:	250c      	movcc	r5, #12
 80063b2:	4629      	mov	r1, r5
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7ff ffa5 	bl	8006304 <sbrk_aligned>
 80063ba:	3001      	adds	r0, #1
 80063bc:	d02b      	beq.n	8006416 <_malloc_r+0xd2>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	442b      	add	r3, r5
 80063c2:	6023      	str	r3, [r4, #0]
 80063c4:	e00e      	b.n	80063e4 <_malloc_r+0xa0>
 80063c6:	6822      	ldr	r2, [r4, #0]
 80063c8:	1b52      	subs	r2, r2, r5
 80063ca:	d41e      	bmi.n	800640a <_malloc_r+0xc6>
 80063cc:	2a0b      	cmp	r2, #11
 80063ce:	d916      	bls.n	80063fe <_malloc_r+0xba>
 80063d0:	1961      	adds	r1, r4, r5
 80063d2:	42a3      	cmp	r3, r4
 80063d4:	6025      	str	r5, [r4, #0]
 80063d6:	bf18      	it	ne
 80063d8:	6059      	strne	r1, [r3, #4]
 80063da:	6863      	ldr	r3, [r4, #4]
 80063dc:	bf08      	it	eq
 80063de:	6031      	streq	r1, [r6, #0]
 80063e0:	5162      	str	r2, [r4, r5]
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	4638      	mov	r0, r7
 80063e6:	f104 060b 	add.w	r6, r4, #11
 80063ea:	f000 f865 	bl	80064b8 <__malloc_unlock>
 80063ee:	f026 0607 	bic.w	r6, r6, #7
 80063f2:	1d23      	adds	r3, r4, #4
 80063f4:	1af2      	subs	r2, r6, r3
 80063f6:	d0b6      	beq.n	8006366 <_malloc_r+0x22>
 80063f8:	1b9b      	subs	r3, r3, r6
 80063fa:	50a3      	str	r3, [r4, r2]
 80063fc:	e7b3      	b.n	8006366 <_malloc_r+0x22>
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	bf0c      	ite	eq
 8006404:	6032      	streq	r2, [r6, #0]
 8006406:	605a      	strne	r2, [r3, #4]
 8006408:	e7ec      	b.n	80063e4 <_malloc_r+0xa0>
 800640a:	4623      	mov	r3, r4
 800640c:	6864      	ldr	r4, [r4, #4]
 800640e:	e7b2      	b.n	8006376 <_malloc_r+0x32>
 8006410:	4634      	mov	r4, r6
 8006412:	6876      	ldr	r6, [r6, #4]
 8006414:	e7b9      	b.n	800638a <_malloc_r+0x46>
 8006416:	230c      	movs	r3, #12
 8006418:	603b      	str	r3, [r7, #0]
 800641a:	4638      	mov	r0, r7
 800641c:	f000 f84c 	bl	80064b8 <__malloc_unlock>
 8006420:	e7a1      	b.n	8006366 <_malloc_r+0x22>
 8006422:	6025      	str	r5, [r4, #0]
 8006424:	e7de      	b.n	80063e4 <_malloc_r+0xa0>
 8006426:	bf00      	nop
 8006428:	200002cc 	.word	0x200002cc

0800642c <_realloc_r>:
 800642c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006430:	4680      	mov	r8, r0
 8006432:	4614      	mov	r4, r2
 8006434:	460e      	mov	r6, r1
 8006436:	b921      	cbnz	r1, 8006442 <_realloc_r+0x16>
 8006438:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	4611      	mov	r1, r2
 800643e:	f7ff bf81 	b.w	8006344 <_malloc_r>
 8006442:	b92a      	cbnz	r2, 8006450 <_realloc_r+0x24>
 8006444:	f7ff ff12 	bl	800626c <_free_r>
 8006448:	4625      	mov	r5, r4
 800644a:	4628      	mov	r0, r5
 800644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006450:	f000 f838 	bl	80064c4 <_malloc_usable_size_r>
 8006454:	4284      	cmp	r4, r0
 8006456:	4607      	mov	r7, r0
 8006458:	d802      	bhi.n	8006460 <_realloc_r+0x34>
 800645a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800645e:	d812      	bhi.n	8006486 <_realloc_r+0x5a>
 8006460:	4621      	mov	r1, r4
 8006462:	4640      	mov	r0, r8
 8006464:	f7ff ff6e 	bl	8006344 <_malloc_r>
 8006468:	4605      	mov	r5, r0
 800646a:	2800      	cmp	r0, #0
 800646c:	d0ed      	beq.n	800644a <_realloc_r+0x1e>
 800646e:	42bc      	cmp	r4, r7
 8006470:	4622      	mov	r2, r4
 8006472:	4631      	mov	r1, r6
 8006474:	bf28      	it	cs
 8006476:	463a      	movcs	r2, r7
 8006478:	f7ff fed0 	bl	800621c <memcpy>
 800647c:	4631      	mov	r1, r6
 800647e:	4640      	mov	r0, r8
 8006480:	f7ff fef4 	bl	800626c <_free_r>
 8006484:	e7e1      	b.n	800644a <_realloc_r+0x1e>
 8006486:	4635      	mov	r5, r6
 8006488:	e7df      	b.n	800644a <_realloc_r+0x1e>
	...

0800648c <_sbrk_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d06      	ldr	r5, [pc, #24]	; (80064a8 <_sbrk_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	f7fa fbc6 	bl	8000c28 <_sbrk>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_sbrk_r+0x1a>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_sbrk_r+0x1a>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	200002d4 	.word	0x200002d4

080064ac <__malloc_lock>:
 80064ac:	4801      	ldr	r0, [pc, #4]	; (80064b4 <__malloc_lock+0x8>)
 80064ae:	f000 b811 	b.w	80064d4 <__retarget_lock_acquire_recursive>
 80064b2:	bf00      	nop
 80064b4:	200002d8 	.word	0x200002d8

080064b8 <__malloc_unlock>:
 80064b8:	4801      	ldr	r0, [pc, #4]	; (80064c0 <__malloc_unlock+0x8>)
 80064ba:	f000 b80c 	b.w	80064d6 <__retarget_lock_release_recursive>
 80064be:	bf00      	nop
 80064c0:	200002d8 	.word	0x200002d8

080064c4 <_malloc_usable_size_r>:
 80064c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c8:	1f18      	subs	r0, r3, #4
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	bfbc      	itt	lt
 80064ce:	580b      	ldrlt	r3, [r1, r0]
 80064d0:	18c0      	addlt	r0, r0, r3
 80064d2:	4770      	bx	lr

080064d4 <__retarget_lock_acquire_recursive>:
 80064d4:	4770      	bx	lr

080064d6 <__retarget_lock_release_recursive>:
 80064d6:	4770      	bx	lr

080064d8 <_init>:
 80064d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064da:	bf00      	nop
 80064dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064de:	bc08      	pop	{r3}
 80064e0:	469e      	mov	lr, r3
 80064e2:	4770      	bx	lr

080064e4 <_fini>:
 80064e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064e6:	bf00      	nop
 80064e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ea:	bc08      	pop	{r3}
 80064ec:	469e      	mov	lr, r3
 80064ee:	4770      	bx	lr
