
LoRa-Module_RFM95.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08007590  08007590  00017590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f4  080079f4  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079fc  080079fc  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a00  08007a00  00017a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000170  08007b74  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08007b74  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001218d  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002661  00000000  00000000  0003232d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  00034990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00035918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023664  00000000  00000000  00036798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c4d  00000000  00000000  00059dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4bf7  00000000  00000000  0006ca49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00141640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a94  00000000  00000000  00141690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007578 	.word	0x08007578

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	08007578 	.word	0x08007578

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9bf 	b.w	8000620 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000632:	2300      	movs	r3, #0
 8000634:	777b      	strb	r3, [r7, #29]
 8000636:	e01b      	b.n	8000670 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000638:	2300      	movs	r3, #0
 800063a:	77bb      	strb	r3, [r7, #30]
 800063c:	e012      	b.n	8000664 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800063e:	7fba      	ldrb	r2, [r7, #30]
 8000640:	7f7b      	ldrb	r3, [r7, #29]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1899      	adds	r1, r3, r2
 800064c:	7fba      	ldrb	r2, [r7, #30]
 800064e:	7f7b      	ldrb	r3, [r7, #29]
 8000650:	7808      	ldrb	r0, [r1, #0]
 8000652:	4961      	ldr	r1, [pc, #388]	; (80007d8 <AES_Encrypt+0x1b4>)
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	440a      	add	r2, r1
 8000658:	4413      	add	r3, r2
 800065a:	4602      	mov	r2, r0
 800065c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800065e:	7fbb      	ldrb	r3, [r7, #30]
 8000660:	3301      	adds	r3, #1
 8000662:	77bb      	strb	r3, [r7, #30]
 8000664:	7fbb      	ldrb	r3, [r7, #30]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d9e9      	bls.n	800063e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800066a:	7f7b      	ldrb	r3, [r7, #29]
 800066c:	3301      	adds	r3, #1
 800066e:	777b      	strb	r3, [r7, #29]
 8000670:	7f7b      	ldrb	r3, [r7, #29]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d9e0      	bls.n	8000638 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	77fb      	strb	r3, [r7, #31]
 800067a:	e00b      	b.n	8000694 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800067c:	7ffb      	ldrb	r3, [r7, #31]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	441a      	add	r2, r3
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	3320      	adds	r3, #32
 8000688:	443b      	add	r3, r7
 800068a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	3301      	adds	r3, #1
 8000692:	77fb      	strb	r3, [r7, #31]
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	d9f0      	bls.n	800067c <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f89c 	bl	80007dc <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 80006a4:	2301      	movs	r3, #1
 80006a6:	773b      	strb	r3, [r7, #28]
 80006a8:	e038      	b.n	800071c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	777b      	strb	r3, [r7, #29]
 80006ae:	e01f      	b.n	80006f0 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	77bb      	strb	r3, [r7, #30]
 80006b4:	e016      	b.n	80006e4 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 80006b6:	7fba      	ldrb	r2, [r7, #30]
 80006b8:	7f7b      	ldrb	r3, [r7, #29]
 80006ba:	4947      	ldr	r1, [pc, #284]	; (80007d8 <AES_Encrypt+0x1b4>)
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	440a      	add	r2, r1
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	7fbd      	ldrb	r5, [r7, #30]
 80006c6:	7f7c      	ldrb	r4, [r7, #29]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f8bf 	bl	800084c <AES_Sub_Byte>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4a41      	ldr	r2, [pc, #260]	; (80007d8 <AES_Encrypt+0x1b4>)
 80006d4:	00ab      	lsls	r3, r5, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	4423      	add	r3, r4
 80006da:	460a      	mov	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 80006de:	7fbb      	ldrb	r3, [r7, #30]
 80006e0:	3301      	adds	r3, #1
 80006e2:	77bb      	strb	r3, [r7, #30]
 80006e4:	7fbb      	ldrb	r3, [r7, #30]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d9e5      	bls.n	80006b6 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 80006ea:	7f7b      	ldrb	r3, [r7, #29]
 80006ec:	3301      	adds	r3, #1
 80006ee:	777b      	strb	r3, [r7, #29]
 80006f0:	7f7b      	ldrb	r3, [r7, #29]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d9dc      	bls.n	80006b0 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 80006f6:	f000 f8c7 	bl	8000888 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 80006fa:	f000 f909 	bl	8000910 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 80006fe:	f107 020c 	add.w	r2, r7, #12
 8000702:	7f3b      	ldrb	r3, [r7, #28]
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f998 	bl	8000a3c <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f863 	bl	80007dc <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000716:	7f3b      	ldrb	r3, [r7, #28]
 8000718:	3301      	adds	r3, #1
 800071a:	773b      	strb	r3, [r7, #28]
 800071c:	7f3b      	ldrb	r3, [r7, #28]
 800071e:	2b09      	cmp	r3, #9
 8000720:	d9c3      	bls.n	80006aa <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000722:	2300      	movs	r3, #0
 8000724:	777b      	strb	r3, [r7, #29]
 8000726:	e01f      	b.n	8000768 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000728:	2300      	movs	r3, #0
 800072a:	77bb      	strb	r3, [r7, #30]
 800072c:	e016      	b.n	800075c <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800072e:	7fba      	ldrb	r2, [r7, #30]
 8000730:	7f7b      	ldrb	r3, [r7, #29]
 8000732:	4929      	ldr	r1, [pc, #164]	; (80007d8 <AES_Encrypt+0x1b4>)
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	440a      	add	r2, r1
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	7fbd      	ldrb	r5, [r7, #30]
 800073e:	7f7c      	ldrb	r4, [r7, #29]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f883 	bl	800084c <AES_Sub_Byte>
 8000746:	4603      	mov	r3, r0
 8000748:	4619      	mov	r1, r3
 800074a:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <AES_Encrypt+0x1b4>)
 800074c:	00ab      	lsls	r3, r5, #2
 800074e:	4413      	add	r3, r2
 8000750:	4423      	add	r3, r4
 8000752:	460a      	mov	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000756:	7fbb      	ldrb	r3, [r7, #30]
 8000758:	3301      	adds	r3, #1
 800075a:	77bb      	strb	r3, [r7, #30]
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9e5      	bls.n	800072e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8000762:	7f7b      	ldrb	r3, [r7, #29]
 8000764:	3301      	adds	r3, #1
 8000766:	777b      	strb	r3, [r7, #29]
 8000768:	7f7b      	ldrb	r3, [r7, #29]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d9dc      	bls.n	8000728 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800076e:	f000 f88b 	bl	8000888 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000772:	f107 020c 	add.w	r2, r7, #12
 8000776:	7f3b      	ldrb	r3, [r7, #28]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f95e 	bl	8000a3c <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f829 	bl	80007dc <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800078a:	2300      	movs	r3, #0
 800078c:	777b      	strb	r3, [r7, #29]
 800078e:	e01a      	b.n	80007c6 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 8000790:	2300      	movs	r3, #0
 8000792:	77bb      	strb	r3, [r7, #30]
 8000794:	e011      	b.n	80007ba <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 8000796:	7fb9      	ldrb	r1, [r7, #30]
 8000798:	7f7a      	ldrb	r2, [r7, #29]
 800079a:	7fb8      	ldrb	r0, [r7, #30]
 800079c:	7f7b      	ldrb	r3, [r7, #29]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4403      	add	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4403      	add	r3, r0
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <AES_Encrypt+0x1b4>)
 80007aa:	0089      	lsls	r1, r1, #2
 80007ac:	4401      	add	r1, r0
 80007ae:	440a      	add	r2, r1
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80007b4:	7fbb      	ldrb	r3, [r7, #30]
 80007b6:	3301      	adds	r3, #1
 80007b8:	77bb      	strb	r3, [r7, #30]
 80007ba:	7fbb      	ldrb	r3, [r7, #30]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d9ea      	bls.n	8000796 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 80007c0:	7f7b      	ldrb	r3, [r7, #29]
 80007c2:	3301      	adds	r3, #1
 80007c4:	777b      	strb	r3, [r7, #29]
 80007c6:	7f7b      	ldrb	r3, [r7, #29]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d9e1      	bls.n	8000790 <AES_Encrypt+0x16c>
		}
	}

}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bdb0      	pop	{r4, r5, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000018c 	.word	0x2000018c

080007dc <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	73bb      	strb	r3, [r7, #14]
 80007e8:	e024      	b.n	8000834 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	e01b      	b.n	8000828 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 80007f0:	7bfa      	ldrb	r2, [r7, #15]
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	4914      	ldr	r1, [pc, #80]	; (8000848 <AES_Add_Round_Key+0x6c>)
 80007f6:	0092      	lsls	r2, r2, #2
 80007f8:	440a      	add	r2, r1
 80007fa:	4413      	add	r3, r2
 80007fc:	7818      	ldrb	r0, [r3, #0]
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	461a      	mov	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	7819      	ldrb	r1, [r3, #0]
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	4041      	eors	r1, r0
 8000814:	b2c8      	uxtb	r0, r1
 8000816:	490c      	ldr	r1, [pc, #48]	; (8000848 <AES_Add_Round_Key+0x6c>)
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	440a      	add	r2, r1
 800081c:	4413      	add	r3, r2
 800081e:	4602      	mov	r2, r0
 8000820:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3301      	adds	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d9e0      	bls.n	80007f0 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	3301      	adds	r3, #1
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d9d7      	bls.n	80007ea <AES_Add_Round_Key+0xe>
		}
	}
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	2000018c 	.word	0x2000018c

0800084c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8000864:	7bfa      	ldrb	r2, [r7, #15]
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <AES_Sub_Byte+0x38>)
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	440a      	add	r2, r1
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 8000874:	7b7b      	ldrb	r3, [r7, #13]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000000 	.word	0x20000000

08000888 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <AES_Shift_Rows+0x84>)
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <AES_Shift_Rows+0x84>)
 8000896:	795a      	ldrb	r2, [r3, #5]
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <AES_Shift_Rows+0x84>)
 800089a:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <AES_Shift_Rows+0x84>)
 800089e:	799a      	ldrb	r2, [r3, #6]
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <AES_Shift_Rows+0x84>)
 80008a2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <AES_Shift_Rows+0x84>)
 80008a6:	79da      	ldrb	r2, [r3, #7]
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <AES_Shift_Rows+0x84>)
 80008aa:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <AES_Shift_Rows+0x84>)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <AES_Shift_Rows+0x84>)
 80008b4:	7a1b      	ldrb	r3, [r3, #8]
 80008b6:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <AES_Shift_Rows+0x84>)
 80008ba:	7a9a      	ldrb	r2, [r3, #10]
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <AES_Shift_Rows+0x84>)
 80008be:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <AES_Shift_Rows+0x84>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <AES_Shift_Rows+0x84>)
 80008c8:	7a5b      	ldrb	r3, [r3, #9]
 80008ca:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <AES_Shift_Rows+0x84>)
 80008ce:	7ada      	ldrb	r2, [r3, #11]
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <AES_Shift_Rows+0x84>)
 80008d2:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <AES_Shift_Rows+0x84>)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <AES_Shift_Rows+0x84>)
 80008dc:	7bdb      	ldrb	r3, [r3, #15]
 80008de:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <AES_Shift_Rows+0x84>)
 80008e2:	7b9a      	ldrb	r2, [r3, #14]
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <AES_Shift_Rows+0x84>)
 80008e6:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <AES_Shift_Rows+0x84>)
 80008ea:	7b5a      	ldrb	r2, [r3, #13]
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <AES_Shift_Rows+0x84>)
 80008ee:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <AES_Shift_Rows+0x84>)
 80008f2:	7b1a      	ldrb	r2, [r3, #12]
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <AES_Shift_Rows+0x84>)
 80008f6:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <AES_Shift_Rows+0x84>)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	7313      	strb	r3, [r2, #12]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	2000018c 	.word	0x2000018c

08000910 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]
 800091a:	e082      	b.n	8000a22 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e033      	b.n	800098a <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8000922:	7bf9      	ldrb	r1, [r7, #15]
 8000924:	7bba      	ldrb	r2, [r7, #14]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <AES_Mix_Collums+0x128>)
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	4401      	add	r1, r0
 800092e:	440a      	add	r2, r1
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	3310      	adds	r3, #16
 8000934:	443b      	add	r3, r7
 8000936:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	493e      	ldr	r1, [pc, #248]	; (8000a38 <AES_Mix_Collums+0x128>)
 8000940:	0092      	lsls	r2, r2, #2
 8000942:	440a      	add	r2, r1
 8000944:	4413      	add	r3, r2
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	3310      	adds	r3, #16
 8000950:	443b      	add	r3, r7
 8000952:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	4937      	ldr	r1, [pc, #220]	; (8000a38 <AES_Mix_Collums+0x128>)
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	440a      	add	r2, r1
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	da0c      	bge.n	8000984 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3310      	adds	r3, #16
 800096e:	443b      	add	r3, r7
 8000970:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	f082 021b 	eor.w	r2, r2, #27
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	3310      	adds	r3, #16
 800097e:	443b      	add	r3, r7
 8000980:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	3301      	adds	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d9c8      	bls.n	8000922 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 8000990:	793a      	ldrb	r2, [r7, #4]
 8000992:	7a7b      	ldrb	r3, [r7, #9]
 8000994:	4053      	eors	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	797b      	ldrb	r3, [r7, #5]
 800099a:	4053      	eors	r3, r2
 800099c:	b2da      	uxtb	r2, r3
 800099e:	7abb      	ldrb	r3, [r7, #10]
 80009a0:	4053      	eors	r3, r2
 80009a2:	b2d9      	uxtb	r1, r3
 80009a4:	7afa      	ldrb	r2, [r7, #11]
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	404a      	eors	r2, r1
 80009aa:	b2d1      	uxtb	r1, r2
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <AES_Mix_Collums+0x128>)
 80009ae:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 80009b0:	7a3a      	ldrb	r2, [r7, #8]
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	4053      	eors	r3, r2
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	7abb      	ldrb	r3, [r7, #10]
 80009ba:	4053      	eors	r3, r2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	4053      	eors	r3, r2
 80009c2:	b2d9      	uxtb	r1, r3
 80009c4:	7afa      	ldrb	r2, [r7, #11]
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	404a      	eors	r2, r1
 80009ca:	b2d1      	uxtb	r1, r2
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <AES_Mix_Collums+0x128>)
 80009ce:	4413      	add	r3, r2
 80009d0:	460a      	mov	r2, r1
 80009d2:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 80009d4:	7a3a      	ldrb	r2, [r7, #8]
 80009d6:	7a7b      	ldrb	r3, [r7, #9]
 80009d8:	4053      	eors	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	4053      	eors	r3, r2
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	4053      	eors	r3, r2
 80009e6:	b2d9      	uxtb	r1, r3
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	404a      	eors	r2, r1
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <AES_Mix_Collums+0x128>)
 80009f2:	4413      	add	r3, r2
 80009f4:	460a      	mov	r2, r1
 80009f6:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 80009f8:	7a3a      	ldrb	r2, [r7, #8]
 80009fa:	793b      	ldrb	r3, [r7, #4]
 80009fc:	4053      	eors	r3, r2
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	4053      	eors	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	7abb      	ldrb	r3, [r7, #10]
 8000a08:	4053      	eors	r3, r2
 8000a0a:	b2d9      	uxtb	r1, r3
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	404a      	eors	r2, r1
 8000a12:	b2d1      	uxtb	r1, r2
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <AES_Mix_Collums+0x128>)
 8000a16:	4413      	add	r3, r2
 8000a18:	460a      	mov	r2, r1
 8000a1a:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	73bb      	strb	r3, [r7, #14]
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	f67f af79 	bls.w	800091c <AES_Mix_Collums+0xc>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	2000018c 	.word	0x2000018c

08000a3c <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	75fb      	strb	r3, [r7, #23]
 8000a4c:	e00c      	b.n	8000a68 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	330c      	adds	r3, #12
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	441a      	add	r2, r3
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	443b      	add	r3, r7
 8000a5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	3301      	adds	r3, #1
 8000a66:	75fb      	strb	r3, [r7, #23]
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d9ef      	bls.n	8000a4e <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 8000a7e:	7d3b      	ldrb	r3, [r7, #20]
 8000a80:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	75fb      	strb	r3, [r7, #23]
 8000a86:	e012      	b.n	8000aae <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	3318      	adds	r3, #24
 8000a8c:	443b      	add	r3, r7
 8000a8e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000a92:	7dfc      	ldrb	r4, [r7, #23]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fed9 	bl	800084c <AES_Sub_Byte>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f104 0318 	add.w	r3, r4, #24
 8000aa2:	443b      	add	r3, r7
 8000aa4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	75fb      	strb	r3, [r7, #23]
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d9e9      	bls.n	8000a88 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000ab8:	e010      	b.n	8000adc <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000aba:	7d7b      	ldrb	r3, [r7, #21]
 8000abc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ac0:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 8000ac2:	7d7b      	ldrb	r3, [r7, #21]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	2b80      	cmp	r3, #128	; 0x80
 8000acc:	d103      	bne.n	8000ad6 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 8000ace:	7d7b      	ldrb	r3, [r7, #21]
 8000ad0:	f083 031b 	eor.w	r3, r3, #27
 8000ad4:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d1eb      	bne.n	8000aba <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8000ae2:	7b3a      	ldrb	r2, [r7, #12]
 8000ae4:	7d7b      	ldrb	r3, [r7, #21]
 8000ae6:	4053      	eors	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]
 8000af0:	e02f      	b.n	8000b52 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	75bb      	strb	r3, [r7, #22]
 8000af6:	e026      	b.n	8000b46 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000af8:	7dba      	ldrb	r2, [r7, #22]
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	7819      	ldrb	r1, [r3, #0]
 8000b08:	7dbb      	ldrb	r3, [r7, #22]
 8000b0a:	3318      	adds	r3, #24
 8000b0c:	443b      	add	r3, r7
 8000b0e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000b12:	7db8      	ldrb	r0, [r7, #22]
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4403      	add	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	4403      	add	r3, r0
 8000b20:	404a      	eors	r2, r1
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000b26:	7dba      	ldrb	r2, [r7, #22]
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	441a      	add	r2, r3
 8000b34:	7dbb      	ldrb	r3, [r7, #22]
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8000b40:	7dbb      	ldrb	r3, [r7, #22]
 8000b42:	3301      	adds	r3, #1
 8000b44:	75bb      	strb	r3, [r7, #22]
 8000b46:	7dbb      	ldrb	r3, [r7, #22]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d9d5      	bls.n	8000af8 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d9cc      	bls.n	8000af2 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b08a      	sub	sp, #40	; 0x28
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	72fb      	strb	r3, [r7, #11]
 8000b72:	4613      	mov	r3, r2
 8000b74:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 8000b90:	7afb      	ldrb	r3, [r7, #11]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 8000b9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 8000ba2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8000bac:	2301      	movs	r3, #1
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bb2:	e07e      	b.n	8000cb2 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000bc8:	7abb      	ldrb	r3, [r7, #10]
 8000bca:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8000bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bce:	78db      	ldrb	r3, [r3, #3]
 8000bd0:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 8000bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd06 	bl	8000624 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d01c      	beq.n	8000c5e <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c2a:	e013      	b.n	8000c54 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c34:	3328      	adds	r3, #40	; 0x28
 8000c36:	443b      	add	r3, r7
 8000c38:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
				Data++;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8000c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d9e7      	bls.n	8000c2c <Encrypt_Payload+0xca>
 8000c5c:	e024      	b.n	8000ca8 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 8000c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8000c66:	2310      	movs	r3, #16
 8000c68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c72:	e013      	b.n	8000c9c <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c7c:	3328      	adds	r3, #40	; 0x28
 8000c7e:	443b      	add	r3, r7
 8000c80:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c84:	4053      	eors	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	701a      	strb	r2, [r3, #0]
				Data++;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000c92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c96:	3301      	adds	r3, #1
 8000c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3e5      	bcc.n	8000c74 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8000ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cac:	3301      	adds	r3, #1
 8000cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	f67f af7a 	bls.w	8000bb4 <Encrypt_Payload+0x52>
			}
		}
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b09b      	sub	sp, #108	; 0x6c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000cdc:	4bba      	ldr	r3, [pc, #744]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000cde:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8000ce8:	4bb7      	ldr	r3, [pc, #732]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000cea:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000cf4:	4bb4      	ldr	r3, [pc, #720]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000cf6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000d00:	4bb1      	ldr	r3, [pc, #708]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000d02:	f107 0414 	add.w	r4, r7, #20
 8000d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000d1e:	2349      	movs	r3, #73	; 0x49
 8000d20:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 8000d3c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000d40:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8000d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 8000d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d52:	789b      	ldrb	r3, [r3, #2]
 8000d54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8000d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 8000d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8000da8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 8000db0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 8000dba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000dbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f901 	bl	8000fcc <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 8000dca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fc27 	bl	8000624 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ddc:	e010      	b.n	8000e00 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 8000dde:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000de2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000de6:	3268      	adds	r2, #104	; 0x68
 8000de8:	443a      	add	r2, r7
 8000dea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000dee:	3368      	adds	r3, #104	; 0x68
 8000df0:	443b      	add	r3, r7
 8000df2:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d9ea      	bls.n	8000dde <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000e08:	e043      	b.n	8000e92 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e10:	e00f      	b.n	8000e32 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 8000e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	3368      	adds	r3, #104	; 0x68
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000e28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d9eb      	bls.n	8000e12 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000e3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f94a 	bl	80010de <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fbe7 	bl	8000624 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e5c:	e010      	b.n	8000e80 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 8000e5e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e66:	3268      	adds	r2, #104	; 0x68
 8000e68:	443a      	add	r2, r7
 8000e6a:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000e6e:	3368      	adds	r3, #104	; 0x68
 8000e70:	443b      	add	r3, r7
 8000e72:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d9ea      	bls.n	8000e5e <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 8000e88:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000e92:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000e96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d3b5      	bcc.n	8000e0a <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000e9e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d12e      	bne.n	8000f04 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000eac:	e00f      	b.n	8000ece <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 8000eae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	3368      	adds	r3, #104	; 0x68
 8000eb8:	443b      	add	r3, r7
 8000eba:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d9eb      	bls.n	8000eae <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000ed6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f8fc 	bl	80010de <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000ee6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f8f4 	bl	80010de <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb91 	bl	8000624 <AES_Encrypt>
 8000f02:	e04d      	b.n	8000fa0 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f0a:	e02f      	b.n	8000f6c <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 8000f0c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f10:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d20a      	bcs.n	8000f2e <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8000f18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	3368      	adds	r3, #104	; 0x68
 8000f22:	443b      	add	r3, r7
 8000f24:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000f2e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f32:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d106      	bne.n	8000f48 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 8000f3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f3e:	3368      	adds	r3, #104	; 0x68
 8000f40:	443b      	add	r3, r7
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000f48:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f4c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d906      	bls.n	8000f62 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 8000f54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f58:	3368      	adds	r3, #104	; 0x68
 8000f5a:	443b      	add	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000f62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f66:	3301      	adds	r3, #1
 8000f68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d9cb      	bls.n	8000f0c <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000f74:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f8ad 	bl	80010de <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000f84:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8a5 	bl	80010de <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fb42 	bl	8000624 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000fa0:	7d3a      	ldrb	r2, [r7, #20]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	7d7a      	ldrb	r2, [r7, #21]
 8000fac:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	7dba      	ldrb	r2, [r7, #22]
 8000fb4:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3303      	adds	r3, #3
 8000fba:	7dfa      	ldrb	r2, [r7, #23]
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	376c      	adds	r7, #108	; 0x6c
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	08007590 	.word	0x08007590

08000fcc <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fb22 	bl	8000624 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da02      	bge.n	8000ff0 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75bb      	strb	r3, [r7, #22]
 8000fee:	e001      	b.n	8000ff4 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f83c 	bl	8001072 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000ffa:	7dbb      	ldrb	r3, [r7, #22]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d109      	bne.n	8001014 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	330f      	adds	r3, #15
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	320f      	adds	r2, #15
 800100a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800100e:	43db      	mvns	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
 8001018:	e00a      	b.n	8001030 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	441a      	add	r2, r3
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	440b      	add	r3, r1
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	3301      	adds	r3, #1
 800102e:	75fb      	strb	r3, [r7, #23]
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d9f1      	bls.n	800101a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	da02      	bge.n	8001046 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	75bb      	strb	r3, [r7, #22]
 8001044:	e001      	b.n	800104a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f000 f811 	bl	8001072 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d109      	bne.n	800106a <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	330f      	adds	r3, #15
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	320f      	adds	r2, #15
 8001060:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8001064:	43db      	mvns	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	7013      	strb	r3, [r2, #0]
	}
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e022      	b.n	80010ca <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b0e      	cmp	r3, #14
 8001088:	d80d      	bhi.n	80010a6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	da02      	bge.n	80010a0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	73bb      	strb	r3, [r7, #14]
 800109e:	e004      	b.n	80010aa <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
 80010a4:	e001      	b.n	80010aa <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	7bba      	ldrb	r2, [r7, #14]
 80010be:	440a      	add	r2, r1
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d9d9      	bls.n	8001084 <Shift_Left+0x12>
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e010      	b.n	8001110 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	7819      	ldrb	r1, [r3, #0]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4403      	add	r3, r0
 8001104:	404a      	eors	r2, r1
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	3301      	adds	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d9eb      	bls.n	80010ee <XOR+0x10>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	460b      	mov	r3, r1
 8001132:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6858      	ldr	r0, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	f002 fa72 	bl	8003628 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2db      	uxtb	r3, r3
 800114c:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	f107 0117 	add.w	r1, r7, #23
 8001156:	230a      	movs	r3, #10
 8001158:	2201      	movs	r2, #1
 800115a:	f003 fe2e 	bl	8004dba <HAL_SPI_Transmit>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <read_register+0x44>
		return false;
 8001164:	2300      	movs	r3, #0
 8001166:	e015      	b.n	8001194 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	230a      	movs	r3, #10
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f003 ff8f 	bl	8005096 <HAL_SPI_Receive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <read_register+0x5e>
		return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e008      	b.n	8001194 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6858      	ldr	r0, [r3, #4]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	891b      	ldrh	r3, [r3, #8]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	f002 fa4b 	bl	8003628 <HAL_GPIO_WritePin>

	return true;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6858      	ldr	r0, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	891b      	ldrh	r3, [r3, #8]
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f002 fa36 	bl	8003628 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	733b      	strb	r3, [r7, #12]
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	230a      	movs	r3, #10
 80011d4:	2202      	movs	r2, #2
 80011d6:	f003 fdf0 	bl	8004dba <HAL_SPI_Transmit>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <write_register+0x48>
		return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e008      	b.n	80011f6 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fa1a 	bl	8003628 <HAL_GPIO_WritePin>

	return true;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	460b      	mov	r3, r1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d905      	bls.n	8001220 <config_set_channel+0x20>
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <config_set_channel+0x54>)
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <config_set_channel+0x58>)
 8001218:	216d      	movs	r1, #109	; 0x6d
 800121a:	4810      	ldr	r0, [pc, #64]	; (800125c <config_set_channel+0x5c>)
 800121c:	f005 f952 	bl	80064c4 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8001220:	7afa      	ldrb	r2, [r7, #11]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	321a      	adds	r2, #26
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	b29a      	uxth	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	080075a0 	.word	0x080075a0
 8001258:	08007870 	.word	0x08007870
 800125c:	080075b4 	.word	0x080075b4

08001260 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f64a 3267 	movw	r2, #43879	; 0xab67
 800126e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <config_load_default+0x58>)
 8001294:	2100      	movs	r1, #0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb2 	bl	8001200 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <config_load_default+0x5c>)
 800129e:	2101      	movs	r1, #1
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ffad 	bl	8001200 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <config_load_default+0x60>)
 80012a8:	2102      	movs	r1, #2
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa8 	bl	8001200 <config_set_channel>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	33be27a0 	.word	0x33be27a0
 80012bc:	33c134e0 	.word	0x33c134e0
 80012c0:	33c44220 	.word	0x33c44220

080012c4 <reset>:

static void reset(rfm95_handle_t *handle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68d8      	ldr	r0, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8a1b      	ldrh	r3, [r3, #16]
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 f9a6 	bl	8003628 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 80012dc:	2001      	movs	r0, #1
 80012de:	f001 ff1f 	bl	8003120 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68d8      	ldr	r0, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8a1b      	ldrh	r3, [r3, #16]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f002 f99b 	bl	8003628 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012f2:	2005      	movs	r0, #5
 80012f4:	f001 ff14 	bl	8003120 <HAL_Delay>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	2000      	movs	r0, #0
 800130e:	460a      	mov	r2, r1
 8001310:	4603      	mov	r3, r0
 8001312:	0b55      	lsrs	r5, r2, #13
 8001314:	04d4      	lsls	r4, r2, #19
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <configure_frequency+0xb4>)
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe fffe 	bl	8000320 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 800132c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	0c02      	lsrs	r2, r0, #16
 800133a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	b2d3      	uxtb	r3, r2
 8001342:	461a      	mov	r2, r3
 8001344:	2106      	movs	r1, #6
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff28 	bl	800119c <write_register>
 800134c:	4603      	mov	r3, r0
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <configure_frequency+0x5c>
 8001358:	2300      	movs	r3, #0
 800135a:	e026      	b.n	80013aa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 800135c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	0a02      	lsrs	r2, r0, #8
 800136a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800136e:	0a0b      	lsrs	r3, r1, #8
 8001370:	b2d3      	uxtb	r3, r2
 8001372:	461a      	mov	r2, r3
 8001374:	2107      	movs	r1, #7
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff10 	bl	800119c <write_register>
 800137c:	4603      	mov	r3, r0
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <configure_frequency+0x8c>
 8001388:	2300      	movs	r3, #0
 800138a:	e00e      	b.n	80013aa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800138c:	7a3b      	ldrb	r3, [r7, #8]
 800138e:	461a      	mov	r2, r3
 8001390:	2108      	movs	r1, #8
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff02 	bl	800119c <write_register>
 8001398:	4603      	mov	r3, r0
 800139a:	f083 0301 	eor.w	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <configure_frequency+0xa8>
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <configure_frequency+0xaa>

	return true;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdb0      	pop	{r4, r5, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	01e84800 	.word	0x01e84800

080013b8 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80013c8:	461a      	mov	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	fa42 f303 	asr.w	r3, r2, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <configure_channel+0x2c>
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <configure_channel+0x48>)
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <configure_channel+0x4c>)
 80013dc:	2194      	movs	r1, #148	; 0x94
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <configure_channel+0x50>)
 80013e0:	f005 f870 	bl	80064c4 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	321a      	adds	r2, #26
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff85 	bl	8001300 <configure_frequency>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	080075e0 	.word	0x080075e0
 8001404:	08007884 	.word	0x08007884
 8001408:	080075b4 	.word	0x080075b4

0800140c <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	460b      	mov	r3, r1
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4798      	blx	r3
 8001420:	4601      	mov	r1, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <wait_for_irq+0x5c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	440b      	add	r3, r1
 8001436:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8001438:	e008      	b.n	800144c <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4798      	blx	r3
 8001440:	4602      	mov	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4293      	cmp	r3, r2
 8001446:	d801      	bhi.n	800144c <wait_for_irq+0x40>
			return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e008      	b.n	800145e <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	332a      	adds	r3, #42	; 0x2a
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0ee      	beq.n	800143a <wait_for_irq+0x2e>
		}
	}

	return true;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	10624dd3 	.word	0x10624dd3

0800146c <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	4798      	blx	r3
 800147a:	4602      	mov	r2, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4912      	ldr	r1, [pc, #72]	; (80014d4 <wait_for_rx_irqs+0x68>)
 800148a:	fba1 1303 	umull	r1, r3, r1, r3
 800148e:	099b      	lsrs	r3, r3, #6
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001494:	e008      	b.n	80014a8 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4798      	blx	r3
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d801      	bhi.n	80014a8 <wait_for_rx_irqs+0x3c>
			return false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e011      	b.n	80014cc <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <wait_for_rx_irqs+0x50>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ec      	beq.n	8001496 <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80014e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	dd03      	ble.n	80014f4 <rfm95_set_power+0x1c>
 80014ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	dd09      	ble.n	8001508 <rfm95_set_power+0x30>
 80014f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f8:	2b14      	cmp	r3, #20
 80014fa:	d005      	beq.n	8001508 <rfm95_set_power+0x30>
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <rfm95_set_power+0xd8>)
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <rfm95_set_power+0xdc>)
 8001500:	21b5      	movs	r1, #181	; 0xb5
 8001502:	482d      	ldr	r0, [pc, #180]	; (80015b8 <rfm95_set_power+0xe0>)
 8001504:	f004 ffde 	bl	80064c4 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001508:	2300      	movs	r3, #0
 800150a:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001514:	2b01      	cmp	r3, #1
 8001516:	dd18      	ble.n	800154a <rfm95_set_power+0x72>
 8001518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151c:	2b11      	cmp	r3, #17
 800151e:	dc14      	bgt.n	800154a <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001520:	7b3b      	ldrb	r3, [r7, #12]
 8001522:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001526:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	3b02      	subs	r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	b2da      	uxtb	r2, r3
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	f362 0303 	bfi	r3, r2, #0, #4
 8001542:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001544:	2384      	movs	r3, #132	; 0x84
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e011      	b.n	800156e <rfm95_set_power+0x96>

	} else if (power == 20) {
 800154a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154e:	2b14      	cmp	r3, #20
 8001550:	d10d      	bne.n	800156e <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001552:	7b3b      	ldrb	r3, [r7, #12]
 8001554:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001558:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	f043 030f 	orr.w	r3, r3, #15
 8001568:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800156a:	2387      	movs	r3, #135	; 0x87
 800156c:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	461a      	mov	r2, r3
 8001572:	2109      	movs	r1, #9
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fe11 	bl	800119c <write_register>
 800157a:	4603      	mov	r3, r0
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <rfm95_set_power+0xb2>
 8001586:	2300      	movs	r3, #0
 8001588:	e00e      	b.n	80015a8 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	461a      	mov	r2, r3
 800158e:	214d      	movs	r1, #77	; 0x4d
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe03 	bl	800119c <write_register>
 8001596:	4603      	mov	r3, r0
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <rfm95_set_power+0xce>
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <rfm95_set_power+0xd0>

	return true;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08007614 	.word	0x08007614
 80015b4:	08007898 	.word	0x08007898
 80015b8:	080075b4 	.word	0x080075b4

080015bc <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015ce:	d005      	beq.n	80015dc <rfm95_init+0x20>
 80015d0:	4b9a      	ldr	r3, [pc, #616]	; (800183c <rfm95_init+0x280>)
 80015d2:	4a9b      	ldr	r2, [pc, #620]	; (8001840 <rfm95_init+0x284>)
 80015d4:	21cf      	movs	r1, #207	; 0xcf
 80015d6:	489b      	ldr	r0, [pc, #620]	; (8001844 <rfm95_init+0x288>)
 80015d8:	f004 ff74 	bl	80064c4 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <rfm95_init+0x36>
 80015e6:	4b98      	ldr	r3, [pc, #608]	; (8001848 <rfm95_init+0x28c>)
 80015e8:	4a95      	ldr	r2, [pc, #596]	; (8001840 <rfm95_init+0x284>)
 80015ea:	21d0      	movs	r1, #208	; 0xd0
 80015ec:	4895      	ldr	r0, [pc, #596]	; (8001844 <rfm95_init+0x288>)
 80015ee:	f004 ff69 	bl	80064c4 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80015fc:	d005      	beq.n	800160a <rfm95_init+0x4e>
 80015fe:	4b93      	ldr	r3, [pc, #588]	; (800184c <rfm95_init+0x290>)
 8001600:	4a8f      	ldr	r2, [pc, #572]	; (8001840 <rfm95_init+0x284>)
 8001602:	21d1      	movs	r1, #209	; 0xd1
 8001604:	488f      	ldr	r0, [pc, #572]	; (8001844 <rfm95_init+0x288>)
 8001606:	f004 ff5d 	bl	80064c4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <rfm95_init+0x64>
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <rfm95_init+0x294>)
 8001616:	4a8a      	ldr	r2, [pc, #552]	; (8001840 <rfm95_init+0x284>)
 8001618:	21d2      	movs	r1, #210	; 0xd2
 800161a:	488a      	ldr	r0, [pc, #552]	; (8001844 <rfm95_init+0x288>)
 800161c:	f004 ff52 	bl	80064c4 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <rfm95_init+0x7a>
 800162a:	4b8a      	ldr	r3, [pc, #552]	; (8001854 <rfm95_init+0x298>)
 800162c:	4a84      	ldr	r2, [pc, #528]	; (8001840 <rfm95_init+0x284>)
 800162e:	21d3      	movs	r1, #211	; 0xd3
 8001630:	4884      	ldr	r0, [pc, #528]	; (8001844 <rfm95_init+0x288>)
 8001632:	f004 ff47 	bl	80064c4 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <rfm95_init+0x8e>
 800163e:	4b86      	ldr	r3, [pc, #536]	; (8001858 <rfm95_init+0x29c>)
 8001640:	4a7f      	ldr	r2, [pc, #508]	; (8001840 <rfm95_init+0x284>)
 8001642:	21d4      	movs	r1, #212	; 0xd4
 8001644:	487f      	ldr	r0, [pc, #508]	; (8001844 <rfm95_init+0x288>)
 8001646:	f004 ff3d 	bl	80064c4 <__assert_func>
	assert(handle->random_int != NULL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <rfm95_init+0xa2>
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <rfm95_init+0x2a0>)
 8001654:	4a7a      	ldr	r2, [pc, #488]	; (8001840 <rfm95_init+0x284>)
 8001656:	21d5      	movs	r1, #213	; 0xd5
 8001658:	487a      	ldr	r0, [pc, #488]	; (8001844 <rfm95_init+0x288>)
 800165a:	f004 ff33 	bl	80064c4 <__assert_func>
	assert(handle->precision_sleep_until != NULL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <rfm95_init+0xb6>
 8001666:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <rfm95_init+0x2a4>)
 8001668:	4a75      	ldr	r2, [pc, #468]	; (8001840 <rfm95_init+0x284>)
 800166a:	21d6      	movs	r1, #214	; 0xd6
 800166c:	4875      	ldr	r0, [pc, #468]	; (8001844 <rfm95_init+0x288>)
 800166e:	f004 ff29 	bl	80064c4 <__assert_func>
	assert(handle->precision_tick_frequency > 10000);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	f242 7210 	movw	r2, #10000	; 0x2710
 800167a:	4293      	cmp	r3, r2
 800167c:	d805      	bhi.n	800168a <rfm95_init+0xce>
 800167e:	4b79      	ldr	r3, [pc, #484]	; (8001864 <rfm95_init+0x2a8>)
 8001680:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <rfm95_init+0x284>)
 8001682:	21d7      	movs	r1, #215	; 0xd7
 8001684:	486f      	ldr	r0, [pc, #444]	; (8001844 <rfm95_init+0x288>)
 8001686:	f004 ff1d 	bl	80064c4 <__assert_func>

	reset(handle);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe1a 	bl	80012c4 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <rfm95_init+0x102>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	3260      	adds	r2, #96	; 0x60
 80016a0:	4610      	mov	r0, r2
 80016a2:	4798      	blx	r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <rfm95_init+0x102>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80016b6:	f64a 3267 	movw	r2, #43879	; 0xab67
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d002      	beq.n	80016c4 <rfm95_init+0x108>
		config_load_default(handle);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fdce 	bl	8001260 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 80016c4:	f107 020f 	add.w	r2, r7, #15
 80016c8:	2301      	movs	r3, #1
 80016ca:	2142      	movs	r1, #66	; 0x42
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fd29 	bl	8001124 <read_register>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f083 0301 	eor.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <rfm95_init+0x126>
 80016de:	2300      	movs	r3, #0
 80016e0:	e0a7      	b.n	8001832 <rfm95_init+0x276>
	if (version != RFM9x_VER) return false;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b12      	cmp	r3, #18
 80016e6:	d001      	beq.n	80016ec <rfm95_init+0x130>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e0a2      	b.n	8001832 <rfm95_init+0x276>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fd53 	bl	800119c <write_register>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f083 0301 	eor.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <rfm95_init+0x14a>
 8001702:	2300      	movs	r3, #0
 8001704:	e095      	b.n	8001832 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	2101      	movs	r1, #1
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fd46 	bl	800119c <write_register>
 8001710:	4603      	mov	r3, r0
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <rfm95_init+0x164>
 800171c:	2300      	movs	r3, #0
 800171e:	e088      	b.n	8001832 <rfm95_init+0x276>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fd39 	bl	800119c <write_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f083 0301 	eor.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <rfm95_init+0x17e>
 8001736:	2300      	movs	r3, #0
 8001738:	e07b      	b.n	8001832 <rfm95_init+0x276>

	if (handle->on_after_interrupts_configured != NULL) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <rfm95_init+0x18c>
		handle->on_after_interrupts_configured();
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001748:	2111      	movs	r1, #17
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fec4 	bl	80014d8 <rfm95_set_power>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <rfm95_init+0x1a4>
 800175c:	2300      	movs	r3, #0
 800175e:	e068      	b.n	8001832 <rfm95_init+0x276>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001760:	2223      	movs	r2, #35	; 0x23
 8001762:	210c      	movs	r1, #12
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fd19 	bl	800119c <write_register>
 800176a:	4603      	mov	r3, r0
 800176c:	f083 0301 	eor.w	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <rfm95_init+0x1be>
 8001776:	2300      	movs	r3, #0
 8001778:	e05b      	b.n	8001832 <rfm95_init+0x276>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800177a:	2200      	movs	r2, #0
 800177c:	2120      	movs	r1, #32
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fd0c 	bl	800119c <write_register>
 8001784:	4603      	mov	r3, r0
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <rfm95_init+0x1d8>
 8001790:	2300      	movs	r3, #0
 8001792:	e04e      	b.n	8001832 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001794:	2208      	movs	r2, #8
 8001796:	2121      	movs	r1, #33	; 0x21
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fcff 	bl	800119c <write_register>
 800179e:	4603      	mov	r3, r0
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <rfm95_init+0x1f2>
 80017aa:	2300      	movs	r3, #0
 80017ac:	e041      	b.n	8001832 <rfm95_init+0x276>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 80017ae:	2234      	movs	r2, #52	; 0x34
 80017b0:	2139      	movs	r1, #57	; 0x39
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fcf2 	bl	800119c <write_register>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <rfm95_init+0x20c>
 80017c4:	2300      	movs	r3, #0
 80017c6:	e034      	b.n	8001832 <rfm95_init+0x276>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	210e      	movs	r1, #14
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fce5 	bl	800119c <write_register>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <rfm95_init+0x226>
 80017de:	2300      	movs	r3, #0
 80017e0:	e027      	b.n	8001832 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 80017e2:	2200      	movs	r2, #0
 80017e4:	210f      	movs	r1, #15
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fcd8 	bl	800119c <write_register>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <rfm95_init+0x240>
 80017f8:	2300      	movs	r3, #0
 80017fa:	e01a      	b.n	8001832 <rfm95_init+0x276>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 80017fc:	2240      	movs	r2, #64	; 0x40
 80017fe:	2123      	movs	r1, #35	; 0x23
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fccb 	bl	800119c <write_register>
 8001806:	4603      	mov	r3, r0
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <rfm95_init+0x25a>
 8001812:	2300      	movs	r3, #0
 8001814:	e00d      	b.n	8001832 <rfm95_init+0x276>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	2101      	movs	r1, #1
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fcbe 	bl	800119c <write_register>
 8001820:	4603      	mov	r3, r0
 8001822:	f083 0301 	eor.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <rfm95_init+0x274>
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <rfm95_init+0x276>

	return true;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08007640 	.word	0x08007640
 8001840:	080078a8 	.word	0x080078a8
 8001844:	080075b4 	.word	0x080075b4
 8001848:	08007674 	.word	0x08007674
 800184c:	080076b0 	.word	0x080076b0
 8001850:	080076e8 	.word	0x080076e8
 8001854:	08007724 	.word	0x08007724
 8001858:	0800775c 	.word	0x0800775c
 800185c:	08007780 	.word	0x08007780
 8001860:	0800779c 	.word	0x0800779c
 8001864:	080077c4 	.word	0x080077c4

08001868 <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t answer_index = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (index < frame_payload_length) {
 8001882:	bf00      	nop
 8001884:	e1d8      	b.n	8001c38 <process_mac_commands+0x3d0>
		switch (frame_payload[index++])
 8001886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	2b0c      	cmp	r3, #12
 800189c:	f200 81cc 	bhi.w	8001c38 <process_mac_commands+0x3d0>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <process_mac_commands+0x40>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	080018dd 	.word	0x080018dd
 80018ac:	080018f7 	.word	0x080018f7
 80018b0:	08001915 	.word	0x08001915
 80018b4:	08001933 	.word	0x08001933
 80018b8:	0800194d 	.word	0x0800194d
 80018bc:	080019fb 	.word	0x080019fb
 80018c0:	08001a69 	.word	0x08001a69
 80018c4:	08001b9b 	.word	0x08001b9b
 80018c8:	08001bfb 	.word	0x08001bfb
 80018cc:	08001c09 	.word	0x08001c09
 80018d0:	08001c1b 	.word	0x08001c1b
 80018d4:	08001c29 	.word	0x08001c29
 80018d8:	08001c37 	.word	0x08001c37
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 80018dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d801      	bhi.n	80018ea <process_mac_commands+0x82>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e1b1      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 1;
 80018ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018ee:	3301      	adds	r3, #1
 80018f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80018f4:	e1a0      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 80018f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018fa:	3301      	adds	r3, #1
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4293      	cmp	r3, r2
 8001902:	d801      	bhi.n	8001908 <process_mac_commands+0xa0>
 8001904:	2300      	movs	r3, #0
 8001906:	e1a2      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 2;
 8001908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800190c:	3302      	adds	r3, #2
 800190e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8001912:	e191      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8001914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001918:	3303      	adds	r3, #3
 800191a:	461a      	mov	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4293      	cmp	r3, r2
 8001920:	d801      	bhi.n	8001926 <process_mac_commands+0xbe>
 8001922:	2300      	movs	r3, #0
 8001924:	e193      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 4;
 8001926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192a:	3304      	adds	r3, #4
 800192c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8001930:	e182      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8001932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	d801      	bhi.n	8001940 <process_mac_commands+0xd8>
 800193c:	2300      	movs	r3, #0
 800193e:	e186      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 1;
 8001940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001944:	3301      	adds	r3, #1
 8001946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800194a:	e175      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 800194c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001950:	3304      	adds	r3, #4
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4293      	cmp	r3, r2
 8001958:	d801      	bhi.n	800195e <process_mac_commands+0xf6>
 800195a:	2300      	movs	r3, #0
 800195c:	e177      	b.n	8001c4e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 800195e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001962:	2b30      	cmp	r3, #48	; 0x30
 8001964:	d901      	bls.n	800196a <process_mac_commands+0x102>
 8001966:	2300      	movs	r3, #0
 8001968:	e171      	b.n	8001c4e <process_mac_commands+0x3e6>

				uint8_t dl_settings = frame_payload[index++];
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	77bb      	strb	r3, [r7, #30]
				uint8_t frequency_lsb = frame_payload[index++];
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	777b      	strb	r3, [r7, #29]
				uint8_t frequency_msb = frame_payload[index++];
 8001992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	773b      	strb	r3, [r7, #28]
				uint8_t frequency_hsb = frame_payload[index++];
 80019a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	76fb      	strb	r3, [r7, #27]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 80019ba:	7f7a      	ldrb	r2, [r7, #29]
 80019bc:	7f3b      	ldrb	r3, [r7, #28]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	431a      	orrs	r2, r3
 80019c2:	7efb      	ldrb	r3, [r7, #27]
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	4313      	orrs	r3, r2
 80019c8:	2264      	movs	r2, #100	; 0x64
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 80019d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80019da:	461a      	mov	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	2205      	movs	r2, #5
 80019e2:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 80019e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	2207      	movs	r2, #7
 80019f6:	701a      	strb	r2, [r3, #0]
				break;
 80019f8:	e11e      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 80019fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001a00:	d901      	bls.n	8001a06 <process_mac_commands+0x19e>
 8001a02:	2300      	movs	r3, #0
 8001a04:	e123      	b.n	8001c4e <process_mac_commands+0x3e6>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8001a06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	f887 3020 	strb.w	r3, [r7, #32]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <process_mac_commands+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	4798      	blx	r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	e000      	b.n	8001a26 <process_mac_commands+0x1be>
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	77fb      	strb	r3, [r7, #31]

				answer_buffer[answer_index++] = 0x06;
 8001a28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001a32:	461a      	mov	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	2206      	movs	r2, #6
 8001a3a:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8001a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	7ffa      	ldrb	r2, [r7, #31]
 8001a4e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8001a50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a64:	701a      	strb	r2, [r3, #0]
				break;
 8001a66:	e0e7      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8001a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d801      	bhi.n	8001a7a <process_mac_commands+0x212>
 8001a76:	2300      	movs	r3, #0
 8001a78:	e0e9      	b.n	8001c4e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8001a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a7e:	2b30      	cmp	r3, #48	; 0x30
 8001a80:	d901      	bls.n	8001a86 <process_mac_commands+0x21e>
 8001a82:	2300      	movs	r3, #0
 8001a84:	e0e3      	b.n	8001c4e <process_mac_commands+0x3e6>

				uint8_t channel_index = frame_payload[index++];
 8001a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t frequency_lsb = frame_payload[index++];
 8001a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t frequency_msb = frame_payload[index++];
 8001ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t frequency_hsb = frame_payload[index++];
 8001ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				uint8_t min_max_dr = frame_payload[index++];
 8001ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8001af4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001af8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	431a      	orrs	r2, r3
 8001b00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	4313      	orrs	r3, r2
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 8001b10:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8001b1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				if (channel_index >= 3) {
 8001b26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d906      	bls.n	8001b3c <process_mac_commands+0x2d4>
					config_set_channel(handle, channel_index, frequency);
 8001b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff fb62 	bl	8001200 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8001b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d903      	bls.n	8001b4c <process_mac_commands+0x2e4>
 8001b44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d901      	bls.n	8001b50 <process_mac_commands+0x2e8>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <process_mac_commands+0x2ea>
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001b56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				answer_buffer[answer_index++] = 0x07;
 8001b62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	2207      	movs	r2, #7
 8001b74:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8001b76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b88:	1c59      	adds	r1, r3, #1
 8001b8a:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 8001b8e:	4619      	mov	r1, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	440b      	add	r3, r1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
				break;
 8001b98:	e04e      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8001b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d801      	bhi.n	8001ba8 <process_mac_commands+0x340>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e052      	b.n	8001c4e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8001ba8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bac:	2b30      	cmp	r3, #48	; 0x30
 8001bae:	d901      	bls.n	8001bb4 <process_mac_commands+0x34c>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e04c      	b.n	8001c4e <process_mac_commands+0x3e6>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8001bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <process_mac_commands+0x37c>
					handle->config.rx1_delay = 1;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8001be4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001bee:	461a      	mov	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	701a      	strb	r2, [r3, #0]
				break;
 8001bf8:	e01e      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8001bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d819      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c04:	2300      	movs	r3, #0
 8001c06:	e022      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8001c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d810      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c16:	2300      	movs	r3, #0
 8001c18:	e019      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8001c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d809      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c24:	2300      	movs	r3, #0
 8001c26:	e012      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8001c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d802      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c32:	2300      	movs	r3, #0
 8001c34:	e00b      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8001c36:	bf00      	nop
	while (index < frame_payload_length) {
 8001c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f63f ae21 	bhi.w	8001886 <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8001c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c46:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001c4a:	701a      	strb	r2, [r3, #0]
	return true;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop

08001c58 <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c6a:	492b      	ldr	r1, [pc, #172]	; (8001d18 <receive_at_scheduled_time+0xc0>)
 8001c6c:	fba1 1202 	umull	r1, r2, r1, r2
 8001c70:	0992      	lsrs	r2, r2, #6
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	1a8a      	subs	r2, r1, r2
 8001c76:	4610      	mov	r0, r2
 8001c78:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fa8c 	bl	800119c <write_register>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <receive_at_scheduled_time+0x3c>
 8001c90:	2300      	movs	r3, #0
 8001c92:	e03c      	b.n	8001d0e <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8001c94:	22ff      	movs	r2, #255	; 0xff
 8001c96:	2112      	movs	r1, #18
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fa7f 	bl	800119c <write_register>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <receive_at_scheduled_time+0x56>
 8001caa:	2300      	movs	r3, #0
 8001cac:	e02f      	b.n	8001d0e <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8001cc6:	2281      	movs	r2, #129	; 0x81
 8001cc8:	2101      	movs	r1, #1
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fa66 	bl	800119c <write_register>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <receive_at_scheduled_time+0x88>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e016      	b.n	8001d0e <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8001ce0:	220a      	movs	r2, #10
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fb91 	bl	800140c <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8001cf2:	2286      	movs	r2, #134	; 0x86
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fa50 	bl	800119c <write_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <receive_at_scheduled_time+0xb4>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <receive_at_scheduled_time+0xb6>

	return true;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	10624dd3 	.word	0x10624dd3

08001d1c <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8001d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d20:	b08a      	sub	sp, #40	; 0x28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	2202      	movs	r2, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <calculate_rx_timings+0xc4>)
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	009a      	lsls	r2, r3, #2
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	0fd9      	lsrs	r1, r3, #31
 8001d6a:	440b      	add	r3, r1
 8001d6c:	105b      	asrs	r3, r3, #1
 8001d6e:	425b      	negs	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	17da      	asrs	r2, r3, #31
 8001d78:	469a      	mov	sl, r3
 8001d7a:	4693      	mov	fp, r2
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	2200      	movs	r2, #0
 8001d82:	4698      	mov	r8, r3
 8001d84:	4691      	mov	r9, r2
 8001d86:	fb08 f20b 	mul.w	r2, r8, fp
 8001d8a:	fb0a f309 	mul.w	r3, sl, r9
 8001d8e:	4413      	add	r3, r2
 8001d90:	fbaa 4508 	umull	r4, r5, sl, r8
 8001d94:	442b      	add	r3, r5
 8001d96:	461d      	mov	r5, r3
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <calculate_rx_timings+0xc4>)
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fa6d 	bl	8000280 <__aeabi_ldivmod>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4613      	mov	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8001db8:	fb03 f202 	mul.w	r2, r3, r2
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc6:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de0:	000f4240 	.word	0x000f4240

08001de4 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2207      	movs	r2, #7
 8001e08:	49ab      	ldr	r1, [pc, #684]	; (80020b8 <receive_package+0x2d4>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff ff86 	bl	8001d1c <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d306      	bcc.n	8001e26 <receive_package+0x42>
 8001e18:	4ba8      	ldr	r3, [pc, #672]	; (80020bc <receive_package+0x2d8>)
 8001e1a:	4aa9      	ldr	r2, [pc, #676]	; (80020c0 <receive_package+0x2dc>)
 8001e1c:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 8001e20:	48a8      	ldr	r0, [pc, #672]	; (80020c4 <receive_package+0x2e0>)
 8001e22:	f004 fb4f 	bl	80064c4 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8001e26:	2272      	movs	r2, #114	; 0x72
 8001e28:	211d      	movs	r1, #29
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff f9b6 	bl	800119c <write_register>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <receive_package+0x5c>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e136      	b.n	80020ae <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	211e      	movs	r1, #30
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff f9a0 	bl	800119c <write_register>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <receive_package+0x88>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e120      	b.n	80020ae <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	2126      	movs	r1, #38	; 0x26
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff f993 	bl	800119c <write_register>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <receive_package+0xa2>
 8001e82:	2300      	movs	r3, #0
 8001e84:	e113      	b.n	80020ae <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	211f      	movs	r1, #31
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff f984 	bl	800119c <write_register>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <receive_package+0xc0>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e104      	b.n	80020ae <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8001ea4:	2267      	movs	r2, #103	; 0x67
 8001ea6:	2133      	movs	r1, #51	; 0x33
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff f977 	bl	800119c <write_register>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f083 0301 	eor.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <receive_package+0xda>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e0f7      	b.n	80020ae <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8001ebe:	2219      	movs	r2, #25
 8001ec0:	213b      	movs	r1, #59	; 0x3b
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff f96a 	bl	800119c <write_register>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <receive_package+0xf4>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e0ea      	b.n	80020ae <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff febb 	bl	8001c58 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff fac2 	bl	800146c <wait_for_rx_irqs>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d07a      	beq.n	8001fea <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff f94f 	bl	800119c <write_register>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <receive_package+0x12a>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e0cf      	b.n	80020ae <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d166      	bne.n	8001fe6 <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4963      	ldr	r1, [pc, #396]	; (80020b8 <receive_package+0x2d4>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff fef6 	bl	8001d1c <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8001f30:	4965      	ldr	r1, [pc, #404]	; (80020c8 <receive_package+0x2e4>)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff f9e4 	bl	8001300 <configure_frequency>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <receive_package+0x164>
 8001f44:	2300      	movs	r3, #0
 8001f46:	e0b2      	b.n	80020ae <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8001f48:	22c2      	movs	r2, #194	; 0xc2
 8001f4a:	211d      	movs	r1, #29
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff f925 	bl	800119c <write_register>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <receive_package+0x17e>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e0a5      	b.n	80020ae <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	211e      	movs	r1, #30
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff f90f 	bl	800119c <write_register>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <receive_package+0x1aa>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e08f      	b.n	80020ae <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8001f8e:	2204      	movs	r2, #4
 8001f90:	2126      	movs	r1, #38	; 0x26
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff f902 	bl	800119c <write_register>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <receive_package+0x1c4>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e082      	b.n	80020ae <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	211f      	movs	r1, #31
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff f8f3 	bl	800119c <write_register>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <receive_package+0x1e2>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e073      	b.n	80020ae <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fe44 	bl	8001c58 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fa4b 	bl	800146c <wait_for_rx_irqs>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e063      	b.n	80020ae <receive_package+0x2ca>
			}
		}

		return true;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e061      	b.n	80020ae <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8001fea:	f107 021f 	add.w	r2, r7, #31
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2112      	movs	r1, #18
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff f896 	bl	8001124 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <receive_package+0x222>
		return true;
 8002002:	2301      	movs	r3, #1
 8002004:	e053      	b.n	80020ae <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 8002006:	f107 021e 	add.w	r2, r7, #30
 800200a:	2301      	movs	r3, #1
 800200c:	2119      	movs	r1, #25
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff f888 	bl	8001124 <read_register>
 8002014:	4603      	mov	r3, r0
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <receive_package+0x240>
 8002020:	2300      	movs	r3, #0
 8002022:	e044      	b.n	80020ae <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8002024:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da00      	bge.n	800202e <receive_package+0x24a>
 800202c:	3303      	adds	r3, #3
 800202e:	109b      	asrs	r3, r3, #2
 8002030:	b25a      	sxtb	r2, r3
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8002036:	f107 021d 	add.w	r2, r7, #29
 800203a:	2301      	movs	r3, #1
 800203c:	2113      	movs	r1, #19
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff f870 	bl	8001124 <read_register>
 8002044:	4603      	mov	r3, r0
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <receive_package+0x270>
 8002050:	2300      	movs	r3, #0
 8002052:	e02c      	b.n	80020ae <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8002054:	2200      	movs	r2, #0
 8002056:	210d      	movs	r1, #13
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff f89f 	bl	800119c <write_register>
 800205e:	4603      	mov	r3, r0
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <receive_package+0x28a>
 800206a:	2300      	movs	r3, #0
 800206c:	e01f      	b.n	80020ae <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 800206e:	7f7b      	ldrb	r3, [r7, #29]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	2100      	movs	r1, #0
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff f855 	bl	8001124 <read_register>
 800207a:	4603      	mov	r3, r0
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <receive_package+0x2a6>
 8002086:	2300      	movs	r3, #0
 8002088:	e011      	b.n	80020ae <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	2101      	movs	r1, #1
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff f884 	bl	800119c <write_register>
 8002094:	4603      	mov	r3, r0
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <receive_package+0x2c0>
 80020a0:	2300      	movs	r3, #0
 80020a2:	e004      	b.n	80020ae <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 80020a4:	7f7b      	ldrb	r3, [r7, #29]
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	601a      	str	r2, [r3, #0]
	return true;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	0001e848 	.word	0x0001e848
 80020bc:	080077f0 	.word	0x080077f0
 80020c0:	080078b4 	.word	0x080078b4
 80020c4:	080075b4 	.word	0x080075b4
 80020c8:	33d3e608 	.word	0x33d3e608

080020cc <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	4619      	mov	r1, r3
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff f96a 	bl	80013b8 <configure_channel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <send_package+0x28>
 80020f0:	2300      	movs	r3, #0
 80020f2:	e0d8      	b.n	80022a6 <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80020f4:	2272      	movs	r2, #114	; 0x72
 80020f6:	211d      	movs	r1, #29
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff f84f 	bl	800119c <write_register>
 80020fe:	4603      	mov	r3, r0
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <send_package+0x42>
 800210a:	2300      	movs	r3, #0
 800210c:	e0cb      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 800210e:	2274      	movs	r2, #116	; 0x74
 8002110:	211e      	movs	r1, #30
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff f842 	bl	800119c <write_register>
 8002118:	4603      	mov	r3, r0
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <send_package+0x5c>
 8002124:	2300      	movs	r3, #0
 8002126:	e0be      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8002128:	2204      	movs	r2, #4
 800212a:	2126      	movs	r1, #38	; 0x26
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff f835 	bl	800119c <write_register>
 8002132:	4603      	mov	r3, r0
 8002134:	f083 0301 	eor.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <send_package+0x76>
 800213e:	2300      	movs	r3, #0
 8002140:	e0b1      	b.n	80022a6 <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8002142:	2227      	movs	r2, #39	; 0x27
 8002144:	2133      	movs	r1, #51	; 0x33
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff f828 	bl	800119c <write_register>
 800214c:	4603      	mov	r3, r0
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <send_package+0x90>
 8002158:	2300      	movs	r3, #0
 800215a:	e0a4      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 800215c:	221d      	movs	r2, #29
 800215e:	213b      	movs	r1, #59	; 0x3b
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff f81b 	bl	800119c <write_register>
 8002166:	4603      	mov	r3, r0
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <send_package+0xaa>
 8002172:	2300      	movs	r3, #0
 8002174:	e097      	b.n	80022a6 <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	2122      	movs	r1, #34	; 0x22
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff f80c 	bl	800119c <write_register>
 8002184:	4603      	mov	r3, r0
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <send_package+0xc8>
 8002190:	2300      	movs	r3, #0
 8002192:	e088      	b.n	80022a6 <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7fe ffff 	bl	800119c <write_register>
 800219e:	4603      	mov	r3, r0
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <send_package+0xe2>
 80021aa:	2300      	movs	r3, #0
 80021ac:	e07b      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	2112      	movs	r1, #18
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7fe fff2 	bl	800119c <write_register>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f083 0301 	eor.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <send_package+0xfc>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e06e      	b.n	80022a6 <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80021d8:	2281      	movs	r2, #129	; 0x81
 80021da:	2101      	movs	r1, #1
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7fe ffdd 	bl	800119c <write_register>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <send_package+0x126>
 80021ee:	2300      	movs	r3, #0
 80021f0:	e059      	b.n	80022a6 <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 80021f2:	220a      	movs	r2, #10
 80021f4:	2102      	movs	r1, #2
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f7ff f908 	bl	800140c <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	210d      	movs	r1, #13
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7fe ffcb 	bl	800119c <write_register>
 8002206:	4603      	mov	r3, r0
 8002208:	f083 0301 	eor.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <send_package+0x14a>
 8002212:	2300      	movs	r3, #0
 8002214:	e047      	b.n	80022a6 <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e00b      	b.n	8002234 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7fe ffb7 	bl	800119c <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3ef      	bcc.n	800221c <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 800223c:	2283      	movs	r2, #131	; 0x83
 800223e:	2101      	movs	r1, #1
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7fe ffab 	bl	800119c <write_register>
 8002246:	4603      	mov	r3, r0
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <send_package+0x18a>
 8002252:	2300      	movs	r3, #0
 8002254:	e027      	b.n	80022a6 <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8002256:	2264      	movs	r2, #100	; 0x64
 8002258:	2100      	movs	r1, #0
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff f8d6 	bl	800140c <wait_for_irq>
 8002260:	4603      	mov	r3, r0
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <send_package+0x1a4>
 800226c:	2300      	movs	r3, #0
 800226e:	e01a      	b.n	80022a6 <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	2101      	movs	r1, #1
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7fe ff8c 	bl	800119c <write_register>
 8002284:	4603      	mov	r3, r0
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <send_package+0x1c8>
 8002290:	2300      	movs	r3, #0
 8002292:	e008      	b.n	80022a6 <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800229a:	3301      	adds	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b08d      	sub	sp, #52	; 0x34
 80022b4:	af04      	add	r7, sp, #16
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	330d      	adds	r3, #13
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d906      	bls.n	80022d8 <encode_phy_payload+0x28>
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <encode_phy_payload+0x160>)
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <encode_phy_payload+0x164>)
 80022ce:	f240 214f 	movw	r1, #591	; 0x24f
 80022d2:	4851      	ldr	r0, [pc, #324]	; (8002418 <encode_phy_payload+0x168>)
 80022d4:	f004 f8f6 	bl	80064c4 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2240      	movs	r2, #64	; 0x40
 80022dc:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	7d52      	ldrb	r2, [r2, #21]
 80022e6:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3302      	adds	r3, #2
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	7d12      	ldrb	r2, [r2, #20]
 80022f0:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3303      	adds	r3, #3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	7cd2      	ldrb	r2, [r2, #19]
 80022fa:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3304      	adds	r3, #4
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	7c92      	ldrb	r2, [r2, #18]
 8002304:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3305      	adds	r3, #5
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3306      	adds	r3, #6
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29a      	uxth	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3307      	adds	r3, #7
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3308      	adds	r3, #8
 8002332:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002336:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	3309      	adds	r3, #9
 800233c:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 f925 	bl	8006598 <memcpy>
	if (port == 0) {
 800234e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	18d0      	adds	r0, r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2d9      	uxtb	r1, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002366:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3316      	adds	r3, #22
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002370:	9201      	str	r2, [sp, #4]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	4622      	mov	r2, r4
 8002378:	f7fe fbf3 	bl	8000b62 <Encrypt_Payload>
 800237c:	e012      	b.n	80023a4 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	18d0      	adds	r0, r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2d9      	uxtb	r1, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800238e:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3326      	adds	r3, #38	; 0x26
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002398:	9201      	str	r2, [sp, #4]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2300      	movs	r3, #0
 800239e:	4622      	mov	r2, r4
 80023a0:	f7fe fbdf 	bl	8000b62 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	b2d8      	uxtb	r0, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80023b6:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3316      	adds	r3, #22
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 80023c0:	f107 0114 	add.w	r1, r7, #20
 80023c4:	9202      	str	r2, [sp, #8]
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4623      	mov	r3, r4
 80023ce:	4602      	mov	r2, r0
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f7fe fc7b 	bl	8000ccc <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	e00d      	b.n	80023f8 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 80023dc:	7ffa      	ldrb	r2, [r7, #31]
 80023de:	7ff9      	ldrb	r1, [r7, #31]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	440b      	add	r3, r1
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	440b      	add	r3, r1
 80023e8:	3220      	adds	r2, #32
 80023ea:	443a      	add	r2, r7
 80023ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80023f0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	3301      	adds	r3, #1
 80023f6:	77fb      	strb	r3, [r7, #31]
 80023f8:	7ffb      	ldrb	r3, [r7, #31]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d9ee      	bls.n	80023dc <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	3304      	adds	r3, #4
 8002402:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002404:	69bb      	ldr	r3, [r7, #24]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	0800780c 	.word	0x0800780c
 8002414:	080078c4 	.word	0x080078c4
 8002418:	080075b4 	.word	0x080075b4

0800241c <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b08d      	sub	sp, #52	; 0x34
 8002420:	af04      	add	r7, sp, #16
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b60      	cmp	r3, #96	; 0x60
 8002432:	d001      	beq.n	8002438 <decode_phy_payload+0x1c>
		return false;
 8002434:	2300      	movs	r3, #0
 8002436:	e0aa      	b.n	800258e <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3301      	adds	r3, #1
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	7d5b      	ldrb	r3, [r3, #21]
 8002442:	429a      	cmp	r2, r3
 8002444:	d114      	bne.n	8002470 <decode_phy_payload+0x54>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3302      	adds	r3, #2
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	7d1b      	ldrb	r3, [r3, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d10d      	bne.n	8002470 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3303      	adds	r3, #3
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3304      	adds	r3, #4
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7c9b      	ldrb	r3, [r3, #18]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <decode_phy_payload+0x58>
		return false;
 8002470:	2300      	movs	r3, #0
 8002472:	e08c      	b.n	800258e <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	795b      	ldrb	r3, [r3, #5]
 8002478:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3307      	adds	r3, #7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3306      	adds	r3, #6
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b21b      	sxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	b21b      	sxth	r3, r3
 8002498:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80024a0:	8bba      	ldrh	r2, [r7, #28]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d201      	bcs.n	80024aa <decode_phy_payload+0x8e>
		return false;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e071      	b.n	800258e <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8bba      	ldrh	r2, [r7, #28]
 80024ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	3b04      	subs	r3, #4
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	8bbc      	ldrh	r4, [r7, #28]
	              handle->network_session_key, handle->device_address);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3316      	adds	r3, #22
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 80024c2:	f107 0114 	add.w	r1, r7, #20
 80024c6:	9202      	str	r2, [sp, #8]
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2301      	movs	r3, #1
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4623      	mov	r3, r4
 80024d0:	4602      	mov	r2, r0
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7fe fbfa 	bl	8000ccc <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	3b04      	subs	r3, #4
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	18d1      	adds	r1, r2, r3
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2204      	movs	r2, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 f846 	bl	8006578 <memcmp>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <decode_phy_payload+0xda>
		return false;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e04b      	b.n	800258e <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f1a3 020c 	sub.w	r2, r3, #12
 80024fc:	7fbb      	ldrb	r3, [r7, #30]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10b      	bne.n	800251a <decode_phy_payload+0xfe>
		*frame_port = 0;
 8002502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f103 0208 	add.w	r2, r3, #8
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	7fba      	ldrb	r2, [r7, #30]
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e038      	b.n	800258c <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	7a1a      	ldrb	r2, [r3, #8]
 800251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002520:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8002522:	7fbb      	ldrb	r3, [r7, #30]
 8002524:	3309      	adds	r3, #9
 8002526:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	3b04      	subs	r3, #4
 800252c:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 800252e:	7eba      	ldrb	r2, [r7, #26]
 8002530:	7efb      	ldrb	r3, [r7, #27]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800253e:	7efb      	ldrb	r3, [r7, #27]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	18d0      	adds	r0, r2, r3
 8002544:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->network_session_key, handle->device_address);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3316      	adds	r3, #22
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800254e:	7e79      	ldrb	r1, [r7, #25]
 8002550:	9201      	str	r2, [sp, #4]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	4622      	mov	r2, r4
 8002558:	f7fe fb03 	bl	8000b62 <Encrypt_Payload>
 800255c:	e00e      	b.n	800257c <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800255e:	7efb      	ldrb	r3, [r7, #27]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	18d0      	adds	r0, r2, r3
 8002564:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->application_session_key, handle->device_address);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3326      	adds	r3, #38	; 0x26
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800256e:	7e79      	ldrb	r1, [r7, #25]
 8002570:	9201      	str	r2, [sp, #4]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	4622      	mov	r2, r4
 8002578:	f7fe faf3 	bl	8000b62 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 800257c:	7efb      	ldrb	r3, [r7, #27]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	441a      	add	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	7e7a      	ldrb	r2, [r7, #25]
 800258a:	701a      	strb	r2, [r3, #0]
	}

	return true;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <select_random_channel>:

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	73bb      	strb	r3, [r7, #14]
 80025a6:	e010      	b.n	80025ca <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80025ae:	461a      	mov	r2, r3
 80025b0:	7bbb      	ldrb	r3, [r7, #14]
 80025b2:	fa42 f303 	asr.w	r3, r2, r3
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <select_random_channel+0x2e>
			channel_count++;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3301      	adds	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73bb      	strb	r3, [r7, #14]
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d9eb      	bls.n	80025a8 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	4610      	mov	r0, r2
 80025d8:	4798      	blx	r3
 80025da:	4603      	mov	r3, r0
 80025dc:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	733b      	strb	r3, [r7, #12]
 80025e2:	e015      	b.n	8002610 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80025ea:	461a      	mov	r2, r3
 80025ec:	7b3b      	ldrb	r3, [r7, #12]
 80025ee:	fa42 f303 	asr.w	r3, r2, r3
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <select_random_channel+0x74>
			if (random_channel == 0) {
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <select_random_channel+0x6e>
				return i;
 8002600:	7b3b      	ldrb	r3, [r7, #12]
 8002602:	e009      	b.n	8002618 <select_random_channel+0x82>
			} else {
				random_channel--;
 8002604:	7b7b      	ldrb	r3, [r7, #13]
 8002606:	3b01      	subs	r3, #1
 8002608:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 800260a:	7b3b      	ldrb	r3, [r7, #12]
 800260c:	3301      	adds	r3, #1
 800260e:	733b      	strb	r3, [r7, #12]
 8002610:	7b3b      	ldrb	r3, [r7, #12]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	d9e6      	bls.n	80025e4 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0aa      	sub	sp, #168	; 0xa8
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 800262c:	2300      	movs	r3, #0
 800262e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002630:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002634:	223c      	movs	r2, #60	; 0x3c
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f003 ffbb 	bl	80065b4 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 800263e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002642:	2301      	movs	r3, #1
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff fe30 	bl	80022b0 <encode_phy_payload>
 8002650:	4603      	mov	r3, r0
 8002652:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff ff9e 	bl	8002596 <select_random_channel>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002662:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002666:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800266a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4603      	mov	r3, r0
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fd2a 	bl	80020cc <send_package>
 8002678:	4603      	mov	r3, r0
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <rfm95_send_receive_cycle+0x72>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	2101      	movs	r1, #1
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fe fd87 	bl	800119c <write_register>
		return false;
 800268e:	2300      	movs	r3, #0
 8002690:	e0af      	b.n	80027f2 <rfm95_send_receive_cycle+0x1d2>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002692:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f003 ff8a 	bl	80065b4 <memset>
	phy_payload_len = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8096 	beq.w	80027dc <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 80026b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026b2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80026b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026ba:	f107 0353 	add.w	r3, r7, #83	; 0x53
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fb8e 	bl	8001de4 <receive_package>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	2101      	movs	r1, #1
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7fe fd5f 	bl	800119c <write_register>
			if (handle->save_config) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	3260      	adds	r2, #96	; 0x60
 80026ee:	4610      	mov	r0, r2
 80026f0:	4798      	blx	r3
			}
			return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e07d      	b.n	80027f2 <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 80026f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d06f      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 8002702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002704:	b2da      	uxtb	r2, r3
 8002706:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800270a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800270e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4603      	mov	r3, r0
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fe7d 	bl	800241c <decode_phy_payload>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d059      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 8002728:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800272c:	2b00      	cmp	r3, #0
 800272e:	d155      	bne.n	80027dc <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	f107 0318 	add.w	r3, r7, #24
 8002738:	222f      	movs	r2, #47	; 0x2f
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f003 ff39 	bl	80065b4 <memset>
					uint8_t mac_response_len = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 8002748:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800274a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800274e:	4618      	mov	r0, r3
 8002750:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002754:	f107 0214 	add.w	r2, r7, #20
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	f107 0349 	add.w	r3, r7, #73	; 0x49
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	4602      	mov	r2, r0
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff f87f 	bl	8001868 <process_mac_commands>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d035      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8002770:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002774:	2b00      	cmp	r3, #0
 8002776:	d031      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 8002778:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800277c:	4618      	mov	r0, r3
 800277e:	f107 0214 	add.w	r2, r7, #20
 8002782:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002786:	2300      	movs	r3, #0
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4603      	mov	r3, r0
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff fd8f 	bl	80022b0 <encode_phy_payload>
 8002792:	4603      	mov	r3, r0
 8002794:	65bb      	str	r3, [r7, #88]	; 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 8002796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002798:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 800279c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80027a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4603      	mov	r3, r0
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fc8f 	bl	80020cc <send_package>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	2101      	movs	r1, #1
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7fe fcec 	bl	800119c <write_register>
							if (handle->save_config) {
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	3260      	adds	r2, #96	; 0x60
 80027d4:	4610      	mov	r0, r2
 80027d6:	4798      	blx	r3
							}
							return false;
 80027d8:	2300      	movs	r3, #0
			return false;
 80027da:	e00a      	b.n	80027f2 <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	3260      	adds	r2, #96	; 0x60
 80027ec:	4610      	mov	r0, r2
 80027ee:	4798      	blx	r3
	}

	return true;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	37a0      	adds	r7, #160	; 0xa0
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0b2      	sub	sp, #200	; 0xc8
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002802:	f000 fc11 	bl	8003028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002806:	f000 f847 	bl	8002898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800280a:	f000 f943 	bl	8002a94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800280e:	f000 f911 	bl	8002a34 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8002812:	f000 f893 	bl	800293c <MX_I2C3_Init>
  MX_SPI1_Init();
 8002816:	f000 f8d1 	bl	80029bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	rfm95_handle_t rfm95_handle =
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	22b8      	movs	r2, #184	; 0xb8
 800281e:	2100      	movs	r1, #0
 8002820:	4618      	mov	r0, r3
 8002822:	f003 fec7 	bl	80065b4 <memset>
 8002826:	4b17      	ldr	r3, [pc, #92]	; (8002884 <main+0x88>)
 8002828:	607b      	str	r3, [r7, #4]
 800282a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	2310      	movs	r3, #16
 8002832:	81bb      	strh	r3, [r7, #12]
 8002834:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	2301      	movs	r3, #1
 800283c:	82bb      	strh	r3, [r7, #20]
							0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
							0x00, 0x00 }, .receive_mode =
							RFM95_RECEIVE_MODE_NONE };

	// Initialise RFM95 module.
	if (!rfm95_init(&rfm95_handle)) {
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	4618      	mov	r0, r3
 8002842:	f7fe febb 	bl	80015bc <rfm95_init>
 8002846:	4603      	mov	r3, r0
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <main+0x5c>
		printf("RFM95 init failed\n\r");
 8002852:	480d      	ldr	r0, [pc, #52]	; (8002888 <main+0x8c>)
 8002854:	f004 f9a4 	bl	8006ba0 <iprintf>
	}

	uint8_t data_packet[] = { 0x01, 0x02, 0x03, 0x4 };
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <main+0x90>)
 800285a:	603b      	str	r3, [r7, #0]

	if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet,
 800285c:	4639      	mov	r1, r7
 800285e:	1d3b      	adds	r3, r7, #4
 8002860:	2204      	movs	r2, #4
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fedc 	bl	8002620 <rfm95_send_receive_cycle>
 8002868:	4603      	mov	r3, r0
 800286a:	f083 0301 	eor.w	r3, r3, #1
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <main+0x80>
			sizeof(data_packet))) {
		printf("RFM95 send failed\n\r");
 8002874:	4806      	ldr	r0, [pc, #24]	; (8002890 <main+0x94>)
 8002876:	f004 f993 	bl	8006ba0 <iprintf>
 800287a:	e002      	b.n	8002882 <main+0x86>
	} else {
		printf("RFM95 send success\n\r");
 800287c:	4805      	ldr	r0, [pc, #20]	; (8002894 <main+0x98>)
 800287e:	f004 f98f 	bl	8006ba0 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
 8002882:	e7fe      	b.n	8002882 <main+0x86>
 8002884:	200001e8 	.word	0x200001e8
 8002888:	08007830 	.word	0x08007830
 800288c:	04030201 	.word	0x04030201
 8002890:	08007844 	.word	0x08007844
 8002894:	08007858 	.word	0x08007858

08002898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b096      	sub	sp, #88	; 0x58
 800289c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800289e:	f107 0314 	add.w	r3, r7, #20
 80028a2:	2244      	movs	r2, #68	; 0x44
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fe84 	bl	80065b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028ac:	463b      	mov	r3, r7
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	605a      	str	r2, [r3, #4]
 80028b4:	609a      	str	r2, [r3, #8]
 80028b6:	60da      	str	r2, [r3, #12]
 80028b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80028ba:	f44f 7000 	mov.w	r0, #512	; 0x200
 80028be:	f000 ffff 	bl	80038c0 <HAL_PWREx_ControlVoltageScaling>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80028c8:	f000 f95c 	bl	8002b84 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80028cc:	2302      	movs	r3, #2
 80028ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80028d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028d4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80028d6:	2340      	movs	r3, #64	; 0x40
 80028d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028da:	2302      	movs	r3, #2
 80028dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80028de:	2302      	movs	r3, #2
 80028e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028e2:	2301      	movs	r3, #1
 80028e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80028e6:	230a      	movs	r3, #10
 80028e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80028ea:	2307      	movs	r3, #7
 80028ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80028f2:	2302      	movs	r3, #2
 80028f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028f6:	f107 0314 	add.w	r3, r7, #20
 80028fa:	4618      	mov	r0, r3
 80028fc:	f001 f836 	bl	800396c <HAL_RCC_OscConfig>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d001      	beq.n	800290a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002906:	f000 f93d 	bl	8002b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800290a:	230f      	movs	r3, #15
 800290c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290e:	2303      	movs	r3, #3
 8002910:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800291e:	463b      	mov	r3, r7
 8002920:	2104      	movs	r1, #4
 8002922:	4618      	mov	r0, r3
 8002924:	f001 fc42 	bl	80041ac <HAL_RCC_ClockConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800292e:	f000 f929 	bl	8002b84 <Error_Handler>
  }
}
 8002932:	bf00      	nop
 8002934:	3758      	adds	r7, #88	; 0x58
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002942:	4a1c      	ldr	r2, [pc, #112]	; (80029b4 <MX_I2C3_Init+0x78>)
 8002944:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8002946:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <MX_I2C3_Init+0x7c>)
 800294a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <MX_I2C3_Init+0x74>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002952:	4b17      	ldr	r3, [pc, #92]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002954:	2201      	movs	r2, #1
 8002956:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <MX_I2C3_Init+0x74>)
 800295a:	2200      	movs	r2, #0
 800295c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800295e:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002960:	2200      	movs	r2, #0
 8002962:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002966:	2200      	movs	r2, #0
 8002968:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800296a:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <MX_I2C3_Init+0x74>)
 800296c:	2200      	movs	r2, #0
 800296e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002970:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002972:	2200      	movs	r2, #0
 8002974:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002976:	480e      	ldr	r0, [pc, #56]	; (80029b0 <MX_I2C3_Init+0x74>)
 8002978:	f000 fe6e 	bl	8003658 <HAL_I2C_Init>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002982:	f000 f8ff 	bl	8002b84 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002986:	2100      	movs	r1, #0
 8002988:	4809      	ldr	r0, [pc, #36]	; (80029b0 <MX_I2C3_Init+0x74>)
 800298a:	f000 fef4 	bl	8003776 <HAL_I2CEx_ConfigAnalogFilter>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d001      	beq.n	8002998 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002994:	f000 f8f6 	bl	8002b84 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002998:	2100      	movs	r1, #0
 800299a:	4805      	ldr	r0, [pc, #20]	; (80029b0 <MX_I2C3_Init+0x74>)
 800299c:	f000 ff36 	bl	800380c <HAL_I2CEx_ConfigDigitalFilter>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80029a6:	f000 f8ed 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029aa:	bf00      	nop
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000019c 	.word	0x2000019c
 80029b4:	40005c00 	.word	0x40005c00
 80029b8:	10909cec 	.word	0x10909cec

080029bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029c0:	4b1a      	ldr	r3, [pc, #104]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029c2:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <MX_SPI1_Init+0x74>)
 80029c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029c6:	4b19      	ldr	r3, [pc, #100]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80029ce:	4b17      	ldr	r3, [pc, #92]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029d6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80029da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80029dc:	4b13      	ldr	r3, [pc, #76]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029de:	2200      	movs	r2, #0
 80029e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80029e2:	4b12      	ldr	r3, [pc, #72]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80029e8:	4b10      	ldr	r3, [pc, #64]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80029f4:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80029fa:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <MX_SPI1_Init+0x70>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <MX_SPI1_Init+0x70>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002a06:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <MX_SPI1_Init+0x70>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002a0c:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <MX_SPI1_Init+0x70>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <MX_SPI1_Init+0x70>)
 8002a14:	2208      	movs	r2, #8
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a18:	4804      	ldr	r0, [pc, #16]	; (8002a2c <MX_SPI1_Init+0x70>)
 8002a1a:	f002 f92b 	bl	8004c74 <HAL_SPI_Init>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8002a24:	f000 f8ae 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	200001e8 	.word	0x200001e8
 8002a30:	40013000 	.word	0x40013000

08002a34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a3a:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <MX_USART2_UART_Init+0x5c>)
 8002a3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a3e:	4b13      	ldr	r3, [pc, #76]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a5a:	220c      	movs	r2, #12
 8002a5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a64:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a70:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <MX_USART2_UART_Init+0x58>)
 8002a78:	f003 f80c 	bl	8005a94 <HAL_UART_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002a82:	f000 f87f 	bl	8002b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002a86:	bf00      	nop
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	2000024c 	.word	0x2000024c
 8002a90:	40004400 	.word	0x40004400

08002a94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	; 0x28
 8002a98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9a:	f107 0314 	add.w	r3, r7, #20
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	605a      	str	r2, [r3, #4]
 8002aa4:	609a      	str	r2, [r3, #8]
 8002aa6:	60da      	str	r2, [r3, #12]
 8002aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002aaa:	4b2b      	ldr	r3, [pc, #172]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab6:	4b28      	ldr	r3, [pc, #160]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ac2:	4b25      	ldr	r3, [pc, #148]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad6:	60fb      	str	r3, [r7, #12]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae6:	4b1c      	ldr	r3, [pc, #112]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af2:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afe:	4b16      	ldr	r3, [pc, #88]	; (8002b58 <MX_GPIO_Init+0xc4>)
 8002b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	607b      	str	r3, [r7, #4]
 8002b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM95_NRST_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2121      	movs	r1, #33	; 0x21
 8002b0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b12:	f000 fd89 	bl	8003628 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b16:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002b1c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 0314 	add.w	r3, r7, #20
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	480b      	ldr	r0, [pc, #44]	; (8002b5c <MX_GPIO_Init+0xc8>)
 8002b2e:	f000 fc01 	bl	8003334 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_NRST_Pin LD4_Pin */
  GPIO_InitStruct.Pin = RFM95_NRST_Pin|LD4_Pin;
 8002b32:	2321      	movs	r3, #33	; 0x21
 8002b34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 0314 	add.w	r3, r7, #20
 8002b46:	4619      	mov	r1, r3
 8002b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4c:	f000 fbf2 	bl	8003334 <HAL_GPIO_Init>

}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	; 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40021000 	.word	0x40021000
 8002b5c:	48000800 	.word	0x48000800

08002b60 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8002b68:	1d39      	adds	r1, r7, #4
 8002b6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4803      	ldr	r0, [pc, #12]	; (8002b80 <__io_putchar+0x20>)
 8002b72:	f002 ffdd 	bl	8005b30 <HAL_UART_Transmit>

	return ch;
 8002b76:	687b      	ldr	r3, [r7, #4]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	2000024c 	.word	0x2000024c

08002b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b88:	b672      	cpsid	i
}
 8002b8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002b8c:	e7fe      	b.n	8002b8c <Error_Handler+0x8>
	...

08002b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b96:	4b0f      	ldr	r3, [pc, #60]	; (8002bd4 <HAL_MspInit+0x44>)
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	4a0e      	ldr	r2, [pc, #56]	; (8002bd4 <HAL_MspInit+0x44>)
 8002b9c:	f043 0301 	orr.w	r3, r3, #1
 8002ba0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <HAL_MspInit+0x44>)
 8002ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
 8002bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bae:	4b09      	ldr	r3, [pc, #36]	; (8002bd4 <HAL_MspInit+0x44>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <HAL_MspInit+0x44>)
 8002bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bb8:	6593      	str	r3, [r2, #88]	; 0x58
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_MspInit+0x44>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b0a4      	sub	sp, #144	; 0x90
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bf0:	f107 0314 	add.w	r3, r7, #20
 8002bf4:	2268      	movs	r2, #104	; 0x68
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f003 fcdb 	bl	80065b4 <memset>
  if(hi2c->Instance==I2C3)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_I2C_MspInit+0xb0>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d13a      	bne.n	8002c7e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002c08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c0c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c12:	f107 0314 	add.w	r3, r7, #20
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fcce 	bl	80045b8 <HAL_RCCEx_PeriphCLKConfig>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002c22:	f7ff ffaf 	bl	8002b84 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_I2C_MspInit+0xb4>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	4a18      	ldr	r2, [pc, #96]	; (8002c8c <HAL_I2C_MspInit+0xb4>)
 8002c2c:	f043 0304 	orr.w	r3, r3, #4
 8002c30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c32:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_I2C_MspInit+0xb4>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002c54:	2304      	movs	r3, #4
 8002c56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480b      	ldr	r0, [pc, #44]	; (8002c90 <HAL_I2C_MspInit+0xb8>)
 8002c62:	f000 fb67 	bl	8003334 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002c66:	4b09      	ldr	r3, [pc, #36]	; (8002c8c <HAL_I2C_MspInit+0xb4>)
 8002c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6a:	4a08      	ldr	r2, [pc, #32]	; (8002c8c <HAL_I2C_MspInit+0xb4>)
 8002c6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c70:	6593      	str	r3, [r2, #88]	; 0x58
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_I2C_MspInit+0xb4>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002c7e:	bf00      	nop
 8002c80:	3790      	adds	r7, #144	; 0x90
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40005c00 	.word	0x40005c00
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	48000800 	.word	0x48000800

08002c94 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08a      	sub	sp, #40	; 0x28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c9c:	f107 0314 	add.w	r3, r7, #20
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	605a      	str	r2, [r3, #4]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_SPI_MspInit+0x7c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d128      	bne.n	8002d08 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002cb6:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_SPI_MspInit+0x80>)
 8002cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cba:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_SPI_MspInit+0x80>)
 8002cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_SPI_MspInit+0x80>)
 8002cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_SPI_MspInit+0x80>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd2:	4a10      	ldr	r2, [pc, #64]	; (8002d14 <HAL_SPI_MspInit+0x80>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_SPI_MspInit+0x80>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8002ce6:	23d2      	movs	r3, #210	; 0xd2
 8002ce8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0314 	add.w	r3, r7, #20
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d04:	f000 fb16 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002d08:	bf00      	nop
 8002d0a:	3728      	adds	r7, #40	; 0x28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40013000 	.word	0x40013000
 8002d14:	40021000 	.word	0x40021000

08002d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b0a4      	sub	sp, #144	; 0x90
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d30:	f107 0314 	add.w	r3, r7, #20
 8002d34:	2268      	movs	r2, #104	; 0x68
 8002d36:	2100      	movs	r1, #0
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fc3b 	bl	80065b4 <memset>
  if(huart->Instance==USART2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	; (8002dc8 <HAL_UART_MspInit+0xb0>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d13a      	bne.n	8002dbe <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 fc2f 	bl	80045b8 <HAL_RCCEx_PeriphCLKConfig>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d60:	f7ff ff10 	bl	8002b84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d64:	4b19      	ldr	r3, [pc, #100]	; (8002dcc <HAL_UART_MspInit+0xb4>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	4a18      	ldr	r2, [pc, #96]	; (8002dcc <HAL_UART_MspInit+0xb4>)
 8002d6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d70:	4b16      	ldr	r3, [pc, #88]	; (8002dcc <HAL_UART_MspInit+0xb4>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	613b      	str	r3, [r7, #16]
 8002d7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d7c:	4b13      	ldr	r3, [pc, #76]	; (8002dcc <HAL_UART_MspInit+0xb4>)
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	4a12      	ldr	r2, [pc, #72]	; (8002dcc <HAL_UART_MspInit+0xb4>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_UART_MspInit+0xb4>)
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	60fb      	str	r3, [r7, #12]
 8002d92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d94:	230c      	movs	r3, #12
 8002d96:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da4:	2303      	movs	r3, #3
 8002da6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002daa:	2307      	movs	r3, #7
 8002dac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002db4:	4619      	mov	r1, r3
 8002db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002dba:	f000 fabb 	bl	8003334 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3790      	adds	r7, #144	; 0x90
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40004400 	.word	0x40004400
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f000 f960 	bl	80030e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
	return 1;
 8002e28:	2301      	movs	r3, #1
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <_kill>:

int _kill(int pid, int sig)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e3e:	f003 fb5f 	bl	8006500 <__errno>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2216      	movs	r2, #22
 8002e46:	601a      	str	r2, [r3, #0]
	return -1;
 8002e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <_exit>:

void _exit (int status)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ffe7 	bl	8002e34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e66:	e7fe      	b.n	8002e66 <_exit+0x12>

08002e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e7a:	f3af 8000 	nop.w
 8002e7e:	4601      	mov	r1, r0
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	60ba      	str	r2, [r7, #8]
 8002e86:	b2ca      	uxtb	r2, r1
 8002e88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	dbf0      	blt.n	8002e7a <_read+0x12>
	}

return len;
 8002e98:	687b      	ldr	r3, [r7, #4]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b086      	sub	sp, #24
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	60f8      	str	r0, [r7, #12]
 8002eaa:	60b9      	str	r1, [r7, #8]
 8002eac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eae:	2300      	movs	r3, #0
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	e009      	b.n	8002ec8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	60ba      	str	r2, [r7, #8]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fe4f 	bl	8002b60 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	dbf1      	blt.n	8002eb4 <_write+0x12>
	}
	return len;
 8002ed0:	687b      	ldr	r3, [r7, #4]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <_close>:

int _close(int file)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ee2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f02:	605a      	str	r2, [r3, #4]
	return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <_isatty>:

int _isatty(int file)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
	return 1;
 8002f1a:	2301      	movs	r3, #1
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
	return 0;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f4c:	4a14      	ldr	r2, [pc, #80]	; (8002fa0 <_sbrk+0x5c>)
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <_sbrk+0x60>)
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f58:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <_sbrk+0x64>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d102      	bne.n	8002f66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <_sbrk+0x64>)
 8002f62:	4a12      	ldr	r2, [pc, #72]	; (8002fac <_sbrk+0x68>)
 8002f64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d207      	bcs.n	8002f84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f74:	f003 fac4 	bl	8006500 <__errno>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	220c      	movs	r2, #12
 8002f7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f82:	e009      	b.n	8002f98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f84:	4b08      	ldr	r3, [pc, #32]	; (8002fa8 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f8a:	4b07      	ldr	r3, [pc, #28]	; (8002fa8 <_sbrk+0x64>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <_sbrk+0x64>)
 8002f94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3718      	adds	r7, #24
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20028000 	.word	0x20028000
 8002fa4:	00000400 	.word	0x00000400
 8002fa8:	200002d0 	.word	0x200002d0
 8002fac:	200002e8 	.word	0x200002e8

08002fb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002fb4:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <SystemInit+0x20>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	4a05      	ldr	r2, [pc, #20]	; (8002fd0 <SystemInit+0x20>)
 8002fbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002fd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800300c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002fd8:	f7ff ffea 	bl	8002fb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fdc:	480c      	ldr	r0, [pc, #48]	; (8003010 <LoopForever+0x6>)
  ldr r1, =_edata
 8002fde:	490d      	ldr	r1, [pc, #52]	; (8003014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002fe0:	4a0d      	ldr	r2, [pc, #52]	; (8003018 <LoopForever+0xe>)
  movs r3, #0
 8002fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fe4:	e002      	b.n	8002fec <LoopCopyDataInit>

08002fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fea:	3304      	adds	r3, #4

08002fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ff0:	d3f9      	bcc.n	8002fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ff4:	4c0a      	ldr	r4, [pc, #40]	; (8003020 <LoopForever+0x16>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff8:	e001      	b.n	8002ffe <LoopFillZerobss>

08002ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ffc:	3204      	adds	r2, #4

08002ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003000:	d3fb      	bcc.n	8002ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003002:	f003 fa95 	bl	8006530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003006:	f7ff fbf9 	bl	80027fc <main>

0800300a <LoopForever>:

LoopForever:
    b LoopForever
 800300a:	e7fe      	b.n	800300a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800300c:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8003010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003014:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8003018:	08007a04 	.word	0x08007a04
  ldr r2, =_sbss
 800301c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8003020:	200002e8 	.word	0x200002e8

08003024 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003024:	e7fe      	b.n	8003024 <ADC1_IRQHandler>
	...

08003028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800302e:	2300      	movs	r3, #0
 8003030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <HAL_Init+0x3c>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a0b      	ldr	r2, [pc, #44]	; (8003064 <HAL_Init+0x3c>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800303e:	2003      	movs	r0, #3
 8003040:	f000 f944 	bl	80032cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003044:	2000      	movs	r0, #0
 8003046:	f000 f80f 	bl	8003068 <HAL_InitTick>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d002      	beq.n	8003056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	e001      	b.n	800305a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003056:	f7ff fd9b 	bl	8002b90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800305a:	79fb      	ldrb	r3, [r7, #7]
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40022000 	.word	0x40022000

08003068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003070:	2300      	movs	r3, #0
 8003072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003074:	4b17      	ldr	r3, [pc, #92]	; (80030d4 <HAL_InitTick+0x6c>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d023      	beq.n	80030c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_InitTick+0x70>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_InitTick+0x6c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4619      	mov	r1, r3
 8003086:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308a:	fbb3 f3f1 	udiv	r3, r3, r1
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f941 	bl	800331a <HAL_SYSTICK_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2b0f      	cmp	r3, #15
 80030a2:	d809      	bhi.n	80030b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030a4:	2200      	movs	r2, #0
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	f04f 30ff 	mov.w	r0, #4294967295
 80030ac:	f000 f919 	bl	80032e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b0:	4a0a      	ldr	r2, [pc, #40]	; (80030dc <HAL_InitTick+0x74>)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	e007      	b.n	80030c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e004      	b.n	80030c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e001      	b.n	80030c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	20000108 	.word	0x20000108
 80030d8:	20000100 	.word	0x20000100
 80030dc:	20000104 	.word	0x20000104

080030e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80030e4:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x20>)
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	461a      	mov	r2, r3
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_IncTick+0x24>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4413      	add	r3, r2
 80030f0:	4a04      	ldr	r2, [pc, #16]	; (8003104 <HAL_IncTick+0x24>)
 80030f2:	6013      	str	r3, [r2, #0]
}
 80030f4:	bf00      	nop
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000108 	.word	0x20000108
 8003104:	200002d4 	.word	0x200002d4

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_GetTick+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	200002d4 	.word	0x200002d4

08003120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003128:	f7ff ffee 	bl	8003108 <HAL_GetTick>
 800312c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d005      	beq.n	8003146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_Delay+0x44>)
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	461a      	mov	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4413      	add	r3, r2
 8003144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003146:	bf00      	nop
 8003148:	f7ff ffde 	bl	8003108 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	429a      	cmp	r2, r3
 8003156:	d8f7      	bhi.n	8003148 <HAL_Delay+0x28>
  {
  }
}
 8003158:	bf00      	nop
 800315a:	bf00      	nop
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000108 	.word	0x20000108

08003168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003184:	4013      	ands	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800319a:	4a04      	ldr	r2, [pc, #16]	; (80031ac <__NVIC_SetPriorityGrouping+0x44>)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	60d3      	str	r3, [r2, #12]
}
 80031a0:	bf00      	nop
 80031a2:	3714      	adds	r7, #20
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031b4:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <__NVIC_GetPriorityGrouping+0x18>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	0a1b      	lsrs	r3, r3, #8
 80031ba:	f003 0307 	and.w	r3, r3, #7
}
 80031be:	4618      	mov	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	e000ed00 	.word	0xe000ed00

080031cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	6039      	str	r1, [r7, #0]
 80031d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	db0a      	blt.n	80031f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	b2da      	uxtb	r2, r3
 80031e4:	490c      	ldr	r1, [pc, #48]	; (8003218 <__NVIC_SetPriority+0x4c>)
 80031e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ea:	0112      	lsls	r2, r2, #4
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	440b      	add	r3, r1
 80031f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031f4:	e00a      	b.n	800320c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	b2da      	uxtb	r2, r3
 80031fa:	4908      	ldr	r1, [pc, #32]	; (800321c <__NVIC_SetPriority+0x50>)
 80031fc:	79fb      	ldrb	r3, [r7, #7]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	3b04      	subs	r3, #4
 8003204:	0112      	lsls	r2, r2, #4
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	440b      	add	r3, r1
 800320a:	761a      	strb	r2, [r3, #24]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr
 8003218:	e000e100 	.word	0xe000e100
 800321c:	e000ed00 	.word	0xe000ed00

08003220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003220:	b480      	push	{r7}
 8003222:	b089      	sub	sp, #36	; 0x24
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 0307 	and.w	r3, r3, #7
 8003232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f1c3 0307 	rsb	r3, r3, #7
 800323a:	2b04      	cmp	r3, #4
 800323c:	bf28      	it	cs
 800323e:	2304      	movcs	r3, #4
 8003240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	3304      	adds	r3, #4
 8003246:	2b06      	cmp	r3, #6
 8003248:	d902      	bls.n	8003250 <NVIC_EncodePriority+0x30>
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3b03      	subs	r3, #3
 800324e:	e000      	b.n	8003252 <NVIC_EncodePriority+0x32>
 8003250:	2300      	movs	r3, #0
 8003252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003254:	f04f 32ff 	mov.w	r2, #4294967295
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	401a      	ands	r2, r3
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003268:	f04f 31ff 	mov.w	r1, #4294967295
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa01 f303 	lsl.w	r3, r1, r3
 8003272:	43d9      	mvns	r1, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	4313      	orrs	r3, r2
         );
}
 800327a:	4618      	mov	r0, r3
 800327c:	3724      	adds	r7, #36	; 0x24
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3b01      	subs	r3, #1
 8003294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003298:	d301      	bcc.n	800329e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800329a:	2301      	movs	r3, #1
 800329c:	e00f      	b.n	80032be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800329e:	4a0a      	ldr	r2, [pc, #40]	; (80032c8 <SysTick_Config+0x40>)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032a6:	210f      	movs	r1, #15
 80032a8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ac:	f7ff ff8e 	bl	80031cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <SysTick_Config+0x40>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032b6:	4b04      	ldr	r3, [pc, #16]	; (80032c8 <SysTick_Config+0x40>)
 80032b8:	2207      	movs	r2, #7
 80032ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	e000e010 	.word	0xe000e010

080032cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f7ff ff47 	bl	8003168 <__NVIC_SetPriorityGrouping>
}
 80032da:	bf00      	nop
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	4603      	mov	r3, r0
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	607a      	str	r2, [r7, #4]
 80032ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032f0:	2300      	movs	r3, #0
 80032f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032f4:	f7ff ff5c 	bl	80031b0 <__NVIC_GetPriorityGrouping>
 80032f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68b9      	ldr	r1, [r7, #8]
 80032fe:	6978      	ldr	r0, [r7, #20]
 8003300:	f7ff ff8e 	bl	8003220 <NVIC_EncodePriority>
 8003304:	4602      	mov	r2, r0
 8003306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800330a:	4611      	mov	r1, r2
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff5d 	bl	80031cc <__NVIC_SetPriority>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ffb0 	bl	8003288 <SysTick_Config>
 8003328:	4603      	mov	r3, r0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003342:	e154      	b.n	80035ee <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2101      	movs	r1, #1
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	fa01 f303 	lsl.w	r3, r1, r3
 8003350:	4013      	ands	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 8146 	beq.w	80035e8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b01      	cmp	r3, #1
 8003366:	d005      	beq.n	8003374 <HAL_GPIO_Init+0x40>
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 0303 	and.w	r3, r3, #3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d130      	bne.n	80033d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	2203      	movs	r2, #3
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	fa02 f303 	lsl.w	r3, r2, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4313      	orrs	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033aa:	2201      	movs	r2, #1
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	43db      	mvns	r3, r3
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4013      	ands	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	f003 0201 	and.w	r2, r3, #1
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d017      	beq.n	8003412 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	2203      	movs	r2, #3
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	43db      	mvns	r3, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4013      	ands	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	689a      	ldr	r2, [r3, #8]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d123      	bne.n	8003466 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	08da      	lsrs	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3208      	adds	r2, #8
 8003426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	220f      	movs	r2, #15
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	43db      	mvns	r3, r3
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4013      	ands	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	691a      	ldr	r2, [r3, #16]
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	08da      	lsrs	r2, r3, #3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	3208      	adds	r2, #8
 8003460:	6939      	ldr	r1, [r7, #16]
 8003462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	005b      	lsls	r3, r3, #1
 8003470:	2203      	movs	r2, #3
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f003 0203 	and.w	r2, r3, #3
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a0 	beq.w	80035e8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a8:	4b58      	ldr	r3, [pc, #352]	; (800360c <HAL_GPIO_Init+0x2d8>)
 80034aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ac:	4a57      	ldr	r2, [pc, #348]	; (800360c <HAL_GPIO_Init+0x2d8>)
 80034ae:	f043 0301 	orr.w	r3, r3, #1
 80034b2:	6613      	str	r3, [r2, #96]	; 0x60
 80034b4:	4b55      	ldr	r3, [pc, #340]	; (800360c <HAL_GPIO_Init+0x2d8>)
 80034b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b8:	f003 0301 	and.w	r3, r3, #1
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034c0:	4a53      	ldr	r2, [pc, #332]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	089b      	lsrs	r3, r3, #2
 80034c6:	3302      	adds	r3, #2
 80034c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	220f      	movs	r2, #15
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	43db      	mvns	r3, r3
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	4013      	ands	r3, r2
 80034e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80034ea:	d019      	beq.n	8003520 <HAL_GPIO_Init+0x1ec>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a49      	ldr	r2, [pc, #292]	; (8003614 <HAL_GPIO_Init+0x2e0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <HAL_GPIO_Init+0x1e8>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a48      	ldr	r2, [pc, #288]	; (8003618 <HAL_GPIO_Init+0x2e4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d00d      	beq.n	8003518 <HAL_GPIO_Init+0x1e4>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a47      	ldr	r2, [pc, #284]	; (800361c <HAL_GPIO_Init+0x2e8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d007      	beq.n	8003514 <HAL_GPIO_Init+0x1e0>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a46      	ldr	r2, [pc, #280]	; (8003620 <HAL_GPIO_Init+0x2ec>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d101      	bne.n	8003510 <HAL_GPIO_Init+0x1dc>
 800350c:	2304      	movs	r3, #4
 800350e:	e008      	b.n	8003522 <HAL_GPIO_Init+0x1ee>
 8003510:	2307      	movs	r3, #7
 8003512:	e006      	b.n	8003522 <HAL_GPIO_Init+0x1ee>
 8003514:	2303      	movs	r3, #3
 8003516:	e004      	b.n	8003522 <HAL_GPIO_Init+0x1ee>
 8003518:	2302      	movs	r3, #2
 800351a:	e002      	b.n	8003522 <HAL_GPIO_Init+0x1ee>
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_GPIO_Init+0x1ee>
 8003520:	2300      	movs	r3, #0
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	f002 0203 	and.w	r2, r2, #3
 8003528:	0092      	lsls	r2, r2, #2
 800352a:	4093      	lsls	r3, r2
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003532:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_GPIO_Init+0x2dc>)
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	089b      	lsrs	r3, r3, #2
 8003538:	3302      	adds	r3, #2
 800353a:	693a      	ldr	r2, [r7, #16]
 800353c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003540:	4b38      	ldr	r3, [pc, #224]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	43db      	mvns	r3, r3
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	4013      	ands	r3, r2
 800354e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003564:	4a2f      	ldr	r2, [pc, #188]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800356a:	4b2e      	ldr	r3, [pc, #184]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	43db      	mvns	r3, r3
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4013      	ands	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800358e:	4a25      	ldr	r2, [pc, #148]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003594:	4b23      	ldr	r3, [pc, #140]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	43db      	mvns	r3, r3
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4013      	ands	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035b8:	4a1a      	ldr	r2, [pc, #104]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	4013      	ands	r3, r2
 80035cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035e2:	4a10      	ldr	r2, [pc, #64]	; (8003624 <HAL_GPIO_Init+0x2f0>)
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	3301      	adds	r3, #1
 80035ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	fa22 f303 	lsr.w	r3, r2, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f47f aea3 	bne.w	8003344 <HAL_GPIO_Init+0x10>
  }
}
 80035fe:	bf00      	nop
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	40021000 	.word	0x40021000
 8003610:	40010000 	.word	0x40010000
 8003614:	48000400 	.word	0x48000400
 8003618:	48000800 	.word	0x48000800
 800361c:	48000c00 	.word	0x48000c00
 8003620:	48001000 	.word	0x48001000
 8003624:	40010400 	.word	0x40010400

08003628 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
 8003634:	4613      	mov	r3, r2
 8003636:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003638:	787b      	ldrb	r3, [r7, #1]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d003      	beq.n	8003646 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003644:	e002      	b.n	800364c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003646:	887a      	ldrh	r2, [r7, #2]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b082      	sub	sp, #8
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e081      	b.n	800376e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d106      	bne.n	8003684 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f7ff faaa 	bl	8002bd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2224      	movs	r2, #36	; 0x24
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0201 	bic.w	r2, r2, #1
 800369a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d107      	bne.n	80036d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	e006      	b.n	80036e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d104      	bne.n	80036f2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003704:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003714:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691a      	ldr	r2, [r3, #16]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69d9      	ldr	r1, [r3, #28]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a1a      	ldr	r2, [r3, #32]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b20      	cmp	r3, #32
 800378a:	d138      	bne.n	80037fe <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003796:	2302      	movs	r3, #2
 8003798:	e032      	b.n	8003800 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2224      	movs	r2, #36	; 0x24
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0201 	orr.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	e000      	b.n	8003800 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
  }
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b20      	cmp	r3, #32
 8003820:	d139      	bne.n	8003896 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003828:	2b01      	cmp	r3, #1
 800382a:	d101      	bne.n	8003830 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800382c:	2302      	movs	r3, #2
 800382e:	e033      	b.n	8003898 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	68fa      	ldr	r2, [r7, #12]
 8003866:	4313      	orrs	r3, r2
 8003868:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003892:	2300      	movs	r3, #0
 8003894:	e000      	b.n	8003898 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003896:	2302      	movs	r3, #2
  }
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038a8:	4b04      	ldr	r3, [pc, #16]	; (80038bc <HAL_PWREx_GetVoltageRange+0x18>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40007000 	.word	0x40007000

080038c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038ce:	d130      	bne.n	8003932 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80038d0:	4b23      	ldr	r3, [pc, #140]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d038      	beq.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038e6:	4a1e      	ldr	r2, [pc, #120]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80038e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038ee:	4b1d      	ldr	r3, [pc, #116]	; (8003964 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2232      	movs	r2, #50	; 0x32
 80038f4:	fb02 f303 	mul.w	r3, r2, r3
 80038f8:	4a1b      	ldr	r2, [pc, #108]	; (8003968 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80038fa:	fba2 2303 	umull	r2, r3, r2, r3
 80038fe:	0c9b      	lsrs	r3, r3, #18
 8003900:	3301      	adds	r3, #1
 8003902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003904:	e002      	b.n	800390c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	3b01      	subs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003918:	d102      	bne.n	8003920 <HAL_PWREx_ControlVoltageScaling+0x60>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f2      	bne.n	8003906 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003920:	4b0f      	ldr	r3, [pc, #60]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	d110      	bne.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e00f      	b.n	8003952 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800393a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800393e:	d007      	beq.n	8003950 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003940:	4b07      	ldr	r3, [pc, #28]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003948:	4a05      	ldr	r2, [pc, #20]	; (8003960 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800394e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	40007000 	.word	0x40007000
 8003964:	20000100 	.word	0x20000100
 8003968:	431bde83 	.word	0x431bde83

0800396c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d102      	bne.n	8003980 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f000 bc10 	b.w	80041a0 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003980:	4b96      	ldr	r3, [pc, #600]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f003 030c 	and.w	r3, r3, #12
 8003988:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800398a:	4b94      	ldr	r3, [pc, #592]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0310 	and.w	r3, r3, #16
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80e4 	beq.w	8003b6a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <HAL_RCC_OscConfig+0x4c>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	f040 808b 	bne.w	8003ac6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	f040 8087 	bne.w	8003ac6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039b8:	4b88      	ldr	r3, [pc, #544]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_RCC_OscConfig+0x64>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d101      	bne.n	80039d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e3e7      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	4b81      	ldr	r3, [pc, #516]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_RCC_OscConfig+0x7e>
 80039e0:	4b7e      	ldr	r3, [pc, #504]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e8:	e005      	b.n	80039f6 <HAL_RCC_OscConfig+0x8a>
 80039ea:	4b7c      	ldr	r3, [pc, #496]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 80039ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d223      	bcs.n	8003a42 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fd7a 	bl	80044f8 <RCC_SetFlashLatencyFromMSIRange>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e3c8      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0e:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a72      	ldr	r2, [pc, #456]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b70      	ldr	r3, [pc, #448]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	496d      	ldr	r1, [pc, #436]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a2c:	4b6b      	ldr	r3, [pc, #428]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	4968      	ldr	r1, [pc, #416]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	604b      	str	r3, [r1, #4]
 8003a40:	e025      	b.n	8003a8e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a42:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a65      	ldr	r2, [pc, #404]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a48:	f043 0308 	orr.w	r3, r3, #8
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	4b63      	ldr	r3, [pc, #396]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4960      	ldr	r1, [pc, #384]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a60:	4b5e      	ldr	r3, [pc, #376]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	021b      	lsls	r3, r3, #8
 8003a6e:	495b      	ldr	r1, [pc, #364]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fd3a 	bl	80044f8 <RCC_SetFlashLatencyFromMSIRange>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e388      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a8e:	f000 fc6f 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4b51      	ldr	r3, [pc, #324]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	4950      	ldr	r1, [pc, #320]	; (8003be0 <HAL_RCC_OscConfig+0x274>)
 8003aa0:	5ccb      	ldrb	r3, [r1, r3]
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aaa:	4a4e      	ldr	r2, [pc, #312]	; (8003be4 <HAL_RCC_OscConfig+0x278>)
 8003aac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003aae:	4b4e      	ldr	r3, [pc, #312]	; (8003be8 <HAL_RCC_OscConfig+0x27c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7ff fad8 	bl	8003068 <HAL_InitTick>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d052      	beq.n	8003b68 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	e36c      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d032      	beq.n	8003b34 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ace:	4b43      	ldr	r3, [pc, #268]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a42      	ldr	r2, [pc, #264]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003ad4:	f043 0301 	orr.w	r3, r3, #1
 8003ad8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ada:	f7ff fb15 	bl	8003108 <HAL_GetTick>
 8003ade:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ae0:	e008      	b.n	8003af4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ae2:	f7ff fb11 	bl	8003108 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e355      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003af4:	4b39      	ldr	r3, [pc, #228]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0f0      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b00:	4b36      	ldr	r3, [pc, #216]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a35      	ldr	r2, [pc, #212]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b06:	f043 0308 	orr.w	r3, r3, #8
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b33      	ldr	r3, [pc, #204]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4930      	ldr	r1, [pc, #192]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b1e:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	021b      	lsls	r3, r3, #8
 8003b2c:	492b      	ldr	r1, [pc, #172]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
 8003b32:	e01a      	b.n	8003b6a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b34:	4b29      	ldr	r3, [pc, #164]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b40:	f7ff fae2 	bl	8003108 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b48:	f7ff fade 	bl	8003108 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e322      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b5a:	4b20      	ldr	r3, [pc, #128]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0302 	and.w	r3, r3, #2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x1dc>
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b68:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d073      	beq.n	8003c5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d005      	beq.n	8003b88 <HAL_RCC_OscConfig+0x21c>
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b0c      	cmp	r3, #12
 8003b80:	d10e      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d10b      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	4b14      	ldr	r3, [pc, #80]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d063      	beq.n	8003c5c <HAL_RCC_OscConfig+0x2f0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d15f      	bne.n	8003c5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e2ff      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d106      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x24c>
 8003baa:	4b0c      	ldr	r3, [pc, #48]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a0b      	ldr	r2, [pc, #44]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e025      	b.n	8003c04 <HAL_RCC_OscConfig+0x298>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc0:	d114      	bne.n	8003bec <HAL_RCC_OscConfig+0x280>
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a05      	ldr	r2, [pc, #20]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b03      	ldr	r3, [pc, #12]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a02      	ldr	r2, [pc, #8]	; (8003bdc <HAL_RCC_OscConfig+0x270>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e013      	b.n	8003c04 <HAL_RCC_OscConfig+0x298>
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	080078d8 	.word	0x080078d8
 8003be4:	20000100 	.word	0x20000100
 8003be8:	20000104 	.word	0x20000104
 8003bec:	4ba0      	ldr	r3, [pc, #640]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a9f      	ldr	r2, [pc, #636]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bf6:	6013      	str	r3, [r2, #0]
 8003bf8:	4b9d      	ldr	r3, [pc, #628]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a9c      	ldr	r2, [pc, #624]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d013      	beq.n	8003c34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7ff fa7c 	bl	8003108 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c14:	f7ff fa78 	bl	8003108 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b64      	cmp	r3, #100	; 0x64
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e2bc      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c26:	4b92      	ldr	r3, [pc, #584]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d0f0      	beq.n	8003c14 <HAL_RCC_OscConfig+0x2a8>
 8003c32:	e014      	b.n	8003c5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c34:	f7ff fa68 	bl	8003108 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c3c:	f7ff fa64 	bl	8003108 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b64      	cmp	r3, #100	; 0x64
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e2a8      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c4e:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1f0      	bne.n	8003c3c <HAL_RCC_OscConfig+0x2d0>
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d060      	beq.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b04      	cmp	r3, #4
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_OscConfig+0x310>
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	2b0c      	cmp	r3, #12
 8003c74:	d119      	bne.n	8003caa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d116      	bne.n	8003caa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c7c:	4b7c      	ldr	r3, [pc, #496]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_OscConfig+0x328>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e285      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c94:	4b76      	ldr	r3, [pc, #472]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	4973      	ldr	r1, [pc, #460]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ca8:	e040      	b.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d023      	beq.n	8003cfa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb2:	4b6f      	ldr	r3, [pc, #444]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6e      	ldr	r2, [pc, #440]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cbe:	f7ff fa23 	bl	8003108 <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cc4:	e008      	b.n	8003cd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc6:	f7ff fa1f 	bl	8003108 <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d901      	bls.n	8003cd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e263      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cd8:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d0f0      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce4:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	061b      	lsls	r3, r3, #24
 8003cf2:	495f      	ldr	r1, [pc, #380]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
 8003cf8:	e018      	b.n	8003d2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfa:	4b5d      	ldr	r3, [pc, #372]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a5c      	ldr	r2, [pc, #368]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7ff f9ff 	bl	8003108 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7ff f9fb 	bl	8003108 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e23f      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d03c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01c      	beq.n	8003d7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d40:	4b4b      	ldr	r3, [pc, #300]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d46:	4a4a      	ldr	r2, [pc, #296]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d50:	f7ff f9da 	bl	8003108 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d58:	f7ff f9d6 	bl	8003108 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e21a      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d6a:	4b41      	ldr	r3, [pc, #260]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ef      	beq.n	8003d58 <HAL_RCC_OscConfig+0x3ec>
 8003d78:	e01b      	b.n	8003db2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d7a:	4b3d      	ldr	r3, [pc, #244]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d80:	4a3b      	ldr	r2, [pc, #236]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003d82:	f023 0301 	bic.w	r3, r3, #1
 8003d86:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d8a:	f7ff f9bd 	bl	8003108 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d92:	f7ff f9b9 	bl	8003108 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e1fd      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003da4:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1ef      	bne.n	8003d92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 80a6 	beq.w	8003f0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003dc4:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10d      	bne.n	8003dec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dd0:	4b27      	ldr	r3, [pc, #156]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	4a26      	ldr	r2, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dda:	6593      	str	r3, [r2, #88]	; 0x58
 8003ddc:	4b24      	ldr	r3, [pc, #144]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003de8:	2301      	movs	r3, #1
 8003dea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003dec:	4b21      	ldr	r3, [pc, #132]	; (8003e74 <HAL_RCC_OscConfig+0x508>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d118      	bne.n	8003e2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <HAL_RCC_OscConfig+0x508>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <HAL_RCC_OscConfig+0x508>)
 8003dfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e04:	f7ff f980 	bl	8003108 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0c:	f7ff f97c 	bl	8003108 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e1c0      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e1e:	4b15      	ldr	r3, [pc, #84]	; (8003e74 <HAL_RCC_OscConfig+0x508>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d108      	bne.n	8003e44 <HAL_RCC_OscConfig+0x4d8>
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	4a0d      	ldr	r2, [pc, #52]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f043 0301 	orr.w	r3, r3, #1
 8003e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e42:	e029      	b.n	8003e98 <HAL_RCC_OscConfig+0x52c>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b05      	cmp	r3, #5
 8003e4a:	d115      	bne.n	8003e78 <HAL_RCC_OscConfig+0x50c>
 8003e4c:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003e54:	f043 0304 	orr.w	r3, r3, #4
 8003e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e5c:	4b04      	ldr	r3, [pc, #16]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e62:	4a03      	ldr	r2, [pc, #12]	; (8003e70 <HAL_RCC_OscConfig+0x504>)
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e6c:	e014      	b.n	8003e98 <HAL_RCC_OscConfig+0x52c>
 8003e6e:	bf00      	nop
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40007000 	.word	0x40007000
 8003e78:	4b9a      	ldr	r3, [pc, #616]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7e:	4a99      	ldr	r2, [pc, #612]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003e88:	4b96      	ldr	r3, [pc, #600]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8e:	4a95      	ldr	r2, [pc, #596]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d016      	beq.n	8003ece <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7ff f932 	bl	8003108 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ea6:	e00a      	b.n	8003ebe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea8:	f7ff f92e 	bl	8003108 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d901      	bls.n	8003ebe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e170      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ebe:	4b89      	ldr	r3, [pc, #548]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0ed      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x53c>
 8003ecc:	e015      	b.n	8003efa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7ff f91b 	bl	8003108 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ed4:	e00a      	b.n	8003eec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ed6:	f7ff f917 	bl	8003108 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e159      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003eec:	4b7d      	ldr	r3, [pc, #500]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1ed      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003efa:	7ffb      	ldrb	r3, [r7, #31]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d105      	bne.n	8003f0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f00:	4b78      	ldr	r3, [pc, #480]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f04:	4a77      	ldr	r2, [pc, #476]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0320 	and.w	r3, r3, #32
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d03c      	beq.n	8003f92 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01c      	beq.n	8003f5a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003f20:	4b70      	ldr	r3, [pc, #448]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f26:	4a6f      	ldr	r2, [pc, #444]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7ff f8ea 	bl	8003108 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f38:	f7ff f8e6 	bl	8003108 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e12a      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003f4a:	4b66      	ldr	r3, [pc, #408]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ef      	beq.n	8003f38 <HAL_RCC_OscConfig+0x5cc>
 8003f58:	e01b      	b.n	8003f92 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003f5a:	4b62      	ldr	r3, [pc, #392]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f60:	4a60      	ldr	r2, [pc, #384]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f6a:	f7ff f8cd 	bl	8003108 <HAL_GetTick>
 8003f6e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f70:	e008      	b.n	8003f84 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003f72:	f7ff f8c9 	bl	8003108 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e10d      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003f84:	4b57      	ldr	r3, [pc, #348]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ef      	bne.n	8003f72 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 8101 	beq.w	800419e <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	f040 80c9 	bne.w	8004138 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fa6:	4b4f      	ldr	r3, [pc, #316]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0203 	and.w	r2, r3, #3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d12c      	bne.n	8004014 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d123      	bne.n	8004014 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d11b      	bne.n	8004014 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d113      	bne.n	8004014 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ff6:	085b      	lsrs	r3, r3, #1
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d109      	bne.n	8004014 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	085b      	lsrs	r3, r3, #1
 800400c:	3b01      	subs	r3, #1
 800400e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d06b      	beq.n	80040ec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	2b0c      	cmp	r3, #12
 8004018:	d062      	beq.n	80040e0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800401a:	4b32      	ldr	r3, [pc, #200]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0ba      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800402a:	4b2e      	ldr	r3, [pc, #184]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a2d      	ldr	r2, [pc, #180]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8004030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004034:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004036:	f7ff f867 	bl	8003108 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403e:	f7ff f863 	bl	8003108 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0a7      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004050:	4b24      	ldr	r3, [pc, #144]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1f0      	bne.n	800403e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800405c:	4b21      	ldr	r3, [pc, #132]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 800405e:	68da      	ldr	r2, [r3, #12]
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_RCC_OscConfig+0x77c>)
 8004062:	4013      	ands	r3, r2
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800406c:	3a01      	subs	r2, #1
 800406e:	0112      	lsls	r2, r2, #4
 8004070:	4311      	orrs	r1, r2
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004076:	0212      	lsls	r2, r2, #8
 8004078:	4311      	orrs	r1, r2
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800407e:	0852      	lsrs	r2, r2, #1
 8004080:	3a01      	subs	r2, #1
 8004082:	0552      	lsls	r2, r2, #21
 8004084:	4311      	orrs	r1, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800408a:	0852      	lsrs	r2, r2, #1
 800408c:	3a01      	subs	r2, #1
 800408e:	0652      	lsls	r2, r2, #25
 8004090:	4311      	orrs	r1, r2
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004096:	06d2      	lsls	r2, r2, #27
 8004098:	430a      	orrs	r2, r1
 800409a:	4912      	ldr	r1, [pc, #72]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 800409c:	4313      	orrs	r3, r2
 800409e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040a0:	4b10      	ldr	r3, [pc, #64]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0f      	ldr	r2, [pc, #60]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 80040a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040aa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040ac:	4b0d      	ldr	r3, [pc, #52]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040b6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040b8:	f7ff f826 	bl	8003108 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7ff f822 	bl	8003108 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e066      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <HAL_RCC_OscConfig+0x778>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0f0      	beq.n	80040c0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040de:	e05e      	b.n	800419e <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e05d      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
 80040e4:	40021000 	.word	0x40021000
 80040e8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ec:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d152      	bne.n	800419e <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040f8:	4b2b      	ldr	r3, [pc, #172]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a2a      	ldr	r2, [pc, #168]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 80040fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004102:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004104:	4b28      	ldr	r3, [pc, #160]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	4a27      	ldr	r2, [pc, #156]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 800410a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004110:	f7fe fffa 	bl	8003108 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe fff6 	bl	8003108 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e03a      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412a:	4b1f      	ldr	r3, [pc, #124]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x7ac>
 8004136:	e032      	b.n	800419e <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b0c      	cmp	r3, #12
 800413c:	d02d      	beq.n	800419a <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a19      	ldr	r2, [pc, #100]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 8004144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004148:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800414a:	4b17      	ldr	r3, [pc, #92]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d105      	bne.n	8004162 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	4a13      	ldr	r2, [pc, #76]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 800415c:	f023 0303 	bic.w	r3, r3, #3
 8004160:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	4a10      	ldr	r2, [pc, #64]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 8004168:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800416c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004170:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fe ffc9 	bl	8003108 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004178:	e008      	b.n	800418c <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800417a:	f7fe ffc5 	bl	8003108 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e009      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCC_OscConfig+0x83c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f0      	bne.n	800417a <HAL_RCC_OscConfig+0x80e>
 8004198:	e001      	b.n	800419e <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3720      	adds	r7, #32
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000

080041ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e0c8      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c0:	4b66      	ldr	r3, [pc, #408]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	683a      	ldr	r2, [r7, #0]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d910      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ce:	4b63      	ldr	r3, [pc, #396]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f023 0207 	bic.w	r2, r3, #7
 80041d6:	4961      	ldr	r1, [pc, #388]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	4313      	orrs	r3, r2
 80041dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b5f      	ldr	r3, [pc, #380]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b0      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d04c      	beq.n	8004296 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d107      	bne.n	8004214 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004204:	4b56      	ldr	r3, [pc, #344]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d121      	bne.n	8004254 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e09e      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d107      	bne.n	800422c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800421c:	4b50      	ldr	r3, [pc, #320]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004224:	2b00      	cmp	r3, #0
 8004226:	d115      	bne.n	8004254 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e092      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d107      	bne.n	8004244 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004234:	4b4a      	ldr	r3, [pc, #296]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e086      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004244:	4b46      	ldr	r3, [pc, #280]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800424c:	2b00      	cmp	r3, #0
 800424e:	d101      	bne.n	8004254 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e07e      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004254:	4b42      	ldr	r3, [pc, #264]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f023 0203 	bic.w	r2, r3, #3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	493f      	ldr	r1, [pc, #252]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004262:	4313      	orrs	r3, r2
 8004264:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004266:	f7fe ff4f 	bl	8003108 <HAL_GetTick>
 800426a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800426c:	e00a      	b.n	8004284 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426e:	f7fe ff4b 	bl	8003108 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	; 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e066      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004284:	4b36      	ldr	r3, [pc, #216]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f003 020c 	and.w	r2, r3, #12
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	429a      	cmp	r2, r3
 8004294:	d1eb      	bne.n	800426e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d008      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042a2:	4b2f      	ldr	r3, [pc, #188]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	492c      	ldr	r1, [pc, #176]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042b4:	4b29      	ldr	r3, [pc, #164]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d210      	bcs.n	80042e4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042c2:	4b26      	ldr	r3, [pc, #152]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f023 0207 	bic.w	r2, r3, #7
 80042ca:	4924      	ldr	r1, [pc, #144]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042d2:	4b22      	ldr	r3, [pc, #136]	; (800435c <HAL_RCC_ClockConfig+0x1b0>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e036      	b.n	8004352 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	4918      	ldr	r1, [pc, #96]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b00      	cmp	r3, #0
 800430c:	d009      	beq.n	8004322 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800430e:	4b14      	ldr	r3, [pc, #80]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4910      	ldr	r1, [pc, #64]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 800431e:	4313      	orrs	r3, r2
 8004320:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004322:	f000 f825 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8004326:	4602      	mov	r2, r0
 8004328:	4b0d      	ldr	r3, [pc, #52]	; (8004360 <HAL_RCC_ClockConfig+0x1b4>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	091b      	lsrs	r3, r3, #4
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	490c      	ldr	r1, [pc, #48]	; (8004364 <HAL_RCC_ClockConfig+0x1b8>)
 8004334:	5ccb      	ldrb	r3, [r1, r3]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	fa22 f303 	lsr.w	r3, r2, r3
 800433e:	4a0a      	ldr	r2, [pc, #40]	; (8004368 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_ClockConfig+0x1c0>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe fe8e 	bl	8003068 <HAL_InitTick>
 800434c:	4603      	mov	r3, r0
 800434e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004350:	7afb      	ldrb	r3, [r7, #11]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40022000 	.word	0x40022000
 8004360:	40021000 	.word	0x40021000
 8004364:	080078d8 	.word	0x080078d8
 8004368:	20000100 	.word	0x20000100
 800436c:	20000104 	.word	0x20000104

08004370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004370:	b480      	push	{r7}
 8004372:	b089      	sub	sp, #36	; 0x24
 8004374:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004376:	2300      	movs	r3, #0
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	2300      	movs	r3, #0
 800437c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800437e:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
 8004386:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004388:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0303 	and.w	r3, r3, #3
 8004390:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_RCC_GetSysClockFreq+0x34>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	2b0c      	cmp	r3, #12
 800439c:	d121      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d11e      	bne.n	80043e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043a4:	4b34      	ldr	r3, [pc, #208]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 0308 	and.w	r3, r3, #8
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d107      	bne.n	80043c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043b0:	4b31      	ldr	r3, [pc, #196]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043b6:	0a1b      	lsrs	r3, r3, #8
 80043b8:	f003 030f 	and.w	r3, r3, #15
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	e005      	b.n	80043cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043c0:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043cc:	4a2b      	ldr	r2, [pc, #172]	; (800447c <HAL_RCC_GetSysClockFreq+0x10c>)
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043e0:	e00a      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d102      	bne.n	80043ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCC_GetSysClockFreq+0x110>)
 80043ea:	61bb      	str	r3, [r7, #24]
 80043ec:	e004      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d101      	bne.n	80043f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043f4:	4b23      	ldr	r3, [pc, #140]	; (8004484 <HAL_RCC_GetSysClockFreq+0x114>)
 80043f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b0c      	cmp	r3, #12
 80043fc:	d134      	bne.n	8004468 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043fe:	4b1e      	ldr	r3, [pc, #120]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b02      	cmp	r3, #2
 800440c:	d003      	beq.n	8004416 <HAL_RCC_GetSysClockFreq+0xa6>
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d003      	beq.n	800441c <HAL_RCC_GetSysClockFreq+0xac>
 8004414:	e005      	b.n	8004422 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004416:	4b1a      	ldr	r3, [pc, #104]	; (8004480 <HAL_RCC_GetSysClockFreq+0x110>)
 8004418:	617b      	str	r3, [r7, #20]
      break;
 800441a:	e005      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <HAL_RCC_GetSysClockFreq+0x114>)
 800441e:	617b      	str	r3, [r7, #20]
      break;
 8004420:	e002      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	617b      	str	r3, [r7, #20]
      break;
 8004426:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004428:	4b13      	ldr	r3, [pc, #76]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	091b      	lsrs	r3, r3, #4
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	3301      	adds	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004436:	4b10      	ldr	r3, [pc, #64]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0a1b      	lsrs	r3, r3, #8
 800443c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_RCC_GetSysClockFreq+0x108>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	0e5b      	lsrs	r3, r3, #25
 8004454:	f003 0303 	and.w	r3, r3, #3
 8004458:	3301      	adds	r3, #1
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004468:	69bb      	ldr	r3, [r7, #24]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3724      	adds	r7, #36	; 0x24
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000
 800447c:	080078f0 	.word	0x080078f0
 8004480:	00f42400 	.word	0x00f42400
 8004484:	007a1200 	.word	0x007a1200

08004488 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000100 	.word	0x20000100

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044a4:	f7ff fff0 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b06      	ldr	r3, [pc, #24]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0a1b      	lsrs	r3, r3, #8
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4904      	ldr	r1, [pc, #16]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	f003 031f 	and.w	r3, r3, #31
 80044bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	40021000 	.word	0x40021000
 80044c8:	080078e8 	.word	0x080078e8

080044cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044d0:	f7ff ffda 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044d4:	4602      	mov	r2, r0
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	0adb      	lsrs	r3, r3, #11
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	4904      	ldr	r1, [pc, #16]	; (80044f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80044e2:	5ccb      	ldrb	r3, [r1, r3]
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	080078e8 	.word	0x080078e8

080044f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b086      	sub	sp, #24
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004510:	f7ff f9c8 	bl	80038a4 <HAL_PWREx_GetVoltageRange>
 8004514:	6178      	str	r0, [r7, #20]
 8004516:	e014      	b.n	8004542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004518:	4b25      	ldr	r3, [pc, #148]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800451c:	4a24      	ldr	r2, [pc, #144]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800451e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004522:	6593      	str	r3, [r2, #88]	; 0x58
 8004524:	4b22      	ldr	r3, [pc, #136]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	60fb      	str	r3, [r7, #12]
 800452e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004530:	f7ff f9b8 	bl	80038a4 <HAL_PWREx_GetVoltageRange>
 8004534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4b1e      	ldr	r3, [pc, #120]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	4a1d      	ldr	r2, [pc, #116]	; (80045b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004548:	d10b      	bne.n	8004562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2b80      	cmp	r3, #128	; 0x80
 800454e:	d919      	bls.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2ba0      	cmp	r3, #160	; 0xa0
 8004554:	d902      	bls.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004556:	2302      	movs	r3, #2
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	e013      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800455c:	2301      	movs	r3, #1
 800455e:	613b      	str	r3, [r7, #16]
 8004560:	e010      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b80      	cmp	r3, #128	; 0x80
 8004566:	d902      	bls.n	800456e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004568:	2303      	movs	r3, #3
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	e00a      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d102      	bne.n	800457a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004574:	2302      	movs	r3, #2
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	e004      	b.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b70      	cmp	r3, #112	; 0x70
 800457e:	d101      	bne.n	8004584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004580:	2301      	movs	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f023 0207 	bic.w	r2, r3, #7
 800458c:	4909      	ldr	r1, [pc, #36]	; (80045b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004594:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d001      	beq.n	80045a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e000      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40022000 	.word	0x40022000

080045b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b086      	sub	sp, #24
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045c0:	2300      	movs	r3, #0
 80045c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045c4:	2300      	movs	r3, #0
 80045c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d031      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045dc:	d01a      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80045de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80045e2:	d814      	bhi.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x56>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d009      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80045e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80045ec:	d10f      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80045ee:	4b5d      	ldr	r3, [pc, #372]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	4a5c      	ldr	r2, [pc, #368]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80045f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045f8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80045fa:	e00c      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3304      	adds	r3, #4
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fa44 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800460c:	e003      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	74fb      	strb	r3, [r7, #19]
      break;
 8004612:	e000      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004616:	7cfb      	ldrb	r3, [r7, #19]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d10b      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800461c:	4b51      	ldr	r3, [pc, #324]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800462a:	494e      	ldr	r1, [pc, #312]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800462c:	4313      	orrs	r3, r2
 800462e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004632:	e001      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004640:	2b00      	cmp	r3, #0
 8004642:	f000 809e 	beq.w	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004646:	2300      	movs	r3, #0
 8004648:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800464a:	4b46      	ldr	r3, [pc, #280]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00d      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004660:	4b40      	ldr	r3, [pc, #256]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	4a3f      	ldr	r2, [pc, #252]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800466a:	6593      	str	r3, [r2, #88]	; 0x58
 800466c:	4b3d      	ldr	r3, [pc, #244]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004678:	2301      	movs	r3, #1
 800467a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800467c:	4b3a      	ldr	r3, [pc, #232]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a39      	ldr	r2, [pc, #228]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004688:	f7fe fd3e 	bl	8003108 <HAL_GetTick>
 800468c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800468e:	e009      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7fe fd3a 	bl	8003108 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d902      	bls.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	74fb      	strb	r3, [r7, #19]
        break;
 80046a2:	e005      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80046a4:	4b30      	ldr	r3, [pc, #192]	; (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0ef      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80046b0:	7cfb      	ldrb	r3, [r7, #19]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d15a      	bne.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80046b6:	4b2b      	ldr	r3, [pc, #172]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d01e      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d019      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046d2:	4b24      	ldr	r3, [pc, #144]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046dc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046de:	4b21      	ldr	r3, [pc, #132]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046e4:	4a1f      	ldr	r2, [pc, #124]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046ee:	4b1d      	ldr	r3, [pc, #116]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f4:	4a1b      	ldr	r2, [pc, #108]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046fe:	4a19      	ldr	r2, [pc, #100]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d016      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004710:	f7fe fcfa 	bl	8003108 <HAL_GetTick>
 8004714:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004716:	e00b      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004718:	f7fe fcf6 	bl	8003108 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f241 3288 	movw	r2, #5000	; 0x1388
 8004726:	4293      	cmp	r3, r2
 8004728:	d902      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	74fb      	strb	r3, [r7, #19]
            break;
 800472e:	e006      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004730:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b00      	cmp	r3, #0
 800473c:	d0ec      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800473e:	7cfb      	ldrb	r3, [r7, #19]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10b      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004744:	4b07      	ldr	r3, [pc, #28]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004752:	4904      	ldr	r1, [pc, #16]	; (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004754:	4313      	orrs	r3, r2
 8004756:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800475a:	e009      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800475c:	7cfb      	ldrb	r3, [r7, #19]
 800475e:	74bb      	strb	r3, [r7, #18]
 8004760:	e006      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004762:	bf00      	nop
 8004764:	40021000 	.word	0x40021000
 8004768:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800476c:	7cfb      	ldrb	r3, [r7, #19]
 800476e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004770:	7c7b      	ldrb	r3, [r7, #17]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d105      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004776:	4b9e      	ldr	r3, [pc, #632]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800477a:	4a9d      	ldr	r2, [pc, #628]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800477c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004780:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0301 	and.w	r3, r3, #1
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800478e:	4b98      	ldr	r3, [pc, #608]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004794:	f023 0203 	bic.w	r2, r3, #3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a1b      	ldr	r3, [r3, #32]
 800479c:	4994      	ldr	r1, [pc, #592]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80047b0:	4b8f      	ldr	r3, [pc, #572]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b6:	f023 020c 	bic.w	r2, r3, #12
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047be:	498c      	ldr	r1, [pc, #560]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047d2:	4b87      	ldr	r3, [pc, #540]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	4983      	ldr	r1, [pc, #524]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047f4:	4b7e      	ldr	r3, [pc, #504]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80047f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	497b      	ldr	r1, [pc, #492]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004816:	4b76      	ldr	r3, [pc, #472]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004824:	4972      	ldr	r1, [pc, #456]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004838:	4b6d      	ldr	r3, [pc, #436]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800483e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	496a      	ldr	r1, [pc, #424]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800485a:	4b65      	ldr	r3, [pc, #404]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004868:	4961      	ldr	r1, [pc, #388]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800487c:	4b5c      	ldr	r3, [pc, #368]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800488a:	4959      	ldr	r1, [pc, #356]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800489e:	4b54      	ldr	r3, [pc, #336]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ac:	4950      	ldr	r1, [pc, #320]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048c0:	4b4b      	ldr	r3, [pc, #300]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	4948      	ldr	r1, [pc, #288]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048e2:	4b43      	ldr	r3, [pc, #268]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e8:	f023 0203 	bic.w	r2, r3, #3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	493f      	ldr	r1, [pc, #252]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d028      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004904:	4b3a      	ldr	r3, [pc, #232]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004912:	4937      	ldr	r1, [pc, #220]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004922:	d106      	bne.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004924:	4b32      	ldr	r3, [pc, #200]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a31      	ldr	r2, [pc, #196]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800492a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800492e:	60d3      	str	r3, [r2, #12]
 8004930:	e011      	b.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800493a:	d10c      	bne.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	3304      	adds	r3, #4
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f8a4 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004952:	7cfb      	ldrb	r3, [r7, #19]
 8004954:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d028      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004962:	4b23      	ldr	r3, [pc, #140]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004968:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004970:	491f      	ldr	r1, [pc, #124]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004972:	4313      	orrs	r3, r2
 8004974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004980:	d106      	bne.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004982:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	4a1a      	ldr	r2, [pc, #104]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004988:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498c:	60d3      	str	r3, [r2, #12]
 800498e:	e011      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004994:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004998:	d10c      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3304      	adds	r3, #4
 800499e:	2101      	movs	r1, #1
 80049a0:	4618      	mov	r0, r3
 80049a2:	f000 f875 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 80049a6:	4603      	mov	r3, r0
 80049a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049aa:	7cfb      	ldrb	r3, [r7, #19]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d001      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 80049b0:	7cfb      	ldrb	r3, [r7, #19]
 80049b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d02b      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049c0:	4b0b      	ldr	r3, [pc, #44]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ce:	4908      	ldr	r1, [pc, #32]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049de:	d109      	bne.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	4a02      	ldr	r2, [pc, #8]	; (80049f0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ea:	60d3      	str	r3, [r2, #12]
 80049ec:	e014      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x460>
 80049ee:	bf00      	nop
 80049f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049fc:	d10c      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3304      	adds	r3, #4
 8004a02:	2101      	movs	r1, #1
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 f843 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a0e:	7cfb      	ldrb	r3, [r7, #19]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d01c      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a24:	4b19      	ldr	r3, [pc, #100]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a2a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a32:	4916      	ldr	r1, [pc, #88]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a42:	d10c      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3304      	adds	r3, #4
 8004a48:	2102      	movs	r1, #2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 f820 	bl	8004a90 <RCCEx_PLLSAI1_Config>
 8004a50:	4603      	mov	r3, r0
 8004a52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a54:	7cfb      	ldrb	r3, [r7, #19]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004a5a:	7cfb      	ldrb	r3, [r7, #19]
 8004a5c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00a      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a6a:	4b08      	ldr	r3, [pc, #32]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a78:	4904      	ldr	r1, [pc, #16]	; (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004a80:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3718      	adds	r7, #24
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a9e:	4b74      	ldr	r3, [pc, #464]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d018      	beq.n	8004adc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004aaa:	4b71      	ldr	r3, [pc, #452]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0203 	and.w	r2, r3, #3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d10d      	bne.n	8004ad6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
       ||
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d009      	beq.n	8004ad6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ac2:	4b6b      	ldr	r3, [pc, #428]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	091b      	lsrs	r3, r3, #4
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d047      	beq.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	e044      	b.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d018      	beq.n	8004b16 <RCCEx_PLLSAI1_Config+0x86>
 8004ae4:	2b03      	cmp	r3, #3
 8004ae6:	d825      	bhi.n	8004b34 <RCCEx_PLLSAI1_Config+0xa4>
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d002      	beq.n	8004af2 <RCCEx_PLLSAI1_Config+0x62>
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d009      	beq.n	8004b04 <RCCEx_PLLSAI1_Config+0x74>
 8004af0:	e020      	b.n	8004b34 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004af2:	4b5f      	ldr	r3, [pc, #380]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d11d      	bne.n	8004b3a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b02:	e01a      	b.n	8004b3a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b04:	4b5a      	ldr	r3, [pc, #360]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d116      	bne.n	8004b3e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b14:	e013      	b.n	8004b3e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b16:	4b56      	ldr	r3, [pc, #344]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10f      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b22:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d109      	bne.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b32:	e006      	b.n	8004b42 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e004      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b3a:	bf00      	nop
 8004b3c:	e002      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b3e:	bf00      	nop
 8004b40:	e000      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004b42:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b44:	7bfb      	ldrb	r3, [r7, #15]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10d      	bne.n	8004b66 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b4a:	4b49      	ldr	r3, [pc, #292]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6819      	ldr	r1, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	011b      	lsls	r3, r3, #4
 8004b5e:	430b      	orrs	r3, r1
 8004b60:	4943      	ldr	r1, [pc, #268]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d17c      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b6c:	4b40      	ldr	r3, [pc, #256]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a3f      	ldr	r2, [pc, #252]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b78:	f7fe fac6 	bl	8003108 <HAL_GetTick>
 8004b7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b7e:	e009      	b.n	8004b94 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b80:	f7fe fac2 	bl	8003108 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d902      	bls.n	8004b94 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	73fb      	strb	r3, [r7, #15]
        break;
 8004b92:	e005      	b.n	8004ba0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1ef      	bne.n	8004b80 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ba0:	7bfb      	ldrb	r3, [r7, #15]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d15f      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d110      	bne.n	8004bce <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bac:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004bb4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	6892      	ldr	r2, [r2, #8]
 8004bbc:	0211      	lsls	r1, r2, #8
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	68d2      	ldr	r2, [r2, #12]
 8004bc2:	06d2      	lsls	r2, r2, #27
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	492a      	ldr	r1, [pc, #168]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	610b      	str	r3, [r1, #16]
 8004bcc:	e027      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d112      	bne.n	8004bfa <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bd4:	4b26      	ldr	r3, [pc, #152]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004bdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	6892      	ldr	r2, [r2, #8]
 8004be4:	0211      	lsls	r1, r2, #8
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6912      	ldr	r2, [r2, #16]
 8004bea:	0852      	lsrs	r2, r2, #1
 8004bec:	3a01      	subs	r2, #1
 8004bee:	0552      	lsls	r2, r2, #21
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	491f      	ldr	r1, [pc, #124]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	610b      	str	r3, [r1, #16]
 8004bf8:	e011      	b.n	8004c1e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bfa:	4b1d      	ldr	r3, [pc, #116]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004c02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6892      	ldr	r2, [r2, #8]
 8004c0a:	0211      	lsls	r1, r2, #8
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6952      	ldr	r2, [r2, #20]
 8004c10:	0852      	lsrs	r2, r2, #1
 8004c12:	3a01      	subs	r2, #1
 8004c14:	0652      	lsls	r2, r2, #25
 8004c16:	430a      	orrs	r2, r1
 8004c18:	4915      	ldr	r1, [pc, #84]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a13      	ldr	r2, [pc, #76]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c24:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c28:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2a:	f7fe fa6d 	bl	8003108 <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c30:	e009      	b.n	8004c46 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c32:	f7fe fa69 	bl	8003108 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d902      	bls.n	8004c46 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	73fb      	strb	r3, [r7, #15]
          break;
 8004c44:	e005      	b.n	8004c52 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ef      	beq.n	8004c32 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004c52:	7bfb      	ldrb	r3, [r7, #15]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c5a:	691a      	ldr	r2, [r3, #16]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	4903      	ldr	r1, [pc, #12]	; (8004c70 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3710      	adds	r7, #16
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40021000 	.word	0x40021000

08004c74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d101      	bne.n	8004c86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e095      	b.n	8004db2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d108      	bne.n	8004ca0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c96:	d009      	beq.n	8004cac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61da      	str	r2, [r3, #28]
 8004c9e:	e005      	b.n	8004cac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d106      	bne.n	8004ccc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f7fd ffe4 	bl	8002c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ce2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cec:	d902      	bls.n	8004cf4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e002      	b.n	8004cfa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004cf8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	68db      	ldr	r3, [r3, #12]
 8004cfe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004d02:	d007      	beq.n	8004d14 <HAL_SPI_Init+0xa0>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004d0c:	d002      	beq.n	8004d14 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d24:	431a      	orrs	r2, r3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	431a      	orrs	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	ea42 0103 	orr.w	r1, r2, r3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	0c1b      	lsrs	r3, r3, #16
 8004d70:	f003 0204 	and.w	r2, r3, #4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	431a      	orrs	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d90:	ea42 0103 	orr.w	r1, r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}

08004dba <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b088      	sub	sp, #32
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	60f8      	str	r0, [r7, #12]
 8004dc2:	60b9      	str	r1, [r7, #8]
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d101      	bne.n	8004ddc <HAL_SPI_Transmit+0x22>
 8004dd8:	2302      	movs	r3, #2
 8004dda:	e158      	b.n	800508e <HAL_SPI_Transmit+0x2d4>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004de4:	f7fe f990 	bl	8003108 <HAL_GetTick>
 8004de8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004dea:	88fb      	ldrh	r3, [r7, #6]
 8004dec:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d002      	beq.n	8004e00 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004dfe:	e13d      	b.n	800507c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_SPI_Transmit+0x52>
 8004e06:	88fb      	ldrh	r3, [r7, #6]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d102      	bne.n	8004e12 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004e10:	e134      	b.n	800507c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2203      	movs	r2, #3
 8004e16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68ba      	ldr	r2, [r7, #8]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	88fa      	ldrh	r2, [r7, #6]
 8004e2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	88fa      	ldrh	r2, [r7, #6]
 8004e30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2200      	movs	r2, #0
 8004e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e5c:	d10f      	bne.n	8004e7e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e6c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e7c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e88:	2b40      	cmp	r3, #64	; 0x40
 8004e8a:	d007      	beq.n	8004e9c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e9a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ea4:	d94b      	bls.n	8004f3e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_SPI_Transmit+0xfa>
 8004eae:	8afb      	ldrh	r3, [r7, #22]
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d13e      	bne.n	8004f32 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb8:	881a      	ldrh	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	1c9a      	adds	r2, r3, #2
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004ed8:	e02b      	b.n	8004f32 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d112      	bne.n	8004f0e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eec:	881a      	ldrh	r2, [r3, #0]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef8:	1c9a      	adds	r2, r3, #2
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	3b01      	subs	r3, #1
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f0c:	e011      	b.n	8004f32 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f0e:	f7fe f8fb 	bl	8003108 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d803      	bhi.n	8004f26 <HAL_SPI_Transmit+0x16c>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d102      	bne.n	8004f2c <HAL_SPI_Transmit+0x172>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d102      	bne.n	8004f32 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f30:	e0a4      	b.n	800507c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1ce      	bne.n	8004eda <HAL_SPI_Transmit+0x120>
 8004f3c:	e07c      	b.n	8005038 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_SPI_Transmit+0x192>
 8004f46:	8afb      	ldrh	r3, [r7, #22]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d170      	bne.n	800502e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d912      	bls.n	8004f7c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f5a:	881a      	ldrh	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f66:	1c9a      	adds	r2, r3, #2
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	3b02      	subs	r3, #2
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f7a:	e058      	b.n	800502e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	7812      	ldrb	r2, [r2, #0]
 8004f88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004fa2:	e044      	b.n	800502e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d12b      	bne.n	800500a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d912      	bls.n	8004fe2 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	881a      	ldrh	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	1c9a      	adds	r2, r3, #2
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b02      	subs	r3, #2
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fe0:	e025      	b.n	800502e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	7812      	ldrb	r2, [r2, #0]
 8004fee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	3b01      	subs	r3, #1
 8005002:	b29a      	uxth	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005008:	e011      	b.n	800502e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800500a:	f7fe f87d 	bl	8003108 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	683a      	ldr	r2, [r7, #0]
 8005016:	429a      	cmp	r2, r3
 8005018:	d803      	bhi.n	8005022 <HAL_SPI_Transmit+0x268>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d102      	bne.n	8005028 <HAL_SPI_Transmit+0x26e>
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800502c:	e026      	b.n	800507c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005032:	b29b      	uxth	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1b5      	bne.n	8004fa4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	6839      	ldr	r1, [r7, #0]
 800503c:	68f8      	ldr	r0, [r7, #12]
 800503e:	f000 fce3 	bl	8005a08 <SPI_EndRxTxTransaction>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2220      	movs	r2, #32
 800504c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005056:	2300      	movs	r3, #0
 8005058:	613b      	str	r3, [r7, #16]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	613b      	str	r3, [r7, #16]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	e000      	b.n	800507c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800507a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800508c:	7ffb      	ldrb	r3, [r7, #31]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}

08005096 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b088      	sub	sp, #32
 800509a:	af02      	add	r7, sp, #8
 800509c:	60f8      	str	r0, [r7, #12]
 800509e:	60b9      	str	r1, [r7, #8]
 80050a0:	603b      	str	r3, [r7, #0]
 80050a2:	4613      	mov	r3, r2
 80050a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b2:	d112      	bne.n	80050da <HAL_SPI_Receive+0x44>
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10e      	bne.n	80050da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2204      	movs	r2, #4
 80050c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80050c4:	88fa      	ldrh	r2, [r7, #6]
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	4613      	mov	r3, r2
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	68b9      	ldr	r1, [r7, #8]
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f910 	bl	80052f6 <HAL_SPI_TransmitReceive>
 80050d6:	4603      	mov	r3, r0
 80050d8:	e109      	b.n	80052ee <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_SPI_Receive+0x52>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e102      	b.n	80052ee <HAL_SPI_Receive+0x258>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f0:	f7fe f80a 	bl	8003108 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d002      	beq.n	8005108 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005106:	e0e9      	b.n	80052dc <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_SPI_Receive+0x7e>
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d102      	bne.n	800511a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005118:	e0e0      	b.n	80052dc <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2204      	movs	r2, #4
 800511e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	88fa      	ldrh	r2, [r7, #6]
 8005132:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	88fa      	ldrh	r2, [r7, #6]
 800513a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2200      	movs	r2, #0
 8005154:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2200      	movs	r2, #0
 800515a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005164:	d908      	bls.n	8005178 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005174:	605a      	str	r2, [r3, #4]
 8005176:	e007      	b.n	8005188 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d10f      	bne.n	80051b2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b40      	cmp	r3, #64	; 0x40
 80051be:	d007      	beq.n	80051d0 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051d8:	d867      	bhi.n	80052aa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80051da:	e030      	b.n	800523e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d117      	bne.n	800521a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f103 020c 	add.w	r2, r3, #12
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f6:	7812      	ldrb	r2, [r2, #0]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800520c:	b29b      	uxth	r3, r3
 800520e:	3b01      	subs	r3, #1
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005218:	e011      	b.n	800523e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800521a:	f7fd ff75 	bl	8003108 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d803      	bhi.n	8005232 <HAL_SPI_Receive+0x19c>
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005230:	d102      	bne.n	8005238 <HAL_SPI_Receive+0x1a2>
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d102      	bne.n	800523e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800523c:	e04e      	b.n	80052dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005244:	b29b      	uxth	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1c8      	bne.n	80051dc <HAL_SPI_Receive+0x146>
 800524a:	e034      	b.n	80052b6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b01      	cmp	r3, #1
 8005258:	d115      	bne.n	8005286 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	b292      	uxth	r2, r2
 8005266:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	1c9a      	adds	r2, r3, #2
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005278:	b29b      	uxth	r3, r3
 800527a:	3b01      	subs	r3, #1
 800527c:	b29a      	uxth	r2, r3
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005284:	e011      	b.n	80052aa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005286:	f7fd ff3f 	bl	8003108 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d803      	bhi.n	800529e <HAL_SPI_Receive+0x208>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d102      	bne.n	80052a4 <HAL_SPI_Receive+0x20e>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80052a8:	e018      	b.n	80052dc <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1ca      	bne.n	800524c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	6839      	ldr	r1, [r7, #0]
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fb4c 	bl	8005958 <SPI_EndRxTransaction>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2220      	movs	r2, #32
 80052ca:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	75fb      	strb	r3, [r7, #23]
 80052d8:	e000      	b.n	80052dc <HAL_SPI_Receive+0x246>
  }

error :
 80052da:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b08a      	sub	sp, #40	; 0x28
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
 8005302:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005304:	2301      	movs	r3, #1
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d101      	bne.n	800531c <HAL_SPI_TransmitReceive+0x26>
 8005318:	2302      	movs	r3, #2
 800531a:	e1fb      	b.n	8005714 <HAL_SPI_TransmitReceive+0x41e>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005324:	f7fd fef0 	bl	8003108 <HAL_GetTick>
 8005328:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005330:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800533c:	887b      	ldrh	r3, [r7, #2]
 800533e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005340:	7efb      	ldrb	r3, [r7, #27]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d00e      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x6e>
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800534c:	d106      	bne.n	800535c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d102      	bne.n	800535c <HAL_SPI_TransmitReceive+0x66>
 8005356:	7efb      	ldrb	r3, [r7, #27]
 8005358:	2b04      	cmp	r3, #4
 800535a:	d003      	beq.n	8005364 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800535c:	2302      	movs	r3, #2
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005362:	e1cd      	b.n	8005700 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d005      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x80>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d002      	beq.n	8005376 <HAL_SPI_TransmitReceive+0x80>
 8005370:	887b      	ldrh	r3, [r7, #2]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d103      	bne.n	800537e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800537c:	e1c0      	b.n	8005700 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b04      	cmp	r3, #4
 8005388:	d003      	beq.n	8005392 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2205      	movs	r2, #5
 800538e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	887a      	ldrh	r2, [r7, #2]
 80053a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	887a      	ldrh	r2, [r7, #2]
 80053aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	887a      	ldrh	r2, [r7, #2]
 80053b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	887a      	ldrh	r2, [r7, #2]
 80053be:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	2200      	movs	r2, #0
 80053ca:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053d4:	d802      	bhi.n	80053dc <HAL_SPI_TransmitReceive+0xe6>
 80053d6:	8a3b      	ldrh	r3, [r7, #16]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d908      	bls.n	80053ee <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685a      	ldr	r2, [r3, #4]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80053ea:	605a      	str	r2, [r3, #4]
 80053ec:	e007      	b.n	80053fe <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053fc:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005408:	2b40      	cmp	r3, #64	; 0x40
 800540a:	d007      	beq.n	800541c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800541a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005424:	d97c      	bls.n	8005520 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_SPI_TransmitReceive+0x13e>
 800542e:	8a7b      	ldrh	r3, [r7, #18]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d169      	bne.n	8005508 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	881a      	ldrh	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	1c9a      	adds	r2, r3, #2
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005458:	e056      	b.n	8005508 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0302 	and.w	r3, r3, #2
 8005464:	2b02      	cmp	r3, #2
 8005466:	d11b      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x1aa>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546c:	b29b      	uxth	r3, r3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <HAL_SPI_TransmitReceive+0x1aa>
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	2b01      	cmp	r3, #1
 8005476:	d113      	bne.n	80054a0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 0301 	and.w	r3, r3, #1
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11c      	bne.n	80054e8 <HAL_SPI_TransmitReceive+0x1f2>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d016      	beq.n	80054e8 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68da      	ldr	r2, [r3, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	b292      	uxth	r2, r2
 80054c6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	1c9a      	adds	r2, r3, #2
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054d8:	b29b      	uxth	r3, r3
 80054da:	3b01      	subs	r3, #1
 80054dc:	b29a      	uxth	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054e4:	2301      	movs	r3, #1
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80054e8:	f7fd fe0e 	bl	8003108 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d807      	bhi.n	8005508 <HAL_SPI_TransmitReceive+0x212>
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d003      	beq.n	8005508 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005506:	e0fb      	b.n	8005700 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1a3      	bne.n	800545a <HAL_SPI_TransmitReceive+0x164>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005518:	b29b      	uxth	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d19d      	bne.n	800545a <HAL_SPI_TransmitReceive+0x164>
 800551e:	e0df      	b.n	80056e0 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_SPI_TransmitReceive+0x23a>
 8005528:	8a7b      	ldrh	r3, [r7, #18]
 800552a:	2b01      	cmp	r3, #1
 800552c:	f040 80cb 	bne.w	80056c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005534:	b29b      	uxth	r3, r3
 8005536:	2b01      	cmp	r3, #1
 8005538:	d912      	bls.n	8005560 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553e:	881a      	ldrh	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554a:	1c9a      	adds	r2, r3, #2
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b02      	subs	r3, #2
 8005558:	b29a      	uxth	r2, r3
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800555e:	e0b2      	b.n	80056c6 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	7812      	ldrb	r2, [r2, #0]
 800556c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	1c5a      	adds	r2, r3, #1
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800557c:	b29b      	uxth	r3, r3
 800557e:	3b01      	subs	r3, #1
 8005580:	b29a      	uxth	r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005586:	e09e      	b.n	80056c6 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b02      	cmp	r3, #2
 8005594:	d134      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x30a>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800559a:	b29b      	uxth	r3, r3
 800559c:	2b00      	cmp	r3, #0
 800559e:	d02f      	beq.n	8005600 <HAL_SPI_TransmitReceive+0x30a>
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d12c      	bne.n	8005600 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d912      	bls.n	80055d6 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b4:	881a      	ldrh	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	3b02      	subs	r3, #2
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055d4:	e012      	b.n	80055fc <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	7812      	ldrb	r2, [r2, #0]
 80055e2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055fc:	2300      	movs	r3, #0
 80055fe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b01      	cmp	r3, #1
 800560c:	d148      	bne.n	80056a0 <HAL_SPI_TransmitReceive+0x3aa>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005614:	b29b      	uxth	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d042      	beq.n	80056a0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005620:	b29b      	uxth	r3, r3
 8005622:	2b01      	cmp	r3, #1
 8005624:	d923      	bls.n	800566e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68da      	ldr	r2, [r3, #12]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005630:	b292      	uxth	r2, r2
 8005632:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	1c9a      	adds	r2, r3, #2
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005644:	b29b      	uxth	r3, r3
 8005646:	3b02      	subs	r3, #2
 8005648:	b29a      	uxth	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005656:	b29b      	uxth	r3, r3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d81f      	bhi.n	800569c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800566a:	605a      	str	r2, [r3, #4]
 800566c:	e016      	b.n	800569c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f103 020c 	add.w	r2, r3, #12
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	7812      	ldrb	r2, [r2, #0]
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005684:	1c5a      	adds	r2, r3, #1
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800569c:	2301      	movs	r3, #1
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80056a0:	f7fd fd32 	bl	8003108 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d803      	bhi.n	80056b8 <HAL_SPI_TransmitReceive+0x3c2>
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b6:	d102      	bne.n	80056be <HAL_SPI_TransmitReceive+0x3c8>
 80056b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d103      	bne.n	80056c6 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80056c4:	e01c      	b.n	8005700 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f47f af5b 	bne.w	8005588 <HAL_SPI_TransmitReceive+0x292>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056d8:	b29b      	uxth	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f47f af54 	bne.w	8005588 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056e0:	69fa      	ldr	r2, [r7, #28]
 80056e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f000 f98f 	bl	8005a08 <SPI_EndRxTxTransaction>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d006      	beq.n	80056fe <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2220      	movs	r2, #32
 80056fa:	661a      	str	r2, [r3, #96]	; 0x60
 80056fc:	e000      	b.n	8005700 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80056fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005714:	4618      	mov	r0, r3
 8005716:	3728      	adds	r7, #40	; 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800572c:	f7fd fcec 	bl	8003108 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005734:	1a9b      	subs	r3, r3, r2
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	4413      	add	r3, r2
 800573a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800573c:	f7fd fce4 	bl	8003108 <HAL_GetTick>
 8005740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005742:	4b39      	ldr	r3, [pc, #228]	; (8005828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	015b      	lsls	r3, r3, #5
 8005748:	0d1b      	lsrs	r3, r3, #20
 800574a:	69fa      	ldr	r2, [r7, #28]
 800574c:	fb02 f303 	mul.w	r3, r2, r3
 8005750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005752:	e054      	b.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575a:	d050      	beq.n	80057fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800575c:	f7fd fcd4 	bl	8003108 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	69fa      	ldr	r2, [r7, #28]
 8005768:	429a      	cmp	r2, r3
 800576a:	d902      	bls.n	8005772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d13d      	bne.n	80057ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800578a:	d111      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005794:	d004      	beq.n	80057a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800579e:	d107      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b8:	d10f      	bne.n	80057da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80057ea:	2303      	movs	r3, #3
 80057ec:	e017      	b.n	800581e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689a      	ldr	r2, [r3, #8]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	429a      	cmp	r2, r3
 800581a:	d19b      	bne.n	8005754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3720      	adds	r7, #32
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000100 	.word	0x20000100

0800582c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]
 8005838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800583e:	f7fd fc63 	bl	8003108 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	4413      	add	r3, r2
 800584c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800584e:	f7fd fc5b 	bl	8003108 <HAL_GetTick>
 8005852:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	330c      	adds	r3, #12
 800585a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800585c:	4b3d      	ldr	r3, [pc, #244]	; (8005954 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00da      	lsls	r2, r3, #3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	0d1b      	lsrs	r3, r3, #20
 800586c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005874:	e060      	b.n	8005938 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800587c:	d107      	bne.n	800588e <SPI_WaitFifoStateUntilTimeout+0x62>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800588c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005894:	d050      	beq.n	8005938 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005896:	f7fd fc37 	bl	8003108 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d902      	bls.n	80058ac <SPI_WaitFifoStateUntilTimeout+0x80>
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d13d      	bne.n	8005928 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058c4:	d111      	bne.n	80058ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058ce:	d004      	beq.n	80058da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058d8:	d107      	bne.n	80058ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058f2:	d10f      	bne.n	8005914 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005902:	601a      	str	r2, [r3, #0]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681a      	ldr	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e010      	b.n	800594a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800592e:	2300      	movs	r3, #0
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	3b01      	subs	r3, #1
 8005936:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d196      	bne.n	8005876 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3728      	adds	r7, #40	; 0x28
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	20000100 	.word	0x20000100

08005958 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800596c:	d111      	bne.n	8005992 <SPI_EndRxTransaction+0x3a>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005976:	d004      	beq.n	8005982 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d107      	bne.n	8005992 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005990:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f7ff febd 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d007      	beq.n	80059b8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ac:	f043 0220 	orr.w	r2, r3, #32
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	e023      	b.n	8005a00 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059c0:	d11d      	bne.n	80059fe <SPI_EndRxTransaction+0xa6>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059ca:	d004      	beq.n	80059d6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d4:	d113      	bne.n	80059fe <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2200      	movs	r2, #0
 80059de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f7ff ff22 	bl	800582c <SPI_WaitFifoStateUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d007      	beq.n	80059fe <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e000      	b.n	8005a00 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f7ff ff03 	bl	800582c <SPI_WaitFifoStateUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d007      	beq.n	8005a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a30:	f043 0220 	orr.w	r2, r3, #32
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e027      	b.n	8005a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2200      	movs	r2, #0
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff fe68 	bl	800571c <SPI_WaitFlagStateUntilTimeout>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e014      	b.n	8005a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	9300      	str	r3, [sp, #0]
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff fedc 	bl	800582c <SPI_WaitFifoStateUntilTimeout>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a7e:	f043 0220 	orr.w	r2, r3, #32
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e000      	b.n	8005a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d101      	bne.n	8005aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e040      	b.n	8005b28 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d106      	bne.n	8005abc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fd f92e 	bl	8002d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2224      	movs	r2, #36	; 0x24
 8005ac0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f022 0201 	bic.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8c0 	bl	8005c58 <UART_SetConfig>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e022      	b.n	8005b28 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d002      	beq.n	8005af0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fb3a 	bl	8006164 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 fbc1 	bl	80062a8 <UART_CheckIdleState>
 8005b26:	4603      	mov	r3, r0
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3708      	adds	r7, #8
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b08a      	sub	sp, #40	; 0x28
 8005b34:	af02      	add	r7, sp, #8
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	603b      	str	r3, [r7, #0]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b44:	2b20      	cmp	r3, #32
 8005b46:	f040 8082 	bne.w	8005c4e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_UART_Transmit+0x26>
 8005b50:	88fb      	ldrh	r3, [r7, #6]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d101      	bne.n	8005b5a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e07a      	b.n	8005c50 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_UART_Transmit+0x38>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e073      	b.n	8005c50 <HAL_UART_Transmit+0x120>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2221      	movs	r2, #33	; 0x21
 8005b7c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7e:	f7fd fac3 	bl	8003108 <HAL_GetTick>
 8005b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	88fa      	ldrh	r2, [r7, #6]
 8005b90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b9c:	d108      	bne.n	8005bb0 <HAL_UART_Transmit+0x80>
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d104      	bne.n	8005bb0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e003      	b.n	8005bb8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005bc0:	e02d      	b.n	8005c1e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2180      	movs	r1, #128	; 0x80
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fbb4 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e039      	b.n	8005c50 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10b      	bne.n	8005bfa <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	881a      	ldrh	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bee:	b292      	uxth	r2, r2
 8005bf0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	e008      	b.n	8005c0c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	781a      	ldrb	r2, [r3, #0]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	b292      	uxth	r2, r2
 8005c04:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	3b01      	subs	r3, #1
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1cb      	bne.n	8005bc2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	9300      	str	r3, [sp, #0]
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2200      	movs	r2, #0
 8005c32:	2140      	movs	r1, #64	; 0x40
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fb80 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d001      	beq.n	8005c44 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e005      	b.n	8005c50 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2220      	movs	r2, #32
 8005c48:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b08a      	sub	sp, #40	; 0x28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4ba5      	ldr	r3, [pc, #660]	; (8005f1c <UART_SetConfig+0x2c4>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a9a      	ldr	r2, [pc, #616]	; (8005f20 <UART_SetConfig+0x2c8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a91      	ldr	r2, [pc, #580]	; (8005f24 <UART_SetConfig+0x2cc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d126      	bne.n	8005d30 <UART_SetConfig+0xd8>
 8005ce2:	4b91      	ldr	r3, [pc, #580]	; (8005f28 <UART_SetConfig+0x2d0>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d81b      	bhi.n	8005d28 <UART_SetConfig+0xd0>
 8005cf0:	a201      	add	r2, pc, #4	; (adr r2, 8005cf8 <UART_SetConfig+0xa0>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d0e:	e0d6      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d16:	e0d2      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d1e:	e0ce      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d26:	e0ca      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d2e:	e0c6      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a7d      	ldr	r2, [pc, #500]	; (8005f2c <UART_SetConfig+0x2d4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d138      	bne.n	8005dac <UART_SetConfig+0x154>
 8005d3a:	4b7b      	ldr	r3, [pc, #492]	; (8005f28 <UART_SetConfig+0x2d0>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d82d      	bhi.n	8005da4 <UART_SetConfig+0x14c>
 8005d48:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <UART_SetConfig+0xf8>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005da5 	.word	0x08005da5
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d8a:	e098      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d92:	e094      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005d9a:	e090      	b.n	8005ebe <UART_SetConfig+0x266>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005da2:	e08c      	b.n	8005ebe <UART_SetConfig+0x266>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005daa:	e088      	b.n	8005ebe <UART_SetConfig+0x266>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5f      	ldr	r2, [pc, #380]	; (8005f30 <UART_SetConfig+0x2d8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d125      	bne.n	8005e02 <UART_SetConfig+0x1aa>
 8005db6:	4b5c      	ldr	r3, [pc, #368]	; (8005f28 <UART_SetConfig+0x2d0>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d016      	beq.n	8005df2 <UART_SetConfig+0x19a>
 8005dc4:	2b30      	cmp	r3, #48	; 0x30
 8005dc6:	d818      	bhi.n	8005dfa <UART_SetConfig+0x1a2>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d00a      	beq.n	8005de2 <UART_SetConfig+0x18a>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d814      	bhi.n	8005dfa <UART_SetConfig+0x1a2>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <UART_SetConfig+0x182>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d008      	beq.n	8005dea <UART_SetConfig+0x192>
 8005dd8:	e00f      	b.n	8005dfa <UART_SetConfig+0x1a2>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de0:	e06d      	b.n	8005ebe <UART_SetConfig+0x266>
 8005de2:	2302      	movs	r3, #2
 8005de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005de8:	e069      	b.n	8005ebe <UART_SetConfig+0x266>
 8005dea:	2304      	movs	r3, #4
 8005dec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df0:	e065      	b.n	8005ebe <UART_SetConfig+0x266>
 8005df2:	2308      	movs	r3, #8
 8005df4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005df8:	e061      	b.n	8005ebe <UART_SetConfig+0x266>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e00:	e05d      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4b      	ldr	r2, [pc, #300]	; (8005f34 <UART_SetConfig+0x2dc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d125      	bne.n	8005e58 <UART_SetConfig+0x200>
 8005e0c:	4b46      	ldr	r3, [pc, #280]	; (8005f28 <UART_SetConfig+0x2d0>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e16:	2bc0      	cmp	r3, #192	; 0xc0
 8005e18:	d016      	beq.n	8005e48 <UART_SetConfig+0x1f0>
 8005e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8005e1c:	d818      	bhi.n	8005e50 <UART_SetConfig+0x1f8>
 8005e1e:	2b80      	cmp	r3, #128	; 0x80
 8005e20:	d00a      	beq.n	8005e38 <UART_SetConfig+0x1e0>
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d814      	bhi.n	8005e50 <UART_SetConfig+0x1f8>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <UART_SetConfig+0x1d8>
 8005e2a:	2b40      	cmp	r3, #64	; 0x40
 8005e2c:	d008      	beq.n	8005e40 <UART_SetConfig+0x1e8>
 8005e2e:	e00f      	b.n	8005e50 <UART_SetConfig+0x1f8>
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e36:	e042      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e3e:	e03e      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e46:	e03a      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e4e:	e036      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e56:	e032      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a30      	ldr	r2, [pc, #192]	; (8005f20 <UART_SetConfig+0x2c8>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d12a      	bne.n	8005eb8 <UART_SetConfig+0x260>
 8005e62:	4b31      	ldr	r3, [pc, #196]	; (8005f28 <UART_SetConfig+0x2d0>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e70:	d01a      	beq.n	8005ea8 <UART_SetConfig+0x250>
 8005e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e76:	d81b      	bhi.n	8005eb0 <UART_SetConfig+0x258>
 8005e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e7c:	d00c      	beq.n	8005e98 <UART_SetConfig+0x240>
 8005e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e82:	d815      	bhi.n	8005eb0 <UART_SetConfig+0x258>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <UART_SetConfig+0x238>
 8005e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8c:	d008      	beq.n	8005ea0 <UART_SetConfig+0x248>
 8005e8e:	e00f      	b.n	8005eb0 <UART_SetConfig+0x258>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e96:	e012      	b.n	8005ebe <UART_SetConfig+0x266>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9e:	e00e      	b.n	8005ebe <UART_SetConfig+0x266>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea6:	e00a      	b.n	8005ebe <UART_SetConfig+0x266>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eae:	e006      	b.n	8005ebe <UART_SetConfig+0x266>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb6:	e002      	b.n	8005ebe <UART_SetConfig+0x266>
 8005eb8:	2310      	movs	r3, #16
 8005eba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a17      	ldr	r2, [pc, #92]	; (8005f20 <UART_SetConfig+0x2c8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 808b 	bne.w	8005fe0 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005eca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d834      	bhi.n	8005f3c <UART_SetConfig+0x2e4>
 8005ed2:	a201      	add	r2, pc, #4	; (adr r2, 8005ed8 <UART_SetConfig+0x280>)
 8005ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed8:	08005efd 	.word	0x08005efd
 8005edc:	08005f3d 	.word	0x08005f3d
 8005ee0:	08005f05 	.word	0x08005f05
 8005ee4:	08005f3d 	.word	0x08005f3d
 8005ee8:	08005f0b 	.word	0x08005f0b
 8005eec:	08005f3d 	.word	0x08005f3d
 8005ef0:	08005f3d 	.word	0x08005f3d
 8005ef4:	08005f3d 	.word	0x08005f3d
 8005ef8:	08005f13 	.word	0x08005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005efc:	f7fe fad0 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8005f00:	61f8      	str	r0, [r7, #28]
        break;
 8005f02:	e021      	b.n	8005f48 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f04:	4b0c      	ldr	r3, [pc, #48]	; (8005f38 <UART_SetConfig+0x2e0>)
 8005f06:	61fb      	str	r3, [r7, #28]
        break;
 8005f08:	e01e      	b.n	8005f48 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0a:	f7fe fa31 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8005f0e:	61f8      	str	r0, [r7, #28]
        break;
 8005f10:	e01a      	b.n	8005f48 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f16:	61fb      	str	r3, [r7, #28]
        break;
 8005f18:	e016      	b.n	8005f48 <UART_SetConfig+0x2f0>
 8005f1a:	bf00      	nop
 8005f1c:	efff69f3 	.word	0xefff69f3
 8005f20:	40008000 	.word	0x40008000
 8005f24:	40013800 	.word	0x40013800
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	40004400 	.word	0x40004400
 8005f30:	40004800 	.word	0x40004800
 8005f34:	40004c00 	.word	0x40004c00
 8005f38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005f46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	f000 80fa 	beq.w	8006144 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d305      	bcc.n	8005f6c <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d903      	bls.n	8005f74 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005f72:	e0e7      	b.n	8006144 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	2200      	movs	r2, #0
 8005f78:	461c      	mov	r4, r3
 8005f7a:	4615      	mov	r5, r2
 8005f7c:	f04f 0200 	mov.w	r2, #0
 8005f80:	f04f 0300 	mov.w	r3, #0
 8005f84:	022b      	lsls	r3, r5, #8
 8005f86:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005f8a:	0222      	lsls	r2, r4, #8
 8005f8c:	68f9      	ldr	r1, [r7, #12]
 8005f8e:	6849      	ldr	r1, [r1, #4]
 8005f90:	0849      	lsrs	r1, r1, #1
 8005f92:	2000      	movs	r0, #0
 8005f94:	4688      	mov	r8, r1
 8005f96:	4681      	mov	r9, r0
 8005f98:	eb12 0a08 	adds.w	sl, r2, r8
 8005f9c:	eb43 0b09 	adc.w	fp, r3, r9
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fae:	4650      	mov	r0, sl
 8005fb0:	4659      	mov	r1, fp
 8005fb2:	f7fa f9b5 	bl	8000320 <__aeabi_uldivmod>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4613      	mov	r3, r2
 8005fbc:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fc4:	d308      	bcc.n	8005fd8 <UART_SetConfig+0x380>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fcc:	d204      	bcs.n	8005fd8 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	60da      	str	r2, [r3, #12]
 8005fd6:	e0b5      	b.n	8006144 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005fde:	e0b1      	b.n	8006144 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fe8:	d15d      	bne.n	80060a6 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8005fea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d827      	bhi.n	8006042 <UART_SetConfig+0x3ea>
 8005ff2:	a201      	add	r2, pc, #4	; (adr r2, 8005ff8 <UART_SetConfig+0x3a0>)
 8005ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff8:	0800601d 	.word	0x0800601d
 8005ffc:	08006025 	.word	0x08006025
 8006000:	0800602d 	.word	0x0800602d
 8006004:	08006043 	.word	0x08006043
 8006008:	08006033 	.word	0x08006033
 800600c:	08006043 	.word	0x08006043
 8006010:	08006043 	.word	0x08006043
 8006014:	08006043 	.word	0x08006043
 8006018:	0800603b 	.word	0x0800603b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800601c:	f7fe fa40 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8006020:	61f8      	str	r0, [r7, #28]
        break;
 8006022:	e014      	b.n	800604e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006024:	f7fe fa52 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 8006028:	61f8      	str	r0, [r7, #28]
        break;
 800602a:	e010      	b.n	800604e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800602c:	4b4c      	ldr	r3, [pc, #304]	; (8006160 <UART_SetConfig+0x508>)
 800602e:	61fb      	str	r3, [r7, #28]
        break;
 8006030:	e00d      	b.n	800604e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006032:	f7fe f99d 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 8006036:	61f8      	str	r0, [r7, #28]
        break;
 8006038:	e009      	b.n	800604e <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800603a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800603e:	61fb      	str	r3, [r7, #28]
        break;
 8006040:	e005      	b.n	800604e <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800604c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d077      	beq.n	8006144 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	005a      	lsls	r2, r3, #1
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	441a      	add	r2, r3
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	fbb2 f3f3 	udiv	r3, r2, r3
 8006068:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	2b0f      	cmp	r3, #15
 800606e:	d916      	bls.n	800609e <UART_SetConfig+0x446>
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006076:	d212      	bcs.n	800609e <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f023 030f 	bic.w	r3, r3, #15
 8006080:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	085b      	lsrs	r3, r3, #1
 8006086:	b29b      	uxth	r3, r3
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	b29a      	uxth	r2, r3
 800608e:	8afb      	ldrh	r3, [r7, #22]
 8006090:	4313      	orrs	r3, r2
 8006092:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	8afa      	ldrh	r2, [r7, #22]
 800609a:	60da      	str	r2, [r3, #12]
 800609c:	e052      	b.n	8006144 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060a4:	e04e      	b.n	8006144 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d827      	bhi.n	80060fe <UART_SetConfig+0x4a6>
 80060ae:	a201      	add	r2, pc, #4	; (adr r2, 80060b4 <UART_SetConfig+0x45c>)
 80060b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060b4:	080060d9 	.word	0x080060d9
 80060b8:	080060e1 	.word	0x080060e1
 80060bc:	080060e9 	.word	0x080060e9
 80060c0:	080060ff 	.word	0x080060ff
 80060c4:	080060ef 	.word	0x080060ef
 80060c8:	080060ff 	.word	0x080060ff
 80060cc:	080060ff 	.word	0x080060ff
 80060d0:	080060ff 	.word	0x080060ff
 80060d4:	080060f7 	.word	0x080060f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d8:	f7fe f9e2 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 80060dc:	61f8      	str	r0, [r7, #28]
        break;
 80060de:	e014      	b.n	800610a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e0:	f7fe f9f4 	bl	80044cc <HAL_RCC_GetPCLK2Freq>
 80060e4:	61f8      	str	r0, [r7, #28]
        break;
 80060e6:	e010      	b.n	800610a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060e8:	4b1d      	ldr	r3, [pc, #116]	; (8006160 <UART_SetConfig+0x508>)
 80060ea:	61fb      	str	r3, [r7, #28]
        break;
 80060ec:	e00d      	b.n	800610a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060ee:	f7fe f93f 	bl	8004370 <HAL_RCC_GetSysClockFreq>
 80060f2:	61f8      	str	r0, [r7, #28]
        break;
 80060f4:	e009      	b.n	800610a <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fa:	61fb      	str	r3, [r7, #28]
        break;
 80060fc:	e005      	b.n	800610a <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006108:	bf00      	nop
    }

    if (pclk != 0U)
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d019      	beq.n	8006144 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	085a      	lsrs	r2, r3, #1
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	441a      	add	r2, r3
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006122:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	2b0f      	cmp	r3, #15
 8006128:	d909      	bls.n	800613e <UART_SetConfig+0x4e6>
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006130:	d205      	bcs.n	800613e <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	b29a      	uxth	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60da      	str	r2, [r3, #12]
 800613c:	e002      	b.n	8006144 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006150:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006154:	4618      	mov	r0, r3
 8006156:	3728      	adds	r7, #40	; 0x28
 8006158:	46bd      	mov	sp, r7
 800615a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615e:	bf00      	nop
 8006160:	00f42400 	.word	0x00f42400

08006164 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00a      	beq.n	800618e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	430a      	orrs	r2, r1
 800618c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00a      	beq.n	80061b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d00a      	beq.n	80061d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	430a      	orrs	r2, r1
 80061d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d00a      	beq.n	80061f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	f003 0320 	and.w	r3, r3, #32
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01a      	beq.n	800627a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800625e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006262:	d10a      	bne.n	800627a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062b8:	f7fc ff26 	bl	8003108 <HAL_GetTick>
 80062bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d10e      	bne.n	80062ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f82d 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e023      	b.n	8006332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 0304 	and.w	r3, r3, #4
 80062f4:	2b04      	cmp	r3, #4
 80062f6:	d10e      	bne.n	8006316 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062fc:	9300      	str	r3, [sp, #0]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f817 	bl	800633a <UART_WaitOnFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e00d      	b.n	8006332 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2220      	movs	r2, #32
 800631a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b09c      	sub	sp, #112	; 0x70
 800633e:	af00      	add	r7, sp, #0
 8006340:	60f8      	str	r0, [r7, #12]
 8006342:	60b9      	str	r1, [r7, #8]
 8006344:	603b      	str	r3, [r7, #0]
 8006346:	4613      	mov	r3, r2
 8006348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634a:	e0a5      	b.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800634e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006352:	f000 80a1 	beq.w	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fc fed7 	bl	8003108 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <UART_WaitOnFlagUntilTimeout+0x32>
 8006366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006368:	2b00      	cmp	r3, #0
 800636a:	d13e      	bne.n	80063ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800637a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800637c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800638a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800638c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006390:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e6      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	3308      	adds	r3, #8
 80063a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063a8:	e853 3f00 	ldrex	r3, [r3]
 80063ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80063ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	663b      	str	r3, [r7, #96]	; 0x60
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3308      	adds	r3, #8
 80063bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063be:	64ba      	str	r2, [r7, #72]	; 0x48
 80063c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063c6:	e841 2300 	strex	r3, r2, [r1]
 80063ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1e5      	bne.n	800639e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2220      	movs	r2, #32
 80063d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	e067      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0304 	and.w	r3, r3, #4
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d04f      	beq.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006402:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006406:	d147      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006410:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	e853 3f00 	ldrex	r3, [r3]
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006426:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006436:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e6      	bne.n	8006412 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	3308      	adds	r3, #8
 800644a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	e853 3f00 	ldrex	r3, [r3]
 8006452:	613b      	str	r3, [r7, #16]
   return(result);
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 0301 	bic.w	r3, r3, #1
 800645a:	66bb      	str	r3, [r7, #104]	; 0x68
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006464:	623a      	str	r2, [r7, #32]
 8006466:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006468:	69f9      	ldr	r1, [r7, #28]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	e841 2300 	strex	r3, r2, [r1]
 8006470:	61bb      	str	r3, [r7, #24]
   return(result);
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d1e5      	bne.n	8006444 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	2220      	movs	r2, #32
 800647c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2220      	movs	r2, #32
 8006488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e010      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69da      	ldr	r2, [r3, #28]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4013      	ands	r3, r2
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	bf0c      	ite	eq
 80064a8:	2301      	moveq	r3, #1
 80064aa:	2300      	movne	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	461a      	mov	r2, r3
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	f43f af4a 	beq.w	800634c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3770      	adds	r7, #112	; 0x70
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <__assert_func>:
 80064c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064c6:	4614      	mov	r4, r2
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b09      	ldr	r3, [pc, #36]	; (80064f0 <__assert_func+0x2c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4605      	mov	r5, r0
 80064d0:	68d8      	ldr	r0, [r3, #12]
 80064d2:	b14c      	cbz	r4, 80064e8 <__assert_func+0x24>
 80064d4:	4b07      	ldr	r3, [pc, #28]	; (80064f4 <__assert_func+0x30>)
 80064d6:	9100      	str	r1, [sp, #0]
 80064d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064dc:	4906      	ldr	r1, [pc, #24]	; (80064f8 <__assert_func+0x34>)
 80064de:	462b      	mov	r3, r5
 80064e0:	f000 f814 	bl	800650c <fiprintf>
 80064e4:	f000 fc34 	bl	8006d50 <abort>
 80064e8:	4b04      	ldr	r3, [pc, #16]	; (80064fc <__assert_func+0x38>)
 80064ea:	461c      	mov	r4, r3
 80064ec:	e7f3      	b.n	80064d6 <__assert_func+0x12>
 80064ee:	bf00      	nop
 80064f0:	2000010c 	.word	0x2000010c
 80064f4:	08007920 	.word	0x08007920
 80064f8:	0800792d 	.word	0x0800792d
 80064fc:	0800795b 	.word	0x0800795b

08006500 <__errno>:
 8006500:	4b01      	ldr	r3, [pc, #4]	; (8006508 <__errno+0x8>)
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	2000010c 	.word	0x2000010c

0800650c <fiprintf>:
 800650c:	b40e      	push	{r1, r2, r3}
 800650e:	b503      	push	{r0, r1, lr}
 8006510:	4601      	mov	r1, r0
 8006512:	ab03      	add	r3, sp, #12
 8006514:	4805      	ldr	r0, [pc, #20]	; (800652c <fiprintf+0x20>)
 8006516:	f853 2b04 	ldr.w	r2, [r3], #4
 800651a:	6800      	ldr	r0, [r0, #0]
 800651c:	9301      	str	r3, [sp, #4]
 800651e:	f000 f87b 	bl	8006618 <_vfiprintf_r>
 8006522:	b002      	add	sp, #8
 8006524:	f85d eb04 	ldr.w	lr, [sp], #4
 8006528:	b003      	add	sp, #12
 800652a:	4770      	bx	lr
 800652c:	2000010c 	.word	0x2000010c

08006530 <__libc_init_array>:
 8006530:	b570      	push	{r4, r5, r6, lr}
 8006532:	4d0d      	ldr	r5, [pc, #52]	; (8006568 <__libc_init_array+0x38>)
 8006534:	4c0d      	ldr	r4, [pc, #52]	; (800656c <__libc_init_array+0x3c>)
 8006536:	1b64      	subs	r4, r4, r5
 8006538:	10a4      	asrs	r4, r4, #2
 800653a:	2600      	movs	r6, #0
 800653c:	42a6      	cmp	r6, r4
 800653e:	d109      	bne.n	8006554 <__libc_init_array+0x24>
 8006540:	4d0b      	ldr	r5, [pc, #44]	; (8006570 <__libc_init_array+0x40>)
 8006542:	4c0c      	ldr	r4, [pc, #48]	; (8006574 <__libc_init_array+0x44>)
 8006544:	f001 f818 	bl	8007578 <_init>
 8006548:	1b64      	subs	r4, r4, r5
 800654a:	10a4      	asrs	r4, r4, #2
 800654c:	2600      	movs	r6, #0
 800654e:	42a6      	cmp	r6, r4
 8006550:	d105      	bne.n	800655e <__libc_init_array+0x2e>
 8006552:	bd70      	pop	{r4, r5, r6, pc}
 8006554:	f855 3b04 	ldr.w	r3, [r5], #4
 8006558:	4798      	blx	r3
 800655a:	3601      	adds	r6, #1
 800655c:	e7ee      	b.n	800653c <__libc_init_array+0xc>
 800655e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006562:	4798      	blx	r3
 8006564:	3601      	adds	r6, #1
 8006566:	e7f2      	b.n	800654e <__libc_init_array+0x1e>
 8006568:	080079fc 	.word	0x080079fc
 800656c:	080079fc 	.word	0x080079fc
 8006570:	080079fc 	.word	0x080079fc
 8006574:	08007a00 	.word	0x08007a00

08006578 <memcmp>:
 8006578:	b510      	push	{r4, lr}
 800657a:	3901      	subs	r1, #1
 800657c:	4402      	add	r2, r0
 800657e:	4290      	cmp	r0, r2
 8006580:	d101      	bne.n	8006586 <memcmp+0xe>
 8006582:	2000      	movs	r0, #0
 8006584:	e005      	b.n	8006592 <memcmp+0x1a>
 8006586:	7803      	ldrb	r3, [r0, #0]
 8006588:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800658c:	42a3      	cmp	r3, r4
 800658e:	d001      	beq.n	8006594 <memcmp+0x1c>
 8006590:	1b18      	subs	r0, r3, r4
 8006592:	bd10      	pop	{r4, pc}
 8006594:	3001      	adds	r0, #1
 8006596:	e7f2      	b.n	800657e <memcmp+0x6>

08006598 <memcpy>:
 8006598:	440a      	add	r2, r1
 800659a:	4291      	cmp	r1, r2
 800659c:	f100 33ff 	add.w	r3, r0, #4294967295
 80065a0:	d100      	bne.n	80065a4 <memcpy+0xc>
 80065a2:	4770      	bx	lr
 80065a4:	b510      	push	{r4, lr}
 80065a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ae:	4291      	cmp	r1, r2
 80065b0:	d1f9      	bne.n	80065a6 <memcpy+0xe>
 80065b2:	bd10      	pop	{r4, pc}

080065b4 <memset>:
 80065b4:	4402      	add	r2, r0
 80065b6:	4603      	mov	r3, r0
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d100      	bne.n	80065be <memset+0xa>
 80065bc:	4770      	bx	lr
 80065be:	f803 1b01 	strb.w	r1, [r3], #1
 80065c2:	e7f9      	b.n	80065b8 <memset+0x4>

080065c4 <__sfputc_r>:
 80065c4:	6893      	ldr	r3, [r2, #8]
 80065c6:	3b01      	subs	r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	b410      	push	{r4}
 80065cc:	6093      	str	r3, [r2, #8]
 80065ce:	da08      	bge.n	80065e2 <__sfputc_r+0x1e>
 80065d0:	6994      	ldr	r4, [r2, #24]
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	db01      	blt.n	80065da <__sfputc_r+0x16>
 80065d6:	290a      	cmp	r1, #10
 80065d8:	d103      	bne.n	80065e2 <__sfputc_r+0x1e>
 80065da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065de:	f000 baf7 	b.w	8006bd0 <__swbuf_r>
 80065e2:	6813      	ldr	r3, [r2, #0]
 80065e4:	1c58      	adds	r0, r3, #1
 80065e6:	6010      	str	r0, [r2, #0]
 80065e8:	7019      	strb	r1, [r3, #0]
 80065ea:	4608      	mov	r0, r1
 80065ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f0:	4770      	bx	lr

080065f2 <__sfputs_r>:
 80065f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f4:	4606      	mov	r6, r0
 80065f6:	460f      	mov	r7, r1
 80065f8:	4614      	mov	r4, r2
 80065fa:	18d5      	adds	r5, r2, r3
 80065fc:	42ac      	cmp	r4, r5
 80065fe:	d101      	bne.n	8006604 <__sfputs_r+0x12>
 8006600:	2000      	movs	r0, #0
 8006602:	e007      	b.n	8006614 <__sfputs_r+0x22>
 8006604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006608:	463a      	mov	r2, r7
 800660a:	4630      	mov	r0, r6
 800660c:	f7ff ffda 	bl	80065c4 <__sfputc_r>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d1f3      	bne.n	80065fc <__sfputs_r+0xa>
 8006614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006618 <_vfiprintf_r>:
 8006618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800661c:	460d      	mov	r5, r1
 800661e:	b09d      	sub	sp, #116	; 0x74
 8006620:	4614      	mov	r4, r2
 8006622:	4698      	mov	r8, r3
 8006624:	4606      	mov	r6, r0
 8006626:	b118      	cbz	r0, 8006630 <_vfiprintf_r+0x18>
 8006628:	6983      	ldr	r3, [r0, #24]
 800662a:	b90b      	cbnz	r3, 8006630 <_vfiprintf_r+0x18>
 800662c:	f000 fcb2 	bl	8006f94 <__sinit>
 8006630:	4b89      	ldr	r3, [pc, #548]	; (8006858 <_vfiprintf_r+0x240>)
 8006632:	429d      	cmp	r5, r3
 8006634:	d11b      	bne.n	800666e <_vfiprintf_r+0x56>
 8006636:	6875      	ldr	r5, [r6, #4]
 8006638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d405      	bmi.n	800664a <_vfiprintf_r+0x32>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	059a      	lsls	r2, r3, #22
 8006642:	d402      	bmi.n	800664a <_vfiprintf_r+0x32>
 8006644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006646:	f000 fd43 	bl	80070d0 <__retarget_lock_acquire_recursive>
 800664a:	89ab      	ldrh	r3, [r5, #12]
 800664c:	071b      	lsls	r3, r3, #28
 800664e:	d501      	bpl.n	8006654 <_vfiprintf_r+0x3c>
 8006650:	692b      	ldr	r3, [r5, #16]
 8006652:	b9eb      	cbnz	r3, 8006690 <_vfiprintf_r+0x78>
 8006654:	4629      	mov	r1, r5
 8006656:	4630      	mov	r0, r6
 8006658:	f000 fb0c 	bl	8006c74 <__swsetup_r>
 800665c:	b1c0      	cbz	r0, 8006690 <_vfiprintf_r+0x78>
 800665e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006660:	07dc      	lsls	r4, r3, #31
 8006662:	d50e      	bpl.n	8006682 <_vfiprintf_r+0x6a>
 8006664:	f04f 30ff 	mov.w	r0, #4294967295
 8006668:	b01d      	add	sp, #116	; 0x74
 800666a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800666e:	4b7b      	ldr	r3, [pc, #492]	; (800685c <_vfiprintf_r+0x244>)
 8006670:	429d      	cmp	r5, r3
 8006672:	d101      	bne.n	8006678 <_vfiprintf_r+0x60>
 8006674:	68b5      	ldr	r5, [r6, #8]
 8006676:	e7df      	b.n	8006638 <_vfiprintf_r+0x20>
 8006678:	4b79      	ldr	r3, [pc, #484]	; (8006860 <_vfiprintf_r+0x248>)
 800667a:	429d      	cmp	r5, r3
 800667c:	bf08      	it	eq
 800667e:	68f5      	ldreq	r5, [r6, #12]
 8006680:	e7da      	b.n	8006638 <_vfiprintf_r+0x20>
 8006682:	89ab      	ldrh	r3, [r5, #12]
 8006684:	0598      	lsls	r0, r3, #22
 8006686:	d4ed      	bmi.n	8006664 <_vfiprintf_r+0x4c>
 8006688:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800668a:	f000 fd22 	bl	80070d2 <__retarget_lock_release_recursive>
 800668e:	e7e9      	b.n	8006664 <_vfiprintf_r+0x4c>
 8006690:	2300      	movs	r3, #0
 8006692:	9309      	str	r3, [sp, #36]	; 0x24
 8006694:	2320      	movs	r3, #32
 8006696:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800669a:	f8cd 800c 	str.w	r8, [sp, #12]
 800669e:	2330      	movs	r3, #48	; 0x30
 80066a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006864 <_vfiprintf_r+0x24c>
 80066a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a8:	f04f 0901 	mov.w	r9, #1
 80066ac:	4623      	mov	r3, r4
 80066ae:	469a      	mov	sl, r3
 80066b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066b4:	b10a      	cbz	r2, 80066ba <_vfiprintf_r+0xa2>
 80066b6:	2a25      	cmp	r2, #37	; 0x25
 80066b8:	d1f9      	bne.n	80066ae <_vfiprintf_r+0x96>
 80066ba:	ebba 0b04 	subs.w	fp, sl, r4
 80066be:	d00b      	beq.n	80066d8 <_vfiprintf_r+0xc0>
 80066c0:	465b      	mov	r3, fp
 80066c2:	4622      	mov	r2, r4
 80066c4:	4629      	mov	r1, r5
 80066c6:	4630      	mov	r0, r6
 80066c8:	f7ff ff93 	bl	80065f2 <__sfputs_r>
 80066cc:	3001      	adds	r0, #1
 80066ce:	f000 80aa 	beq.w	8006826 <_vfiprintf_r+0x20e>
 80066d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066d4:	445a      	add	r2, fp
 80066d6:	9209      	str	r2, [sp, #36]	; 0x24
 80066d8:	f89a 3000 	ldrb.w	r3, [sl]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 80a2 	beq.w	8006826 <_vfiprintf_r+0x20e>
 80066e2:	2300      	movs	r3, #0
 80066e4:	f04f 32ff 	mov.w	r2, #4294967295
 80066e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066ec:	f10a 0a01 	add.w	sl, sl, #1
 80066f0:	9304      	str	r3, [sp, #16]
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f8:	931a      	str	r3, [sp, #104]	; 0x68
 80066fa:	4654      	mov	r4, sl
 80066fc:	2205      	movs	r2, #5
 80066fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006702:	4858      	ldr	r0, [pc, #352]	; (8006864 <_vfiprintf_r+0x24c>)
 8006704:	f7f9 fd6c 	bl	80001e0 <memchr>
 8006708:	9a04      	ldr	r2, [sp, #16]
 800670a:	b9d8      	cbnz	r0, 8006744 <_vfiprintf_r+0x12c>
 800670c:	06d1      	lsls	r1, r2, #27
 800670e:	bf44      	itt	mi
 8006710:	2320      	movmi	r3, #32
 8006712:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006716:	0713      	lsls	r3, r2, #28
 8006718:	bf44      	itt	mi
 800671a:	232b      	movmi	r3, #43	; 0x2b
 800671c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006720:	f89a 3000 	ldrb.w	r3, [sl]
 8006724:	2b2a      	cmp	r3, #42	; 0x2a
 8006726:	d015      	beq.n	8006754 <_vfiprintf_r+0x13c>
 8006728:	9a07      	ldr	r2, [sp, #28]
 800672a:	4654      	mov	r4, sl
 800672c:	2000      	movs	r0, #0
 800672e:	f04f 0c0a 	mov.w	ip, #10
 8006732:	4621      	mov	r1, r4
 8006734:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006738:	3b30      	subs	r3, #48	; 0x30
 800673a:	2b09      	cmp	r3, #9
 800673c:	d94e      	bls.n	80067dc <_vfiprintf_r+0x1c4>
 800673e:	b1b0      	cbz	r0, 800676e <_vfiprintf_r+0x156>
 8006740:	9207      	str	r2, [sp, #28]
 8006742:	e014      	b.n	800676e <_vfiprintf_r+0x156>
 8006744:	eba0 0308 	sub.w	r3, r0, r8
 8006748:	fa09 f303 	lsl.w	r3, r9, r3
 800674c:	4313      	orrs	r3, r2
 800674e:	9304      	str	r3, [sp, #16]
 8006750:	46a2      	mov	sl, r4
 8006752:	e7d2      	b.n	80066fa <_vfiprintf_r+0xe2>
 8006754:	9b03      	ldr	r3, [sp, #12]
 8006756:	1d19      	adds	r1, r3, #4
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	9103      	str	r1, [sp, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	bfbb      	ittet	lt
 8006760:	425b      	neglt	r3, r3
 8006762:	f042 0202 	orrlt.w	r2, r2, #2
 8006766:	9307      	strge	r3, [sp, #28]
 8006768:	9307      	strlt	r3, [sp, #28]
 800676a:	bfb8      	it	lt
 800676c:	9204      	strlt	r2, [sp, #16]
 800676e:	7823      	ldrb	r3, [r4, #0]
 8006770:	2b2e      	cmp	r3, #46	; 0x2e
 8006772:	d10c      	bne.n	800678e <_vfiprintf_r+0x176>
 8006774:	7863      	ldrb	r3, [r4, #1]
 8006776:	2b2a      	cmp	r3, #42	; 0x2a
 8006778:	d135      	bne.n	80067e6 <_vfiprintf_r+0x1ce>
 800677a:	9b03      	ldr	r3, [sp, #12]
 800677c:	1d1a      	adds	r2, r3, #4
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	9203      	str	r2, [sp, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	bfb8      	it	lt
 8006786:	f04f 33ff 	movlt.w	r3, #4294967295
 800678a:	3402      	adds	r4, #2
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006874 <_vfiprintf_r+0x25c>
 8006792:	7821      	ldrb	r1, [r4, #0]
 8006794:	2203      	movs	r2, #3
 8006796:	4650      	mov	r0, sl
 8006798:	f7f9 fd22 	bl	80001e0 <memchr>
 800679c:	b140      	cbz	r0, 80067b0 <_vfiprintf_r+0x198>
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	eba0 000a 	sub.w	r0, r0, sl
 80067a4:	fa03 f000 	lsl.w	r0, r3, r0
 80067a8:	9b04      	ldr	r3, [sp, #16]
 80067aa:	4303      	orrs	r3, r0
 80067ac:	3401      	adds	r4, #1
 80067ae:	9304      	str	r3, [sp, #16]
 80067b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b4:	482c      	ldr	r0, [pc, #176]	; (8006868 <_vfiprintf_r+0x250>)
 80067b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067ba:	2206      	movs	r2, #6
 80067bc:	f7f9 fd10 	bl	80001e0 <memchr>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d03f      	beq.n	8006844 <_vfiprintf_r+0x22c>
 80067c4:	4b29      	ldr	r3, [pc, #164]	; (800686c <_vfiprintf_r+0x254>)
 80067c6:	bb1b      	cbnz	r3, 8006810 <_vfiprintf_r+0x1f8>
 80067c8:	9b03      	ldr	r3, [sp, #12]
 80067ca:	3307      	adds	r3, #7
 80067cc:	f023 0307 	bic.w	r3, r3, #7
 80067d0:	3308      	adds	r3, #8
 80067d2:	9303      	str	r3, [sp, #12]
 80067d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d6:	443b      	add	r3, r7
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	e767      	b.n	80066ac <_vfiprintf_r+0x94>
 80067dc:	fb0c 3202 	mla	r2, ip, r2, r3
 80067e0:	460c      	mov	r4, r1
 80067e2:	2001      	movs	r0, #1
 80067e4:	e7a5      	b.n	8006732 <_vfiprintf_r+0x11a>
 80067e6:	2300      	movs	r3, #0
 80067e8:	3401      	adds	r4, #1
 80067ea:	9305      	str	r3, [sp, #20]
 80067ec:	4619      	mov	r1, r3
 80067ee:	f04f 0c0a 	mov.w	ip, #10
 80067f2:	4620      	mov	r0, r4
 80067f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067f8:	3a30      	subs	r2, #48	; 0x30
 80067fa:	2a09      	cmp	r2, #9
 80067fc:	d903      	bls.n	8006806 <_vfiprintf_r+0x1ee>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0c5      	beq.n	800678e <_vfiprintf_r+0x176>
 8006802:	9105      	str	r1, [sp, #20]
 8006804:	e7c3      	b.n	800678e <_vfiprintf_r+0x176>
 8006806:	fb0c 2101 	mla	r1, ip, r1, r2
 800680a:	4604      	mov	r4, r0
 800680c:	2301      	movs	r3, #1
 800680e:	e7f0      	b.n	80067f2 <_vfiprintf_r+0x1da>
 8006810:	ab03      	add	r3, sp, #12
 8006812:	9300      	str	r3, [sp, #0]
 8006814:	462a      	mov	r2, r5
 8006816:	4b16      	ldr	r3, [pc, #88]	; (8006870 <_vfiprintf_r+0x258>)
 8006818:	a904      	add	r1, sp, #16
 800681a:	4630      	mov	r0, r6
 800681c:	f3af 8000 	nop.w
 8006820:	4607      	mov	r7, r0
 8006822:	1c78      	adds	r0, r7, #1
 8006824:	d1d6      	bne.n	80067d4 <_vfiprintf_r+0x1bc>
 8006826:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006828:	07d9      	lsls	r1, r3, #31
 800682a:	d405      	bmi.n	8006838 <_vfiprintf_r+0x220>
 800682c:	89ab      	ldrh	r3, [r5, #12]
 800682e:	059a      	lsls	r2, r3, #22
 8006830:	d402      	bmi.n	8006838 <_vfiprintf_r+0x220>
 8006832:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006834:	f000 fc4d 	bl	80070d2 <__retarget_lock_release_recursive>
 8006838:	89ab      	ldrh	r3, [r5, #12]
 800683a:	065b      	lsls	r3, r3, #25
 800683c:	f53f af12 	bmi.w	8006664 <_vfiprintf_r+0x4c>
 8006840:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006842:	e711      	b.n	8006668 <_vfiprintf_r+0x50>
 8006844:	ab03      	add	r3, sp, #12
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	462a      	mov	r2, r5
 800684a:	4b09      	ldr	r3, [pc, #36]	; (8006870 <_vfiprintf_r+0x258>)
 800684c:	a904      	add	r1, sp, #16
 800684e:	4630      	mov	r0, r6
 8006850:	f000 f880 	bl	8006954 <_printf_i>
 8006854:	e7e4      	b.n	8006820 <_vfiprintf_r+0x208>
 8006856:	bf00      	nop
 8006858:	080079b4 	.word	0x080079b4
 800685c:	080079d4 	.word	0x080079d4
 8006860:	08007994 	.word	0x08007994
 8006864:	08007960 	.word	0x08007960
 8006868:	0800796a 	.word	0x0800796a
 800686c:	00000000 	.word	0x00000000
 8006870:	080065f3 	.word	0x080065f3
 8006874:	08007966 	.word	0x08007966

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4616      	mov	r6, r2
 800687e:	4699      	mov	r9, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006894:	4607      	mov	r7, r0
 8006896:	460c      	mov	r4, r1
 8006898:	b10a      	cbz	r2, 800689e <_printf_common+0x26>
 800689a:	3301      	adds	r3, #1
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	6823      	ldr	r3, [r4, #0]
 80068a0:	0699      	lsls	r1, r3, #26
 80068a2:	bf42      	ittt	mi
 80068a4:	6833      	ldrmi	r3, [r6, #0]
 80068a6:	3302      	addmi	r3, #2
 80068a8:	6033      	strmi	r3, [r6, #0]
 80068aa:	6825      	ldr	r5, [r4, #0]
 80068ac:	f015 0506 	ands.w	r5, r5, #6
 80068b0:	d106      	bne.n	80068c0 <_printf_common+0x48>
 80068b2:	f104 0a19 	add.w	sl, r4, #25
 80068b6:	68e3      	ldr	r3, [r4, #12]
 80068b8:	6832      	ldr	r2, [r6, #0]
 80068ba:	1a9b      	subs	r3, r3, r2
 80068bc:	42ab      	cmp	r3, r5
 80068be:	dc26      	bgt.n	800690e <_printf_common+0x96>
 80068c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068c4:	1e13      	subs	r3, r2, #0
 80068c6:	6822      	ldr	r2, [r4, #0]
 80068c8:	bf18      	it	ne
 80068ca:	2301      	movne	r3, #1
 80068cc:	0692      	lsls	r2, r2, #26
 80068ce:	d42b      	bmi.n	8006928 <_printf_common+0xb0>
 80068d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068d4:	4649      	mov	r1, r9
 80068d6:	4638      	mov	r0, r7
 80068d8:	47c0      	blx	r8
 80068da:	3001      	adds	r0, #1
 80068dc:	d01e      	beq.n	800691c <_printf_common+0xa4>
 80068de:	6823      	ldr	r3, [r4, #0]
 80068e0:	68e5      	ldr	r5, [r4, #12]
 80068e2:	6832      	ldr	r2, [r6, #0]
 80068e4:	f003 0306 	and.w	r3, r3, #6
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	bf08      	it	eq
 80068ec:	1aad      	subeq	r5, r5, r2
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	6922      	ldr	r2, [r4, #16]
 80068f2:	bf0c      	ite	eq
 80068f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f8:	2500      	movne	r5, #0
 80068fa:	4293      	cmp	r3, r2
 80068fc:	bfc4      	itt	gt
 80068fe:	1a9b      	subgt	r3, r3, r2
 8006900:	18ed      	addgt	r5, r5, r3
 8006902:	2600      	movs	r6, #0
 8006904:	341a      	adds	r4, #26
 8006906:	42b5      	cmp	r5, r6
 8006908:	d11a      	bne.n	8006940 <_printf_common+0xc8>
 800690a:	2000      	movs	r0, #0
 800690c:	e008      	b.n	8006920 <_printf_common+0xa8>
 800690e:	2301      	movs	r3, #1
 8006910:	4652      	mov	r2, sl
 8006912:	4649      	mov	r1, r9
 8006914:	4638      	mov	r0, r7
 8006916:	47c0      	blx	r8
 8006918:	3001      	adds	r0, #1
 800691a:	d103      	bne.n	8006924 <_printf_common+0xac>
 800691c:	f04f 30ff 	mov.w	r0, #4294967295
 8006920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006924:	3501      	adds	r5, #1
 8006926:	e7c6      	b.n	80068b6 <_printf_common+0x3e>
 8006928:	18e1      	adds	r1, r4, r3
 800692a:	1c5a      	adds	r2, r3, #1
 800692c:	2030      	movs	r0, #48	; 0x30
 800692e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006932:	4422      	add	r2, r4
 8006934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800693c:	3302      	adds	r3, #2
 800693e:	e7c7      	b.n	80068d0 <_printf_common+0x58>
 8006940:	2301      	movs	r3, #1
 8006942:	4622      	mov	r2, r4
 8006944:	4649      	mov	r1, r9
 8006946:	4638      	mov	r0, r7
 8006948:	47c0      	blx	r8
 800694a:	3001      	adds	r0, #1
 800694c:	d0e6      	beq.n	800691c <_printf_common+0xa4>
 800694e:	3601      	adds	r6, #1
 8006950:	e7d9      	b.n	8006906 <_printf_common+0x8e>
	...

08006954 <_printf_i>:
 8006954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006958:	7e0f      	ldrb	r7, [r1, #24]
 800695a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800695c:	2f78      	cmp	r7, #120	; 0x78
 800695e:	4691      	mov	r9, r2
 8006960:	4680      	mov	r8, r0
 8006962:	460c      	mov	r4, r1
 8006964:	469a      	mov	sl, r3
 8006966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800696a:	d807      	bhi.n	800697c <_printf_i+0x28>
 800696c:	2f62      	cmp	r7, #98	; 0x62
 800696e:	d80a      	bhi.n	8006986 <_printf_i+0x32>
 8006970:	2f00      	cmp	r7, #0
 8006972:	f000 80d8 	beq.w	8006b26 <_printf_i+0x1d2>
 8006976:	2f58      	cmp	r7, #88	; 0x58
 8006978:	f000 80a3 	beq.w	8006ac2 <_printf_i+0x16e>
 800697c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006984:	e03a      	b.n	80069fc <_printf_i+0xa8>
 8006986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800698a:	2b15      	cmp	r3, #21
 800698c:	d8f6      	bhi.n	800697c <_printf_i+0x28>
 800698e:	a101      	add	r1, pc, #4	; (adr r1, 8006994 <_printf_i+0x40>)
 8006990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006994:	080069ed 	.word	0x080069ed
 8006998:	08006a01 	.word	0x08006a01
 800699c:	0800697d 	.word	0x0800697d
 80069a0:	0800697d 	.word	0x0800697d
 80069a4:	0800697d 	.word	0x0800697d
 80069a8:	0800697d 	.word	0x0800697d
 80069ac:	08006a01 	.word	0x08006a01
 80069b0:	0800697d 	.word	0x0800697d
 80069b4:	0800697d 	.word	0x0800697d
 80069b8:	0800697d 	.word	0x0800697d
 80069bc:	0800697d 	.word	0x0800697d
 80069c0:	08006b0d 	.word	0x08006b0d
 80069c4:	08006a31 	.word	0x08006a31
 80069c8:	08006aef 	.word	0x08006aef
 80069cc:	0800697d 	.word	0x0800697d
 80069d0:	0800697d 	.word	0x0800697d
 80069d4:	08006b2f 	.word	0x08006b2f
 80069d8:	0800697d 	.word	0x0800697d
 80069dc:	08006a31 	.word	0x08006a31
 80069e0:	0800697d 	.word	0x0800697d
 80069e4:	0800697d 	.word	0x0800697d
 80069e8:	08006af7 	.word	0x08006af7
 80069ec:	682b      	ldr	r3, [r5, #0]
 80069ee:	1d1a      	adds	r2, r3, #4
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	602a      	str	r2, [r5, #0]
 80069f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0a3      	b.n	8006b48 <_printf_i+0x1f4>
 8006a00:	6820      	ldr	r0, [r4, #0]
 8006a02:	6829      	ldr	r1, [r5, #0]
 8006a04:	0606      	lsls	r6, r0, #24
 8006a06:	f101 0304 	add.w	r3, r1, #4
 8006a0a:	d50a      	bpl.n	8006a22 <_printf_i+0xce>
 8006a0c:	680e      	ldr	r6, [r1, #0]
 8006a0e:	602b      	str	r3, [r5, #0]
 8006a10:	2e00      	cmp	r6, #0
 8006a12:	da03      	bge.n	8006a1c <_printf_i+0xc8>
 8006a14:	232d      	movs	r3, #45	; 0x2d
 8006a16:	4276      	negs	r6, r6
 8006a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a1c:	485e      	ldr	r0, [pc, #376]	; (8006b98 <_printf_i+0x244>)
 8006a1e:	230a      	movs	r3, #10
 8006a20:	e019      	b.n	8006a56 <_printf_i+0x102>
 8006a22:	680e      	ldr	r6, [r1, #0]
 8006a24:	602b      	str	r3, [r5, #0]
 8006a26:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a2a:	bf18      	it	ne
 8006a2c:	b236      	sxthne	r6, r6
 8006a2e:	e7ef      	b.n	8006a10 <_printf_i+0xbc>
 8006a30:	682b      	ldr	r3, [r5, #0]
 8006a32:	6820      	ldr	r0, [r4, #0]
 8006a34:	1d19      	adds	r1, r3, #4
 8006a36:	6029      	str	r1, [r5, #0]
 8006a38:	0601      	lsls	r1, r0, #24
 8006a3a:	d501      	bpl.n	8006a40 <_printf_i+0xec>
 8006a3c:	681e      	ldr	r6, [r3, #0]
 8006a3e:	e002      	b.n	8006a46 <_printf_i+0xf2>
 8006a40:	0646      	lsls	r6, r0, #25
 8006a42:	d5fb      	bpl.n	8006a3c <_printf_i+0xe8>
 8006a44:	881e      	ldrh	r6, [r3, #0]
 8006a46:	4854      	ldr	r0, [pc, #336]	; (8006b98 <_printf_i+0x244>)
 8006a48:	2f6f      	cmp	r7, #111	; 0x6f
 8006a4a:	bf0c      	ite	eq
 8006a4c:	2308      	moveq	r3, #8
 8006a4e:	230a      	movne	r3, #10
 8006a50:	2100      	movs	r1, #0
 8006a52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a56:	6865      	ldr	r5, [r4, #4]
 8006a58:	60a5      	str	r5, [r4, #8]
 8006a5a:	2d00      	cmp	r5, #0
 8006a5c:	bfa2      	ittt	ge
 8006a5e:	6821      	ldrge	r1, [r4, #0]
 8006a60:	f021 0104 	bicge.w	r1, r1, #4
 8006a64:	6021      	strge	r1, [r4, #0]
 8006a66:	b90e      	cbnz	r6, 8006a6c <_printf_i+0x118>
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d04d      	beq.n	8006b08 <_printf_i+0x1b4>
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a72:	fb03 6711 	mls	r7, r3, r1, r6
 8006a76:	5dc7      	ldrb	r7, [r0, r7]
 8006a78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a7c:	4637      	mov	r7, r6
 8006a7e:	42bb      	cmp	r3, r7
 8006a80:	460e      	mov	r6, r1
 8006a82:	d9f4      	bls.n	8006a6e <_printf_i+0x11a>
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <_printf_i+0x14c>
 8006a88:	6823      	ldr	r3, [r4, #0]
 8006a8a:	07de      	lsls	r6, r3, #31
 8006a8c:	d508      	bpl.n	8006aa0 <_printf_i+0x14c>
 8006a8e:	6923      	ldr	r3, [r4, #16]
 8006a90:	6861      	ldr	r1, [r4, #4]
 8006a92:	4299      	cmp	r1, r3
 8006a94:	bfde      	ittt	le
 8006a96:	2330      	movle	r3, #48	; 0x30
 8006a98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006aa0:	1b52      	subs	r2, r2, r5
 8006aa2:	6122      	str	r2, [r4, #16]
 8006aa4:	f8cd a000 	str.w	sl, [sp]
 8006aa8:	464b      	mov	r3, r9
 8006aaa:	aa03      	add	r2, sp, #12
 8006aac:	4621      	mov	r1, r4
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f7ff fee2 	bl	8006878 <_printf_common>
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d14c      	bne.n	8006b52 <_printf_i+0x1fe>
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	b004      	add	sp, #16
 8006abe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac2:	4835      	ldr	r0, [pc, #212]	; (8006b98 <_printf_i+0x244>)
 8006ac4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ac8:	6829      	ldr	r1, [r5, #0]
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ad0:	6029      	str	r1, [r5, #0]
 8006ad2:	061d      	lsls	r5, r3, #24
 8006ad4:	d514      	bpl.n	8006b00 <_printf_i+0x1ac>
 8006ad6:	07df      	lsls	r7, r3, #31
 8006ad8:	bf44      	itt	mi
 8006ada:	f043 0320 	orrmi.w	r3, r3, #32
 8006ade:	6023      	strmi	r3, [r4, #0]
 8006ae0:	b91e      	cbnz	r6, 8006aea <_printf_i+0x196>
 8006ae2:	6823      	ldr	r3, [r4, #0]
 8006ae4:	f023 0320 	bic.w	r3, r3, #32
 8006ae8:	6023      	str	r3, [r4, #0]
 8006aea:	2310      	movs	r3, #16
 8006aec:	e7b0      	b.n	8006a50 <_printf_i+0xfc>
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	2378      	movs	r3, #120	; 0x78
 8006af8:	4828      	ldr	r0, [pc, #160]	; (8006b9c <_printf_i+0x248>)
 8006afa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006afe:	e7e3      	b.n	8006ac8 <_printf_i+0x174>
 8006b00:	0659      	lsls	r1, r3, #25
 8006b02:	bf48      	it	mi
 8006b04:	b2b6      	uxthmi	r6, r6
 8006b06:	e7e6      	b.n	8006ad6 <_printf_i+0x182>
 8006b08:	4615      	mov	r5, r2
 8006b0a:	e7bb      	b.n	8006a84 <_printf_i+0x130>
 8006b0c:	682b      	ldr	r3, [r5, #0]
 8006b0e:	6826      	ldr	r6, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6028      	str	r0, [r5, #0]
 8006b16:	0635      	lsls	r5, r6, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1cc>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1d2>
 8006b20:	0670      	lsls	r0, r6, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1c8>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4615      	mov	r5, r2
 8006b2c:	e7ba      	b.n	8006aa4 <_printf_i+0x150>
 8006b2e:	682b      	ldr	r3, [r5, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	602a      	str	r2, [r5, #0]
 8006b34:	681d      	ldr	r5, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4628      	mov	r0, r5
 8006b3c:	f7f9 fb50 	bl	80001e0 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1f2>
 8006b42:	1b40      	subs	r0, r0, r5
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	e7a8      	b.n	8006aa4 <_printf_i+0x150>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	462a      	mov	r2, r5
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ab      	beq.n	8006ab8 <_printf_i+0x164>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x23a>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a4      	b.n	8006abc <_printf_i+0x168>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09b      	beq.n	8006ab8 <_printf_i+0x164>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x21e>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x212>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x22e>
 8006b96:	bf00      	nop
 8006b98:	08007971 	.word	0x08007971
 8006b9c:	08007982 	.word	0x08007982

08006ba0 <iprintf>:
 8006ba0:	b40f      	push	{r0, r1, r2, r3}
 8006ba2:	4b0a      	ldr	r3, [pc, #40]	; (8006bcc <iprintf+0x2c>)
 8006ba4:	b513      	push	{r0, r1, r4, lr}
 8006ba6:	681c      	ldr	r4, [r3, #0]
 8006ba8:	b124      	cbz	r4, 8006bb4 <iprintf+0x14>
 8006baa:	69a3      	ldr	r3, [r4, #24]
 8006bac:	b913      	cbnz	r3, 8006bb4 <iprintf+0x14>
 8006bae:	4620      	mov	r0, r4
 8006bb0:	f000 f9f0 	bl	8006f94 <__sinit>
 8006bb4:	ab05      	add	r3, sp, #20
 8006bb6:	9a04      	ldr	r2, [sp, #16]
 8006bb8:	68a1      	ldr	r1, [r4, #8]
 8006bba:	9301      	str	r3, [sp, #4]
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7ff fd2b 	bl	8006618 <_vfiprintf_r>
 8006bc2:	b002      	add	sp, #8
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	2000010c 	.word	0x2000010c

08006bd0 <__swbuf_r>:
 8006bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bd2:	460e      	mov	r6, r1
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	4605      	mov	r5, r0
 8006bd8:	b118      	cbz	r0, 8006be2 <__swbuf_r+0x12>
 8006bda:	6983      	ldr	r3, [r0, #24]
 8006bdc:	b90b      	cbnz	r3, 8006be2 <__swbuf_r+0x12>
 8006bde:	f000 f9d9 	bl	8006f94 <__sinit>
 8006be2:	4b21      	ldr	r3, [pc, #132]	; (8006c68 <__swbuf_r+0x98>)
 8006be4:	429c      	cmp	r4, r3
 8006be6:	d12b      	bne.n	8006c40 <__swbuf_r+0x70>
 8006be8:	686c      	ldr	r4, [r5, #4]
 8006bea:	69a3      	ldr	r3, [r4, #24]
 8006bec:	60a3      	str	r3, [r4, #8]
 8006bee:	89a3      	ldrh	r3, [r4, #12]
 8006bf0:	071a      	lsls	r2, r3, #28
 8006bf2:	d52f      	bpl.n	8006c54 <__swbuf_r+0x84>
 8006bf4:	6923      	ldr	r3, [r4, #16]
 8006bf6:	b36b      	cbz	r3, 8006c54 <__swbuf_r+0x84>
 8006bf8:	6923      	ldr	r3, [r4, #16]
 8006bfa:	6820      	ldr	r0, [r4, #0]
 8006bfc:	1ac0      	subs	r0, r0, r3
 8006bfe:	6963      	ldr	r3, [r4, #20]
 8006c00:	b2f6      	uxtb	r6, r6
 8006c02:	4283      	cmp	r3, r0
 8006c04:	4637      	mov	r7, r6
 8006c06:	dc04      	bgt.n	8006c12 <__swbuf_r+0x42>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	f000 f92e 	bl	8006e6c <_fflush_r>
 8006c10:	bb30      	cbnz	r0, 8006c60 <__swbuf_r+0x90>
 8006c12:	68a3      	ldr	r3, [r4, #8]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	60a3      	str	r3, [r4, #8]
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	6022      	str	r2, [r4, #0]
 8006c1e:	701e      	strb	r6, [r3, #0]
 8006c20:	6963      	ldr	r3, [r4, #20]
 8006c22:	3001      	adds	r0, #1
 8006c24:	4283      	cmp	r3, r0
 8006c26:	d004      	beq.n	8006c32 <__swbuf_r+0x62>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	07db      	lsls	r3, r3, #31
 8006c2c:	d506      	bpl.n	8006c3c <__swbuf_r+0x6c>
 8006c2e:	2e0a      	cmp	r6, #10
 8006c30:	d104      	bne.n	8006c3c <__swbuf_r+0x6c>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 f919 	bl	8006e6c <_fflush_r>
 8006c3a:	b988      	cbnz	r0, 8006c60 <__swbuf_r+0x90>
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <__swbuf_r+0x9c>)
 8006c42:	429c      	cmp	r4, r3
 8006c44:	d101      	bne.n	8006c4a <__swbuf_r+0x7a>
 8006c46:	68ac      	ldr	r4, [r5, #8]
 8006c48:	e7cf      	b.n	8006bea <__swbuf_r+0x1a>
 8006c4a:	4b09      	ldr	r3, [pc, #36]	; (8006c70 <__swbuf_r+0xa0>)
 8006c4c:	429c      	cmp	r4, r3
 8006c4e:	bf08      	it	eq
 8006c50:	68ec      	ldreq	r4, [r5, #12]
 8006c52:	e7ca      	b.n	8006bea <__swbuf_r+0x1a>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4628      	mov	r0, r5
 8006c58:	f000 f80c 	bl	8006c74 <__swsetup_r>
 8006c5c:	2800      	cmp	r0, #0
 8006c5e:	d0cb      	beq.n	8006bf8 <__swbuf_r+0x28>
 8006c60:	f04f 37ff 	mov.w	r7, #4294967295
 8006c64:	e7ea      	b.n	8006c3c <__swbuf_r+0x6c>
 8006c66:	bf00      	nop
 8006c68:	080079b4 	.word	0x080079b4
 8006c6c:	080079d4 	.word	0x080079d4
 8006c70:	08007994 	.word	0x08007994

08006c74 <__swsetup_r>:
 8006c74:	4b32      	ldr	r3, [pc, #200]	; (8006d40 <__swsetup_r+0xcc>)
 8006c76:	b570      	push	{r4, r5, r6, lr}
 8006c78:	681d      	ldr	r5, [r3, #0]
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460c      	mov	r4, r1
 8006c7e:	b125      	cbz	r5, 8006c8a <__swsetup_r+0x16>
 8006c80:	69ab      	ldr	r3, [r5, #24]
 8006c82:	b913      	cbnz	r3, 8006c8a <__swsetup_r+0x16>
 8006c84:	4628      	mov	r0, r5
 8006c86:	f000 f985 	bl	8006f94 <__sinit>
 8006c8a:	4b2e      	ldr	r3, [pc, #184]	; (8006d44 <__swsetup_r+0xd0>)
 8006c8c:	429c      	cmp	r4, r3
 8006c8e:	d10f      	bne.n	8006cb0 <__swsetup_r+0x3c>
 8006c90:	686c      	ldr	r4, [r5, #4]
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006c98:	0719      	lsls	r1, r3, #28
 8006c9a:	d42c      	bmi.n	8006cf6 <__swsetup_r+0x82>
 8006c9c:	06dd      	lsls	r5, r3, #27
 8006c9e:	d411      	bmi.n	8006cc4 <__swsetup_r+0x50>
 8006ca0:	2309      	movs	r3, #9
 8006ca2:	6033      	str	r3, [r6, #0]
 8006ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	f04f 30ff 	mov.w	r0, #4294967295
 8006cae:	e03e      	b.n	8006d2e <__swsetup_r+0xba>
 8006cb0:	4b25      	ldr	r3, [pc, #148]	; (8006d48 <__swsetup_r+0xd4>)
 8006cb2:	429c      	cmp	r4, r3
 8006cb4:	d101      	bne.n	8006cba <__swsetup_r+0x46>
 8006cb6:	68ac      	ldr	r4, [r5, #8]
 8006cb8:	e7eb      	b.n	8006c92 <__swsetup_r+0x1e>
 8006cba:	4b24      	ldr	r3, [pc, #144]	; (8006d4c <__swsetup_r+0xd8>)
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	bf08      	it	eq
 8006cc0:	68ec      	ldreq	r4, [r5, #12]
 8006cc2:	e7e6      	b.n	8006c92 <__swsetup_r+0x1e>
 8006cc4:	0758      	lsls	r0, r3, #29
 8006cc6:	d512      	bpl.n	8006cee <__swsetup_r+0x7a>
 8006cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cca:	b141      	cbz	r1, 8006cde <__swsetup_r+0x6a>
 8006ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006cd0:	4299      	cmp	r1, r3
 8006cd2:	d002      	beq.n	8006cda <__swsetup_r+0x66>
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f000 fa63 	bl	80071a0 <_free_r>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8006cde:	89a3      	ldrh	r3, [r4, #12]
 8006ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ce4:	81a3      	strh	r3, [r4, #12]
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	6023      	str	r3, [r4, #0]
 8006cee:	89a3      	ldrh	r3, [r4, #12]
 8006cf0:	f043 0308 	orr.w	r3, r3, #8
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	6923      	ldr	r3, [r4, #16]
 8006cf8:	b94b      	cbnz	r3, 8006d0e <__swsetup_r+0x9a>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d04:	d003      	beq.n	8006d0e <__swsetup_r+0x9a>
 8006d06:	4621      	mov	r1, r4
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f000 fa09 	bl	8007120 <__smakebuf_r>
 8006d0e:	89a0      	ldrh	r0, [r4, #12]
 8006d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d14:	f010 0301 	ands.w	r3, r0, #1
 8006d18:	d00a      	beq.n	8006d30 <__swsetup_r+0xbc>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60a3      	str	r3, [r4, #8]
 8006d1e:	6963      	ldr	r3, [r4, #20]
 8006d20:	425b      	negs	r3, r3
 8006d22:	61a3      	str	r3, [r4, #24]
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	b943      	cbnz	r3, 8006d3a <__swsetup_r+0xc6>
 8006d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d2c:	d1ba      	bne.n	8006ca4 <__swsetup_r+0x30>
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}
 8006d30:	0781      	lsls	r1, r0, #30
 8006d32:	bf58      	it	pl
 8006d34:	6963      	ldrpl	r3, [r4, #20]
 8006d36:	60a3      	str	r3, [r4, #8]
 8006d38:	e7f4      	b.n	8006d24 <__swsetup_r+0xb0>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	e7f7      	b.n	8006d2e <__swsetup_r+0xba>
 8006d3e:	bf00      	nop
 8006d40:	2000010c 	.word	0x2000010c
 8006d44:	080079b4 	.word	0x080079b4
 8006d48:	080079d4 	.word	0x080079d4
 8006d4c:	08007994 	.word	0x08007994

08006d50 <abort>:
 8006d50:	b508      	push	{r3, lr}
 8006d52:	2006      	movs	r0, #6
 8006d54:	f000 fb3c 	bl	80073d0 <raise>
 8006d58:	2001      	movs	r0, #1
 8006d5a:	f7fc f87b 	bl	8002e54 <_exit>
	...

08006d60 <__sflush_r>:
 8006d60:	898a      	ldrh	r2, [r1, #12]
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	4605      	mov	r5, r0
 8006d68:	0710      	lsls	r0, r2, #28
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	d458      	bmi.n	8006e20 <__sflush_r+0xc0>
 8006d6e:	684b      	ldr	r3, [r1, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	dc05      	bgt.n	8006d80 <__sflush_r+0x20>
 8006d74:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc02      	bgt.n	8006d80 <__sflush_r+0x20>
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d82:	2e00      	cmp	r6, #0
 8006d84:	d0f9      	beq.n	8006d7a <__sflush_r+0x1a>
 8006d86:	2300      	movs	r3, #0
 8006d88:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d8c:	682f      	ldr	r7, [r5, #0]
 8006d8e:	602b      	str	r3, [r5, #0]
 8006d90:	d032      	beq.n	8006df8 <__sflush_r+0x98>
 8006d92:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	075a      	lsls	r2, r3, #29
 8006d98:	d505      	bpl.n	8006da6 <__sflush_r+0x46>
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	1ac0      	subs	r0, r0, r3
 8006d9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006da0:	b10b      	cbz	r3, 8006da6 <__sflush_r+0x46>
 8006da2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006da4:	1ac0      	subs	r0, r0, r3
 8006da6:	2300      	movs	r3, #0
 8006da8:	4602      	mov	r2, r0
 8006daa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006dac:	6a21      	ldr	r1, [r4, #32]
 8006dae:	4628      	mov	r0, r5
 8006db0:	47b0      	blx	r6
 8006db2:	1c43      	adds	r3, r0, #1
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	d106      	bne.n	8006dc6 <__sflush_r+0x66>
 8006db8:	6829      	ldr	r1, [r5, #0]
 8006dba:	291d      	cmp	r1, #29
 8006dbc:	d82c      	bhi.n	8006e18 <__sflush_r+0xb8>
 8006dbe:	4a2a      	ldr	r2, [pc, #168]	; (8006e68 <__sflush_r+0x108>)
 8006dc0:	40ca      	lsrs	r2, r1
 8006dc2:	07d6      	lsls	r6, r2, #31
 8006dc4:	d528      	bpl.n	8006e18 <__sflush_r+0xb8>
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	6062      	str	r2, [r4, #4]
 8006dca:	04d9      	lsls	r1, r3, #19
 8006dcc:	6922      	ldr	r2, [r4, #16]
 8006dce:	6022      	str	r2, [r4, #0]
 8006dd0:	d504      	bpl.n	8006ddc <__sflush_r+0x7c>
 8006dd2:	1c42      	adds	r2, r0, #1
 8006dd4:	d101      	bne.n	8006dda <__sflush_r+0x7a>
 8006dd6:	682b      	ldr	r3, [r5, #0]
 8006dd8:	b903      	cbnz	r3, 8006ddc <__sflush_r+0x7c>
 8006dda:	6560      	str	r0, [r4, #84]	; 0x54
 8006ddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dde:	602f      	str	r7, [r5, #0]
 8006de0:	2900      	cmp	r1, #0
 8006de2:	d0ca      	beq.n	8006d7a <__sflush_r+0x1a>
 8006de4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006de8:	4299      	cmp	r1, r3
 8006dea:	d002      	beq.n	8006df2 <__sflush_r+0x92>
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f9d7 	bl	80071a0 <_free_r>
 8006df2:	2000      	movs	r0, #0
 8006df4:	6360      	str	r0, [r4, #52]	; 0x34
 8006df6:	e7c1      	b.n	8006d7c <__sflush_r+0x1c>
 8006df8:	6a21      	ldr	r1, [r4, #32]
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b0      	blx	r6
 8006e00:	1c41      	adds	r1, r0, #1
 8006e02:	d1c7      	bne.n	8006d94 <__sflush_r+0x34>
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0c4      	beq.n	8006d94 <__sflush_r+0x34>
 8006e0a:	2b1d      	cmp	r3, #29
 8006e0c:	d001      	beq.n	8006e12 <__sflush_r+0xb2>
 8006e0e:	2b16      	cmp	r3, #22
 8006e10:	d101      	bne.n	8006e16 <__sflush_r+0xb6>
 8006e12:	602f      	str	r7, [r5, #0]
 8006e14:	e7b1      	b.n	8006d7a <__sflush_r+0x1a>
 8006e16:	89a3      	ldrh	r3, [r4, #12]
 8006e18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1c:	81a3      	strh	r3, [r4, #12]
 8006e1e:	e7ad      	b.n	8006d7c <__sflush_r+0x1c>
 8006e20:	690f      	ldr	r7, [r1, #16]
 8006e22:	2f00      	cmp	r7, #0
 8006e24:	d0a9      	beq.n	8006d7a <__sflush_r+0x1a>
 8006e26:	0793      	lsls	r3, r2, #30
 8006e28:	680e      	ldr	r6, [r1, #0]
 8006e2a:	bf08      	it	eq
 8006e2c:	694b      	ldreq	r3, [r1, #20]
 8006e2e:	600f      	str	r7, [r1, #0]
 8006e30:	bf18      	it	ne
 8006e32:	2300      	movne	r3, #0
 8006e34:	eba6 0807 	sub.w	r8, r6, r7
 8006e38:	608b      	str	r3, [r1, #8]
 8006e3a:	f1b8 0f00 	cmp.w	r8, #0
 8006e3e:	dd9c      	ble.n	8006d7a <__sflush_r+0x1a>
 8006e40:	6a21      	ldr	r1, [r4, #32]
 8006e42:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e44:	4643      	mov	r3, r8
 8006e46:	463a      	mov	r2, r7
 8006e48:	4628      	mov	r0, r5
 8006e4a:	47b0      	blx	r6
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	dc06      	bgt.n	8006e5e <__sflush_r+0xfe>
 8006e50:	89a3      	ldrh	r3, [r4, #12]
 8006e52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e56:	81a3      	strh	r3, [r4, #12]
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	e78e      	b.n	8006d7c <__sflush_r+0x1c>
 8006e5e:	4407      	add	r7, r0
 8006e60:	eba8 0800 	sub.w	r8, r8, r0
 8006e64:	e7e9      	b.n	8006e3a <__sflush_r+0xda>
 8006e66:	bf00      	nop
 8006e68:	20400001 	.word	0x20400001

08006e6c <_fflush_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	4605      	mov	r5, r0
 8006e72:	460c      	mov	r4, r1
 8006e74:	b913      	cbnz	r3, 8006e7c <_fflush_r+0x10>
 8006e76:	2500      	movs	r5, #0
 8006e78:	4628      	mov	r0, r5
 8006e7a:	bd38      	pop	{r3, r4, r5, pc}
 8006e7c:	b118      	cbz	r0, 8006e86 <_fflush_r+0x1a>
 8006e7e:	6983      	ldr	r3, [r0, #24]
 8006e80:	b90b      	cbnz	r3, 8006e86 <_fflush_r+0x1a>
 8006e82:	f000 f887 	bl	8006f94 <__sinit>
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <_fflush_r+0x6c>)
 8006e88:	429c      	cmp	r4, r3
 8006e8a:	d11b      	bne.n	8006ec4 <_fflush_r+0x58>
 8006e8c:	686c      	ldr	r4, [r5, #4]
 8006e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d0ef      	beq.n	8006e76 <_fflush_r+0xa>
 8006e96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e98:	07d0      	lsls	r0, r2, #31
 8006e9a:	d404      	bmi.n	8006ea6 <_fflush_r+0x3a>
 8006e9c:	0599      	lsls	r1, r3, #22
 8006e9e:	d402      	bmi.n	8006ea6 <_fflush_r+0x3a>
 8006ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ea2:	f000 f915 	bl	80070d0 <__retarget_lock_acquire_recursive>
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	4621      	mov	r1, r4
 8006eaa:	f7ff ff59 	bl	8006d60 <__sflush_r>
 8006eae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eb0:	07da      	lsls	r2, r3, #31
 8006eb2:	4605      	mov	r5, r0
 8006eb4:	d4e0      	bmi.n	8006e78 <_fflush_r+0xc>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	059b      	lsls	r3, r3, #22
 8006eba:	d4dd      	bmi.n	8006e78 <_fflush_r+0xc>
 8006ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ebe:	f000 f908 	bl	80070d2 <__retarget_lock_release_recursive>
 8006ec2:	e7d9      	b.n	8006e78 <_fflush_r+0xc>
 8006ec4:	4b05      	ldr	r3, [pc, #20]	; (8006edc <_fflush_r+0x70>)
 8006ec6:	429c      	cmp	r4, r3
 8006ec8:	d101      	bne.n	8006ece <_fflush_r+0x62>
 8006eca:	68ac      	ldr	r4, [r5, #8]
 8006ecc:	e7df      	b.n	8006e8e <_fflush_r+0x22>
 8006ece:	4b04      	ldr	r3, [pc, #16]	; (8006ee0 <_fflush_r+0x74>)
 8006ed0:	429c      	cmp	r4, r3
 8006ed2:	bf08      	it	eq
 8006ed4:	68ec      	ldreq	r4, [r5, #12]
 8006ed6:	e7da      	b.n	8006e8e <_fflush_r+0x22>
 8006ed8:	080079b4 	.word	0x080079b4
 8006edc:	080079d4 	.word	0x080079d4
 8006ee0:	08007994 	.word	0x08007994

08006ee4 <std>:
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	b510      	push	{r4, lr}
 8006ee8:	4604      	mov	r4, r0
 8006eea:	e9c0 3300 	strd	r3, r3, [r0]
 8006eee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ef2:	6083      	str	r3, [r0, #8]
 8006ef4:	8181      	strh	r1, [r0, #12]
 8006ef6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ef8:	81c2      	strh	r2, [r0, #14]
 8006efa:	6183      	str	r3, [r0, #24]
 8006efc:	4619      	mov	r1, r3
 8006efe:	2208      	movs	r2, #8
 8006f00:	305c      	adds	r0, #92	; 0x5c
 8006f02:	f7ff fb57 	bl	80065b4 <memset>
 8006f06:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <std+0x38>)
 8006f08:	6263      	str	r3, [r4, #36]	; 0x24
 8006f0a:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <std+0x3c>)
 8006f0c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f0e:	4b05      	ldr	r3, [pc, #20]	; (8006f24 <std+0x40>)
 8006f10:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <std+0x44>)
 8006f14:	6224      	str	r4, [r4, #32]
 8006f16:	6323      	str	r3, [r4, #48]	; 0x30
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	bf00      	nop
 8006f1c:	08007409 	.word	0x08007409
 8006f20:	0800742b 	.word	0x0800742b
 8006f24:	08007463 	.word	0x08007463
 8006f28:	08007487 	.word	0x08007487

08006f2c <_cleanup_r>:
 8006f2c:	4901      	ldr	r1, [pc, #4]	; (8006f34 <_cleanup_r+0x8>)
 8006f2e:	f000 b8af 	b.w	8007090 <_fwalk_reent>
 8006f32:	bf00      	nop
 8006f34:	08006e6d 	.word	0x08006e6d

08006f38 <__sfmoreglue>:
 8006f38:	b570      	push	{r4, r5, r6, lr}
 8006f3a:	2268      	movs	r2, #104	; 0x68
 8006f3c:	1e4d      	subs	r5, r1, #1
 8006f3e:	4355      	muls	r5, r2
 8006f40:	460e      	mov	r6, r1
 8006f42:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f46:	f000 f997 	bl	8007278 <_malloc_r>
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	b140      	cbz	r0, 8006f60 <__sfmoreglue+0x28>
 8006f4e:	2100      	movs	r1, #0
 8006f50:	e9c0 1600 	strd	r1, r6, [r0]
 8006f54:	300c      	adds	r0, #12
 8006f56:	60a0      	str	r0, [r4, #8]
 8006f58:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f5c:	f7ff fb2a 	bl	80065b4 <memset>
 8006f60:	4620      	mov	r0, r4
 8006f62:	bd70      	pop	{r4, r5, r6, pc}

08006f64 <__sfp_lock_acquire>:
 8006f64:	4801      	ldr	r0, [pc, #4]	; (8006f6c <__sfp_lock_acquire+0x8>)
 8006f66:	f000 b8b3 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	200002d9 	.word	0x200002d9

08006f70 <__sfp_lock_release>:
 8006f70:	4801      	ldr	r0, [pc, #4]	; (8006f78 <__sfp_lock_release+0x8>)
 8006f72:	f000 b8ae 	b.w	80070d2 <__retarget_lock_release_recursive>
 8006f76:	bf00      	nop
 8006f78:	200002d9 	.word	0x200002d9

08006f7c <__sinit_lock_acquire>:
 8006f7c:	4801      	ldr	r0, [pc, #4]	; (8006f84 <__sinit_lock_acquire+0x8>)
 8006f7e:	f000 b8a7 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 8006f82:	bf00      	nop
 8006f84:	200002da 	.word	0x200002da

08006f88 <__sinit_lock_release>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__sinit_lock_release+0x8>)
 8006f8a:	f000 b8a2 	b.w	80070d2 <__retarget_lock_release_recursive>
 8006f8e:	bf00      	nop
 8006f90:	200002da 	.word	0x200002da

08006f94 <__sinit>:
 8006f94:	b510      	push	{r4, lr}
 8006f96:	4604      	mov	r4, r0
 8006f98:	f7ff fff0 	bl	8006f7c <__sinit_lock_acquire>
 8006f9c:	69a3      	ldr	r3, [r4, #24]
 8006f9e:	b11b      	cbz	r3, 8006fa8 <__sinit+0x14>
 8006fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fa4:	f7ff bff0 	b.w	8006f88 <__sinit_lock_release>
 8006fa8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006fac:	6523      	str	r3, [r4, #80]	; 0x50
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <__sinit+0x68>)
 8006fb0:	4a13      	ldr	r2, [pc, #76]	; (8007000 <__sinit+0x6c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	bf04      	itt	eq
 8006fba:	2301      	moveq	r3, #1
 8006fbc:	61a3      	streq	r3, [r4, #24]
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	f000 f820 	bl	8007004 <__sfp>
 8006fc4:	6060      	str	r0, [r4, #4]
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	f000 f81c 	bl	8007004 <__sfp>
 8006fcc:	60a0      	str	r0, [r4, #8]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f000 f818 	bl	8007004 <__sfp>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	60e0      	str	r0, [r4, #12]
 8006fd8:	2104      	movs	r1, #4
 8006fda:	6860      	ldr	r0, [r4, #4]
 8006fdc:	f7ff ff82 	bl	8006ee4 <std>
 8006fe0:	68a0      	ldr	r0, [r4, #8]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	2109      	movs	r1, #9
 8006fe6:	f7ff ff7d 	bl	8006ee4 <std>
 8006fea:	68e0      	ldr	r0, [r4, #12]
 8006fec:	2202      	movs	r2, #2
 8006fee:	2112      	movs	r1, #18
 8006ff0:	f7ff ff78 	bl	8006ee4 <std>
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	61a3      	str	r3, [r4, #24]
 8006ff8:	e7d2      	b.n	8006fa0 <__sinit+0xc>
 8006ffa:	bf00      	nop
 8006ffc:	0800795c 	.word	0x0800795c
 8007000:	08006f2d 	.word	0x08006f2d

08007004 <__sfp>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	4607      	mov	r7, r0
 8007008:	f7ff ffac 	bl	8006f64 <__sfp_lock_acquire>
 800700c:	4b1e      	ldr	r3, [pc, #120]	; (8007088 <__sfp+0x84>)
 800700e:	681e      	ldr	r6, [r3, #0]
 8007010:	69b3      	ldr	r3, [r6, #24]
 8007012:	b913      	cbnz	r3, 800701a <__sfp+0x16>
 8007014:	4630      	mov	r0, r6
 8007016:	f7ff ffbd 	bl	8006f94 <__sinit>
 800701a:	3648      	adds	r6, #72	; 0x48
 800701c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007020:	3b01      	subs	r3, #1
 8007022:	d503      	bpl.n	800702c <__sfp+0x28>
 8007024:	6833      	ldr	r3, [r6, #0]
 8007026:	b30b      	cbz	r3, 800706c <__sfp+0x68>
 8007028:	6836      	ldr	r6, [r6, #0]
 800702a:	e7f7      	b.n	800701c <__sfp+0x18>
 800702c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007030:	b9d5      	cbnz	r5, 8007068 <__sfp+0x64>
 8007032:	4b16      	ldr	r3, [pc, #88]	; (800708c <__sfp+0x88>)
 8007034:	60e3      	str	r3, [r4, #12]
 8007036:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800703a:	6665      	str	r5, [r4, #100]	; 0x64
 800703c:	f000 f847 	bl	80070ce <__retarget_lock_init_recursive>
 8007040:	f7ff ff96 	bl	8006f70 <__sfp_lock_release>
 8007044:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007048:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800704c:	6025      	str	r5, [r4, #0]
 800704e:	61a5      	str	r5, [r4, #24]
 8007050:	2208      	movs	r2, #8
 8007052:	4629      	mov	r1, r5
 8007054:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007058:	f7ff faac 	bl	80065b4 <memset>
 800705c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007060:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007064:	4620      	mov	r0, r4
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007068:	3468      	adds	r4, #104	; 0x68
 800706a:	e7d9      	b.n	8007020 <__sfp+0x1c>
 800706c:	2104      	movs	r1, #4
 800706e:	4638      	mov	r0, r7
 8007070:	f7ff ff62 	bl	8006f38 <__sfmoreglue>
 8007074:	4604      	mov	r4, r0
 8007076:	6030      	str	r0, [r6, #0]
 8007078:	2800      	cmp	r0, #0
 800707a:	d1d5      	bne.n	8007028 <__sfp+0x24>
 800707c:	f7ff ff78 	bl	8006f70 <__sfp_lock_release>
 8007080:	230c      	movs	r3, #12
 8007082:	603b      	str	r3, [r7, #0]
 8007084:	e7ee      	b.n	8007064 <__sfp+0x60>
 8007086:	bf00      	nop
 8007088:	0800795c 	.word	0x0800795c
 800708c:	ffff0001 	.word	0xffff0001

08007090 <_fwalk_reent>:
 8007090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007094:	4606      	mov	r6, r0
 8007096:	4688      	mov	r8, r1
 8007098:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800709c:	2700      	movs	r7, #0
 800709e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80070a2:	f1b9 0901 	subs.w	r9, r9, #1
 80070a6:	d505      	bpl.n	80070b4 <_fwalk_reent+0x24>
 80070a8:	6824      	ldr	r4, [r4, #0]
 80070aa:	2c00      	cmp	r4, #0
 80070ac:	d1f7      	bne.n	800709e <_fwalk_reent+0xe>
 80070ae:	4638      	mov	r0, r7
 80070b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070b4:	89ab      	ldrh	r3, [r5, #12]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d907      	bls.n	80070ca <_fwalk_reent+0x3a>
 80070ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80070be:	3301      	adds	r3, #1
 80070c0:	d003      	beq.n	80070ca <_fwalk_reent+0x3a>
 80070c2:	4629      	mov	r1, r5
 80070c4:	4630      	mov	r0, r6
 80070c6:	47c0      	blx	r8
 80070c8:	4307      	orrs	r7, r0
 80070ca:	3568      	adds	r5, #104	; 0x68
 80070cc:	e7e9      	b.n	80070a2 <_fwalk_reent+0x12>

080070ce <__retarget_lock_init_recursive>:
 80070ce:	4770      	bx	lr

080070d0 <__retarget_lock_acquire_recursive>:
 80070d0:	4770      	bx	lr

080070d2 <__retarget_lock_release_recursive>:
 80070d2:	4770      	bx	lr

080070d4 <__swhatbuf_r>:
 80070d4:	b570      	push	{r4, r5, r6, lr}
 80070d6:	460e      	mov	r6, r1
 80070d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070dc:	2900      	cmp	r1, #0
 80070de:	b096      	sub	sp, #88	; 0x58
 80070e0:	4614      	mov	r4, r2
 80070e2:	461d      	mov	r5, r3
 80070e4:	da08      	bge.n	80070f8 <__swhatbuf_r+0x24>
 80070e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	602a      	str	r2, [r5, #0]
 80070ee:	061a      	lsls	r2, r3, #24
 80070f0:	d410      	bmi.n	8007114 <__swhatbuf_r+0x40>
 80070f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070f6:	e00e      	b.n	8007116 <__swhatbuf_r+0x42>
 80070f8:	466a      	mov	r2, sp
 80070fa:	f000 f9eb 	bl	80074d4 <_fstat_r>
 80070fe:	2800      	cmp	r0, #0
 8007100:	dbf1      	blt.n	80070e6 <__swhatbuf_r+0x12>
 8007102:	9a01      	ldr	r2, [sp, #4]
 8007104:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007108:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800710c:	425a      	negs	r2, r3
 800710e:	415a      	adcs	r2, r3
 8007110:	602a      	str	r2, [r5, #0]
 8007112:	e7ee      	b.n	80070f2 <__swhatbuf_r+0x1e>
 8007114:	2340      	movs	r3, #64	; 0x40
 8007116:	2000      	movs	r0, #0
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	b016      	add	sp, #88	; 0x58
 800711c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007120 <__smakebuf_r>:
 8007120:	898b      	ldrh	r3, [r1, #12]
 8007122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007124:	079d      	lsls	r5, r3, #30
 8007126:	4606      	mov	r6, r0
 8007128:	460c      	mov	r4, r1
 800712a:	d507      	bpl.n	800713c <__smakebuf_r+0x1c>
 800712c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	2301      	movs	r3, #1
 8007136:	6163      	str	r3, [r4, #20]
 8007138:	b002      	add	sp, #8
 800713a:	bd70      	pop	{r4, r5, r6, pc}
 800713c:	ab01      	add	r3, sp, #4
 800713e:	466a      	mov	r2, sp
 8007140:	f7ff ffc8 	bl	80070d4 <__swhatbuf_r>
 8007144:	9900      	ldr	r1, [sp, #0]
 8007146:	4605      	mov	r5, r0
 8007148:	4630      	mov	r0, r6
 800714a:	f000 f895 	bl	8007278 <_malloc_r>
 800714e:	b948      	cbnz	r0, 8007164 <__smakebuf_r+0x44>
 8007150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007154:	059a      	lsls	r2, r3, #22
 8007156:	d4ef      	bmi.n	8007138 <__smakebuf_r+0x18>
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	f043 0302 	orr.w	r3, r3, #2
 8007160:	81a3      	strh	r3, [r4, #12]
 8007162:	e7e3      	b.n	800712c <__smakebuf_r+0xc>
 8007164:	4b0d      	ldr	r3, [pc, #52]	; (800719c <__smakebuf_r+0x7c>)
 8007166:	62b3      	str	r3, [r6, #40]	; 0x28
 8007168:	89a3      	ldrh	r3, [r4, #12]
 800716a:	6020      	str	r0, [r4, #0]
 800716c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007170:	81a3      	strh	r3, [r4, #12]
 8007172:	9b00      	ldr	r3, [sp, #0]
 8007174:	6163      	str	r3, [r4, #20]
 8007176:	9b01      	ldr	r3, [sp, #4]
 8007178:	6120      	str	r0, [r4, #16]
 800717a:	b15b      	cbz	r3, 8007194 <__smakebuf_r+0x74>
 800717c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007180:	4630      	mov	r0, r6
 8007182:	f000 f9b9 	bl	80074f8 <_isatty_r>
 8007186:	b128      	cbz	r0, 8007194 <__smakebuf_r+0x74>
 8007188:	89a3      	ldrh	r3, [r4, #12]
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	f043 0301 	orr.w	r3, r3, #1
 8007192:	81a3      	strh	r3, [r4, #12]
 8007194:	89a0      	ldrh	r0, [r4, #12]
 8007196:	4305      	orrs	r5, r0
 8007198:	81a5      	strh	r5, [r4, #12]
 800719a:	e7cd      	b.n	8007138 <__smakebuf_r+0x18>
 800719c:	08006f2d 	.word	0x08006f2d

080071a0 <_free_r>:
 80071a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071a2:	2900      	cmp	r1, #0
 80071a4:	d044      	beq.n	8007230 <_free_r+0x90>
 80071a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071aa:	9001      	str	r0, [sp, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f1a1 0404 	sub.w	r4, r1, #4
 80071b2:	bfb8      	it	lt
 80071b4:	18e4      	addlt	r4, r4, r3
 80071b6:	f000 f9c1 	bl	800753c <__malloc_lock>
 80071ba:	4a1e      	ldr	r2, [pc, #120]	; (8007234 <_free_r+0x94>)
 80071bc:	9801      	ldr	r0, [sp, #4]
 80071be:	6813      	ldr	r3, [r2, #0]
 80071c0:	b933      	cbnz	r3, 80071d0 <_free_r+0x30>
 80071c2:	6063      	str	r3, [r4, #4]
 80071c4:	6014      	str	r4, [r2, #0]
 80071c6:	b003      	add	sp, #12
 80071c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071cc:	f000 b9bc 	b.w	8007548 <__malloc_unlock>
 80071d0:	42a3      	cmp	r3, r4
 80071d2:	d908      	bls.n	80071e6 <_free_r+0x46>
 80071d4:	6825      	ldr	r5, [r4, #0]
 80071d6:	1961      	adds	r1, r4, r5
 80071d8:	428b      	cmp	r3, r1
 80071da:	bf01      	itttt	eq
 80071dc:	6819      	ldreq	r1, [r3, #0]
 80071de:	685b      	ldreq	r3, [r3, #4]
 80071e0:	1949      	addeq	r1, r1, r5
 80071e2:	6021      	streq	r1, [r4, #0]
 80071e4:	e7ed      	b.n	80071c2 <_free_r+0x22>
 80071e6:	461a      	mov	r2, r3
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	b10b      	cbz	r3, 80071f0 <_free_r+0x50>
 80071ec:	42a3      	cmp	r3, r4
 80071ee:	d9fa      	bls.n	80071e6 <_free_r+0x46>
 80071f0:	6811      	ldr	r1, [r2, #0]
 80071f2:	1855      	adds	r5, r2, r1
 80071f4:	42a5      	cmp	r5, r4
 80071f6:	d10b      	bne.n	8007210 <_free_r+0x70>
 80071f8:	6824      	ldr	r4, [r4, #0]
 80071fa:	4421      	add	r1, r4
 80071fc:	1854      	adds	r4, r2, r1
 80071fe:	42a3      	cmp	r3, r4
 8007200:	6011      	str	r1, [r2, #0]
 8007202:	d1e0      	bne.n	80071c6 <_free_r+0x26>
 8007204:	681c      	ldr	r4, [r3, #0]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	6053      	str	r3, [r2, #4]
 800720a:	4421      	add	r1, r4
 800720c:	6011      	str	r1, [r2, #0]
 800720e:	e7da      	b.n	80071c6 <_free_r+0x26>
 8007210:	d902      	bls.n	8007218 <_free_r+0x78>
 8007212:	230c      	movs	r3, #12
 8007214:	6003      	str	r3, [r0, #0]
 8007216:	e7d6      	b.n	80071c6 <_free_r+0x26>
 8007218:	6825      	ldr	r5, [r4, #0]
 800721a:	1961      	adds	r1, r4, r5
 800721c:	428b      	cmp	r3, r1
 800721e:	bf04      	itt	eq
 8007220:	6819      	ldreq	r1, [r3, #0]
 8007222:	685b      	ldreq	r3, [r3, #4]
 8007224:	6063      	str	r3, [r4, #4]
 8007226:	bf04      	itt	eq
 8007228:	1949      	addeq	r1, r1, r5
 800722a:	6021      	streq	r1, [r4, #0]
 800722c:	6054      	str	r4, [r2, #4]
 800722e:	e7ca      	b.n	80071c6 <_free_r+0x26>
 8007230:	b003      	add	sp, #12
 8007232:	bd30      	pop	{r4, r5, pc}
 8007234:	200002dc 	.word	0x200002dc

08007238 <sbrk_aligned>:
 8007238:	b570      	push	{r4, r5, r6, lr}
 800723a:	4e0e      	ldr	r6, [pc, #56]	; (8007274 <sbrk_aligned+0x3c>)
 800723c:	460c      	mov	r4, r1
 800723e:	6831      	ldr	r1, [r6, #0]
 8007240:	4605      	mov	r5, r0
 8007242:	b911      	cbnz	r1, 800724a <sbrk_aligned+0x12>
 8007244:	f000 f88c 	bl	8007360 <_sbrk_r>
 8007248:	6030      	str	r0, [r6, #0]
 800724a:	4621      	mov	r1, r4
 800724c:	4628      	mov	r0, r5
 800724e:	f000 f887 	bl	8007360 <_sbrk_r>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d00a      	beq.n	800726c <sbrk_aligned+0x34>
 8007256:	1cc4      	adds	r4, r0, #3
 8007258:	f024 0403 	bic.w	r4, r4, #3
 800725c:	42a0      	cmp	r0, r4
 800725e:	d007      	beq.n	8007270 <sbrk_aligned+0x38>
 8007260:	1a21      	subs	r1, r4, r0
 8007262:	4628      	mov	r0, r5
 8007264:	f000 f87c 	bl	8007360 <_sbrk_r>
 8007268:	3001      	adds	r0, #1
 800726a:	d101      	bne.n	8007270 <sbrk_aligned+0x38>
 800726c:	f04f 34ff 	mov.w	r4, #4294967295
 8007270:	4620      	mov	r0, r4
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	200002e0 	.word	0x200002e0

08007278 <_malloc_r>:
 8007278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800727c:	1ccd      	adds	r5, r1, #3
 800727e:	f025 0503 	bic.w	r5, r5, #3
 8007282:	3508      	adds	r5, #8
 8007284:	2d0c      	cmp	r5, #12
 8007286:	bf38      	it	cc
 8007288:	250c      	movcc	r5, #12
 800728a:	2d00      	cmp	r5, #0
 800728c:	4607      	mov	r7, r0
 800728e:	db01      	blt.n	8007294 <_malloc_r+0x1c>
 8007290:	42a9      	cmp	r1, r5
 8007292:	d905      	bls.n	80072a0 <_malloc_r+0x28>
 8007294:	230c      	movs	r3, #12
 8007296:	603b      	str	r3, [r7, #0]
 8007298:	2600      	movs	r6, #0
 800729a:	4630      	mov	r0, r6
 800729c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a0:	4e2e      	ldr	r6, [pc, #184]	; (800735c <_malloc_r+0xe4>)
 80072a2:	f000 f94b 	bl	800753c <__malloc_lock>
 80072a6:	6833      	ldr	r3, [r6, #0]
 80072a8:	461c      	mov	r4, r3
 80072aa:	bb34      	cbnz	r4, 80072fa <_malloc_r+0x82>
 80072ac:	4629      	mov	r1, r5
 80072ae:	4638      	mov	r0, r7
 80072b0:	f7ff ffc2 	bl	8007238 <sbrk_aligned>
 80072b4:	1c43      	adds	r3, r0, #1
 80072b6:	4604      	mov	r4, r0
 80072b8:	d14d      	bne.n	8007356 <_malloc_r+0xde>
 80072ba:	6834      	ldr	r4, [r6, #0]
 80072bc:	4626      	mov	r6, r4
 80072be:	2e00      	cmp	r6, #0
 80072c0:	d140      	bne.n	8007344 <_malloc_r+0xcc>
 80072c2:	6823      	ldr	r3, [r4, #0]
 80072c4:	4631      	mov	r1, r6
 80072c6:	4638      	mov	r0, r7
 80072c8:	eb04 0803 	add.w	r8, r4, r3
 80072cc:	f000 f848 	bl	8007360 <_sbrk_r>
 80072d0:	4580      	cmp	r8, r0
 80072d2:	d13a      	bne.n	800734a <_malloc_r+0xd2>
 80072d4:	6821      	ldr	r1, [r4, #0]
 80072d6:	3503      	adds	r5, #3
 80072d8:	1a6d      	subs	r5, r5, r1
 80072da:	f025 0503 	bic.w	r5, r5, #3
 80072de:	3508      	adds	r5, #8
 80072e0:	2d0c      	cmp	r5, #12
 80072e2:	bf38      	it	cc
 80072e4:	250c      	movcc	r5, #12
 80072e6:	4629      	mov	r1, r5
 80072e8:	4638      	mov	r0, r7
 80072ea:	f7ff ffa5 	bl	8007238 <sbrk_aligned>
 80072ee:	3001      	adds	r0, #1
 80072f0:	d02b      	beq.n	800734a <_malloc_r+0xd2>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	442b      	add	r3, r5
 80072f6:	6023      	str	r3, [r4, #0]
 80072f8:	e00e      	b.n	8007318 <_malloc_r+0xa0>
 80072fa:	6822      	ldr	r2, [r4, #0]
 80072fc:	1b52      	subs	r2, r2, r5
 80072fe:	d41e      	bmi.n	800733e <_malloc_r+0xc6>
 8007300:	2a0b      	cmp	r2, #11
 8007302:	d916      	bls.n	8007332 <_malloc_r+0xba>
 8007304:	1961      	adds	r1, r4, r5
 8007306:	42a3      	cmp	r3, r4
 8007308:	6025      	str	r5, [r4, #0]
 800730a:	bf18      	it	ne
 800730c:	6059      	strne	r1, [r3, #4]
 800730e:	6863      	ldr	r3, [r4, #4]
 8007310:	bf08      	it	eq
 8007312:	6031      	streq	r1, [r6, #0]
 8007314:	5162      	str	r2, [r4, r5]
 8007316:	604b      	str	r3, [r1, #4]
 8007318:	4638      	mov	r0, r7
 800731a:	f104 060b 	add.w	r6, r4, #11
 800731e:	f000 f913 	bl	8007548 <__malloc_unlock>
 8007322:	f026 0607 	bic.w	r6, r6, #7
 8007326:	1d23      	adds	r3, r4, #4
 8007328:	1af2      	subs	r2, r6, r3
 800732a:	d0b6      	beq.n	800729a <_malloc_r+0x22>
 800732c:	1b9b      	subs	r3, r3, r6
 800732e:	50a3      	str	r3, [r4, r2]
 8007330:	e7b3      	b.n	800729a <_malloc_r+0x22>
 8007332:	6862      	ldr	r2, [r4, #4]
 8007334:	42a3      	cmp	r3, r4
 8007336:	bf0c      	ite	eq
 8007338:	6032      	streq	r2, [r6, #0]
 800733a:	605a      	strne	r2, [r3, #4]
 800733c:	e7ec      	b.n	8007318 <_malloc_r+0xa0>
 800733e:	4623      	mov	r3, r4
 8007340:	6864      	ldr	r4, [r4, #4]
 8007342:	e7b2      	b.n	80072aa <_malloc_r+0x32>
 8007344:	4634      	mov	r4, r6
 8007346:	6876      	ldr	r6, [r6, #4]
 8007348:	e7b9      	b.n	80072be <_malloc_r+0x46>
 800734a:	230c      	movs	r3, #12
 800734c:	603b      	str	r3, [r7, #0]
 800734e:	4638      	mov	r0, r7
 8007350:	f000 f8fa 	bl	8007548 <__malloc_unlock>
 8007354:	e7a1      	b.n	800729a <_malloc_r+0x22>
 8007356:	6025      	str	r5, [r4, #0]
 8007358:	e7de      	b.n	8007318 <_malloc_r+0xa0>
 800735a:	bf00      	nop
 800735c:	200002dc 	.word	0x200002dc

08007360 <_sbrk_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	4d06      	ldr	r5, [pc, #24]	; (800737c <_sbrk_r+0x1c>)
 8007364:	2300      	movs	r3, #0
 8007366:	4604      	mov	r4, r0
 8007368:	4608      	mov	r0, r1
 800736a:	602b      	str	r3, [r5, #0]
 800736c:	f7fb fdea 	bl	8002f44 <_sbrk>
 8007370:	1c43      	adds	r3, r0, #1
 8007372:	d102      	bne.n	800737a <_sbrk_r+0x1a>
 8007374:	682b      	ldr	r3, [r5, #0]
 8007376:	b103      	cbz	r3, 800737a <_sbrk_r+0x1a>
 8007378:	6023      	str	r3, [r4, #0]
 800737a:	bd38      	pop	{r3, r4, r5, pc}
 800737c:	200002e4 	.word	0x200002e4

08007380 <_raise_r>:
 8007380:	291f      	cmp	r1, #31
 8007382:	b538      	push	{r3, r4, r5, lr}
 8007384:	4604      	mov	r4, r0
 8007386:	460d      	mov	r5, r1
 8007388:	d904      	bls.n	8007394 <_raise_r+0x14>
 800738a:	2316      	movs	r3, #22
 800738c:	6003      	str	r3, [r0, #0]
 800738e:	f04f 30ff 	mov.w	r0, #4294967295
 8007392:	bd38      	pop	{r3, r4, r5, pc}
 8007394:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007396:	b112      	cbz	r2, 800739e <_raise_r+0x1e>
 8007398:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800739c:	b94b      	cbnz	r3, 80073b2 <_raise_r+0x32>
 800739e:	4620      	mov	r0, r4
 80073a0:	f000 f830 	bl	8007404 <_getpid_r>
 80073a4:	462a      	mov	r2, r5
 80073a6:	4601      	mov	r1, r0
 80073a8:	4620      	mov	r0, r4
 80073aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ae:	f000 b817 	b.w	80073e0 <_kill_r>
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d00a      	beq.n	80073cc <_raise_r+0x4c>
 80073b6:	1c59      	adds	r1, r3, #1
 80073b8:	d103      	bne.n	80073c2 <_raise_r+0x42>
 80073ba:	2316      	movs	r3, #22
 80073bc:	6003      	str	r3, [r0, #0]
 80073be:	2001      	movs	r0, #1
 80073c0:	e7e7      	b.n	8007392 <_raise_r+0x12>
 80073c2:	2400      	movs	r4, #0
 80073c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073c8:	4628      	mov	r0, r5
 80073ca:	4798      	blx	r3
 80073cc:	2000      	movs	r0, #0
 80073ce:	e7e0      	b.n	8007392 <_raise_r+0x12>

080073d0 <raise>:
 80073d0:	4b02      	ldr	r3, [pc, #8]	; (80073dc <raise+0xc>)
 80073d2:	4601      	mov	r1, r0
 80073d4:	6818      	ldr	r0, [r3, #0]
 80073d6:	f7ff bfd3 	b.w	8007380 <_raise_r>
 80073da:	bf00      	nop
 80073dc:	2000010c 	.word	0x2000010c

080073e0 <_kill_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d07      	ldr	r5, [pc, #28]	; (8007400 <_kill_r+0x20>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	602b      	str	r3, [r5, #0]
 80073ee:	f7fb fd21 	bl	8002e34 <_kill>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	d102      	bne.n	80073fc <_kill_r+0x1c>
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	b103      	cbz	r3, 80073fc <_kill_r+0x1c>
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	bd38      	pop	{r3, r4, r5, pc}
 80073fe:	bf00      	nop
 8007400:	200002e4 	.word	0x200002e4

08007404 <_getpid_r>:
 8007404:	f7fb bd0e 	b.w	8002e24 <_getpid>

08007408 <__sread>:
 8007408:	b510      	push	{r4, lr}
 800740a:	460c      	mov	r4, r1
 800740c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007410:	f000 f8a0 	bl	8007554 <_read_r>
 8007414:	2800      	cmp	r0, #0
 8007416:	bfab      	itete	ge
 8007418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800741a:	89a3      	ldrhlt	r3, [r4, #12]
 800741c:	181b      	addge	r3, r3, r0
 800741e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007422:	bfac      	ite	ge
 8007424:	6563      	strge	r3, [r4, #84]	; 0x54
 8007426:	81a3      	strhlt	r3, [r4, #12]
 8007428:	bd10      	pop	{r4, pc}

0800742a <__swrite>:
 800742a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800742e:	461f      	mov	r7, r3
 8007430:	898b      	ldrh	r3, [r1, #12]
 8007432:	05db      	lsls	r3, r3, #23
 8007434:	4605      	mov	r5, r0
 8007436:	460c      	mov	r4, r1
 8007438:	4616      	mov	r6, r2
 800743a:	d505      	bpl.n	8007448 <__swrite+0x1e>
 800743c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007440:	2302      	movs	r3, #2
 8007442:	2200      	movs	r2, #0
 8007444:	f000 f868 	bl	8007518 <_lseek_r>
 8007448:	89a3      	ldrh	r3, [r4, #12]
 800744a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800744e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007452:	81a3      	strh	r3, [r4, #12]
 8007454:	4632      	mov	r2, r6
 8007456:	463b      	mov	r3, r7
 8007458:	4628      	mov	r0, r5
 800745a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800745e:	f000 b817 	b.w	8007490 <_write_r>

08007462 <__sseek>:
 8007462:	b510      	push	{r4, lr}
 8007464:	460c      	mov	r4, r1
 8007466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800746a:	f000 f855 	bl	8007518 <_lseek_r>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	89a3      	ldrh	r3, [r4, #12]
 8007472:	bf15      	itete	ne
 8007474:	6560      	strne	r0, [r4, #84]	; 0x54
 8007476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800747a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800747e:	81a3      	strheq	r3, [r4, #12]
 8007480:	bf18      	it	ne
 8007482:	81a3      	strhne	r3, [r4, #12]
 8007484:	bd10      	pop	{r4, pc}

08007486 <__sclose>:
 8007486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800748a:	f000 b813 	b.w	80074b4 <_close_r>
	...

08007490 <_write_r>:
 8007490:	b538      	push	{r3, r4, r5, lr}
 8007492:	4d07      	ldr	r5, [pc, #28]	; (80074b0 <_write_r+0x20>)
 8007494:	4604      	mov	r4, r0
 8007496:	4608      	mov	r0, r1
 8007498:	4611      	mov	r1, r2
 800749a:	2200      	movs	r2, #0
 800749c:	602a      	str	r2, [r5, #0]
 800749e:	461a      	mov	r2, r3
 80074a0:	f7fb fcff 	bl	8002ea2 <_write>
 80074a4:	1c43      	adds	r3, r0, #1
 80074a6:	d102      	bne.n	80074ae <_write_r+0x1e>
 80074a8:	682b      	ldr	r3, [r5, #0]
 80074aa:	b103      	cbz	r3, 80074ae <_write_r+0x1e>
 80074ac:	6023      	str	r3, [r4, #0]
 80074ae:	bd38      	pop	{r3, r4, r5, pc}
 80074b0:	200002e4 	.word	0x200002e4

080074b4 <_close_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d06      	ldr	r5, [pc, #24]	; (80074d0 <_close_r+0x1c>)
 80074b8:	2300      	movs	r3, #0
 80074ba:	4604      	mov	r4, r0
 80074bc:	4608      	mov	r0, r1
 80074be:	602b      	str	r3, [r5, #0]
 80074c0:	f7fb fd0b 	bl	8002eda <_close>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d102      	bne.n	80074ce <_close_r+0x1a>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	b103      	cbz	r3, 80074ce <_close_r+0x1a>
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	bd38      	pop	{r3, r4, r5, pc}
 80074d0:	200002e4 	.word	0x200002e4

080074d4 <_fstat_r>:
 80074d4:	b538      	push	{r3, r4, r5, lr}
 80074d6:	4d07      	ldr	r5, [pc, #28]	; (80074f4 <_fstat_r+0x20>)
 80074d8:	2300      	movs	r3, #0
 80074da:	4604      	mov	r4, r0
 80074dc:	4608      	mov	r0, r1
 80074de:	4611      	mov	r1, r2
 80074e0:	602b      	str	r3, [r5, #0]
 80074e2:	f7fb fd06 	bl	8002ef2 <_fstat>
 80074e6:	1c43      	adds	r3, r0, #1
 80074e8:	d102      	bne.n	80074f0 <_fstat_r+0x1c>
 80074ea:	682b      	ldr	r3, [r5, #0]
 80074ec:	b103      	cbz	r3, 80074f0 <_fstat_r+0x1c>
 80074ee:	6023      	str	r3, [r4, #0]
 80074f0:	bd38      	pop	{r3, r4, r5, pc}
 80074f2:	bf00      	nop
 80074f4:	200002e4 	.word	0x200002e4

080074f8 <_isatty_r>:
 80074f8:	b538      	push	{r3, r4, r5, lr}
 80074fa:	4d06      	ldr	r5, [pc, #24]	; (8007514 <_isatty_r+0x1c>)
 80074fc:	2300      	movs	r3, #0
 80074fe:	4604      	mov	r4, r0
 8007500:	4608      	mov	r0, r1
 8007502:	602b      	str	r3, [r5, #0]
 8007504:	f7fb fd05 	bl	8002f12 <_isatty>
 8007508:	1c43      	adds	r3, r0, #1
 800750a:	d102      	bne.n	8007512 <_isatty_r+0x1a>
 800750c:	682b      	ldr	r3, [r5, #0]
 800750e:	b103      	cbz	r3, 8007512 <_isatty_r+0x1a>
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	200002e4 	.word	0x200002e4

08007518 <_lseek_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d07      	ldr	r5, [pc, #28]	; (8007538 <_lseek_r+0x20>)
 800751c:	4604      	mov	r4, r0
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	2200      	movs	r2, #0
 8007524:	602a      	str	r2, [r5, #0]
 8007526:	461a      	mov	r2, r3
 8007528:	f7fb fcfe 	bl	8002f28 <_lseek>
 800752c:	1c43      	adds	r3, r0, #1
 800752e:	d102      	bne.n	8007536 <_lseek_r+0x1e>
 8007530:	682b      	ldr	r3, [r5, #0]
 8007532:	b103      	cbz	r3, 8007536 <_lseek_r+0x1e>
 8007534:	6023      	str	r3, [r4, #0]
 8007536:	bd38      	pop	{r3, r4, r5, pc}
 8007538:	200002e4 	.word	0x200002e4

0800753c <__malloc_lock>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__malloc_lock+0x8>)
 800753e:	f7ff bdc7 	b.w	80070d0 <__retarget_lock_acquire_recursive>
 8007542:	bf00      	nop
 8007544:	200002d8 	.word	0x200002d8

08007548 <__malloc_unlock>:
 8007548:	4801      	ldr	r0, [pc, #4]	; (8007550 <__malloc_unlock+0x8>)
 800754a:	f7ff bdc2 	b.w	80070d2 <__retarget_lock_release_recursive>
 800754e:	bf00      	nop
 8007550:	200002d8 	.word	0x200002d8

08007554 <_read_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d07      	ldr	r5, [pc, #28]	; (8007574 <_read_r+0x20>)
 8007558:	4604      	mov	r4, r0
 800755a:	4608      	mov	r0, r1
 800755c:	4611      	mov	r1, r2
 800755e:	2200      	movs	r2, #0
 8007560:	602a      	str	r2, [r5, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	f7fb fc80 	bl	8002e68 <_read>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	d102      	bne.n	8007572 <_read_r+0x1e>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	b103      	cbz	r3, 8007572 <_read_r+0x1e>
 8007570:	6023      	str	r3, [r4, #0]
 8007572:	bd38      	pop	{r3, r4, r5, pc}
 8007574:	200002e4 	.word	0x200002e4

08007578 <_init>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr

08007584 <_fini>:
 8007584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007586:	bf00      	nop
 8007588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800758a:	bc08      	pop	{r3}
 800758c:	469e      	mov	lr, r3
 800758e:	4770      	bx	lr
