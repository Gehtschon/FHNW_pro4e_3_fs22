
LoRa-Module_RFM95.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000783c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000049c  080079dc  080079dc  000179dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e78  08007e78  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e80  08007e80  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e80  08007e80  00017e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e84  08007e84  00017e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  08007e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000170  08007ff8  00020170  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08007ff8  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138ae  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000296a  00000000  00000000  00033a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000363b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  000374e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023bbc  00000000  00000000  00038518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000140cc  00000000  00000000  0005c0d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d71c7  00000000  00000000  000701a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e8  00000000  00000000  001473b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079c4 	.word	0x080079c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	080079c4 	.word	0x080079c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_ldivmod>:
 8000280:	b97b      	cbnz	r3, 80002a2 <__aeabi_ldivmod+0x22>
 8000282:	b972      	cbnz	r2, 80002a2 <__aeabi_ldivmod+0x22>
 8000284:	2900      	cmp	r1, #0
 8000286:	bfbe      	ittt	lt
 8000288:	2000      	movlt	r0, #0
 800028a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800028e:	e006      	blt.n	800029e <__aeabi_ldivmod+0x1e>
 8000290:	bf08      	it	eq
 8000292:	2800      	cmpeq	r0, #0
 8000294:	bf1c      	itt	ne
 8000296:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800029a:	f04f 30ff 	movne.w	r0, #4294967295
 800029e:	f000 b9bf 	b.w	8000620 <__aeabi_idiv0>
 80002a2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002aa:	2900      	cmp	r1, #0
 80002ac:	db09      	blt.n	80002c2 <__aeabi_ldivmod+0x42>
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	db1a      	blt.n	80002e8 <__aeabi_ldivmod+0x68>
 80002b2:	f000 f84d 	bl	8000350 <__udivmoddi4>
 80002b6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002be:	b004      	add	sp, #16
 80002c0:	4770      	bx	lr
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	db1b      	blt.n	8000304 <__aeabi_ldivmod+0x84>
 80002cc:	f000 f840 	bl	8000350 <__udivmoddi4>
 80002d0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d8:	b004      	add	sp, #16
 80002da:	4240      	negs	r0, r0
 80002dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e0:	4252      	negs	r2, r2
 80002e2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e6:	4770      	bx	lr
 80002e8:	4252      	negs	r2, r2
 80002ea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002ee:	f000 f82f 	bl	8000350 <__udivmoddi4>
 80002f2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fa:	b004      	add	sp, #16
 80002fc:	4240      	negs	r0, r0
 80002fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000302:	4770      	bx	lr
 8000304:	4252      	negs	r2, r2
 8000306:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030a:	f000 f821 	bl	8000350 <__udivmoddi4>
 800030e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000316:	b004      	add	sp, #16
 8000318:	4252      	negs	r2, r2
 800031a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b974 	b.w	8000620 <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	4604      	mov	r4, r0
 8000358:	468e      	mov	lr, r1
 800035a:	2b00      	cmp	r3, #0
 800035c:	d14d      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035e:	428a      	cmp	r2, r1
 8000360:	4694      	mov	ip, r2
 8000362:	d969      	bls.n	8000438 <__udivmoddi4+0xe8>
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	b152      	cbz	r2, 8000380 <__udivmoddi4+0x30>
 800036a:	fa01 f302 	lsl.w	r3, r1, r2
 800036e:	f1c2 0120 	rsb	r1, r2, #32
 8000372:	fa20 f101 	lsr.w	r1, r0, r1
 8000376:	fa0c fc02 	lsl.w	ip, ip, r2
 800037a:	ea41 0e03 	orr.w	lr, r1, r3
 800037e:	4094      	lsls	r4, r2
 8000380:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000384:	0c21      	lsrs	r1, r4, #16
 8000386:	fbbe f6f8 	udiv	r6, lr, r8
 800038a:	fa1f f78c 	uxth.w	r7, ip
 800038e:	fb08 e316 	mls	r3, r8, r6, lr
 8000392:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000396:	fb06 f107 	mul.w	r1, r6, r7
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80003a6:	f080 811f 	bcs.w	80005e8 <__udivmoddi4+0x298>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 811c 	bls.w	80005e8 <__udivmoddi4+0x298>
 80003b0:	3e02      	subs	r6, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a5b      	subs	r3, r3, r1
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003c4:	fb00 f707 	mul.w	r7, r0, r7
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	d90a      	bls.n	80003e2 <__udivmoddi4+0x92>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	f080 810a 	bcs.w	80005ec <__udivmoddi4+0x29c>
 80003d8:	42a7      	cmp	r7, r4
 80003da:	f240 8107 	bls.w	80005ec <__udivmoddi4+0x29c>
 80003de:	4464      	add	r4, ip
 80003e0:	3802      	subs	r0, #2
 80003e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003e6:	1be4      	subs	r4, r4, r7
 80003e8:	2600      	movs	r6, #0
 80003ea:	b11d      	cbz	r5, 80003f4 <__udivmoddi4+0xa4>
 80003ec:	40d4      	lsrs	r4, r2
 80003ee:	2300      	movs	r3, #0
 80003f0:	e9c5 4300 	strd	r4, r3, [r5]
 80003f4:	4631      	mov	r1, r6
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0xc2>
 80003fe:	2d00      	cmp	r5, #0
 8000400:	f000 80ef 	beq.w	80005e2 <__udivmoddi4+0x292>
 8000404:	2600      	movs	r6, #0
 8000406:	e9c5 0100 	strd	r0, r1, [r5]
 800040a:	4630      	mov	r0, r6
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	fab3 f683 	clz	r6, r3
 8000416:	2e00      	cmp	r6, #0
 8000418:	d14a      	bne.n	80004b0 <__udivmoddi4+0x160>
 800041a:	428b      	cmp	r3, r1
 800041c:	d302      	bcc.n	8000424 <__udivmoddi4+0xd4>
 800041e:	4282      	cmp	r2, r0
 8000420:	f200 80f9 	bhi.w	8000616 <__udivmoddi4+0x2c6>
 8000424:	1a84      	subs	r4, r0, r2
 8000426:	eb61 0303 	sbc.w	r3, r1, r3
 800042a:	2001      	movs	r0, #1
 800042c:	469e      	mov	lr, r3
 800042e:	2d00      	cmp	r5, #0
 8000430:	d0e0      	beq.n	80003f4 <__udivmoddi4+0xa4>
 8000432:	e9c5 4e00 	strd	r4, lr, [r5]
 8000436:	e7dd      	b.n	80003f4 <__udivmoddi4+0xa4>
 8000438:	b902      	cbnz	r2, 800043c <__udivmoddi4+0xec>
 800043a:	deff      	udf	#255	; 0xff
 800043c:	fab2 f282 	clz	r2, r2
 8000440:	2a00      	cmp	r2, #0
 8000442:	f040 8092 	bne.w	800056a <__udivmoddi4+0x21a>
 8000446:	eba1 010c 	sub.w	r1, r1, ip
 800044a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044e:	fa1f fe8c 	uxth.w	lr, ip
 8000452:	2601      	movs	r6, #1
 8000454:	0c20      	lsrs	r0, r4, #16
 8000456:	fbb1 f3f7 	udiv	r3, r1, r7
 800045a:	fb07 1113 	mls	r1, r7, r3, r1
 800045e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000462:	fb0e f003 	mul.w	r0, lr, r3
 8000466:	4288      	cmp	r0, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x12c>
 800046a:	eb1c 0101 	adds.w	r1, ip, r1
 800046e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000472:	d202      	bcs.n	800047a <__udivmoddi4+0x12a>
 8000474:	4288      	cmp	r0, r1
 8000476:	f200 80cb 	bhi.w	8000610 <__udivmoddi4+0x2c0>
 800047a:	4643      	mov	r3, r8
 800047c:	1a09      	subs	r1, r1, r0
 800047e:	b2a4      	uxth	r4, r4
 8000480:	fbb1 f0f7 	udiv	r0, r1, r7
 8000484:	fb07 1110 	mls	r1, r7, r0, r1
 8000488:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800048c:	fb0e fe00 	mul.w	lr, lr, r0
 8000490:	45a6      	cmp	lr, r4
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x156>
 8000494:	eb1c 0404 	adds.w	r4, ip, r4
 8000498:	f100 31ff 	add.w	r1, r0, #4294967295
 800049c:	d202      	bcs.n	80004a4 <__udivmoddi4+0x154>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f200 80bb 	bhi.w	800061a <__udivmoddi4+0x2ca>
 80004a4:	4608      	mov	r0, r1
 80004a6:	eba4 040e 	sub.w	r4, r4, lr
 80004aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80004ae:	e79c      	b.n	80003ea <__udivmoddi4+0x9a>
 80004b0:	f1c6 0720 	rsb	r7, r6, #32
 80004b4:	40b3      	lsls	r3, r6
 80004b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80004be:	fa20 f407 	lsr.w	r4, r0, r7
 80004c2:	fa01 f306 	lsl.w	r3, r1, r6
 80004c6:	431c      	orrs	r4, r3
 80004c8:	40f9      	lsrs	r1, r7
 80004ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004ce:	fa00 f306 	lsl.w	r3, r0, r6
 80004d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004d6:	0c20      	lsrs	r0, r4, #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fb09 1118 	mls	r1, r9, r8, r1
 80004e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e4:	fb08 f00e 	mul.w	r0, r8, lr
 80004e8:	4288      	cmp	r0, r1
 80004ea:	fa02 f206 	lsl.w	r2, r2, r6
 80004ee:	d90b      	bls.n	8000508 <__udivmoddi4+0x1b8>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004f8:	f080 8088 	bcs.w	800060c <__udivmoddi4+0x2bc>
 80004fc:	4288      	cmp	r0, r1
 80004fe:	f240 8085 	bls.w	800060c <__udivmoddi4+0x2bc>
 8000502:	f1a8 0802 	sub.w	r8, r8, #2
 8000506:	4461      	add	r1, ip
 8000508:	1a09      	subs	r1, r1, r0
 800050a:	b2a4      	uxth	r4, r4
 800050c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000510:	fb09 1110 	mls	r1, r9, r0, r1
 8000514:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000518:	fb00 fe0e 	mul.w	lr, r0, lr
 800051c:	458e      	cmp	lr, r1
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x1e2>
 8000520:	eb1c 0101 	adds.w	r1, ip, r1
 8000524:	f100 34ff 	add.w	r4, r0, #4294967295
 8000528:	d26c      	bcs.n	8000604 <__udivmoddi4+0x2b4>
 800052a:	458e      	cmp	lr, r1
 800052c:	d96a      	bls.n	8000604 <__udivmoddi4+0x2b4>
 800052e:	3802      	subs	r0, #2
 8000530:	4461      	add	r1, ip
 8000532:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000536:	fba0 9402 	umull	r9, r4, r0, r2
 800053a:	eba1 010e 	sub.w	r1, r1, lr
 800053e:	42a1      	cmp	r1, r4
 8000540:	46c8      	mov	r8, r9
 8000542:	46a6      	mov	lr, r4
 8000544:	d356      	bcc.n	80005f4 <__udivmoddi4+0x2a4>
 8000546:	d053      	beq.n	80005f0 <__udivmoddi4+0x2a0>
 8000548:	b15d      	cbz	r5, 8000562 <__udivmoddi4+0x212>
 800054a:	ebb3 0208 	subs.w	r2, r3, r8
 800054e:	eb61 010e 	sbc.w	r1, r1, lr
 8000552:	fa01 f707 	lsl.w	r7, r1, r7
 8000556:	fa22 f306 	lsr.w	r3, r2, r6
 800055a:	40f1      	lsrs	r1, r6
 800055c:	431f      	orrs	r7, r3
 800055e:	e9c5 7100 	strd	r7, r1, [r5]
 8000562:	2600      	movs	r6, #0
 8000564:	4631      	mov	r1, r6
 8000566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800056a:	f1c2 0320 	rsb	r3, r2, #32
 800056e:	40d8      	lsrs	r0, r3
 8000570:	fa0c fc02 	lsl.w	ip, ip, r2
 8000574:	fa21 f303 	lsr.w	r3, r1, r3
 8000578:	4091      	lsls	r1, r2
 800057a:	4301      	orrs	r1, r0
 800057c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000580:	fa1f fe8c 	uxth.w	lr, ip
 8000584:	fbb3 f0f7 	udiv	r0, r3, r7
 8000588:	fb07 3610 	mls	r6, r7, r0, r3
 800058c:	0c0b      	lsrs	r3, r1, #16
 800058e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000592:	fb00 f60e 	mul.w	r6, r0, lr
 8000596:	429e      	cmp	r6, r3
 8000598:	fa04 f402 	lsl.w	r4, r4, r2
 800059c:	d908      	bls.n	80005b0 <__udivmoddi4+0x260>
 800059e:	eb1c 0303 	adds.w	r3, ip, r3
 80005a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80005a6:	d22f      	bcs.n	8000608 <__udivmoddi4+0x2b8>
 80005a8:	429e      	cmp	r6, r3
 80005aa:	d92d      	bls.n	8000608 <__udivmoddi4+0x2b8>
 80005ac:	3802      	subs	r0, #2
 80005ae:	4463      	add	r3, ip
 80005b0:	1b9b      	subs	r3, r3, r6
 80005b2:	b289      	uxth	r1, r1
 80005b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005b8:	fb07 3316 	mls	r3, r7, r6, r3
 80005bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005c0:	fb06 f30e 	mul.w	r3, r6, lr
 80005c4:	428b      	cmp	r3, r1
 80005c6:	d908      	bls.n	80005da <__udivmoddi4+0x28a>
 80005c8:	eb1c 0101 	adds.w	r1, ip, r1
 80005cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005d0:	d216      	bcs.n	8000600 <__udivmoddi4+0x2b0>
 80005d2:	428b      	cmp	r3, r1
 80005d4:	d914      	bls.n	8000600 <__udivmoddi4+0x2b0>
 80005d6:	3e02      	subs	r6, #2
 80005d8:	4461      	add	r1, ip
 80005da:	1ac9      	subs	r1, r1, r3
 80005dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005e0:	e738      	b.n	8000454 <__udivmoddi4+0x104>
 80005e2:	462e      	mov	r6, r5
 80005e4:	4628      	mov	r0, r5
 80005e6:	e705      	b.n	80003f4 <__udivmoddi4+0xa4>
 80005e8:	4606      	mov	r6, r0
 80005ea:	e6e3      	b.n	80003b4 <__udivmoddi4+0x64>
 80005ec:	4618      	mov	r0, r3
 80005ee:	e6f8      	b.n	80003e2 <__udivmoddi4+0x92>
 80005f0:	454b      	cmp	r3, r9
 80005f2:	d2a9      	bcs.n	8000548 <__udivmoddi4+0x1f8>
 80005f4:	ebb9 0802 	subs.w	r8, r9, r2
 80005f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005fc:	3801      	subs	r0, #1
 80005fe:	e7a3      	b.n	8000548 <__udivmoddi4+0x1f8>
 8000600:	4646      	mov	r6, r8
 8000602:	e7ea      	b.n	80005da <__udivmoddi4+0x28a>
 8000604:	4620      	mov	r0, r4
 8000606:	e794      	b.n	8000532 <__udivmoddi4+0x1e2>
 8000608:	4640      	mov	r0, r8
 800060a:	e7d1      	b.n	80005b0 <__udivmoddi4+0x260>
 800060c:	46d0      	mov	r8, sl
 800060e:	e77b      	b.n	8000508 <__udivmoddi4+0x1b8>
 8000610:	3b02      	subs	r3, #2
 8000612:	4461      	add	r1, ip
 8000614:	e732      	b.n	800047c <__udivmoddi4+0x12c>
 8000616:	4630      	mov	r0, r6
 8000618:	e709      	b.n	800042e <__udivmoddi4+0xde>
 800061a:	4464      	add	r4, ip
 800061c:	3802      	subs	r0, #2
 800061e:	e742      	b.n	80004a6 <__udivmoddi4+0x156>

08000620 <__aeabi_idiv0>:
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop

08000624 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b088      	sub	sp, #32
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800062e:	2300      	movs	r3, #0
 8000630:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000632:	2300      	movs	r3, #0
 8000634:	777b      	strb	r3, [r7, #29]
 8000636:	e01b      	b.n	8000670 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000638:	2300      	movs	r3, #0
 800063a:	77bb      	strb	r3, [r7, #30]
 800063c:	e012      	b.n	8000664 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800063e:	7fba      	ldrb	r2, [r7, #30]
 8000640:	7f7b      	ldrb	r3, [r7, #29]
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	1899      	adds	r1, r3, r2
 800064c:	7fba      	ldrb	r2, [r7, #30]
 800064e:	7f7b      	ldrb	r3, [r7, #29]
 8000650:	7808      	ldrb	r0, [r1, #0]
 8000652:	4961      	ldr	r1, [pc, #388]	; (80007d8 <AES_Encrypt+0x1b4>)
 8000654:	0092      	lsls	r2, r2, #2
 8000656:	440a      	add	r2, r1
 8000658:	4413      	add	r3, r2
 800065a:	4602      	mov	r2, r0
 800065c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800065e:	7fbb      	ldrb	r3, [r7, #30]
 8000660:	3301      	adds	r3, #1
 8000662:	77bb      	strb	r3, [r7, #30]
 8000664:	7fbb      	ldrb	r3, [r7, #30]
 8000666:	2b03      	cmp	r3, #3
 8000668:	d9e9      	bls.n	800063e <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 800066a:	7f7b      	ldrb	r3, [r7, #29]
 800066c:	3301      	adds	r3, #1
 800066e:	777b      	strb	r3, [r7, #29]
 8000670:	7f7b      	ldrb	r3, [r7, #29]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d9e0      	bls.n	8000638 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	77fb      	strb	r3, [r7, #31]
 800067a:	e00b      	b.n	8000694 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 800067c:	7ffb      	ldrb	r3, [r7, #31]
 800067e:	683a      	ldr	r2, [r7, #0]
 8000680:	441a      	add	r2, r3
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	7812      	ldrb	r2, [r2, #0]
 8000686:	3320      	adds	r3, #32
 8000688:	443b      	add	r3, r7
 800068a:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	3301      	adds	r3, #1
 8000692:	77fb      	strb	r3, [r7, #31]
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	2b0f      	cmp	r3, #15
 8000698:	d9f0      	bls.n	800067c <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 800069a:	f107 030c 	add.w	r3, r7, #12
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 f89c 	bl	80007dc <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 80006a4:	2301      	movs	r3, #1
 80006a6:	773b      	strb	r3, [r7, #28]
 80006a8:	e038      	b.n	800071c <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	777b      	strb	r3, [r7, #29]
 80006ae:	e01f      	b.n	80006f0 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 80006b0:	2300      	movs	r3, #0
 80006b2:	77bb      	strb	r3, [r7, #30]
 80006b4:	e016      	b.n	80006e4 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 80006b6:	7fba      	ldrb	r2, [r7, #30]
 80006b8:	7f7b      	ldrb	r3, [r7, #29]
 80006ba:	4947      	ldr	r1, [pc, #284]	; (80007d8 <AES_Encrypt+0x1b4>)
 80006bc:	0092      	lsls	r2, r2, #2
 80006be:	440a      	add	r2, r1
 80006c0:	4413      	add	r3, r2
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	7fbd      	ldrb	r5, [r7, #30]
 80006c6:	7f7c      	ldrb	r4, [r7, #29]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f8bf 	bl	800084c <AES_Sub_Byte>
 80006ce:	4603      	mov	r3, r0
 80006d0:	4619      	mov	r1, r3
 80006d2:	4a41      	ldr	r2, [pc, #260]	; (80007d8 <AES_Encrypt+0x1b4>)
 80006d4:	00ab      	lsls	r3, r5, #2
 80006d6:	4413      	add	r3, r2
 80006d8:	4423      	add	r3, r4
 80006da:	460a      	mov	r2, r1
 80006dc:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 80006de:	7fbb      	ldrb	r3, [r7, #30]
 80006e0:	3301      	adds	r3, #1
 80006e2:	77bb      	strb	r3, [r7, #30]
 80006e4:	7fbb      	ldrb	r3, [r7, #30]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d9e5      	bls.n	80006b6 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 80006ea:	7f7b      	ldrb	r3, [r7, #29]
 80006ec:	3301      	adds	r3, #1
 80006ee:	777b      	strb	r3, [r7, #29]
 80006f0:	7f7b      	ldrb	r3, [r7, #29]
 80006f2:	2b03      	cmp	r3, #3
 80006f4:	d9dc      	bls.n	80006b0 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 80006f6:	f000 f8c7 	bl	8000888 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 80006fa:	f000 f909 	bl	8000910 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 80006fe:	f107 020c 	add.w	r2, r7, #12
 8000702:	7f3b      	ldrb	r3, [r7, #28]
 8000704:	4611      	mov	r1, r2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 f998 	bl	8000a3c <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	4618      	mov	r0, r3
 8000712:	f000 f863 	bl	80007dc <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000716:	7f3b      	ldrb	r3, [r7, #28]
 8000718:	3301      	adds	r3, #1
 800071a:	773b      	strb	r3, [r7, #28]
 800071c:	7f3b      	ldrb	r3, [r7, #28]
 800071e:	2b09      	cmp	r3, #9
 8000720:	d9c3      	bls.n	80006aa <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000722:	2300      	movs	r3, #0
 8000724:	777b      	strb	r3, [r7, #29]
 8000726:	e01f      	b.n	8000768 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000728:	2300      	movs	r3, #0
 800072a:	77bb      	strb	r3, [r7, #30]
 800072c:	e016      	b.n	800075c <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800072e:	7fba      	ldrb	r2, [r7, #30]
 8000730:	7f7b      	ldrb	r3, [r7, #29]
 8000732:	4929      	ldr	r1, [pc, #164]	; (80007d8 <AES_Encrypt+0x1b4>)
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	440a      	add	r2, r1
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	7fbd      	ldrb	r5, [r7, #30]
 800073e:	7f7c      	ldrb	r4, [r7, #29]
 8000740:	4618      	mov	r0, r3
 8000742:	f000 f883 	bl	800084c <AES_Sub_Byte>
 8000746:	4603      	mov	r3, r0
 8000748:	4619      	mov	r1, r3
 800074a:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <AES_Encrypt+0x1b4>)
 800074c:	00ab      	lsls	r3, r5, #2
 800074e:	4413      	add	r3, r2
 8000750:	4423      	add	r3, r4
 8000752:	460a      	mov	r2, r1
 8000754:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000756:	7fbb      	ldrb	r3, [r7, #30]
 8000758:	3301      	adds	r3, #1
 800075a:	77bb      	strb	r3, [r7, #30]
 800075c:	7fbb      	ldrb	r3, [r7, #30]
 800075e:	2b03      	cmp	r3, #3
 8000760:	d9e5      	bls.n	800072e <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8000762:	7f7b      	ldrb	r3, [r7, #29]
 8000764:	3301      	adds	r3, #1
 8000766:	777b      	strb	r3, [r7, #29]
 8000768:	7f7b      	ldrb	r3, [r7, #29]
 800076a:	2b03      	cmp	r3, #3
 800076c:	d9dc      	bls.n	8000728 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 800076e:	f000 f88b 	bl	8000888 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000772:	f107 020c 	add.w	r2, r7, #12
 8000776:	7f3b      	ldrb	r3, [r7, #28]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 f95e 	bl	8000a3c <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f829 	bl	80007dc <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 800078a:	2300      	movs	r3, #0
 800078c:	777b      	strb	r3, [r7, #29]
 800078e:	e01a      	b.n	80007c6 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 8000790:	2300      	movs	r3, #0
 8000792:	77bb      	strb	r3, [r7, #30]
 8000794:	e011      	b.n	80007ba <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 8000796:	7fb9      	ldrb	r1, [r7, #30]
 8000798:	7f7a      	ldrb	r2, [r7, #29]
 800079a:	7fb8      	ldrb	r0, [r7, #30]
 800079c:	7f7b      	ldrb	r3, [r7, #29]
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	4403      	add	r3, r0
 80007a2:	4618      	mov	r0, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4403      	add	r3, r0
 80007a8:	480b      	ldr	r0, [pc, #44]	; (80007d8 <AES_Encrypt+0x1b4>)
 80007aa:	0089      	lsls	r1, r1, #2
 80007ac:	4401      	add	r1, r0
 80007ae:	440a      	add	r2, r1
 80007b0:	7812      	ldrb	r2, [r2, #0]
 80007b2:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80007b4:	7fbb      	ldrb	r3, [r7, #30]
 80007b6:	3301      	adds	r3, #1
 80007b8:	77bb      	strb	r3, [r7, #30]
 80007ba:	7fbb      	ldrb	r3, [r7, #30]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	d9ea      	bls.n	8000796 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 80007c0:	7f7b      	ldrb	r3, [r7, #29]
 80007c2:	3301      	adds	r3, #1
 80007c4:	777b      	strb	r3, [r7, #29]
 80007c6:	7f7b      	ldrb	r3, [r7, #29]
 80007c8:	2b03      	cmp	r3, #3
 80007ca:	d9e1      	bls.n	8000790 <AES_Encrypt+0x16c>
		}
	}

}
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	3720      	adds	r7, #32
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bdb0      	pop	{r4, r5, r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000018c 	.word	0x2000018c

080007dc <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 80007e4:	2300      	movs	r3, #0
 80007e6:	73bb      	strb	r3, [r7, #14]
 80007e8:	e024      	b.n	8000834 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	e01b      	b.n	8000828 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 80007f0:	7bfa      	ldrb	r2, [r7, #15]
 80007f2:	7bbb      	ldrb	r3, [r7, #14]
 80007f4:	4914      	ldr	r1, [pc, #80]	; (8000848 <AES_Add_Round_Key+0x6c>)
 80007f6:	0092      	lsls	r2, r2, #2
 80007f8:	440a      	add	r2, r1
 80007fa:	4413      	add	r3, r2
 80007fc:	7818      	ldrb	r0, [r3, #0]
 80007fe:	7bfa      	ldrb	r2, [r7, #15]
 8000800:	7bbb      	ldrb	r3, [r7, #14]
 8000802:	009b      	lsls	r3, r3, #2
 8000804:	4413      	add	r3, r2
 8000806:	461a      	mov	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4413      	add	r3, r2
 800080c:	7819      	ldrb	r1, [r3, #0]
 800080e:	7bfa      	ldrb	r2, [r7, #15]
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	4041      	eors	r1, r0
 8000814:	b2c8      	uxtb	r0, r1
 8000816:	490c      	ldr	r1, [pc, #48]	; (8000848 <AES_Add_Round_Key+0x6c>)
 8000818:	0092      	lsls	r2, r2, #2
 800081a:	440a      	add	r2, r1
 800081c:	4413      	add	r3, r2
 800081e:	4602      	mov	r2, r0
 8000820:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	3301      	adds	r3, #1
 8000826:	73fb      	strb	r3, [r7, #15]
 8000828:	7bfb      	ldrb	r3, [r7, #15]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d9e0      	bls.n	80007f0 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800082e:	7bbb      	ldrb	r3, [r7, #14]
 8000830:	3301      	adds	r3, #1
 8000832:	73bb      	strb	r3, [r7, #14]
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d9d7      	bls.n	80007ea <AES_Add_Round_Key+0xe>
		}
	}
}
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	2000018c 	.word	0x2000018c

0800084c <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	091b      	lsrs	r3, r3, #4
 800085a:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	f003 030f 	and.w	r3, r3, #15
 8000862:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8000864:	7bfa      	ldrb	r2, [r7, #15]
 8000866:	7bbb      	ldrb	r3, [r7, #14]
 8000868:	4906      	ldr	r1, [pc, #24]	; (8000884 <AES_Sub_Byte+0x38>)
 800086a:	0112      	lsls	r2, r2, #4
 800086c:	440a      	add	r2, r1
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 8000874:	7b7b      	ldrb	r3, [r7, #13]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3714      	adds	r7, #20
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	20000000 	.word	0x20000000

08000888 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <AES_Shift_Rows+0x84>)
 8000890:	791b      	ldrb	r3, [r3, #4]
 8000892:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <AES_Shift_Rows+0x84>)
 8000896:	795a      	ldrb	r2, [r3, #5]
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <AES_Shift_Rows+0x84>)
 800089a:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <AES_Shift_Rows+0x84>)
 800089e:	799a      	ldrb	r2, [r3, #6]
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <AES_Shift_Rows+0x84>)
 80008a2:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80008a4:	4b19      	ldr	r3, [pc, #100]	; (800090c <AES_Shift_Rows+0x84>)
 80008a6:	79da      	ldrb	r2, [r3, #7]
 80008a8:	4b18      	ldr	r3, [pc, #96]	; (800090c <AES_Shift_Rows+0x84>)
 80008aa:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80008ac:	4a17      	ldr	r2, [pc, #92]	; (800090c <AES_Shift_Rows+0x84>)
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <AES_Shift_Rows+0x84>)
 80008b4:	7a1b      	ldrb	r3, [r3, #8]
 80008b6:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <AES_Shift_Rows+0x84>)
 80008ba:	7a9a      	ldrb	r2, [r3, #10]
 80008bc:	4b13      	ldr	r3, [pc, #76]	; (800090c <AES_Shift_Rows+0x84>)
 80008be:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <AES_Shift_Rows+0x84>)
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <AES_Shift_Rows+0x84>)
 80008c8:	7a5b      	ldrb	r3, [r3, #9]
 80008ca:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 80008cc:	4b0f      	ldr	r3, [pc, #60]	; (800090c <AES_Shift_Rows+0x84>)
 80008ce:	7ada      	ldrb	r2, [r3, #11]
 80008d0:	4b0e      	ldr	r3, [pc, #56]	; (800090c <AES_Shift_Rows+0x84>)
 80008d2:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 80008d4:	4a0d      	ldr	r2, [pc, #52]	; (800090c <AES_Shift_Rows+0x84>)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <AES_Shift_Rows+0x84>)
 80008dc:	7bdb      	ldrb	r3, [r3, #15]
 80008de:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 80008e0:	4b0a      	ldr	r3, [pc, #40]	; (800090c <AES_Shift_Rows+0x84>)
 80008e2:	7b9a      	ldrb	r2, [r3, #14]
 80008e4:	4b09      	ldr	r3, [pc, #36]	; (800090c <AES_Shift_Rows+0x84>)
 80008e6:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <AES_Shift_Rows+0x84>)
 80008ea:	7b5a      	ldrb	r2, [r3, #13]
 80008ec:	4b07      	ldr	r3, [pc, #28]	; (800090c <AES_Shift_Rows+0x84>)
 80008ee:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <AES_Shift_Rows+0x84>)
 80008f2:	7b1a      	ldrb	r2, [r3, #12]
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <AES_Shift_Rows+0x84>)
 80008f6:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <AES_Shift_Rows+0x84>)
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	7313      	strb	r3, [r2, #12]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	2000018c 	.word	0x2000018c

08000910 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000916:	2300      	movs	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]
 800091a:	e082      	b.n	8000a22 <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 800091c:	2300      	movs	r3, #0
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e033      	b.n	800098a <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8000922:	7bf9      	ldrb	r1, [r7, #15]
 8000924:	7bba      	ldrb	r2, [r7, #14]
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <AES_Mix_Collums+0x128>)
 800092a:	0089      	lsls	r1, r1, #2
 800092c:	4401      	add	r1, r0
 800092e:	440a      	add	r2, r1
 8000930:	7812      	ldrb	r2, [r2, #0]
 8000932:	3310      	adds	r3, #16
 8000934:	443b      	add	r3, r7
 8000936:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	493e      	ldr	r1, [pc, #248]	; (8000a38 <AES_Mix_Collums+0x128>)
 8000940:	0092      	lsls	r2, r2, #2
 8000942:	440a      	add	r2, r1
 8000944:	4413      	add	r3, r2
 8000946:	781a      	ldrb	r2, [r3, #0]
 8000948:	7bfb      	ldrb	r3, [r7, #15]
 800094a:	0052      	lsls	r2, r2, #1
 800094c:	b2d2      	uxtb	r2, r2
 800094e:	3310      	adds	r3, #16
 8000950:	443b      	add	r3, r7
 8000952:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 8000956:	7bfa      	ldrb	r2, [r7, #15]
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	4937      	ldr	r1, [pc, #220]	; (8000a38 <AES_Mix_Collums+0x128>)
 800095c:	0092      	lsls	r2, r2, #2
 800095e:	440a      	add	r2, r1
 8000960:	4413      	add	r3, r2
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	b25b      	sxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	da0c      	bge.n	8000984 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3310      	adds	r3, #16
 800096e:	443b      	add	r3, r7
 8000970:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	f082 021b 	eor.w	r2, r2, #27
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	3310      	adds	r3, #16
 800097e:	443b      	add	r3, r7
 8000980:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	3301      	adds	r3, #1
 8000988:	73fb      	strb	r3, [r7, #15]
 800098a:	7bfb      	ldrb	r3, [r7, #15]
 800098c:	2b03      	cmp	r3, #3
 800098e:	d9c8      	bls.n	8000922 <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 8000990:	793a      	ldrb	r2, [r7, #4]
 8000992:	7a7b      	ldrb	r3, [r7, #9]
 8000994:	4053      	eors	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	797b      	ldrb	r3, [r7, #5]
 800099a:	4053      	eors	r3, r2
 800099c:	b2da      	uxtb	r2, r3
 800099e:	7abb      	ldrb	r3, [r7, #10]
 80009a0:	4053      	eors	r3, r2
 80009a2:	b2d9      	uxtb	r1, r3
 80009a4:	7afa      	ldrb	r2, [r7, #11]
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	404a      	eors	r2, r1
 80009aa:	b2d1      	uxtb	r1, r2
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <AES_Mix_Collums+0x128>)
 80009ae:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 80009b0:	7a3a      	ldrb	r2, [r7, #8]
 80009b2:	797b      	ldrb	r3, [r7, #5]
 80009b4:	4053      	eors	r3, r2
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	7abb      	ldrb	r3, [r7, #10]
 80009ba:	4053      	eors	r3, r2
 80009bc:	b2da      	uxtb	r2, r3
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	4053      	eors	r3, r2
 80009c2:	b2d9      	uxtb	r1, r3
 80009c4:	7afa      	ldrb	r2, [r7, #11]
 80009c6:	7bbb      	ldrb	r3, [r7, #14]
 80009c8:	404a      	eors	r2, r1
 80009ca:	b2d1      	uxtb	r1, r2
 80009cc:	4a1a      	ldr	r2, [pc, #104]	; (8000a38 <AES_Mix_Collums+0x128>)
 80009ce:	4413      	add	r3, r2
 80009d0:	460a      	mov	r2, r1
 80009d2:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 80009d4:	7a3a      	ldrb	r2, [r7, #8]
 80009d6:	7a7b      	ldrb	r3, [r7, #9]
 80009d8:	4053      	eors	r3, r2
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	79bb      	ldrb	r3, [r7, #6]
 80009de:	4053      	eors	r3, r2
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	7afb      	ldrb	r3, [r7, #11]
 80009e4:	4053      	eors	r3, r2
 80009e6:	b2d9      	uxtb	r1, r3
 80009e8:	79fa      	ldrb	r2, [r7, #7]
 80009ea:	7bbb      	ldrb	r3, [r7, #14]
 80009ec:	404a      	eors	r2, r1
 80009ee:	b2d1      	uxtb	r1, r2
 80009f0:	4a11      	ldr	r2, [pc, #68]	; (8000a38 <AES_Mix_Collums+0x128>)
 80009f2:	4413      	add	r3, r2
 80009f4:	460a      	mov	r2, r1
 80009f6:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 80009f8:	7a3a      	ldrb	r2, [r7, #8]
 80009fa:	793b      	ldrb	r3, [r7, #4]
 80009fc:	4053      	eors	r3, r2
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	7a7b      	ldrb	r3, [r7, #9]
 8000a02:	4053      	eors	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	7abb      	ldrb	r3, [r7, #10]
 8000a08:	4053      	eors	r3, r2
 8000a0a:	b2d9      	uxtb	r1, r3
 8000a0c:	79fa      	ldrb	r2, [r7, #7]
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	404a      	eors	r2, r1
 8000a12:	b2d1      	uxtb	r1, r2
 8000a14:	4a08      	ldr	r2, [pc, #32]	; (8000a38 <AES_Mix_Collums+0x128>)
 8000a16:	4413      	add	r3, r2
 8000a18:	460a      	mov	r2, r1
 8000a1a:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	73bb      	strb	r3, [r7, #14]
 8000a22:	7bbb      	ldrb	r3, [r7, #14]
 8000a24:	2b03      	cmp	r3, #3
 8000a26:	f67f af79 	bls.w	800091c <AES_Mix_Collums+0xc>
	}
}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	2000018c 	.word	0x2000018c

08000a3c <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b087      	sub	sp, #28
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	6039      	str	r1, [r7, #0]
 8000a46:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000a48:	2300      	movs	r3, #0
 8000a4a:	75fb      	strb	r3, [r7, #23]
 8000a4c:	e00c      	b.n	8000a68 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 8000a4e:	7dfb      	ldrb	r3, [r7, #23]
 8000a50:	330c      	adds	r3, #12
 8000a52:	683a      	ldr	r2, [r7, #0]
 8000a54:	441a      	add	r2, r3
 8000a56:	7dfb      	ldrb	r3, [r7, #23]
 8000a58:	7812      	ldrb	r2, [r2, #0]
 8000a5a:	3318      	adds	r3, #24
 8000a5c:	443b      	add	r3, r7
 8000a5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	3301      	adds	r3, #1
 8000a66:	75fb      	strb	r3, [r7, #23]
 8000a68:	7dfb      	ldrb	r3, [r7, #23]
 8000a6a:	2b03      	cmp	r3, #3
 8000a6c:	d9ef      	bls.n	8000a4e <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 8000a6e:	7b3b      	ldrb	r3, [r7, #12]
 8000a70:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 8000a72:	7b7b      	ldrb	r3, [r7, #13]
 8000a74:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 8000a7e:	7d3b      	ldrb	r3, [r7, #20]
 8000a80:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 8000a82:	2300      	movs	r3, #0
 8000a84:	75fb      	strb	r3, [r7, #23]
 8000a86:	e012      	b.n	8000aae <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
 8000a8a:	3318      	adds	r3, #24
 8000a8c:	443b      	add	r3, r7
 8000a8e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000a92:	7dfc      	ldrb	r4, [r7, #23]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fed9 	bl	800084c <AES_Sub_Byte>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	f104 0318 	add.w	r3, r4, #24
 8000aa2:	443b      	add	r3, r7
 8000aa4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	75fb      	strb	r3, [r7, #23]
 8000aae:	7dfb      	ldrb	r3, [r7, #23]
 8000ab0:	2b03      	cmp	r3, #3
 8000ab2:	d9e9      	bls.n	8000a88 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000ab8:	e010      	b.n	8000adc <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000aba:	7d7b      	ldrb	r3, [r7, #21]
 8000abc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ac0:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 8000ac2:	7d7b      	ldrb	r3, [r7, #21]
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	2b80      	cmp	r3, #128	; 0x80
 8000acc:	d103      	bne.n	8000ad6 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 8000ace:	7d7b      	ldrb	r3, [r7, #21]
 8000ad0:	f083 031b 	eor.w	r3, r3, #27
 8000ad4:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	3b01      	subs	r3, #1
 8000ada:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d1eb      	bne.n	8000aba <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 8000ae2:	7b3a      	ldrb	r2, [r7, #12]
 8000ae4:	7d7b      	ldrb	r3, [r7, #21]
 8000ae6:	4053      	eors	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	75fb      	strb	r3, [r7, #23]
 8000af0:	e02f      	b.n	8000b52 <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	75bb      	strb	r3, [r7, #22]
 8000af6:	e026      	b.n	8000b46 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000af8:	7dba      	ldrb	r2, [r7, #22]
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	4413      	add	r3, r2
 8000b00:	461a      	mov	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	4413      	add	r3, r2
 8000b06:	7819      	ldrb	r1, [r3, #0]
 8000b08:	7dbb      	ldrb	r3, [r7, #22]
 8000b0a:	3318      	adds	r3, #24
 8000b0c:	443b      	add	r3, r7
 8000b0e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000b12:	7db8      	ldrb	r0, [r7, #22]
 8000b14:	7dfb      	ldrb	r3, [r7, #23]
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	4403      	add	r3, r0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	4403      	add	r3, r0
 8000b20:	404a      	eors	r2, r1
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000b26:	7dba      	ldrb	r2, [r7, #22]
 8000b28:	7dfb      	ldrb	r3, [r7, #23]
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	461a      	mov	r2, r3
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	441a      	add	r2, r3
 8000b34:	7dbb      	ldrb	r3, [r7, #22]
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	3318      	adds	r3, #24
 8000b3a:	443b      	add	r3, r7
 8000b3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 8000b40:	7dbb      	ldrb	r3, [r7, #22]
 8000b42:	3301      	adds	r3, #1
 8000b44:	75bb      	strb	r3, [r7, #22]
 8000b46:	7dbb      	ldrb	r3, [r7, #22]
 8000b48:	2b03      	cmp	r3, #3
 8000b4a:	d9d5      	bls.n	8000af8 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8000b4c:	7dfb      	ldrb	r3, [r7, #23]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	75fb      	strb	r3, [r7, #23]
 8000b52:	7dfb      	ldrb	r3, [r7, #23]
 8000b54:	2b03      	cmp	r3, #3
 8000b56:	d9cc      	bls.n	8000af2 <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	371c      	adds	r7, #28
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd90      	pop	{r4, r7, pc}

08000b62 <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b08a      	sub	sp, #40	; 0x28
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	60f8      	str	r0, [r7, #12]
 8000b6a:	607a      	str	r2, [r7, #4]
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	460b      	mov	r3, r1
 8000b70:	72fb      	strb	r3, [r7, #11]
 8000b72:	4613      	mov	r3, r2
 8000b74:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8000b76:	2300      	movs	r3, #0
 8000b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 8000b82:	2300      	movs	r3, #0
 8000b84:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8000b88:	7afb      	ldrb	r3, [r7, #11]
 8000b8a:	091b      	lsrs	r3, r3, #4
 8000b8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 8000b90:	7afb      	ldrb	r3, [r7, #11]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 8000b9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d004      	beq.n	8000bac <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 8000ba2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8000bac:	2301      	movs	r3, #1
 8000bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000bb2:	e07e      	b.n	8000cb2 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000bc8:	7abb      	ldrb	r3, [r7, #10]
 8000bca:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8000bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bce:	78db      	ldrb	r3, [r3, #3]
 8000bd0:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bd4:	789b      	ldrb	r3, [r3, #2]
 8000bd6:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bda:	785b      	ldrb	r3, [r3, #1]
 8000bdc:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 8000bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 8000c0c:	f107 0314 	add.w	r3, r7, #20
 8000c10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff fd06 	bl	8000624 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000c18:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000c1c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d01c      	beq.n	8000c5e <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c2a:	e013      	b.n	8000c54 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c34:	3328      	adds	r3, #40	; 0x28
 8000c36:	443b      	add	r3, r7
 8000c38:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c3c:	4053      	eors	r3, r2
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	701a      	strb	r2, [r3, #0]
				Data++;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8000c4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c4e:	3301      	adds	r3, #1
 8000c50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c58:	2b0f      	cmp	r3, #15
 8000c5a:	d9e7      	bls.n	8000c2c <Encrypt_Payload+0xca>
 8000c5c:	e024      	b.n	8000ca8 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 8000c5e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 8000c66:	2310      	movs	r3, #16
 8000c68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c72:	e013      	b.n	8000c9c <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	781a      	ldrb	r2, [r3, #0]
 8000c78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c7c:	3328      	adds	r3, #40	; 0x28
 8000c7e:	443b      	add	r3, r7
 8000c80:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000c84:	4053      	eors	r3, r2
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	701a      	strb	r2, [r3, #0]
				Data++;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 8000c92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000c96:	3301      	adds	r3, #1
 8000c98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000c9c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ca0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d3e5      	bcc.n	8000c74 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8000ca8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cac:	3301      	adds	r3, #1
 8000cae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000cb2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000cb6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	f67f af7a 	bls.w	8000bb4 <Encrypt_Payload+0x52>
			}
		}
	}
}
 8000cc0:	bf00      	nop
 8000cc2:	bf00      	nop
 8000cc4:	3728      	adds	r7, #40	; 0x28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
	...

08000ccc <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b09b      	sub	sp, #108	; 0x6c
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000cdc:	4bba      	ldr	r3, [pc, #744]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000cde:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8000ce8:	4bb7      	ldr	r3, [pc, #732]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000cea:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000cee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000cf4:	4bb4      	ldr	r3, [pc, #720]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000cf6:	f107 0424 	add.w	r4, r7, #36	; 0x24
 8000cfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000d00:	4bb1      	ldr	r3, [pc, #708]	; (8000fc8 <Calculate_MIC+0x2fc>)
 8000d02:	f107 0414 	add.w	r4, r7, #20
 8000d06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000d1e:	2349      	movs	r3, #73	; 0x49
 8000d20:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000d30:	2300      	movs	r3, #0
 8000d32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 8000d3c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000d40:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8000d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d48:	78db      	ldrb	r3, [r3, #3]
 8000d4a:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 8000d4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d52:	789b      	ldrb	r3, [r3, #2]
 8000d54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 8000d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d5c:	785b      	ldrb	r3, [r3, #1]
 8000d5e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 8000d62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	0a1b      	lsrs	r3, r3, #8
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 8000d84:	2300      	movs	r3, #0
 8000d86:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	091b      	lsrs	r3, r3, #4
 8000d9a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8000da8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 8000db0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 8000dba:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000dbe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f000 f901 	bl	8000fcc <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 8000dca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff fc27 	bl	8000624 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ddc:	e010      	b.n	8000e00 <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 8000dde:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000de2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000de6:	3268      	adds	r2, #104	; 0x68
 8000de8:	443a      	add	r2, r7
 8000dea:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000dee:	3368      	adds	r3, #104	; 0x68
 8000df0:	443b      	add	r3, r7
 8000df2:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000df6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000dfa:	3301      	adds	r3, #1
 8000dfc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d9ea      	bls.n	8000dde <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000e08:	e043      	b.n	8000e92 <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e10:	e00f      	b.n	8000e32 <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 8000e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	7812      	ldrb	r2, [r2, #0]
 8000e1a:	3368      	adds	r3, #104	; 0x68
 8000e1c:	443b      	add	r3, r7
 8000e1e:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000e28:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d9eb      	bls.n	8000e12 <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000e3a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f94a 	bl	80010de <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fbe7 	bl	8000624 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000e56:	2300      	movs	r3, #0
 8000e58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e5c:	e010      	b.n	8000e80 <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 8000e5e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e66:	3268      	adds	r2, #104	; 0x68
 8000e68:	443a      	add	r2, r7
 8000e6a:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000e6e:	3368      	adds	r3, #104	; 0x68
 8000e70:	443b      	add	r3, r7
 8000e72:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000e76:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000e80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d9ea      	bls.n	8000e5e <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 8000e88:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000e92:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000e96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d3b5      	bcc.n	8000e0a <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000e9e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d12e      	bne.n	8000f04 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000eac:	e00f      	b.n	8000ece <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 8000eae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	7812      	ldrb	r2, [r2, #0]
 8000eb6:	3368      	adds	r3, #104	; 0x68
 8000eb8:	443b      	add	r3, r7
 8000eba:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000ec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ec8:	3301      	adds	r3, #1
 8000eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ed2:	2b0f      	cmp	r3, #15
 8000ed4:	d9eb      	bls.n	8000eae <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000ed6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4611      	mov	r1, r2
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 f8fc 	bl	80010de <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000ee6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000eea:	f107 0314 	add.w	r3, r7, #20
 8000eee:	4611      	mov	r1, r2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f000 f8f4 	bl	80010de <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000ef6:	f107 0314 	add.w	r3, r7, #20
 8000efa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fb91 	bl	8000624 <AES_Encrypt>
 8000f02:	e04d      	b.n	8000fa0 <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f0a:	e02f      	b.n	8000f6c <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 8000f0c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f10:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d20a      	bcs.n	8000f2e <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8000f18:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	3368      	adds	r3, #104	; 0x68
 8000f22:	443b      	add	r3, r7
 8000f24:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000f2e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f32:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d106      	bne.n	8000f48 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 8000f3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f3e:	3368      	adds	r3, #104	; 0x68
 8000f40:	443b      	add	r3, r7
 8000f42:	2280      	movs	r2, #128	; 0x80
 8000f44:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000f48:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000f4c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d906      	bls.n	8000f62 <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 8000f54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f58:	3368      	adds	r3, #104	; 0x68
 8000f5a:	443b      	add	r3, r7
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000f62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f66:	3301      	adds	r3, #1
 8000f68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d9cb      	bls.n	8000f0c <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000f74:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4611      	mov	r1, r2
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f8ad 	bl	80010de <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000f84:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f8a5 	bl	80010de <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fb42 	bl	8000624 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000fa0:	7d3a      	ldrb	r2, [r7, #20]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	7d7a      	ldrb	r2, [r7, #21]
 8000fac:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	3302      	adds	r3, #2
 8000fb2:	7dba      	ldrb	r2, [r7, #22]
 8000fb4:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000fb6:	68bb      	ldr	r3, [r7, #8]
 8000fb8:	3303      	adds	r3, #3
 8000fba:	7dfa      	ldrb	r2, [r7, #23]
 8000fbc:	701a      	strb	r2, [r3, #0]
}
 8000fbe:	bf00      	nop
 8000fc0:	376c      	adds	r7, #108	; 0x6c
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	080079dc 	.word	0x080079dc

08000fcc <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8000fd8:	6879      	ldr	r1, [r7, #4]
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fb22 	bl	8000624 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	da02      	bge.n	8000ff0 <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 8000fea:	2301      	movs	r3, #1
 8000fec:	75bb      	strb	r3, [r7, #22]
 8000fee:	e001      	b.n	8000ff4 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000ff4:	68f8      	ldr	r0, [r7, #12]
 8000ff6:	f000 f83c 	bl	8001072 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000ffa:	7dbb      	ldrb	r3, [r7, #22]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d109      	bne.n	8001014 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	330f      	adds	r3, #15
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	320f      	adds	r2, #15
 800100a:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800100e:	43db      	mvns	r3, r3
 8001010:	b2db      	uxtb	r3, r3
 8001012:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	75fb      	strb	r3, [r7, #23]
 8001018:	e00a      	b.n	8001030 <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 800101a:	7dfb      	ldrb	r3, [r7, #23]
 800101c:	68fa      	ldr	r2, [r7, #12]
 800101e:	441a      	add	r2, r3
 8001020:	7dfb      	ldrb	r3, [r7, #23]
 8001022:	68b9      	ldr	r1, [r7, #8]
 8001024:	440b      	add	r3, r1
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 800102a:	7dfb      	ldrb	r3, [r7, #23]
 800102c:	3301      	adds	r3, #1
 800102e:	75fb      	strb	r3, [r7, #23]
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	d9f1      	bls.n	800101a <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	da02      	bge.n	8001046 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 8001040:	2301      	movs	r3, #1
 8001042:	75bb      	strb	r3, [r7, #22]
 8001044:	e001      	b.n	800104a <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f000 f811 	bl	8001072 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8001050:	7dbb      	ldrb	r3, [r7, #22]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d109      	bne.n	800106a <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	330f      	adds	r3, #15
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	68ba      	ldr	r2, [r7, #8]
 800105e:	320f      	adds	r2, #15
 8001060:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8001064:	43db      	mvns	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	7013      	strb	r3, [r2, #0]
	}
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8001072:	b480      	push	{r7}
 8001074:	b085      	sub	sp, #20
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
 8001082:	e022      	b.n	80010ca <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	2b0e      	cmp	r3, #14
 8001088:	d80d      	bhi.n	80010a6 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	3301      	adds	r3, #1
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b25b      	sxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	da02      	bge.n	80010a0 <Shift_Left+0x2e>
			{
				Overflow = 1;
 800109a:	2301      	movs	r3, #1
 800109c:	73bb      	strb	r3, [r7, #14]
 800109e:	e004      	b.n	80010aa <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	73bb      	strb	r3, [r7, #14]
 80010a4:	e001      	b.n	80010aa <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	4413      	add	r3, r2
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	b2d9      	uxtb	r1, r3
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	7bba      	ldrb	r2, [r7, #14]
 80010be:	440a      	add	r2, r1
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	3301      	adds	r3, #1
 80010c8:	73fb      	strb	r3, [r7, #15]
 80010ca:	7bfb      	ldrb	r3, [r7, #15]
 80010cc:	2b0f      	cmp	r3, #15
 80010ce:	d9d9      	bls.n	8001084 <Shift_Left+0x12>
	}
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr

080010de <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 80010de:	b480      	push	{r7}
 80010e0:	b085      	sub	sp, #20
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
 80010e6:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]
 80010ec:	e010      	b.n	8001110 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4413      	add	r3, r2
 80010f4:	7819      	ldrb	r1, [r3, #0]
 80010f6:	7bfb      	ldrb	r3, [r7, #15]
 80010f8:	683a      	ldr	r2, [r7, #0]
 80010fa:	4413      	add	r3, r2
 80010fc:	781a      	ldrb	r2, [r3, #0]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	4403      	add	r3, r0
 8001104:	404a      	eors	r2, r1
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800110a:	7bfb      	ldrb	r3, [r7, #15]
 800110c:	3301      	adds	r3, #1
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	2b0f      	cmp	r3, #15
 8001114:	d9eb      	bls.n	80010ee <XOR+0x10>
	}
}
 8001116:	bf00      	nop
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b086      	sub	sp, #24
 8001128:	af00      	add	r7, sp, #0
 800112a:	60f8      	str	r0, [r7, #12]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	460b      	mov	r3, r1
 8001132:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	6858      	ldr	r0, [r3, #4]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	891b      	ldrh	r3, [r3, #8]
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	f002 fbbc 	bl	80038bc <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 8001144:	7afb      	ldrb	r3, [r7, #11]
 8001146:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800114a:	b2db      	uxtb	r3, r3
 800114c:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6818      	ldr	r0, [r3, #0]
 8001152:	f107 0117 	add.w	r1, r7, #23
 8001156:	230a      	movs	r3, #10
 8001158:	2201      	movs	r2, #1
 800115a:	f004 f854 	bl	8005206 <HAL_SPI_Transmit>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <read_register+0x44>
		return false;
 8001164:	2300      	movs	r3, #0
 8001166:	e015      	b.n	8001194 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6818      	ldr	r0, [r3, #0]
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b29a      	uxth	r2, r3
 8001170:	230a      	movs	r3, #10
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	f004 f9b5 	bl	80054e2 <HAL_SPI_Receive>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <read_register+0x5e>
		return false;
 800117e:	2300      	movs	r3, #0
 8001180:	e008      	b.n	8001194 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6858      	ldr	r0, [r3, #4]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	891b      	ldrh	r3, [r3, #8]
 800118a:	2201      	movs	r2, #1
 800118c:	4619      	mov	r1, r3
 800118e:	f002 fb95 	bl	80038bc <HAL_GPIO_WritePin>

	return true;
 8001192:	2301      	movs	r3, #1
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}

0800119c <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
 80011a8:	4613      	mov	r3, r2
 80011aa:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6858      	ldr	r0, [r3, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	891b      	ldrh	r3, [r3, #8]
 80011b4:	2200      	movs	r2, #0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f002 fb80 	bl	80038bc <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 80011bc:	78fb      	ldrb	r3, [r7, #3]
 80011be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	733b      	strb	r3, [r7, #12]
 80011c6:	78bb      	ldrb	r3, [r7, #2]
 80011c8:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6818      	ldr	r0, [r3, #0]
 80011ce:	f107 010c 	add.w	r1, r7, #12
 80011d2:	230a      	movs	r3, #10
 80011d4:	2202      	movs	r2, #2
 80011d6:	f004 f816 	bl	8005206 <HAL_SPI_Transmit>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <write_register+0x48>
		return false;
 80011e0:	2300      	movs	r3, #0
 80011e2:	e008      	b.n	80011f6 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6858      	ldr	r0, [r3, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	891b      	ldrh	r3, [r3, #8]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f002 fb64 	bl	80038bc <HAL_GPIO_WritePin>

	return true;
 80011f4:	2301      	movs	r3, #1
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	60f8      	str	r0, [r7, #12]
 8001208:	460b      	mov	r3, r1
 800120a:	607a      	str	r2, [r7, #4]
 800120c:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d905      	bls.n	8001220 <config_set_channel+0x20>
 8001214:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <config_set_channel+0x54>)
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <config_set_channel+0x58>)
 8001218:	216e      	movs	r1, #110	; 0x6e
 800121a:	4810      	ldr	r0, [pc, #64]	; (800125c <config_set_channel+0x5c>)
 800121c:	f005 fb78 	bl	8006910 <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 8001220:	7afa      	ldrb	r2, [r7, #11]
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	321a      	adds	r2, #26
 8001226:	6879      	ldr	r1, [r7, #4]
 8001228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8001232:	b21a      	sxth	r2, r3
 8001234:	7afb      	ldrb	r3, [r7, #11]
 8001236:	2101      	movs	r1, #1
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	b29a      	uxth	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
}
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	080079ec 	.word	0x080079ec
 8001258:	08007cf4 	.word	0x08007cf4
 800125c:	08007a00 	.word	0x08007a00

08001260 <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f64a 3267 	movw	r2, #43879	; 0xab67
 800126e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	handle->config.tx_frame_count = 0;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	handle->config.rx_frame_count = 0;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
	handle->config.rx1_delay = 1;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
	handle->config.channel_mask = 0;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2200      	movs	r2, #0
 800128e:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	config_set_channel(handle, 0, 868100000);
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <config_load_default+0x58>)
 8001294:	2100      	movs	r1, #0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff ffb2 	bl	8001200 <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 800129c:	4a07      	ldr	r2, [pc, #28]	; (80012bc <config_load_default+0x5c>)
 800129e:	2101      	movs	r1, #1
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ffad 	bl	8001200 <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 80012a6:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <config_load_default+0x60>)
 80012a8:	2102      	movs	r1, #2
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa8 	bl	8001200 <config_set_channel>
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	33be27a0 	.word	0x33be27a0
 80012bc:	33c134e0 	.word	0x33c134e0
 80012c0:	33c44220 	.word	0x33c44220

080012c4 <reset>:

static void reset(rfm95_handle_t *handle)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68d8      	ldr	r0, [r3, #12]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8a1b      	ldrh	r3, [r3, #16]
 80012d4:	2200      	movs	r2, #0
 80012d6:	4619      	mov	r1, r3
 80012d8:	f002 faf0 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 80012dc:	2001      	movs	r0, #1
 80012de:	f002 f849 	bl	8003374 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68d8      	ldr	r0, [r3, #12]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	8a1b      	ldrh	r3, [r3, #16]
 80012ea:	2201      	movs	r2, #1
 80012ec:	4619      	mov	r1, r3
 80012ee:	f002 fae5 	bl	80038bc <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80012f2:	2005      	movs	r0, #5
 80012f4:	f002 f83e 	bl	8003374 <HAL_Delay>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 800130a:	6839      	ldr	r1, [r7, #0]
 800130c:	2000      	movs	r0, #0
 800130e:	460a      	mov	r2, r1
 8001310:	4603      	mov	r3, r0
 8001312:	0b55      	lsrs	r5, r2, #13
 8001314:	04d4      	lsls	r4, r2, #19
 8001316:	4a27      	ldr	r2, [pc, #156]	; (80013b4 <configure_frequency+0xb4>)
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	4620      	mov	r0, r4
 800131e:	4629      	mov	r1, r5
 8001320:	f7fe fffe 	bl	8000320 <__aeabi_uldivmod>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 800132c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	f04f 0300 	mov.w	r3, #0
 8001338:	0c02      	lsrs	r2, r0, #16
 800133a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800133e:	0c0b      	lsrs	r3, r1, #16
 8001340:	b2d3      	uxtb	r3, r2
 8001342:	461a      	mov	r2, r3
 8001344:	2106      	movs	r1, #6
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff ff28 	bl	800119c <write_register>
 800134c:	4603      	mov	r3, r0
 800134e:	f083 0301 	eor.w	r3, r3, #1
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <configure_frequency+0x5c>
 8001358:	2300      	movs	r3, #0
 800135a:	e026      	b.n	80013aa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 800135c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001360:	f04f 0200 	mov.w	r2, #0
 8001364:	f04f 0300 	mov.w	r3, #0
 8001368:	0a02      	lsrs	r2, r0, #8
 800136a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800136e:	0a0b      	lsrs	r3, r1, #8
 8001370:	b2d3      	uxtb	r3, r2
 8001372:	461a      	mov	r2, r3
 8001374:	2107      	movs	r1, #7
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff ff10 	bl	800119c <write_register>
 800137c:	4603      	mov	r3, r0
 800137e:	f083 0301 	eor.w	r3, r3, #1
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <configure_frequency+0x8c>
 8001388:	2300      	movs	r3, #0
 800138a:	e00e      	b.n	80013aa <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 800138c:	7a3b      	ldrb	r3, [r7, #8]
 800138e:	461a      	mov	r2, r3
 8001390:	2108      	movs	r1, #8
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff02 	bl	800119c <write_register>
 8001398:	4603      	mov	r3, r0
 800139a:	f083 0301 	eor.w	r3, r3, #1
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <configure_frequency+0xa8>
 80013a4:	2300      	movs	r3, #0
 80013a6:	e000      	b.n	80013aa <configure_frequency+0xaa>

	return true;
 80013a8:	2301      	movs	r3, #1
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bdb0      	pop	{r4, r5, r7, pc}
 80013b2:	bf00      	nop
 80013b4:	01e84800 	.word	0x01e84800

080013b8 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80013c8:	461a      	mov	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	fa42 f303 	asr.w	r3, r2, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d105      	bne.n	80013e4 <configure_channel+0x2c>
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <configure_channel+0x48>)
 80013da:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <configure_channel+0x4c>)
 80013dc:	2195      	movs	r1, #149	; 0x95
 80013de:	480a      	ldr	r0, [pc, #40]	; (8001408 <configure_channel+0x50>)
 80013e0:	f005 fa96 	bl	8006910 <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	321a      	adds	r2, #26
 80013ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff85 	bl	8001300 <configure_frequency>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	08007a2c 	.word	0x08007a2c
 8001404:	08007d08 	.word	0x08007d08
 8001408:	08007a00 	.word	0x08007a00

0800140c <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	460b      	mov	r3, r1
 8001416:	607a      	str	r2, [r7, #4]
 8001418:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4798      	blx	r3
 8001420:	4601      	mov	r1, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <wait_for_irq+0x5c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	099b      	lsrs	r3, r3, #6
 8001434:	440b      	add	r3, r1
 8001436:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8001438:	e008      	b.n	800144c <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	4798      	blx	r3
 8001440:	4602      	mov	r2, r0
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4293      	cmp	r3, r2
 8001446:	d801      	bhi.n	800144c <wait_for_irq+0x40>
			return false;
 8001448:	2300      	movs	r3, #0
 800144a:	e008      	b.n	800145e <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 800144c:	7afb      	ldrb	r3, [r7, #11]
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	332a      	adds	r3, #42	; 0x2a
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0ee      	beq.n	800143a <wait_for_irq+0x2e>
		}
	}

	return true;
 800145c:	2301      	movs	r3, #1
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	10624dd3 	.word	0x10624dd3

0800146c <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001478:	4798      	blx	r3
 800147a:	4602      	mov	r2, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001480:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001484:	fb01 f303 	mul.w	r3, r1, r3
 8001488:	4912      	ldr	r1, [pc, #72]	; (80014d4 <wait_for_rx_irqs+0x68>)
 800148a:	fba1 1303 	umull	r1, r3, r1, r3
 800148e:	099b      	lsrs	r3, r3, #6
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001490:	4413      	add	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001494:	e008      	b.n	80014a8 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4798      	blx	r3
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d801      	bhi.n	80014a8 <wait_for_rx_irqs+0x3c>
			return false;
 80014a4:	2300      	movs	r3, #0
 80014a6:	e011      	b.n	80014cc <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d104      	bne.n	80014bc <wait_for_rx_irqs+0x50>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d0ec      	beq.n	8001496 <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	bf14      	ite	ne
 80014c6:	2301      	movne	r3, #1
 80014c8:	2300      	moveq	r3, #0
 80014ca:	b2db      	uxtb	r3, r3
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	10624dd3 	.word	0x10624dd3

080014d8 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80014e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	dd03      	ble.n	80014f4 <rfm95_set_power+0x1c>
 80014ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	dd09      	ble.n	8001508 <rfm95_set_power+0x30>
 80014f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80014f8:	2b14      	cmp	r3, #20
 80014fa:	d005      	beq.n	8001508 <rfm95_set_power+0x30>
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <rfm95_set_power+0xd8>)
 80014fe:	4a2d      	ldr	r2, [pc, #180]	; (80015b4 <rfm95_set_power+0xdc>)
 8001500:	21b6      	movs	r1, #182	; 0xb6
 8001502:	482d      	ldr	r0, [pc, #180]	; (80015b8 <rfm95_set_power+0xe0>)
 8001504:	f005 fa04 	bl	8006910 <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001508:	2300      	movs	r3, #0
 800150a:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001514:	2b01      	cmp	r3, #1
 8001516:	dd18      	ble.n	800154a <rfm95_set_power+0x72>
 8001518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800151c:	2b11      	cmp	r3, #17
 800151e:	dc14      	bgt.n	800154a <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001520:	7b3b      	ldrb	r3, [r7, #12]
 8001522:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001526:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001528:	7b3b      	ldrb	r3, [r7, #12]
 800152a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800152e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	3b02      	subs	r3, #2
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	b2da      	uxtb	r2, r3
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	f362 0303 	bfi	r3, r2, #0, #4
 8001542:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001544:	2384      	movs	r3, #132	; 0x84
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e011      	b.n	800156e <rfm95_set_power+0x96>

	} else if (power == 20) {
 800154a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800154e:	2b14      	cmp	r3, #20
 8001550:	d10d      	bne.n	800156e <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001552:	7b3b      	ldrb	r3, [r7, #12]
 8001554:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001558:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 800155a:	7b3b      	ldrb	r3, [r7, #12]
 800155c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001560:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	f043 030f 	orr.w	r3, r3, #15
 8001568:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800156a:	2387      	movs	r3, #135	; 0x87
 800156c:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 800156e:	7b3b      	ldrb	r3, [r7, #12]
 8001570:	461a      	mov	r2, r3
 8001572:	2109      	movs	r1, #9
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff fe11 	bl	800119c <write_register>
 800157a:	4603      	mov	r3, r0
 800157c:	f083 0301 	eor.w	r3, r3, #1
 8001580:	b2db      	uxtb	r3, r3
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <rfm95_set_power+0xb2>
 8001586:	2300      	movs	r3, #0
 8001588:	e00e      	b.n	80015a8 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	461a      	mov	r2, r3
 800158e:	214d      	movs	r1, #77	; 0x4d
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff fe03 	bl	800119c <write_register>
 8001596:	4603      	mov	r3, r0
 8001598:	f083 0301 	eor.w	r3, r3, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <rfm95_set_power+0xce>
 80015a2:	2300      	movs	r3, #0
 80015a4:	e000      	b.n	80015a8 <rfm95_set_power+0xd0>

	return true;
 80015a6:	2301      	movs	r3, #1
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	08007a60 	.word	0x08007a60
 80015b4:	08007d1c 	.word	0x08007d1c
 80015b8:	08007a00 	.word	0x08007a00

080015bc <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80015ce:	d005      	beq.n	80015dc <rfm95_init+0x20>
 80015d0:	4b9a      	ldr	r3, [pc, #616]	; (800183c <rfm95_init+0x280>)
 80015d2:	4a9b      	ldr	r2, [pc, #620]	; (8001840 <rfm95_init+0x284>)
 80015d4:	21d0      	movs	r1, #208	; 0xd0
 80015d6:	489b      	ldr	r0, [pc, #620]	; (8001844 <rfm95_init+0x288>)
 80015d8:	f005 f99a 	bl	8006910 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d005      	beq.n	80015f2 <rfm95_init+0x36>
 80015e6:	4b98      	ldr	r3, [pc, #608]	; (8001848 <rfm95_init+0x28c>)
 80015e8:	4a95      	ldr	r2, [pc, #596]	; (8001840 <rfm95_init+0x284>)
 80015ea:	21d1      	movs	r1, #209	; 0xd1
 80015ec:	4895      	ldr	r0, [pc, #596]	; (8001844 <rfm95_init+0x288>)
 80015ee:	f005 f98f 	bl	8006910 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80015fc:	d005      	beq.n	800160a <rfm95_init+0x4e>
 80015fe:	4b93      	ldr	r3, [pc, #588]	; (800184c <rfm95_init+0x290>)
 8001600:	4a8f      	ldr	r2, [pc, #572]	; (8001840 <rfm95_init+0x284>)
 8001602:	21d2      	movs	r1, #210	; 0xd2
 8001604:	488f      	ldr	r0, [pc, #572]	; (8001844 <rfm95_init+0x288>)
 8001606:	f005 f983 	bl	8006910 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <rfm95_init+0x64>
 8001614:	4b8e      	ldr	r3, [pc, #568]	; (8001850 <rfm95_init+0x294>)
 8001616:	4a8a      	ldr	r2, [pc, #552]	; (8001840 <rfm95_init+0x284>)
 8001618:	21d3      	movs	r1, #211	; 0xd3
 800161a:	488a      	ldr	r0, [pc, #552]	; (8001844 <rfm95_init+0x288>)
 800161c:	f005 f978 	bl	8006910 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d005      	beq.n	8001636 <rfm95_init+0x7a>
 800162a:	4b8a      	ldr	r3, [pc, #552]	; (8001854 <rfm95_init+0x298>)
 800162c:	4a84      	ldr	r2, [pc, #528]	; (8001840 <rfm95_init+0x284>)
 800162e:	21d4      	movs	r1, #212	; 0xd4
 8001630:	4884      	ldr	r0, [pc, #528]	; (8001844 <rfm95_init+0x288>)
 8001632:	f005 f96d 	bl	8006910 <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	2b00      	cmp	r3, #0
 800163c:	d105      	bne.n	800164a <rfm95_init+0x8e>
 800163e:	4b86      	ldr	r3, [pc, #536]	; (8001858 <rfm95_init+0x29c>)
 8001640:	4a7f      	ldr	r2, [pc, #508]	; (8001840 <rfm95_init+0x284>)
 8001642:	21d5      	movs	r1, #213	; 0xd5
 8001644:	487f      	ldr	r0, [pc, #508]	; (8001844 <rfm95_init+0x288>)
 8001646:	f005 f963 	bl	8006910 <__assert_func>
	assert(handle->random_int != NULL);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	2b00      	cmp	r3, #0
 8001650:	d105      	bne.n	800165e <rfm95_init+0xa2>
 8001652:	4b82      	ldr	r3, [pc, #520]	; (800185c <rfm95_init+0x2a0>)
 8001654:	4a7a      	ldr	r2, [pc, #488]	; (8001840 <rfm95_init+0x284>)
 8001656:	21d6      	movs	r1, #214	; 0xd6
 8001658:	487a      	ldr	r0, [pc, #488]	; (8001844 <rfm95_init+0x288>)
 800165a:	f005 f959 	bl	8006910 <__assert_func>
	assert(handle->precision_sleep_until != NULL);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001662:	2b00      	cmp	r3, #0
 8001664:	d105      	bne.n	8001672 <rfm95_init+0xb6>
 8001666:	4b7e      	ldr	r3, [pc, #504]	; (8001860 <rfm95_init+0x2a4>)
 8001668:	4a75      	ldr	r2, [pc, #468]	; (8001840 <rfm95_init+0x284>)
 800166a:	21d7      	movs	r1, #215	; 0xd7
 800166c:	4875      	ldr	r0, [pc, #468]	; (8001844 <rfm95_init+0x288>)
 800166e:	f005 f94f 	bl	8006910 <__assert_func>
	assert(handle->precision_tick_frequency > 10000);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	f242 7210 	movw	r2, #10000	; 0x2710
 800167a:	4293      	cmp	r3, r2
 800167c:	d805      	bhi.n	800168a <rfm95_init+0xce>
 800167e:	4b79      	ldr	r3, [pc, #484]	; (8001864 <rfm95_init+0x2a8>)
 8001680:	4a6f      	ldr	r2, [pc, #444]	; (8001840 <rfm95_init+0x284>)
 8001682:	21d8      	movs	r1, #216	; 0xd8
 8001684:	486f      	ldr	r0, [pc, #444]	; (8001844 <rfm95_init+0x288>)
 8001686:	f005 f943 	bl	8006910 <__assert_func>

	reset(handle);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fe1a 	bl	80012c4 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	2b00      	cmp	r3, #0
 8001696:	d012      	beq.n	80016be <rfm95_init+0x102>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	3260      	adds	r2, #96	; 0x60
 80016a0:	4610      	mov	r0, r2
 80016a2:	4798      	blx	r3
 80016a4:	4603      	mov	r3, r0
 80016a6:	f083 0301 	eor.w	r3, r3, #1
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d106      	bne.n	80016be <rfm95_init+0x102>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 80016b6:	f64a 3267 	movw	r2, #43879	; 0xab67
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d002      	beq.n	80016c4 <rfm95_init+0x108>
		config_load_default(handle);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fdce 	bl	8001260 <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 80016c4:	f107 020f 	add.w	r2, r7, #15
 80016c8:	2301      	movs	r3, #1
 80016ca:	2142      	movs	r1, #66	; 0x42
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fd29 	bl	8001124 <read_register>
 80016d2:	4603      	mov	r3, r0
 80016d4:	f083 0301 	eor.w	r3, r3, #1
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <rfm95_init+0x126>
 80016de:	2300      	movs	r3, #0
 80016e0:	e0a7      	b.n	8001832 <rfm95_init+0x276>
	if (version != RFM9x_VER) return false;
 80016e2:	7bfb      	ldrb	r3, [r7, #15]
 80016e4:	2b12      	cmp	r3, #18
 80016e6:	d001      	beq.n	80016ec <rfm95_init+0x130>
 80016e8:	2300      	movs	r3, #0
 80016ea:	e0a2      	b.n	8001832 <rfm95_init+0x276>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 80016ec:	2200      	movs	r2, #0
 80016ee:	2101      	movs	r1, #1
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff fd53 	bl	800119c <write_register>
 80016f6:	4603      	mov	r3, r0
 80016f8:	f083 0301 	eor.w	r3, r3, #1
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <rfm95_init+0x14a>
 8001702:	2300      	movs	r3, #0
 8001704:	e095      	b.n	8001832 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001706:	2280      	movs	r2, #128	; 0x80
 8001708:	2101      	movs	r1, #1
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f7ff fd46 	bl	800119c <write_register>
 8001710:	4603      	mov	r3, r0
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <rfm95_init+0x164>
 800171c:	2300      	movs	r3, #0
 800171e:	e088      	b.n	8001832 <rfm95_init+0x276>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff fd39 	bl	800119c <write_register>
 800172a:	4603      	mov	r3, r0
 800172c:	f083 0301 	eor.w	r3, r3, #1
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <rfm95_init+0x17e>
 8001736:	2300      	movs	r3, #0
 8001738:	e07b      	b.n	8001832 <rfm95_init+0x276>

	if (handle->on_after_interrupts_configured != NULL) {
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2b00      	cmp	r3, #0
 8001740:	d002      	beq.n	8001748 <rfm95_init+0x18c>
		handle->on_after_interrupts_configured();
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001746:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001748:	2111      	movs	r1, #17
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff fec4 	bl	80014d8 <rfm95_set_power>
 8001750:	4603      	mov	r3, r0
 8001752:	f083 0301 	eor.w	r3, r3, #1
 8001756:	b2db      	uxtb	r3, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <rfm95_init+0x1a4>
 800175c:	2300      	movs	r3, #0
 800175e:	e068      	b.n	8001832 <rfm95_init+0x276>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001760:	2223      	movs	r2, #35	; 0x23
 8001762:	210c      	movs	r1, #12
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fd19 	bl	800119c <write_register>
 800176a:	4603      	mov	r3, r0
 800176c:	f083 0301 	eor.w	r3, r3, #1
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <rfm95_init+0x1be>
 8001776:	2300      	movs	r3, #0
 8001778:	e05b      	b.n	8001832 <rfm95_init+0x276>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 800177a:	2200      	movs	r2, #0
 800177c:	2120      	movs	r1, #32
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7ff fd0c 	bl	800119c <write_register>
 8001784:	4603      	mov	r3, r0
 8001786:	f083 0301 	eor.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <rfm95_init+0x1d8>
 8001790:	2300      	movs	r3, #0
 8001792:	e04e      	b.n	8001832 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001794:	2208      	movs	r2, #8
 8001796:	2121      	movs	r1, #33	; 0x21
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f7ff fcff 	bl	800119c <write_register>
 800179e:	4603      	mov	r3, r0
 80017a0:	f083 0301 	eor.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <rfm95_init+0x1f2>
 80017aa:	2300      	movs	r3, #0
 80017ac:	e041      	b.n	8001832 <rfm95_init+0x276>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 80017ae:	2234      	movs	r2, #52	; 0x34
 80017b0:	2139      	movs	r1, #57	; 0x39
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f7ff fcf2 	bl	800119c <write_register>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f083 0301 	eor.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <rfm95_init+0x20c>
 80017c4:	2300      	movs	r3, #0
 80017c6:	e034      	b.n	8001832 <rfm95_init+0x276>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 80017c8:	2280      	movs	r2, #128	; 0x80
 80017ca:	210e      	movs	r1, #14
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fce5 	bl	800119c <write_register>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f083 0301 	eor.w	r3, r3, #1
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <rfm95_init+0x226>
 80017de:	2300      	movs	r3, #0
 80017e0:	e027      	b.n	8001832 <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 80017e2:	2200      	movs	r2, #0
 80017e4:	210f      	movs	r1, #15
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7ff fcd8 	bl	800119c <write_register>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f083 0301 	eor.w	r3, r3, #1
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <rfm95_init+0x240>
 80017f8:	2300      	movs	r3, #0
 80017fa:	e01a      	b.n	8001832 <rfm95_init+0x276>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 80017fc:	2240      	movs	r2, #64	; 0x40
 80017fe:	2123      	movs	r1, #35	; 0x23
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f7ff fccb 	bl	800119c <write_register>
 8001806:	4603      	mov	r3, r0
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <rfm95_init+0x25a>
 8001812:	2300      	movs	r3, #0
 8001814:	e00d      	b.n	8001832 <rfm95_init+0x276>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	2101      	movs	r1, #1
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f7ff fcbe 	bl	800119c <write_register>
 8001820:	4603      	mov	r3, r0
 8001822:	f083 0301 	eor.w	r3, r3, #1
 8001826:	b2db      	uxtb	r3, r3
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <rfm95_init+0x274>
 800182c:	2300      	movs	r3, #0
 800182e:	e000      	b.n	8001832 <rfm95_init+0x276>

	return true;
 8001830:	2301      	movs	r3, #1
}
 8001832:	4618      	mov	r0, r3
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	08007a8c 	.word	0x08007a8c
 8001840:	08007d2c 	.word	0x08007d2c
 8001844:	08007a00 	.word	0x08007a00
 8001848:	08007ac0 	.word	0x08007ac0
 800184c:	08007afc 	.word	0x08007afc
 8001850:	08007b34 	.word	0x08007b34
 8001854:	08007b70 	.word	0x08007b70
 8001858:	08007ba8 	.word	0x08007ba8
 800185c:	08007bcc 	.word	0x08007bcc
 8001860:	08007be8 	.word	0x08007be8
 8001864:	08007c10 	.word	0x08007c10

08001868 <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b08c      	sub	sp, #48	; 0x30
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t answer_index = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	while (index < frame_payload_length) {
 8001882:	bf00      	nop
 8001884:	e1d8      	b.n	8001c38 <process_mac_commands+0x3d0>
		switch (frame_payload[index++])
 8001886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001890:	461a      	mov	r2, r3
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	2b0c      	cmp	r3, #12
 800189c:	f200 81cc 	bhi.w	8001c38 <process_mac_commands+0x3d0>
 80018a0:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <process_mac_commands+0x40>)
 80018a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a6:	bf00      	nop
 80018a8:	080018dd 	.word	0x080018dd
 80018ac:	080018f7 	.word	0x080018f7
 80018b0:	08001915 	.word	0x08001915
 80018b4:	08001933 	.word	0x08001933
 80018b8:	0800194d 	.word	0x0800194d
 80018bc:	080019fb 	.word	0x080019fb
 80018c0:	08001a69 	.word	0x08001a69
 80018c4:	08001b9b 	.word	0x08001b9b
 80018c8:	08001bfb 	.word	0x08001bfb
 80018cc:	08001c09 	.word	0x08001c09
 80018d0:	08001c1b 	.word	0x08001c1b
 80018d4:	08001c29 	.word	0x08001c29
 80018d8:	08001c37 	.word	0x08001c37
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 80018dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d801      	bhi.n	80018ea <process_mac_commands+0x82>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e1b1      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 1;
 80018ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018ee:	3301      	adds	r3, #1
 80018f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80018f4:	e1a0      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 80018f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80018fa:	3301      	adds	r3, #1
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4293      	cmp	r3, r2
 8001902:	d801      	bhi.n	8001908 <process_mac_commands+0xa0>
 8001904:	2300      	movs	r3, #0
 8001906:	e1a2      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 2;
 8001908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800190c:	3302      	adds	r3, #2
 800190e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8001912:	e191      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8001914:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001918:	3303      	adds	r3, #3
 800191a:	461a      	mov	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4293      	cmp	r3, r2
 8001920:	d801      	bhi.n	8001926 <process_mac_commands+0xbe>
 8001922:	2300      	movs	r3, #0
 8001924:	e193      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 4;
 8001926:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800192a:	3304      	adds	r3, #4
 800192c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8001930:	e182      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8001932:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	d801      	bhi.n	8001940 <process_mac_commands+0xd8>
 800193c:	2300      	movs	r3, #0
 800193e:	e186      	b.n	8001c4e <process_mac_commands+0x3e6>

				index += 1;
 8001940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001944:	3301      	adds	r3, #1
 8001946:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800194a:	e175      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 800194c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001950:	3304      	adds	r3, #4
 8001952:	461a      	mov	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4293      	cmp	r3, r2
 8001958:	d801      	bhi.n	800195e <process_mac_commands+0xf6>
 800195a:	2300      	movs	r3, #0
 800195c:	e177      	b.n	8001c4e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 800195e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001962:	2b30      	cmp	r3, #48	; 0x30
 8001964:	d901      	bls.n	800196a <process_mac_commands+0x102>
 8001966:	2300      	movs	r3, #0
 8001968:	e171      	b.n	8001c4e <process_mac_commands+0x3e6>

				uint8_t dl_settings = frame_payload[index++];
 800196a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800196e:	1c5a      	adds	r2, r3, #1
 8001970:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001974:	461a      	mov	r2, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	4413      	add	r3, r2
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	77bb      	strb	r3, [r7, #30]
				uint8_t frequency_lsb = frame_payload[index++];
 800197e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001988:	461a      	mov	r2, r3
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	4413      	add	r3, r2
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	777b      	strb	r3, [r7, #29]
				uint8_t frequency_msb = frame_payload[index++];
 8001992:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800199c:	461a      	mov	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	4413      	add	r3, r2
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	773b      	strb	r3, [r7, #28]
				uint8_t frequency_hsb = frame_payload[index++];
 80019a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 80019b0:	461a      	mov	r2, r3
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	4413      	add	r3, r2
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	76fb      	strb	r3, [r7, #27]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 80019ba:	7f7a      	ldrb	r2, [r7, #29]
 80019bc:	7f3b      	ldrb	r3, [r7, #28]
 80019be:	021b      	lsls	r3, r3, #8
 80019c0:	431a      	orrs	r2, r3
 80019c2:	7efb      	ldrb	r3, [r7, #27]
 80019c4:	041b      	lsls	r3, r3, #16
 80019c6:	4313      	orrs	r3, r2
 80019c8:	2264      	movs	r2, #100	; 0x64
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 80019d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80019da:	461a      	mov	r2, r3
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	4413      	add	r3, r2
 80019e0:	2205      	movs	r2, #5
 80019e2:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 80019e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019e8:	1c5a      	adds	r2, r3, #1
 80019ea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	2207      	movs	r2, #7
 80019f6:	701a      	strb	r2, [r3, #0]
				break;
 80019f8:	e11e      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 80019fa:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80019fe:	2b2f      	cmp	r3, #47	; 0x2f
 8001a00:	d901      	bls.n	8001a06 <process_mac_commands+0x19e>
 8001a02:	2300      	movs	r3, #0
 8001a04:	e123      	b.n	8001c4e <process_mac_commands+0x3e6>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 8001a06:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	f887 3020 	strb.w	r3, [r7, #32]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d004      	beq.n	8001a24 <process_mac_commands+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1e:	4798      	blx	r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	e000      	b.n	8001a26 <process_mac_commands+0x1be>
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	77fb      	strb	r3, [r7, #31]

				answer_buffer[answer_index++] = 0x06;
 8001a28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a2c:	1c5a      	adds	r2, r3, #1
 8001a2e:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001a32:	461a      	mov	r2, r3
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	2206      	movs	r2, #6
 8001a3a:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8001a3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001a46:	461a      	mov	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	7ffa      	ldrb	r2, [r7, #31]
 8001a4e:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 8001a50:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a54:	1c5a      	adds	r2, r3, #1
 8001a56:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4413      	add	r3, r2
 8001a60:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a64:	701a      	strb	r2, [r3, #0]
				break;
 8001a66:	e0e7      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8001a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	461a      	mov	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d801      	bhi.n	8001a7a <process_mac_commands+0x212>
 8001a76:	2300      	movs	r3, #0
 8001a78:	e0e9      	b.n	8001c4e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8001a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001a7e:	2b30      	cmp	r3, #48	; 0x30
 8001a80:	d901      	bls.n	8001a86 <process_mac_commands+0x21e>
 8001a82:	2300      	movs	r3, #0
 8001a84:	e0e3      	b.n	8001c4e <process_mac_commands+0x3e6>

				uint8_t channel_index = frame_payload[index++];
 8001a86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001a90:	461a      	mov	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				uint8_t frequency_lsb = frame_payload[index++];
 8001a9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aa0:	1c5a      	adds	r2, r3, #1
 8001aa2:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4413      	add	r3, r2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				uint8_t frequency_msb = frame_payload[index++];
 8001ab2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ab6:	1c5a      	adds	r2, r3, #1
 8001ab8:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001abc:	461a      	mov	r2, r3
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				uint8_t frequency_hsb = frame_payload[index++];
 8001ac8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				uint8_t min_max_dr = frame_payload[index++];
 8001ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001ae8:	461a      	mov	r2, r3
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	4413      	add	r3, r2
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8001af4:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8001af8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	431a      	orrs	r2, r3
 8001b00:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	4313      	orrs	r3, r2
 8001b08:	2264      	movs	r2, #100	; 0x64
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 8001b10:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8001b1c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001b20:	091b      	lsrs	r3, r3, #4
 8001b22:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

				if (channel_index >= 3) {
 8001b26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d906      	bls.n	8001b3c <process_mac_commands+0x2d4>
					config_set_channel(handle, channel_index, frequency);
 8001b2e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f7ff fb62 	bl	8001200 <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8001b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001b40:	2b05      	cmp	r3, #5
 8001b42:	d903      	bls.n	8001b4c <process_mac_commands+0x2e4>
 8001b44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d901      	bls.n	8001b50 <process_mac_commands+0x2e8>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e000      	b.n	8001b52 <process_mac_commands+0x2ea>
 8001b50:	2300      	movs	r3, #0
 8001b52:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001b56:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

				answer_buffer[answer_index++] = 0x07;
 8001b62:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	4413      	add	r3, r2
 8001b72:	2207      	movs	r2, #7
 8001b74:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 8001b76:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	b25a      	sxtb	r2, r3
 8001b84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001b88:	1c59      	adds	r1, r3, #1
 8001b8a:	f887 102e 	strb.w	r1, [r7, #46]	; 0x2e
 8001b8e:	4619      	mov	r1, r3
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	440b      	add	r3, r1
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	701a      	strb	r2, [r3, #0]
				break;
 8001b98:	e04e      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 8001b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d801      	bhi.n	8001ba8 <process_mac_commands+0x340>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	e052      	b.n	8001c4e <process_mac_commands+0x3e6>
				if ((answer_index + 2) >= 51) return false;
 8001ba8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bac:	2b30      	cmp	r3, #48	; 0x30
 8001bae:	d901      	bls.n	8001bb4 <process_mac_commands+0x34c>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e04c      	b.n	8001c4e <process_mac_commands+0x3e6>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 8001bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				if (handle->config.rx1_delay == 0) {
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d103      	bne.n	8001be4 <process_mac_commands+0x37c>
					handle->config.rx1_delay = 1;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 8001be4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8001bee:	461a      	mov	r2, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	701a      	strb	r2, [r3, #0]
				break;
 8001bf8:	e01e      	b.n	8001c38 <process_mac_commands+0x3d0>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8001bfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d819      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c04:	2300      	movs	r3, #0
 8001c06:	e022      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8001c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d810      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c16:	2300      	movs	r3, #0
 8001c18:	e019      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8001c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d809      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c24:	2300      	movs	r3, #0
 8001c26:	e012      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8001c28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d802      	bhi.n	8001c38 <process_mac_commands+0x3d0>
 8001c32:	2300      	movs	r3, #0
 8001c34:	e00b      	b.n	8001c4e <process_mac_commands+0x3e6>

				break;
			}
			case 0x0d: // DeviceTimeReq
			{
				break;
 8001c36:	bf00      	nop
	while (index < frame_payload_length) {
 8001c38:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	f63f ae21 	bhi.w	8001886 <process_mac_commands+0x1e>
			}
		}
	}

	*answer_buffer_length = answer_index;
 8001c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c46:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8001c4a:	701a      	strb	r2, [r3, #0]
	return true;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3730      	adds	r7, #48	; 0x30
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop

08001c58 <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c6a:	492b      	ldr	r1, [pc, #172]	; (8001d18 <receive_at_scheduled_time+0xc0>)
 8001c6c:	fba1 1202 	umull	r1, r2, r1, r2
 8001c70:	0992      	lsrs	r2, r2, #6
 8001c72:	6839      	ldr	r1, [r7, #0]
 8001c74:	1a8a      	subs	r2, r1, r2
 8001c76:	4610      	mov	r0, r2
 8001c78:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2140      	movs	r1, #64	; 0x40
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fa8c 	bl	800119c <write_register>
 8001c84:	4603      	mov	r3, r0
 8001c86:	f083 0301 	eor.w	r3, r3, #1
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <receive_at_scheduled_time+0x3c>
 8001c90:	2300      	movs	r3, #0
 8001c92:	e03c      	b.n	8001d0e <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8001c94:	22ff      	movs	r2, #255	; 0xff
 8001c96:	2112      	movs	r1, #18
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fa7f 	bl	800119c <write_register>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f083 0301 	eor.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <receive_at_scheduled_time+0x56>
 8001caa:	2300      	movs	r3, #0
 8001cac:	e02f      	b.n	8001d0e <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 8001cc6:	2281      	movs	r2, #129	; 0x81
 8001cc8:	2101      	movs	r1, #1
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff fa66 	bl	800119c <write_register>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f083 0301 	eor.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <receive_at_scheduled_time+0x88>
 8001cdc:	2300      	movs	r3, #0
 8001cde:	e016      	b.n	8001d0e <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8001ce0:	220a      	movs	r2, #10
 8001ce2:	2102      	movs	r1, #2
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff fb91 	bl	800140c <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cee:	6838      	ldr	r0, [r7, #0]
 8001cf0:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8001cf2:	2286      	movs	r2, #134	; 0x86
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff fa50 	bl	800119c <write_register>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	f083 0301 	eor.w	r3, r3, #1
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <receive_at_scheduled_time+0xb4>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	e000      	b.n	8001d0e <receive_at_scheduled_time+0xb6>

	return true;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	10624dd3 	.word	0x10624dd3

08001d1c <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8001d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d20:	b08a      	sub	sp, #40	; 0x28
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	60b9      	str	r1, [r7, #8]
 8001d28:	603b      	str	r3, [r7, #0]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	2202      	movs	r2, #2
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	4a29      	ldr	r2, [pc, #164]	; (8001de0 <calculate_rx_timings+0xc4>)
 8001d3a:	fb02 f303 	mul.w	r3, r2, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8001d52:	fb02 f303 	mul.w	r3, r2, r3
 8001d56:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	6a3b      	ldr	r3, [r7, #32]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	009a      	lsls	r2, r3, #2
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	0fd9      	lsrs	r1, r3, #31
 8001d6a:	440b      	add	r3, r1
 8001d6c:	105b      	asrs	r3, r3, #1
 8001d6e:	425b      	negs	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	17da      	asrs	r2, r3, #31
 8001d78:	469a      	mov	sl, r3
 8001d7a:	4693      	mov	fp, r2
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	2200      	movs	r2, #0
 8001d82:	4698      	mov	r8, r3
 8001d84:	4691      	mov	r9, r2
 8001d86:	fb08 f20b 	mul.w	r2, r8, fp
 8001d8a:	fb0a f309 	mul.w	r3, sl, r9
 8001d8e:	4413      	add	r3, r2
 8001d90:	fbaa 4508 	umull	r4, r5, sl, r8
 8001d94:	442b      	add	r3, r5
 8001d96:	461d      	mov	r5, r3
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <calculate_rx_timings+0xc4>)
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	4620      	mov	r0, r4
 8001da0:	4629      	mov	r1, r5
 8001da2:	f7fe fa6d 	bl	8000280 <__aeabi_ldivmod>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	4613      	mov	r3, r2
 8001dac:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db2:	68fa      	ldr	r2, [r7, #12]
 8001db4:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 8001db8:	fb03 f202 	mul.w	r2, r3, r2
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	441a      	add	r2, r3
 8001dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dc6:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dcc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	3728      	adds	r7, #40	; 0x28
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001de0:	000f4240 	.word	0x000f4240

08001de4 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af02      	add	r7, sp, #8
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
 8001df0:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	2207      	movs	r2, #7
 8001e08:	49ab      	ldr	r1, [pc, #684]	; (80020b8 <receive_package+0x2d4>)
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff ff86 	bl	8001d1c <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8001e10:	6a3b      	ldr	r3, [r7, #32]
 8001e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e16:	d306      	bcc.n	8001e26 <receive_package+0x42>
 8001e18:	4ba8      	ldr	r3, [pc, #672]	; (80020bc <receive_package+0x2d8>)
 8001e1a:	4aa9      	ldr	r2, [pc, #676]	; (80020c0 <receive_package+0x2dc>)
 8001e1c:	f240 11c5 	movw	r1, #453	; 0x1c5
 8001e20:	48a8      	ldr	r0, [pc, #672]	; (80020c4 <receive_package+0x2e0>)
 8001e22:	f004 fd75 	bl	8006910 <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8001e26:	2272      	movs	r2, #114	; 0x72
 8001e28:	211d      	movs	r1, #29
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff f9b6 	bl	800119c <write_register>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f083 0301 	eor.w	r3, r3, #1
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <receive_package+0x5c>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e136      	b.n	80020ae <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	0a1b      	lsrs	r3, r3, #8
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	211e      	movs	r1, #30
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	f7ff f9a0 	bl	800119c <write_register>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f083 0301 	eor.w	r3, r3, #1
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <receive_package+0x88>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	e120      	b.n	80020ae <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8001e6c:	2204      	movs	r2, #4
 8001e6e:	2126      	movs	r1, #38	; 0x26
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f7ff f993 	bl	800119c <write_register>
 8001e76:	4603      	mov	r3, r0
 8001e78:	f083 0301 	eor.w	r3, r3, #1
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <receive_package+0xa2>
 8001e82:	2300      	movs	r3, #0
 8001e84:	e113      	b.n	80020ae <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 8001e86:	6a3b      	ldr	r3, [r7, #32]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	211f      	movs	r1, #31
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f7ff f984 	bl	800119c <write_register>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f083 0301 	eor.w	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <receive_package+0xc0>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	e104      	b.n	80020ae <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8001ea4:	2267      	movs	r2, #103	; 0x67
 8001ea6:	2133      	movs	r1, #51	; 0x33
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	f7ff f977 	bl	800119c <write_register>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f083 0301 	eor.w	r3, r3, #1
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <receive_package+0xda>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e0f7      	b.n	80020ae <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8001ebe:	2219      	movs	r2, #25
 8001ec0:	213b      	movs	r1, #59	; 0x3b
 8001ec2:	68f8      	ldr	r0, [r7, #12]
 8001ec4:	f7ff f96a 	bl	800119c <write_register>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f083 0301 	eor.w	r3, r3, #1
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <receive_package+0xf4>
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e0ea      	b.n	80020ae <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f7ff febb 	bl	8001c58 <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f7ff fac2 	bl	800146c <wait_for_rx_irqs>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f083 0301 	eor.w	r3, r3, #1
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d07a      	beq.n	8001fea <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001ef4:	2280      	movs	r2, #128	; 0x80
 8001ef6:	2101      	movs	r1, #1
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff f94f 	bl	800119c <write_register>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f083 0301 	eor.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <receive_package+0x12a>
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e0cf      	b.n	80020ae <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d166      	bne.n	8001fe6 <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	9301      	str	r3, [sp, #4]
 8001f1e:	f107 0318 	add.w	r3, r7, #24
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	220c      	movs	r2, #12
 8001f28:	4963      	ldr	r1, [pc, #396]	; (80020b8 <receive_package+0x2d4>)
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f7ff fef6 	bl	8001d1c <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8001f30:	4965      	ldr	r1, [pc, #404]	; (80020c8 <receive_package+0x2e4>)
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff f9e4 	bl	8001300 <configure_frequency>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	f083 0301 	eor.w	r3, r3, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <receive_package+0x164>
 8001f44:	2300      	movs	r3, #0
 8001f46:	e0b2      	b.n	80020ae <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 8001f48:	22c2      	movs	r2, #194	; 0xc2
 8001f4a:	211d      	movs	r1, #29
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f7ff f925 	bl	800119c <write_register>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f083 0301 	eor.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <receive_package+0x17e>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e0a5      	b.n	80020ae <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0303 	and.w	r3, r3, #3
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	f043 0374 	orr.w	r3, r3, #116	; 0x74
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	461a      	mov	r2, r3
 8001f76:	211e      	movs	r1, #30
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff f90f 	bl	800119c <write_register>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <receive_package+0x1aa>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e08f      	b.n	80020ae <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8001f8e:	2204      	movs	r2, #4
 8001f90:	2126      	movs	r1, #38	; 0x26
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff f902 	bl	800119c <write_register>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <receive_package+0x1c4>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e082      	b.n	80020ae <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	461a      	mov	r2, r3
 8001fae:	211f      	movs	r1, #31
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f7ff f8f3 	bl	800119c <write_register>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f083 0301 	eor.w	r3, r3, #1
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <receive_package+0x1e2>
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	e073      	b.n	80020ae <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fe44 	bl	8001c58 <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f7ff fa4b 	bl	800146c <wait_for_rx_irqs>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	f083 0301 	eor.w	r3, r3, #1
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e063      	b.n	80020ae <receive_package+0x2ca>
			}
		}

		return true;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e061      	b.n	80020ae <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 8001fea:	f107 021f 	add.w	r2, r7, #31
 8001fee:	2301      	movs	r3, #1
 8001ff0:	2112      	movs	r1, #18
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f7ff f896 	bl	8001124 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 8001ff8:	7ffb      	ldrb	r3, [r7, #31]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <receive_package+0x222>
		return true;
 8002002:	2301      	movs	r3, #1
 8002004:	e053      	b.n	80020ae <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 8002006:	f107 021e 	add.w	r2, r7, #30
 800200a:	2301      	movs	r3, #1
 800200c:	2119      	movs	r1, #25
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f7ff f888 	bl	8001124 <read_register>
 8002014:	4603      	mov	r3, r0
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <receive_package+0x240>
 8002020:	2300      	movs	r3, #0
 8002022:	e044      	b.n	80020ae <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8002024:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da00      	bge.n	800202e <receive_package+0x24a>
 800202c:	3303      	adds	r3, #3
 800202e:	109b      	asrs	r3, r3, #2
 8002030:	b25a      	sxtb	r2, r3
 8002032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002034:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 8002036:	f107 021d 	add.w	r2, r7, #29
 800203a:	2301      	movs	r3, #1
 800203c:	2113      	movs	r1, #19
 800203e:	68f8      	ldr	r0, [r7, #12]
 8002040:	f7ff f870 	bl	8001124 <read_register>
 8002044:	4603      	mov	r3, r0
 8002046:	f083 0301 	eor.w	r3, r3, #1
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <receive_package+0x270>
 8002050:	2300      	movs	r3, #0
 8002052:	e02c      	b.n	80020ae <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 8002054:	2200      	movs	r2, #0
 8002056:	210d      	movs	r1, #13
 8002058:	68f8      	ldr	r0, [r7, #12]
 800205a:	f7ff f89f 	bl	800119c <write_register>
 800205e:	4603      	mov	r3, r0
 8002060:	f083 0301 	eor.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <receive_package+0x28a>
 800206a:	2300      	movs	r3, #0
 800206c:	e01f      	b.n	80020ae <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 800206e:	7f7b      	ldrb	r3, [r7, #29]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	2100      	movs	r1, #0
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	f7ff f855 	bl	8001124 <read_register>
 800207a:	4603      	mov	r3, r0
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <receive_package+0x2a6>
 8002086:	2300      	movs	r3, #0
 8002088:	e011      	b.n	80020ae <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	2101      	movs	r1, #1
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f7ff f884 	bl	800119c <write_register>
 8002094:	4603      	mov	r3, r0
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <receive_package+0x2c0>
 80020a0:	2300      	movs	r3, #0
 80020a2:	e004      	b.n	80020ae <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 80020a4:	7f7b      	ldrb	r3, [r7, #29]
 80020a6:	461a      	mov	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	601a      	str	r2, [r3, #0]
	return true;
 80020ac:	2301      	movs	r3, #1
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3728      	adds	r7, #40	; 0x28
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	0001e848 	.word	0x0001e848
 80020bc:	08007c3c 	.word	0x08007c3c
 80020c0:	08007d38 	.word	0x08007d38
 80020c4:	08007a00 	.word	0x08007a00
 80020c8:	33d3e608 	.word	0x33d3e608

080020cc <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	4619      	mov	r1, r3
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff f96a 	bl	80013b8 <configure_channel>
 80020e4:	4603      	mov	r3, r0
 80020e6:	f083 0301 	eor.w	r3, r3, #1
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <send_package+0x28>
 80020f0:	2300      	movs	r3, #0
 80020f2:	e0d8      	b.n	80022a6 <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 80020f4:	2272      	movs	r2, #114	; 0x72
 80020f6:	211d      	movs	r1, #29
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f7ff f84f 	bl	800119c <write_register>
 80020fe:	4603      	mov	r3, r0
 8002100:	f083 0301 	eor.w	r3, r3, #1
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <send_package+0x42>
 800210a:	2300      	movs	r3, #0
 800210c:	e0cb      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 800210e:	2274      	movs	r2, #116	; 0x74
 8002110:	211e      	movs	r1, #30
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7ff f842 	bl	800119c <write_register>
 8002118:	4603      	mov	r3, r0
 800211a:	f083 0301 	eor.w	r3, r3, #1
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <send_package+0x5c>
 8002124:	2300      	movs	r3, #0
 8002126:	e0be      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 8002128:	2204      	movs	r2, #4
 800212a:	2126      	movs	r1, #38	; 0x26
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff f835 	bl	800119c <write_register>
 8002132:	4603      	mov	r3, r0
 8002134:	f083 0301 	eor.w	r3, r3, #1
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <send_package+0x76>
 800213e:	2300      	movs	r3, #0
 8002140:	e0b1      	b.n	80022a6 <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 8002142:	2227      	movs	r2, #39	; 0x27
 8002144:	2133      	movs	r1, #51	; 0x33
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7ff f828 	bl	800119c <write_register>
 800214c:	4603      	mov	r3, r0
 800214e:	f083 0301 	eor.w	r3, r3, #1
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <send_package+0x90>
 8002158:	2300      	movs	r3, #0
 800215a:	e0a4      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 800215c:	221d      	movs	r2, #29
 800215e:	213b      	movs	r1, #59	; 0x3b
 8002160:	68f8      	ldr	r0, [r7, #12]
 8002162:	f7ff f81b 	bl	800119c <write_register>
 8002166:	4603      	mov	r3, r0
 8002168:	f083 0301 	eor.w	r3, r3, #1
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <send_package+0xaa>
 8002172:	2300      	movs	r3, #0
 8002174:	e097      	b.n	80022a6 <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	2122      	movs	r1, #34	; 0x22
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff f80c 	bl	800119c <write_register>
 8002184:	4603      	mov	r3, r0
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <send_package+0xc8>
 8002190:	2300      	movs	r3, #0
 8002192:	e088      	b.n	80022a6 <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	2140      	movs	r1, #64	; 0x40
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f7fe ffff 	bl	800119c <write_register>
 800219e:	4603      	mov	r3, r0
 80021a0:	f083 0301 	eor.w	r3, r3, #1
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <send_package+0xe2>
 80021aa:	2300      	movs	r3, #0
 80021ac:	e07b      	b.n	80022a6 <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80021ae:	22ff      	movs	r2, #255	; 0xff
 80021b0:	2112      	movs	r1, #18
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7fe fff2 	bl	800119c <write_register>
 80021b8:	4603      	mov	r3, r0
 80021ba:	f083 0301 	eor.w	r3, r3, #1
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <send_package+0xfc>
 80021c4:	2300      	movs	r3, #0
 80021c6:	e06e      	b.n	80022a6 <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 80021d8:	2281      	movs	r2, #129	; 0x81
 80021da:	2101      	movs	r1, #1
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7fe ffdd 	bl	800119c <write_register>
 80021e2:	4603      	mov	r3, r0
 80021e4:	f083 0301 	eor.w	r3, r3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <send_package+0x126>
 80021ee:	2300      	movs	r3, #0
 80021f0:	e059      	b.n	80022a6 <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 80021f2:	220a      	movs	r2, #10
 80021f4:	2102      	movs	r1, #2
 80021f6:	68f8      	ldr	r0, [r7, #12]
 80021f8:	f7ff f908 	bl	800140c <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 80021fc:	2280      	movs	r2, #128	; 0x80
 80021fe:	210d      	movs	r1, #13
 8002200:	68f8      	ldr	r0, [r7, #12]
 8002202:	f7fe ffcb 	bl	800119c <write_register>
 8002206:	4603      	mov	r3, r0
 8002208:	f083 0301 	eor.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <send_package+0x14a>
 8002212:	2300      	movs	r3, #0
 8002214:	e047      	b.n	80022a6 <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
 800221a:	e00b      	b.n	8002234 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	4413      	add	r3, r2
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	461a      	mov	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f7fe ffb7 	bl	800119c <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	3301      	adds	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	429a      	cmp	r2, r3
 800223a:	d3ef      	bcc.n	800221c <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 800223c:	2283      	movs	r2, #131	; 0x83
 800223e:	2101      	movs	r1, #1
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f7fe ffab 	bl	800119c <write_register>
 8002246:	4603      	mov	r3, r0
 8002248:	f083 0301 	eor.w	r3, r3, #1
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <send_package+0x18a>
 8002252:	2300      	movs	r3, #0
 8002254:	e027      	b.n	80022a6 <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 8002256:	2264      	movs	r2, #100	; 0x64
 8002258:	2100      	movs	r1, #0
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff f8d6 	bl	800140c <wait_for_irq>
 8002260:	4603      	mov	r3, r0
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <send_package+0x1a4>
 800226c:	2300      	movs	r3, #0
 800226e:	e01a      	b.n	80022a6 <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 800227a:	2280      	movs	r2, #128	; 0x80
 800227c:	2101      	movs	r1, #1
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7fe ff8c 	bl	800119c <write_register>
 8002284:	4603      	mov	r3, r0
 8002286:	f083 0301 	eor.w	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <send_package+0x1c8>
 8002290:	2300      	movs	r3, #0
 8002292:	e008      	b.n	80022a6 <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800229a:	3301      	adds	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	return true;
 80022a4:	2301      	movs	r3, #1
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 80022b0:	b590      	push	{r4, r7, lr}
 80022b2:	b08d      	sub	sp, #52	; 0x34
 80022b4:	af04      	add	r7, sp, #16
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
 80022bc:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	330d      	adds	r3, #13
 80022c6:	2b40      	cmp	r3, #64	; 0x40
 80022c8:	d906      	bls.n	80022d8 <encode_phy_payload+0x28>
 80022ca:	4b51      	ldr	r3, [pc, #324]	; (8002410 <encode_phy_payload+0x160>)
 80022cc:	4a51      	ldr	r2, [pc, #324]	; (8002414 <encode_phy_payload+0x164>)
 80022ce:	f44f 7114 	mov.w	r1, #592	; 0x250
 80022d2:	4851      	ldr	r0, [pc, #324]	; (8002418 <encode_phy_payload+0x168>)
 80022d4:	f004 fb1c 	bl	8006910 <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2240      	movs	r2, #64	; 0x40
 80022dc:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	7d52      	ldrb	r2, [r2, #21]
 80022e6:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	3302      	adds	r3, #2
 80022ec:	68fa      	ldr	r2, [r7, #12]
 80022ee:	7d12      	ldrb	r2, [r2, #20]
 80022f0:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	3303      	adds	r3, #3
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	7cd2      	ldrb	r2, [r2, #19]
 80022fa:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	3304      	adds	r3, #4
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	7c92      	ldrb	r2, [r2, #18]
 8002304:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3305      	adds	r3, #5
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	3306      	adds	r3, #6
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002322:	0a1b      	lsrs	r3, r3, #8
 8002324:	b29a      	uxth	r2, r3
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	3307      	adds	r3, #7
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3308      	adds	r3, #8
 8002332:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002336:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	3309      	adds	r3, #9
 800233c:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4618      	mov	r0, r3
 800234a:	f004 fb4b 	bl	80069e4 <memcpy>
	if (port == 0) {
 800234e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	18d0      	adds	r0, r2, r3
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2d9      	uxtb	r1, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8002366:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3316      	adds	r3, #22
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002370:	9201      	str	r2, [sp, #4]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2300      	movs	r3, #0
 8002376:	4622      	mov	r2, r4
 8002378:	f7fe fbf3 	bl	8000b62 <Encrypt_Payload>
 800237c:	e012      	b.n	80023a4 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	18d0      	adds	r0, r2, r3
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2d9      	uxtb	r1, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800238e:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3326      	adds	r3, #38	; 0x26
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 8002398:	9201      	str	r2, [sp, #4]
 800239a:	9300      	str	r3, [sp, #0]
 800239c:	2300      	movs	r3, #0
 800239e:	4622      	mov	r2, r4
 80023a0:	f7fe fbdf 	bl	8000b62 <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	4413      	add	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	b2d8      	uxtb	r0, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80023b6:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	3316      	adds	r3, #22
 80023bc:	68fa      	ldr	r2, [r7, #12]
 80023be:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 80023c0:	f107 0114 	add.w	r1, r7, #20
 80023c4:	9202      	str	r2, [sp, #8]
 80023c6:	9301      	str	r3, [sp, #4]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	4623      	mov	r3, r4
 80023ce:	4602      	mov	r2, r0
 80023d0:	68b8      	ldr	r0, [r7, #8]
 80023d2:	f7fe fc7b 	bl	8000ccc <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	77fb      	strb	r3, [r7, #31]
 80023da:	e00d      	b.n	80023f8 <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 80023dc:	7ffa      	ldrb	r2, [r7, #31]
 80023de:	7ff9      	ldrb	r1, [r7, #31]
 80023e0:	69bb      	ldr	r3, [r7, #24]
 80023e2:	440b      	add	r3, r1
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	440b      	add	r3, r1
 80023e8:	3220      	adds	r2, #32
 80023ea:	443a      	add	r2, r7
 80023ec:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80023f0:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	3301      	adds	r3, #1
 80023f6:	77fb      	strb	r3, [r7, #31]
 80023f8:	7ffb      	ldrb	r3, [r7, #31]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d9ee      	bls.n	80023dc <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	3304      	adds	r3, #4
 8002402:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002404:	69bb      	ldr	r3, [r7, #24]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}
 800240e:	bf00      	nop
 8002410:	08007c58 	.word	0x08007c58
 8002414:	08007d48 	.word	0x08007d48
 8002418:	08007a00 	.word	0x08007a00

0800241c <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b08d      	sub	sp, #52	; 0x34
 8002420:	af04      	add	r7, sp, #16
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	4613      	mov	r3, r2
 800242a:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b60      	cmp	r3, #96	; 0x60
 8002432:	d001      	beq.n	8002438 <decode_phy_payload+0x1c>
		return false;
 8002434:	2300      	movs	r3, #0
 8002436:	e0aa      	b.n	800258e <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	3301      	adds	r3, #1
 800243c:	781a      	ldrb	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	7d5b      	ldrb	r3, [r3, #21]
 8002442:	429a      	cmp	r2, r3
 8002444:	d114      	bne.n	8002470 <decode_phy_payload+0x54>
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	3302      	adds	r3, #2
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	7d1b      	ldrb	r3, [r3, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	d10d      	bne.n	8002470 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3303      	adds	r3, #3
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 800245e:	429a      	cmp	r2, r3
 8002460:	d106      	bne.n	8002470 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3304      	adds	r3, #4
 8002466:	781a      	ldrb	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	7c9b      	ldrb	r3, [r3, #18]
 800246c:	429a      	cmp	r2, r3
 800246e:	d001      	beq.n	8002474 <decode_phy_payload+0x58>
		return false;
 8002470:	2300      	movs	r3, #0
 8002472:	e08c      	b.n	800258e <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	795b      	ldrb	r3, [r3, #5]
 8002478:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 800247a:	7ffb      	ldrb	r3, [r7, #31]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	3307      	adds	r3, #7
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	021b      	lsls	r3, r3, #8
 800248a:	b21a      	sxth	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3306      	adds	r3, #6
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b21b      	sxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	b21b      	sxth	r3, r3
 8002498:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80024a0:	8bba      	ldrh	r2, [r7, #28]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d201      	bcs.n	80024aa <decode_phy_payload+0x8e>
		return false;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e071      	b.n	800258e <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8bba      	ldrh	r2, [r7, #28]
 80024ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 80024b2:	79fb      	ldrb	r3, [r7, #7]
 80024b4:	3b04      	subs	r3, #4
 80024b6:	b2d8      	uxtb	r0, r3
 80024b8:	8bbc      	ldrh	r4, [r7, #28]
	              handle->network_session_key, handle->device_address);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	3316      	adds	r3, #22
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 80024c2:	f107 0114 	add.w	r1, r7, #20
 80024c6:	9202      	str	r2, [sp, #8]
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2301      	movs	r3, #1
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	4623      	mov	r3, r4
 80024d0:	4602      	mov	r2, r0
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7fe fbfa 	bl	8000ccc <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	3b04      	subs	r3, #4
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	18d1      	adds	r1, r2, r3
 80024e0:	f107 0314 	add.w	r3, r7, #20
 80024e4:	2204      	movs	r2, #4
 80024e6:	4618      	mov	r0, r3
 80024e8:	f004 fa6c 	bl	80069c4 <memcmp>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <decode_phy_payload+0xda>
		return false;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e04b      	b.n	800258e <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	f1a3 020c 	sub.w	r2, r3, #12
 80024fc:	7fbb      	ldrb	r3, [r7, #30]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d10b      	bne.n	800251a <decode_phy_payload+0xfe>
		*frame_port = 0;
 8002502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f103 0208 	add.w	r2, r3, #8
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8002512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002514:	7fba      	ldrb	r2, [r7, #30]
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e038      	b.n	800258c <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	7a1a      	ldrb	r2, [r3, #8]
 800251e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002520:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8002522:	7fbb      	ldrb	r3, [r7, #30]
 8002524:	3309      	adds	r3, #9
 8002526:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	3b04      	subs	r3, #4
 800252c:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 800252e:	7eba      	ldrb	r2, [r7, #26]
 8002530:	7efb      	ldrb	r3, [r7, #27]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10f      	bne.n	800255e <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800253e:	7efb      	ldrb	r3, [r7, #27]
 8002540:	68ba      	ldr	r2, [r7, #8]
 8002542:	18d0      	adds	r0, r2, r3
 8002544:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->network_session_key, handle->device_address);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3316      	adds	r3, #22
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800254e:	7e79      	ldrb	r1, [r7, #25]
 8002550:	9201      	str	r2, [sp, #4]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	2301      	movs	r3, #1
 8002556:	4622      	mov	r2, r4
 8002558:	f7fe fb03 	bl	8000b62 <Encrypt_Payload>
 800255c:	e00e      	b.n	800257c <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800255e:	7efb      	ldrb	r3, [r7, #27]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	18d0      	adds	r0, r2, r3
 8002564:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->application_session_key, handle->device_address);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	3326      	adds	r3, #38	; 0x26
 800256a:	68fa      	ldr	r2, [r7, #12]
 800256c:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 800256e:	7e79      	ldrb	r1, [r7, #25]
 8002570:	9201      	str	r2, [sp, #4]
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2301      	movs	r3, #1
 8002576:	4622      	mov	r2, r4
 8002578:	f7fe faf3 	bl	8000b62 <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 800257c:	7efb      	ldrb	r3, [r7, #27]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	441a      	add	r2, r3
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	7e7a      	ldrb	r2, [r7, #25]
 800258a:	701a      	strb	r2, [r3, #0]
	}

	return true;
 800258c:	2301      	movs	r3, #1
}
 800258e:	4618      	mov	r0, r3
 8002590:	3724      	adds	r7, #36	; 0x24
 8002592:	46bd      	mov	sp, r7
 8002594:	bd90      	pop	{r4, r7, pc}

08002596 <select_random_channel>:

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b084      	sub	sp, #16
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 80025a2:	2300      	movs	r3, #0
 80025a4:	73bb      	strb	r3, [r7, #14]
 80025a6:	e010      	b.n	80025ca <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80025ae:	461a      	mov	r2, r3
 80025b0:	7bbb      	ldrb	r3, [r7, #14]
 80025b2:	fa42 f303 	asr.w	r3, r2, r3
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d002      	beq.n	80025c4 <select_random_channel+0x2e>
			channel_count++;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	3301      	adds	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	3301      	adds	r3, #1
 80025c8:	73bb      	strb	r3, [r7, #14]
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	2b0f      	cmp	r3, #15
 80025ce:	d9eb      	bls.n	80025a8 <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025d4:	7bfa      	ldrb	r2, [r7, #15]
 80025d6:	4610      	mov	r0, r2
 80025d8:	4798      	blx	r3
 80025da:	4603      	mov	r3, r0
 80025dc:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 80025de:	2300      	movs	r3, #0
 80025e0:	733b      	strb	r3, [r7, #12]
 80025e2:	e015      	b.n	8002610 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 80025ea:	461a      	mov	r2, r3
 80025ec:	7b3b      	ldrb	r3, [r7, #12]
 80025ee:	fa42 f303 	asr.w	r3, r2, r3
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d007      	beq.n	800260a <select_random_channel+0x74>
			if (random_channel == 0) {
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <select_random_channel+0x6e>
				return i;
 8002600:	7b3b      	ldrb	r3, [r7, #12]
 8002602:	e009      	b.n	8002618 <select_random_channel+0x82>
			} else {
				random_channel--;
 8002604:	7b7b      	ldrb	r3, [r7, #13]
 8002606:	3b01      	subs	r3, #1
 8002608:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 800260a:	7b3b      	ldrb	r3, [r7, #12]
 800260c:	3301      	adds	r3, #1
 800260e:	733b      	strb	r3, [r7, #12]
 8002610:	7b3b      	ldrb	r3, [r7, #12]
 8002612:	2b0f      	cmp	r3, #15
 8002614:	d9e6      	bls.n	80025e4 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b0aa      	sub	sp, #168	; 0xa8
 8002624:	af02      	add	r7, sp, #8
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 800262c:	2300      	movs	r3, #0
 800262e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002630:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002634:	223c      	movs	r2, #60	; 0x3c
 8002636:	2100      	movs	r1, #0
 8002638:	4618      	mov	r0, r3
 800263a:	f004 f9e1 	bl	8006a00 <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 800263e:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002642:	2301      	movs	r3, #1
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68ba      	ldr	r2, [r7, #8]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff fe30 	bl	80022b0 <encode_phy_payload>
 8002650:	4603      	mov	r3, r0
 8002652:	65bb      	str	r3, [r7, #88]	; 0x58

	uint8_t random_channel = select_random_channel(handle);
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f7ff ff9e 	bl	8002596 <select_random_channel>
 800265a:	4603      	mov	r3, r0
 800265c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002660:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002662:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002666:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800266a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	4603      	mov	r3, r0
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff fd2a 	bl	80020cc <send_package>
 8002678:	4603      	mov	r3, r0
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d006      	beq.n	8002692 <rfm95_send_receive_cycle+0x72>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002684:	2280      	movs	r2, #128	; 0x80
 8002686:	2101      	movs	r1, #1
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fe fd87 	bl	800119c <write_register>
		return false;
 800268e:	2300      	movs	r3, #0
 8002690:	e0af      	b.n	80027f2 <rfm95_send_receive_cycle+0x1d2>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002692:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f004 f9b0 	bl	8006a00 <memset>
	phy_payload_len = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	65bb      	str	r3, [r7, #88]	; 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 8096 	beq.w	80027dc <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 80026b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80026b2:	f107 0058 	add.w	r0, r7, #88	; 0x58
 80026b6:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80026ba:	f107 0353 	add.w	r3, r7, #83	; 0x53
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	4603      	mov	r3, r0
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f7ff fb8e 	bl	8001de4 <receive_package>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f083 0301 	eor.w	r3, r3, #1
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80026d4:	2280      	movs	r2, #128	; 0x80
 80026d6:	2101      	movs	r1, #1
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7fe fd5f 	bl	800119c <write_register>
			if (handle->save_config) {
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d005      	beq.n	80026f2 <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	3260      	adds	r2, #96	; 0x60
 80026ee:	4610      	mov	r0, r2
 80026f0:	4798      	blx	r3
			}
			return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e07d      	b.n	80027f2 <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 80026f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d06f      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 8002702:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002704:	b2da      	uxtb	r2, r3
 8002706:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 800270a:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800270e:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4603      	mov	r3, r0
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f7ff fe7d 	bl	800241c <decode_phy_payload>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d059      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 8002728:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800272c:	2b00      	cmp	r3, #0
 800272e:	d155      	bne.n	80027dc <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8002730:	2300      	movs	r3, #0
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	f107 0318 	add.w	r3, r7, #24
 8002738:	222f      	movs	r2, #47	; 0x2f
 800273a:	2100      	movs	r1, #0
 800273c:	4618      	mov	r0, r3
 800273e:	f004 f95f 	bl	8006a00 <memset>
					uint8_t mac_response_len = 0;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 8002748:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800274a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800274e:	4618      	mov	r0, r3
 8002750:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8002754:	f107 0214 	add.w	r2, r7, #20
 8002758:	9301      	str	r3, [sp, #4]
 800275a:	f107 0349 	add.w	r3, r7, #73	; 0x49
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	4613      	mov	r3, r2
 8002762:	4602      	mov	r2, r0
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff f87f 	bl	8001868 <process_mac_commands>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d035      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8002770:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002774:	2b00      	cmp	r3, #0
 8002776:	d031      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 8002778:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800277c:	4618      	mov	r0, r3
 800277e:	f107 0214 	add.w	r2, r7, #20
 8002782:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8002786:	2300      	movs	r3, #0
 8002788:	9300      	str	r3, [sp, #0]
 800278a:	4603      	mov	r3, r0
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f7ff fd8f 	bl	80022b0 <encode_phy_payload>
 8002792:	4603      	mov	r3, r0
 8002794:	65bb      	str	r3, [r7, #88]	; 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 8002796:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002798:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 800279c:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 80027a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	4603      	mov	r3, r0
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff fc8f 	bl	80020cc <send_package>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f083 0301 	eor.w	r3, r3, #1
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <rfm95_send_receive_cycle+0x1bc>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	2101      	movs	r1, #1
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f7fe fcec 	bl	800119c <write_register>
							if (handle->save_config) {
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d005      	beq.n	80027d8 <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	3260      	adds	r2, #96	; 0x60
 80027d4:	4610      	mov	r0, r2
 80027d6:	4798      	blx	r3
							}
							return false;
 80027d8:	2300      	movs	r3, #0
			return false;
 80027da:	e00a      	b.n	80027f2 <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d005      	beq.n	80027f0 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	3260      	adds	r2, #96	; 0x60
 80027ec:	4610      	mov	r0, r2
 80027ee:	4798      	blx	r3
	}

	return true;
 80027f0:	2301      	movs	r3, #1
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	37a0      	adds	r7, #160	; 0xa0
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027fc:	b5b0      	push	{r4, r5, r7, lr}
 80027fe:	b0b2      	sub	sp, #200	; 0xc8
 8002800:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002802:	f000 fd3b 	bl	800327c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002806:	f000 f887 	bl	8002918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800280a:	f000 f9af 	bl	8002b6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800280e:	f000 f97d 	bl	8002b0c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8002812:	f000 f8d3 	bl	80029bc <MX_I2C3_Init>
  MX_SPI1_Init();
 8002816:	f000 f93d 	bl	8002a94 <MX_SPI1_Init>
  MX_LPTIM1_Init();
 800281a:	f000 f90f 	bl	8002a3c <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */
	rfm95_handle_t rfm95_handle =
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	22b8      	movs	r2, #184	; 0xb8
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f004 f8eb 	bl	8006a00 <memset>
 800282a:	4b2d      	ldr	r3, [pc, #180]	; (80028e0 <main+0xe4>)
 800282c:	607b      	str	r3, [r7, #4]
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <main+0xe8>)
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	2340      	movs	r3, #64	; 0x40
 8002834:	81bb      	strh	r3, [r7, #12]
 8002836:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	2301      	movs	r3, #1
 800283e:	82bb      	strh	r3, [r7, #20]
 8002840:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <main+0xec>)
 8002842:	f107 0316 	add.w	r3, r7, #22
 8002846:	6810      	ldr	r0, [r2, #0]
 8002848:	6018      	str	r0, [r3, #0]
 800284a:	4b28      	ldr	r3, [pc, #160]	; (80028ec <main+0xf0>)
 800284c:	f107 041a 	add.w	r4, r7, #26
 8002850:	461d      	mov	r5, r3
 8002852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002854:	6020      	str	r0, [r4, #0]
 8002856:	6061      	str	r1, [r4, #4]
 8002858:	60a2      	str	r2, [r4, #8]
 800285a:	60e3      	str	r3, [r4, #12]
 800285c:	4b24      	ldr	r3, [pc, #144]	; (80028f0 <main+0xf4>)
 800285e:	f107 042a 	add.w	r4, r7, #42	; 0x2a
 8002862:	461d      	mov	r5, r3
 8002864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002866:	6020      	str	r0, [r4, #0]
 8002868:	6061      	str	r1, [r4, #4]
 800286a:	60a2      	str	r2, [r4, #8]
 800286c:	60e3      	str	r3, [r4, #12]
 800286e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002874:	f241 3388 	movw	r3, #5000	; 0x1388
 8002878:	643b      	str	r3, [r7, #64]	; 0x40
 800287a:	2302      	movs	r3, #2
 800287c:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <main+0xf8>)
 8002882:	64bb      	str	r3, [r7, #72]	; 0x48
 8002884:	4b1c      	ldr	r3, [pc, #112]	; (80028f8 <main+0xfc>)
 8002886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002888:	4b1c      	ldr	r3, [pc, #112]	; (80028fc <main+0x100>)
 800288a:	653b      	str	r3, [r7, #80]	; 0x50
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <main+0x104>)
 800288e:	657b      	str	r3, [r7, #84]	; 0x54
							    .get_battery_level = get_battery_level};



	// Initialise RFM95 module.
	if (!rfm95_init(&rfm95_handle)) {
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	4618      	mov	r0, r3
 8002894:	f7fe fe92 	bl	80015bc <rfm95_init>
 8002898:	4603      	mov	r3, r0
 800289a:	f083 0301 	eor.w	r3, r3, #1
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <main+0xb0>
		printf("RFM95 init failed\n\r");
 80028a4:	4817      	ldr	r0, [pc, #92]	; (8002904 <main+0x108>)
 80028a6:	f004 fba1 	bl	8006fec <iprintf>
 80028aa:	e002      	b.n	80028b2 <main+0xb6>
	}else {
		printf("RFM95 init sucess\n\r");
 80028ac:	4816      	ldr	r0, [pc, #88]	; (8002908 <main+0x10c>)
 80028ae:	f004 fb9d 	bl	8006fec <iprintf>
	}

	uint8_t data_packet[] = { 0x01, 0x02, 0x03, 0x4 };
 80028b2:	4b16      	ldr	r3, [pc, #88]	; (800290c <main+0x110>)
 80028b4:	603b      	str	r3, [r7, #0]

	if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet,
 80028b6:	4639      	mov	r1, r7
 80028b8:	1d3b      	adds	r3, r7, #4
 80028ba:	2204      	movs	r2, #4
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff feaf 	bl	8002620 <rfm95_send_receive_cycle>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f083 0301 	eor.w	r3, r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <main+0xda>
			sizeof(data_packet))) {
		printf("RFM95 send failed\n\r");
 80028ce:	4810      	ldr	r0, [pc, #64]	; (8002910 <main+0x114>)
 80028d0:	f004 fb8c 	bl	8006fec <iprintf>
 80028d4:	e002      	b.n	80028dc <main+0xe0>
	} else {
		printf("RFM95 send success\n\r");
 80028d6:	480f      	ldr	r0, [pc, #60]	; (8002914 <main+0x118>)
 80028d8:	f004 fb88 	bl	8006fec <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {
 80028dc:	e7fe      	b.n	80028dc <main+0xe0>
 80028de:	bf00      	nop
 80028e0:	20000220 	.word	0x20000220
 80028e4:	48000400 	.word	0x48000400
 80028e8:	08007cd0 	.word	0x08007cd0
 80028ec:	08007cd4 	.word	0x08007cd4
 80028f0:	08007ce4 	.word	0x08007ce4
 80028f4:	08002c61 	.word	0x08002c61
 80028f8:	08002c91 	.word	0x08002c91
 80028fc:	08002d49 	.word	0x08002d49
 8002900:	08002d61 	.word	0x08002d61
 8002904:	08007c7c 	.word	0x08007c7c
 8002908:	08007c90 	.word	0x08007c90
 800290c:	04030201 	.word	0x04030201
 8002910:	08007ca4 	.word	0x08007ca4
 8002914:	08007cb8 	.word	0x08007cb8

08002918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b096      	sub	sp, #88	; 0x58
 800291c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	2244      	movs	r2, #68	; 0x44
 8002924:	2100      	movs	r1, #0
 8002926:	4618      	mov	r0, r3
 8002928:	f004 f86a 	bl	8006a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800292c:	463b      	mov	r3, r7
 800292e:	2200      	movs	r2, #0
 8002930:	601a      	str	r2, [r3, #0]
 8002932:	605a      	str	r2, [r3, #4]
 8002934:	609a      	str	r2, [r3, #8]
 8002936:	60da      	str	r2, [r3, #12]
 8002938:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800293a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800293e:	f001 f9b9 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002948:	f000 fa12 	bl	8002d70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800294c:	2302      	movs	r3, #2
 800294e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002950:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002954:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002956:	2340      	movs	r3, #64	; 0x40
 8002958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800295a:	2302      	movs	r3, #2
 800295c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800295e:	2302      	movs	r3, #2
 8002960:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002962:	2301      	movs	r3, #1
 8002964:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002966:	230a      	movs	r3, #10
 8002968:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800296a:	2307      	movs	r3, #7
 800296c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800296e:	2302      	movs	r3, #2
 8002970:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002972:	2302      	movs	r3, #2
 8002974:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fa1c 	bl	8003db8 <HAL_RCC_OscConfig>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002986:	f000 f9f3 	bl	8002d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800298a:	230f      	movs	r3, #15
 800298c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800298e:	2303      	movs	r3, #3
 8002990:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800299e:	463b      	mov	r3, r7
 80029a0:	2104      	movs	r1, #4
 80029a2:	4618      	mov	r0, r3
 80029a4:	f001 fe28 	bl	80045f8 <HAL_RCC_ClockConfig>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80029ae:	f000 f9df 	bl	8002d70 <Error_Handler>
  }
}
 80029b2:	bf00      	nop
 80029b4:	3758      	adds	r7, #88	; 0x58
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029c2:	4a1c      	ldr	r2, [pc, #112]	; (8002a34 <MX_I2C3_Init+0x78>)
 80029c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 80029c6:	4b1a      	ldr	r3, [pc, #104]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029c8:	4a1b      	ldr	r2, [pc, #108]	; (8002a38 <MX_I2C3_Init+0x7c>)
 80029ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80029d2:	4b17      	ldr	r3, [pc, #92]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80029d8:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029da:	2200      	movs	r2, #0
 80029dc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80029de:	4b14      	ldr	r3, [pc, #80]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029f6:	480e      	ldr	r0, [pc, #56]	; (8002a30 <MX_I2C3_Init+0x74>)
 80029f8:	f000 ff78 	bl	80038ec <HAL_I2C_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002a02:	f000 f9b5 	bl	8002d70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002a06:	2100      	movs	r1, #0
 8002a08:	4809      	ldr	r0, [pc, #36]	; (8002a30 <MX_I2C3_Init+0x74>)
 8002a0a:	f000 fffe 	bl	8003a0a <HAL_I2CEx_ConfigAnalogFilter>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d001      	beq.n	8002a18 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002a14:	f000 f9ac 	bl	8002d70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002a18:	2100      	movs	r1, #0
 8002a1a:	4805      	ldr	r0, [pc, #20]	; (8002a30 <MX_I2C3_Init+0x74>)
 8002a1c:	f001 f840 	bl	8003aa0 <HAL_I2CEx_ConfigDigitalFilter>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002a26:	f000 f9a3 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000019c 	.word	0x2000019c
 8002a34:	40005c00 	.word	0x40005c00
 8002a38:	10909cec 	.word	0x10909cec

08002a3c <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002a40:	4b12      	ldr	r3, [pc, #72]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a42:	4a13      	ldr	r2, [pc, #76]	; (8002a90 <MX_LPTIM1_Init+0x54>)
 8002a44:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002a46:	4b11      	ldr	r3, [pc, #68]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8002a4c:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a58:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002a5a:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002a60:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002a78:	4804      	ldr	r0, [pc, #16]	; (8002a8c <MX_LPTIM1_Init+0x50>)
 8002a7a:	f001 f85d 	bl	8003b38 <HAL_LPTIM_Init>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8002a84:	f000 f974 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	200001e8 	.word	0x200001e8
 8002a90:	40007c00 	.word	0x40007c00

08002a94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002a9a:	4a1b      	ldr	r2, [pc, #108]	; (8002b08 <MX_SPI1_Init+0x74>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002a9e:	4b19      	ldr	r3, [pc, #100]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002aa0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002aa4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002aac:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002aae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ab2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002aba:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8002ac0:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ac6:	4b0f      	ldr	r3, [pc, #60]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002acc:	4b0d      	ldr	r3, [pc, #52]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ad2:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ae4:	4b07      	ldr	r3, [pc, #28]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002aec:	2208      	movs	r2, #8
 8002aee:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002af0:	4804      	ldr	r0, [pc, #16]	; (8002b04 <MX_SPI1_Init+0x70>)
 8002af2:	f002 fae5 	bl	80050c0 <HAL_SPI_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8002afc:	f000 f938 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b00:	bf00      	nop
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	20000220 	.word	0x20000220
 8002b08:	40013000 	.word	0x40013000

08002b0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b12:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <MX_USART2_UART_Init+0x5c>)
 8002b14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b30:	4b0c      	ldr	r3, [pc, #48]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b32:	220c      	movs	r2, #12
 8002b34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b36:	4b0b      	ldr	r3, [pc, #44]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b42:	4b08      	ldr	r3, [pc, #32]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b48:	4b06      	ldr	r3, [pc, #24]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b4e:	4805      	ldr	r0, [pc, #20]	; (8002b64 <MX_USART2_UART_Init+0x58>)
 8002b50:	f003 f9c6 	bl	8005ee0 <HAL_UART_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002b5a:	f000 f909 	bl	8002d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000284 	.word	0x20000284
 8002b68:	40004400 	.word	0x40004400

08002b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	; 0x28
 8002b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
 8002b7c:	609a      	str	r2, [r3, #8]
 8002b7e:	60da      	str	r2, [r3, #12]
 8002b80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	4b2c      	ldr	r3, [pc, #176]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b86:	4a2b      	ldr	r2, [pc, #172]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b8e:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b9a:	4b26      	ldr	r3, [pc, #152]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	4a25      	ldr	r2, [pc, #148]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb6:	4a1f      	ldr	r2, [pc, #124]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002bb8:	f043 0301 	orr.w	r3, r3, #1
 8002bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	60bb      	str	r3, [r7, #8]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bce:	4a19      	ldr	r2, [pc, #100]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002bd0:	f043 0302 	orr.w	r3, r3, #2
 8002bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002bd6:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <MX_GPIO_Init+0xc8>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	f003 0302 	and.w	r3, r3, #2
 8002bde:	607b      	str	r3, [r7, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM95_NRST_Pin|LD4_Pin|NSS_Pin, GPIO_PIN_RESET);
 8002be2:	2200      	movs	r2, #0
 8002be4:	f240 1121 	movw	r1, #289	; 0x121
 8002be8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002bec:	f000 fe66 	bl	80038bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002bf6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 0314 	add.w	r3, r7, #20
 8002c04:	4619      	mov	r1, r3
 8002c06:	480c      	ldr	r0, [pc, #48]	; (8002c38 <MX_GPIO_Init+0xcc>)
 8002c08:	f000 fcde 	bl	80035c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_NRST_Pin LD4_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RFM95_NRST_Pin|LD4_Pin|NSS_Pin;
 8002c0c:	f240 1321 	movw	r3, #289	; 0x121
 8002c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c12:	2301      	movs	r3, #1
 8002c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	4619      	mov	r1, r3
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c28:	f000 fcce 	bl	80035c8 <HAL_GPIO_Init>

}
 8002c2c:	bf00      	nop
 8002c2e:	3728      	adds	r7, #40	; 0x28
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000
 8002c38:	48000800 	.word	0x48000800

08002c3c <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8002c44:	1d39      	adds	r1, r7, #4
 8002c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4803      	ldr	r0, [pc, #12]	; (8002c5c <__io_putchar+0x20>)
 8002c4e:	f003 f995 	bl	8005f7c <HAL_UART_Transmit>

	return ch;
 8002c52:	687b      	ldr	r3, [r7, #4]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000284 	.word	0x20000284

08002c60 <get_precision_tick>:

volatile uint32_t lptim_tick_msb = 0;

static uint32_t get_precision_tick()
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c66:	b672      	cpsid	i
}
 8002c68:	bf00      	nop
    __disable_irq();
    uint32_t precision_tick = lptim_tick_msb | HAL_LPTIM_ReadCounter(&hlptim1);
 8002c6a:	4807      	ldr	r0, [pc, #28]	; (8002c88 <get_precision_tick+0x28>)
 8002c6c:	f001 f806 	bl	8003c7c <HAL_LPTIM_ReadCounter>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <get_precision_tick+0x2c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c7a:	b662      	cpsie	i
}
 8002c7c:	bf00      	nop
    __enable_irq();
    return precision_tick;
 8002c7e:	687b      	ldr	r3, [r7, #4]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200001e8 	.word	0x200001e8
 8002c8c:	20000308 	.word	0x20000308

08002c90 <precision_sleep_until>:
{
    lptim_tick_msb += 0x10000;
}

static void precision_sleep_until(uint32_t target_ticks)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
    while (true) {

    uint32_t start_ticks = get_precision_tick();
 8002c98:	f7ff ffe2 	bl	8002c60 <get_precision_tick>
 8002c9c:	6178      	str	r0, [r7, #20]
    if (start_ticks > target_ticks) {
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d847      	bhi.n	8002d36 <precision_sleep_until+0xa6>
        break;
    }

    uint32_t ticks_to_sleep = target_ticks - start_ticks;
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	613b      	str	r3, [r7, #16]

    // Only use sleep for at least 10 ticks.
    if (ticks_to_sleep >= 10) {
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	2b09      	cmp	r3, #9
 8002cb2:	d942      	bls.n	8002d3a <precision_sleep_until+0xaa>

        // Calculate required value of compare register for the sleep minus a small buffer time to compensate
        // for any ticks that occur while we perform this calculation.
        uint32_t compare = (start_ticks & 0xffff) + ticks_to_sleep - 2;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b02      	subs	r3, #2
 8002cbe:	60fb      	str	r3, [r7, #12]

        // If the counter auto-reloads we will be woken up anyway.
        if (compare > 0xffff) {
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cc6:	d307      	bcc.n	8002cd8 <precision_sleep_until+0x48>
            HAL_SuspendTick();
 8002cc8:	f000 fb78 	bl	80033bc <HAL_SuspendTick>
            HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002ccc:	2001      	movs	r0, #1
 8002cce:	f001 f847 	bl	8003d60 <HAL_PWREx_EnterSTOP2Mode>
            HAL_ResumeTick();
 8002cd2:	f000 fb83 	bl	80033dc <HAL_ResumeTick>
 8002cd6:	e026      	b.n	8002d26 <precision_sleep_until+0x96>

        // Otherwise, set compare register and use the compare match interrupt to wake up in time.
        } else {
            __HAL_LPTIM_COMPARE_SET(&hlptim1, compare);
 8002cd8:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <precision_sleep_until+0xb4>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	615a      	str	r2, [r3, #20]
            while (!__HAL_LPTIM_GET_FLAG(&hlptim1, LPTIM_FLAG_CMPOK));
 8002ce0:	bf00      	nop
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <precision_sleep_until+0xb4>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d1f8      	bne.n	8002ce2 <precision_sleep_until+0x52>
            __HAL_LPTIM_CLEAR_FLAG(&hlptim1, LPTIM_FLAG_CMPM);
 8002cf0:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <precision_sleep_until+0xb4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	605a      	str	r2, [r3, #4]
            __HAL_LPTIM_ENABLE_IT(&hlptim1, LPTIM_IT_CMPM);
 8002cf8:	4b12      	ldr	r3, [pc, #72]	; (8002d44 <precision_sleep_until+0xb4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <precision_sleep_until+0xb4>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0201 	orr.w	r2, r2, #1
 8002d06:	609a      	str	r2, [r3, #8]
            HAL_SuspendTick();
 8002d08:	f000 fb58 	bl	80033bc <HAL_SuspendTick>
            HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f001 f827 	bl	8003d60 <HAL_PWREx_EnterSTOP2Mode>
            HAL_ResumeTick();
 8002d12:	f000 fb63 	bl	80033dc <HAL_ResumeTick>
            __HAL_LPTIM_DISABLE_IT(&hlptim1, LPTIM_IT_CMPM);
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <precision_sleep_until+0xb4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <precision_sleep_until+0xb4>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0201 	bic.w	r2, r2, #1
 8002d24:	609a      	str	r2, [r3, #8]
    } else {
        break;
    }

    // Busy wait until we have reached the target.
    while (get_precision_tick() < target_ticks);
 8002d26:	bf00      	nop
 8002d28:	f7ff ff9a 	bl	8002c60 <get_precision_tick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d8f9      	bhi.n	8002d28 <precision_sleep_until+0x98>
    while (true) {
 8002d34:	e7b0      	b.n	8002c98 <precision_sleep_until+0x8>
        break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <precision_sleep_until+0xac>
        break;
 8002d3a:	bf00      	nop
}
}
 8002d3c:	bf00      	nop
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	200001e8 	.word	0x200001e8

08002d48 <random_int>:

static uint8_t random_int(uint8_t max)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	71fb      	strb	r3, [r7, #7]
    return 0; // Use ADC other means of obtaining a random number.
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <get_battery_level>:

static uint8_t get_battery_level()
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
    return 0xff; // 0xff = Unknown battery level.
 8002d64:	23ff      	movs	r3, #255	; 0xff
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d74:	b672      	cpsid	i
}
 8002d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8002d78:	e7fe      	b.n	8002d78 <Error_Handler+0x8>
	...

08002d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d88:	f043 0301 	orr.w	r3, r3, #1
 8002d8c:	6613      	str	r3, [r2, #96]	; 0x60
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	607b      	str	r3, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d9a:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <HAL_MspInit+0x44>)
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9e:	4a08      	ldr	r2, [pc, #32]	; (8002dc0 <HAL_MspInit+0x44>)
 8002da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da4:	6593      	str	r3, [r2, #88]	; 0x58
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_MspInit+0x44>)
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dae:	603b      	str	r3, [r7, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop
 8002dc0:	40021000 	.word	0x40021000

08002dc4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b0a4      	sub	sp, #144	; 0x90
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dcc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	605a      	str	r2, [r3, #4]
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
 8002dda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	2268      	movs	r2, #104	; 0x68
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f003 fe0b 	bl	8006a00 <memset>
  if(hi2c->Instance==I2C3)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a21      	ldr	r2, [pc, #132]	; (8002e74 <HAL_I2C_MspInit+0xb0>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d13a      	bne.n	8002e6a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002df8:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002dfe:	f107 0314 	add.w	r3, r7, #20
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fdfe 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002e0e:	f7ff ffaf 	bl	8002d70 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e12:	4b19      	ldr	r3, [pc, #100]	; (8002e78 <HAL_I2C_MspInit+0xb4>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	4a18      	ldr	r2, [pc, #96]	; (8002e78 <HAL_I2C_MspInit+0xb4>)
 8002e18:	f043 0304 	orr.w	r3, r3, #4
 8002e1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e1e:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <HAL_I2C_MspInit+0xb4>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	613b      	str	r3, [r7, #16]
 8002e28:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e2e:	2312      	movs	r3, #18
 8002e30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e40:	2304      	movs	r3, #4
 8002e42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	480b      	ldr	r0, [pc, #44]	; (8002e7c <HAL_I2C_MspInit+0xb8>)
 8002e4e:	f000 fbbb 	bl	80035c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <HAL_I2C_MspInit+0xb4>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	4a08      	ldr	r2, [pc, #32]	; (8002e78 <HAL_I2C_MspInit+0xb4>)
 8002e58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8002e5e:	4b06      	ldr	r3, [pc, #24]	; (8002e78 <HAL_I2C_MspInit+0xb4>)
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002e6a:	bf00      	nop
 8002e6c:	3790      	adds	r7, #144	; 0x90
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40005c00 	.word	0x40005c00
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	48000800 	.word	0x48000800

08002e80 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b09e      	sub	sp, #120	; 0x78
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e88:	f107 0310 	add.w	r3, r7, #16
 8002e8c:	2268      	movs	r2, #104	; 0x68
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f003 fdb5 	bl	8006a00 <memset>
  if(hlptim->Instance==LPTIM1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a11      	ldr	r2, [pc, #68]	; (8002ee0 <HAL_LPTIM_MspInit+0x60>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d11a      	bne.n	8002ed6 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8002ea0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ea4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eaa:	f107 0310 	add.w	r3, r7, #16
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 fda8 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8002eba:	f7ff ff59 	bl	8002d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_LPTIM_MspInit+0x64>)
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec2:	4a08      	ldr	r2, [pc, #32]	; (8002ee4 <HAL_LPTIM_MspInit+0x64>)
 8002ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ec8:	6593      	str	r3, [r2, #88]	; 0x58
 8002eca:	4b06      	ldr	r3, [pc, #24]	; (8002ee4 <HAL_LPTIM_MspInit+0x64>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ed2:	60fb      	str	r3, [r7, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002ed6:	bf00      	nop
 8002ed8:	3778      	adds	r7, #120	; 0x78
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40007c00 	.word	0x40007c00
 8002ee4:	40021000 	.word	0x40021000

08002ee8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08a      	sub	sp, #40	; 0x28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	605a      	str	r2, [r3, #4]
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	60da      	str	r2, [r3, #12]
 8002efe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a17      	ldr	r2, [pc, #92]	; (8002f64 <HAL_SPI_MspInit+0x7c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d128      	bne.n	8002f5c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f0a:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f0e:	4a16      	ldr	r2, [pc, #88]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f14:	6613      	str	r3, [r2, #96]	; 0x60
 8002f16:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f22:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f26:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2e:	4b0e      	ldr	r3, [pc, #56]	; (8002f68 <HAL_SPI_MspInit+0x80>)
 8002f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8002f3a:	23d2      	movs	r3, #210	; 0xd2
 8002f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f46:	2303      	movs	r3, #3
 8002f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f4a:	2305      	movs	r3, #5
 8002f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f4e:	f107 0314 	add.w	r3, r7, #20
 8002f52:	4619      	mov	r1, r3
 8002f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f58:	f000 fb36 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002f5c:	bf00      	nop
 8002f5e:	3728      	adds	r7, #40	; 0x28
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40013000 	.word	0x40013000
 8002f68:	40021000 	.word	0x40021000

08002f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b0a4      	sub	sp, #144	; 0x90
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f74:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	605a      	str	r2, [r3, #4]
 8002f7e:	609a      	str	r2, [r3, #8]
 8002f80:	60da      	str	r2, [r3, #12]
 8002f82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2268      	movs	r2, #104	; 0x68
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f003 fd37 	bl	8006a00 <memset>
  if(huart->Instance==USART2)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <HAL_UART_MspInit+0xb0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d13a      	bne.n	8003012 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002f9c:	2302      	movs	r3, #2
 8002f9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 fd2b 	bl	8004a04 <HAL_RCCEx_PeriphCLKConfig>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002fb4:	f7ff fedc 	bl	8002d70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_UART_MspInit+0xb4>)
 8002fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fbc:	4a18      	ldr	r2, [pc, #96]	; (8003020 <HAL_UART_MspInit+0xb4>)
 8002fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8002fc4:	4b16      	ldr	r3, [pc, #88]	; (8003020 <HAL_UART_MspInit+0xb4>)
 8002fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fd0:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_UART_MspInit+0xb4>)
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	4a12      	ldr	r2, [pc, #72]	; (8003020 <HAL_UART_MspInit+0xb4>)
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fdc:	4b10      	ldr	r3, [pc, #64]	; (8003020 <HAL_UART_MspInit+0xb4>)
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	f003 0301 	and.w	r3, r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002fe8:	230c      	movs	r3, #12
 8002fea:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fec:	2302      	movs	r3, #2
 8002fee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ffe:	2307      	movs	r3, #7
 8003000:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003004:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003008:	4619      	mov	r1, r3
 800300a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800300e:	f000 fadb 	bl	80035c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003012:	bf00      	nop
 8003014:	3790      	adds	r7, #144	; 0x90
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40004400 	.word	0x40004400
 8003020:	40021000 	.word	0x40021000

08003024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003024:	b480      	push	{r7}
 8003026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003028:	e7fe      	b.n	8003028 <NMI_Handler+0x4>

0800302a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800302a:	b480      	push	{r7}
 800302c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800302e:	e7fe      	b.n	800302e <HardFault_Handler+0x4>

08003030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003034:	e7fe      	b.n	8003034 <MemManage_Handler+0x4>

08003036 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003036:	b480      	push	{r7}
 8003038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800303a:	e7fe      	b.n	800303a <BusFault_Handler+0x4>

0800303c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003040:	e7fe      	b.n	8003040 <UsageFault_Handler+0x4>

08003042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003070:	f000 f960 	bl	8003334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	bd80      	pop	{r7, pc}

08003078 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
	return 1;
 800307c:	2301      	movs	r3, #1
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <_kill>:

int _kill(int pid, int sig)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003092:	f003 fc5b 	bl	800694c <__errno>
 8003096:	4603      	mov	r3, r0
 8003098:	2216      	movs	r2, #22
 800309a:	601a      	str	r2, [r3, #0]
	return -1;
 800309c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <_exit>:

void _exit (int status)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80030b0:	f04f 31ff 	mov.w	r1, #4294967295
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f7ff ffe7 	bl	8003088 <_kill>
	while (1) {}		/* Make sure we hang here */
 80030ba:	e7fe      	b.n	80030ba <_exit+0x12>

080030bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	617b      	str	r3, [r7, #20]
 80030cc:	e00a      	b.n	80030e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ce:	f3af 8000 	nop.w
 80030d2:	4601      	mov	r1, r0
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	60ba      	str	r2, [r7, #8]
 80030da:	b2ca      	uxtb	r2, r1
 80030dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3301      	adds	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	dbf0      	blt.n	80030ce <_read+0x12>
	}

return len;
 80030ec:	687b      	ldr	r3, [r7, #4]
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3718      	adds	r7, #24
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b086      	sub	sp, #24
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	e009      	b.n	800311c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	60ba      	str	r2, [r7, #8]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff fd93 	bl	8002c3c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	3301      	adds	r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	429a      	cmp	r2, r3
 8003122:	dbf1      	blt.n	8003108 <_write+0x12>
	}
	return len;
 8003124:	687b      	ldr	r3, [r7, #4]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3718      	adds	r7, #24
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <_close>:

int _close(int file)
{
 800312e:	b480      	push	{r7}
 8003130:	b083      	sub	sp, #12
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
	return -1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003156:	605a      	str	r2, [r3, #4]
	return 0;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <_isatty>:

int _isatty(int file)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
	return 1;
 800316e:	2301      	movs	r3, #1
}
 8003170:	4618      	mov	r0, r3
 8003172:	370c      	adds	r7, #12
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr

0800317c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
	return 0;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
	...

08003198 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a0:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <_sbrk+0x5c>)
 80031a2:	4b15      	ldr	r3, [pc, #84]	; (80031f8 <_sbrk+0x60>)
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031ac:	4b13      	ldr	r3, [pc, #76]	; (80031fc <_sbrk+0x64>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d102      	bne.n	80031ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031b4:	4b11      	ldr	r3, [pc, #68]	; (80031fc <_sbrk+0x64>)
 80031b6:	4a12      	ldr	r2, [pc, #72]	; (8003200 <_sbrk+0x68>)
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ba:	4b10      	ldr	r3, [pc, #64]	; (80031fc <_sbrk+0x64>)
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4413      	add	r3, r2
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d207      	bcs.n	80031d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031c8:	f003 fbc0 	bl	800694c <__errno>
 80031cc:	4603      	mov	r3, r0
 80031ce:	220c      	movs	r2, #12
 80031d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031d2:	f04f 33ff 	mov.w	r3, #4294967295
 80031d6:	e009      	b.n	80031ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031d8:	4b08      	ldr	r3, [pc, #32]	; (80031fc <_sbrk+0x64>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031de:	4b07      	ldr	r3, [pc, #28]	; (80031fc <_sbrk+0x64>)
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4413      	add	r3, r2
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <_sbrk+0x64>)
 80031e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ea:	68fb      	ldr	r3, [r7, #12]
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3718      	adds	r7, #24
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20028000 	.word	0x20028000
 80031f8:	00000400 	.word	0x00000400
 80031fc:	2000030c 	.word	0x2000030c
 8003200:	20000328 	.word	0x20000328

08003204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003208:	4b06      	ldr	r3, [pc, #24]	; (8003224 <SystemInit+0x20>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320e:	4a05      	ldr	r2, [pc, #20]	; (8003224 <SystemInit+0x20>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003260 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800322c:	f7ff ffea 	bl	8003204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003230:	480c      	ldr	r0, [pc, #48]	; (8003264 <LoopForever+0x6>)
  ldr r1, =_edata
 8003232:	490d      	ldr	r1, [pc, #52]	; (8003268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003234:	4a0d      	ldr	r2, [pc, #52]	; (800326c <LoopForever+0xe>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003238:	e002      	b.n	8003240 <LoopCopyDataInit>

0800323a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800323c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323e:	3304      	adds	r3, #4

08003240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003244:	d3f9      	bcc.n	800323a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003246:	4a0a      	ldr	r2, [pc, #40]	; (8003270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003248:	4c0a      	ldr	r4, [pc, #40]	; (8003274 <LoopForever+0x16>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800324c:	e001      	b.n	8003252 <LoopFillZerobss>

0800324e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003250:	3204      	adds	r2, #4

08003252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003254:	d3fb      	bcc.n	800324e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003256:	f003 fb91 	bl	800697c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800325a:	f7ff facf 	bl	80027fc <main>

0800325e <LoopForever>:

LoopForever:
    b LoopForever
 800325e:	e7fe      	b.n	800325e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003260:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 800326c:	08007e88 	.word	0x08007e88
  ldr r2, =_sbss
 8003270:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8003274:	20000324 	.word	0x20000324

08003278 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <ADC1_IRQHandler>
	...

0800327c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003286:	4b0c      	ldr	r3, [pc, #48]	; (80032b8 <HAL_Init+0x3c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a0b      	ldr	r2, [pc, #44]	; (80032b8 <HAL_Init+0x3c>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003292:	2003      	movs	r0, #3
 8003294:	f000 f964 	bl	8003560 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003298:	2000      	movs	r0, #0
 800329a:	f000 f80f 	bl	80032bc <HAL_InitTick>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	71fb      	strb	r3, [r7, #7]
 80032a8:	e001      	b.n	80032ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032aa:	f7ff fd67 	bl	8002d7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032ae:	79fb      	ldrb	r3, [r7, #7]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40022000 	.word	0x40022000

080032bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <HAL_InitTick+0x6c>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d023      	beq.n	8003318 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_InitTick+0x70>)
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	4b14      	ldr	r3, [pc, #80]	; (8003328 <HAL_InitTick+0x6c>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	4619      	mov	r1, r3
 80032da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032de:	fbb3 f3f1 	udiv	r3, r3, r1
 80032e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 f961 	bl	80035ae <HAL_SYSTICK_Config>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d10f      	bne.n	8003312 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b0f      	cmp	r3, #15
 80032f6:	d809      	bhi.n	800330c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032f8:	2200      	movs	r2, #0
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	f000 f939 	bl	8003576 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003304:	4a0a      	ldr	r2, [pc, #40]	; (8003330 <HAL_InitTick+0x74>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e007      	b.n	800331c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
 8003310:	e004      	b.n	800331c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	73fb      	strb	r3, [r7, #15]
 8003316:	e001      	b.n	800331c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000108 	.word	0x20000108
 800332c:	20000100 	.word	0x20000100
 8003330:	20000104 	.word	0x20000104

08003334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003338:	4b06      	ldr	r3, [pc, #24]	; (8003354 <HAL_IncTick+0x20>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_IncTick+0x24>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4413      	add	r3, r2
 8003344:	4a04      	ldr	r2, [pc, #16]	; (8003358 <HAL_IncTick+0x24>)
 8003346:	6013      	str	r3, [r2, #0]
}
 8003348:	bf00      	nop
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000108 	.word	0x20000108
 8003358:	20000310 	.word	0x20000310

0800335c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return uwTick;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_GetTick+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000310 	.word	0x20000310

08003374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff ffee 	bl	800335c <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d005      	beq.n	800339a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800338e:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <HAL_Delay+0x44>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	461a      	mov	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4413      	add	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800339a:	bf00      	nop
 800339c:	f7ff ffde 	bl	800335c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d8f7      	bhi.n	800339c <HAL_Delay+0x28>
  {
  }
}
 80033ac:	bf00      	nop
 80033ae:	bf00      	nop
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	20000108 	.word	0x20000108

080033bc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_SuspendTick+0x1c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a04      	ldr	r2, [pc, #16]	; (80033d8 <HAL_SuspendTick+0x1c>)
 80033c6:	f023 0302 	bic.w	r3, r3, #2
 80033ca:	6013      	str	r3, [r2, #0]
}
 80033cc:	bf00      	nop
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e010 	.word	0xe000e010

080033dc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80033e0:	4b05      	ldr	r3, [pc, #20]	; (80033f8 <HAL_ResumeTick+0x1c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a04      	ldr	r2, [pc, #16]	; (80033f8 <HAL_ResumeTick+0x1c>)
 80033e6:	f043 0302 	orr.w	r3, r3, #2
 80033ea:	6013      	str	r3, [r2, #0]
}
 80033ec:	bf00      	nop
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
 80033f6:	bf00      	nop
 80033f8:	e000e010 	.word	0xe000e010

080033fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b085      	sub	sp, #20
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800340c:	4b0c      	ldr	r3, [pc, #48]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003418:	4013      	ands	r3, r2
 800341a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003424:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342e:	4a04      	ldr	r2, [pc, #16]	; (8003440 <__NVIC_SetPriorityGrouping+0x44>)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	60d3      	str	r3, [r2, #12]
}
 8003434:	bf00      	nop
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003448:	4b04      	ldr	r3, [pc, #16]	; (800345c <__NVIC_GetPriorityGrouping+0x18>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	0a1b      	lsrs	r3, r3, #8
 800344e:	f003 0307 	and.w	r3, r3, #7
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	4603      	mov	r3, r0
 8003468:	6039      	str	r1, [r7, #0]
 800346a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800346c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003470:	2b00      	cmp	r3, #0
 8003472:	db0a      	blt.n	800348a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	b2da      	uxtb	r2, r3
 8003478:	490c      	ldr	r1, [pc, #48]	; (80034ac <__NVIC_SetPriority+0x4c>)
 800347a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347e:	0112      	lsls	r2, r2, #4
 8003480:	b2d2      	uxtb	r2, r2
 8003482:	440b      	add	r3, r1
 8003484:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003488:	e00a      	b.n	80034a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	4908      	ldr	r1, [pc, #32]	; (80034b0 <__NVIC_SetPriority+0x50>)
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	f003 030f 	and.w	r3, r3, #15
 8003496:	3b04      	subs	r3, #4
 8003498:	0112      	lsls	r2, r2, #4
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	440b      	add	r3, r1
 800349e:	761a      	strb	r2, [r3, #24]
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	e000e100 	.word	0xe000e100
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b089      	sub	sp, #36	; 0x24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f003 0307 	and.w	r3, r3, #7
 80034c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	f1c3 0307 	rsb	r3, r3, #7
 80034ce:	2b04      	cmp	r3, #4
 80034d0:	bf28      	it	cs
 80034d2:	2304      	movcs	r3, #4
 80034d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3304      	adds	r3, #4
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d902      	bls.n	80034e4 <NVIC_EncodePriority+0x30>
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	3b03      	subs	r3, #3
 80034e2:	e000      	b.n	80034e6 <NVIC_EncodePriority+0x32>
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	fa02 f303 	lsl.w	r3, r2, r3
 80034f2:	43da      	mvns	r2, r3
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	401a      	ands	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43d9      	mvns	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800350c:	4313      	orrs	r3, r2
         );
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
	...

0800351c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3b01      	subs	r3, #1
 8003528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800352c:	d301      	bcc.n	8003532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800352e:	2301      	movs	r3, #1
 8003530:	e00f      	b.n	8003552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003532:	4a0a      	ldr	r2, [pc, #40]	; (800355c <SysTick_Config+0x40>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3b01      	subs	r3, #1
 8003538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353a:	210f      	movs	r1, #15
 800353c:	f04f 30ff 	mov.w	r0, #4294967295
 8003540:	f7ff ff8e 	bl	8003460 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <SysTick_Config+0x40>)
 8003546:	2200      	movs	r2, #0
 8003548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354a:	4b04      	ldr	r3, [pc, #16]	; (800355c <SysTick_Config+0x40>)
 800354c:	2207      	movs	r2, #7
 800354e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	e000e010 	.word	0xe000e010

08003560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f7ff ff47 	bl	80033fc <__NVIC_SetPriorityGrouping>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b086      	sub	sp, #24
 800357a:	af00      	add	r7, sp, #0
 800357c:	4603      	mov	r3, r0
 800357e:	60b9      	str	r1, [r7, #8]
 8003580:	607a      	str	r2, [r7, #4]
 8003582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003584:	2300      	movs	r3, #0
 8003586:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003588:	f7ff ff5c 	bl	8003444 <__NVIC_GetPriorityGrouping>
 800358c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68b9      	ldr	r1, [r7, #8]
 8003592:	6978      	ldr	r0, [r7, #20]
 8003594:	f7ff ff8e 	bl	80034b4 <NVIC_EncodePriority>
 8003598:	4602      	mov	r2, r0
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff5d 	bl	8003460 <__NVIC_SetPriority>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffb0 	bl	800351c <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b087      	sub	sp, #28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035d2:	2300      	movs	r3, #0
 80035d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035d6:	e154      	b.n	8003882 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	2101      	movs	r1, #1
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8146 	beq.w	800387c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0303 	and.w	r3, r3, #3
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d005      	beq.n	8003608 <HAL_GPIO_Init+0x40>
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d130      	bne.n	800366a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	4013      	ands	r3, r2
 800361e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	fa02 f303 	lsl.w	r3, r2, r3
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	4313      	orrs	r3, r2
 8003630:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800363e:	2201      	movs	r2, #1
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4013      	ands	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	091b      	lsrs	r3, r3, #4
 8003654:	f003 0201 	and.w	r2, r3, #1
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	fa02 f303 	lsl.w	r3, r2, r3
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b03      	cmp	r3, #3
 8003674:	d017      	beq.n	80036a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	2203      	movs	r2, #3
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d123      	bne.n	80036fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	08da      	lsrs	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3208      	adds	r2, #8
 80036ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f003 0307 	and.w	r3, r3, #7
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	220f      	movs	r2, #15
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	4013      	ands	r3, r2
 80036d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	693a      	ldr	r2, [r7, #16]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	08da      	lsrs	r2, r3, #3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3208      	adds	r2, #8
 80036f4:	6939      	ldr	r1, [r7, #16]
 80036f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	005b      	lsls	r3, r3, #1
 8003704:	2203      	movs	r2, #3
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
 800370a:	43db      	mvns	r3, r3
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	4013      	ands	r3, r2
 8003710:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0203 	and.w	r2, r3, #3
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 80a0 	beq.w	800387c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373c:	4b58      	ldr	r3, [pc, #352]	; (80038a0 <HAL_GPIO_Init+0x2d8>)
 800373e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003740:	4a57      	ldr	r2, [pc, #348]	; (80038a0 <HAL_GPIO_Init+0x2d8>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6613      	str	r3, [r2, #96]	; 0x60
 8003748:	4b55      	ldr	r3, [pc, #340]	; (80038a0 <HAL_GPIO_Init+0x2d8>)
 800374a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	60bb      	str	r3, [r7, #8]
 8003752:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003754:	4a53      	ldr	r2, [pc, #332]	; (80038a4 <HAL_GPIO_Init+0x2dc>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3302      	adds	r3, #2
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 0303 	and.w	r3, r3, #3
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	220f      	movs	r2, #15
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4013      	ands	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800377e:	d019      	beq.n	80037b4 <HAL_GPIO_Init+0x1ec>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a49      	ldr	r2, [pc, #292]	; (80038a8 <HAL_GPIO_Init+0x2e0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d013      	beq.n	80037b0 <HAL_GPIO_Init+0x1e8>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a48      	ldr	r2, [pc, #288]	; (80038ac <HAL_GPIO_Init+0x2e4>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d00d      	beq.n	80037ac <HAL_GPIO_Init+0x1e4>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a47      	ldr	r2, [pc, #284]	; (80038b0 <HAL_GPIO_Init+0x2e8>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d007      	beq.n	80037a8 <HAL_GPIO_Init+0x1e0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a46      	ldr	r2, [pc, #280]	; (80038b4 <HAL_GPIO_Init+0x2ec>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d101      	bne.n	80037a4 <HAL_GPIO_Init+0x1dc>
 80037a0:	2304      	movs	r3, #4
 80037a2:	e008      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037a4:	2307      	movs	r3, #7
 80037a6:	e006      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037a8:	2303      	movs	r3, #3
 80037aa:	e004      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037ac:	2302      	movs	r3, #2
 80037ae:	e002      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <HAL_GPIO_Init+0x1ee>
 80037b4:	2300      	movs	r3, #0
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	f002 0203 	and.w	r2, r2, #3
 80037bc:	0092      	lsls	r2, r2, #2
 80037be:	4093      	lsls	r3, r2
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80037c6:	4937      	ldr	r1, [pc, #220]	; (80038a4 <HAL_GPIO_Init+0x2dc>)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80037d4:	4b38      	ldr	r3, [pc, #224]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	43db      	mvns	r3, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4013      	ands	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d003      	beq.n	80037f8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037f8:	4a2f      	ldr	r2, [pc, #188]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80037fe:	4b2e      	ldr	r3, [pc, #184]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43db      	mvns	r3, r3
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	4013      	ands	r3, r2
 800380c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d003      	beq.n	8003822 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4313      	orrs	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003822:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003828:	4b23      	ldr	r3, [pc, #140]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800384c:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <HAL_GPIO_Init+0x2f0>)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	3301      	adds	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	fa22 f303 	lsr.w	r3, r2, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	f47f aea3 	bne.w	80035d8 <HAL_GPIO_Init+0x10>
  }
}
 8003892:	bf00      	nop
 8003894:	bf00      	nop
 8003896:	371c      	adds	r7, #28
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr
 80038a0:	40021000 	.word	0x40021000
 80038a4:	40010000 	.word	0x40010000
 80038a8:	48000400 	.word	0x48000400
 80038ac:	48000800 	.word	0x48000800
 80038b0:	48000c00 	.word	0x48000c00
 80038b4:	48001000 	.word	0x48001000
 80038b8:	40010400 	.word	0x40010400

080038bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	807b      	strh	r3, [r7, #2]
 80038c8:	4613      	mov	r3, r2
 80038ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038cc:	787b      	ldrb	r3, [r7, #1]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80038d2:	887a      	ldrh	r2, [r7, #2]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80038d8:	e002      	b.n	80038e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80038da:	887a      	ldrh	r2, [r7, #2]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr

080038ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e081      	b.n	8003a02 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fa56 	bl	8002dc4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2224      	movs	r2, #36	; 0x24
 800391c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0201 	bic.w	r2, r2, #1
 800392e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800393c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	689a      	ldr	r2, [r3, #8]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800394c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	689a      	ldr	r2, [r3, #8]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	e006      	b.n	8003974 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003972:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d104      	bne.n	8003986 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003984:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003998:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	430a      	orrs	r2, r1
 80039c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69d9      	ldr	r1, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1a      	ldr	r2, [r3, #32]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b083      	sub	sp, #12
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
 8003a12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d138      	bne.n	8003a92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e032      	b.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2224      	movs	r2, #36	; 0x24
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0201 	bic.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6819      	ldr	r1, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	e000      	b.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a92:	2302      	movs	r3, #2
  }
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b20      	cmp	r3, #32
 8003ab4:	d139      	bne.n	8003b2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e033      	b.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003af2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021b      	lsls	r3, r3, #8
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f042 0201 	orr.w	r2, r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b26:	2300      	movs	r3, #0
 8003b28:	e000      	b.n	8003b2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
  }
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e08f      	b.n	8003c6a <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff f98b 	bl	8002e80 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d004      	beq.n	8003b8c <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b8a:	d103      	bne.n	8003b94 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 031e 	bic.w	r3, r3, #30
 8003b92:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d005      	beq.n	8003bac <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ba6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4b31      	ldr	r3, [pc, #196]	; (8003c74 <HAL_LPTIM_Init+0x13c>)
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003bbc:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8003bc2:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8003bc8:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8003bce:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8003be6:	4313      	orrs	r3, r2
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d004      	beq.n	8003c00 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003bfe:	d107      	bne.n	8003c10 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00a      	beq.n	8003c32 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003c24:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8003c2a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	; (8003c78 <HAL_LPTIM_Init+0x140>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d108      	bne.n	8003c56 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	621a      	str	r2, [r3, #32]
 8003c54:	e004      	b.n	8003c60 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c5e:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	ff19f1fe 	.word	0xff19f1fe
 8003c78:	40007c00 	.word	0x40007c00

08003c7c <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(LPTIM_HandleTypeDef *hlptim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69db      	ldr	r3, [r3, #28]
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
	...

08003c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d130      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d038      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2232      	movs	r2, #50	; 0x32
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	e002      	b.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f2      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d110      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e00f      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d007      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007000 	.word	0x40007000
 8003d58:	20000100 	.word	0x20000100
 8003d5c:	431bde83 	.word	0x431bde83

08003d60 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	4603      	mov	r3, r0
 8003d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameter */
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STOP2);
 8003d6a:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f023 0307 	bic.w	r3, r3, #7
 8003d72:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003d80:	f043 0304 	orr.w	r3, r3, #4
 8003d84:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8003d86:	79fb      	ldrb	r3, [r7, #7]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003d8c:	bf30      	wfi
 8003d8e:	e002      	b.n	8003d96 <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003d90:	bf40      	sev
    __WFE();
 8003d92:	bf20      	wfe
    __WFE();
 8003d94:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003d96:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	4a06      	ldr	r2, [pc, #24]	; (8003db4 <HAL_PWREx_EnterSTOP2Mode+0x54>)
 8003d9c:	f023 0304 	bic.w	r3, r3, #4
 8003da0:	6113      	str	r3, [r2, #16]
}
 8003da2:	bf00      	nop
 8003da4:	370c      	adds	r7, #12
 8003da6:	46bd      	mov	sp, r7
 8003da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	40007000 	.word	0x40007000
 8003db4:	e000ed00 	.word	0xe000ed00

08003db8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b088      	sub	sp, #32
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d102      	bne.n	8003dcc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f000 bc10 	b.w	80045ec <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dcc:	4b96      	ldr	r3, [pc, #600]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f003 030c 	and.w	r3, r3, #12
 8003dd4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dd6:	4b94      	ldr	r3, [pc, #592]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	f003 0303 	and.w	r3, r3, #3
 8003dde:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 80e4 	beq.w	8003fb6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d007      	beq.n	8003e04 <HAL_RCC_OscConfig+0x4c>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	2b0c      	cmp	r3, #12
 8003df8:	f040 808b 	bne.w	8003f12 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	f040 8087 	bne.w	8003f12 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e04:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x64>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d101      	bne.n	8003e1c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e3e7      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a1a      	ldr	r2, [r3, #32]
 8003e20:	4b81      	ldr	r3, [pc, #516]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d004      	beq.n	8003e36 <HAL_RCC_OscConfig+0x7e>
 8003e2c:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e34:	e005      	b.n	8003e42 <HAL_RCC_OscConfig+0x8a>
 8003e36:	4b7c      	ldr	r3, [pc, #496]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3c:	091b      	lsrs	r3, r3, #4
 8003e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d223      	bcs.n	8003e8e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fd7a 	bl	8004944 <RCC_SetFlashLatencyFromMSIRange>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e3c8      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e5a:	4b73      	ldr	r3, [pc, #460]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a72      	ldr	r2, [pc, #456]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e60:	f043 0308 	orr.w	r3, r3, #8
 8003e64:	6013      	str	r3, [r2, #0]
 8003e66:	4b70      	ldr	r3, [pc, #448]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	496d      	ldr	r1, [pc, #436]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e78:	4b6b      	ldr	r3, [pc, #428]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	021b      	lsls	r3, r3, #8
 8003e86:	4968      	ldr	r1, [pc, #416]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	604b      	str	r3, [r1, #4]
 8003e8c:	e025      	b.n	8003eda <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e8e:	4b66      	ldr	r3, [pc, #408]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a65      	ldr	r2, [pc, #404]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e94:	f043 0308 	orr.w	r3, r3, #8
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	4b63      	ldr	r3, [pc, #396]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	4960      	ldr	r1, [pc, #384]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	69db      	ldr	r3, [r3, #28]
 8003eb8:	021b      	lsls	r3, r3, #8
 8003eba:	495b      	ldr	r1, [pc, #364]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fd3a 	bl	8004944 <RCC_SetFlashLatencyFromMSIRange>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e388      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003eda:	f000 fc6f 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	4b51      	ldr	r3, [pc, #324]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	091b      	lsrs	r3, r3, #4
 8003ee6:	f003 030f 	and.w	r3, r3, #15
 8003eea:	4950      	ldr	r1, [pc, #320]	; (800402c <HAL_RCC_OscConfig+0x274>)
 8003eec:	5ccb      	ldrb	r3, [r1, r3]
 8003eee:	f003 031f 	and.w	r3, r3, #31
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a4e      	ldr	r2, [pc, #312]	; (8004030 <HAL_RCC_OscConfig+0x278>)
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003efa:	4b4e      	ldr	r3, [pc, #312]	; (8004034 <HAL_RCC_OscConfig+0x27c>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff f9dc 	bl	80032bc <HAL_InitTick>
 8003f04:	4603      	mov	r3, r0
 8003f06:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f08:	7bfb      	ldrb	r3, [r7, #15]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d052      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	e36c      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d032      	beq.n	8003f80 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f1a:	4b43      	ldr	r3, [pc, #268]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a42      	ldr	r2, [pc, #264]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f26:	f7ff fa19 	bl	800335c <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f2e:	f7ff fa15 	bl	800335c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e355      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f40:	4b39      	ldr	r3, [pc, #228]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a35      	ldr	r2, [pc, #212]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f52:	f043 0308 	orr.w	r3, r3, #8
 8003f56:	6013      	str	r3, [r2, #0]
 8003f58:	4b33      	ldr	r3, [pc, #204]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a1b      	ldr	r3, [r3, #32]
 8003f64:	4930      	ldr	r1, [pc, #192]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f66:	4313      	orrs	r3, r2
 8003f68:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f6a:	4b2f      	ldr	r3, [pc, #188]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69db      	ldr	r3, [r3, #28]
 8003f76:	021b      	lsls	r3, r3, #8
 8003f78:	492b      	ldr	r1, [pc, #172]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	604b      	str	r3, [r1, #4]
 8003f7e:	e01a      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a28      	ldr	r2, [pc, #160]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003f86:	f023 0301 	bic.w	r3, r3, #1
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f8c:	f7ff f9e6 	bl	800335c <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f94:	f7ff f9e2 	bl	800335c <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e322      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1f0      	bne.n	8003f94 <HAL_RCC_OscConfig+0x1dc>
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d073      	beq.n	80040aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d005      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x21c>
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	2b0c      	cmp	r3, #12
 8003fcc:	d10e      	bne.n	8003fec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	d10b      	bne.n	8003fec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fd4:	4b14      	ldr	r3, [pc, #80]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d063      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d15f      	bne.n	80040a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e2ff      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d106      	bne.n	8004004 <HAL_RCC_OscConfig+0x24c>
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e025      	b.n	8004050 <HAL_RCC_OscConfig+0x298>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800400c:	d114      	bne.n	8004038 <HAL_RCC_OscConfig+0x280>
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a05      	ldr	r2, [pc, #20]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8004014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	4b03      	ldr	r3, [pc, #12]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a02      	ldr	r2, [pc, #8]	; (8004028 <HAL_RCC_OscConfig+0x270>)
 8004020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	e013      	b.n	8004050 <HAL_RCC_OscConfig+0x298>
 8004028:	40021000 	.word	0x40021000
 800402c:	08007d5c 	.word	0x08007d5c
 8004030:	20000100 	.word	0x20000100
 8004034:	20000104 	.word	0x20000104
 8004038:	4ba0      	ldr	r3, [pc, #640]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a9f      	ldr	r2, [pc, #636]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b9d      	ldr	r3, [pc, #628]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a9c      	ldr	r2, [pc, #624]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800404a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004058:	f7ff f980 	bl	800335c <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004060:	f7ff f97c 	bl	800335c <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e2bc      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004072:	4b92      	ldr	r3, [pc, #584]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x2a8>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004080:	f7ff f96c 	bl	800335c <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004088:	f7ff f968 	bl	800335c <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e2a8      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800409a:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0x2d0>
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d060      	beq.n	8004178 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_OscConfig+0x310>
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b0c      	cmp	r3, #12
 80040c0:	d119      	bne.n	80040f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d116      	bne.n	80040f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040c8:	4b7c      	ldr	r3, [pc, #496]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_OscConfig+0x328>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d101      	bne.n	80040e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e285      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e0:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	691b      	ldr	r3, [r3, #16]
 80040ec:	061b      	lsls	r3, r3, #24
 80040ee:	4973      	ldr	r1, [pc, #460]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80040f0:	4313      	orrs	r3, r2
 80040f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040f4:	e040      	b.n	8004178 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d023      	beq.n	8004146 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040fe:	4b6f      	ldr	r3, [pc, #444]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6e      	ldr	r2, [pc, #440]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004108:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410a:	f7ff f927 	bl	800335c <HAL_GetTick>
 800410e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004110:	e008      	b.n	8004124 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004112:	f7ff f923 	bl	800335c <HAL_GetTick>
 8004116:	4602      	mov	r2, r0
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	2b02      	cmp	r3, #2
 800411e:	d901      	bls.n	8004124 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e263      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004124:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0f0      	beq.n	8004112 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004130:	4b62      	ldr	r3, [pc, #392]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	495f      	ldr	r1, [pc, #380]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004140:	4313      	orrs	r3, r2
 8004142:	604b      	str	r3, [r1, #4]
 8004144:	e018      	b.n	8004178 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004146:	4b5d      	ldr	r3, [pc, #372]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5c      	ldr	r2, [pc, #368]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800414c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7ff f903 	bl	800335c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7ff f8ff 	bl	800335c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e23f      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800416c:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1f0      	bne.n	800415a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d03c      	beq.n	80041fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d01c      	beq.n	80041c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800418c:	4b4b      	ldr	r3, [pc, #300]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	4a4a      	ldr	r2, [pc, #296]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004194:	f043 0301 	orr.w	r3, r3, #1
 8004198:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800419c:	f7ff f8de 	bl	800335c <HAL_GetTick>
 80041a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041a2:	e008      	b.n	80041b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041a4:	f7ff f8da 	bl	800335c <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e21a      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041b6:	4b41      	ldr	r3, [pc, #260]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80041b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0ef      	beq.n	80041a4 <HAL_RCC_OscConfig+0x3ec>
 80041c4:	e01b      	b.n	80041fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c6:	4b3d      	ldr	r3, [pc, #244]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80041c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041cc:	4a3b      	ldr	r2, [pc, #236]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80041ce:	f023 0301 	bic.w	r3, r3, #1
 80041d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041d6:	f7ff f8c1 	bl	800335c <HAL_GetTick>
 80041da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041dc:	e008      	b.n	80041f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041de:	f7ff f8bd 	bl	800335c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d901      	bls.n	80041f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80041ec:	2303      	movs	r3, #3
 80041ee:	e1fd      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041f0:	4b32      	ldr	r3, [pc, #200]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80041f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1ef      	bne.n	80041de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0304 	and.w	r3, r3, #4
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 80a6 	beq.w	8004358 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420c:	2300      	movs	r3, #0
 800420e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10d      	bne.n	8004238 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421c:	4b27      	ldr	r3, [pc, #156]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800421e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004220:	4a26      	ldr	r2, [pc, #152]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	6593      	str	r3, [r2, #88]	; 0x58
 8004228:	4b24      	ldr	r3, [pc, #144]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800422a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004234:	2301      	movs	r3, #1
 8004236:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004238:	4b21      	ldr	r3, [pc, #132]	; (80042c0 <HAL_RCC_OscConfig+0x508>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d118      	bne.n	8004276 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004244:	4b1e      	ldr	r3, [pc, #120]	; (80042c0 <HAL_RCC_OscConfig+0x508>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a1d      	ldr	r2, [pc, #116]	; (80042c0 <HAL_RCC_OscConfig+0x508>)
 800424a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004250:	f7ff f884 	bl	800335c <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004258:	f7ff f880 	bl	800335c <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e1c0      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800426a:	4b15      	ldr	r3, [pc, #84]	; (80042c0 <HAL_RCC_OscConfig+0x508>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0f0      	beq.n	8004258 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d108      	bne.n	8004290 <HAL_RCC_OscConfig+0x4d8>
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 8004286:	f043 0301 	orr.w	r3, r3, #1
 800428a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800428e:	e029      	b.n	80042e4 <HAL_RCC_OscConfig+0x52c>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b05      	cmp	r3, #5
 8004296:	d115      	bne.n	80042c4 <HAL_RCC_OscConfig+0x50c>
 8004298:	4b08      	ldr	r3, [pc, #32]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	4a07      	ldr	r2, [pc, #28]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80042a0:	f043 0304 	orr.w	r3, r3, #4
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042a8:	4b04      	ldr	r3, [pc, #16]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	4a03      	ldr	r2, [pc, #12]	; (80042bc <HAL_RCC_OscConfig+0x504>)
 80042b0:	f043 0301 	orr.w	r3, r3, #1
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042b8:	e014      	b.n	80042e4 <HAL_RCC_OscConfig+0x52c>
 80042ba:	bf00      	nop
 80042bc:	40021000 	.word	0x40021000
 80042c0:	40007000 	.word	0x40007000
 80042c4:	4b9a      	ldr	r3, [pc, #616]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a99      	ldr	r2, [pc, #612]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80042cc:	f023 0301 	bic.w	r3, r3, #1
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d4:	4b96      	ldr	r3, [pc, #600]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80042d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042da:	4a95      	ldr	r2, [pc, #596]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80042dc:	f023 0304 	bic.w	r3, r3, #4
 80042e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d016      	beq.n	800431a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7ff f836 	bl	800335c <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f2:	e00a      	b.n	800430a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f4:	f7ff f832 	bl	800335c <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004302:	4293      	cmp	r3, r2
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e170      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430a:	4b89      	ldr	r3, [pc, #548]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0ed      	beq.n	80042f4 <HAL_RCC_OscConfig+0x53c>
 8004318:	e015      	b.n	8004346 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431a:	f7ff f81f 	bl	800335c <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004320:	e00a      	b.n	8004338 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004322:	f7ff f81b 	bl	800335c <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004330:	4293      	cmp	r3, r2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e159      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004338:	4b7d      	ldr	r3, [pc, #500]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 800433a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d1ed      	bne.n	8004322 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434c:	4b78      	ldr	r3, [pc, #480]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 800434e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004350:	4a77      	ldr	r2, [pc, #476]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 8004352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004356:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0320 	and.w	r3, r3, #32
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03c      	beq.n	80043de <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800436c:	4b70      	ldr	r3, [pc, #448]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 800436e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004372:	4a6f      	ldr	r2, [pc, #444]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fe ffee 	bl	800335c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004384:	f7fe ffea 	bl	800335c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e12a      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004396:	4b66      	ldr	r3, [pc, #408]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 8004398:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ef      	beq.n	8004384 <HAL_RCC_OscConfig+0x5cc>
 80043a4:	e01b      	b.n	80043de <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043a6:	4b62      	ldr	r3, [pc, #392]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80043a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043ac:	4a60      	ldr	r2, [pc, #384]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe ffd1 	bl	800335c <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043be:	f7fe ffcd 	bl	800335c <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e10d      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043d0:	4b57      	ldr	r3, [pc, #348]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80043d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ef      	bne.n	80043be <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	f000 8101 	beq.w	80045ea <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ec:	2b02      	cmp	r3, #2
 80043ee:	f040 80c9 	bne.w	8004584 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043f2:	4b4f      	ldr	r3, [pc, #316]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	f003 0203 	and.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	429a      	cmp	r2, r3
 8004404:	d12c      	bne.n	8004460 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	3b01      	subs	r3, #1
 8004412:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d123      	bne.n	8004460 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d11b      	bne.n	8004460 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d113      	bne.n	8004460 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d109      	bne.n	8004460 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004456:	085b      	lsrs	r3, r3, #1
 8004458:	3b01      	subs	r3, #1
 800445a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800445c:	429a      	cmp	r2, r3
 800445e:	d06b      	beq.n	8004538 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	2b0c      	cmp	r3, #12
 8004464:	d062      	beq.n	800452c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e0ba      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004476:	4b2e      	ldr	r3, [pc, #184]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 800447c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004480:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004482:	f7fe ff6b 	bl	800335c <HAL_GetTick>
 8004486:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004488:	e008      	b.n	800449c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448a:	f7fe ff67 	bl	800335c <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	2b02      	cmp	r3, #2
 8004496:	d901      	bls.n	800449c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004498:	2303      	movs	r3, #3
 800449a:	e0a7      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1f0      	bne.n	800448a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80044a8:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80044aa:	68da      	ldr	r2, [r3, #12]
 80044ac:	4b21      	ldr	r3, [pc, #132]	; (8004534 <HAL_RCC_OscConfig+0x77c>)
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80044b8:	3a01      	subs	r2, #1
 80044ba:	0112      	lsls	r2, r2, #4
 80044bc:	4311      	orrs	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80044c2:	0212      	lsls	r2, r2, #8
 80044c4:	4311      	orrs	r1, r2
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044ca:	0852      	lsrs	r2, r2, #1
 80044cc:	3a01      	subs	r2, #1
 80044ce:	0552      	lsls	r2, r2, #21
 80044d0:	4311      	orrs	r1, r2
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044d6:	0852      	lsrs	r2, r2, #1
 80044d8:	3a01      	subs	r2, #1
 80044da:	0652      	lsls	r2, r2, #25
 80044dc:	4311      	orrs	r1, r2
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044e2:	06d2      	lsls	r2, r2, #27
 80044e4:	430a      	orrs	r2, r1
 80044e6:	4912      	ldr	r1, [pc, #72]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0f      	ldr	r2, [pc, #60]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80044f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a0c      	ldr	r2, [pc, #48]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 80044fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004502:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004504:	f7fe ff2a 	bl	800335c <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450c:	f7fe ff26 	bl	800335c <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e066      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800451e:	4b04      	ldr	r3, [pc, #16]	; (8004530 <HAL_RCC_OscConfig+0x778>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800452a:	e05e      	b.n	80045ea <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e05d      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
 8004530:	40021000 	.word	0x40021000
 8004534:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004538:	4b2e      	ldr	r3, [pc, #184]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d152      	bne.n	80045ea <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004544:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a2a      	ldr	r2, [pc, #168]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 800454a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800454e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004550:	4b28      	ldr	r3, [pc, #160]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	4a27      	ldr	r2, [pc, #156]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 8004556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800455a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800455c:	f7fe fefe 	bl	800335c <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004564:	f7fe fefa 	bl	800335c <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e03a      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004576:	4b1f      	ldr	r3, [pc, #124]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d0f0      	beq.n	8004564 <HAL_RCC_OscConfig+0x7ac>
 8004582:	e032      	b.n	80045ea <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d02d      	beq.n	80045e6 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800458a:	4b1a      	ldr	r3, [pc, #104]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 8004590:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004594:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004596:	4b17      	ldr	r3, [pc, #92]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d105      	bne.n	80045ae <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80045a2:	4b14      	ldr	r3, [pc, #80]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 80045a8:	f023 0303 	bic.w	r3, r3, #3
 80045ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80045ae:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 80045b4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fe fecd 	bl	800335c <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fe fec9 	bl	800335c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e009      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045d8:	4b06      	ldr	r3, [pc, #24]	; (80045f4 <HAL_RCC_OscConfig+0x83c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x80e>
 80045e4:	e001      	b.n	80045ea <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3720      	adds	r7, #32
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000

080045f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d101      	bne.n	800460c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0c8      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800460c:	4b66      	ldr	r3, [pc, #408]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d910      	bls.n	800463c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461a:	4b63      	ldr	r3, [pc, #396]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 0207 	bic.w	r2, r3, #7
 8004622:	4961      	ldr	r1, [pc, #388]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4313      	orrs	r3, r2
 8004628:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800462a:	4b5f      	ldr	r3, [pc, #380]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	429a      	cmp	r2, r3
 8004636:	d001      	beq.n	800463c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e0b0      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d04c      	beq.n	80046e2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b03      	cmp	r3, #3
 800464e:	d107      	bne.n	8004660 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004650:	4b56      	ldr	r3, [pc, #344]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d121      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e09e      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d107      	bne.n	8004678 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004668:	4b50      	ldr	r3, [pc, #320]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d115      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e092      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d107      	bne.n	8004690 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004680:	4b4a      	ldr	r3, [pc, #296]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d109      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e086      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004690:	4b46      	ldr	r3, [pc, #280]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e07e      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046a0:	4b42      	ldr	r3, [pc, #264]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	f023 0203 	bic.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	493f      	ldr	r1, [pc, #252]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b2:	f7fe fe53 	bl	800335c <HAL_GetTick>
 80046b6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b8:	e00a      	b.n	80046d0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046ba:	f7fe fe4f 	bl	800335c <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e066      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d0:	4b36      	ldr	r3, [pc, #216]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	f003 020c 	and.w	r2, r3, #12
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	429a      	cmp	r2, r3
 80046e0:	d1eb      	bne.n	80046ba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d008      	beq.n	8004700 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	492c      	ldr	r1, [pc, #176]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004700:	4b29      	ldr	r3, [pc, #164]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	683a      	ldr	r2, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d210      	bcs.n	8004730 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800470e:	4b26      	ldr	r3, [pc, #152]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f023 0207 	bic.w	r2, r3, #7
 8004716:	4924      	ldr	r1, [pc, #144]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	4313      	orrs	r3, r2
 800471c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800471e:	4b22      	ldr	r3, [pc, #136]	; (80047a8 <HAL_RCC_ClockConfig+0x1b0>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	429a      	cmp	r2, r3
 800472a:	d001      	beq.n	8004730 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e036      	b.n	800479e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	d008      	beq.n	800474e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	4918      	ldr	r1, [pc, #96]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800475a:	4b14      	ldr	r3, [pc, #80]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	00db      	lsls	r3, r3, #3
 8004768:	4910      	ldr	r1, [pc, #64]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 800476a:	4313      	orrs	r3, r2
 800476c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800476e:	f000 f825 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 8004772:	4602      	mov	r2, r0
 8004774:	4b0d      	ldr	r3, [pc, #52]	; (80047ac <HAL_RCC_ClockConfig+0x1b4>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	091b      	lsrs	r3, r3, #4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	490c      	ldr	r1, [pc, #48]	; (80047b0 <HAL_RCC_ClockConfig+0x1b8>)
 8004780:	5ccb      	ldrb	r3, [r1, r3]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	fa22 f303 	lsr.w	r3, r2, r3
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <HAL_RCC_ClockConfig+0x1bc>)
 800478c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800478e:	4b0a      	ldr	r3, [pc, #40]	; (80047b8 <HAL_RCC_ClockConfig+0x1c0>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f7fe fd92 	bl	80032bc <HAL_InitTick>
 8004798:	4603      	mov	r3, r0
 800479a:	72fb      	strb	r3, [r7, #11]

  return status;
 800479c:	7afb      	ldrb	r3, [r7, #11]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40022000 	.word	0x40022000
 80047ac:	40021000 	.word	0x40021000
 80047b0:	08007d5c 	.word	0x08007d5c
 80047b4:	20000100 	.word	0x20000100
 80047b8:	20000104 	.word	0x20000104

080047bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	; 0x24
 80047c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61fb      	str	r3, [r7, #28]
 80047c6:	2300      	movs	r3, #0
 80047c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ca:	4b3e      	ldr	r3, [pc, #248]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047d4:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0303 	and.w	r3, r3, #3
 80047dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d005      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x34>
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	2b0c      	cmp	r3, #12
 80047e8:	d121      	bne.n	800482e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d11e      	bne.n	800482e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047f0:	4b34      	ldr	r3, [pc, #208]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d107      	bne.n	800480c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047fc:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80047fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004802:	0a1b      	lsrs	r3, r3, #8
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	61fb      	str	r3, [r7, #28]
 800480a:	e005      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800480c:	4b2d      	ldr	r3, [pc, #180]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	091b      	lsrs	r3, r3, #4
 8004812:	f003 030f 	and.w	r3, r3, #15
 8004816:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004818:	4a2b      	ldr	r2, [pc, #172]	; (80048c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800481a:	69fb      	ldr	r3, [r7, #28]
 800481c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004820:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d10d      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800482c:	e00a      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b04      	cmp	r3, #4
 8004832:	d102      	bne.n	800483a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004834:	4b25      	ldr	r3, [pc, #148]	; (80048cc <HAL_RCC_GetSysClockFreq+0x110>)
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	e004      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b08      	cmp	r3, #8
 800483e:	d101      	bne.n	8004844 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004840:	4b23      	ldr	r3, [pc, #140]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004842:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b0c      	cmp	r3, #12
 8004848:	d134      	bne.n	80048b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800484a:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	2b02      	cmp	r3, #2
 8004858:	d003      	beq.n	8004862 <HAL_RCC_GetSysClockFreq+0xa6>
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b03      	cmp	r3, #3
 800485e:	d003      	beq.n	8004868 <HAL_RCC_GetSysClockFreq+0xac>
 8004860:	e005      	b.n	800486e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004862:	4b1a      	ldr	r3, [pc, #104]	; (80048cc <HAL_RCC_GetSysClockFreq+0x110>)
 8004864:	617b      	str	r3, [r7, #20]
      break;
 8004866:	e005      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004868:	4b19      	ldr	r3, [pc, #100]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800486a:	617b      	str	r3, [r7, #20]
      break;
 800486c:	e002      	b.n	8004874 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	617b      	str	r3, [r7, #20]
      break;
 8004872:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 0307 	and.w	r3, r3, #7
 800487e:	3301      	adds	r3, #1
 8004880:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	0a1b      	lsrs	r3, r3, #8
 8004888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	fb03 f202 	mul.w	r2, r3, r2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	fbb2 f3f3 	udiv	r3, r2, r3
 8004898:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800489a:	4b0a      	ldr	r3, [pc, #40]	; (80048c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	0e5b      	lsrs	r3, r3, #25
 80048a0:	f003 0303 	and.w	r3, r3, #3
 80048a4:	3301      	adds	r3, #1
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80048b4:	69bb      	ldr	r3, [r7, #24]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3724      	adds	r7, #36	; 0x24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	08007d74 	.word	0x08007d74
 80048cc:	00f42400 	.word	0x00f42400
 80048d0:	007a1200 	.word	0x007a1200

080048d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b03      	ldr	r3, [pc, #12]	; (80048e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	20000100 	.word	0x20000100

080048ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048f0:	f7ff fff0 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0a1b      	lsrs	r3, r3, #8
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	08007d6c 	.word	0x08007d6c

08004918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800491c:	f7ff ffda 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8004920:	4602      	mov	r2, r0
 8004922:	4b06      	ldr	r3, [pc, #24]	; (800493c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	0adb      	lsrs	r3, r3, #11
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	4904      	ldr	r1, [pc, #16]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x28>)
 800492e:	5ccb      	ldrb	r3, [r1, r3]
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000
 8004940:	08007d6c 	.word	0x08007d6c

08004944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004950:	4b2a      	ldr	r3, [pc, #168]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800495c:	f7ff f99c 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 8004960:	6178      	str	r0, [r7, #20]
 8004962:	e014      	b.n	800498e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004964:	4b25      	ldr	r3, [pc, #148]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004968:	4a24      	ldr	r2, [pc, #144]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496e:	6593      	str	r3, [r2, #88]	; 0x58
 8004970:	4b22      	ldr	r3, [pc, #136]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004978:	60fb      	str	r3, [r7, #12]
 800497a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800497c:	f7ff f98c 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 8004980:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004982:	4b1e      	ldr	r3, [pc, #120]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	4a1d      	ldr	r2, [pc, #116]	; (80049fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800498c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004994:	d10b      	bne.n	80049ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b80      	cmp	r3, #128	; 0x80
 800499a:	d919      	bls.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2ba0      	cmp	r3, #160	; 0xa0
 80049a0:	d902      	bls.n	80049a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049a2:	2302      	movs	r3, #2
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e013      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049a8:	2301      	movs	r3, #1
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	e010      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b80      	cmp	r3, #128	; 0x80
 80049b2:	d902      	bls.n	80049ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049b4:	2303      	movs	r3, #3
 80049b6:	613b      	str	r3, [r7, #16]
 80049b8:	e00a      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b80      	cmp	r3, #128	; 0x80
 80049be:	d102      	bne.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049c0:	2302      	movs	r3, #2
 80049c2:	613b      	str	r3, [r7, #16]
 80049c4:	e004      	b.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b70      	cmp	r3, #112	; 0x70
 80049ca:	d101      	bne.n	80049d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049cc:	2301      	movs	r3, #1
 80049ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f023 0207 	bic.w	r2, r3, #7
 80049d8:	4909      	ldr	r1, [pc, #36]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4313      	orrs	r3, r2
 80049de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d001      	beq.n	80049f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80049f2:	2300      	movs	r3, #0
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3718      	adds	r7, #24
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40021000 	.word	0x40021000
 8004a00:	40022000 	.word	0x40022000

08004a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a10:	2300      	movs	r3, #0
 8004a12:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d031      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a24:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a28:	d01a      	beq.n	8004a60 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004a2a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a2e:	d814      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d009      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a34:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a38:	d10f      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004a3a:	4b5d      	ldr	r3, [pc, #372]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4a5c      	ldr	r2, [pc, #368]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a44:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a46:	e00c      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	3304      	adds	r3, #4
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa44 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004a54:	4603      	mov	r3, r0
 8004a56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a58:	e003      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a5e:	e000      	b.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a62:	7cfb      	ldrb	r3, [r7, #19]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a68:	4b51      	ldr	r3, [pc, #324]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a76:	494e      	ldr	r1, [pc, #312]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a7e:	e001      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a80:	7cfb      	ldrb	r3, [r7, #19]
 8004a82:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 809e 	beq.w	8004bce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a92:	2300      	movs	r3, #0
 8004a94:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aac:	4b40      	ldr	r3, [pc, #256]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab0:	4a3f      	ldr	r2, [pc, #252]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ab8:	4b3d      	ldr	r3, [pc, #244]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004abc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	60bb      	str	r3, [r7, #8]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ac8:	4b3a      	ldr	r3, [pc, #232]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a39      	ldr	r2, [pc, #228]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004ace:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ad4:	f7fe fc42 	bl	800335c <HAL_GetTick>
 8004ad8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ada:	e009      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004adc:	f7fe fc3e 	bl	800335c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d902      	bls.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	74fb      	strb	r3, [r7, #19]
        break;
 8004aee:	e005      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004af0:	4b30      	ldr	r3, [pc, #192]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ef      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d15a      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b02:	4b2b      	ldr	r3, [pc, #172]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d019      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b1e:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b28:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b2a:	4b21      	ldr	r3, [pc, #132]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b30:	4a1f      	ldr	r2, [pc, #124]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b3a:	4b1d      	ldr	r3, [pc, #116]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b40:	4a1b      	ldr	r2, [pc, #108]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b4a:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d016      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b5c:	f7fe fbfe 	bl	800335c <HAL_GetTick>
 8004b60:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	e00b      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f7fe fbfa 	bl	800335c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d902      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	74fb      	strb	r3, [r7, #19]
            break;
 8004b7a:	e006      	b.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d0ec      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004b8a:	7cfb      	ldrb	r3, [r7, #19]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b90:	4b07      	ldr	r3, [pc, #28]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b9e:	4904      	ldr	r1, [pc, #16]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ba6:	e009      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ba8:	7cfb      	ldrb	r3, [r7, #19]
 8004baa:	74bb      	strb	r3, [r7, #18]
 8004bac:	e006      	b.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bbc:	7c7b      	ldrb	r3, [r7, #17]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d105      	bne.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc2:	4b9e      	ldr	r3, [pc, #632]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bc6:	4a9d      	ldr	r2, [pc, #628]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bda:	4b98      	ldr	r3, [pc, #608]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004be0:	f023 0203 	bic.w	r2, r3, #3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	4994      	ldr	r1, [pc, #592]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004bfc:	4b8f      	ldr	r3, [pc, #572]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f023 020c 	bic.w	r2, r3, #12
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	498c      	ldr	r1, [pc, #560]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c1e:	4b87      	ldr	r3, [pc, #540]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c24:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	4983      	ldr	r1, [pc, #524]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c40:	4b7e      	ldr	r3, [pc, #504]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c46:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c4e:	497b      	ldr	r1, [pc, #492]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c50:	4313      	orrs	r3, r2
 8004c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c62:	4b76      	ldr	r3, [pc, #472]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c70:	4972      	ldr	r1, [pc, #456]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c84:	4b6d      	ldr	r3, [pc, #436]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	496a      	ldr	r1, [pc, #424]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d00a      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ca6:	4b65      	ldr	r3, [pc, #404]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb4:	4961      	ldr	r1, [pc, #388]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00a      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cc8:	4b5c      	ldr	r3, [pc, #368]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	4959      	ldr	r1, [pc, #356]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cea:	4b54      	ldr	r3, [pc, #336]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf8:	4950      	ldr	r1, [pc, #320]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00a      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d0c:	4b4b      	ldr	r3, [pc, #300]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1a:	4948      	ldr	r1, [pc, #288]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00a      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004d2e:	4b43      	ldr	r3, [pc, #268]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004d34:	f023 0203 	bic.w	r2, r3, #3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	493f      	ldr	r1, [pc, #252]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d028      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d50:	4b3a      	ldr	r3, [pc, #232]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5e:	4937      	ldr	r1, [pc, #220]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d6e:	d106      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d70:	4b32      	ldr	r3, [pc, #200]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	4a31      	ldr	r2, [pc, #196]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d7a:	60d3      	str	r3, [r2, #12]
 8004d7c:	e011      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d86:	d10c      	bne.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f8a4 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d98:	7cfb      	ldrb	r3, [r7, #19]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004d9e:	7cfb      	ldrb	r3, [r7, #19]
 8004da0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d028      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dae:	4b23      	ldr	r3, [pc, #140]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	491f      	ldr	r1, [pc, #124]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004dcc:	d106      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004dd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dd8:	60d3      	str	r3, [r2, #12]
 8004dda:	e011      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004de4:	d10c      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3304      	adds	r3, #4
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f875 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004df6:	7cfb      	ldrb	r3, [r7, #19]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004dfc:	7cfb      	ldrb	r3, [r7, #19]
 8004dfe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d02b      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1a:	4908      	ldr	r1, [pc, #32]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e2a:	d109      	bne.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	4a02      	ldr	r2, [pc, #8]	; (8004e3c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004e32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e36:	60d3      	str	r3, [r2, #12]
 8004e38:	e014      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004e3a:	bf00      	nop
 8004e3c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f843 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004e56:	4603      	mov	r3, r0
 8004e58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01c      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e70:	4b19      	ldr	r3, [pc, #100]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e7e:	4916      	ldr	r1, [pc, #88]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e8e:	d10c      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	2102      	movs	r1, #2
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 f820 	bl	8004edc <RCCEx_PLLSAI1_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ea0:	7cfb      	ldrb	r3, [r7, #19]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004ea6:	7cfb      	ldrb	r3, [r7, #19]
 8004ea8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eb6:	4b08      	ldr	r3, [pc, #32]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ebc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec4:	4904      	ldr	r1, [pc, #16]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ecc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40021000 	.word	0x40021000

08004edc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004eea:	4b74      	ldr	r3, [pc, #464]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	f003 0303 	and.w	r3, r3, #3
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d018      	beq.n	8004f28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ef6:	4b71      	ldr	r3, [pc, #452]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f003 0203 	and.w	r2, r3, #3
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d10d      	bne.n	8004f22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
       ||
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d009      	beq.n	8004f22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f0e:	4b6b      	ldr	r3, [pc, #428]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0307 	and.w	r3, r3, #7
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d047      	beq.n	8004fb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	73fb      	strb	r3, [r7, #15]
 8004f26:	e044      	b.n	8004fb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d018      	beq.n	8004f62 <RCCEx_PLLSAI1_Config+0x86>
 8004f30:	2b03      	cmp	r3, #3
 8004f32:	d825      	bhi.n	8004f80 <RCCEx_PLLSAI1_Config+0xa4>
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d002      	beq.n	8004f3e <RCCEx_PLLSAI1_Config+0x62>
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d009      	beq.n	8004f50 <RCCEx_PLLSAI1_Config+0x74>
 8004f3c:	e020      	b.n	8004f80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f3e:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d11d      	bne.n	8004f86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f4e:	e01a      	b.n	8004f86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f50:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d116      	bne.n	8004f8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f60:	e013      	b.n	8004f8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f62:	4b56      	ldr	r3, [pc, #344]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10f      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f6e:	4b53      	ldr	r3, [pc, #332]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d109      	bne.n	8004f8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f7e:	e006      	b.n	8004f8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
      break;
 8004f84:	e004      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10d      	bne.n	8004fb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f96:	4b49      	ldr	r3, [pc, #292]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6819      	ldr	r1, [r3, #0]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	430b      	orrs	r3, r1
 8004fac:	4943      	ldr	r1, [pc, #268]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fb2:	7bfb      	ldrb	r3, [r7, #15]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d17c      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fb8:	4b40      	ldr	r3, [pc, #256]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a3f      	ldr	r2, [pc, #252]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc4:	f7fe f9ca 	bl	800335c <HAL_GetTick>
 8004fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fca:	e009      	b.n	8004fe0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fcc:	f7fe f9c6 	bl	800335c <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d902      	bls.n	8004fe0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8004fde:	e005      	b.n	8004fec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004fe0:	4b36      	ldr	r3, [pc, #216]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1ef      	bne.n	8004fcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d15f      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d110      	bne.n	800501a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ff8:	4b30      	ldr	r3, [pc, #192]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005000:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6892      	ldr	r2, [r2, #8]
 8005008:	0211      	lsls	r1, r2, #8
 800500a:	687a      	ldr	r2, [r7, #4]
 800500c:	68d2      	ldr	r2, [r2, #12]
 800500e:	06d2      	lsls	r2, r2, #27
 8005010:	430a      	orrs	r2, r1
 8005012:	492a      	ldr	r1, [pc, #168]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
 8005018:	e027      	b.n	800506a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d112      	bne.n	8005046 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005020:	4b26      	ldr	r3, [pc, #152]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005028:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6892      	ldr	r2, [r2, #8]
 8005030:	0211      	lsls	r1, r2, #8
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	6912      	ldr	r2, [r2, #16]
 8005036:	0852      	lsrs	r2, r2, #1
 8005038:	3a01      	subs	r2, #1
 800503a:	0552      	lsls	r2, r2, #21
 800503c:	430a      	orrs	r2, r1
 800503e:	491f      	ldr	r1, [pc, #124]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005040:	4313      	orrs	r3, r2
 8005042:	610b      	str	r3, [r1, #16]
 8005044:	e011      	b.n	800506a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005046:	4b1d      	ldr	r3, [pc, #116]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800504e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6892      	ldr	r2, [r2, #8]
 8005056:	0211      	lsls	r1, r2, #8
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6952      	ldr	r2, [r2, #20]
 800505c:	0852      	lsrs	r2, r2, #1
 800505e:	3a01      	subs	r2, #1
 8005060:	0652      	lsls	r2, r2, #25
 8005062:	430a      	orrs	r2, r1
 8005064:	4915      	ldr	r1, [pc, #84]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005066:	4313      	orrs	r3, r2
 8005068:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800506a:	4b14      	ldr	r3, [pc, #80]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a13      	ldr	r2, [pc, #76]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005070:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005074:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005076:	f7fe f971 	bl	800335c <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800507c:	e009      	b.n	8005092 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800507e:	f7fe f96d 	bl	800335c <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d902      	bls.n	8005092 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	73fb      	strb	r3, [r7, #15]
          break;
 8005090:	e005      	b.n	800509e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ef      	beq.n	800507e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d106      	bne.n	80050b2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <RCCEx_PLLSAI1_Config+0x1e0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40021000 	.word	0x40021000

080050c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e095      	b.n	80051fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d108      	bne.n	80050ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050e2:	d009      	beq.n	80050f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2200      	movs	r2, #0
 80050e8:	61da      	str	r2, [r3, #28]
 80050ea:	e005      	b.n	80050f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005104:	b2db      	uxtb	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d106      	bne.n	8005118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fd fee8 	bl	8002ee8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2202      	movs	r2, #2
 800511c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800512e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005138:	d902      	bls.n	8005140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800513a:	2300      	movs	r3, #0
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	e002      	b.n	8005146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800514e:	d007      	beq.n	8005160 <HAL_SPI_Init+0xa0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005158:	d002      	beq.n	8005160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005170:	431a      	orrs	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	431a      	orrs	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	695b      	ldr	r3, [r3, #20]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	69db      	ldr	r3, [r3, #28]
 8005194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	ea42 0103 	orr.w	r1, r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	f003 0204 	and.w	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0310 	and.w	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80051dc:	ea42 0103 	orr.w	r1, r2, r3
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}

08005206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b088      	sub	sp, #32
 800520a:	af00      	add	r7, sp, #0
 800520c:	60f8      	str	r0, [r7, #12]
 800520e:	60b9      	str	r1, [r7, #8]
 8005210:	603b      	str	r3, [r7, #0]
 8005212:	4613      	mov	r3, r2
 8005214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005220:	2b01      	cmp	r3, #1
 8005222:	d101      	bne.n	8005228 <HAL_SPI_Transmit+0x22>
 8005224:	2302      	movs	r3, #2
 8005226:	e158      	b.n	80054da <HAL_SPI_Transmit+0x2d4>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005230:	f7fe f894 	bl	800335c <HAL_GetTick>
 8005234:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005240:	b2db      	uxtb	r3, r3
 8005242:	2b01      	cmp	r3, #1
 8005244:	d002      	beq.n	800524c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005246:	2302      	movs	r3, #2
 8005248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800524a:	e13d      	b.n	80054c8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_SPI_Transmit+0x52>
 8005252:	88fb      	ldrh	r3, [r7, #6]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d102      	bne.n	800525e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800525c:	e134      	b.n	80054c8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2203      	movs	r2, #3
 8005262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2200      	movs	r2, #0
 800526a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68ba      	ldr	r2, [r7, #8]
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	88fa      	ldrh	r2, [r7, #6]
 8005276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	88fa      	ldrh	r2, [r7, #6]
 800527c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2200      	movs	r2, #0
 8005288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a8:	d10f      	bne.n	80052ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d4:	2b40      	cmp	r3, #64	; 0x40
 80052d6:	d007      	beq.n	80052e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80052f0:	d94b      	bls.n	800538a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_SPI_Transmit+0xfa>
 80052fa:	8afb      	ldrh	r3, [r7, #22]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d13e      	bne.n	800537e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	881a      	ldrh	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	1c9a      	adds	r2, r3, #2
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005324:	e02b      	b.n	800537e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b02      	cmp	r3, #2
 8005332:	d112      	bne.n	800535a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005358:	e011      	b.n	800537e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800535a:	f7fd ffff 	bl	800335c <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d803      	bhi.n	8005372 <HAL_SPI_Transmit+0x16c>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005370:	d102      	bne.n	8005378 <HAL_SPI_Transmit+0x172>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800537c:	e0a4      	b.n	80054c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005382:	b29b      	uxth	r3, r3
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1ce      	bne.n	8005326 <HAL_SPI_Transmit+0x120>
 8005388:	e07c      	b.n	8005484 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0x192>
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	2b01      	cmp	r3, #1
 8005396:	d170      	bne.n	800547a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800539c:	b29b      	uxth	r3, r3
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d912      	bls.n	80053c8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b2:	1c9a      	adds	r2, r3, #2
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053bc:	b29b      	uxth	r3, r3
 80053be:	3b02      	subs	r3, #2
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053c6:	e058      	b.n	800547a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	330c      	adds	r3, #12
 80053d2:	7812      	ldrb	r2, [r2, #0]
 80053d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	1c5a      	adds	r2, r3, #1
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e4:	b29b      	uxth	r3, r3
 80053e6:	3b01      	subs	r3, #1
 80053e8:	b29a      	uxth	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80053ee:	e044      	b.n	800547a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d12b      	bne.n	8005456 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005402:	b29b      	uxth	r3, r3
 8005404:	2b01      	cmp	r3, #1
 8005406:	d912      	bls.n	800542e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	881a      	ldrh	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	1c9a      	adds	r2, r3, #2
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005422:	b29b      	uxth	r3, r3
 8005424:	3b02      	subs	r3, #2
 8005426:	b29a      	uxth	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800542c:	e025      	b.n	800547a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	7812      	ldrb	r2, [r2, #0]
 800543a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005454:	e011      	b.n	800547a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005456:	f7fd ff81 	bl	800335c <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d803      	bhi.n	800546e <HAL_SPI_Transmit+0x268>
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800546c:	d102      	bne.n	8005474 <HAL_SPI_Transmit+0x26e>
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d102      	bne.n	800547a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005478:	e026      	b.n	80054c8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800547e:	b29b      	uxth	r3, r3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1b5      	bne.n	80053f0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005484:	69ba      	ldr	r2, [r7, #24]
 8005486:	6839      	ldr	r1, [r7, #0]
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 fce3 	bl	8005e54 <SPI_EndRxTxTransaction>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d002      	beq.n	800549a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10a      	bne.n	80054b8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80054a2:	2300      	movs	r3, #0
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	613b      	str	r3, [r7, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	613b      	str	r3, [r7, #16]
 80054b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	77fb      	strb	r3, [r7, #31]
 80054c4:	e000      	b.n	80054c8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80054c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3720      	adds	r7, #32
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}

080054e2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b088      	sub	sp, #32
 80054e6:	af02      	add	r7, sp, #8
 80054e8:	60f8      	str	r0, [r7, #12]
 80054ea:	60b9      	str	r1, [r7, #8]
 80054ec:	603b      	str	r3, [r7, #0]
 80054ee:	4613      	mov	r3, r2
 80054f0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054f2:	2300      	movs	r3, #0
 80054f4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054fe:	d112      	bne.n	8005526 <HAL_SPI_Receive+0x44>
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10e      	bne.n	8005526 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2204      	movs	r2, #4
 800550c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005510:	88fa      	ldrh	r2, [r7, #6]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	4613      	mov	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	68b9      	ldr	r1, [r7, #8]
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f910 	bl	8005742 <HAL_SPI_TransmitReceive>
 8005522:	4603      	mov	r3, r0
 8005524:	e109      	b.n	800573a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800552c:	2b01      	cmp	r3, #1
 800552e:	d101      	bne.n	8005534 <HAL_SPI_Receive+0x52>
 8005530:	2302      	movs	r3, #2
 8005532:	e102      	b.n	800573a <HAL_SPI_Receive+0x258>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800553c:	f7fd ff0e 	bl	800335c <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b01      	cmp	r3, #1
 800554c:	d002      	beq.n	8005554 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800554e:	2302      	movs	r3, #2
 8005550:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005552:	e0e9      	b.n	8005728 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d002      	beq.n	8005560 <HAL_SPI_Receive+0x7e>
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005564:	e0e0      	b.n	8005728 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2204      	movs	r2, #4
 800556a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	88fa      	ldrh	r2, [r7, #6]
 800557e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	88fa      	ldrh	r2, [r7, #6]
 8005586:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2200      	movs	r2, #0
 8005594:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2200      	movs	r2, #0
 80055a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055b0:	d908      	bls.n	80055c4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055c0:	605a      	str	r2, [r3, #4]
 80055c2:	e007      	b.n	80055d4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055d2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055dc:	d10f      	bne.n	80055fe <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055ec:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80055fc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b40      	cmp	r3, #64	; 0x40
 800560a:	d007      	beq.n	800561c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005624:	d867      	bhi.n	80056f6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005626:	e030      	b.n	800568a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b01      	cmp	r3, #1
 8005634:	d117      	bne.n	8005666 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f103 020c 	add.w	r2, r3, #12
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	7812      	ldrb	r2, [r2, #0]
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005658:	b29b      	uxth	r3, r3
 800565a:	3b01      	subs	r3, #1
 800565c:	b29a      	uxth	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005664:	e011      	b.n	800568a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005666:	f7fd fe79 	bl	800335c <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d803      	bhi.n	800567e <HAL_SPI_Receive+0x19c>
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567c:	d102      	bne.n	8005684 <HAL_SPI_Receive+0x1a2>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005688:	e04e      	b.n	8005728 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d1c8      	bne.n	8005628 <HAL_SPI_Receive+0x146>
 8005696:	e034      	b.n	8005702 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d115      	bne.n	80056d2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b0:	b292      	uxth	r2, r2
 80056b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b8:	1c9a      	adds	r2, r3, #2
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80056d0:	e011      	b.n	80056f6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d2:	f7fd fe43 	bl	800335c <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d803      	bhi.n	80056ea <HAL_SPI_Receive+0x208>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Receive+0x20e>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80056f4:	e018      	b.n	8005728 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ca      	bne.n	8005698 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	6839      	ldr	r1, [r7, #0]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f000 fb4c 	bl	8005da4 <SPI_EndRxTransaction>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d002      	beq.n	8005718 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	75fb      	strb	r3, [r7, #23]
 8005724:	e000      	b.n	8005728 <HAL_SPI_Receive+0x246>
  }

error :
 8005726:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005738:	7dfb      	ldrb	r3, [r7, #23]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3718      	adds	r7, #24
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b08a      	sub	sp, #40	; 0x28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
 800574e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005750:	2301      	movs	r3, #1
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005754:	2300      	movs	r3, #0
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005760:	2b01      	cmp	r3, #1
 8005762:	d101      	bne.n	8005768 <HAL_SPI_TransmitReceive+0x26>
 8005764:	2302      	movs	r3, #2
 8005766:	e1fb      	b.n	8005b60 <HAL_SPI_TransmitReceive+0x41e>
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2201      	movs	r2, #1
 800576c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005770:	f7fd fdf4 	bl	800335c <HAL_GetTick>
 8005774:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800577c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005788:	887b      	ldrh	r3, [r7, #2]
 800578a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800578c:	7efb      	ldrb	r3, [r7, #27]
 800578e:	2b01      	cmp	r3, #1
 8005790:	d00e      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x6e>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005798:	d106      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <HAL_SPI_TransmitReceive+0x66>
 80057a2:	7efb      	ldrb	r3, [r7, #27]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d003      	beq.n	80057b0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80057a8:	2302      	movs	r3, #2
 80057aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057ae:	e1cd      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0x80>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0x80>
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80057c8:	e1c0      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b04      	cmp	r3, #4
 80057d4:	d003      	beq.n	80057de <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2205      	movs	r2, #5
 80057da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	887a      	ldrh	r2, [r7, #2]
 80057ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	887a      	ldrh	r2, [r7, #2]
 80057f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	887a      	ldrh	r2, [r7, #2]
 800580a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005820:	d802      	bhi.n	8005828 <HAL_SPI_TransmitReceive+0xe6>
 8005822:	8a3b      	ldrh	r3, [r7, #16]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d908      	bls.n	800583a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005836:	605a      	str	r2, [r3, #4]
 8005838:	e007      	b.n	800584a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	685a      	ldr	r2, [r3, #4]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005848:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	d007      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005866:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005870:	d97c      	bls.n	800596c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x13e>
 800587a:	8a7b      	ldrh	r3, [r7, #18]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d169      	bne.n	8005954 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	881a      	ldrh	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	1c9a      	adds	r2, r3, #2
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058a4:	e056      	b.n	8005954 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 0302 	and.w	r3, r3, #2
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d11b      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x1aa>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d016      	beq.n	80058ec <HAL_SPI_TransmitReceive+0x1aa>
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d113      	bne.n	80058ec <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c8:	881a      	ldrh	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	1c9a      	adds	r2, r3, #2
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058de:	b29b      	uxth	r3, r3
 80058e0:	3b01      	subs	r3, #1
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d11c      	bne.n	8005934 <HAL_SPI_TransmitReceive+0x1f2>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005900:	b29b      	uxth	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d016      	beq.n	8005934 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	b292      	uxth	r2, r2
 8005912:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	1c9a      	adds	r2, r3, #2
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005924:	b29b      	uxth	r3, r3
 8005926:	3b01      	subs	r3, #1
 8005928:	b29a      	uxth	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005930:	2301      	movs	r3, #1
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005934:	f7fd fd12 	bl	800335c <HAL_GetTick>
 8005938:	4602      	mov	r2, r0
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005940:	429a      	cmp	r2, r3
 8005942:	d807      	bhi.n	8005954 <HAL_SPI_TransmitReceive+0x212>
 8005944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d003      	beq.n	8005954 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005952:	e0fb      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1a3      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x164>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005964:	b29b      	uxth	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d19d      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x164>
 800596a:	e0df      	b.n	8005b2c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d003      	beq.n	800597c <HAL_SPI_TransmitReceive+0x23a>
 8005974:	8a7b      	ldrh	r3, [r7, #18]
 8005976:	2b01      	cmp	r3, #1
 8005978:	f040 80cb 	bne.w	8005b12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	d912      	bls.n	80059ac <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005996:	1c9a      	adds	r2, r3, #2
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	3b02      	subs	r3, #2
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059aa:	e0b2      	b.n	8005b12 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	7812      	ldrb	r2, [r2, #0]
 80059b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	1c5a      	adds	r2, r3, #1
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	3b01      	subs	r3, #1
 80059cc:	b29a      	uxth	r2, r3
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059d2:	e09e      	b.n	8005b12 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d134      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x30a>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02f      	beq.n	8005a4c <HAL_SPI_TransmitReceive+0x30a>
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d12c      	bne.n	8005a4c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d912      	bls.n	8005a22 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a00:	881a      	ldrh	r2, [r3, #0]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0c:	1c9a      	adds	r2, r3, #2
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b02      	subs	r3, #2
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a20:	e012      	b.n	8005a48 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	330c      	adds	r3, #12
 8005a2c:	7812      	ldrb	r2, [r2, #0]
 8005a2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a34:	1c5a      	adds	r2, r3, #1
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d148      	bne.n	8005aec <HAL_SPI_TransmitReceive+0x3aa>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d042      	beq.n	8005aec <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d923      	bls.n	8005aba <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	1c9a      	adds	r2, r3, #2
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	3b02      	subs	r3, #2
 8005a94:	b29a      	uxth	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d81f      	bhi.n	8005ae8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	685a      	ldr	r2, [r3, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ab6:	605a      	str	r2, [r3, #4]
 8005ab8:	e016      	b.n	8005ae8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f103 020c 	add.w	r2, r3, #12
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	b2d2      	uxtb	r2, r2
 8005aca:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	3b01      	subs	r3, #1
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aec:	f7fd fc36 	bl	800335c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d803      	bhi.n	8005b04 <HAL_SPI_TransmitReceive+0x3c2>
 8005afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b02:	d102      	bne.n	8005b0a <HAL_SPI_TransmitReceive+0x3c8>
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d103      	bne.n	8005b12 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005b10:	e01c      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f47f af5b 	bne.w	80059d4 <HAL_SPI_TransmitReceive+0x292>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f47f af54 	bne.w	80059d4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b2c:	69fa      	ldr	r2, [r7, #28]
 8005b2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b30:	68f8      	ldr	r0, [r7, #12]
 8005b32:	f000 f98f 	bl	8005e54 <SPI_EndRxTxTransaction>
 8005b36:	4603      	mov	r3, r0
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d006      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2220      	movs	r2, #32
 8005b46:	661a      	str	r2, [r3, #96]	; 0x60
 8005b48:	e000      	b.n	8005b4c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3728      	adds	r7, #40	; 0x28
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	603b      	str	r3, [r7, #0]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005b78:	f7fd fbf0 	bl	800335c <HAL_GetTick>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b80:	1a9b      	subs	r3, r3, r2
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	4413      	add	r3, r2
 8005b86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005b88:	f7fd fbe8 	bl	800335c <HAL_GetTick>
 8005b8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005b8e:	4b39      	ldr	r3, [pc, #228]	; (8005c74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	015b      	lsls	r3, r3, #5
 8005b94:	0d1b      	lsrs	r3, r3, #20
 8005b96:	69fa      	ldr	r2, [r7, #28]
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b9e:	e054      	b.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba6:	d050      	beq.n	8005c4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ba8:	f7fd fbd8 	bl	800335c <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	69fa      	ldr	r2, [r7, #28]
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d902      	bls.n	8005bbe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d13d      	bne.n	8005c3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685a      	ldr	r2, [r3, #4]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005bcc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bd6:	d111      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005be0:	d004      	beq.n	8005bec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bea:	d107      	bne.n	8005bfc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bfa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c04:	d10f      	bne.n	8005c26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c14:	601a      	str	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005c36:	2303      	movs	r3, #3
 8005c38:	e017      	b.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4013      	ands	r3, r2
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	bf0c      	ite	eq
 8005c5a:	2301      	moveq	r3, #1
 8005c5c:	2300      	movne	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d19b      	bne.n	8005ba0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3720      	adds	r7, #32
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20000100 	.word	0x20000100

08005c78 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	; 0x28
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	607a      	str	r2, [r7, #4]
 8005c84:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005c86:	2300      	movs	r3, #0
 8005c88:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005c8a:	f7fd fb67 	bl	800335c <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c92:	1a9b      	subs	r3, r3, r2
 8005c94:	683a      	ldr	r2, [r7, #0]
 8005c96:	4413      	add	r3, r2
 8005c98:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005c9a:	f7fd fb5f 	bl	800335c <HAL_GetTick>
 8005c9e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005ca8:	4b3d      	ldr	r3, [pc, #244]	; (8005da0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	00da      	lsls	r2, r3, #3
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	0d1b      	lsrs	r3, r3, #20
 8005cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cba:	fb02 f303 	mul.w	r3, r2, r3
 8005cbe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005cc0:	e060      	b.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005cc8:	d107      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x62>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d104      	bne.n	8005cda <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005cd8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d050      	beq.n	8005d84 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce2:	f7fd fb3b 	bl	800335c <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d902      	bls.n	8005cf8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d13d      	bne.n	8005d74 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d06:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d10:	d111      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d1a:	d004      	beq.n	8005d26 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d24:	d107      	bne.n	8005d36 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d3e:	d10f      	bne.n	8005d60 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d5e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d70:	2303      	movs	r3, #3
 8005d72:	e010      	b.n	8005d96 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d74:	69bb      	ldr	r3, [r7, #24]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	3b01      	subs	r3, #1
 8005d82:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	687a      	ldr	r2, [r7, #4]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d196      	bne.n	8005cc2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3728      	adds	r7, #40	; 0x28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000100 	.word	0x20000100

08005da4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005db8:	d111      	bne.n	8005dde <SPI_EndRxTransaction+0x3a>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc2:	d004      	beq.n	8005dce <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dcc:	d107      	bne.n	8005dde <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ddc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	9300      	str	r3, [sp, #0]
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	2200      	movs	r2, #0
 8005de6:	2180      	movs	r1, #128	; 0x80
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff febd 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005dee:	4603      	mov	r3, r0
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d007      	beq.n	8005e04 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e023      	b.n	8005e4c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e0c:	d11d      	bne.n	8005e4a <SPI_EndRxTransaction+0xa6>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e16:	d004      	beq.n	8005e22 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e20:	d113      	bne.n	8005e4a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f7ff ff22 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d007      	beq.n	8005e4a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e3e:	f043 0220 	orr.w	r2, r3, #32
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	e000      	b.n	8005e4c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005e4a:	2300      	movs	r3, #0
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3710      	adds	r7, #16
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ff03 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d007      	beq.n	8005e88 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e7c:	f043 0220 	orr.w	r2, r3, #32
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005e84:	2303      	movs	r3, #3
 8005e86:	e027      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	9300      	str	r3, [sp, #0]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	2180      	movs	r1, #128	; 0x80
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f7ff fe68 	bl	8005b68 <SPI_WaitFlagStateUntilTimeout>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d007      	beq.n	8005eae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ea2:	f043 0220 	orr.w	r2, r3, #32
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005eaa:	2303      	movs	r3, #3
 8005eac:	e014      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f7ff fedc 	bl	8005c78 <SPI_WaitFifoStateUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d007      	beq.n	8005ed6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eca:	f043 0220 	orr.w	r2, r3, #32
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e000      	b.n	8005ed8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e040      	b.n	8005f74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fd f832 	bl	8002f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	; 0x24
 8005f0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f8c0 	bl	80060a4 <UART_SetConfig>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d101      	bne.n	8005f2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	e022      	b.n	8005f74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb3a 	bl	80065b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f042 0201 	orr.w	r2, r2, #1
 8005f6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fbc1 	bl	80066f4 <UART_CheckIdleState>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b08a      	sub	sp, #40	; 0x28
 8005f80:	af02      	add	r7, sp, #8
 8005f82:	60f8      	str	r0, [r7, #12]
 8005f84:	60b9      	str	r1, [r7, #8]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f90:	2b20      	cmp	r3, #32
 8005f92:	f040 8082 	bne.w	800609a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d002      	beq.n	8005fa2 <HAL_UART_Transmit+0x26>
 8005f9c:	88fb      	ldrh	r3, [r7, #6]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e07a      	b.n	800609c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_UART_Transmit+0x38>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e073      	b.n	800609c <HAL_UART_Transmit+0x120>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2221      	movs	r2, #33	; 0x21
 8005fc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fca:	f7fd f9c7 	bl	800335c <HAL_GetTick>
 8005fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	88fa      	ldrh	r2, [r7, #6]
 8005fd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	88fa      	ldrh	r2, [r7, #6]
 8005fdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005fe8:	d108      	bne.n	8005ffc <HAL_UART_Transmit+0x80>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d104      	bne.n	8005ffc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	61bb      	str	r3, [r7, #24]
 8005ffa:	e003      	b.n	8006004 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800600c:	e02d      	b.n	800606a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	9300      	str	r3, [sp, #0]
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2200      	movs	r2, #0
 8006016:	2180      	movs	r1, #128	; 0x80
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fbb4 	bl	8006786 <UART_WaitOnFlagUntilTimeout>
 800601e:	4603      	mov	r3, r0
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e039      	b.n	800609c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	881a      	ldrh	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800603a:	b292      	uxth	r2, r2
 800603c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	3302      	adds	r3, #2
 8006042:	61bb      	str	r3, [r7, #24]
 8006044:	e008      	b.n	8006058 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	b292      	uxth	r2, r2
 8006050:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	3301      	adds	r3, #1
 8006056:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800605e:	b29b      	uxth	r3, r3
 8006060:	3b01      	subs	r3, #1
 8006062:	b29a      	uxth	r2, r3
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006070:	b29b      	uxth	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1cb      	bne.n	800600e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2200      	movs	r2, #0
 800607e:	2140      	movs	r1, #64	; 0x40
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fb80 	bl	8006786 <UART_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e005      	b.n	800609c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2220      	movs	r2, #32
 8006094:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006096:	2300      	movs	r3, #0
 8006098:	e000      	b.n	800609c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800609a:	2302      	movs	r3, #2
  }
}
 800609c:	4618      	mov	r0, r3
 800609e:	3720      	adds	r7, #32
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}

080060a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060a8:	b08a      	sub	sp, #40	; 0x28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060ae:	2300      	movs	r3, #0
 80060b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689a      	ldr	r2, [r3, #8]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	431a      	orrs	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	4ba5      	ldr	r3, [pc, #660]	; (8006368 <UART_SetConfig+0x2c4>)
 80060d4:	4013      	ands	r3, r2
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060dc:	430b      	orrs	r3, r1
 80060de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	430a      	orrs	r2, r1
 80060f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a9a      	ldr	r2, [pc, #616]	; (800636c <UART_SetConfig+0x2c8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d004      	beq.n	8006110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610c:	4313      	orrs	r3, r2
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006120:	430a      	orrs	r2, r1
 8006122:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a91      	ldr	r2, [pc, #580]	; (8006370 <UART_SetConfig+0x2cc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d126      	bne.n	800617c <UART_SetConfig+0xd8>
 800612e:	4b91      	ldr	r3, [pc, #580]	; (8006374 <UART_SetConfig+0x2d0>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f003 0303 	and.w	r3, r3, #3
 8006138:	2b03      	cmp	r3, #3
 800613a:	d81b      	bhi.n	8006174 <UART_SetConfig+0xd0>
 800613c:	a201      	add	r2, pc, #4	; (adr r2, 8006144 <UART_SetConfig+0xa0>)
 800613e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006142:	bf00      	nop
 8006144:	08006155 	.word	0x08006155
 8006148:	08006165 	.word	0x08006165
 800614c:	0800615d 	.word	0x0800615d
 8006150:	0800616d 	.word	0x0800616d
 8006154:	2301      	movs	r3, #1
 8006156:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800615a:	e0d6      	b.n	800630a <UART_SetConfig+0x266>
 800615c:	2302      	movs	r3, #2
 800615e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006162:	e0d2      	b.n	800630a <UART_SetConfig+0x266>
 8006164:	2304      	movs	r3, #4
 8006166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800616a:	e0ce      	b.n	800630a <UART_SetConfig+0x266>
 800616c:	2308      	movs	r3, #8
 800616e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006172:	e0ca      	b.n	800630a <UART_SetConfig+0x266>
 8006174:	2310      	movs	r3, #16
 8006176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800617a:	e0c6      	b.n	800630a <UART_SetConfig+0x266>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a7d      	ldr	r2, [pc, #500]	; (8006378 <UART_SetConfig+0x2d4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d138      	bne.n	80061f8 <UART_SetConfig+0x154>
 8006186:	4b7b      	ldr	r3, [pc, #492]	; (8006374 <UART_SetConfig+0x2d0>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f003 030c 	and.w	r3, r3, #12
 8006190:	2b0c      	cmp	r3, #12
 8006192:	d82d      	bhi.n	80061f0 <UART_SetConfig+0x14c>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <UART_SetConfig+0xf8>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061d1 	.word	0x080061d1
 80061a0:	080061f1 	.word	0x080061f1
 80061a4:	080061f1 	.word	0x080061f1
 80061a8:	080061f1 	.word	0x080061f1
 80061ac:	080061e1 	.word	0x080061e1
 80061b0:	080061f1 	.word	0x080061f1
 80061b4:	080061f1 	.word	0x080061f1
 80061b8:	080061f1 	.word	0x080061f1
 80061bc:	080061d9 	.word	0x080061d9
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	080061f1 	.word	0x080061f1
 80061c8:	080061f1 	.word	0x080061f1
 80061cc:	080061e9 	.word	0x080061e9
 80061d0:	2300      	movs	r3, #0
 80061d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061d6:	e098      	b.n	800630a <UART_SetConfig+0x266>
 80061d8:	2302      	movs	r3, #2
 80061da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061de:	e094      	b.n	800630a <UART_SetConfig+0x266>
 80061e0:	2304      	movs	r3, #4
 80061e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061e6:	e090      	b.n	800630a <UART_SetConfig+0x266>
 80061e8:	2308      	movs	r3, #8
 80061ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061ee:	e08c      	b.n	800630a <UART_SetConfig+0x266>
 80061f0:	2310      	movs	r3, #16
 80061f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061f6:	e088      	b.n	800630a <UART_SetConfig+0x266>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a5f      	ldr	r2, [pc, #380]	; (800637c <UART_SetConfig+0x2d8>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d125      	bne.n	800624e <UART_SetConfig+0x1aa>
 8006202:	4b5c      	ldr	r3, [pc, #368]	; (8006374 <UART_SetConfig+0x2d0>)
 8006204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006208:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800620c:	2b30      	cmp	r3, #48	; 0x30
 800620e:	d016      	beq.n	800623e <UART_SetConfig+0x19a>
 8006210:	2b30      	cmp	r3, #48	; 0x30
 8006212:	d818      	bhi.n	8006246 <UART_SetConfig+0x1a2>
 8006214:	2b20      	cmp	r3, #32
 8006216:	d00a      	beq.n	800622e <UART_SetConfig+0x18a>
 8006218:	2b20      	cmp	r3, #32
 800621a:	d814      	bhi.n	8006246 <UART_SetConfig+0x1a2>
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <UART_SetConfig+0x182>
 8006220:	2b10      	cmp	r3, #16
 8006222:	d008      	beq.n	8006236 <UART_SetConfig+0x192>
 8006224:	e00f      	b.n	8006246 <UART_SetConfig+0x1a2>
 8006226:	2300      	movs	r3, #0
 8006228:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800622c:	e06d      	b.n	800630a <UART_SetConfig+0x266>
 800622e:	2302      	movs	r3, #2
 8006230:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006234:	e069      	b.n	800630a <UART_SetConfig+0x266>
 8006236:	2304      	movs	r3, #4
 8006238:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800623c:	e065      	b.n	800630a <UART_SetConfig+0x266>
 800623e:	2308      	movs	r3, #8
 8006240:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006244:	e061      	b.n	800630a <UART_SetConfig+0x266>
 8006246:	2310      	movs	r3, #16
 8006248:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800624c:	e05d      	b.n	800630a <UART_SetConfig+0x266>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a4b      	ldr	r2, [pc, #300]	; (8006380 <UART_SetConfig+0x2dc>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d125      	bne.n	80062a4 <UART_SetConfig+0x200>
 8006258:	4b46      	ldr	r3, [pc, #280]	; (8006374 <UART_SetConfig+0x2d0>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006262:	2bc0      	cmp	r3, #192	; 0xc0
 8006264:	d016      	beq.n	8006294 <UART_SetConfig+0x1f0>
 8006266:	2bc0      	cmp	r3, #192	; 0xc0
 8006268:	d818      	bhi.n	800629c <UART_SetConfig+0x1f8>
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d00a      	beq.n	8006284 <UART_SetConfig+0x1e0>
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d814      	bhi.n	800629c <UART_SetConfig+0x1f8>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <UART_SetConfig+0x1d8>
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d008      	beq.n	800628c <UART_SetConfig+0x1e8>
 800627a:	e00f      	b.n	800629c <UART_SetConfig+0x1f8>
 800627c:	2300      	movs	r3, #0
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006282:	e042      	b.n	800630a <UART_SetConfig+0x266>
 8006284:	2302      	movs	r3, #2
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628a:	e03e      	b.n	800630a <UART_SetConfig+0x266>
 800628c:	2304      	movs	r3, #4
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006292:	e03a      	b.n	800630a <UART_SetConfig+0x266>
 8006294:	2308      	movs	r3, #8
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629a:	e036      	b.n	800630a <UART_SetConfig+0x266>
 800629c:	2310      	movs	r3, #16
 800629e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062a2:	e032      	b.n	800630a <UART_SetConfig+0x266>
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a30      	ldr	r2, [pc, #192]	; (800636c <UART_SetConfig+0x2c8>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d12a      	bne.n	8006304 <UART_SetConfig+0x260>
 80062ae:	4b31      	ldr	r3, [pc, #196]	; (8006374 <UART_SetConfig+0x2d0>)
 80062b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062bc:	d01a      	beq.n	80062f4 <UART_SetConfig+0x250>
 80062be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062c2:	d81b      	bhi.n	80062fc <UART_SetConfig+0x258>
 80062c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c8:	d00c      	beq.n	80062e4 <UART_SetConfig+0x240>
 80062ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ce:	d815      	bhi.n	80062fc <UART_SetConfig+0x258>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <UART_SetConfig+0x238>
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d8:	d008      	beq.n	80062ec <UART_SetConfig+0x248>
 80062da:	e00f      	b.n	80062fc <UART_SetConfig+0x258>
 80062dc:	2300      	movs	r3, #0
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e012      	b.n	800630a <UART_SetConfig+0x266>
 80062e4:	2302      	movs	r3, #2
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e00e      	b.n	800630a <UART_SetConfig+0x266>
 80062ec:	2304      	movs	r3, #4
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e00a      	b.n	800630a <UART_SetConfig+0x266>
 80062f4:	2308      	movs	r3, #8
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e006      	b.n	800630a <UART_SetConfig+0x266>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006302:	e002      	b.n	800630a <UART_SetConfig+0x266>
 8006304:	2310      	movs	r3, #16
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a17      	ldr	r2, [pc, #92]	; (800636c <UART_SetConfig+0x2c8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	f040 808b 	bne.w	800642c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006316:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800631a:	2b08      	cmp	r3, #8
 800631c:	d834      	bhi.n	8006388 <UART_SetConfig+0x2e4>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0x280>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006349 	.word	0x08006349
 8006328:	08006389 	.word	0x08006389
 800632c:	08006351 	.word	0x08006351
 8006330:	08006389 	.word	0x08006389
 8006334:	08006357 	.word	0x08006357
 8006338:	08006389 	.word	0x08006389
 800633c:	08006389 	.word	0x08006389
 8006340:	08006389 	.word	0x08006389
 8006344:	0800635f 	.word	0x0800635f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006348:	f7fe fad0 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800634c:	61f8      	str	r0, [r7, #28]
        break;
 800634e:	e021      	b.n	8006394 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006350:	4b0c      	ldr	r3, [pc, #48]	; (8006384 <UART_SetConfig+0x2e0>)
 8006352:	61fb      	str	r3, [r7, #28]
        break;
 8006354:	e01e      	b.n	8006394 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006356:	f7fe fa31 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800635a:	61f8      	str	r0, [r7, #28]
        break;
 800635c:	e01a      	b.n	8006394 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800635e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006362:	61fb      	str	r3, [r7, #28]
        break;
 8006364:	e016      	b.n	8006394 <UART_SetConfig+0x2f0>
 8006366:	bf00      	nop
 8006368:	efff69f3 	.word	0xefff69f3
 800636c:	40008000 	.word	0x40008000
 8006370:	40013800 	.word	0x40013800
 8006374:	40021000 	.word	0x40021000
 8006378:	40004400 	.word	0x40004400
 800637c:	40004800 	.word	0x40004800
 8006380:	40004c00 	.word	0x40004c00
 8006384:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006392:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	2b00      	cmp	r3, #0
 8006398:	f000 80fa 	beq.w	8006590 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	005b      	lsls	r3, r3, #1
 80063a4:	4413      	add	r3, r2
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d305      	bcc.n	80063b8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063b2:	69fa      	ldr	r2, [r7, #28]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d903      	bls.n	80063c0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80063b8:	2301      	movs	r3, #1
 80063ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80063be:	e0e7      	b.n	8006590 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2200      	movs	r2, #0
 80063c4:	461c      	mov	r4, r3
 80063c6:	4615      	mov	r5, r2
 80063c8:	f04f 0200 	mov.w	r2, #0
 80063cc:	f04f 0300 	mov.w	r3, #0
 80063d0:	022b      	lsls	r3, r5, #8
 80063d2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063d6:	0222      	lsls	r2, r4, #8
 80063d8:	68f9      	ldr	r1, [r7, #12]
 80063da:	6849      	ldr	r1, [r1, #4]
 80063dc:	0849      	lsrs	r1, r1, #1
 80063de:	2000      	movs	r0, #0
 80063e0:	4688      	mov	r8, r1
 80063e2:	4681      	mov	r9, r0
 80063e4:	eb12 0a08 	adds.w	sl, r2, r8
 80063e8:	eb43 0b09 	adc.w	fp, r3, r9
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	603b      	str	r3, [r7, #0]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063fa:	4650      	mov	r0, sl
 80063fc:	4659      	mov	r1, fp
 80063fe:	f7f9 ff8f 	bl	8000320 <__aeabi_uldivmod>
 8006402:	4602      	mov	r2, r0
 8006404:	460b      	mov	r3, r1
 8006406:	4613      	mov	r3, r2
 8006408:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006410:	d308      	bcc.n	8006424 <UART_SetConfig+0x380>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006418:	d204      	bcs.n	8006424 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	60da      	str	r2, [r3, #12]
 8006422:	e0b5      	b.n	8006590 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800642a:	e0b1      	b.n	8006590 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006434:	d15d      	bne.n	80064f2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006436:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800643a:	2b08      	cmp	r3, #8
 800643c:	d827      	bhi.n	800648e <UART_SetConfig+0x3ea>
 800643e:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x3a0>)
 8006440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006444:	08006469 	.word	0x08006469
 8006448:	08006471 	.word	0x08006471
 800644c:	08006479 	.word	0x08006479
 8006450:	0800648f 	.word	0x0800648f
 8006454:	0800647f 	.word	0x0800647f
 8006458:	0800648f 	.word	0x0800648f
 800645c:	0800648f 	.word	0x0800648f
 8006460:	0800648f 	.word	0x0800648f
 8006464:	08006487 	.word	0x08006487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006468:	f7fe fa40 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 800646c:	61f8      	str	r0, [r7, #28]
        break;
 800646e:	e014      	b.n	800649a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006470:	f7fe fa52 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8006474:	61f8      	str	r0, [r7, #28]
        break;
 8006476:	e010      	b.n	800649a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006478:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <UART_SetConfig+0x508>)
 800647a:	61fb      	str	r3, [r7, #28]
        break;
 800647c:	e00d      	b.n	800649a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800647e:	f7fe f99d 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 8006482:	61f8      	str	r0, [r7, #28]
        break;
 8006484:	e009      	b.n	800649a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800648a:	61fb      	str	r3, [r7, #28]
        break;
 800648c:	e005      	b.n	800649a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d077      	beq.n	8006590 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	005a      	lsls	r2, r3, #1
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	085b      	lsrs	r3, r3, #1
 80064aa:	441a      	add	r2, r3
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	2b0f      	cmp	r3, #15
 80064ba:	d916      	bls.n	80064ea <UART_SetConfig+0x446>
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d212      	bcs.n	80064ea <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	f023 030f 	bic.w	r3, r3, #15
 80064cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064ce:	69bb      	ldr	r3, [r7, #24]
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f003 0307 	and.w	r3, r3, #7
 80064d8:	b29a      	uxth	r2, r3
 80064da:	8afb      	ldrh	r3, [r7, #22]
 80064dc:	4313      	orrs	r3, r2
 80064de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	8afa      	ldrh	r2, [r7, #22]
 80064e6:	60da      	str	r2, [r3, #12]
 80064e8:	e052      	b.n	8006590 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064f0:	e04e      	b.n	8006590 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064f6:	2b08      	cmp	r3, #8
 80064f8:	d827      	bhi.n	800654a <UART_SetConfig+0x4a6>
 80064fa:	a201      	add	r2, pc, #4	; (adr r2, 8006500 <UART_SetConfig+0x45c>)
 80064fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006500:	08006525 	.word	0x08006525
 8006504:	0800652d 	.word	0x0800652d
 8006508:	08006535 	.word	0x08006535
 800650c:	0800654b 	.word	0x0800654b
 8006510:	0800653b 	.word	0x0800653b
 8006514:	0800654b 	.word	0x0800654b
 8006518:	0800654b 	.word	0x0800654b
 800651c:	0800654b 	.word	0x0800654b
 8006520:	08006543 	.word	0x08006543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006524:	f7fe f9e2 	bl	80048ec <HAL_RCC_GetPCLK1Freq>
 8006528:	61f8      	str	r0, [r7, #28]
        break;
 800652a:	e014      	b.n	8006556 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800652c:	f7fe f9f4 	bl	8004918 <HAL_RCC_GetPCLK2Freq>
 8006530:	61f8      	str	r0, [r7, #28]
        break;
 8006532:	e010      	b.n	8006556 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006534:	4b1d      	ldr	r3, [pc, #116]	; (80065ac <UART_SetConfig+0x508>)
 8006536:	61fb      	str	r3, [r7, #28]
        break;
 8006538:	e00d      	b.n	8006556 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800653a:	f7fe f93f 	bl	80047bc <HAL_RCC_GetSysClockFreq>
 800653e:	61f8      	str	r0, [r7, #28]
        break;
 8006540:	e009      	b.n	8006556 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006546:	61fb      	str	r3, [r7, #28]
        break;
 8006548:	e005      	b.n	8006556 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800654a:	2300      	movs	r3, #0
 800654c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006554:	bf00      	nop
    }

    if (pclk != 0U)
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d019      	beq.n	8006590 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	085a      	lsrs	r2, r3, #1
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	441a      	add	r2, r3
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d909      	bls.n	800658a <UART_SetConfig+0x4e6>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d205      	bcs.n	800658a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	b29a      	uxth	r2, r3
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
 8006588:	e002      	b.n	8006590 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800659c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3728      	adds	r7, #40	; 0x28
 80065a4:	46bd      	mov	sp, r7
 80065a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065aa:	bf00      	nop
 80065ac:	00f42400 	.word	0x00f42400

080065b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00a      	beq.n	80065da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	f003 0302 	and.w	r3, r3, #2
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00a      	beq.n	80065fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	f003 0304 	and.w	r3, r3, #4
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00a      	beq.n	800661e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00a      	beq.n	8006662 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	430a      	orrs	r2, r1
 8006660:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006666:	f003 0320 	and.w	r3, r3, #32
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	430a      	orrs	r2, r1
 8006682:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d01a      	beq.n	80066c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ae:	d10a      	bne.n	80066c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	430a      	orrs	r2, r1
 80066c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	605a      	str	r2, [r3, #4]
  }
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b086      	sub	sp, #24
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006704:	f7fc fe2a 	bl	800335c <HAL_GetTick>
 8006708:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f003 0308 	and.w	r3, r3, #8
 8006714:	2b08      	cmp	r3, #8
 8006716:	d10e      	bne.n	8006736 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f82d 	bl	8006786 <UART_WaitOnFlagUntilTimeout>
 800672c:	4603      	mov	r3, r0
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e023      	b.n	800677e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b04      	cmp	r3, #4
 8006742:	d10e      	bne.n	8006762 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f817 	bl	8006786 <UART_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e00d      	b.n	800677e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2220      	movs	r2, #32
 800676c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}

08006786 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b09c      	sub	sp, #112	; 0x70
 800678a:	af00      	add	r7, sp, #0
 800678c:	60f8      	str	r0, [r7, #12]
 800678e:	60b9      	str	r1, [r7, #8]
 8006790:	603b      	str	r3, [r7, #0]
 8006792:	4613      	mov	r3, r2
 8006794:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006796:	e0a5      	b.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	f000 80a1 	beq.w	80068e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a2:	f7fc fddb 	bl	800335c <HAL_GetTick>
 80067a6:	4602      	mov	r2, r0
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d302      	bcc.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80067b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d13e      	bne.n	8006836 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067cc:	667b      	str	r3, [r7, #100]	; 0x64
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e6      	bne.n	80067b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	663b      	str	r3, [r7, #96]	; 0x60
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800680a:	64ba      	str	r2, [r7, #72]	; 0x48
 800680c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006810:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e5      	bne.n	80067ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2220      	movs	r2, #32
 8006822:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2220      	movs	r2, #32
 8006828:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e067      	b.n	8006906 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d04f      	beq.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69db      	ldr	r3, [r3, #28]
 800684a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006852:	d147      	bne.n	80068e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800685c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800686c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006872:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687c:	637b      	str	r3, [r7, #52]	; 0x34
 800687e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e6      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3308      	adds	r3, #8
 8006896:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	e853 3f00 	ldrex	r3, [r3]
 800689e:	613b      	str	r3, [r7, #16]
   return(result);
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f023 0301 	bic.w	r3, r3, #1
 80068a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068b0:	623a      	str	r2, [r7, #32]
 80068b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b4:	69f9      	ldr	r1, [r7, #28]
 80068b6:	6a3a      	ldr	r2, [r7, #32]
 80068b8:	e841 2300 	strex	r3, r2, [r1]
 80068bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1e5      	bne.n	8006890 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2220      	movs	r2, #32
 80068c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2220      	movs	r2, #32
 80068ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e010      	b.n	8006906 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	69da      	ldr	r2, [r3, #28]
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4013      	ands	r3, r2
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	461a      	mov	r2, r3
 80068fc:	79fb      	ldrb	r3, [r7, #7]
 80068fe:	429a      	cmp	r2, r3
 8006900:	f43f af4a 	beq.w	8006798 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3770      	adds	r7, #112	; 0x70
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}
	...

08006910 <__assert_func>:
 8006910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006912:	4614      	mov	r4, r2
 8006914:	461a      	mov	r2, r3
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <__assert_func+0x2c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4605      	mov	r5, r0
 800691c:	68d8      	ldr	r0, [r3, #12]
 800691e:	b14c      	cbz	r4, 8006934 <__assert_func+0x24>
 8006920:	4b07      	ldr	r3, [pc, #28]	; (8006940 <__assert_func+0x30>)
 8006922:	9100      	str	r1, [sp, #0]
 8006924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006928:	4906      	ldr	r1, [pc, #24]	; (8006944 <__assert_func+0x34>)
 800692a:	462b      	mov	r3, r5
 800692c:	f000 f814 	bl	8006958 <fiprintf>
 8006930:	f000 fc34 	bl	800719c <abort>
 8006934:	4b04      	ldr	r3, [pc, #16]	; (8006948 <__assert_func+0x38>)
 8006936:	461c      	mov	r4, r3
 8006938:	e7f3      	b.n	8006922 <__assert_func+0x12>
 800693a:	bf00      	nop
 800693c:	2000010c 	.word	0x2000010c
 8006940:	08007da4 	.word	0x08007da4
 8006944:	08007db1 	.word	0x08007db1
 8006948:	08007ddf 	.word	0x08007ddf

0800694c <__errno>:
 800694c:	4b01      	ldr	r3, [pc, #4]	; (8006954 <__errno+0x8>)
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	4770      	bx	lr
 8006952:	bf00      	nop
 8006954:	2000010c 	.word	0x2000010c

08006958 <fiprintf>:
 8006958:	b40e      	push	{r1, r2, r3}
 800695a:	b503      	push	{r0, r1, lr}
 800695c:	4601      	mov	r1, r0
 800695e:	ab03      	add	r3, sp, #12
 8006960:	4805      	ldr	r0, [pc, #20]	; (8006978 <fiprintf+0x20>)
 8006962:	f853 2b04 	ldr.w	r2, [r3], #4
 8006966:	6800      	ldr	r0, [r0, #0]
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	f000 f87b 	bl	8006a64 <_vfiprintf_r>
 800696e:	b002      	add	sp, #8
 8006970:	f85d eb04 	ldr.w	lr, [sp], #4
 8006974:	b003      	add	sp, #12
 8006976:	4770      	bx	lr
 8006978:	2000010c 	.word	0x2000010c

0800697c <__libc_init_array>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4d0d      	ldr	r5, [pc, #52]	; (80069b4 <__libc_init_array+0x38>)
 8006980:	4c0d      	ldr	r4, [pc, #52]	; (80069b8 <__libc_init_array+0x3c>)
 8006982:	1b64      	subs	r4, r4, r5
 8006984:	10a4      	asrs	r4, r4, #2
 8006986:	2600      	movs	r6, #0
 8006988:	42a6      	cmp	r6, r4
 800698a:	d109      	bne.n	80069a0 <__libc_init_array+0x24>
 800698c:	4d0b      	ldr	r5, [pc, #44]	; (80069bc <__libc_init_array+0x40>)
 800698e:	4c0c      	ldr	r4, [pc, #48]	; (80069c0 <__libc_init_array+0x44>)
 8006990:	f001 f818 	bl	80079c4 <_init>
 8006994:	1b64      	subs	r4, r4, r5
 8006996:	10a4      	asrs	r4, r4, #2
 8006998:	2600      	movs	r6, #0
 800699a:	42a6      	cmp	r6, r4
 800699c:	d105      	bne.n	80069aa <__libc_init_array+0x2e>
 800699e:	bd70      	pop	{r4, r5, r6, pc}
 80069a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069a4:	4798      	blx	r3
 80069a6:	3601      	adds	r6, #1
 80069a8:	e7ee      	b.n	8006988 <__libc_init_array+0xc>
 80069aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80069ae:	4798      	blx	r3
 80069b0:	3601      	adds	r6, #1
 80069b2:	e7f2      	b.n	800699a <__libc_init_array+0x1e>
 80069b4:	08007e80 	.word	0x08007e80
 80069b8:	08007e80 	.word	0x08007e80
 80069bc:	08007e80 	.word	0x08007e80
 80069c0:	08007e84 	.word	0x08007e84

080069c4 <memcmp>:
 80069c4:	b510      	push	{r4, lr}
 80069c6:	3901      	subs	r1, #1
 80069c8:	4402      	add	r2, r0
 80069ca:	4290      	cmp	r0, r2
 80069cc:	d101      	bne.n	80069d2 <memcmp+0xe>
 80069ce:	2000      	movs	r0, #0
 80069d0:	e005      	b.n	80069de <memcmp+0x1a>
 80069d2:	7803      	ldrb	r3, [r0, #0]
 80069d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80069d8:	42a3      	cmp	r3, r4
 80069da:	d001      	beq.n	80069e0 <memcmp+0x1c>
 80069dc:	1b18      	subs	r0, r3, r4
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	3001      	adds	r0, #1
 80069e2:	e7f2      	b.n	80069ca <memcmp+0x6>

080069e4 <memcpy>:
 80069e4:	440a      	add	r2, r1
 80069e6:	4291      	cmp	r1, r2
 80069e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ec:	d100      	bne.n	80069f0 <memcpy+0xc>
 80069ee:	4770      	bx	lr
 80069f0:	b510      	push	{r4, lr}
 80069f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069fa:	4291      	cmp	r1, r2
 80069fc:	d1f9      	bne.n	80069f2 <memcpy+0xe>
 80069fe:	bd10      	pop	{r4, pc}

08006a00 <memset>:
 8006a00:	4402      	add	r2, r0
 8006a02:	4603      	mov	r3, r0
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d100      	bne.n	8006a0a <memset+0xa>
 8006a08:	4770      	bx	lr
 8006a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0e:	e7f9      	b.n	8006a04 <memset+0x4>

08006a10 <__sfputc_r>:
 8006a10:	6893      	ldr	r3, [r2, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	b410      	push	{r4}
 8006a18:	6093      	str	r3, [r2, #8]
 8006a1a:	da08      	bge.n	8006a2e <__sfputc_r+0x1e>
 8006a1c:	6994      	ldr	r4, [r2, #24]
 8006a1e:	42a3      	cmp	r3, r4
 8006a20:	db01      	blt.n	8006a26 <__sfputc_r+0x16>
 8006a22:	290a      	cmp	r1, #10
 8006a24:	d103      	bne.n	8006a2e <__sfputc_r+0x1e>
 8006a26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a2a:	f000 baf7 	b.w	800701c <__swbuf_r>
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	1c58      	adds	r0, r3, #1
 8006a32:	6010      	str	r0, [r2, #0]
 8006a34:	7019      	strb	r1, [r3, #0]
 8006a36:	4608      	mov	r0, r1
 8006a38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <__sfputs_r>:
 8006a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a40:	4606      	mov	r6, r0
 8006a42:	460f      	mov	r7, r1
 8006a44:	4614      	mov	r4, r2
 8006a46:	18d5      	adds	r5, r2, r3
 8006a48:	42ac      	cmp	r4, r5
 8006a4a:	d101      	bne.n	8006a50 <__sfputs_r+0x12>
 8006a4c:	2000      	movs	r0, #0
 8006a4e:	e007      	b.n	8006a60 <__sfputs_r+0x22>
 8006a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a54:	463a      	mov	r2, r7
 8006a56:	4630      	mov	r0, r6
 8006a58:	f7ff ffda 	bl	8006a10 <__sfputc_r>
 8006a5c:	1c43      	adds	r3, r0, #1
 8006a5e:	d1f3      	bne.n	8006a48 <__sfputs_r+0xa>
 8006a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a64 <_vfiprintf_r>:
 8006a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a68:	460d      	mov	r5, r1
 8006a6a:	b09d      	sub	sp, #116	; 0x74
 8006a6c:	4614      	mov	r4, r2
 8006a6e:	4698      	mov	r8, r3
 8006a70:	4606      	mov	r6, r0
 8006a72:	b118      	cbz	r0, 8006a7c <_vfiprintf_r+0x18>
 8006a74:	6983      	ldr	r3, [r0, #24]
 8006a76:	b90b      	cbnz	r3, 8006a7c <_vfiprintf_r+0x18>
 8006a78:	f000 fcb2 	bl	80073e0 <__sinit>
 8006a7c:	4b89      	ldr	r3, [pc, #548]	; (8006ca4 <_vfiprintf_r+0x240>)
 8006a7e:	429d      	cmp	r5, r3
 8006a80:	d11b      	bne.n	8006aba <_vfiprintf_r+0x56>
 8006a82:	6875      	ldr	r5, [r6, #4]
 8006a84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a86:	07d9      	lsls	r1, r3, #31
 8006a88:	d405      	bmi.n	8006a96 <_vfiprintf_r+0x32>
 8006a8a:	89ab      	ldrh	r3, [r5, #12]
 8006a8c:	059a      	lsls	r2, r3, #22
 8006a8e:	d402      	bmi.n	8006a96 <_vfiprintf_r+0x32>
 8006a90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a92:	f000 fd43 	bl	800751c <__retarget_lock_acquire_recursive>
 8006a96:	89ab      	ldrh	r3, [r5, #12]
 8006a98:	071b      	lsls	r3, r3, #28
 8006a9a:	d501      	bpl.n	8006aa0 <_vfiprintf_r+0x3c>
 8006a9c:	692b      	ldr	r3, [r5, #16]
 8006a9e:	b9eb      	cbnz	r3, 8006adc <_vfiprintf_r+0x78>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4630      	mov	r0, r6
 8006aa4:	f000 fb0c 	bl	80070c0 <__swsetup_r>
 8006aa8:	b1c0      	cbz	r0, 8006adc <_vfiprintf_r+0x78>
 8006aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006aac:	07dc      	lsls	r4, r3, #31
 8006aae:	d50e      	bpl.n	8006ace <_vfiprintf_r+0x6a>
 8006ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab4:	b01d      	add	sp, #116	; 0x74
 8006ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aba:	4b7b      	ldr	r3, [pc, #492]	; (8006ca8 <_vfiprintf_r+0x244>)
 8006abc:	429d      	cmp	r5, r3
 8006abe:	d101      	bne.n	8006ac4 <_vfiprintf_r+0x60>
 8006ac0:	68b5      	ldr	r5, [r6, #8]
 8006ac2:	e7df      	b.n	8006a84 <_vfiprintf_r+0x20>
 8006ac4:	4b79      	ldr	r3, [pc, #484]	; (8006cac <_vfiprintf_r+0x248>)
 8006ac6:	429d      	cmp	r5, r3
 8006ac8:	bf08      	it	eq
 8006aca:	68f5      	ldreq	r5, [r6, #12]
 8006acc:	e7da      	b.n	8006a84 <_vfiprintf_r+0x20>
 8006ace:	89ab      	ldrh	r3, [r5, #12]
 8006ad0:	0598      	lsls	r0, r3, #22
 8006ad2:	d4ed      	bmi.n	8006ab0 <_vfiprintf_r+0x4c>
 8006ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ad6:	f000 fd22 	bl	800751e <__retarget_lock_release_recursive>
 8006ada:	e7e9      	b.n	8006ab0 <_vfiprintf_r+0x4c>
 8006adc:	2300      	movs	r3, #0
 8006ade:	9309      	str	r3, [sp, #36]	; 0x24
 8006ae0:	2320      	movs	r3, #32
 8006ae2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ae6:	f8cd 800c 	str.w	r8, [sp, #12]
 8006aea:	2330      	movs	r3, #48	; 0x30
 8006aec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cb0 <_vfiprintf_r+0x24c>
 8006af0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006af4:	f04f 0901 	mov.w	r9, #1
 8006af8:	4623      	mov	r3, r4
 8006afa:	469a      	mov	sl, r3
 8006afc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b00:	b10a      	cbz	r2, 8006b06 <_vfiprintf_r+0xa2>
 8006b02:	2a25      	cmp	r2, #37	; 0x25
 8006b04:	d1f9      	bne.n	8006afa <_vfiprintf_r+0x96>
 8006b06:	ebba 0b04 	subs.w	fp, sl, r4
 8006b0a:	d00b      	beq.n	8006b24 <_vfiprintf_r+0xc0>
 8006b0c:	465b      	mov	r3, fp
 8006b0e:	4622      	mov	r2, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ff93 	bl	8006a3e <__sfputs_r>
 8006b18:	3001      	adds	r0, #1
 8006b1a:	f000 80aa 	beq.w	8006c72 <_vfiprintf_r+0x20e>
 8006b1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b20:	445a      	add	r2, fp
 8006b22:	9209      	str	r2, [sp, #36]	; 0x24
 8006b24:	f89a 3000 	ldrb.w	r3, [sl]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 80a2 	beq.w	8006c72 <_vfiprintf_r+0x20e>
 8006b2e:	2300      	movs	r3, #0
 8006b30:	f04f 32ff 	mov.w	r2, #4294967295
 8006b34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b38:	f10a 0a01 	add.w	sl, sl, #1
 8006b3c:	9304      	str	r3, [sp, #16]
 8006b3e:	9307      	str	r3, [sp, #28]
 8006b40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b44:	931a      	str	r3, [sp, #104]	; 0x68
 8006b46:	4654      	mov	r4, sl
 8006b48:	2205      	movs	r2, #5
 8006b4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b4e:	4858      	ldr	r0, [pc, #352]	; (8006cb0 <_vfiprintf_r+0x24c>)
 8006b50:	f7f9 fb46 	bl	80001e0 <memchr>
 8006b54:	9a04      	ldr	r2, [sp, #16]
 8006b56:	b9d8      	cbnz	r0, 8006b90 <_vfiprintf_r+0x12c>
 8006b58:	06d1      	lsls	r1, r2, #27
 8006b5a:	bf44      	itt	mi
 8006b5c:	2320      	movmi	r3, #32
 8006b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b62:	0713      	lsls	r3, r2, #28
 8006b64:	bf44      	itt	mi
 8006b66:	232b      	movmi	r3, #43	; 0x2b
 8006b68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006b70:	2b2a      	cmp	r3, #42	; 0x2a
 8006b72:	d015      	beq.n	8006ba0 <_vfiprintf_r+0x13c>
 8006b74:	9a07      	ldr	r2, [sp, #28]
 8006b76:	4654      	mov	r4, sl
 8006b78:	2000      	movs	r0, #0
 8006b7a:	f04f 0c0a 	mov.w	ip, #10
 8006b7e:	4621      	mov	r1, r4
 8006b80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b84:	3b30      	subs	r3, #48	; 0x30
 8006b86:	2b09      	cmp	r3, #9
 8006b88:	d94e      	bls.n	8006c28 <_vfiprintf_r+0x1c4>
 8006b8a:	b1b0      	cbz	r0, 8006bba <_vfiprintf_r+0x156>
 8006b8c:	9207      	str	r2, [sp, #28]
 8006b8e:	e014      	b.n	8006bba <_vfiprintf_r+0x156>
 8006b90:	eba0 0308 	sub.w	r3, r0, r8
 8006b94:	fa09 f303 	lsl.w	r3, r9, r3
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	9304      	str	r3, [sp, #16]
 8006b9c:	46a2      	mov	sl, r4
 8006b9e:	e7d2      	b.n	8006b46 <_vfiprintf_r+0xe2>
 8006ba0:	9b03      	ldr	r3, [sp, #12]
 8006ba2:	1d19      	adds	r1, r3, #4
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	9103      	str	r1, [sp, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bfbb      	ittet	lt
 8006bac:	425b      	neglt	r3, r3
 8006bae:	f042 0202 	orrlt.w	r2, r2, #2
 8006bb2:	9307      	strge	r3, [sp, #28]
 8006bb4:	9307      	strlt	r3, [sp, #28]
 8006bb6:	bfb8      	it	lt
 8006bb8:	9204      	strlt	r2, [sp, #16]
 8006bba:	7823      	ldrb	r3, [r4, #0]
 8006bbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006bbe:	d10c      	bne.n	8006bda <_vfiprintf_r+0x176>
 8006bc0:	7863      	ldrb	r3, [r4, #1]
 8006bc2:	2b2a      	cmp	r3, #42	; 0x2a
 8006bc4:	d135      	bne.n	8006c32 <_vfiprintf_r+0x1ce>
 8006bc6:	9b03      	ldr	r3, [sp, #12]
 8006bc8:	1d1a      	adds	r2, r3, #4
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	9203      	str	r2, [sp, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	bfb8      	it	lt
 8006bd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8006bd6:	3402      	adds	r4, #2
 8006bd8:	9305      	str	r3, [sp, #20]
 8006bda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cc0 <_vfiprintf_r+0x25c>
 8006bde:	7821      	ldrb	r1, [r4, #0]
 8006be0:	2203      	movs	r2, #3
 8006be2:	4650      	mov	r0, sl
 8006be4:	f7f9 fafc 	bl	80001e0 <memchr>
 8006be8:	b140      	cbz	r0, 8006bfc <_vfiprintf_r+0x198>
 8006bea:	2340      	movs	r3, #64	; 0x40
 8006bec:	eba0 000a 	sub.w	r0, r0, sl
 8006bf0:	fa03 f000 	lsl.w	r0, r3, r0
 8006bf4:	9b04      	ldr	r3, [sp, #16]
 8006bf6:	4303      	orrs	r3, r0
 8006bf8:	3401      	adds	r4, #1
 8006bfa:	9304      	str	r3, [sp, #16]
 8006bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c00:	482c      	ldr	r0, [pc, #176]	; (8006cb4 <_vfiprintf_r+0x250>)
 8006c02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c06:	2206      	movs	r2, #6
 8006c08:	f7f9 faea 	bl	80001e0 <memchr>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d03f      	beq.n	8006c90 <_vfiprintf_r+0x22c>
 8006c10:	4b29      	ldr	r3, [pc, #164]	; (8006cb8 <_vfiprintf_r+0x254>)
 8006c12:	bb1b      	cbnz	r3, 8006c5c <_vfiprintf_r+0x1f8>
 8006c14:	9b03      	ldr	r3, [sp, #12]
 8006c16:	3307      	adds	r3, #7
 8006c18:	f023 0307 	bic.w	r3, r3, #7
 8006c1c:	3308      	adds	r3, #8
 8006c1e:	9303      	str	r3, [sp, #12]
 8006c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c22:	443b      	add	r3, r7
 8006c24:	9309      	str	r3, [sp, #36]	; 0x24
 8006c26:	e767      	b.n	8006af8 <_vfiprintf_r+0x94>
 8006c28:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c2c:	460c      	mov	r4, r1
 8006c2e:	2001      	movs	r0, #1
 8006c30:	e7a5      	b.n	8006b7e <_vfiprintf_r+0x11a>
 8006c32:	2300      	movs	r3, #0
 8006c34:	3401      	adds	r4, #1
 8006c36:	9305      	str	r3, [sp, #20]
 8006c38:	4619      	mov	r1, r3
 8006c3a:	f04f 0c0a 	mov.w	ip, #10
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c44:	3a30      	subs	r2, #48	; 0x30
 8006c46:	2a09      	cmp	r2, #9
 8006c48:	d903      	bls.n	8006c52 <_vfiprintf_r+0x1ee>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d0c5      	beq.n	8006bda <_vfiprintf_r+0x176>
 8006c4e:	9105      	str	r1, [sp, #20]
 8006c50:	e7c3      	b.n	8006bda <_vfiprintf_r+0x176>
 8006c52:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c56:	4604      	mov	r4, r0
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e7f0      	b.n	8006c3e <_vfiprintf_r+0x1da>
 8006c5c:	ab03      	add	r3, sp, #12
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	462a      	mov	r2, r5
 8006c62:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <_vfiprintf_r+0x258>)
 8006c64:	a904      	add	r1, sp, #16
 8006c66:	4630      	mov	r0, r6
 8006c68:	f3af 8000 	nop.w
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	1c78      	adds	r0, r7, #1
 8006c70:	d1d6      	bne.n	8006c20 <_vfiprintf_r+0x1bc>
 8006c72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c74:	07d9      	lsls	r1, r3, #31
 8006c76:	d405      	bmi.n	8006c84 <_vfiprintf_r+0x220>
 8006c78:	89ab      	ldrh	r3, [r5, #12]
 8006c7a:	059a      	lsls	r2, r3, #22
 8006c7c:	d402      	bmi.n	8006c84 <_vfiprintf_r+0x220>
 8006c7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c80:	f000 fc4d 	bl	800751e <__retarget_lock_release_recursive>
 8006c84:	89ab      	ldrh	r3, [r5, #12]
 8006c86:	065b      	lsls	r3, r3, #25
 8006c88:	f53f af12 	bmi.w	8006ab0 <_vfiprintf_r+0x4c>
 8006c8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c8e:	e711      	b.n	8006ab4 <_vfiprintf_r+0x50>
 8006c90:	ab03      	add	r3, sp, #12
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	462a      	mov	r2, r5
 8006c96:	4b09      	ldr	r3, [pc, #36]	; (8006cbc <_vfiprintf_r+0x258>)
 8006c98:	a904      	add	r1, sp, #16
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f000 f880 	bl	8006da0 <_printf_i>
 8006ca0:	e7e4      	b.n	8006c6c <_vfiprintf_r+0x208>
 8006ca2:	bf00      	nop
 8006ca4:	08007e38 	.word	0x08007e38
 8006ca8:	08007e58 	.word	0x08007e58
 8006cac:	08007e18 	.word	0x08007e18
 8006cb0:	08007de4 	.word	0x08007de4
 8006cb4:	08007dee 	.word	0x08007dee
 8006cb8:	00000000 	.word	0x00000000
 8006cbc:	08006a3f 	.word	0x08006a3f
 8006cc0:	08007dea 	.word	0x08007dea

08006cc4 <_printf_common>:
 8006cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc8:	4616      	mov	r6, r2
 8006cca:	4699      	mov	r9, r3
 8006ccc:	688a      	ldr	r2, [r1, #8]
 8006cce:	690b      	ldr	r3, [r1, #16]
 8006cd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	bfb8      	it	lt
 8006cd8:	4613      	movlt	r3, r2
 8006cda:	6033      	str	r3, [r6, #0]
 8006cdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ce0:	4607      	mov	r7, r0
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	b10a      	cbz	r2, 8006cea <_printf_common+0x26>
 8006ce6:	3301      	adds	r3, #1
 8006ce8:	6033      	str	r3, [r6, #0]
 8006cea:	6823      	ldr	r3, [r4, #0]
 8006cec:	0699      	lsls	r1, r3, #26
 8006cee:	bf42      	ittt	mi
 8006cf0:	6833      	ldrmi	r3, [r6, #0]
 8006cf2:	3302      	addmi	r3, #2
 8006cf4:	6033      	strmi	r3, [r6, #0]
 8006cf6:	6825      	ldr	r5, [r4, #0]
 8006cf8:	f015 0506 	ands.w	r5, r5, #6
 8006cfc:	d106      	bne.n	8006d0c <_printf_common+0x48>
 8006cfe:	f104 0a19 	add.w	sl, r4, #25
 8006d02:	68e3      	ldr	r3, [r4, #12]
 8006d04:	6832      	ldr	r2, [r6, #0]
 8006d06:	1a9b      	subs	r3, r3, r2
 8006d08:	42ab      	cmp	r3, r5
 8006d0a:	dc26      	bgt.n	8006d5a <_printf_common+0x96>
 8006d0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d10:	1e13      	subs	r3, r2, #0
 8006d12:	6822      	ldr	r2, [r4, #0]
 8006d14:	bf18      	it	ne
 8006d16:	2301      	movne	r3, #1
 8006d18:	0692      	lsls	r2, r2, #26
 8006d1a:	d42b      	bmi.n	8006d74 <_printf_common+0xb0>
 8006d1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d20:	4649      	mov	r1, r9
 8006d22:	4638      	mov	r0, r7
 8006d24:	47c0      	blx	r8
 8006d26:	3001      	adds	r0, #1
 8006d28:	d01e      	beq.n	8006d68 <_printf_common+0xa4>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	68e5      	ldr	r5, [r4, #12]
 8006d2e:	6832      	ldr	r2, [r6, #0]
 8006d30:	f003 0306 	and.w	r3, r3, #6
 8006d34:	2b04      	cmp	r3, #4
 8006d36:	bf08      	it	eq
 8006d38:	1aad      	subeq	r5, r5, r2
 8006d3a:	68a3      	ldr	r3, [r4, #8]
 8006d3c:	6922      	ldr	r2, [r4, #16]
 8006d3e:	bf0c      	ite	eq
 8006d40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d44:	2500      	movne	r5, #0
 8006d46:	4293      	cmp	r3, r2
 8006d48:	bfc4      	itt	gt
 8006d4a:	1a9b      	subgt	r3, r3, r2
 8006d4c:	18ed      	addgt	r5, r5, r3
 8006d4e:	2600      	movs	r6, #0
 8006d50:	341a      	adds	r4, #26
 8006d52:	42b5      	cmp	r5, r6
 8006d54:	d11a      	bne.n	8006d8c <_printf_common+0xc8>
 8006d56:	2000      	movs	r0, #0
 8006d58:	e008      	b.n	8006d6c <_printf_common+0xa8>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4652      	mov	r2, sl
 8006d5e:	4649      	mov	r1, r9
 8006d60:	4638      	mov	r0, r7
 8006d62:	47c0      	blx	r8
 8006d64:	3001      	adds	r0, #1
 8006d66:	d103      	bne.n	8006d70 <_printf_common+0xac>
 8006d68:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d70:	3501      	adds	r5, #1
 8006d72:	e7c6      	b.n	8006d02 <_printf_common+0x3e>
 8006d74:	18e1      	adds	r1, r4, r3
 8006d76:	1c5a      	adds	r2, r3, #1
 8006d78:	2030      	movs	r0, #48	; 0x30
 8006d7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d7e:	4422      	add	r2, r4
 8006d80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d88:	3302      	adds	r3, #2
 8006d8a:	e7c7      	b.n	8006d1c <_printf_common+0x58>
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	4622      	mov	r2, r4
 8006d90:	4649      	mov	r1, r9
 8006d92:	4638      	mov	r0, r7
 8006d94:	47c0      	blx	r8
 8006d96:	3001      	adds	r0, #1
 8006d98:	d0e6      	beq.n	8006d68 <_printf_common+0xa4>
 8006d9a:	3601      	adds	r6, #1
 8006d9c:	e7d9      	b.n	8006d52 <_printf_common+0x8e>
	...

08006da0 <_printf_i>:
 8006da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da4:	7e0f      	ldrb	r7, [r1, #24]
 8006da6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006da8:	2f78      	cmp	r7, #120	; 0x78
 8006daa:	4691      	mov	r9, r2
 8006dac:	4680      	mov	r8, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	469a      	mov	sl, r3
 8006db2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006db6:	d807      	bhi.n	8006dc8 <_printf_i+0x28>
 8006db8:	2f62      	cmp	r7, #98	; 0x62
 8006dba:	d80a      	bhi.n	8006dd2 <_printf_i+0x32>
 8006dbc:	2f00      	cmp	r7, #0
 8006dbe:	f000 80d8 	beq.w	8006f72 <_printf_i+0x1d2>
 8006dc2:	2f58      	cmp	r7, #88	; 0x58
 8006dc4:	f000 80a3 	beq.w	8006f0e <_printf_i+0x16e>
 8006dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dd0:	e03a      	b.n	8006e48 <_printf_i+0xa8>
 8006dd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006dd6:	2b15      	cmp	r3, #21
 8006dd8:	d8f6      	bhi.n	8006dc8 <_printf_i+0x28>
 8006dda:	a101      	add	r1, pc, #4	; (adr r1, 8006de0 <_printf_i+0x40>)
 8006ddc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006de0:	08006e39 	.word	0x08006e39
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006dc9 	.word	0x08006dc9
 8006dec:	08006dc9 	.word	0x08006dc9
 8006df0:	08006dc9 	.word	0x08006dc9
 8006df4:	08006dc9 	.word	0x08006dc9
 8006df8:	08006e4d 	.word	0x08006e4d
 8006dfc:	08006dc9 	.word	0x08006dc9
 8006e00:	08006dc9 	.word	0x08006dc9
 8006e04:	08006dc9 	.word	0x08006dc9
 8006e08:	08006dc9 	.word	0x08006dc9
 8006e0c:	08006f59 	.word	0x08006f59
 8006e10:	08006e7d 	.word	0x08006e7d
 8006e14:	08006f3b 	.word	0x08006f3b
 8006e18:	08006dc9 	.word	0x08006dc9
 8006e1c:	08006dc9 	.word	0x08006dc9
 8006e20:	08006f7b 	.word	0x08006f7b
 8006e24:	08006dc9 	.word	0x08006dc9
 8006e28:	08006e7d 	.word	0x08006e7d
 8006e2c:	08006dc9 	.word	0x08006dc9
 8006e30:	08006dc9 	.word	0x08006dc9
 8006e34:	08006f43 	.word	0x08006f43
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	1d1a      	adds	r2, r3, #4
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	602a      	str	r2, [r5, #0]
 8006e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e0a3      	b.n	8006f94 <_printf_i+0x1f4>
 8006e4c:	6820      	ldr	r0, [r4, #0]
 8006e4e:	6829      	ldr	r1, [r5, #0]
 8006e50:	0606      	lsls	r6, r0, #24
 8006e52:	f101 0304 	add.w	r3, r1, #4
 8006e56:	d50a      	bpl.n	8006e6e <_printf_i+0xce>
 8006e58:	680e      	ldr	r6, [r1, #0]
 8006e5a:	602b      	str	r3, [r5, #0]
 8006e5c:	2e00      	cmp	r6, #0
 8006e5e:	da03      	bge.n	8006e68 <_printf_i+0xc8>
 8006e60:	232d      	movs	r3, #45	; 0x2d
 8006e62:	4276      	negs	r6, r6
 8006e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e68:	485e      	ldr	r0, [pc, #376]	; (8006fe4 <_printf_i+0x244>)
 8006e6a:	230a      	movs	r3, #10
 8006e6c:	e019      	b.n	8006ea2 <_printf_i+0x102>
 8006e6e:	680e      	ldr	r6, [r1, #0]
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e76:	bf18      	it	ne
 8006e78:	b236      	sxthne	r6, r6
 8006e7a:	e7ef      	b.n	8006e5c <_printf_i+0xbc>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	6820      	ldr	r0, [r4, #0]
 8006e80:	1d19      	adds	r1, r3, #4
 8006e82:	6029      	str	r1, [r5, #0]
 8006e84:	0601      	lsls	r1, r0, #24
 8006e86:	d501      	bpl.n	8006e8c <_printf_i+0xec>
 8006e88:	681e      	ldr	r6, [r3, #0]
 8006e8a:	e002      	b.n	8006e92 <_printf_i+0xf2>
 8006e8c:	0646      	lsls	r6, r0, #25
 8006e8e:	d5fb      	bpl.n	8006e88 <_printf_i+0xe8>
 8006e90:	881e      	ldrh	r6, [r3, #0]
 8006e92:	4854      	ldr	r0, [pc, #336]	; (8006fe4 <_printf_i+0x244>)
 8006e94:	2f6f      	cmp	r7, #111	; 0x6f
 8006e96:	bf0c      	ite	eq
 8006e98:	2308      	moveq	r3, #8
 8006e9a:	230a      	movne	r3, #10
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ea2:	6865      	ldr	r5, [r4, #4]
 8006ea4:	60a5      	str	r5, [r4, #8]
 8006ea6:	2d00      	cmp	r5, #0
 8006ea8:	bfa2      	ittt	ge
 8006eaa:	6821      	ldrge	r1, [r4, #0]
 8006eac:	f021 0104 	bicge.w	r1, r1, #4
 8006eb0:	6021      	strge	r1, [r4, #0]
 8006eb2:	b90e      	cbnz	r6, 8006eb8 <_printf_i+0x118>
 8006eb4:	2d00      	cmp	r5, #0
 8006eb6:	d04d      	beq.n	8006f54 <_printf_i+0x1b4>
 8006eb8:	4615      	mov	r5, r2
 8006eba:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ebe:	fb03 6711 	mls	r7, r3, r1, r6
 8006ec2:	5dc7      	ldrb	r7, [r0, r7]
 8006ec4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006ec8:	4637      	mov	r7, r6
 8006eca:	42bb      	cmp	r3, r7
 8006ecc:	460e      	mov	r6, r1
 8006ece:	d9f4      	bls.n	8006eba <_printf_i+0x11a>
 8006ed0:	2b08      	cmp	r3, #8
 8006ed2:	d10b      	bne.n	8006eec <_printf_i+0x14c>
 8006ed4:	6823      	ldr	r3, [r4, #0]
 8006ed6:	07de      	lsls	r6, r3, #31
 8006ed8:	d508      	bpl.n	8006eec <_printf_i+0x14c>
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	6861      	ldr	r1, [r4, #4]
 8006ede:	4299      	cmp	r1, r3
 8006ee0:	bfde      	ittt	le
 8006ee2:	2330      	movle	r3, #48	; 0x30
 8006ee4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006ee8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006eec:	1b52      	subs	r2, r2, r5
 8006eee:	6122      	str	r2, [r4, #16]
 8006ef0:	f8cd a000 	str.w	sl, [sp]
 8006ef4:	464b      	mov	r3, r9
 8006ef6:	aa03      	add	r2, sp, #12
 8006ef8:	4621      	mov	r1, r4
 8006efa:	4640      	mov	r0, r8
 8006efc:	f7ff fee2 	bl	8006cc4 <_printf_common>
 8006f00:	3001      	adds	r0, #1
 8006f02:	d14c      	bne.n	8006f9e <_printf_i+0x1fe>
 8006f04:	f04f 30ff 	mov.w	r0, #4294967295
 8006f08:	b004      	add	sp, #16
 8006f0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f0e:	4835      	ldr	r0, [pc, #212]	; (8006fe4 <_printf_i+0x244>)
 8006f10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006f14:	6829      	ldr	r1, [r5, #0]
 8006f16:	6823      	ldr	r3, [r4, #0]
 8006f18:	f851 6b04 	ldr.w	r6, [r1], #4
 8006f1c:	6029      	str	r1, [r5, #0]
 8006f1e:	061d      	lsls	r5, r3, #24
 8006f20:	d514      	bpl.n	8006f4c <_printf_i+0x1ac>
 8006f22:	07df      	lsls	r7, r3, #31
 8006f24:	bf44      	itt	mi
 8006f26:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2a:	6023      	strmi	r3, [r4, #0]
 8006f2c:	b91e      	cbnz	r6, 8006f36 <_printf_i+0x196>
 8006f2e:	6823      	ldr	r3, [r4, #0]
 8006f30:	f023 0320 	bic.w	r3, r3, #32
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	2310      	movs	r3, #16
 8006f38:	e7b0      	b.n	8006e9c <_printf_i+0xfc>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f043 0320 	orr.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	2378      	movs	r3, #120	; 0x78
 8006f44:	4828      	ldr	r0, [pc, #160]	; (8006fe8 <_printf_i+0x248>)
 8006f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f4a:	e7e3      	b.n	8006f14 <_printf_i+0x174>
 8006f4c:	0659      	lsls	r1, r3, #25
 8006f4e:	bf48      	it	mi
 8006f50:	b2b6      	uxthmi	r6, r6
 8006f52:	e7e6      	b.n	8006f22 <_printf_i+0x182>
 8006f54:	4615      	mov	r5, r2
 8006f56:	e7bb      	b.n	8006ed0 <_printf_i+0x130>
 8006f58:	682b      	ldr	r3, [r5, #0]
 8006f5a:	6826      	ldr	r6, [r4, #0]
 8006f5c:	6961      	ldr	r1, [r4, #20]
 8006f5e:	1d18      	adds	r0, r3, #4
 8006f60:	6028      	str	r0, [r5, #0]
 8006f62:	0635      	lsls	r5, r6, #24
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	d501      	bpl.n	8006f6c <_printf_i+0x1cc>
 8006f68:	6019      	str	r1, [r3, #0]
 8006f6a:	e002      	b.n	8006f72 <_printf_i+0x1d2>
 8006f6c:	0670      	lsls	r0, r6, #25
 8006f6e:	d5fb      	bpl.n	8006f68 <_printf_i+0x1c8>
 8006f70:	8019      	strh	r1, [r3, #0]
 8006f72:	2300      	movs	r3, #0
 8006f74:	6123      	str	r3, [r4, #16]
 8006f76:	4615      	mov	r5, r2
 8006f78:	e7ba      	b.n	8006ef0 <_printf_i+0x150>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	1d1a      	adds	r2, r3, #4
 8006f7e:	602a      	str	r2, [r5, #0]
 8006f80:	681d      	ldr	r5, [r3, #0]
 8006f82:	6862      	ldr	r2, [r4, #4]
 8006f84:	2100      	movs	r1, #0
 8006f86:	4628      	mov	r0, r5
 8006f88:	f7f9 f92a 	bl	80001e0 <memchr>
 8006f8c:	b108      	cbz	r0, 8006f92 <_printf_i+0x1f2>
 8006f8e:	1b40      	subs	r0, r0, r5
 8006f90:	6060      	str	r0, [r4, #4]
 8006f92:	6863      	ldr	r3, [r4, #4]
 8006f94:	6123      	str	r3, [r4, #16]
 8006f96:	2300      	movs	r3, #0
 8006f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9c:	e7a8      	b.n	8006ef0 <_printf_i+0x150>
 8006f9e:	6923      	ldr	r3, [r4, #16]
 8006fa0:	462a      	mov	r2, r5
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	4640      	mov	r0, r8
 8006fa6:	47d0      	blx	sl
 8006fa8:	3001      	adds	r0, #1
 8006faa:	d0ab      	beq.n	8006f04 <_printf_i+0x164>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	079b      	lsls	r3, r3, #30
 8006fb0:	d413      	bmi.n	8006fda <_printf_i+0x23a>
 8006fb2:	68e0      	ldr	r0, [r4, #12]
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	4298      	cmp	r0, r3
 8006fb8:	bfb8      	it	lt
 8006fba:	4618      	movlt	r0, r3
 8006fbc:	e7a4      	b.n	8006f08 <_printf_i+0x168>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4632      	mov	r2, r6
 8006fc2:	4649      	mov	r1, r9
 8006fc4:	4640      	mov	r0, r8
 8006fc6:	47d0      	blx	sl
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d09b      	beq.n	8006f04 <_printf_i+0x164>
 8006fcc:	3501      	adds	r5, #1
 8006fce:	68e3      	ldr	r3, [r4, #12]
 8006fd0:	9903      	ldr	r1, [sp, #12]
 8006fd2:	1a5b      	subs	r3, r3, r1
 8006fd4:	42ab      	cmp	r3, r5
 8006fd6:	dcf2      	bgt.n	8006fbe <_printf_i+0x21e>
 8006fd8:	e7eb      	b.n	8006fb2 <_printf_i+0x212>
 8006fda:	2500      	movs	r5, #0
 8006fdc:	f104 0619 	add.w	r6, r4, #25
 8006fe0:	e7f5      	b.n	8006fce <_printf_i+0x22e>
 8006fe2:	bf00      	nop
 8006fe4:	08007df5 	.word	0x08007df5
 8006fe8:	08007e06 	.word	0x08007e06

08006fec <iprintf>:
 8006fec:	b40f      	push	{r0, r1, r2, r3}
 8006fee:	4b0a      	ldr	r3, [pc, #40]	; (8007018 <iprintf+0x2c>)
 8006ff0:	b513      	push	{r0, r1, r4, lr}
 8006ff2:	681c      	ldr	r4, [r3, #0]
 8006ff4:	b124      	cbz	r4, 8007000 <iprintf+0x14>
 8006ff6:	69a3      	ldr	r3, [r4, #24]
 8006ff8:	b913      	cbnz	r3, 8007000 <iprintf+0x14>
 8006ffa:	4620      	mov	r0, r4
 8006ffc:	f000 f9f0 	bl	80073e0 <__sinit>
 8007000:	ab05      	add	r3, sp, #20
 8007002:	9a04      	ldr	r2, [sp, #16]
 8007004:	68a1      	ldr	r1, [r4, #8]
 8007006:	9301      	str	r3, [sp, #4]
 8007008:	4620      	mov	r0, r4
 800700a:	f7ff fd2b 	bl	8006a64 <_vfiprintf_r>
 800700e:	b002      	add	sp, #8
 8007010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007014:	b004      	add	sp, #16
 8007016:	4770      	bx	lr
 8007018:	2000010c 	.word	0x2000010c

0800701c <__swbuf_r>:
 800701c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800701e:	460e      	mov	r6, r1
 8007020:	4614      	mov	r4, r2
 8007022:	4605      	mov	r5, r0
 8007024:	b118      	cbz	r0, 800702e <__swbuf_r+0x12>
 8007026:	6983      	ldr	r3, [r0, #24]
 8007028:	b90b      	cbnz	r3, 800702e <__swbuf_r+0x12>
 800702a:	f000 f9d9 	bl	80073e0 <__sinit>
 800702e:	4b21      	ldr	r3, [pc, #132]	; (80070b4 <__swbuf_r+0x98>)
 8007030:	429c      	cmp	r4, r3
 8007032:	d12b      	bne.n	800708c <__swbuf_r+0x70>
 8007034:	686c      	ldr	r4, [r5, #4]
 8007036:	69a3      	ldr	r3, [r4, #24]
 8007038:	60a3      	str	r3, [r4, #8]
 800703a:	89a3      	ldrh	r3, [r4, #12]
 800703c:	071a      	lsls	r2, r3, #28
 800703e:	d52f      	bpl.n	80070a0 <__swbuf_r+0x84>
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	b36b      	cbz	r3, 80070a0 <__swbuf_r+0x84>
 8007044:	6923      	ldr	r3, [r4, #16]
 8007046:	6820      	ldr	r0, [r4, #0]
 8007048:	1ac0      	subs	r0, r0, r3
 800704a:	6963      	ldr	r3, [r4, #20]
 800704c:	b2f6      	uxtb	r6, r6
 800704e:	4283      	cmp	r3, r0
 8007050:	4637      	mov	r7, r6
 8007052:	dc04      	bgt.n	800705e <__swbuf_r+0x42>
 8007054:	4621      	mov	r1, r4
 8007056:	4628      	mov	r0, r5
 8007058:	f000 f92e 	bl	80072b8 <_fflush_r>
 800705c:	bb30      	cbnz	r0, 80070ac <__swbuf_r+0x90>
 800705e:	68a3      	ldr	r3, [r4, #8]
 8007060:	3b01      	subs	r3, #1
 8007062:	60a3      	str	r3, [r4, #8]
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	1c5a      	adds	r2, r3, #1
 8007068:	6022      	str	r2, [r4, #0]
 800706a:	701e      	strb	r6, [r3, #0]
 800706c:	6963      	ldr	r3, [r4, #20]
 800706e:	3001      	adds	r0, #1
 8007070:	4283      	cmp	r3, r0
 8007072:	d004      	beq.n	800707e <__swbuf_r+0x62>
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	07db      	lsls	r3, r3, #31
 8007078:	d506      	bpl.n	8007088 <__swbuf_r+0x6c>
 800707a:	2e0a      	cmp	r6, #10
 800707c:	d104      	bne.n	8007088 <__swbuf_r+0x6c>
 800707e:	4621      	mov	r1, r4
 8007080:	4628      	mov	r0, r5
 8007082:	f000 f919 	bl	80072b8 <_fflush_r>
 8007086:	b988      	cbnz	r0, 80070ac <__swbuf_r+0x90>
 8007088:	4638      	mov	r0, r7
 800708a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800708c:	4b0a      	ldr	r3, [pc, #40]	; (80070b8 <__swbuf_r+0x9c>)
 800708e:	429c      	cmp	r4, r3
 8007090:	d101      	bne.n	8007096 <__swbuf_r+0x7a>
 8007092:	68ac      	ldr	r4, [r5, #8]
 8007094:	e7cf      	b.n	8007036 <__swbuf_r+0x1a>
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <__swbuf_r+0xa0>)
 8007098:	429c      	cmp	r4, r3
 800709a:	bf08      	it	eq
 800709c:	68ec      	ldreq	r4, [r5, #12]
 800709e:	e7ca      	b.n	8007036 <__swbuf_r+0x1a>
 80070a0:	4621      	mov	r1, r4
 80070a2:	4628      	mov	r0, r5
 80070a4:	f000 f80c 	bl	80070c0 <__swsetup_r>
 80070a8:	2800      	cmp	r0, #0
 80070aa:	d0cb      	beq.n	8007044 <__swbuf_r+0x28>
 80070ac:	f04f 37ff 	mov.w	r7, #4294967295
 80070b0:	e7ea      	b.n	8007088 <__swbuf_r+0x6c>
 80070b2:	bf00      	nop
 80070b4:	08007e38 	.word	0x08007e38
 80070b8:	08007e58 	.word	0x08007e58
 80070bc:	08007e18 	.word	0x08007e18

080070c0 <__swsetup_r>:
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <__swsetup_r+0xcc>)
 80070c2:	b570      	push	{r4, r5, r6, lr}
 80070c4:	681d      	ldr	r5, [r3, #0]
 80070c6:	4606      	mov	r6, r0
 80070c8:	460c      	mov	r4, r1
 80070ca:	b125      	cbz	r5, 80070d6 <__swsetup_r+0x16>
 80070cc:	69ab      	ldr	r3, [r5, #24]
 80070ce:	b913      	cbnz	r3, 80070d6 <__swsetup_r+0x16>
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 f985 	bl	80073e0 <__sinit>
 80070d6:	4b2e      	ldr	r3, [pc, #184]	; (8007190 <__swsetup_r+0xd0>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	d10f      	bne.n	80070fc <__swsetup_r+0x3c>
 80070dc:	686c      	ldr	r4, [r5, #4]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80070e4:	0719      	lsls	r1, r3, #28
 80070e6:	d42c      	bmi.n	8007142 <__swsetup_r+0x82>
 80070e8:	06dd      	lsls	r5, r3, #27
 80070ea:	d411      	bmi.n	8007110 <__swsetup_r+0x50>
 80070ec:	2309      	movs	r3, #9
 80070ee:	6033      	str	r3, [r6, #0]
 80070f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80070f4:	81a3      	strh	r3, [r4, #12]
 80070f6:	f04f 30ff 	mov.w	r0, #4294967295
 80070fa:	e03e      	b.n	800717a <__swsetup_r+0xba>
 80070fc:	4b25      	ldr	r3, [pc, #148]	; (8007194 <__swsetup_r+0xd4>)
 80070fe:	429c      	cmp	r4, r3
 8007100:	d101      	bne.n	8007106 <__swsetup_r+0x46>
 8007102:	68ac      	ldr	r4, [r5, #8]
 8007104:	e7eb      	b.n	80070de <__swsetup_r+0x1e>
 8007106:	4b24      	ldr	r3, [pc, #144]	; (8007198 <__swsetup_r+0xd8>)
 8007108:	429c      	cmp	r4, r3
 800710a:	bf08      	it	eq
 800710c:	68ec      	ldreq	r4, [r5, #12]
 800710e:	e7e6      	b.n	80070de <__swsetup_r+0x1e>
 8007110:	0758      	lsls	r0, r3, #29
 8007112:	d512      	bpl.n	800713a <__swsetup_r+0x7a>
 8007114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007116:	b141      	cbz	r1, 800712a <__swsetup_r+0x6a>
 8007118:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800711c:	4299      	cmp	r1, r3
 800711e:	d002      	beq.n	8007126 <__swsetup_r+0x66>
 8007120:	4630      	mov	r0, r6
 8007122:	f000 fa63 	bl	80075ec <_free_r>
 8007126:	2300      	movs	r3, #0
 8007128:	6363      	str	r3, [r4, #52]	; 0x34
 800712a:	89a3      	ldrh	r3, [r4, #12]
 800712c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007130:	81a3      	strh	r3, [r4, #12]
 8007132:	2300      	movs	r3, #0
 8007134:	6063      	str	r3, [r4, #4]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	89a3      	ldrh	r3, [r4, #12]
 800713c:	f043 0308 	orr.w	r3, r3, #8
 8007140:	81a3      	strh	r3, [r4, #12]
 8007142:	6923      	ldr	r3, [r4, #16]
 8007144:	b94b      	cbnz	r3, 800715a <__swsetup_r+0x9a>
 8007146:	89a3      	ldrh	r3, [r4, #12]
 8007148:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800714c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007150:	d003      	beq.n	800715a <__swsetup_r+0x9a>
 8007152:	4621      	mov	r1, r4
 8007154:	4630      	mov	r0, r6
 8007156:	f000 fa09 	bl	800756c <__smakebuf_r>
 800715a:	89a0      	ldrh	r0, [r4, #12]
 800715c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007160:	f010 0301 	ands.w	r3, r0, #1
 8007164:	d00a      	beq.n	800717c <__swsetup_r+0xbc>
 8007166:	2300      	movs	r3, #0
 8007168:	60a3      	str	r3, [r4, #8]
 800716a:	6963      	ldr	r3, [r4, #20]
 800716c:	425b      	negs	r3, r3
 800716e:	61a3      	str	r3, [r4, #24]
 8007170:	6923      	ldr	r3, [r4, #16]
 8007172:	b943      	cbnz	r3, 8007186 <__swsetup_r+0xc6>
 8007174:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007178:	d1ba      	bne.n	80070f0 <__swsetup_r+0x30>
 800717a:	bd70      	pop	{r4, r5, r6, pc}
 800717c:	0781      	lsls	r1, r0, #30
 800717e:	bf58      	it	pl
 8007180:	6963      	ldrpl	r3, [r4, #20]
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	e7f4      	b.n	8007170 <__swsetup_r+0xb0>
 8007186:	2000      	movs	r0, #0
 8007188:	e7f7      	b.n	800717a <__swsetup_r+0xba>
 800718a:	bf00      	nop
 800718c:	2000010c 	.word	0x2000010c
 8007190:	08007e38 	.word	0x08007e38
 8007194:	08007e58 	.word	0x08007e58
 8007198:	08007e18 	.word	0x08007e18

0800719c <abort>:
 800719c:	b508      	push	{r3, lr}
 800719e:	2006      	movs	r0, #6
 80071a0:	f000 fb3c 	bl	800781c <raise>
 80071a4:	2001      	movs	r0, #1
 80071a6:	f7fb ff7f 	bl	80030a8 <_exit>
	...

080071ac <__sflush_r>:
 80071ac:	898a      	ldrh	r2, [r1, #12]
 80071ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b2:	4605      	mov	r5, r0
 80071b4:	0710      	lsls	r0, r2, #28
 80071b6:	460c      	mov	r4, r1
 80071b8:	d458      	bmi.n	800726c <__sflush_r+0xc0>
 80071ba:	684b      	ldr	r3, [r1, #4]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	dc05      	bgt.n	80071cc <__sflush_r+0x20>
 80071c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dc02      	bgt.n	80071cc <__sflush_r+0x20>
 80071c6:	2000      	movs	r0, #0
 80071c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	d0f9      	beq.n	80071c6 <__sflush_r+0x1a>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071d8:	682f      	ldr	r7, [r5, #0]
 80071da:	602b      	str	r3, [r5, #0]
 80071dc:	d032      	beq.n	8007244 <__sflush_r+0x98>
 80071de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	075a      	lsls	r2, r3, #29
 80071e4:	d505      	bpl.n	80071f2 <__sflush_r+0x46>
 80071e6:	6863      	ldr	r3, [r4, #4]
 80071e8:	1ac0      	subs	r0, r0, r3
 80071ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80071ec:	b10b      	cbz	r3, 80071f2 <__sflush_r+0x46>
 80071ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071f0:	1ac0      	subs	r0, r0, r3
 80071f2:	2300      	movs	r3, #0
 80071f4:	4602      	mov	r2, r0
 80071f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071f8:	6a21      	ldr	r1, [r4, #32]
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b0      	blx	r6
 80071fe:	1c43      	adds	r3, r0, #1
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	d106      	bne.n	8007212 <__sflush_r+0x66>
 8007204:	6829      	ldr	r1, [r5, #0]
 8007206:	291d      	cmp	r1, #29
 8007208:	d82c      	bhi.n	8007264 <__sflush_r+0xb8>
 800720a:	4a2a      	ldr	r2, [pc, #168]	; (80072b4 <__sflush_r+0x108>)
 800720c:	40ca      	lsrs	r2, r1
 800720e:	07d6      	lsls	r6, r2, #31
 8007210:	d528      	bpl.n	8007264 <__sflush_r+0xb8>
 8007212:	2200      	movs	r2, #0
 8007214:	6062      	str	r2, [r4, #4]
 8007216:	04d9      	lsls	r1, r3, #19
 8007218:	6922      	ldr	r2, [r4, #16]
 800721a:	6022      	str	r2, [r4, #0]
 800721c:	d504      	bpl.n	8007228 <__sflush_r+0x7c>
 800721e:	1c42      	adds	r2, r0, #1
 8007220:	d101      	bne.n	8007226 <__sflush_r+0x7a>
 8007222:	682b      	ldr	r3, [r5, #0]
 8007224:	b903      	cbnz	r3, 8007228 <__sflush_r+0x7c>
 8007226:	6560      	str	r0, [r4, #84]	; 0x54
 8007228:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800722a:	602f      	str	r7, [r5, #0]
 800722c:	2900      	cmp	r1, #0
 800722e:	d0ca      	beq.n	80071c6 <__sflush_r+0x1a>
 8007230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007234:	4299      	cmp	r1, r3
 8007236:	d002      	beq.n	800723e <__sflush_r+0x92>
 8007238:	4628      	mov	r0, r5
 800723a:	f000 f9d7 	bl	80075ec <_free_r>
 800723e:	2000      	movs	r0, #0
 8007240:	6360      	str	r0, [r4, #52]	; 0x34
 8007242:	e7c1      	b.n	80071c8 <__sflush_r+0x1c>
 8007244:	6a21      	ldr	r1, [r4, #32]
 8007246:	2301      	movs	r3, #1
 8007248:	4628      	mov	r0, r5
 800724a:	47b0      	blx	r6
 800724c:	1c41      	adds	r1, r0, #1
 800724e:	d1c7      	bne.n	80071e0 <__sflush_r+0x34>
 8007250:	682b      	ldr	r3, [r5, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0c4      	beq.n	80071e0 <__sflush_r+0x34>
 8007256:	2b1d      	cmp	r3, #29
 8007258:	d001      	beq.n	800725e <__sflush_r+0xb2>
 800725a:	2b16      	cmp	r3, #22
 800725c:	d101      	bne.n	8007262 <__sflush_r+0xb6>
 800725e:	602f      	str	r7, [r5, #0]
 8007260:	e7b1      	b.n	80071c6 <__sflush_r+0x1a>
 8007262:	89a3      	ldrh	r3, [r4, #12]
 8007264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007268:	81a3      	strh	r3, [r4, #12]
 800726a:	e7ad      	b.n	80071c8 <__sflush_r+0x1c>
 800726c:	690f      	ldr	r7, [r1, #16]
 800726e:	2f00      	cmp	r7, #0
 8007270:	d0a9      	beq.n	80071c6 <__sflush_r+0x1a>
 8007272:	0793      	lsls	r3, r2, #30
 8007274:	680e      	ldr	r6, [r1, #0]
 8007276:	bf08      	it	eq
 8007278:	694b      	ldreq	r3, [r1, #20]
 800727a:	600f      	str	r7, [r1, #0]
 800727c:	bf18      	it	ne
 800727e:	2300      	movne	r3, #0
 8007280:	eba6 0807 	sub.w	r8, r6, r7
 8007284:	608b      	str	r3, [r1, #8]
 8007286:	f1b8 0f00 	cmp.w	r8, #0
 800728a:	dd9c      	ble.n	80071c6 <__sflush_r+0x1a>
 800728c:	6a21      	ldr	r1, [r4, #32]
 800728e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007290:	4643      	mov	r3, r8
 8007292:	463a      	mov	r2, r7
 8007294:	4628      	mov	r0, r5
 8007296:	47b0      	blx	r6
 8007298:	2800      	cmp	r0, #0
 800729a:	dc06      	bgt.n	80072aa <__sflush_r+0xfe>
 800729c:	89a3      	ldrh	r3, [r4, #12]
 800729e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072a2:	81a3      	strh	r3, [r4, #12]
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	e78e      	b.n	80071c8 <__sflush_r+0x1c>
 80072aa:	4407      	add	r7, r0
 80072ac:	eba8 0800 	sub.w	r8, r8, r0
 80072b0:	e7e9      	b.n	8007286 <__sflush_r+0xda>
 80072b2:	bf00      	nop
 80072b4:	20400001 	.word	0x20400001

080072b8 <_fflush_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	4605      	mov	r5, r0
 80072be:	460c      	mov	r4, r1
 80072c0:	b913      	cbnz	r3, 80072c8 <_fflush_r+0x10>
 80072c2:	2500      	movs	r5, #0
 80072c4:	4628      	mov	r0, r5
 80072c6:	bd38      	pop	{r3, r4, r5, pc}
 80072c8:	b118      	cbz	r0, 80072d2 <_fflush_r+0x1a>
 80072ca:	6983      	ldr	r3, [r0, #24]
 80072cc:	b90b      	cbnz	r3, 80072d2 <_fflush_r+0x1a>
 80072ce:	f000 f887 	bl	80073e0 <__sinit>
 80072d2:	4b14      	ldr	r3, [pc, #80]	; (8007324 <_fflush_r+0x6c>)
 80072d4:	429c      	cmp	r4, r3
 80072d6:	d11b      	bne.n	8007310 <_fflush_r+0x58>
 80072d8:	686c      	ldr	r4, [r5, #4]
 80072da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d0ef      	beq.n	80072c2 <_fflush_r+0xa>
 80072e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80072e4:	07d0      	lsls	r0, r2, #31
 80072e6:	d404      	bmi.n	80072f2 <_fflush_r+0x3a>
 80072e8:	0599      	lsls	r1, r3, #22
 80072ea:	d402      	bmi.n	80072f2 <_fflush_r+0x3a>
 80072ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ee:	f000 f915 	bl	800751c <__retarget_lock_acquire_recursive>
 80072f2:	4628      	mov	r0, r5
 80072f4:	4621      	mov	r1, r4
 80072f6:	f7ff ff59 	bl	80071ac <__sflush_r>
 80072fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072fc:	07da      	lsls	r2, r3, #31
 80072fe:	4605      	mov	r5, r0
 8007300:	d4e0      	bmi.n	80072c4 <_fflush_r+0xc>
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	d4dd      	bmi.n	80072c4 <_fflush_r+0xc>
 8007308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730a:	f000 f908 	bl	800751e <__retarget_lock_release_recursive>
 800730e:	e7d9      	b.n	80072c4 <_fflush_r+0xc>
 8007310:	4b05      	ldr	r3, [pc, #20]	; (8007328 <_fflush_r+0x70>)
 8007312:	429c      	cmp	r4, r3
 8007314:	d101      	bne.n	800731a <_fflush_r+0x62>
 8007316:	68ac      	ldr	r4, [r5, #8]
 8007318:	e7df      	b.n	80072da <_fflush_r+0x22>
 800731a:	4b04      	ldr	r3, [pc, #16]	; (800732c <_fflush_r+0x74>)
 800731c:	429c      	cmp	r4, r3
 800731e:	bf08      	it	eq
 8007320:	68ec      	ldreq	r4, [r5, #12]
 8007322:	e7da      	b.n	80072da <_fflush_r+0x22>
 8007324:	08007e38 	.word	0x08007e38
 8007328:	08007e58 	.word	0x08007e58
 800732c:	08007e18 	.word	0x08007e18

08007330 <std>:
 8007330:	2300      	movs	r3, #0
 8007332:	b510      	push	{r4, lr}
 8007334:	4604      	mov	r4, r0
 8007336:	e9c0 3300 	strd	r3, r3, [r0]
 800733a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800733e:	6083      	str	r3, [r0, #8]
 8007340:	8181      	strh	r1, [r0, #12]
 8007342:	6643      	str	r3, [r0, #100]	; 0x64
 8007344:	81c2      	strh	r2, [r0, #14]
 8007346:	6183      	str	r3, [r0, #24]
 8007348:	4619      	mov	r1, r3
 800734a:	2208      	movs	r2, #8
 800734c:	305c      	adds	r0, #92	; 0x5c
 800734e:	f7ff fb57 	bl	8006a00 <memset>
 8007352:	4b05      	ldr	r3, [pc, #20]	; (8007368 <std+0x38>)
 8007354:	6263      	str	r3, [r4, #36]	; 0x24
 8007356:	4b05      	ldr	r3, [pc, #20]	; (800736c <std+0x3c>)
 8007358:	62a3      	str	r3, [r4, #40]	; 0x28
 800735a:	4b05      	ldr	r3, [pc, #20]	; (8007370 <std+0x40>)
 800735c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800735e:	4b05      	ldr	r3, [pc, #20]	; (8007374 <std+0x44>)
 8007360:	6224      	str	r4, [r4, #32]
 8007362:	6323      	str	r3, [r4, #48]	; 0x30
 8007364:	bd10      	pop	{r4, pc}
 8007366:	bf00      	nop
 8007368:	08007855 	.word	0x08007855
 800736c:	08007877 	.word	0x08007877
 8007370:	080078af 	.word	0x080078af
 8007374:	080078d3 	.word	0x080078d3

08007378 <_cleanup_r>:
 8007378:	4901      	ldr	r1, [pc, #4]	; (8007380 <_cleanup_r+0x8>)
 800737a:	f000 b8af 	b.w	80074dc <_fwalk_reent>
 800737e:	bf00      	nop
 8007380:	080072b9 	.word	0x080072b9

08007384 <__sfmoreglue>:
 8007384:	b570      	push	{r4, r5, r6, lr}
 8007386:	2268      	movs	r2, #104	; 0x68
 8007388:	1e4d      	subs	r5, r1, #1
 800738a:	4355      	muls	r5, r2
 800738c:	460e      	mov	r6, r1
 800738e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007392:	f000 f997 	bl	80076c4 <_malloc_r>
 8007396:	4604      	mov	r4, r0
 8007398:	b140      	cbz	r0, 80073ac <__sfmoreglue+0x28>
 800739a:	2100      	movs	r1, #0
 800739c:	e9c0 1600 	strd	r1, r6, [r0]
 80073a0:	300c      	adds	r0, #12
 80073a2:	60a0      	str	r0, [r4, #8]
 80073a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073a8:	f7ff fb2a 	bl	8006a00 <memset>
 80073ac:	4620      	mov	r0, r4
 80073ae:	bd70      	pop	{r4, r5, r6, pc}

080073b0 <__sfp_lock_acquire>:
 80073b0:	4801      	ldr	r0, [pc, #4]	; (80073b8 <__sfp_lock_acquire+0x8>)
 80073b2:	f000 b8b3 	b.w	800751c <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	20000315 	.word	0x20000315

080073bc <__sfp_lock_release>:
 80073bc:	4801      	ldr	r0, [pc, #4]	; (80073c4 <__sfp_lock_release+0x8>)
 80073be:	f000 b8ae 	b.w	800751e <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	20000315 	.word	0x20000315

080073c8 <__sinit_lock_acquire>:
 80073c8:	4801      	ldr	r0, [pc, #4]	; (80073d0 <__sinit_lock_acquire+0x8>)
 80073ca:	f000 b8a7 	b.w	800751c <__retarget_lock_acquire_recursive>
 80073ce:	bf00      	nop
 80073d0:	20000316 	.word	0x20000316

080073d4 <__sinit_lock_release>:
 80073d4:	4801      	ldr	r0, [pc, #4]	; (80073dc <__sinit_lock_release+0x8>)
 80073d6:	f000 b8a2 	b.w	800751e <__retarget_lock_release_recursive>
 80073da:	bf00      	nop
 80073dc:	20000316 	.word	0x20000316

080073e0 <__sinit>:
 80073e0:	b510      	push	{r4, lr}
 80073e2:	4604      	mov	r4, r0
 80073e4:	f7ff fff0 	bl	80073c8 <__sinit_lock_acquire>
 80073e8:	69a3      	ldr	r3, [r4, #24]
 80073ea:	b11b      	cbz	r3, 80073f4 <__sinit+0x14>
 80073ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073f0:	f7ff bff0 	b.w	80073d4 <__sinit_lock_release>
 80073f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80073f8:	6523      	str	r3, [r4, #80]	; 0x50
 80073fa:	4b13      	ldr	r3, [pc, #76]	; (8007448 <__sinit+0x68>)
 80073fc:	4a13      	ldr	r2, [pc, #76]	; (800744c <__sinit+0x6c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	62a2      	str	r2, [r4, #40]	; 0x28
 8007402:	42a3      	cmp	r3, r4
 8007404:	bf04      	itt	eq
 8007406:	2301      	moveq	r3, #1
 8007408:	61a3      	streq	r3, [r4, #24]
 800740a:	4620      	mov	r0, r4
 800740c:	f000 f820 	bl	8007450 <__sfp>
 8007410:	6060      	str	r0, [r4, #4]
 8007412:	4620      	mov	r0, r4
 8007414:	f000 f81c 	bl	8007450 <__sfp>
 8007418:	60a0      	str	r0, [r4, #8]
 800741a:	4620      	mov	r0, r4
 800741c:	f000 f818 	bl	8007450 <__sfp>
 8007420:	2200      	movs	r2, #0
 8007422:	60e0      	str	r0, [r4, #12]
 8007424:	2104      	movs	r1, #4
 8007426:	6860      	ldr	r0, [r4, #4]
 8007428:	f7ff ff82 	bl	8007330 <std>
 800742c:	68a0      	ldr	r0, [r4, #8]
 800742e:	2201      	movs	r2, #1
 8007430:	2109      	movs	r1, #9
 8007432:	f7ff ff7d 	bl	8007330 <std>
 8007436:	68e0      	ldr	r0, [r4, #12]
 8007438:	2202      	movs	r2, #2
 800743a:	2112      	movs	r1, #18
 800743c:	f7ff ff78 	bl	8007330 <std>
 8007440:	2301      	movs	r3, #1
 8007442:	61a3      	str	r3, [r4, #24]
 8007444:	e7d2      	b.n	80073ec <__sinit+0xc>
 8007446:	bf00      	nop
 8007448:	08007de0 	.word	0x08007de0
 800744c:	08007379 	.word	0x08007379

08007450 <__sfp>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	4607      	mov	r7, r0
 8007454:	f7ff ffac 	bl	80073b0 <__sfp_lock_acquire>
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <__sfp+0x84>)
 800745a:	681e      	ldr	r6, [r3, #0]
 800745c:	69b3      	ldr	r3, [r6, #24]
 800745e:	b913      	cbnz	r3, 8007466 <__sfp+0x16>
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff ffbd 	bl	80073e0 <__sinit>
 8007466:	3648      	adds	r6, #72	; 0x48
 8007468:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800746c:	3b01      	subs	r3, #1
 800746e:	d503      	bpl.n	8007478 <__sfp+0x28>
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	b30b      	cbz	r3, 80074b8 <__sfp+0x68>
 8007474:	6836      	ldr	r6, [r6, #0]
 8007476:	e7f7      	b.n	8007468 <__sfp+0x18>
 8007478:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800747c:	b9d5      	cbnz	r5, 80074b4 <__sfp+0x64>
 800747e:	4b16      	ldr	r3, [pc, #88]	; (80074d8 <__sfp+0x88>)
 8007480:	60e3      	str	r3, [r4, #12]
 8007482:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007486:	6665      	str	r5, [r4, #100]	; 0x64
 8007488:	f000 f847 	bl	800751a <__retarget_lock_init_recursive>
 800748c:	f7ff ff96 	bl	80073bc <__sfp_lock_release>
 8007490:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007494:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007498:	6025      	str	r5, [r4, #0]
 800749a:	61a5      	str	r5, [r4, #24]
 800749c:	2208      	movs	r2, #8
 800749e:	4629      	mov	r1, r5
 80074a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074a4:	f7ff faac 	bl	8006a00 <memset>
 80074a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074b0:	4620      	mov	r0, r4
 80074b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074b4:	3468      	adds	r4, #104	; 0x68
 80074b6:	e7d9      	b.n	800746c <__sfp+0x1c>
 80074b8:	2104      	movs	r1, #4
 80074ba:	4638      	mov	r0, r7
 80074bc:	f7ff ff62 	bl	8007384 <__sfmoreglue>
 80074c0:	4604      	mov	r4, r0
 80074c2:	6030      	str	r0, [r6, #0]
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d1d5      	bne.n	8007474 <__sfp+0x24>
 80074c8:	f7ff ff78 	bl	80073bc <__sfp_lock_release>
 80074cc:	230c      	movs	r3, #12
 80074ce:	603b      	str	r3, [r7, #0]
 80074d0:	e7ee      	b.n	80074b0 <__sfp+0x60>
 80074d2:	bf00      	nop
 80074d4:	08007de0 	.word	0x08007de0
 80074d8:	ffff0001 	.word	0xffff0001

080074dc <_fwalk_reent>:
 80074dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074e0:	4606      	mov	r6, r0
 80074e2:	4688      	mov	r8, r1
 80074e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80074e8:	2700      	movs	r7, #0
 80074ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074ee:	f1b9 0901 	subs.w	r9, r9, #1
 80074f2:	d505      	bpl.n	8007500 <_fwalk_reent+0x24>
 80074f4:	6824      	ldr	r4, [r4, #0]
 80074f6:	2c00      	cmp	r4, #0
 80074f8:	d1f7      	bne.n	80074ea <_fwalk_reent+0xe>
 80074fa:	4638      	mov	r0, r7
 80074fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007500:	89ab      	ldrh	r3, [r5, #12]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d907      	bls.n	8007516 <_fwalk_reent+0x3a>
 8007506:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800750a:	3301      	adds	r3, #1
 800750c:	d003      	beq.n	8007516 <_fwalk_reent+0x3a>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	47c0      	blx	r8
 8007514:	4307      	orrs	r7, r0
 8007516:	3568      	adds	r5, #104	; 0x68
 8007518:	e7e9      	b.n	80074ee <_fwalk_reent+0x12>

0800751a <__retarget_lock_init_recursive>:
 800751a:	4770      	bx	lr

0800751c <__retarget_lock_acquire_recursive>:
 800751c:	4770      	bx	lr

0800751e <__retarget_lock_release_recursive>:
 800751e:	4770      	bx	lr

08007520 <__swhatbuf_r>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	460e      	mov	r6, r1
 8007524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007528:	2900      	cmp	r1, #0
 800752a:	b096      	sub	sp, #88	; 0x58
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	da08      	bge.n	8007544 <__swhatbuf_r+0x24>
 8007532:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	602a      	str	r2, [r5, #0]
 800753a:	061a      	lsls	r2, r3, #24
 800753c:	d410      	bmi.n	8007560 <__swhatbuf_r+0x40>
 800753e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007542:	e00e      	b.n	8007562 <__swhatbuf_r+0x42>
 8007544:	466a      	mov	r2, sp
 8007546:	f000 f9eb 	bl	8007920 <_fstat_r>
 800754a:	2800      	cmp	r0, #0
 800754c:	dbf1      	blt.n	8007532 <__swhatbuf_r+0x12>
 800754e:	9a01      	ldr	r2, [sp, #4]
 8007550:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007554:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007558:	425a      	negs	r2, r3
 800755a:	415a      	adcs	r2, r3
 800755c:	602a      	str	r2, [r5, #0]
 800755e:	e7ee      	b.n	800753e <__swhatbuf_r+0x1e>
 8007560:	2340      	movs	r3, #64	; 0x40
 8007562:	2000      	movs	r0, #0
 8007564:	6023      	str	r3, [r4, #0]
 8007566:	b016      	add	sp, #88	; 0x58
 8007568:	bd70      	pop	{r4, r5, r6, pc}
	...

0800756c <__smakebuf_r>:
 800756c:	898b      	ldrh	r3, [r1, #12]
 800756e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007570:	079d      	lsls	r5, r3, #30
 8007572:	4606      	mov	r6, r0
 8007574:	460c      	mov	r4, r1
 8007576:	d507      	bpl.n	8007588 <__smakebuf_r+0x1c>
 8007578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	6123      	str	r3, [r4, #16]
 8007580:	2301      	movs	r3, #1
 8007582:	6163      	str	r3, [r4, #20]
 8007584:	b002      	add	sp, #8
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	ab01      	add	r3, sp, #4
 800758a:	466a      	mov	r2, sp
 800758c:	f7ff ffc8 	bl	8007520 <__swhatbuf_r>
 8007590:	9900      	ldr	r1, [sp, #0]
 8007592:	4605      	mov	r5, r0
 8007594:	4630      	mov	r0, r6
 8007596:	f000 f895 	bl	80076c4 <_malloc_r>
 800759a:	b948      	cbnz	r0, 80075b0 <__smakebuf_r+0x44>
 800759c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075a0:	059a      	lsls	r2, r3, #22
 80075a2:	d4ef      	bmi.n	8007584 <__smakebuf_r+0x18>
 80075a4:	f023 0303 	bic.w	r3, r3, #3
 80075a8:	f043 0302 	orr.w	r3, r3, #2
 80075ac:	81a3      	strh	r3, [r4, #12]
 80075ae:	e7e3      	b.n	8007578 <__smakebuf_r+0xc>
 80075b0:	4b0d      	ldr	r3, [pc, #52]	; (80075e8 <__smakebuf_r+0x7c>)
 80075b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	6020      	str	r0, [r4, #0]
 80075b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075bc:	81a3      	strh	r3, [r4, #12]
 80075be:	9b00      	ldr	r3, [sp, #0]
 80075c0:	6163      	str	r3, [r4, #20]
 80075c2:	9b01      	ldr	r3, [sp, #4]
 80075c4:	6120      	str	r0, [r4, #16]
 80075c6:	b15b      	cbz	r3, 80075e0 <__smakebuf_r+0x74>
 80075c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075cc:	4630      	mov	r0, r6
 80075ce:	f000 f9b9 	bl	8007944 <_isatty_r>
 80075d2:	b128      	cbz	r0, 80075e0 <__smakebuf_r+0x74>
 80075d4:	89a3      	ldrh	r3, [r4, #12]
 80075d6:	f023 0303 	bic.w	r3, r3, #3
 80075da:	f043 0301 	orr.w	r3, r3, #1
 80075de:	81a3      	strh	r3, [r4, #12]
 80075e0:	89a0      	ldrh	r0, [r4, #12]
 80075e2:	4305      	orrs	r5, r0
 80075e4:	81a5      	strh	r5, [r4, #12]
 80075e6:	e7cd      	b.n	8007584 <__smakebuf_r+0x18>
 80075e8:	08007379 	.word	0x08007379

080075ec <_free_r>:
 80075ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075ee:	2900      	cmp	r1, #0
 80075f0:	d044      	beq.n	800767c <_free_r+0x90>
 80075f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075f6:	9001      	str	r0, [sp, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f1a1 0404 	sub.w	r4, r1, #4
 80075fe:	bfb8      	it	lt
 8007600:	18e4      	addlt	r4, r4, r3
 8007602:	f000 f9c1 	bl	8007988 <__malloc_lock>
 8007606:	4a1e      	ldr	r2, [pc, #120]	; (8007680 <_free_r+0x94>)
 8007608:	9801      	ldr	r0, [sp, #4]
 800760a:	6813      	ldr	r3, [r2, #0]
 800760c:	b933      	cbnz	r3, 800761c <_free_r+0x30>
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	6014      	str	r4, [r2, #0]
 8007612:	b003      	add	sp, #12
 8007614:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007618:	f000 b9bc 	b.w	8007994 <__malloc_unlock>
 800761c:	42a3      	cmp	r3, r4
 800761e:	d908      	bls.n	8007632 <_free_r+0x46>
 8007620:	6825      	ldr	r5, [r4, #0]
 8007622:	1961      	adds	r1, r4, r5
 8007624:	428b      	cmp	r3, r1
 8007626:	bf01      	itttt	eq
 8007628:	6819      	ldreq	r1, [r3, #0]
 800762a:	685b      	ldreq	r3, [r3, #4]
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	e7ed      	b.n	800760e <_free_r+0x22>
 8007632:	461a      	mov	r2, r3
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	b10b      	cbz	r3, 800763c <_free_r+0x50>
 8007638:	42a3      	cmp	r3, r4
 800763a:	d9fa      	bls.n	8007632 <_free_r+0x46>
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	1855      	adds	r5, r2, r1
 8007640:	42a5      	cmp	r5, r4
 8007642:	d10b      	bne.n	800765c <_free_r+0x70>
 8007644:	6824      	ldr	r4, [r4, #0]
 8007646:	4421      	add	r1, r4
 8007648:	1854      	adds	r4, r2, r1
 800764a:	42a3      	cmp	r3, r4
 800764c:	6011      	str	r1, [r2, #0]
 800764e:	d1e0      	bne.n	8007612 <_free_r+0x26>
 8007650:	681c      	ldr	r4, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	6053      	str	r3, [r2, #4]
 8007656:	4421      	add	r1, r4
 8007658:	6011      	str	r1, [r2, #0]
 800765a:	e7da      	b.n	8007612 <_free_r+0x26>
 800765c:	d902      	bls.n	8007664 <_free_r+0x78>
 800765e:	230c      	movs	r3, #12
 8007660:	6003      	str	r3, [r0, #0]
 8007662:	e7d6      	b.n	8007612 <_free_r+0x26>
 8007664:	6825      	ldr	r5, [r4, #0]
 8007666:	1961      	adds	r1, r4, r5
 8007668:	428b      	cmp	r3, r1
 800766a:	bf04      	itt	eq
 800766c:	6819      	ldreq	r1, [r3, #0]
 800766e:	685b      	ldreq	r3, [r3, #4]
 8007670:	6063      	str	r3, [r4, #4]
 8007672:	bf04      	itt	eq
 8007674:	1949      	addeq	r1, r1, r5
 8007676:	6021      	streq	r1, [r4, #0]
 8007678:	6054      	str	r4, [r2, #4]
 800767a:	e7ca      	b.n	8007612 <_free_r+0x26>
 800767c:	b003      	add	sp, #12
 800767e:	bd30      	pop	{r4, r5, pc}
 8007680:	20000318 	.word	0x20000318

08007684 <sbrk_aligned>:
 8007684:	b570      	push	{r4, r5, r6, lr}
 8007686:	4e0e      	ldr	r6, [pc, #56]	; (80076c0 <sbrk_aligned+0x3c>)
 8007688:	460c      	mov	r4, r1
 800768a:	6831      	ldr	r1, [r6, #0]
 800768c:	4605      	mov	r5, r0
 800768e:	b911      	cbnz	r1, 8007696 <sbrk_aligned+0x12>
 8007690:	f000 f88c 	bl	80077ac <_sbrk_r>
 8007694:	6030      	str	r0, [r6, #0]
 8007696:	4621      	mov	r1, r4
 8007698:	4628      	mov	r0, r5
 800769a:	f000 f887 	bl	80077ac <_sbrk_r>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d00a      	beq.n	80076b8 <sbrk_aligned+0x34>
 80076a2:	1cc4      	adds	r4, r0, #3
 80076a4:	f024 0403 	bic.w	r4, r4, #3
 80076a8:	42a0      	cmp	r0, r4
 80076aa:	d007      	beq.n	80076bc <sbrk_aligned+0x38>
 80076ac:	1a21      	subs	r1, r4, r0
 80076ae:	4628      	mov	r0, r5
 80076b0:	f000 f87c 	bl	80077ac <_sbrk_r>
 80076b4:	3001      	adds	r0, #1
 80076b6:	d101      	bne.n	80076bc <sbrk_aligned+0x38>
 80076b8:	f04f 34ff 	mov.w	r4, #4294967295
 80076bc:	4620      	mov	r0, r4
 80076be:	bd70      	pop	{r4, r5, r6, pc}
 80076c0:	2000031c 	.word	0x2000031c

080076c4 <_malloc_r>:
 80076c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c8:	1ccd      	adds	r5, r1, #3
 80076ca:	f025 0503 	bic.w	r5, r5, #3
 80076ce:	3508      	adds	r5, #8
 80076d0:	2d0c      	cmp	r5, #12
 80076d2:	bf38      	it	cc
 80076d4:	250c      	movcc	r5, #12
 80076d6:	2d00      	cmp	r5, #0
 80076d8:	4607      	mov	r7, r0
 80076da:	db01      	blt.n	80076e0 <_malloc_r+0x1c>
 80076dc:	42a9      	cmp	r1, r5
 80076de:	d905      	bls.n	80076ec <_malloc_r+0x28>
 80076e0:	230c      	movs	r3, #12
 80076e2:	603b      	str	r3, [r7, #0]
 80076e4:	2600      	movs	r6, #0
 80076e6:	4630      	mov	r0, r6
 80076e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076ec:	4e2e      	ldr	r6, [pc, #184]	; (80077a8 <_malloc_r+0xe4>)
 80076ee:	f000 f94b 	bl	8007988 <__malloc_lock>
 80076f2:	6833      	ldr	r3, [r6, #0]
 80076f4:	461c      	mov	r4, r3
 80076f6:	bb34      	cbnz	r4, 8007746 <_malloc_r+0x82>
 80076f8:	4629      	mov	r1, r5
 80076fa:	4638      	mov	r0, r7
 80076fc:	f7ff ffc2 	bl	8007684 <sbrk_aligned>
 8007700:	1c43      	adds	r3, r0, #1
 8007702:	4604      	mov	r4, r0
 8007704:	d14d      	bne.n	80077a2 <_malloc_r+0xde>
 8007706:	6834      	ldr	r4, [r6, #0]
 8007708:	4626      	mov	r6, r4
 800770a:	2e00      	cmp	r6, #0
 800770c:	d140      	bne.n	8007790 <_malloc_r+0xcc>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	4631      	mov	r1, r6
 8007712:	4638      	mov	r0, r7
 8007714:	eb04 0803 	add.w	r8, r4, r3
 8007718:	f000 f848 	bl	80077ac <_sbrk_r>
 800771c:	4580      	cmp	r8, r0
 800771e:	d13a      	bne.n	8007796 <_malloc_r+0xd2>
 8007720:	6821      	ldr	r1, [r4, #0]
 8007722:	3503      	adds	r5, #3
 8007724:	1a6d      	subs	r5, r5, r1
 8007726:	f025 0503 	bic.w	r5, r5, #3
 800772a:	3508      	adds	r5, #8
 800772c:	2d0c      	cmp	r5, #12
 800772e:	bf38      	it	cc
 8007730:	250c      	movcc	r5, #12
 8007732:	4629      	mov	r1, r5
 8007734:	4638      	mov	r0, r7
 8007736:	f7ff ffa5 	bl	8007684 <sbrk_aligned>
 800773a:	3001      	adds	r0, #1
 800773c:	d02b      	beq.n	8007796 <_malloc_r+0xd2>
 800773e:	6823      	ldr	r3, [r4, #0]
 8007740:	442b      	add	r3, r5
 8007742:	6023      	str	r3, [r4, #0]
 8007744:	e00e      	b.n	8007764 <_malloc_r+0xa0>
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	1b52      	subs	r2, r2, r5
 800774a:	d41e      	bmi.n	800778a <_malloc_r+0xc6>
 800774c:	2a0b      	cmp	r2, #11
 800774e:	d916      	bls.n	800777e <_malloc_r+0xba>
 8007750:	1961      	adds	r1, r4, r5
 8007752:	42a3      	cmp	r3, r4
 8007754:	6025      	str	r5, [r4, #0]
 8007756:	bf18      	it	ne
 8007758:	6059      	strne	r1, [r3, #4]
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	bf08      	it	eq
 800775e:	6031      	streq	r1, [r6, #0]
 8007760:	5162      	str	r2, [r4, r5]
 8007762:	604b      	str	r3, [r1, #4]
 8007764:	4638      	mov	r0, r7
 8007766:	f104 060b 	add.w	r6, r4, #11
 800776a:	f000 f913 	bl	8007994 <__malloc_unlock>
 800776e:	f026 0607 	bic.w	r6, r6, #7
 8007772:	1d23      	adds	r3, r4, #4
 8007774:	1af2      	subs	r2, r6, r3
 8007776:	d0b6      	beq.n	80076e6 <_malloc_r+0x22>
 8007778:	1b9b      	subs	r3, r3, r6
 800777a:	50a3      	str	r3, [r4, r2]
 800777c:	e7b3      	b.n	80076e6 <_malloc_r+0x22>
 800777e:	6862      	ldr	r2, [r4, #4]
 8007780:	42a3      	cmp	r3, r4
 8007782:	bf0c      	ite	eq
 8007784:	6032      	streq	r2, [r6, #0]
 8007786:	605a      	strne	r2, [r3, #4]
 8007788:	e7ec      	b.n	8007764 <_malloc_r+0xa0>
 800778a:	4623      	mov	r3, r4
 800778c:	6864      	ldr	r4, [r4, #4]
 800778e:	e7b2      	b.n	80076f6 <_malloc_r+0x32>
 8007790:	4634      	mov	r4, r6
 8007792:	6876      	ldr	r6, [r6, #4]
 8007794:	e7b9      	b.n	800770a <_malloc_r+0x46>
 8007796:	230c      	movs	r3, #12
 8007798:	603b      	str	r3, [r7, #0]
 800779a:	4638      	mov	r0, r7
 800779c:	f000 f8fa 	bl	8007994 <__malloc_unlock>
 80077a0:	e7a1      	b.n	80076e6 <_malloc_r+0x22>
 80077a2:	6025      	str	r5, [r4, #0]
 80077a4:	e7de      	b.n	8007764 <_malloc_r+0xa0>
 80077a6:	bf00      	nop
 80077a8:	20000318 	.word	0x20000318

080077ac <_sbrk_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d06      	ldr	r5, [pc, #24]	; (80077c8 <_sbrk_r+0x1c>)
 80077b0:	2300      	movs	r3, #0
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	602b      	str	r3, [r5, #0]
 80077b8:	f7fb fcee 	bl	8003198 <_sbrk>
 80077bc:	1c43      	adds	r3, r0, #1
 80077be:	d102      	bne.n	80077c6 <_sbrk_r+0x1a>
 80077c0:	682b      	ldr	r3, [r5, #0]
 80077c2:	b103      	cbz	r3, 80077c6 <_sbrk_r+0x1a>
 80077c4:	6023      	str	r3, [r4, #0]
 80077c6:	bd38      	pop	{r3, r4, r5, pc}
 80077c8:	20000320 	.word	0x20000320

080077cc <_raise_r>:
 80077cc:	291f      	cmp	r1, #31
 80077ce:	b538      	push	{r3, r4, r5, lr}
 80077d0:	4604      	mov	r4, r0
 80077d2:	460d      	mov	r5, r1
 80077d4:	d904      	bls.n	80077e0 <_raise_r+0x14>
 80077d6:	2316      	movs	r3, #22
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	f04f 30ff 	mov.w	r0, #4294967295
 80077de:	bd38      	pop	{r3, r4, r5, pc}
 80077e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077e2:	b112      	cbz	r2, 80077ea <_raise_r+0x1e>
 80077e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077e8:	b94b      	cbnz	r3, 80077fe <_raise_r+0x32>
 80077ea:	4620      	mov	r0, r4
 80077ec:	f000 f830 	bl	8007850 <_getpid_r>
 80077f0:	462a      	mov	r2, r5
 80077f2:	4601      	mov	r1, r0
 80077f4:	4620      	mov	r0, r4
 80077f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077fa:	f000 b817 	b.w	800782c <_kill_r>
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d00a      	beq.n	8007818 <_raise_r+0x4c>
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	d103      	bne.n	800780e <_raise_r+0x42>
 8007806:	2316      	movs	r3, #22
 8007808:	6003      	str	r3, [r0, #0]
 800780a:	2001      	movs	r0, #1
 800780c:	e7e7      	b.n	80077de <_raise_r+0x12>
 800780e:	2400      	movs	r4, #0
 8007810:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007814:	4628      	mov	r0, r5
 8007816:	4798      	blx	r3
 8007818:	2000      	movs	r0, #0
 800781a:	e7e0      	b.n	80077de <_raise_r+0x12>

0800781c <raise>:
 800781c:	4b02      	ldr	r3, [pc, #8]	; (8007828 <raise+0xc>)
 800781e:	4601      	mov	r1, r0
 8007820:	6818      	ldr	r0, [r3, #0]
 8007822:	f7ff bfd3 	b.w	80077cc <_raise_r>
 8007826:	bf00      	nop
 8007828:	2000010c 	.word	0x2000010c

0800782c <_kill_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d07      	ldr	r5, [pc, #28]	; (800784c <_kill_r+0x20>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	602b      	str	r3, [r5, #0]
 800783a:	f7fb fc25 	bl	8003088 <_kill>
 800783e:	1c43      	adds	r3, r0, #1
 8007840:	d102      	bne.n	8007848 <_kill_r+0x1c>
 8007842:	682b      	ldr	r3, [r5, #0]
 8007844:	b103      	cbz	r3, 8007848 <_kill_r+0x1c>
 8007846:	6023      	str	r3, [r4, #0]
 8007848:	bd38      	pop	{r3, r4, r5, pc}
 800784a:	bf00      	nop
 800784c:	20000320 	.word	0x20000320

08007850 <_getpid_r>:
 8007850:	f7fb bc12 	b.w	8003078 <_getpid>

08007854 <__sread>:
 8007854:	b510      	push	{r4, lr}
 8007856:	460c      	mov	r4, r1
 8007858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785c:	f000 f8a0 	bl	80079a0 <_read_r>
 8007860:	2800      	cmp	r0, #0
 8007862:	bfab      	itete	ge
 8007864:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007866:	89a3      	ldrhlt	r3, [r4, #12]
 8007868:	181b      	addge	r3, r3, r0
 800786a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800786e:	bfac      	ite	ge
 8007870:	6563      	strge	r3, [r4, #84]	; 0x54
 8007872:	81a3      	strhlt	r3, [r4, #12]
 8007874:	bd10      	pop	{r4, pc}

08007876 <__swrite>:
 8007876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800787a:	461f      	mov	r7, r3
 800787c:	898b      	ldrh	r3, [r1, #12]
 800787e:	05db      	lsls	r3, r3, #23
 8007880:	4605      	mov	r5, r0
 8007882:	460c      	mov	r4, r1
 8007884:	4616      	mov	r6, r2
 8007886:	d505      	bpl.n	8007894 <__swrite+0x1e>
 8007888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800788c:	2302      	movs	r3, #2
 800788e:	2200      	movs	r2, #0
 8007890:	f000 f868 	bl	8007964 <_lseek_r>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800789a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800789e:	81a3      	strh	r3, [r4, #12]
 80078a0:	4632      	mov	r2, r6
 80078a2:	463b      	mov	r3, r7
 80078a4:	4628      	mov	r0, r5
 80078a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078aa:	f000 b817 	b.w	80078dc <_write_r>

080078ae <__sseek>:
 80078ae:	b510      	push	{r4, lr}
 80078b0:	460c      	mov	r4, r1
 80078b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b6:	f000 f855 	bl	8007964 <_lseek_r>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	89a3      	ldrh	r3, [r4, #12]
 80078be:	bf15      	itete	ne
 80078c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80078c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078ca:	81a3      	strheq	r3, [r4, #12]
 80078cc:	bf18      	it	ne
 80078ce:	81a3      	strhne	r3, [r4, #12]
 80078d0:	bd10      	pop	{r4, pc}

080078d2 <__sclose>:
 80078d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078d6:	f000 b813 	b.w	8007900 <_close_r>
	...

080078dc <_write_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_write_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7fb fc03 	bl	80030f6 <_write>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_write_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_write_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000320 	.word	0x20000320

08007900 <_close_r>:
 8007900:	b538      	push	{r3, r4, r5, lr}
 8007902:	4d06      	ldr	r5, [pc, #24]	; (800791c <_close_r+0x1c>)
 8007904:	2300      	movs	r3, #0
 8007906:	4604      	mov	r4, r0
 8007908:	4608      	mov	r0, r1
 800790a:	602b      	str	r3, [r5, #0]
 800790c:	f7fb fc0f 	bl	800312e <_close>
 8007910:	1c43      	adds	r3, r0, #1
 8007912:	d102      	bne.n	800791a <_close_r+0x1a>
 8007914:	682b      	ldr	r3, [r5, #0]
 8007916:	b103      	cbz	r3, 800791a <_close_r+0x1a>
 8007918:	6023      	str	r3, [r4, #0]
 800791a:	bd38      	pop	{r3, r4, r5, pc}
 800791c:	20000320 	.word	0x20000320

08007920 <_fstat_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4d07      	ldr	r5, [pc, #28]	; (8007940 <_fstat_r+0x20>)
 8007924:	2300      	movs	r3, #0
 8007926:	4604      	mov	r4, r0
 8007928:	4608      	mov	r0, r1
 800792a:	4611      	mov	r1, r2
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	f7fb fc0a 	bl	8003146 <_fstat>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	d102      	bne.n	800793c <_fstat_r+0x1c>
 8007936:	682b      	ldr	r3, [r5, #0]
 8007938:	b103      	cbz	r3, 800793c <_fstat_r+0x1c>
 800793a:	6023      	str	r3, [r4, #0]
 800793c:	bd38      	pop	{r3, r4, r5, pc}
 800793e:	bf00      	nop
 8007940:	20000320 	.word	0x20000320

08007944 <_isatty_r>:
 8007944:	b538      	push	{r3, r4, r5, lr}
 8007946:	4d06      	ldr	r5, [pc, #24]	; (8007960 <_isatty_r+0x1c>)
 8007948:	2300      	movs	r3, #0
 800794a:	4604      	mov	r4, r0
 800794c:	4608      	mov	r0, r1
 800794e:	602b      	str	r3, [r5, #0]
 8007950:	f7fb fc09 	bl	8003166 <_isatty>
 8007954:	1c43      	adds	r3, r0, #1
 8007956:	d102      	bne.n	800795e <_isatty_r+0x1a>
 8007958:	682b      	ldr	r3, [r5, #0]
 800795a:	b103      	cbz	r3, 800795e <_isatty_r+0x1a>
 800795c:	6023      	str	r3, [r4, #0]
 800795e:	bd38      	pop	{r3, r4, r5, pc}
 8007960:	20000320 	.word	0x20000320

08007964 <_lseek_r>:
 8007964:	b538      	push	{r3, r4, r5, lr}
 8007966:	4d07      	ldr	r5, [pc, #28]	; (8007984 <_lseek_r+0x20>)
 8007968:	4604      	mov	r4, r0
 800796a:	4608      	mov	r0, r1
 800796c:	4611      	mov	r1, r2
 800796e:	2200      	movs	r2, #0
 8007970:	602a      	str	r2, [r5, #0]
 8007972:	461a      	mov	r2, r3
 8007974:	f7fb fc02 	bl	800317c <_lseek>
 8007978:	1c43      	adds	r3, r0, #1
 800797a:	d102      	bne.n	8007982 <_lseek_r+0x1e>
 800797c:	682b      	ldr	r3, [r5, #0]
 800797e:	b103      	cbz	r3, 8007982 <_lseek_r+0x1e>
 8007980:	6023      	str	r3, [r4, #0]
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	20000320 	.word	0x20000320

08007988 <__malloc_lock>:
 8007988:	4801      	ldr	r0, [pc, #4]	; (8007990 <__malloc_lock+0x8>)
 800798a:	f7ff bdc7 	b.w	800751c <__retarget_lock_acquire_recursive>
 800798e:	bf00      	nop
 8007990:	20000314 	.word	0x20000314

08007994 <__malloc_unlock>:
 8007994:	4801      	ldr	r0, [pc, #4]	; (800799c <__malloc_unlock+0x8>)
 8007996:	f7ff bdc2 	b.w	800751e <__retarget_lock_release_recursive>
 800799a:	bf00      	nop
 800799c:	20000314 	.word	0x20000314

080079a0 <_read_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	; (80079c0 <_read_r+0x20>)
 80079a4:	4604      	mov	r4, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	4611      	mov	r1, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7fb fb84 	bl	80030bc <_read>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_read_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_read_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	20000320 	.word	0x20000320

080079c4 <_init>:
 80079c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079c6:	bf00      	nop
 80079c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ca:	bc08      	pop	{r3}
 80079cc:	469e      	mov	lr, r3
 80079ce:	4770      	bx	lr

080079d0 <_fini>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	bf00      	nop
 80079d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079d6:	bc08      	pop	{r3}
 80079d8:	469e      	mov	lr, r3
 80079da:	4770      	bx	lr
