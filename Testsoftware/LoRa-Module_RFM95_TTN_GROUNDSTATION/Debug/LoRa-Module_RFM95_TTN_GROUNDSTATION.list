
LoRa-Module_RFM95_TTN_GROUNDSTATION.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b08  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000036c  08005ca8  08005ca8  00015ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006014  08006014  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006014  08006014  00016014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800601c  0800601c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800601c  0800601c  0001601c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006024  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000070  08006094  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08006094  00020210  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000128b0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002656  00000000  00000000  00032950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00034fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f60  00000000  00000000  00035fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023210  00000000  00000000  00036f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f3c  00000000  00000000  0005a158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6a8f  00000000  00000000  0006d094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00143b23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d90  00000000  00000000  00143b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c90 	.word	0x08005c90

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08005c90 	.word	0x08005c90

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <rfm95_read>:
unsigned char NwkSkey[16];
unsigned char AppSkey[16];
unsigned char DevAddr[4];

static bool rfm95_read(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t *buffer) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	460b      	mov	r3, r1
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6858      	ldr	r0, [r3, #4]
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	891b      	ldrh	r3, [r3, #8]
 800059a:	2200      	movs	r2, #0
 800059c:	4619      	mov	r1, r3
 800059e:	f001 fb4b 	bl	8001c38 <HAL_GPIO_WritePin>

	//uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
	uint8_t transmit_buffer = (uint8_t) reg;
 80005a2:	7afb      	ldrb	r3, [r7, #11]
 80005a4:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6818      	ldr	r0, [r3, #0]
 80005aa:	f107 0117 	add.w	r1, r7, #23
 80005ae:	230a      	movs	r3, #10
 80005b0:	2201      	movs	r2, #1
 80005b2:	f002 ffac 	bl	800350e <HAL_SPI_Transmit>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <rfm95_read+0x3c>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 80005bc:	2300      	movs	r3, #0
 80005be:	e014      	b.n	80005ea <rfm95_read+0x66>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	230a      	movs	r3, #10
 80005c6:	2201      	movs	r2, #1
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	f003 f90e 	bl	80037ea <HAL_SPI_Receive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <rfm95_read+0x54>
			!= HAL_OK) {
		return false;
 80005d4:	2300      	movs	r3, #0
 80005d6:	e008      	b.n	80005ea <rfm95_read+0x66>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	6858      	ldr	r0, [r3, #4]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	891b      	ldrh	r3, [r3, #8]
 80005e0:	2201      	movs	r2, #1
 80005e2:	4619      	mov	r1, r3
 80005e4:	f001 fb28 	bl	8001c38 <HAL_GPIO_WritePin>

	return true;
 80005e8:	2301      	movs	r3, #1
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	3718      	adds	r7, #24
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <rfm95_write>:

static bool rfm95_write(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t value) {
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b084      	sub	sp, #16
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	6078      	str	r0, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	70fb      	strb	r3, [r7, #3]
 80005fe:	4613      	mov	r3, r2
 8000600:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	6858      	ldr	r0, [r3, #4]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	891b      	ldrh	r3, [r3, #8]
 800060a:	2200      	movs	r2, #0
 800060c:	4619      	mov	r1, r3
 800060e:	f001 fb13 	bl	8001c38 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8000612:	78fb      	ldrb	r3, [r7, #3]
 8000614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000618:	b2db      	uxtb	r3, r3
 800061a:	733b      	strb	r3, [r7, #12]
 800061c:	78bb      	ldrb	r3, [r7, #2]
 800061e:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	6818      	ldr	r0, [r3, #0]
 8000624:	f107 010c 	add.w	r1, r7, #12
 8000628:	230a      	movs	r3, #10
 800062a:	2202      	movs	r2, #2
 800062c:	f002 ff6f 	bl	800350e <HAL_SPI_Transmit>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <rfm95_write+0x48>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8000636:	2300      	movs	r3, #0
 8000638:	e008      	b.n	800064c <rfm95_write+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6858      	ldr	r0, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	891b      	ldrh	r3, [r3, #8]
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	f001 faf7 	bl	8001c38 <HAL_GPIO_WritePin>

	return true;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <rfm95_reset>:

static void rfm95_reset(rfm95_handle_t *handle) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68d8      	ldr	r0, [r3, #12]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	8a1b      	ldrh	r3, [r3, #16]
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	f001 fae6 	bl	8001c38 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 800066c:	2001      	movs	r0, #1
 800066e:	f001 f847 	bl	8001700 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	68d8      	ldr	r0, [r3, #12]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	8a1b      	ldrh	r3, [r3, #16]
 800067a:	2201      	movs	r2, #1
 800067c:	4619      	mov	r1, r3
 800067e:	f001 fadb 	bl	8001c38 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000682:	2005      	movs	r0, #5
 8000684:	f001 f83c 	bl	8001700 <HAL_Delay>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}

08000690 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle) {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80006a2:	d005      	beq.n	80006b0 <rfm95_init+0x20>
 80006a4:	4b7f      	ldr	r3, [pc, #508]	; (80008a4 <rfm95_init+0x214>)
 80006a6:	4a80      	ldr	r2, [pc, #512]	; (80008a8 <rfm95_init+0x218>)
 80006a8:	2180      	movs	r1, #128	; 0x80
 80006aa:	4880      	ldr	r0, [pc, #512]	; (80008ac <rfm95_init+0x21c>)
 80006ac:	f004 fab4 	bl	8004c18 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d005      	beq.n	80006c6 <rfm95_init+0x36>
 80006ba:	4b7d      	ldr	r3, [pc, #500]	; (80008b0 <rfm95_init+0x220>)
 80006bc:	4a7a      	ldr	r2, [pc, #488]	; (80008a8 <rfm95_init+0x218>)
 80006be:	2181      	movs	r1, #129	; 0x81
 80006c0:	487a      	ldr	r0, [pc, #488]	; (80008ac <rfm95_init+0x21c>)
 80006c2:	f004 faa9 	bl	8004c18 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80006d0:	d005      	beq.n	80006de <rfm95_init+0x4e>
 80006d2:	4b78      	ldr	r3, [pc, #480]	; (80008b4 <rfm95_init+0x224>)
 80006d4:	4a74      	ldr	r2, [pc, #464]	; (80008a8 <rfm95_init+0x218>)
 80006d6:	2182      	movs	r1, #130	; 0x82
 80006d8:	4874      	ldr	r0, [pc, #464]	; (80008ac <rfm95_init+0x21c>)
 80006da:	f004 fa9d 	bl	8004c18 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	691b      	ldr	r3, [r3, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d005      	beq.n	80006f4 <rfm95_init+0x64>
 80006e8:	4b73      	ldr	r3, [pc, #460]	; (80008b8 <rfm95_init+0x228>)
 80006ea:	4a6f      	ldr	r2, [pc, #444]	; (80008a8 <rfm95_init+0x218>)
 80006ec:	2183      	movs	r1, #131	; 0x83
 80006ee:	486f      	ldr	r0, [pc, #444]	; (80008ac <rfm95_init+0x21c>)
 80006f0:	f004 fa92 	bl	8004c18 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d005      	beq.n	800070a <rfm95_init+0x7a>
 80006fe:	4b6f      	ldr	r3, [pc, #444]	; (80008bc <rfm95_init+0x22c>)
 8000700:	4a69      	ldr	r2, [pc, #420]	; (80008a8 <rfm95_init+0x218>)
 8000702:	2184      	movs	r1, #132	; 0x84
 8000704:	4869      	ldr	r0, [pc, #420]	; (80008ac <rfm95_init+0x21c>)
 8000706:	f004 fa87 	bl	8004c18 <__assert_func>

	rfm95_reset(handle);
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff ffa2 	bl	8000654 <rfm95_reset>

	if (handle->reload_frame_counter != NULL) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000714:	2b00      	cmp	r3, #0
 8000716:	d009      	beq.n	800072c <rfm95_init+0x9c>
		handle->reload_frame_counter(&handle->tx_frame_count,
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	f102 0052 	add.w	r0, r2, #82	; 0x52
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	3250      	adds	r2, #80	; 0x50
 8000726:	4611      	mov	r1, r2
 8000728:	4798      	blx	r3
 800072a:	e007      	b.n	800073c <rfm95_init+0xac>
				&handle->rx_frame_count);
	} else {
		handle->tx_frame_count = 0;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2200      	movs	r2, #0
 8000730:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		handle->rx_frame_count = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}

	// Check for correct version.
	uint8_t version;
	if (!rfm95_read(handle, RFM95_REGISTER_VERSION, &version))
 800073c:	f107 030f 	add.w	r3, r7, #15
 8000740:	461a      	mov	r2, r3
 8000742:	2142      	movs	r1, #66	; 0x42
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f7ff ff1d 	bl	8000584 <rfm95_read>
 800074a:	4603      	mov	r3, r0
 800074c:	f083 0301 	eor.w	r3, r3, #1
 8000750:	b2db      	uxtb	r3, r3
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <rfm95_init+0xca>
		return false;
 8000756:	2300      	movs	r3, #0
 8000758:	e0a0      	b.n	800089c <rfm95_init+0x20c>
	if (version != RFM9x_VER)
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	2b12      	cmp	r3, #18
 800075e:	d001      	beq.n	8000764 <rfm95_init+0xd4>
		return false;
 8000760:	2300      	movs	r3, #0
 8000762:	e09b      	b.n	800089c <rfm95_init+0x20c>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f7ff ff42 	bl	80005f2 <rfm95_write>
 800076e:	4603      	mov	r3, r0
 8000770:	f083 0301 	eor.w	r3, r3, #1
 8000774:	b2db      	uxtb	r3, r3
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <rfm95_init+0xee>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 800077a:	2300      	movs	r3, #0
 800077c:	e08e      	b.n	800089c <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 800077e:	2280      	movs	r2, #128	; 0x80
 8000780:	2101      	movs	r1, #1
 8000782:	6878      	ldr	r0, [r7, #4]
 8000784:	f7ff ff35 	bl	80005f2 <rfm95_write>
 8000788:	4603      	mov	r3, r0
 800078a:	f083 0301 	eor.w	r3, r3, #1
 800078e:	b2db      	uxtb	r3, r3
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <rfm95_init+0x108>
	RFM95_REGISTER_OP_MODE_LORA))
		return false;
 8000794:	2300      	movs	r3, #0
 8000796:	e081      	b.n	800089c <rfm95_init+0x20c>

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8000798:	2111      	movs	r1, #17
 800079a:	6878      	ldr	r0, [r7, #4]
 800079c:	f000 f890 	bl	80008c0 <rfm95_set_power>
 80007a0:	4603      	mov	r3, r0
 80007a2:	f083 0301 	eor.w	r3, r3, #1
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <rfm95_init+0x120>
		return false;
 80007ac:	2300      	movs	r3, #0
 80007ae:	e075      	b.n	800089c <rfm95_init+0x20c>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 37))
 80007b0:	2225      	movs	r2, #37	; 0x25
 80007b2:	211f      	movs	r1, #31
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff1c 	bl	80005f2 <rfm95_write>
 80007ba:	4603      	mov	r3, r0
 80007bc:	f083 0301 	eor.w	r3, r3, #1
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <rfm95_init+0x13a>
		return false;
 80007c6:	2300      	movs	r3, #0
 80007c8:	e068      	b.n	800089c <rfm95_init+0x20c>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 80007ca:	2200      	movs	r2, #0
 80007cc:	2120      	movs	r1, #32
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ff0f 	bl	80005f2 <rfm95_write>
 80007d4:	4603      	mov	r3, r0
 80007d6:	f083 0301 	eor.w	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <rfm95_init+0x154>
		return false;
 80007e0:	2300      	movs	r3, #0
 80007e2:	e05b      	b.n	800089c <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 80007e4:	2208      	movs	r2, #8
 80007e6:	2121      	movs	r1, #33	; 0x21
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ff02 	bl	80005f2 <rfm95_write>
 80007ee:	4603      	mov	r3, r0
 80007f0:	f083 0301 	eor.w	r3, r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <rfm95_init+0x16e>
		return false;
 80007fa:	2300      	movs	r3, #0
 80007fc:	e04e      	b.n	800089c <rfm95_init+0x20c>

	// Turn on low data rate optimisation (for symbol lengths > 16ms) and automatic AGC
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3,
 80007fe:	220c      	movs	r2, #12
 8000800:	2126      	movs	r1, #38	; 0x26
 8000802:	6878      	ldr	r0, [r7, #4]
 8000804:	f7ff fef5 	bl	80005f2 <rfm95_write>
 8000808:	4603      	mov	r3, r0
 800080a:	f083 0301 	eor.w	r3, r3, #1
 800080e:	b2db      	uxtb	r3, r3
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <rfm95_init+0x188>
	RFM95_REGISTER_MODEM_CONFIG_3_LDR_OPTIM_AGC_AUTO_ON))
		return false;
 8000814:	2300      	movs	r3, #0
 8000816:	e041      	b.n	800089c <rfm95_init+0x20c>

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8000818:	2234      	movs	r2, #52	; 0x34
 800081a:	2139      	movs	r1, #57	; 0x39
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fee8 	bl	80005f2 <rfm95_write>
 8000822:	4603      	mov	r3, r0
 8000824:	f083 0301 	eor.w	r3, r3, #1
 8000828:	b2db      	uxtb	r3, r3
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <rfm95_init+0x1a2>
		return false;
 800082e:	2300      	movs	r3, #0
 8000830:	e034      	b.n	800089c <rfm95_init+0x20c>

	// Set IQ inversion.
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_1,
 8000832:	2227      	movs	r2, #39	; 0x27
 8000834:	2133      	movs	r1, #51	; 0x33
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fedb 	bl	80005f2 <rfm95_write>
 800083c:	4603      	mov	r3, r0
 800083e:	f083 0301 	eor.w	r3, r3, #1
 8000842:	b2db      	uxtb	r3, r3
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <rfm95_init+0x1bc>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8000848:	2300      	movs	r3, #0
 800084a:	e027      	b.n	800089c <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_2,
 800084c:	221d      	movs	r2, #29
 800084e:	213b      	movs	r1, #59	; 0x3b
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff fece 	bl	80005f2 <rfm95_write>
 8000856:	4603      	mov	r3, r0
 8000858:	f083 0301 	eor.w	r3, r3, #1
 800085c:	b2db      	uxtb	r3, r3
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <rfm95_init+0x1d6>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 8000862:	2300      	movs	r3, #0
 8000864:	e01a      	b.n	800089c <rfm95_init+0x20c>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 8000866:	2280      	movs	r2, #128	; 0x80
 8000868:	210e      	movs	r1, #14
 800086a:	6878      	ldr	r0, [r7, #4]
 800086c:	f7ff fec1 	bl	80005f2 <rfm95_write>
 8000870:	4603      	mov	r3, r0
 8000872:	f083 0301 	eor.w	r3, r3, #1
 8000876:	b2db      	uxtb	r3, r3
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <rfm95_init+0x1f0>
		return false;
 800087c:	2300      	movs	r3, #0
 800087e:	e00d      	b.n	800089c <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8000880:	2200      	movs	r2, #0
 8000882:	210f      	movs	r1, #15
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff feb4 	bl	80005f2 <rfm95_write>
 800088a:	4603      	mov	r3, r0
 800088c:	f083 0301 	eor.w	r3, r3, #1
 8000890:	b2db      	uxtb	r3, r3
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <rfm95_init+0x20a>
		return false;
 8000896:	2300      	movs	r3, #0
 8000898:	e000      	b.n	800089c <rfm95_init+0x20c>

	return true;
 800089a:	2301      	movs	r3, #1
}
 800089c:	4618      	mov	r0, r3
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	08005ca8 	.word	0x08005ca8
 80008a8:	08005ec8 	.word	0x08005ec8
 80008ac:	08005cdc 	.word	0x08005cdc
 80008b0:	08005d00 	.word	0x08005d00
 80008b4:	08005d3c 	.word	0x08005d3c
 80008b8:	08005d74 	.word	0x08005d74
 80008bc:	08005db0 	.word	0x08005db0

080008c0 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power) {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
 80008c8:	460b      	mov	r3, r1
 80008ca:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80008cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d0:	2b01      	cmp	r3, #1
 80008d2:	dd03      	ble.n	80008dc <rfm95_set_power+0x1c>
 80008d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008d8:	2b11      	cmp	r3, #17
 80008da:	dd09      	ble.n	80008f0 <rfm95_set_power+0x30>
 80008dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008e0:	2b14      	cmp	r3, #20
 80008e2:	d005      	beq.n	80008f0 <rfm95_set_power+0x30>
 80008e4:	4b2c      	ldr	r3, [pc, #176]	; (8000998 <rfm95_set_power+0xd8>)
 80008e6:	4a2d      	ldr	r2, [pc, #180]	; (800099c <rfm95_set_power+0xdc>)
 80008e8:	21c8      	movs	r1, #200	; 0xc8
 80008ea:	482d      	ldr	r0, [pc, #180]	; (80009a0 <rfm95_set_power+0xe0>)
 80008ec:	f004 f994 	bl	8004c18 <__assert_func>

	rfm95_register_pa_config_t pa_config = { 0 };
 80008f0:	2300      	movs	r3, #0
 80008f2:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 80008f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	dd18      	ble.n	8000932 <rfm95_set_power+0x72>
 8000900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000904:	2b11      	cmp	r3, #17
 8000906:	dc14      	bgt.n	8000932 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8000908:	7b3b      	ldrb	r3, [r7, #12]
 800090a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800090e:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8000910:	7b3b      	ldrb	r3, [r7, #12]
 8000912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000916:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8000918:	78fb      	ldrb	r3, [r7, #3]
 800091a:	3b02      	subs	r3, #2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 030f 	and.w	r3, r3, #15
 8000922:	b2da      	uxtb	r2, r3
 8000924:	7b3b      	ldrb	r3, [r7, #12]
 8000926:	f362 0303 	bfi	r3, r2, #0, #4
 800092a:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 800092c:	2384      	movs	r3, #132	; 0x84
 800092e:	73fb      	strb	r3, [r7, #15]
 8000930:	e011      	b.n	8000956 <rfm95_set_power+0x96>

	} else if (power == 20) {
 8000932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000936:	2b14      	cmp	r3, #20
 8000938:	d10d      	bne.n	8000956 <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 800093a:	7b3b      	ldrb	r3, [r7, #12]
 800093c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8000940:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8000942:	7b3b      	ldrb	r3, [r7, #12]
 8000944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000948:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 800094a:	7b3b      	ldrb	r3, [r7, #12]
 800094c:	f043 030f 	orr.w	r3, r3, #15
 8000950:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8000952:	2387      	movs	r3, #135	; 0x87
 8000954:	73fb      	strb	r3, [r7, #15]
	}

	if (!rfm95_write(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 8000956:	7b3b      	ldrb	r3, [r7, #12]
 8000958:	461a      	mov	r2, r3
 800095a:	2109      	movs	r1, #9
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fe48 	bl	80005f2 <rfm95_write>
 8000962:	4603      	mov	r3, r0
 8000964:	f083 0301 	eor.w	r3, r3, #1
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <rfm95_set_power+0xb2>
		return false;
 800096e:	2300      	movs	r3, #0
 8000970:	e00e      	b.n	8000990 <rfm95_set_power+0xd0>
	if (!rfm95_write(handle, RFM95_REGISTER_PA_DAC, pa_dac_config))
 8000972:	7bfb      	ldrb	r3, [r7, #15]
 8000974:	461a      	mov	r2, r3
 8000976:	214d      	movs	r1, #77	; 0x4d
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff fe3a 	bl	80005f2 <rfm95_write>
 800097e:	4603      	mov	r3, r0
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <rfm95_set_power+0xce>
		return false;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <rfm95_set_power+0xd0>

	return true;
 800098e:	2301      	movs	r3, #1
}
 8000990:	4618      	mov	r0, r3
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	08005de8 	.word	0x08005de8
 800099c:	08005ed4 	.word	0x08005ed4
 80009a0:	08005cdc 	.word	0x08005cdc

080009a4 <rfm95_send_package>:

static bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data,
		size_t length, uint8_t channel) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	60f8      	str	r0, [r7, #12]
 80009ac:	60b9      	str	r1, [r7, #8]
 80009ae:	607a      	str	r2, [r7, #4]
 80009b0:	70fb      	strb	r3, [r7, #3]
	assert(channel < 8);
 80009b2:	78fb      	ldrb	r3, [r7, #3]
 80009b4:	2b07      	cmp	r3, #7
 80009b6:	d905      	bls.n	80009c4 <rfm95_send_package+0x20>
 80009b8:	4b86      	ldr	r3, [pc, #536]	; (8000bd4 <rfm95_send_package+0x230>)
 80009ba:	4a87      	ldr	r2, [pc, #540]	; (8000bd8 <rfm95_send_package+0x234>)
 80009bc:	21e4      	movs	r1, #228	; 0xe4
 80009be:	4887      	ldr	r0, [pc, #540]	; (8000bdc <rfm95_send_package+0x238>)
 80009c0:	f004 f92a 	bl	8004c18 <__assert_func>

	uint32_t tick_start;

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80009c4:	2281      	movs	r2, #129	; 0x81
 80009c6:	2101      	movs	r1, #1
 80009c8:	68f8      	ldr	r0, [r7, #12]
 80009ca:	f7ff fe12 	bl	80005f2 <rfm95_write>
 80009ce:	4603      	mov	r3, r0
 80009d0:	f083 0301 	eor.w	r3, r3, #1
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <rfm95_send_package+0x3a>
	RFM95_REGISTER_OP_MODE_LORA_STANDBY))
		return false;
 80009da:	2300      	movs	r3, #0
 80009dc:	e0f6      	b.n	8000bcc <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 80009de:	f000 fe83 	bl	80016e8 <HAL_GetTick>
 80009e2:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 80009e4:	e00d      	b.n	8000a02 <rfm95_send_package+0x5e>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - tick_start) >= RFM95_WAKEUP_TIMEOUT) {
 80009e6:	f000 fe7f 	bl	80016e8 <HAL_GetTick>
 80009ea:	4602      	mov	r2, r0
 80009ec:	693b      	ldr	r3, [r7, #16]
 80009ee:	1ad3      	subs	r3, r2, r3
 80009f0:	2b09      	cmp	r3, #9
 80009f2:	d906      	bls.n	8000a02 <rfm95_send_package+0x5e>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80009f4:	2200      	movs	r2, #0
 80009f6:	2101      	movs	r1, #1
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff fdfa 	bl	80005f2 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 80009fe:	2300      	movs	r3, #0
 8000a00:	e0e4      	b.n	8000bcc <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	69da      	ldr	r2, [r3, #28]
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	8c1b      	ldrh	r3, [r3, #32]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f001 f8fb 	bl	8001c08 <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d0e6      	beq.n	80009e6 <rfm95_send_package+0x42>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_FR_MSB,
 8000a18:	78fa      	ldrb	r2, [r7, #3]
 8000a1a:	4971      	ldr	r1, [pc, #452]	; (8000be0 <rfm95_send_package+0x23c>)
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	4413      	add	r3, r2
 8000a22:	440b      	add	r3, r1
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	461a      	mov	r2, r3
 8000a28:	2106      	movs	r1, #6
 8000a2a:	68f8      	ldr	r0, [r7, #12]
 8000a2c:	f7ff fde1 	bl	80005f2 <rfm95_write>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f083 0301 	eor.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <rfm95_send_package+0x9c>
			eu863_lora_frequency[channel][0]))
		return false;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	e0c5      	b.n	8000bcc <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_MID,
 8000a40:	78fa      	ldrb	r2, [r7, #3]
 8000a42:	4967      	ldr	r1, [pc, #412]	; (8000be0 <rfm95_send_package+0x23c>)
 8000a44:	4613      	mov	r3, r2
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	4413      	add	r3, r2
 8000a4a:	440b      	add	r3, r1
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	461a      	mov	r2, r3
 8000a52:	2107      	movs	r1, #7
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff fdcc 	bl	80005f2 <rfm95_write>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f083 0301 	eor.w	r3, r3, #1
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <rfm95_send_package+0xc6>
			eu863_lora_frequency[channel][1]))
		return false;
 8000a66:	2300      	movs	r3, #0
 8000a68:	e0b0      	b.n	8000bcc <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_LSB,
 8000a6a:	78fa      	ldrb	r2, [r7, #3]
 8000a6c:	495c      	ldr	r1, [pc, #368]	; (8000be0 <rfm95_send_package+0x23c>)
 8000a6e:	4613      	mov	r3, r2
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	4413      	add	r3, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	3302      	adds	r3, #2
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	2108      	movs	r1, #8
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f7ff fdb7 	bl	80005f2 <rfm95_write>
 8000a84:	4603      	mov	r3, r0
 8000a86:	f083 0301 	eor.w	r3, r3, #1
 8000a8a:	b2db      	uxtb	r3, r3
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <rfm95_send_package+0xf0>
			eu863_lora_frequency[channel][2]))
		return false;
 8000a90:	2300      	movs	r3, #0
 8000a92:	e09b      	b.n	8000bcc <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 8000a94:	2272      	movs	r2, #114	; 0x72
 8000a96:	211d      	movs	r1, #29
 8000a98:	68f8      	ldr	r0, [r7, #12]
 8000a9a:	f7ff fdaa 	bl	80005f2 <rfm95_write>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f083 0301 	eor.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <rfm95_send_package+0x10a>
		return false;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	e08e      	b.n	8000bcc <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 8000aae:	2274      	movs	r2, #116	; 0x74
 8000ab0:	211e      	movs	r1, #30
 8000ab2:	68f8      	ldr	r0, [r7, #12]
 8000ab4:	f7ff fd9d 	bl	80005f2 <rfm95_write>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	f083 0301 	eor.w	r3, r3, #1
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <rfm95_send_package+0x124>
		return false;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e081      	b.n	8000bcc <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 8000ac8:	2204      	movs	r2, #4
 8000aca:	2126      	movs	r1, #38	; 0x26
 8000acc:	68f8      	ldr	r0, [r7, #12]
 8000ace:	f7ff fd90 	bl	80005f2 <rfm95_write>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <rfm95_send_package+0x13e>
		return false;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e074      	b.n	8000bcc <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	2122      	movs	r1, #34	; 0x22
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fd81 	bl	80005f2 <rfm95_write>
 8000af0:	4603      	mov	r3, r0
 8000af2:	f083 0301 	eor.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <rfm95_send_package+0x15c>
		return false;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e065      	b.n	8000bcc <rfm95_send_package+0x228>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	210d      	movs	r1, #13
 8000b04:	68f8      	ldr	r0, [r7, #12]
 8000b06:	f7ff fd74 	bl	80005f2 <rfm95_write>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	f083 0301 	eor.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <rfm95_send_package+0x176>
		return false;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e058      	b.n	8000bcc <rfm95_send_package+0x228>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	e00b      	b.n	8000b38 <rfm95_send_package+0x194>
		rfm95_write(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8000b20:	68ba      	ldr	r2, [r7, #8]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	4413      	add	r3, r2
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fd60 	bl	80005f2 <rfm95_write>
	for (size_t i = 0; i < length; i++) {
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	3301      	adds	r3, #1
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	697a      	ldr	r2, [r7, #20]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d3ef      	bcc.n	8000b20 <rfm95_send_package+0x17c>
	}

	if (!rfm95_write(handle, RFM95_REGISTER_DIO_MAPPING_1,
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	2140      	movs	r1, #64	; 0x40
 8000b44:	68f8      	ldr	r0, [r7, #12]
 8000b46:	f7ff fd54 	bl	80005f2 <rfm95_write>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f083 0301 	eor.w	r3, r3, #1
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <rfm95_send_package+0x1b6>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 8000b56:	2300      	movs	r3, #0
 8000b58:	e038      	b.n	8000bcc <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000b5a:	2283      	movs	r2, #131	; 0x83
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	68f8      	ldr	r0, [r7, #12]
 8000b60:	f7ff fd47 	bl	80005f2 <rfm95_write>
 8000b64:	4603      	mov	r3, r0
 8000b66:	f083 0301 	eor.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <rfm95_send_package+0x1d0>
	RFM95_REGISTER_OP_MODE_LORA_TX))
		return false;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e02b      	b.n	8000bcc <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 8000b74:	f000 fdb8 	bl	80016e8 <HAL_GetTick>
 8000b78:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8000b7a:	e00e      	b.n	8000b9a <rfm95_send_package+0x1f6>
		if ((HAL_GetTick() - tick_start) >= RFM95_SEND_TIMEOUT) {
 8000b7c:	f000 fdb4 	bl	80016e8 <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	693b      	ldr	r3, [r7, #16]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b8a:	d306      	bcc.n	8000b9a <rfm95_send_package+0x1f6>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2101      	movs	r1, #1
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fd2e 	bl	80005f2 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e018      	b.n	8000bcc <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	695a      	ldr	r2, [r3, #20]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	8b1b      	ldrh	r3, [r3, #24]
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4610      	mov	r0, r2
 8000ba6:	f001 f82f 	bl	8001c08 <HAL_GPIO_ReadPin>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0e5      	beq.n	8000b7c <rfm95_send_package+0x1d8>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	68f8      	ldr	r0, [r7, #12]
 8000bb6:	f7ff fd1c 	bl	80005f2 <rfm95_write>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f083 0301 	eor.w	r3, r3, #1
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <rfm95_send_package+0x226>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <rfm95_send_package+0x228>

	return true;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08005e14 	.word	0x08005e14
 8000bd8:	08005ee4 	.word	0x08005ee4
 8000bdc:	08005cdc 	.word	0x08005cdc
 8000be0:	08005eb0 	.word	0x08005eb0

08000be4 <rfm95_send_data_groundstation>:

bool rfm95_send_data_groundstation(rfm95_handle_t *handle) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b086      	sub	sp, #24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	//size_t length = LENGHT_GROUNDSTATION;
//	uint8_t ident = IDENT;
//	uint8_t rfm_data[LENGHT_GROUNDSTATION];
//	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
	unsigned long latitude = handle->latitude;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bf0:	617b      	str	r3, [r7, #20]
	unsigned long longitude = handle->longitude;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf6:	613b      	str	r3, [r7, #16]
	unsigned altitude = handle->altitude;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000bfc:	60fb      	str	r3, [r7, #12]
//	for (int i = 0; i < 2; i++) {
//		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
//	}

		uint8_t rfm_data[3];
		uint8_t rfm_package_length = 3;
 8000bfe:	2303      	movs	r3, #3
 8000c00:	72fb      	strb	r3, [r7, #11]
		rfm_data[0] = 0x53;
 8000c02:	2353      	movs	r3, #83	; 0x53
 8000c04:	723b      	strb	r3, [r7, #8]
		rfm_data[1] = 0x4f;
 8000c06:	234f      	movs	r3, #79	; 0x4f
 8000c08:	727b      	strb	r3, [r7, #9]
		rfm_data[2] = 0x53;
 8000c0a:	2353      	movs	r3, #83	; 0x53
 8000c0c:	72bb      	strb	r3, [r7, #10]


	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 8000c0e:	7afa      	ldrb	r2, [r7, #11]
 8000c10:	f107 0108 	add.w	r1, r7, #8
 8000c14:	2300      	movs	r3, #0
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff fec4 	bl	80009a4 <rfm95_send_package>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	f083 0301 	eor.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <rfm95_send_data_groundstation+0x48>
			0)) {
		return false;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e000      	b.n	8000c2e <rfm95_send_data_groundstation+0x4a>
	}
	return true;
 8000c2c:	2301      	movs	r3, #1
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b0a0      	sub	sp, #128	; 0x80
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fce3 	bl	8001608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f88f 	bl	8000d64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 f9b9 	bl	8000fbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c4a:	f000 f987 	bl	8000f5c <MX_USART2_UART_Init>
  MX_I2C3_Init();
 8000c4e:	f000 f8db 	bl	8000e08 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000c52:	f000 f945 	bl	8000ee0 <MX_SPI1_Init>
  MX_LPTIM1_Init();
 8000c56:	f000 f917 	bl	8000e88 <MX_LPTIM1_Init>
  /* USER CODE BEGIN 2 */


  rfm95_handle_t rfm95_handle = {
 8000c5a:	f107 0308 	add.w	r3, r7, #8
 8000c5e:	226c      	movs	r2, #108	; 0x6c
 8000c60:	2100      	movs	r1, #0
 8000c62:	4618      	mov	r0, r3
 8000c64:	f004 f832 	bl	8004ccc <memset>
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <main+0xfc>)
 8000c6a:	60bb      	str	r3, [r7, #8]
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <main+0x100>)
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	2340      	movs	r3, #64	; 0x40
 8000c72:	823b      	strh	r3, [r7, #16]
 8000c74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c78:	617b      	str	r3, [r7, #20]
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	833b      	strh	r3, [r7, #24]
 8000c7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c82:	61fb      	str	r3, [r7, #28]
 8000c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c88:	843b      	strh	r3, [r7, #32]
 8000c8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c94:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c96:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <main+0x104>)
 8000c98:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8000c9c:	6810      	ldr	r0, [r2, #0]
 8000c9e:	6018      	str	r0, [r3, #0]
 8000ca0:	4b27      	ldr	r3, [pc, #156]	; (8000d40 <main+0x108>)
 8000ca2:	f107 042e 	add.w	r4, r7, #46	; 0x2e
 8000ca6:	461d      	mov	r5, r3
 8000ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000caa:	6020      	str	r0, [r4, #0]
 8000cac:	6061      	str	r1, [r4, #4]
 8000cae:	60a2      	str	r2, [r4, #8]
 8000cb0:	60e3      	str	r3, [r4, #12]
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <main+0x10c>)
 8000cb4:	f107 043e 	add.w	r4, r7, #62	; 0x3e
 8000cb8:	461d      	mov	r5, r3
 8000cba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbc:	6020      	str	r0, [r4, #0]
 8000cbe:	6061      	str	r1, [r4, #4]
 8000cc0:	60a2      	str	r2, [r4, #8]
 8000cc2:	60e3      	str	r3, [r4, #12]
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <main+0x110>)
 8000cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cc8:	2345      	movs	r3, #69	; 0x45
 8000cca:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <main+0x114>)
 8000cd0:	667b      	str	r3, [r7, #100]	; 0x64
 8000cd2:	234e      	movs	r3, #78	; 0x4e
 8000cd4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8000cd8:	f640 139d 	movw	r3, #2461	; 0x99d
 8000cdc:	66fb      	str	r3, [r7, #108]	; 0x6c
  };



	// Initialise RFM95 module.
	if (!rfm95_init(&rfm95_handle)) {
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fcd4 	bl	8000690 <rfm95_init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	f083 0301 	eor.w	r3, r3, #1
 8000cee:	b2db      	uxtb	r3, r3
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d003      	beq.n	8000cfc <main+0xc4>
		printf("RFM95 init failed\n\r");
 8000cf4:	4816      	ldr	r0, [pc, #88]	; (8000d50 <main+0x118>)
 8000cf6:	f004 fadf 	bl	80052b8 <iprintf>
 8000cfa:	e002      	b.n	8000d02 <main+0xca>
	}else {
		printf("RFM95 init sucess\n\r");
 8000cfc:	4815      	ldr	r0, [pc, #84]	; (8000d54 <main+0x11c>)
 8000cfe:	f004 fadb 	bl	80052b8 <iprintf>
	}

	uint8_t data_packet[] = { 0x01, 0x02, 0x03, 0x4 };
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <main+0x120>)
 8000d04:	607b      	str	r3, [r7, #4]
//	if (!rfm95_send_data(&rfm95_handle, data_packet, sizeof(data_packet))) {
//	    printf("RFM95 send failed\n\r");
//	} else {
//	    printf("RFM95 send success\n\r");
//	}
		if (!rfm95_send_data_groundstation(&rfm95_handle)) {
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff ff6a 	bl	8000be4 <rfm95_send_data_groundstation>
 8000d10:	4603      	mov	r3, r0
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d003      	beq.n	8000d24 <main+0xec>
		    printf("RFM95 send failed\n\r");
 8000d1c:	480f      	ldr	r0, [pc, #60]	; (8000d5c <main+0x124>)
 8000d1e:	f004 facb 	bl	80052b8 <iprintf>
 8000d22:	e002      	b.n	8000d2a <main+0xf2>
		} else {
		    printf("RFM95 send success\n\r");
 8000d24:	480e      	ldr	r0, [pc, #56]	; (8000d60 <main+0x128>)
 8000d26:	f004 fac7 	bl	80052b8 <iprintf>
		}

	//rfm95_send_data_groundstation(&rfm95_handle);
	HAL_Delay(3000);
 8000d2a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d2e:	f000 fce7 	bl	8001700 <HAL_Delay>
		if (!rfm95_send_data_groundstation(&rfm95_handle)) {
 8000d32:	e7e8      	b.n	8000d06 <main+0xce>
 8000d34:	20000110 	.word	0x20000110
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	08005e8c 	.word	0x08005e8c
 8000d40:	08005e90 	.word	0x08005e90
 8000d44:	08005ea0 	.word	0x08005ea0
 8000d48:	007d6e5a 	.word	0x007d6e5a
 8000d4c:	02d476f8 	.word	0x02d476f8
 8000d50:	08005e38 	.word	0x08005e38
 8000d54:	08005e4c 	.word	0x08005e4c
 8000d58:	04030201 	.word	0x04030201
 8000d5c:	08005e60 	.word	0x08005e60
 8000d60:	08005e74 	.word	0x08005e74

08000d64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b096      	sub	sp, #88	; 0x58
 8000d68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	2244      	movs	r2, #68	; 0x44
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f003 ffaa 	bl	8004ccc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d78:	463b      	mov	r3, r7
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
 8000d84:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d86:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d8a:	f001 f943 	bl	8002014 <HAL_PWREx_ControlVoltageScaling>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d94:	f000 f9b2 	bl	80010fc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da2:	2340      	movs	r3, #64	; 0x40
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000daa:	2302      	movs	r3, #2
 8000dac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000dae:	2301      	movs	r3, #1
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000db2:	230a      	movs	r3, #10
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000db6:	2307      	movs	r3, #7
 8000db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 f97a 	bl	80020c0 <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000dd2:	f000 f993 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2303      	movs	r3, #3
 8000ddc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dea:	463b      	mov	r3, r7
 8000dec:	2104      	movs	r1, #4
 8000dee:	4618      	mov	r0, r3
 8000df0:	f001 fd86 	bl	8002900 <HAL_RCC_ClockConfig>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dfa:	f000 f97f 	bl	80010fc <Error_Handler>
  }
}
 8000dfe:	bf00      	nop
 8000e00:	3758      	adds	r7, #88	; 0x58
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_I2C3_Init+0x78>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e14:	4a1b      	ldr	r2, [pc, #108]	; (8000e84 <MX_I2C3_Init+0x7c>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000e18:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e24:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000e2a:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3c:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e42:	480e      	ldr	r0, [pc, #56]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e44:	f000 ff10 	bl	8001c68 <HAL_I2C_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000e4e:	f000 f955 	bl	80010fc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e52:	2100      	movs	r1, #0
 8000e54:	4809      	ldr	r0, [pc, #36]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e56:	f000 ff96 	bl	8001d86 <HAL_I2CEx_ConfigAnalogFilter>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e60:	f000 f94c 	bl	80010fc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e64:	2100      	movs	r1, #0
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <MX_I2C3_Init+0x74>)
 8000e68:	f000 ffd8 	bl	8001e1c <HAL_I2CEx_ConfigDigitalFilter>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e72:	f000 f943 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000008c 	.word	0x2000008c
 8000e80:	40005c00 	.word	0x40005c00
 8000e84:	10909cec 	.word	0x10909cec

08000e88 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000e8e:	4a13      	ldr	r2, [pc, #76]	; (8000edc <MX_LPTIM1_Init+0x54>)
 8000e90:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000e9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ea4:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8000eb8:	4b07      	ldr	r3, [pc, #28]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_LPTIM1_Init+0x50>)
 8000ec6:	f000 fff5 	bl	8001eb4 <HAL_LPTIM_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8000ed0:	f000 f914 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	200000d8 	.word	0x200000d8
 8000edc:	40007c00 	.word	0x40007c00

08000ee0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000ee6:	4a1c      	ldr	r2, [pc, #112]	; (8000f58 <MX_SPI1_Init+0x78>)
 8000ee8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000eec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000efa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000efe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f12:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000f14:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f16:	2238      	movs	r2, #56	; 0x38
 8000f18:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1a:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f26:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000f2c:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f2e:	2207      	movs	r2, #7
 8000f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f32:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f3e:	4805      	ldr	r0, [pc, #20]	; (8000f54 <MX_SPI1_Init+0x74>)
 8000f40:	f002 fa42 	bl	80033c8 <HAL_SPI_Init>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000f4a:	f000 f8d7 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000110 	.word	0x20000110
 8000f58:	40013000 	.word	0x40013000

08000f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_USART2_UART_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9e:	4805      	ldr	r0, [pc, #20]	; (8000fb4 <MX_USART2_UART_Init+0x58>)
 8000fa0:	f003 f922 	bl	80041e8 <HAL_UART_Init>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 f8a7 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000174 	.word	0x20000174
 8000fb8:	40004400 	.word	0x40004400

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fd2:	4b3e      	ldr	r3, [pc, #248]	; (80010cc <MX_GPIO_Init+0x110>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	4a3d      	ldr	r2, [pc, #244]	; (80010cc <MX_GPIO_Init+0x110>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fde:	4b3b      	ldr	r3, [pc, #236]	; (80010cc <MX_GPIO_Init+0x110>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	4b38      	ldr	r3, [pc, #224]	; (80010cc <MX_GPIO_Init+0x110>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	4a37      	ldr	r2, [pc, #220]	; (80010cc <MX_GPIO_Init+0x110>)
 8000ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ff6:	4b35      	ldr	r3, [pc, #212]	; (80010cc <MX_GPIO_Init+0x110>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b32      	ldr	r3, [pc, #200]	; (80010cc <MX_GPIO_Init+0x110>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	4a31      	ldr	r2, [pc, #196]	; (80010cc <MX_GPIO_Init+0x110>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100e:	4b2f      	ldr	r3, [pc, #188]	; (80010cc <MX_GPIO_Init+0x110>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60bb      	str	r3, [r7, #8]
 8001018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <MX_GPIO_Init+0x110>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a2b      	ldr	r2, [pc, #172]	; (80010cc <MX_GPIO_Init+0x110>)
 8001020:	f043 0302 	orr.w	r3, r3, #2
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <MX_GPIO_Init+0x110>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM95_NRST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001032:	2200      	movs	r2, #0
 8001034:	f240 1101 	movw	r1, #257	; 0x101
 8001038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103c:	f000 fdfc 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8001046:	4822      	ldr	r0, [pc, #136]	; (80010d0 <MX_GPIO_Init+0x114>)
 8001048:	f000 fdf6 	bl	8001c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800104c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001050:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001052:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	481c      	ldr	r0, [pc, #112]	; (80010d4 <MX_GPIO_Init+0x118>)
 8001064:	f000 fc56 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM95_NRST_Pin NSS_Pin */
  GPIO_InitStruct.Pin = RFM95_NRST_Pin|NSS_Pin;
 8001068:	f240 1301 	movw	r3, #257	; 0x101
 800106c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	2301      	movs	r3, #1
 8001070:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f000 fc46 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001088:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f000 fc38 	bl	8001914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 80010a4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010aa:	2301      	movs	r3, #1
 80010ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	4804      	ldr	r0, [pc, #16]	; (80010d0 <MX_GPIO_Init+0x114>)
 80010be:	f000 fc29 	bl	8001914 <HAL_GPIO_Init>

}
 80010c2:	bf00      	nop
 80010c4:	3728      	adds	r7, #40	; 0x28
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400
 80010d4:	48000800 	.word	0x48000800

080010d8 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80010e0:	1d39      	adds	r1, r7, #4
 80010e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e6:	2201      	movs	r2, #1
 80010e8:	4803      	ldr	r0, [pc, #12]	; (80010f8 <__io_putchar+0x20>)
 80010ea:	f003 f8cb 	bl	8004284 <HAL_UART_Transmit>

	return ch;
 80010ee:	687b      	ldr	r3, [r7, #4]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000174 	.word	0x20000174

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8001104:	e7fe      	b.n	8001104 <Error_Handler+0x8>
	...

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_MspInit+0x44>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6613      	str	r3, [r2, #96]	; 0x60
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6593      	str	r3, [r2, #88]	; 0x58
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0a4      	sub	sp, #144	; 0x90
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2268      	movs	r2, #104	; 0x68
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f003 fdab 	bl	8004ccc <memset>
  if(hi2c->Instance==I2C3)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a21      	ldr	r2, [pc, #132]	; (8001200 <HAL_I2C_MspInit+0xb0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d13a      	bne.n	80011f6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001180:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001184:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001186:	2300      	movs	r3, #0
 8001188:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fdbc 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800119a:	f7ff ffaf 	bl	80010fc <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a18      	ldr	r2, [pc, #96]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011b6:	2303      	movs	r3, #3
 80011b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ba:	2312      	movs	r3, #18
 80011bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011cc:	2304      	movs	r3, #4
 80011ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_I2C_MspInit+0xb8>)
 80011da:	f000 fb9b 	bl	8001914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	4a08      	ldr	r2, [pc, #32]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011e8:	6593      	str	r3, [r2, #88]	; 0x58
 80011ea:	4b06      	ldr	r3, [pc, #24]	; (8001204 <HAL_I2C_MspInit+0xb4>)
 80011ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3790      	adds	r7, #144	; 0x90
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40005c00 	.word	0x40005c00
 8001204:	40021000 	.word	0x40021000
 8001208:	48000800 	.word	0x48000800

0800120c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09e      	sub	sp, #120	; 0x78
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	2268      	movs	r2, #104	; 0x68
 800121a:	2100      	movs	r1, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f003 fd55 	bl	8004ccc <memset>
  if(hlptim->Instance==LPTIM1)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a11      	ldr	r2, [pc, #68]	; (800126c <HAL_LPTIM_MspInit+0x60>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d11a      	bne.n	8001262 <HAL_LPTIM_MspInit+0x56>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8001232:	2300      	movs	r3, #0
 8001234:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fd66 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8001246:	f7ff ff59 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800124a:	4b09      	ldr	r3, [pc, #36]	; (8001270 <HAL_LPTIM_MspInit+0x64>)
 800124c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800124e:	4a08      	ldr	r2, [pc, #32]	; (8001270 <HAL_LPTIM_MspInit+0x64>)
 8001250:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001254:	6593      	str	r3, [r2, #88]	; 0x58
 8001256:	4b06      	ldr	r3, [pc, #24]	; (8001270 <HAL_LPTIM_MspInit+0x64>)
 8001258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3778      	adds	r7, #120	; 0x78
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40007c00 	.word	0x40007c00
 8001270:	40021000 	.word	0x40021000

08001274 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_SPI_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 8001298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 800129c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a0:	6613      	str	r3, [r2, #96]	; 0x60
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_SPI_MspInit+0x80>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012c6:	23e0      	movs	r3, #224	; 0xe0
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d6:	2305      	movs	r3, #5
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f000 fb16 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40013000 	.word	0x40013000
 80012f4:	40021000 	.word	0x40021000

080012f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b0a4      	sub	sp, #144	; 0x90
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2268      	movs	r2, #104	; 0x68
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fcd7 	bl	8004ccc <memset>
  if(huart->Instance==USART2)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a21      	ldr	r2, [pc, #132]	; (80013a8 <HAL_UART_MspInit+0xb0>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d13a      	bne.n	800139e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001328:	2302      	movs	r3, #2
 800132a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800132c:	2300      	movs	r3, #0
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4618      	mov	r0, r3
 8001336:	f001 fce9 	bl	8002d0c <HAL_RCCEx_PeriphCLKConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001340:	f7ff fedc 	bl	80010fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_UART_MspInit+0xb4>)
 8001346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001348:	4a18      	ldr	r2, [pc, #96]	; (80013ac <HAL_UART_MspInit+0xb4>)
 800134a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800134e:	6593      	str	r3, [r2, #88]	; 0x58
 8001350:	4b16      	ldr	r3, [pc, #88]	; (80013ac <HAL_UART_MspInit+0xb4>)
 8001352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_UART_MspInit+0xb4>)
 800135e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <HAL_UART_MspInit+0xb4>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001368:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_UART_MspInit+0xb4>)
 800136a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001374:	230c      	movs	r3, #12
 8001376:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001394:	4619      	mov	r1, r3
 8001396:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139a:	f000 fabb 	bl	8001914 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800139e:	bf00      	nop
 80013a0:	3790      	adds	r7, #144	; 0x90
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40004400 	.word	0x40004400
 80013ac:	40021000 	.word	0x40021000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013fc:	f000 f960 	bl	80016c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}

08001404 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
	return 1;
 8001408:	2301      	movs	r3, #1
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <_kill>:

int _kill(int pid, int sig)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800141e:	f003 fc19 	bl	8004c54 <__errno>
 8001422:	4603      	mov	r3, r0
 8001424:	2216      	movs	r2, #22
 8001426:	601a      	str	r2, [r3, #0]
	return -1;
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_exit>:

void _exit (int status)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ffe7 	bl	8001414 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001446:	e7fe      	b.n	8001446 <_exit+0x12>

08001448 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b086      	sub	sp, #24
 800144c:	af00      	add	r7, sp, #0
 800144e:	60f8      	str	r0, [r7, #12]
 8001450:	60b9      	str	r1, [r7, #8]
 8001452:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	e00a      	b.n	8001470 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800145a:	f3af 8000 	nop.w
 800145e:	4601      	mov	r1, r0
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	b2ca      	uxtb	r2, r1
 8001468:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	3301      	adds	r3, #1
 800146e:	617b      	str	r3, [r7, #20]
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbf0      	blt.n	800145a <_read+0x12>
	}

return len;
 8001478:	687b      	ldr	r3, [r7, #4]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b086      	sub	sp, #24
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e009      	b.n	80014a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	1c5a      	adds	r2, r3, #1
 8001498:	60ba      	str	r2, [r7, #8]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fe1b 	bl	80010d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf1      	blt.n	8001494 <_write+0x12>
	}
	return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_close>:

int _close(int file)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b083      	sub	sp, #12
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	return -1;
 80014c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014d2:	b480      	push	{r7}
 80014d4:	b083      	sub	sp, #12
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014e2:	605a      	str	r2, [r3, #4]
	return 0;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_isatty>:

int _isatty(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return 1;
 80014fa:	2301      	movs	r3, #1
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	return 0;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	; (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	; (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	; (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	; (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f003 fb7e 	bl	8004c54 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	; (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20028000 	.word	0x20028000
 8001584:	00000400 	.word	0x00000400
 8001588:	200001f8 	.word	0x200001f8
 800158c:	20000210 	.word	0x20000210

08001590 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	; (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b8:	f7ff ffea 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	; (80015f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	; (80015f8 <LoopForever+0xe>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	; (8001600 <LoopForever+0x16>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f003 fb4f 	bl	8004c84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015e6:	f7ff fb27 	bl	8000c38 <main>

080015ea <LoopForever>:

LoopForever:
    b LoopForever
 80015ea:	e7fe      	b.n	80015ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80015ec:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80015f8:	08006024 	.word	0x08006024
  ldr r2, =_sbss
 80015fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001600:	20000210 	.word	0x20000210

08001604 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC1_IRQHandler>
	...

08001608 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800160e:	2300      	movs	r3, #0
 8001610:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001612:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <HAL_Init+0x3c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a0b      	ldr	r2, [pc, #44]	; (8001644 <HAL_Init+0x3c>)
 8001618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800161c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800161e:	2003      	movs	r0, #3
 8001620:	f000 f944 	bl	80018ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001624:	2000      	movs	r0, #0
 8001626:	f000 f80f 	bl	8001648 <HAL_InitTick>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	71fb      	strb	r3, [r7, #7]
 8001634:	e001      	b.n	800163a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001636:	f7ff fd67 	bl	8001108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800163a:	79fb      	ldrb	r3, [r7, #7]
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	40022000 	.word	0x40022000

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_InitTick+0x6c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d023      	beq.n	80016a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800165c:	4b16      	ldr	r3, [pc, #88]	; (80016b8 <HAL_InitTick+0x70>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <HAL_InitTick+0x6c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4619      	mov	r1, r3
 8001666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800166a:	fbb3 f3f1 	udiv	r3, r3, r1
 800166e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f941 	bl	80018fa <HAL_SYSTICK_Config>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d10f      	bne.n	800169e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d809      	bhi.n	8001698 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001684:	2200      	movs	r2, #0
 8001686:	6879      	ldr	r1, [r7, #4]
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f000 f919 	bl	80018c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001690:	4a0a      	ldr	r2, [pc, #40]	; (80016bc <HAL_InitTick+0x74>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6013      	str	r3, [r2, #0]
 8001696:	e007      	b.n	80016a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
 800169c:	e004      	b.n	80016a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
 80016a2:	e001      	b.n	80016a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008
 80016b8:	20000000 	.word	0x20000000
 80016bc:	20000004 	.word	0x20000004

080016c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016c4:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_IncTick+0x20>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_IncTick+0x24>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4413      	add	r3, r2
 80016d0:	4a04      	ldr	r2, [pc, #16]	; (80016e4 <HAL_IncTick+0x24>)
 80016d2:	6013      	str	r3, [r2, #0]
}
 80016d4:	bf00      	nop
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008
 80016e4:	200001fc 	.word	0x200001fc

080016e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  return uwTick;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <HAL_GetTick+0x14>)
 80016ee:	681b      	ldr	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200001fc 	.word	0x200001fc

08001700 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff ffee 	bl	80016e8 <HAL_GetTick>
 800170c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001718:	d005      	beq.n	8001726 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800171a:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_Delay+0x44>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4413      	add	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001726:	bf00      	nop
 8001728:	f7ff ffde 	bl	80016e8 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	429a      	cmp	r2, r3
 8001736:	d8f7      	bhi.n	8001728 <HAL_Delay+0x28>
  {
  }
}
 8001738:	bf00      	nop
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000008 	.word	0x20000008

08001748 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175e:	68ba      	ldr	r2, [r7, #8]
 8001760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001764:	4013      	ands	r3, r2
 8001766:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001778:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800177a:	4a04      	ldr	r2, [pc, #16]	; (800178c <__NVIC_SetPriorityGrouping+0x44>)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	60d3      	str	r3, [r2, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001794:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	0a1b      	lsrs	r3, r3, #8
 800179a:	f003 0307 	and.w	r3, r3, #7
}
 800179e:	4618      	mov	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	6039      	str	r1, [r7, #0]
 80017b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	db0a      	blt.n	80017d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	490c      	ldr	r1, [pc, #48]	; (80017f8 <__NVIC_SetPriority+0x4c>)
 80017c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ca:	0112      	lsls	r2, r2, #4
 80017cc:	b2d2      	uxtb	r2, r2
 80017ce:	440b      	add	r3, r1
 80017d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d4:	e00a      	b.n	80017ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	4908      	ldr	r1, [pc, #32]	; (80017fc <__NVIC_SetPriority+0x50>)
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	3b04      	subs	r3, #4
 80017e4:	0112      	lsls	r2, r2, #4
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	440b      	add	r3, r1
 80017ea:	761a      	strb	r2, [r3, #24]
}
 80017ec:	bf00      	nop
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000e100 	.word	0xe000e100
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001800:	b480      	push	{r7}
 8001802:	b089      	sub	sp, #36	; 0x24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	60b9      	str	r1, [r7, #8]
 800180a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	f1c3 0307 	rsb	r3, r3, #7
 800181a:	2b04      	cmp	r3, #4
 800181c:	bf28      	it	cs
 800181e:	2304      	movcs	r3, #4
 8001820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3304      	adds	r3, #4
 8001826:	2b06      	cmp	r3, #6
 8001828:	d902      	bls.n	8001830 <NVIC_EncodePriority+0x30>
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	3b03      	subs	r3, #3
 800182e:	e000      	b.n	8001832 <NVIC_EncodePriority+0x32>
 8001830:	2300      	movs	r3, #0
 8001832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001834:	f04f 32ff 	mov.w	r2, #4294967295
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43da      	mvns	r2, r3
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001848:	f04f 31ff 	mov.w	r1, #4294967295
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	fa01 f303 	lsl.w	r3, r1, r3
 8001852:	43d9      	mvns	r1, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	4313      	orrs	r3, r2
         );
}
 800185a:	4618      	mov	r0, r3
 800185c:	3724      	adds	r7, #36	; 0x24
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3b01      	subs	r3, #1
 8001874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001878:	d301      	bcc.n	800187e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800187a:	2301      	movs	r3, #1
 800187c:	e00f      	b.n	800189e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <SysTick_Config+0x40>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	3b01      	subs	r3, #1
 8001884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001886:	210f      	movs	r1, #15
 8001888:	f04f 30ff 	mov.w	r0, #4294967295
 800188c:	f7ff ff8e 	bl	80017ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001890:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <SysTick_Config+0x40>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001896:	4b04      	ldr	r3, [pc, #16]	; (80018a8 <SysTick_Config+0x40>)
 8001898:	2207      	movs	r2, #7
 800189a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	e000e010 	.word	0xe000e010

080018ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	f7ff ff47 	bl	8001748 <__NVIC_SetPriorityGrouping>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	4603      	mov	r3, r0
 80018ca:	60b9      	str	r1, [r7, #8]
 80018cc:	607a      	str	r2, [r7, #4]
 80018ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d4:	f7ff ff5c 	bl	8001790 <__NVIC_GetPriorityGrouping>
 80018d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	68b9      	ldr	r1, [r7, #8]
 80018de:	6978      	ldr	r0, [r7, #20]
 80018e0:	f7ff ff8e 	bl	8001800 <NVIC_EncodePriority>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	4611      	mov	r1, r2
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff5d 	bl	80017ac <__NVIC_SetPriority>
}
 80018f2:	bf00      	nop
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffb0 	bl	8001868 <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001914:	b480      	push	{r7}
 8001916:	b087      	sub	sp, #28
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001922:	e154      	b.n	8001bce <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2101      	movs	r1, #1
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	4013      	ands	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8146 	beq.w	8001bc8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b01      	cmp	r3, #1
 8001946:	d005      	beq.n	8001954 <HAL_GPIO_Init+0x40>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d130      	bne.n	80019b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2203      	movs	r2, #3
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68da      	ldr	r2, [r3, #12]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4313      	orrs	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	693a      	ldr	r2, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800198a:	2201      	movs	r2, #1
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4013      	ands	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f003 0201 	and.w	r2, r3, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	2b03      	cmp	r3, #3
 80019c0:	d017      	beq.n	80019f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4013      	ands	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	689a      	ldr	r2, [r3, #8]
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0303 	and.w	r3, r3, #3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d123      	bne.n	8001a46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	08da      	lsrs	r2, r3, #3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3208      	adds	r2, #8
 8001a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	220f      	movs	r2, #15
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	691a      	ldr	r2, [r3, #16]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	2203      	movs	r2, #3
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f003 0203 	and.w	r2, r3, #3
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 80a0 	beq.w	8001bc8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a88:	4b58      	ldr	r3, [pc, #352]	; (8001bec <HAL_GPIO_Init+0x2d8>)
 8001a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8c:	4a57      	ldr	r2, [pc, #348]	; (8001bec <HAL_GPIO_Init+0x2d8>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6613      	str	r3, [r2, #96]	; 0x60
 8001a94:	4b55      	ldr	r3, [pc, #340]	; (8001bec <HAL_GPIO_Init+0x2d8>)
 8001a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001aa0:	4a53      	ldr	r2, [pc, #332]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	089b      	lsrs	r3, r3, #2
 8001aa6:	3302      	adds	r3, #2
 8001aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	220f      	movs	r2, #15
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aca:	d019      	beq.n	8001b00 <HAL_GPIO_Init+0x1ec>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a49      	ldr	r2, [pc, #292]	; (8001bf4 <HAL_GPIO_Init+0x2e0>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d013      	beq.n	8001afc <HAL_GPIO_Init+0x1e8>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x2e4>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d00d      	beq.n	8001af8 <HAL_GPIO_Init+0x1e4>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4a47      	ldr	r2, [pc, #284]	; (8001bfc <HAL_GPIO_Init+0x2e8>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d007      	beq.n	8001af4 <HAL_GPIO_Init+0x1e0>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a46      	ldr	r2, [pc, #280]	; (8001c00 <HAL_GPIO_Init+0x2ec>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d101      	bne.n	8001af0 <HAL_GPIO_Init+0x1dc>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e008      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001af0:	2307      	movs	r3, #7
 8001af2:	e006      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001af4:	2303      	movs	r3, #3
 8001af6:	e004      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e002      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_GPIO_Init+0x1ee>
 8001b00:	2300      	movs	r3, #0
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	f002 0203 	and.w	r2, r2, #3
 8001b08:	0092      	lsls	r2, r2, #2
 8001b0a:	4093      	lsls	r3, r2
 8001b0c:	693a      	ldr	r2, [r7, #16]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b12:	4937      	ldr	r1, [pc, #220]	; (8001bf0 <HAL_GPIO_Init+0x2dc>)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	089b      	lsrs	r3, r3, #2
 8001b18:	3302      	adds	r3, #2
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b20:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d003      	beq.n	8001b44 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b44:	4a2f      	ldr	r2, [pc, #188]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	693a      	ldr	r2, [r7, #16]
 8001b56:	4013      	ands	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b6e:	4a25      	ldr	r2, [pc, #148]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b74:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b98:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4013      	ands	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc2:	4a10      	ldr	r2, [pc, #64]	; (8001c04 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f47f aea3 	bne.w	8001924 <HAL_GPIO_Init+0x10>
  }
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	371c      	adds	r7, #28
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	40010000 	.word	0x40010000
 8001bf4:	48000400 	.word	0x48000400
 8001bf8:	48000800 	.word	0x48000800
 8001bfc:	48000c00 	.word	0x48000c00
 8001c00:	48001000 	.word	0x48001000
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	887b      	ldrh	r3, [r7, #2]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d002      	beq.n	8001c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c20:	2301      	movs	r3, #1
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	460b      	mov	r3, r1
 8001c42:	807b      	strh	r3, [r7, #2]
 8001c44:	4613      	mov	r3, r2
 8001c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c48:	787b      	ldrb	r3, [r7, #1]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c4e:	887a      	ldrh	r2, [r7, #2]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c54:	e002      	b.n	8001c5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c56:	887a      	ldrh	r2, [r7, #2]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e081      	b.n	8001d7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7ff fa5e 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d107      	bne.n	8001ce2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689a      	ldr	r2, [r3, #8]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	e006      	b.n	8001cf0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	689a      	ldr	r2, [r3, #8]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001cee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d104      	bne.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	430a      	orrs	r2, r1
 8001d3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	69d9      	ldr	r1, [r3, #28]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6a1a      	ldr	r2, [r3, #32]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d86:	b480      	push	{r7}
 8001d88:	b083      	sub	sp, #12
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b20      	cmp	r3, #32
 8001d9a:	d138      	bne.n	8001e0e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e032      	b.n	8001e10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2224      	movs	r2, #36	; 0x24
 8001db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0201 	bic.w	r2, r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dd8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f042 0201 	orr.w	r2, r2, #1
 8001df8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e0e:	2302      	movs	r3, #2
  }
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b20      	cmp	r3, #32
 8001e30:	d139      	bne.n	8001ea6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d101      	bne.n	8001e40 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	e033      	b.n	8001ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2224      	movs	r2, #36	; 0x24
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f022 0201 	bic.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e6e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	021b      	lsls	r3, r3, #8
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0201 	orr.w	r2, r2, #1
 8001e90:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2220      	movs	r2, #32
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ea6:	2302      	movs	r3, #2
  }
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e08f      	b.n	8001fe6 <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d106      	bne.n	8001ee6 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f7ff f993 	bl	800120c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d004      	beq.n	8001f08 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f06:	d103      	bne.n	8001f10 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f023 031e 	bic.w	r3, r3, #30
 8001f0e:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	695b      	ldr	r3, [r3, #20]
 8001f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d005      	beq.n	8001f28 <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f22:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001f26:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001f28:	68fa      	ldr	r2, [r7, #12]
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_LPTIM_Init+0x13c>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001f38:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001f3e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001f44:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001f4a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d107      	bne.n	8001f6a <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001f62:	4313      	orrs	r3, r2
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d004      	beq.n	8001f7c <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f7a:	d107      	bne.n	8001f8c <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001f84:	4313      	orrs	r3, r2
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	695b      	ldr	r3, [r3, #20]
 8001f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d00a      	beq.n	8001fae <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001fa0:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8001fa6:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a0e      	ldr	r2, [pc, #56]	; (8001ff4 <HAL_LPTIM_Init+0x140>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d108      	bne.n	8001fd2 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]
 8001fd0:	e004      	b.n	8001fdc <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fda:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	ff19f1fe 	.word	0xff19f1fe
 8001ff4:	40007c00 	.word	0x40007c00

08001ff8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000

08002014 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002022:	d130      	bne.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002024:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800202c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002030:	d038      	beq.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800203a:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002040:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002042:	4b1d      	ldr	r3, [pc, #116]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2232      	movs	r2, #50	; 0x32
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800204e:	fba2 2303 	umull	r2, r3, r2, r3
 8002052:	0c9b      	lsrs	r3, r3, #18
 8002054:	3301      	adds	r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002058:	e002      	b.n	8002060 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	3b01      	subs	r3, #1
 800205e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002060:	4b14      	ldr	r3, [pc, #80]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206c:	d102      	bne.n	8002074 <HAL_PWREx_ControlVoltageScaling+0x60>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f2      	bne.n	800205a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002080:	d110      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e00f      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002086:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800208e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002092:	d007      	beq.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800209c:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000
 80020b8:	20000000 	.word	0x20000000
 80020bc:	431bde83 	.word	0x431bde83

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	f000 bc10 	b.w	80028f4 <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d4:	4b96      	ldr	r3, [pc, #600]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020de:	4b94      	ldr	r3, [pc, #592]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0310 	and.w	r3, r3, #16
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 80e4 	beq.w	80022be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d007      	beq.n	800210c <HAL_RCC_OscConfig+0x4c>
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	f040 808b 	bne.w	800221a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	2b01      	cmp	r3, #1
 8002108:	f040 8087 	bne.w	800221a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800210c:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x64>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e3e7      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1a      	ldr	r2, [r3, #32]
 8002128:	4b81      	ldr	r3, [pc, #516]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <HAL_RCC_OscConfig+0x7e>
 8002134:	4b7e      	ldr	r3, [pc, #504]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	e005      	b.n	800214a <HAL_RCC_OscConfig+0x8a>
 800213e:	4b7c      	ldr	r3, [pc, #496]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002140:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214a:	4293      	cmp	r3, r2
 800214c:	d223      	bcs.n	8002196 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fd7a 	bl	8002c4c <RCC_SetFlashLatencyFromMSIRange>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e3c8      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002162:	4b73      	ldr	r3, [pc, #460]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a72      	ldr	r2, [pc, #456]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002168:	f043 0308 	orr.w	r3, r3, #8
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b70      	ldr	r3, [pc, #448]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	496d      	ldr	r1, [pc, #436]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800217c:	4313      	orrs	r3, r2
 800217e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002180:	4b6b      	ldr	r3, [pc, #428]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	4968      	ldr	r1, [pc, #416]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
 8002194:	e025      	b.n	80021e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002196:	4b66      	ldr	r3, [pc, #408]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a65      	ldr	r2, [pc, #404]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6013      	str	r3, [r2, #0]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4960      	ldr	r1, [pc, #384]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021b4:	4b5e      	ldr	r3, [pc, #376]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	495b      	ldr	r1, [pc, #364]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d109      	bne.n	80021e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 fd3a 	bl	8002c4c <RCC_SetFlashLatencyFromMSIRange>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e388      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021e2:	f000 fc6f 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	4950      	ldr	r1, [pc, #320]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	f003 031f 	and.w	r3, r3, #31
 80021fa:	fa22 f303 	lsr.w	r3, r2, r3
 80021fe:	4a4e      	ldr	r2, [pc, #312]	; (8002338 <HAL_RCC_OscConfig+0x278>)
 8002200:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002202:	4b4e      	ldr	r3, [pc, #312]	; (800233c <HAL_RCC_OscConfig+0x27c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff fa1e 	bl	8001648 <HAL_InitTick>
 800220c:	4603      	mov	r3, r0
 800220e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002210:	7bfb      	ldrb	r3, [r7, #15]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d052      	beq.n	80022bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	e36c      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d032      	beq.n	8002288 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002222:	4b43      	ldr	r3, [pc, #268]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a42      	ldr	r2, [pc, #264]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800222e:	f7ff fa5b 	bl	80016e8 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002236:	f7ff fa57 	bl	80016e8 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e355      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002248:	4b39      	ldr	r3, [pc, #228]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a35      	ldr	r2, [pc, #212]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800225a:	f043 0308 	orr.w	r3, r3, #8
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b33      	ldr	r3, [pc, #204]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	4930      	ldr	r1, [pc, #192]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800226e:	4313      	orrs	r3, r2
 8002270:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	021b      	lsls	r3, r3, #8
 8002280:	492b      	ldr	r1, [pc, #172]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
 8002286:	e01a      	b.n	80022be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002288:	4b29      	ldr	r3, [pc, #164]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800228e:	f023 0301 	bic.w	r3, r3, #1
 8002292:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002294:	f7ff fa28 	bl	80016e8 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800229c:	f7ff fa24 	bl	80016e8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e322      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1f0      	bne.n	800229c <HAL_RCC_OscConfig+0x1dc>
 80022ba:	e000      	b.n	80022be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d073      	beq.n	80023b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d005      	beq.n	80022dc <HAL_RCC_OscConfig+0x21c>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	2b0c      	cmp	r3, #12
 80022d4:	d10e      	bne.n	80022f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	2b03      	cmp	r3, #3
 80022da:	d10b      	bne.n	80022f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022dc:	4b14      	ldr	r3, [pc, #80]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d063      	beq.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d15f      	bne.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e2ff      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fc:	d106      	bne.n	800230c <HAL_RCC_OscConfig+0x24c>
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e025      	b.n	8002358 <HAL_RCC_OscConfig+0x298>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002314:	d114      	bne.n	8002340 <HAL_RCC_OscConfig+0x280>
 8002316:	4b06      	ldr	r3, [pc, #24]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a05      	ldr	r2, [pc, #20]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 800231c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a02      	ldr	r2, [pc, #8]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e013      	b.n	8002358 <HAL_RCC_OscConfig+0x298>
 8002330:	40021000 	.word	0x40021000
 8002334:	08005ef8 	.word	0x08005ef8
 8002338:	20000000 	.word	0x20000000
 800233c:	20000004 	.word	0x20000004
 8002340:	4ba0      	ldr	r3, [pc, #640]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a9f      	ldr	r2, [pc, #636]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800234a:	6013      	str	r3, [r2, #0]
 800234c:	4b9d      	ldr	r3, [pc, #628]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a9c      	ldr	r2, [pc, #624]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002356:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d013      	beq.n	8002388 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7ff f9c2 	bl	80016e8 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002368:	f7ff f9be 	bl	80016e8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b64      	cmp	r3, #100	; 0x64
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e2bc      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800237a:	4b92      	ldr	r3, [pc, #584]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x2a8>
 8002386:	e014      	b.n	80023b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002388:	f7ff f9ae 	bl	80016e8 <HAL_GetTick>
 800238c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002390:	f7ff f9aa 	bl	80016e8 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b64      	cmp	r3, #100	; 0x64
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e2a8      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023a2:	4b88      	ldr	r3, [pc, #544]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1f0      	bne.n	8002390 <HAL_RCC_OscConfig+0x2d0>
 80023ae:	e000      	b.n	80023b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d060      	beq.n	8002480 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_OscConfig+0x310>
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	d119      	bne.n	80023fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d116      	bne.n	80023fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023d0:	4b7c      	ldr	r3, [pc, #496]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_OscConfig+0x328>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e285      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e8:	4b76      	ldr	r3, [pc, #472]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	061b      	lsls	r3, r3, #24
 80023f6:	4973      	ldr	r1, [pc, #460]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fc:	e040      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d023      	beq.n	800244e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002406:	4b6f      	ldr	r3, [pc, #444]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a6e      	ldr	r2, [pc, #440]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800240c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7ff f969 	bl	80016e8 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800241a:	f7ff f965 	bl	80016e8 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e263      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800242c:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	061b      	lsls	r3, r3, #24
 8002446:	495f      	ldr	r1, [pc, #380]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]
 800244c:	e018      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7ff f945 	bl	80016e8 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002462:	f7ff f941 	bl	80016e8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e23f      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002474:	4b53      	ldr	r3, [pc, #332]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f0      	bne.n	8002462 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d03c      	beq.n	8002506 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d01c      	beq.n	80024ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002494:	4b4b      	ldr	r3, [pc, #300]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	4a4a      	ldr	r2, [pc, #296]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024a4:	f7ff f920 	bl	80016e8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ac:	f7ff f91c 	bl	80016e8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e21a      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024be:	4b41      	ldr	r3, [pc, #260]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ef      	beq.n	80024ac <HAL_RCC_OscConfig+0x3ec>
 80024cc:	e01b      	b.n	8002506 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024ce:	4b3d      	ldr	r3, [pc, #244]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024d4:	4a3b      	ldr	r2, [pc, #236]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024d6:	f023 0301 	bic.w	r3, r3, #1
 80024da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024de:	f7ff f903 	bl	80016e8 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e6:	f7ff f8ff 	bl	80016e8 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e1fd      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80024fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1ef      	bne.n	80024e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 80a6 	beq.w	8002660 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002514:	2300      	movs	r3, #0
 8002516:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002518:	4b2a      	ldr	r3, [pc, #168]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10d      	bne.n	8002540 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	4b27      	ldr	r3, [pc, #156]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	4a26      	ldr	r2, [pc, #152]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800252a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252e:	6593      	str	r3, [r2, #88]	; 0x58
 8002530:	4b24      	ldr	r3, [pc, #144]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253c:	2301      	movs	r3, #1
 800253e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002540:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <HAL_RCC_OscConfig+0x508>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d118      	bne.n	800257e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800254c:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <HAL_RCC_OscConfig+0x508>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <HAL_RCC_OscConfig+0x508>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002556:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002558:	f7ff f8c6 	bl	80016e8 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002560:	f7ff f8c2 	bl	80016e8 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e1c0      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002572:	4b15      	ldr	r3, [pc, #84]	; (80025c8 <HAL_RCC_OscConfig+0x508>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d108      	bne.n	8002598 <HAL_RCC_OscConfig+0x4d8>
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 8002588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258c:	4a0d      	ldr	r2, [pc, #52]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 800258e:	f043 0301 	orr.w	r3, r3, #1
 8002592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002596:	e029      	b.n	80025ec <HAL_RCC_OscConfig+0x52c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	2b05      	cmp	r3, #5
 800259e:	d115      	bne.n	80025cc <HAL_RCC_OscConfig+0x50c>
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a6:	4a07      	ldr	r2, [pc, #28]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	4a03      	ldr	r2, [pc, #12]	; (80025c4 <HAL_RCC_OscConfig+0x504>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c0:	e014      	b.n	80025ec <HAL_RCC_OscConfig+0x52c>
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40007000 	.word	0x40007000
 80025cc:	4b9a      	ldr	r3, [pc, #616]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a99      	ldr	r2, [pc, #612]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80025d4:	f023 0301 	bic.w	r3, r3, #1
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025dc:	4b96      	ldr	r3, [pc, #600]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	4a95      	ldr	r2, [pc, #596]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80025e4:	f023 0304 	bic.w	r3, r3, #4
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d016      	beq.n	8002622 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7ff f878 	bl	80016e8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7ff f874 	bl	80016e8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e170      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002612:	4b89      	ldr	r3, [pc, #548]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ed      	beq.n	80025fc <HAL_RCC_OscConfig+0x53c>
 8002620:	e015      	b.n	800264e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002622:	f7ff f861 	bl	80016e8 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002628:	e00a      	b.n	8002640 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800262a:	f7ff f85d 	bl	80016e8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	f241 3288 	movw	r2, #5000	; 0x1388
 8002638:	4293      	cmp	r3, r2
 800263a:	d901      	bls.n	8002640 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800263c:	2303      	movs	r3, #3
 800263e:	e159      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002640:	4b7d      	ldr	r3, [pc, #500]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ed      	bne.n	800262a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800264e:	7ffb      	ldrb	r3, [r7, #31]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d105      	bne.n	8002660 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002654:	4b78      	ldr	r3, [pc, #480]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	4a77      	ldr	r2, [pc, #476]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 800265a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800265e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	2b00      	cmp	r3, #0
 800266a:	d03c      	beq.n	80026e6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002670:	2b00      	cmp	r3, #0
 8002672:	d01c      	beq.n	80026ae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002674:	4b70      	ldr	r3, [pc, #448]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800267a:	4a6f      	ldr	r2, [pc, #444]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7ff f830 	bl	80016e8 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800268c:	f7ff f82c 	bl	80016e8 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e12a      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800269e:	4b66      	ldr	r3, [pc, #408]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80026a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ef      	beq.n	800268c <HAL_RCC_OscConfig+0x5cc>
 80026ac:	e01b      	b.n	80026e6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ae:	4b62      	ldr	r3, [pc, #392]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80026b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026b4:	4a60      	ldr	r2, [pc, #384]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026be:	f7ff f813 	bl	80016e8 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c6:	f7ff f80f 	bl	80016e8 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e10d      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026d8:	4b57      	ldr	r3, [pc, #348]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80026da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1ef      	bne.n	80026c6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f000 8101 	beq.w	80028f2 <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	f040 80c9 	bne.w	800288c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80026fa:	4b4f      	ldr	r3, [pc, #316]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	f003 0203 	and.w	r2, r3, #3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800270a:	429a      	cmp	r2, r3
 800270c:	d12c      	bne.n	8002768 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002718:	3b01      	subs	r3, #1
 800271a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800271c:	429a      	cmp	r2, r3
 800271e:	d123      	bne.n	8002768 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800272a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800272c:	429a      	cmp	r2, r3
 800272e:	d11b      	bne.n	8002768 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d113      	bne.n	8002768 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	3b01      	subs	r3, #1
 800274e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002750:	429a      	cmp	r2, r3
 8002752:	d109      	bne.n	8002768 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	085b      	lsrs	r3, r3, #1
 8002760:	3b01      	subs	r3, #1
 8002762:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002764:	429a      	cmp	r2, r3
 8002766:	d06b      	beq.n	8002840 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d062      	beq.n	8002834 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800276e:	4b32      	ldr	r3, [pc, #200]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e0ba      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800277e:	4b2e      	ldr	r3, [pc, #184]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2d      	ldr	r2, [pc, #180]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002784:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002788:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800278a:	f7fe ffad 	bl	80016e8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002792:	f7fe ffa9 	bl	80016e8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e0a7      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d1f0      	bne.n	8002792 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x77c>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027c0:	3a01      	subs	r2, #1
 80027c2:	0112      	lsls	r2, r2, #4
 80027c4:	4311      	orrs	r1, r2
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027ca:	0212      	lsls	r2, r2, #8
 80027cc:	4311      	orrs	r1, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80027d2:	0852      	lsrs	r2, r2, #1
 80027d4:	3a01      	subs	r2, #1
 80027d6:	0552      	lsls	r2, r2, #21
 80027d8:	4311      	orrs	r1, r2
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0652      	lsls	r2, r2, #25
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027ea:	06d2      	lsls	r2, r2, #27
 80027ec:	430a      	orrs	r2, r1
 80027ee:	4912      	ldr	r1, [pc, #72]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80027f4:	4b10      	ldr	r3, [pc, #64]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0f      	ldr	r2, [pc, #60]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 80027fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002800:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800280c:	f7fe ff6c 	bl	80016e8 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe ff68 	bl	80016e8 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e066      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002826:	4b04      	ldr	r3, [pc, #16]	; (8002838 <HAL_RCC_OscConfig+0x778>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002832:	e05e      	b.n	80028f2 <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e05d      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
 8002838:	40021000 	.word	0x40021000
 800283c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002840:	4b2e      	ldr	r3, [pc, #184]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d152      	bne.n	80028f2 <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800284c:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a2a      	ldr	r2, [pc, #168]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002858:	4b28      	ldr	r3, [pc, #160]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002864:	f7fe ff40 	bl	80016e8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe ff3c 	bl	80016e8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e03a      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b1f      	ldr	r3, [pc, #124]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x7ac>
 800288a:	e032      	b.n	80028f2 <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2b0c      	cmp	r3, #12
 8002890:	d02d      	beq.n	80028ee <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002892:	4b1a      	ldr	r3, [pc, #104]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 8002898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800289c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d105      	bne.n	80028b6 <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028aa:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	4a13      	ldr	r2, [pc, #76]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80028b6:	4b11      	ldr	r3, [pc, #68]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 80028bc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028c4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c6:	f7fe ff0f 	bl	80016e8 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe ff0b 	bl	80016e8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e009      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028e0:	4b06      	ldr	r3, [pc, #24]	; (80028fc <HAL_RCC_OscConfig+0x83c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f0      	bne.n	80028ce <HAL_RCC_OscConfig+0x80e>
 80028ec:	e001      	b.n	80028f2 <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0c8      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b66      	ldr	r3, [pc, #408]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b63      	ldr	r3, [pc, #396]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4961      	ldr	r1, [pc, #388]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b5f      	ldr	r3, [pc, #380]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b0      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0301 	and.w	r3, r3, #1
 800294c:	2b00      	cmp	r3, #0
 800294e:	d04c      	beq.n	80029ea <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d107      	bne.n	8002968 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002958:	4b56      	ldr	r3, [pc, #344]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d121      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e09e      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2b02      	cmp	r3, #2
 800296e:	d107      	bne.n	8002980 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d115      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e092      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d107      	bne.n	8002998 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002988:	4b4a      	ldr	r3, [pc, #296]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d109      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e086      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d101      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e07e      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029a8:	4b42      	ldr	r3, [pc, #264]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f023 0203 	bic.w	r2, r3, #3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	493f      	ldr	r1, [pc, #252]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ba:	f7fe fe95 	bl	80016e8 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c0:	e00a      	b.n	80029d8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029c2:	f7fe fe91 	bl	80016e8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d901      	bls.n	80029d8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80029d4:	2303      	movs	r3, #3
 80029d6:	e066      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f003 020c 	and.w	r2, r3, #12
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d1eb      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	492c      	ldr	r1, [pc, #176]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b29      	ldr	r3, [pc, #164]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0307 	and.w	r3, r3, #7
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d210      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b26      	ldr	r3, [pc, #152]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f023 0207 	bic.w	r2, r3, #7
 8002a1e:	4924      	ldr	r1, [pc, #144]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a26:	4b22      	ldr	r3, [pc, #136]	; (8002ab0 <HAL_RCC_ClockConfig+0x1b0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d001      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e036      	b.n	8002aa6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a44:	4b1b      	ldr	r3, [pc, #108]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4918      	ldr	r1, [pc, #96]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d009      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	00db      	lsls	r3, r3, #3
 8002a70:	4910      	ldr	r1, [pc, #64]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a76:	f000 f825 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	4b0d      	ldr	r3, [pc, #52]	; (8002ab4 <HAL_RCC_ClockConfig+0x1b4>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	490c      	ldr	r1, [pc, #48]	; (8002ab8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	5ccb      	ldrb	r3, [r1, r3]
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a92:	4a0a      	ldr	r2, [pc, #40]	; (8002abc <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a96:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fe fdd4 	bl	8001648 <HAL_InitTick>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	72fb      	strb	r3, [r7, #11]

  return status;
 8002aa4:	7afb      	ldrb	r3, [r7, #11]
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	40022000 	.word	0x40022000
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	08005ef8 	.word	0x08005ef8
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	61fb      	str	r3, [r7, #28]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
 8002ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002adc:	4b3b      	ldr	r3, [pc, #236]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x34>
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d121      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d11e      	bne.n	8002b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002af8:	4b34      	ldr	r3, [pc, #208]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0308 	and.w	r3, r3, #8
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b04:	4b31      	ldr	r3, [pc, #196]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b0a:	0a1b      	lsrs	r3, r3, #8
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	61fb      	str	r3, [r7, #28]
 8002b12:	e005      	b.n	8002b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b14:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	091b      	lsrs	r3, r3, #4
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b20:	4a2b      	ldr	r2, [pc, #172]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d10d      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b34:	e00a      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d102      	bne.n	8002b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b3c:	4b25      	ldr	r3, [pc, #148]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e004      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d101      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b48:	4b23      	ldr	r3, [pc, #140]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	2b0c      	cmp	r3, #12
 8002b50:	d134      	bne.n	8002bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b52:	4b1e      	ldr	r3, [pc, #120]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d003      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0xac>
 8002b68:	e005      	b.n	8002b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002b6c:	617b      	str	r3, [r7, #20]
      break;
 8002b6e:	e005      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002b70:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b72:	617b      	str	r3, [r7, #20]
      break;
 8002b74:	e002      	b.n	8002b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	617b      	str	r3, [r7, #20]
      break;
 8002b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b7c:	4b13      	ldr	r3, [pc, #76]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	3301      	adds	r3, #1
 8002b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b8a:	4b10      	ldr	r3, [pc, #64]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	fb03 f202 	mul.w	r2, r3, r2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ba2:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	0e5b      	lsrs	r3, r3, #25
 8002ba8:	f003 0303 	and.w	r3, r3, #3
 8002bac:	3301      	adds	r3, #1
 8002bae:	005b      	lsls	r3, r3, #1
 8002bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bbc:	69bb      	ldr	r3, [r7, #24]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	08005f10 	.word	0x08005f10
 8002bd4:	00f42400 	.word	0x00f42400
 8002bd8:	007a1200 	.word	0x007a1200

08002bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be0:	4b03      	ldr	r3, [pc, #12]	; (8002bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000000 	.word	0x20000000

08002bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002bf8:	f7ff fff0 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	0a1b      	lsrs	r3, r3, #8
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	4904      	ldr	r1, [pc, #16]	; (8002c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c0a:	5ccb      	ldrb	r3, [r1, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	08005f08 	.word	0x08005f08

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c24:	f7ff ffda 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	0adb      	lsrs	r3, r3, #11
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4904      	ldr	r1, [pc, #16]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	f003 031f 	and.w	r3, r3, #31
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08005f08 	.word	0x08005f08

08002c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c64:	f7ff f9c8 	bl	8001ff8 <HAL_PWREx_GetVoltageRange>
 8002c68:	6178      	str	r0, [r7, #20]
 8002c6a:	e014      	b.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4a24      	ldr	r2, [pc, #144]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60fb      	str	r3, [r7, #12]
 8002c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c84:	f7ff f9b8 	bl	8001ff8 <HAL_PWREx_GetVoltageRange>
 8002c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	; (8002d04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c9c:	d10b      	bne.n	8002cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b80      	cmp	r3, #128	; 0x80
 8002ca2:	d919      	bls.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2ba0      	cmp	r3, #160	; 0xa0
 8002ca8:	d902      	bls.n	8002cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002caa:	2302      	movs	r3, #2
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	e013      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	e010      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d902      	bls.n	8002cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	e00a      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b80      	cmp	r3, #128	; 0x80
 8002cc6:	d102      	bne.n	8002cce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cc8:	2302      	movs	r3, #2
 8002cca:	613b      	str	r3, [r7, #16]
 8002ccc:	e004      	b.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b70      	cmp	r3, #112	; 0x70
 8002cd2:	d101      	bne.n	8002cd8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cd8:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f023 0207 	bic.w	r2, r3, #7
 8002ce0:	4909      	ldr	r1, [pc, #36]	; (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	693a      	ldr	r2, [r7, #16]
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d001      	beq.n	8002cfa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000
 8002d08:	40022000 	.word	0x40022000

08002d0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d14:	2300      	movs	r3, #0
 8002d16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d18:	2300      	movs	r3, #0
 8002d1a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d031      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d2c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d30:	d01a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d32:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d36:	d814      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d40:	d10f      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d42:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4a5c      	ldr	r2, [pc, #368]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d4c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d4e:	e00c      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa44 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	74fb      	strb	r3, [r7, #19]
      break;
 8002d66:	e000      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d70:	4b51      	ldr	r3, [pc, #324]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7e:	494e      	ldr	r1, [pc, #312]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d86:	e001      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 809e 	beq.w	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d9e:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e000      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002dae:	2300      	movs	r3, #0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00d      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db4:	4b40      	ldr	r3, [pc, #256]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	4a3f      	ldr	r2, [pc, #252]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc0:	4b3d      	ldr	r3, [pc, #244]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dd0:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a39      	ldr	r2, [pc, #228]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ddc:	f7fe fc84 	bl	80016e8 <HAL_GetTick>
 8002de0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002de2:	e009      	b.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de4:	f7fe fc80 	bl	80016e8 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d902      	bls.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	74fb      	strb	r3, [r7, #19]
        break;
 8002df6:	e005      	b.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002df8:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0ef      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002e04:	7cfb      	ldrb	r3, [r7, #19]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d15a      	bne.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e0a:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e14:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d01e      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d019      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e30:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e32:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e38:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	4a1b      	ldr	r2, [pc, #108]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e52:	4a19      	ldr	r2, [pc, #100]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d016      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e64:	f7fe fc40 	bl	80016e8 <HAL_GetTick>
 8002e68:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fc3c 	bl	80016e8 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d902      	bls.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	74fb      	strb	r3, [r7, #19]
            break;
 8002e82:	e006      	b.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d0ec      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e92:	7cfb      	ldrb	r3, [r7, #19]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d10b      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e98:	4b07      	ldr	r3, [pc, #28]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ea6:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002eae:	e009      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	74bb      	strb	r3, [r7, #18]
 8002eb4:	e006      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec0:	7cfb      	ldrb	r3, [r7, #19]
 8002ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec4:	7c7b      	ldrb	r3, [r7, #17]
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d105      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eca:	4b9e      	ldr	r3, [pc, #632]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	4a9d      	ldr	r2, [pc, #628]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00a      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ee2:	4b98      	ldr	r3, [pc, #608]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee8:	f023 0203 	bic.w	r2, r3, #3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	4994      	ldr	r1, [pc, #592]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00a      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f04:	4b8f      	ldr	r3, [pc, #572]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 020c 	bic.w	r2, r3, #12
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	498c      	ldr	r1, [pc, #560]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f26:	4b87      	ldr	r3, [pc, #540]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f34:	4983      	ldr	r1, [pc, #524]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00a      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f48:	4b7e      	ldr	r3, [pc, #504]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	497b      	ldr	r1, [pc, #492]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00a      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f6a:	4b76      	ldr	r3, [pc, #472]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4972      	ldr	r1, [pc, #456]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f8c:	4b6d      	ldr	r3, [pc, #436]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	496a      	ldr	r1, [pc, #424]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fae:	4b65      	ldr	r3, [pc, #404]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fbc:	4961      	ldr	r1, [pc, #388]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fd0:	4b5c      	ldr	r3, [pc, #368]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fde:	4959      	ldr	r1, [pc, #356]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ff2:	4b54      	ldr	r3, [pc, #336]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	4950      	ldr	r1, [pc, #320]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003014:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003022:	4948      	ldr	r1, [pc, #288]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003038:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800303c:	f023 0203 	bic.w	r2, r3, #3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003044:	493f      	ldr	r1, [pc, #252]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d028      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003058:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003066:	4937      	ldr	r1, [pc, #220]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003076:	d106      	bne.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4a31      	ldr	r2, [pc, #196]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800307e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003082:	60d3      	str	r3, [r2, #12]
 8003084:	e011      	b.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800308a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800308e:	d10c      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2101      	movs	r1, #1
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8a4 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d028      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c4:	491f      	ldr	r1, [pc, #124]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030d4:	d106      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d6:	4b1b      	ldr	r3, [pc, #108]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a1a      	ldr	r2, [pc, #104]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80030dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030e0:	60d3      	str	r3, [r2, #12]
 80030e2:	e011      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030ec:	d10c      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3304      	adds	r3, #4
 80030f2:	2101      	movs	r1, #1
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 f875 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 80030fa:	4603      	mov	r3, r0
 80030fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030fe:	7cfb      	ldrb	r3, [r7, #19]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003104:	7cfb      	ldrb	r3, [r7, #19]
 8003106:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02b      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003114:	4b0b      	ldr	r3, [pc, #44]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003122:	4908      	ldr	r1, [pc, #32]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003132:	d109      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003134:	4b03      	ldr	r3, [pc, #12]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4a02      	ldr	r2, [pc, #8]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800313a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313e:	60d3      	str	r3, [r2, #12]
 8003140:	e014      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800314c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003150:	d10c      	bne.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	3304      	adds	r3, #4
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f843 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003162:	7cfb      	ldrb	r3, [r7, #19]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003168:	7cfb      	ldrb	r3, [r7, #19]
 800316a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d01c      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003178:	4b19      	ldr	r3, [pc, #100]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800317e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	4916      	ldr	r1, [pc, #88]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003192:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003196:	d10c      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3304      	adds	r3, #4
 800319c:	2102      	movs	r1, #2
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 f820 	bl	80031e4 <RCCEx_PLLSAI1_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031be:	4b08      	ldr	r3, [pc, #32]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031cc:	4904      	ldr	r1, [pc, #16]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3718      	adds	r7, #24
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	40021000 	.word	0x40021000

080031e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031ee:	2300      	movs	r3, #0
 80031f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031f2:	4b74      	ldr	r3, [pc, #464]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d018      	beq.n	8003230 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80031fe:	4b71      	ldr	r3, [pc, #452]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0203 	and.w	r2, r3, #3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	429a      	cmp	r2, r3
 800320c:	d10d      	bne.n	800322a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
       ||
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003216:	4b6b      	ldr	r3, [pc, #428]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	091b      	lsrs	r3, r3, #4
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
       ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d047      	beq.n	80032ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	73fb      	strb	r3, [r7, #15]
 800322e:	e044      	b.n	80032ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d018      	beq.n	800326a <RCCEx_PLLSAI1_Config+0x86>
 8003238:	2b03      	cmp	r3, #3
 800323a:	d825      	bhi.n	8003288 <RCCEx_PLLSAI1_Config+0xa4>
 800323c:	2b01      	cmp	r3, #1
 800323e:	d002      	beq.n	8003246 <RCCEx_PLLSAI1_Config+0x62>
 8003240:	2b02      	cmp	r3, #2
 8003242:	d009      	beq.n	8003258 <RCCEx_PLLSAI1_Config+0x74>
 8003244:	e020      	b.n	8003288 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003246:	4b5f      	ldr	r3, [pc, #380]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d11d      	bne.n	800328e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003256:	e01a      	b.n	800328e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003258:	4b5a      	ldr	r3, [pc, #360]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003260:	2b00      	cmp	r3, #0
 8003262:	d116      	bne.n	8003292 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003268:	e013      	b.n	8003292 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800326a:	4b56      	ldr	r3, [pc, #344]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10f      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003276:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003286:	e006      	b.n	8003296 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
      break;
 800328c:	e004      	b.n	8003298 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003296:	bf00      	nop
    }

    if(status == HAL_OK)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d10d      	bne.n	80032ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800329e:	4b49      	ldr	r3, [pc, #292]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6819      	ldr	r1, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	430b      	orrs	r3, r1
 80032b4:	4943      	ldr	r1, [pc, #268]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d17c      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032c0:	4b40      	ldr	r3, [pc, #256]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a3f      	ldr	r2, [pc, #252]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fe fa0c 	bl	80016e8 <HAL_GetTick>
 80032d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032d2:	e009      	b.n	80032e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032d4:	f7fe fa08 	bl	80016e8 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d902      	bls.n	80032e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	73fb      	strb	r3, [r7, #15]
        break;
 80032e6:	e005      	b.n	80032f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032e8:	4b36      	ldr	r3, [pc, #216]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1ef      	bne.n	80032d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80032f4:	7bfb      	ldrb	r3, [r7, #15]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d15f      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d110      	bne.n	8003322 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003308:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	6892      	ldr	r2, [r2, #8]
 8003310:	0211      	lsls	r1, r2, #8
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68d2      	ldr	r2, [r2, #12]
 8003316:	06d2      	lsls	r2, r2, #27
 8003318:	430a      	orrs	r2, r1
 800331a:	492a      	ldr	r1, [pc, #168]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	610b      	str	r3, [r1, #16]
 8003320:	e027      	b.n	8003372 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d112      	bne.n	800334e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003328:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003330:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6892      	ldr	r2, [r2, #8]
 8003338:	0211      	lsls	r1, r2, #8
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6912      	ldr	r2, [r2, #16]
 800333e:	0852      	lsrs	r2, r2, #1
 8003340:	3a01      	subs	r2, #1
 8003342:	0552      	lsls	r2, r2, #21
 8003344:	430a      	orrs	r2, r1
 8003346:	491f      	ldr	r1, [pc, #124]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003348:	4313      	orrs	r3, r2
 800334a:	610b      	str	r3, [r1, #16]
 800334c:	e011      	b.n	8003372 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800334e:	4b1d      	ldr	r3, [pc, #116]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003356:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6892      	ldr	r2, [r2, #8]
 800335e:	0211      	lsls	r1, r2, #8
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	6952      	ldr	r2, [r2, #20]
 8003364:	0852      	lsrs	r2, r2, #1
 8003366:	3a01      	subs	r2, #1
 8003368:	0652      	lsls	r2, r2, #25
 800336a:	430a      	orrs	r2, r1
 800336c:	4915      	ldr	r1, [pc, #84]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800336e:	4313      	orrs	r3, r2
 8003370:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003372:	4b14      	ldr	r3, [pc, #80]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a13      	ldr	r2, [pc, #76]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003378:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800337c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337e:	f7fe f9b3 	bl	80016e8 <HAL_GetTick>
 8003382:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003384:	e009      	b.n	800339a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003386:	f7fe f9af 	bl	80016e8 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d902      	bls.n	800339a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	73fb      	strb	r3, [r7, #15]
          break;
 8003398:	e005      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800339a:	4b0a      	ldr	r3, [pc, #40]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ef      	beq.n	8003386 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d106      	bne.n	80033ba <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	4903      	ldr	r1, [pc, #12]	; (80033c4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000

080033c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e095      	b.n	8003506 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033ea:	d009      	beq.n	8003400 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	61da      	str	r2, [r3, #28]
 80033f2:	e005      	b.n	8003400 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b00      	cmp	r3, #0
 8003410:	d106      	bne.n	8003420 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7fd ff2a 	bl	8001274 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2202      	movs	r2, #2
 8003424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003436:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003440:	d902      	bls.n	8003448 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003442:	2300      	movs	r3, #0
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	e002      	b.n	800344e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800344c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003456:	d007      	beq.n	8003468 <HAL_SPI_Init+0xa0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003460:	d002      	beq.n	8003468 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f003 0302 	and.w	r3, r3, #2
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034aa:	ea42 0103 	orr.w	r1, r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	f003 0204 	and.w	r2, r3, #4
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034e4:	ea42 0103 	orr.w	r1, r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b088      	sub	sp, #32
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	603b      	str	r3, [r7, #0]
 800351a:	4613      	mov	r3, r2
 800351c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003528:	2b01      	cmp	r3, #1
 800352a:	d101      	bne.n	8003530 <HAL_SPI_Transmit+0x22>
 800352c:	2302      	movs	r3, #2
 800352e:	e158      	b.n	80037e2 <HAL_SPI_Transmit+0x2d4>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003538:	f7fe f8d6 	bl	80016e8 <HAL_GetTick>
 800353c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b01      	cmp	r3, #1
 800354c:	d002      	beq.n	8003554 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003552:	e13d      	b.n	80037d0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Transmit+0x52>
 800355a:	88fb      	ldrh	r3, [r7, #6]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d102      	bne.n	8003566 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003564:	e134      	b.n	80037d0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2203      	movs	r2, #3
 800356a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68ba      	ldr	r2, [r7, #8]
 8003578:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	88fa      	ldrh	r2, [r7, #6]
 800357e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	88fa      	ldrh	r2, [r7, #6]
 8003584:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035b0:	d10f      	bne.n	80035d2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035c0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	d007      	beq.n	80035f0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035ee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035f8:	d94b      	bls.n	8003692 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_SPI_Transmit+0xfa>
 8003602:	8afb      	ldrh	r3, [r7, #22]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d13e      	bne.n	8003686 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800362c:	e02b      	b.n	8003686 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689b      	ldr	r3, [r3, #8]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	d112      	bne.n	8003662 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003640:	881a      	ldrh	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	1c9a      	adds	r2, r3, #2
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003656:	b29b      	uxth	r3, r3
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003660:	e011      	b.n	8003686 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003662:	f7fe f841 	bl	80016e8 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d803      	bhi.n	800367a <HAL_SPI_Transmit+0x16c>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d102      	bne.n	8003680 <HAL_SPI_Transmit+0x172>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003684:	e0a4      	b.n	80037d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800368a:	b29b      	uxth	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1ce      	bne.n	800362e <HAL_SPI_Transmit+0x120>
 8003690:	e07c      	b.n	800378c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_SPI_Transmit+0x192>
 800369a:	8afb      	ldrh	r3, [r7, #22]
 800369c:	2b01      	cmp	r3, #1
 800369e:	d170      	bne.n	8003782 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d912      	bls.n	80036d0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ae:	881a      	ldrh	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	1c9a      	adds	r2, r3, #2
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	3b02      	subs	r3, #2
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80036ce:	e058      	b.n	8003782 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80036f6:	e044      	b.n	8003782 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b02      	cmp	r3, #2
 8003704:	d12b      	bne.n	800375e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d912      	bls.n	8003736 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800372a:	b29b      	uxth	r3, r3
 800372c:	3b02      	subs	r3, #2
 800372e:	b29a      	uxth	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003734:	e025      	b.n	8003782 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003748:	1c5a      	adds	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800375c:	e011      	b.n	8003782 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800375e:	f7fd ffc3 	bl	80016e8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d803      	bhi.n	8003776 <HAL_SPI_Transmit+0x268>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003774:	d102      	bne.n	800377c <HAL_SPI_Transmit+0x26e>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d102      	bne.n	8003782 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003780:	e026      	b.n	80037d0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1b5      	bne.n	80036f8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	6839      	ldr	r1, [r7, #0]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 fce3 	bl	800415c <SPI_EndRxTxTransaction>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d002      	beq.n	80037a2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2220      	movs	r2, #32
 80037a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d10a      	bne.n	80037c0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	613b      	str	r3, [r7, #16]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	77fb      	strb	r3, [r7, #31]
 80037cc:	e000      	b.n	80037d0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80037ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3720      	adds	r7, #32
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b088      	sub	sp, #32
 80037ee:	af02      	add	r7, sp, #8
 80037f0:	60f8      	str	r0, [r7, #12]
 80037f2:	60b9      	str	r1, [r7, #8]
 80037f4:	603b      	str	r3, [r7, #0]
 80037f6:	4613      	mov	r3, r2
 80037f8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037fa:	2300      	movs	r3, #0
 80037fc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003806:	d112      	bne.n	800382e <HAL_SPI_Receive+0x44>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10e      	bne.n	800382e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2204      	movs	r2, #4
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003818:	88fa      	ldrh	r2, [r7, #6]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	4613      	mov	r3, r2
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	68b9      	ldr	r1, [r7, #8]
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 f910 	bl	8003a4a <HAL_SPI_TransmitReceive>
 800382a:	4603      	mov	r3, r0
 800382c:	e109      	b.n	8003a42 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_SPI_Receive+0x52>
 8003838:	2302      	movs	r3, #2
 800383a:	e102      	b.n	8003a42 <HAL_SPI_Receive+0x258>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003844:	f7fd ff50 	bl	80016e8 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b01      	cmp	r3, #1
 8003854:	d002      	beq.n	800385c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003856:	2302      	movs	r3, #2
 8003858:	75fb      	strb	r3, [r7, #23]
    goto error;
 800385a:	e0e9      	b.n	8003a30 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d002      	beq.n	8003868 <HAL_SPI_Receive+0x7e>
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800386c:	e0e0      	b.n	8003a30 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2204      	movs	r2, #4
 8003872:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	88fa      	ldrh	r2, [r7, #6]
 8003886:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	88fa      	ldrh	r2, [r7, #6]
 800388e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2200      	movs	r2, #0
 800389c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038b8:	d908      	bls.n	80038cc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685a      	ldr	r2, [r3, #4]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	e007      	b.n	80038dc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038e4:	d10f      	bne.n	8003906 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003904:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003910:	2b40      	cmp	r3, #64	; 0x40
 8003912:	d007      	beq.n	8003924 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003922:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800392c:	d867      	bhi.n	80039fe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800392e:	e030      	b.n	8003992 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b01      	cmp	r3, #1
 800393c:	d117      	bne.n	800396e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f103 020c 	add.w	r2, r3, #12
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	7812      	ldrb	r2, [r2, #0]
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	1c5a      	adds	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800396c:	e011      	b.n	8003992 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800396e:	f7fd febb 	bl	80016e8 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	429a      	cmp	r2, r3
 800397c:	d803      	bhi.n	8003986 <HAL_SPI_Receive+0x19c>
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003984:	d102      	bne.n	800398c <HAL_SPI_Receive+0x1a2>
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d102      	bne.n	8003992 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003990:	e04e      	b.n	8003a30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1c8      	bne.n	8003930 <HAL_SPI_Receive+0x146>
 800399e:	e034      	b.n	8003a0a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	2b01      	cmp	r3, #1
 80039ac:	d115      	bne.n	80039da <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	b292      	uxth	r2, r2
 80039ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	3b01      	subs	r3, #1
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80039d8:	e011      	b.n	80039fe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039da:	f7fd fe85 	bl	80016e8 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d803      	bhi.n	80039f2 <HAL_SPI_Receive+0x208>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d102      	bne.n	80039f8 <HAL_SPI_Receive+0x20e>
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 80039fc:	e018      	b.n	8003a30 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ca      	bne.n	80039a0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fb4c 	bl	80040ac <SPI_EndRxTransaction>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	75fb      	strb	r3, [r7, #23]
 8003a2c:	e000      	b.n	8003a30 <HAL_SPI_Receive+0x246>
  }

error :
 8003a2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a4a:	b580      	push	{r7, lr}
 8003a4c:	b08a      	sub	sp, #40	; 0x28
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	60f8      	str	r0, [r7, #12]
 8003a52:	60b9      	str	r1, [r7, #8]
 8003a54:	607a      	str	r2, [r7, #4]
 8003a56:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x26>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e1fb      	b.n	8003e68 <HAL_SPI_TransmitReceive+0x41e>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a78:	f7fd fe36 	bl	80016e8 <HAL_GetTick>
 8003a7c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a84:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a94:	7efb      	ldrb	r3, [r7, #27]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d00e      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x6e>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa0:	d106      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_SPI_TransmitReceive+0x66>
 8003aaa:	7efb      	ldrb	r3, [r7, #27]
 8003aac:	2b04      	cmp	r3, #4
 8003aae:	d003      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ab6:	e1cd      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x80>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_SPI_TransmitReceive+0x80>
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003ad0:	e1c0      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d003      	beq.n	8003ae6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2205      	movs	r2, #5
 8003ae2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	887a      	ldrh	r2, [r7, #2]
 8003af6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	887a      	ldrh	r2, [r7, #2]
 8003afe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	887a      	ldrh	r2, [r7, #2]
 8003b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	887a      	ldrh	r2, [r7, #2]
 8003b12:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b28:	d802      	bhi.n	8003b30 <HAL_SPI_TransmitReceive+0xe6>
 8003b2a:	8a3b      	ldrh	r3, [r7, #16]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d908      	bls.n	8003b42 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b3e:	605a      	str	r2, [r3, #4]
 8003b40:	e007      	b.n	8003b52 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b50:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b40      	cmp	r3, #64	; 0x40
 8003b5e:	d007      	beq.n	8003b70 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b78:	d97c      	bls.n	8003c74 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x13e>
 8003b82:	8a7b      	ldrh	r3, [r7, #18]
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d169      	bne.n	8003c5c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8c:	881a      	ldrh	r2, [r3, #0]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	1c9a      	adds	r2, r3, #2
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bac:	e056      	b.n	8003c5c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0302 	and.w	r3, r3, #2
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d11b      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x1aa>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_SPI_TransmitReceive+0x1aa>
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	d113      	bne.n	8003bf4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd0:	881a      	ldrh	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bdc:	1c9a      	adds	r2, r3, #2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d11c      	bne.n	8003c3c <HAL_SPI_TransmitReceive+0x1f2>
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d016      	beq.n	8003c3c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c18:	b292      	uxth	r2, r2
 8003c1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c20:	1c9a      	adds	r2, r3, #2
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c3c:	f7fd fd54 	bl	80016e8 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d807      	bhi.n	8003c5c <HAL_SPI_TransmitReceive+0x212>
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c52:	d003      	beq.n	8003c5c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003c5a:	e0fb      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1a3      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x164>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d19d      	bne.n	8003bae <HAL_SPI_TransmitReceive+0x164>
 8003c72:	e0df      	b.n	8003e34 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_SPI_TransmitReceive+0x23a>
 8003c7c:	8a7b      	ldrh	r3, [r7, #18]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	f040 80cb 	bne.w	8003e1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d912      	bls.n	8003cb4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	881a      	ldrh	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9e:	1c9a      	adds	r2, r3, #2
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b02      	subs	r3, #2
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cb2:	e0b2      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	330c      	adds	r3, #12
 8003cbe:	7812      	ldrb	r2, [r2, #0]
 8003cc0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	1c5a      	adds	r2, r3, #1
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cda:	e09e      	b.n	8003e1a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d134      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x30a>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d02f      	beq.n	8003d54 <HAL_SPI_TransmitReceive+0x30a>
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d12c      	bne.n	8003d54 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d912      	bls.n	8003d2a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d08:	881a      	ldrh	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d14:	1c9a      	adds	r2, r3, #2
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b02      	subs	r3, #2
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d28:	e012      	b.n	8003d50 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	7812      	ldrb	r2, [r2, #0]
 8003d36:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d3c:	1c5a      	adds	r2, r3, #1
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d46:	b29b      	uxth	r3, r3
 8003d48:	3b01      	subs	r3, #1
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d148      	bne.n	8003df4 <HAL_SPI_TransmitReceive+0x3aa>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d042      	beq.n	8003df4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d923      	bls.n	8003dc2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d84:	b292      	uxth	r2, r2
 8003d86:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	1c9a      	adds	r2, r3, #2
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b02      	subs	r3, #2
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d81f      	bhi.n	8003df0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	e016      	b.n	8003df0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f103 020c 	add.w	r2, r3, #12
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	7812      	ldrb	r2, [r2, #0]
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	3b01      	subs	r3, #1
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003df0:	2301      	movs	r3, #1
 8003df2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003df4:	f7fd fc78 	bl	80016e8 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d803      	bhi.n	8003e0c <HAL_SPI_TransmitReceive+0x3c2>
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_TransmitReceive+0x3c8>
 8003e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d103      	bne.n	8003e1a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003e18:	e01c      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f47f af5b 	bne.w	8003cdc <HAL_SPI_TransmitReceive+0x292>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f47f af54 	bne.w	8003cdc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e34:	69fa      	ldr	r2, [r7, #28]
 8003e36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f98f 	bl	800415c <SPI_EndRxTxTransaction>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d006      	beq.n	8003e52 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2220      	movs	r2, #32
 8003e4e:	661a      	str	r2, [r3, #96]	; 0x60
 8003e50:	e000      	b.n	8003e54 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003e52:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b088      	sub	sp, #32
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	603b      	str	r3, [r7, #0]
 8003e7c:	4613      	mov	r3, r2
 8003e7e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e80:	f7fd fc32 	bl	80016e8 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e90:	f7fd fc2a 	bl	80016e8 <HAL_GetTick>
 8003e94:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	015b      	lsls	r3, r3, #5
 8003e9c:	0d1b      	lsrs	r3, r3, #20
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	fb02 f303 	mul.w	r3, r2, r3
 8003ea4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ea6:	e054      	b.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d050      	beq.n	8003f52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003eb0:	f7fd fc1a 	bl	80016e8 <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	d902      	bls.n	8003ec6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d13d      	bne.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ed4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ede:	d111      	bne.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee8:	d004      	beq.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ef2:	d107      	bne.n	8003f04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f0c:	d10f      	bne.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1c:	601a      	str	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e017      	b.n	8003f72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d101      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	689a      	ldr	r2, [r3, #8]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	bf0c      	ite	eq
 8003f62:	2301      	moveq	r3, #1
 8003f64:	2300      	movne	r3, #0
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	79fb      	ldrb	r3, [r7, #7]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d19b      	bne.n	8003ea8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000000 	.word	0x20000000

08003f80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f92:	f7fd fba9 	bl	80016e8 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9a:	1a9b      	subs	r3, r3, r2
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003fa2:	f7fd fba1 	bl	80016e8 <HAL_GetTick>
 8003fa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fb0:	4b3d      	ldr	r3, [pc, #244]	; (80040a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	00da      	lsls	r2, r3, #3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	0d1b      	lsrs	r3, r3, #20
 8003fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc2:	fb02 f303 	mul.w	r3, r2, r3
 8003fc6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fc8:	e060      	b.n	800408c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fd0:	d107      	bne.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d104      	bne.n	8003fe2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fe0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d050      	beq.n	800408c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fea:	f7fd fb7d 	bl	80016e8 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d902      	bls.n	8004000 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d13d      	bne.n	800407c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800400e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004018:	d111      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004022:	d004      	beq.n	800402e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800402c:	d107      	bne.n	800403e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800403c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004046:	d10f      	bne.n	8004068 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004066:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e010      	b.n	800409e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d101      	bne.n	8004086 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	3b01      	subs	r3, #1
 800408a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d196      	bne.n	8003fca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800409c:	2300      	movs	r3, #0
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3728      	adds	r7, #40	; 0x28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000000 	.word	0x20000000

080040ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c0:	d111      	bne.n	80040e6 <SPI_EndRxTransaction+0x3a>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ca:	d004      	beq.n	80040d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d107      	bne.n	80040e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2180      	movs	r1, #128	; 0x80
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff febd 	bl	8003e70 <SPI_WaitFlagStateUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004100:	f043 0220 	orr.w	r2, r3, #32
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e023      	b.n	8004154 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004114:	d11d      	bne.n	8004152 <SPI_EndRxTransaction+0xa6>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800411e:	d004      	beq.n	800412a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004128:	d113      	bne.n	8004152 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff ff22 	bl	8003f80 <SPI_WaitFifoStateUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d007      	beq.n	8004152 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e000      	b.n	8004154 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af02      	add	r7, sp, #8
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004174:	68f8      	ldr	r0, [r7, #12]
 8004176:	f7ff ff03 	bl	8003f80 <SPI_WaitFifoStateUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004184:	f043 0220 	orr.w	r2, r3, #32
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e027      	b.n	80041e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	2200      	movs	r2, #0
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f7ff fe68 	bl	8003e70 <SPI_WaitFlagStateUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d007      	beq.n	80041b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041aa:	f043 0220 	orr.w	r2, r3, #32
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e014      	b.n	80041e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	2200      	movs	r2, #0
 80041be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fedc 	bl	8003f80 <SPI_WaitFifoStateUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d2:	f043 0220 	orr.w	r2, r3, #32
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e000      	b.n	80041e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3710      	adds	r7, #16
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e040      	b.n	800427c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d106      	bne.n	8004210 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f7fd f874 	bl	80012f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2224      	movs	r2, #36	; 0x24
 8004214:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 0201 	bic.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f8c0 	bl	80043ac <UART_SetConfig>
 800422c:	4603      	mov	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e022      	b.n	800427c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 fb3a 	bl	80048b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004252:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689a      	ldr	r2, [r3, #8]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004262:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0201 	orr.w	r2, r2, #1
 8004272:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fbc1 	bl	80049fc <UART_CheckIdleState>
 800427a:	4603      	mov	r3, r0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b08a      	sub	sp, #40	; 0x28
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004298:	2b20      	cmp	r3, #32
 800429a:	f040 8082 	bne.w	80043a2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <HAL_UART_Transmit+0x26>
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e07a      	b.n	80043a4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_UART_Transmit+0x38>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e073      	b.n	80043a4 <HAL_UART_Transmit+0x120>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2221      	movs	r2, #33	; 0x21
 80042d0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042d2:	f7fd fa09 	bl	80016e8 <HAL_GetTick>
 80042d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	88fa      	ldrh	r2, [r7, #6]
 80042dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	88fa      	ldrh	r2, [r7, #6]
 80042e4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f0:	d108      	bne.n	8004304 <HAL_UART_Transmit+0x80>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d104      	bne.n	8004304 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	61bb      	str	r3, [r7, #24]
 8004302:	e003      	b.n	800430c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004308:	2300      	movs	r3, #0
 800430a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004314:	e02d      	b.n	8004372 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	2200      	movs	r2, #0
 800431e:	2180      	movs	r1, #128	; 0x80
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fbb4 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e039      	b.n	80043a4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10b      	bne.n	800434e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	881a      	ldrh	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004342:	b292      	uxth	r2, r2
 8004344:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	3302      	adds	r3, #2
 800434a:	61bb      	str	r3, [r7, #24]
 800434c:	e008      	b.n	8004360 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	781a      	ldrb	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	b292      	uxth	r2, r2
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3301      	adds	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004366:	b29b      	uxth	r3, r3
 8004368:	3b01      	subs	r3, #1
 800436a:	b29a      	uxth	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1cb      	bne.n	8004316 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	2140      	movs	r1, #64	; 0x40
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fb80 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e005      	b.n	80043a4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2220      	movs	r2, #32
 800439c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800439e:	2300      	movs	r3, #0
 80043a0:	e000      	b.n	80043a4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80043a2:	2302      	movs	r3, #2
  }
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3720      	adds	r7, #32
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043b0:	b08a      	sub	sp, #40	; 0x28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	431a      	orrs	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4ba5      	ldr	r3, [pc, #660]	; (8004670 <UART_SetConfig+0x2c4>)
 80043dc:	4013      	ands	r3, r2
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e4:	430b      	orrs	r3, r1
 80043e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a9a      	ldr	r2, [pc, #616]	; (8004674 <UART_SetConfig+0x2c8>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d004      	beq.n	8004418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6a1b      	ldr	r3, [r3, #32]
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	4313      	orrs	r3, r2
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	430a      	orrs	r2, r1
 800442a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a91      	ldr	r2, [pc, #580]	; (8004678 <UART_SetConfig+0x2cc>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d126      	bne.n	8004484 <UART_SetConfig+0xd8>
 8004436:	4b91      	ldr	r3, [pc, #580]	; (800467c <UART_SetConfig+0x2d0>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b03      	cmp	r3, #3
 8004442:	d81b      	bhi.n	800447c <UART_SetConfig+0xd0>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0xa0>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	0800445d 	.word	0x0800445d
 8004450:	0800446d 	.word	0x0800446d
 8004454:	08004465 	.word	0x08004465
 8004458:	08004475 	.word	0x08004475
 800445c:	2301      	movs	r3, #1
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004462:	e0d6      	b.n	8004612 <UART_SetConfig+0x266>
 8004464:	2302      	movs	r3, #2
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e0d2      	b.n	8004612 <UART_SetConfig+0x266>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e0ce      	b.n	8004612 <UART_SetConfig+0x266>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e0ca      	b.n	8004612 <UART_SetConfig+0x266>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e0c6      	b.n	8004612 <UART_SetConfig+0x266>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a7d      	ldr	r2, [pc, #500]	; (8004680 <UART_SetConfig+0x2d4>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d138      	bne.n	8004500 <UART_SetConfig+0x154>
 800448e:	4b7b      	ldr	r3, [pc, #492]	; (800467c <UART_SetConfig+0x2d0>)
 8004490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004494:	f003 030c 	and.w	r3, r3, #12
 8004498:	2b0c      	cmp	r3, #12
 800449a:	d82d      	bhi.n	80044f8 <UART_SetConfig+0x14c>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0xf8>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044d9 	.word	0x080044d9
 80044a8:	080044f9 	.word	0x080044f9
 80044ac:	080044f9 	.word	0x080044f9
 80044b0:	080044f9 	.word	0x080044f9
 80044b4:	080044e9 	.word	0x080044e9
 80044b8:	080044f9 	.word	0x080044f9
 80044bc:	080044f9 	.word	0x080044f9
 80044c0:	080044f9 	.word	0x080044f9
 80044c4:	080044e1 	.word	0x080044e1
 80044c8:	080044f9 	.word	0x080044f9
 80044cc:	080044f9 	.word	0x080044f9
 80044d0:	080044f9 	.word	0x080044f9
 80044d4:	080044f1 	.word	0x080044f1
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044de:	e098      	b.n	8004612 <UART_SetConfig+0x266>
 80044e0:	2302      	movs	r3, #2
 80044e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044e6:	e094      	b.n	8004612 <UART_SetConfig+0x266>
 80044e8:	2304      	movs	r3, #4
 80044ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ee:	e090      	b.n	8004612 <UART_SetConfig+0x266>
 80044f0:	2308      	movs	r3, #8
 80044f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044f6:	e08c      	b.n	8004612 <UART_SetConfig+0x266>
 80044f8:	2310      	movs	r3, #16
 80044fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044fe:	e088      	b.n	8004612 <UART_SetConfig+0x266>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5f      	ldr	r2, [pc, #380]	; (8004684 <UART_SetConfig+0x2d8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d125      	bne.n	8004556 <UART_SetConfig+0x1aa>
 800450a:	4b5c      	ldr	r3, [pc, #368]	; (800467c <UART_SetConfig+0x2d0>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004514:	2b30      	cmp	r3, #48	; 0x30
 8004516:	d016      	beq.n	8004546 <UART_SetConfig+0x19a>
 8004518:	2b30      	cmp	r3, #48	; 0x30
 800451a:	d818      	bhi.n	800454e <UART_SetConfig+0x1a2>
 800451c:	2b20      	cmp	r3, #32
 800451e:	d00a      	beq.n	8004536 <UART_SetConfig+0x18a>
 8004520:	2b20      	cmp	r3, #32
 8004522:	d814      	bhi.n	800454e <UART_SetConfig+0x1a2>
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <UART_SetConfig+0x182>
 8004528:	2b10      	cmp	r3, #16
 800452a:	d008      	beq.n	800453e <UART_SetConfig+0x192>
 800452c:	e00f      	b.n	800454e <UART_SetConfig+0x1a2>
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004534:	e06d      	b.n	8004612 <UART_SetConfig+0x266>
 8004536:	2302      	movs	r3, #2
 8004538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800453c:	e069      	b.n	8004612 <UART_SetConfig+0x266>
 800453e:	2304      	movs	r3, #4
 8004540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004544:	e065      	b.n	8004612 <UART_SetConfig+0x266>
 8004546:	2308      	movs	r3, #8
 8004548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800454c:	e061      	b.n	8004612 <UART_SetConfig+0x266>
 800454e:	2310      	movs	r3, #16
 8004550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004554:	e05d      	b.n	8004612 <UART_SetConfig+0x266>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a4b      	ldr	r2, [pc, #300]	; (8004688 <UART_SetConfig+0x2dc>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d125      	bne.n	80045ac <UART_SetConfig+0x200>
 8004560:	4b46      	ldr	r3, [pc, #280]	; (800467c <UART_SetConfig+0x2d0>)
 8004562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004566:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800456a:	2bc0      	cmp	r3, #192	; 0xc0
 800456c:	d016      	beq.n	800459c <UART_SetConfig+0x1f0>
 800456e:	2bc0      	cmp	r3, #192	; 0xc0
 8004570:	d818      	bhi.n	80045a4 <UART_SetConfig+0x1f8>
 8004572:	2b80      	cmp	r3, #128	; 0x80
 8004574:	d00a      	beq.n	800458c <UART_SetConfig+0x1e0>
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d814      	bhi.n	80045a4 <UART_SetConfig+0x1f8>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <UART_SetConfig+0x1d8>
 800457e:	2b40      	cmp	r3, #64	; 0x40
 8004580:	d008      	beq.n	8004594 <UART_SetConfig+0x1e8>
 8004582:	e00f      	b.n	80045a4 <UART_SetConfig+0x1f8>
 8004584:	2300      	movs	r3, #0
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800458a:	e042      	b.n	8004612 <UART_SetConfig+0x266>
 800458c:	2302      	movs	r3, #2
 800458e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004592:	e03e      	b.n	8004612 <UART_SetConfig+0x266>
 8004594:	2304      	movs	r3, #4
 8004596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800459a:	e03a      	b.n	8004612 <UART_SetConfig+0x266>
 800459c:	2308      	movs	r3, #8
 800459e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045a2:	e036      	b.n	8004612 <UART_SetConfig+0x266>
 80045a4:	2310      	movs	r3, #16
 80045a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045aa:	e032      	b.n	8004612 <UART_SetConfig+0x266>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a30      	ldr	r2, [pc, #192]	; (8004674 <UART_SetConfig+0x2c8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d12a      	bne.n	800460c <UART_SetConfig+0x260>
 80045b6:	4b31      	ldr	r3, [pc, #196]	; (800467c <UART_SetConfig+0x2d0>)
 80045b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045c4:	d01a      	beq.n	80045fc <UART_SetConfig+0x250>
 80045c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045ca:	d81b      	bhi.n	8004604 <UART_SetConfig+0x258>
 80045cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d0:	d00c      	beq.n	80045ec <UART_SetConfig+0x240>
 80045d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045d6:	d815      	bhi.n	8004604 <UART_SetConfig+0x258>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <UART_SetConfig+0x238>
 80045dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e0:	d008      	beq.n	80045f4 <UART_SetConfig+0x248>
 80045e2:	e00f      	b.n	8004604 <UART_SetConfig+0x258>
 80045e4:	2300      	movs	r3, #0
 80045e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045ea:	e012      	b.n	8004612 <UART_SetConfig+0x266>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045f2:	e00e      	b.n	8004612 <UART_SetConfig+0x266>
 80045f4:	2304      	movs	r3, #4
 80045f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80045fa:	e00a      	b.n	8004612 <UART_SetConfig+0x266>
 80045fc:	2308      	movs	r3, #8
 80045fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004602:	e006      	b.n	8004612 <UART_SetConfig+0x266>
 8004604:	2310      	movs	r3, #16
 8004606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800460a:	e002      	b.n	8004612 <UART_SetConfig+0x266>
 800460c:	2310      	movs	r3, #16
 800460e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a17      	ldr	r2, [pc, #92]	; (8004674 <UART_SetConfig+0x2c8>)
 8004618:	4293      	cmp	r3, r2
 800461a:	f040 808b 	bne.w	8004734 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800461e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004622:	2b08      	cmp	r3, #8
 8004624:	d834      	bhi.n	8004690 <UART_SetConfig+0x2e4>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <UART_SetConfig+0x280>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	08004651 	.word	0x08004651
 8004630:	08004691 	.word	0x08004691
 8004634:	08004659 	.word	0x08004659
 8004638:	08004691 	.word	0x08004691
 800463c:	0800465f 	.word	0x0800465f
 8004640:	08004691 	.word	0x08004691
 8004644:	08004691 	.word	0x08004691
 8004648:	08004691 	.word	0x08004691
 800464c:	08004667 	.word	0x08004667
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004650:	f7fe fad0 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8004654:	61f8      	str	r0, [r7, #28]
        break;
 8004656:	e021      	b.n	800469c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <UART_SetConfig+0x2e0>)
 800465a:	61fb      	str	r3, [r7, #28]
        break;
 800465c:	e01e      	b.n	800469c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465e:	f7fe fa31 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8004662:	61f8      	str	r0, [r7, #28]
        break;
 8004664:	e01a      	b.n	800469c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800466a:	61fb      	str	r3, [r7, #28]
        break;
 800466c:	e016      	b.n	800469c <UART_SetConfig+0x2f0>
 800466e:	bf00      	nop
 8004670:	efff69f3 	.word	0xefff69f3
 8004674:	40008000 	.word	0x40008000
 8004678:	40013800 	.word	0x40013800
 800467c:	40021000 	.word	0x40021000
 8004680:	40004400 	.word	0x40004400
 8004684:	40004800 	.word	0x40004800
 8004688:	40004c00 	.word	0x40004c00
 800468c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004690:	2300      	movs	r3, #0
 8004692:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800469a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 80fa 	beq.w	8004898 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	685a      	ldr	r2, [r3, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4413      	add	r3, r2
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d305      	bcc.n	80046c0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ba:	69fa      	ldr	r2, [r7, #28]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d903      	bls.n	80046c8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80046c6:	e0e7      	b.n	8004898 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	2200      	movs	r2, #0
 80046cc:	461c      	mov	r4, r3
 80046ce:	4615      	mov	r5, r2
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 0300 	mov.w	r3, #0
 80046d8:	022b      	lsls	r3, r5, #8
 80046da:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80046de:	0222      	lsls	r2, r4, #8
 80046e0:	68f9      	ldr	r1, [r7, #12]
 80046e2:	6849      	ldr	r1, [r1, #4]
 80046e4:	0849      	lsrs	r1, r1, #1
 80046e6:	2000      	movs	r0, #0
 80046e8:	4688      	mov	r8, r1
 80046ea:	4681      	mov	r9, r0
 80046ec:	eb12 0a08 	adds.w	sl, r2, r8
 80046f0:	eb43 0b09 	adc.w	fp, r3, r9
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	607a      	str	r2, [r7, #4]
 80046fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004702:	4650      	mov	r0, sl
 8004704:	4659      	mov	r1, fp
 8004706:	f7fb fdbb 	bl	8000280 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4613      	mov	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004718:	d308      	bcc.n	800472c <UART_SetConfig+0x380>
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004720:	d204      	bcs.n	800472c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	e0b5      	b.n	8004898 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004732:	e0b1      	b.n	8004898 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473c:	d15d      	bne.n	80047fa <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800473e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004742:	2b08      	cmp	r3, #8
 8004744:	d827      	bhi.n	8004796 <UART_SetConfig+0x3ea>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x3a0>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	08004771 	.word	0x08004771
 8004750:	08004779 	.word	0x08004779
 8004754:	08004781 	.word	0x08004781
 8004758:	08004797 	.word	0x08004797
 800475c:	08004787 	.word	0x08004787
 8004760:	08004797 	.word	0x08004797
 8004764:	08004797 	.word	0x08004797
 8004768:	08004797 	.word	0x08004797
 800476c:	0800478f 	.word	0x0800478f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004770:	f7fe fa40 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8004774:	61f8      	str	r0, [r7, #28]
        break;
 8004776:	e014      	b.n	80047a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004778:	f7fe fa52 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 800477c:	61f8      	str	r0, [r7, #28]
        break;
 800477e:	e010      	b.n	80047a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004780:	4b4c      	ldr	r3, [pc, #304]	; (80048b4 <UART_SetConfig+0x508>)
 8004782:	61fb      	str	r3, [r7, #28]
        break;
 8004784:	e00d      	b.n	80047a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004786:	f7fe f99d 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 800478a:	61f8      	str	r0, [r7, #28]
        break;
 800478c:	e009      	b.n	80047a2 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004792:	61fb      	str	r3, [r7, #28]
        break;
 8004794:	e005      	b.n	80047a2 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80047a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d077      	beq.n	8004898 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	005a      	lsls	r2, r3, #1
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	085b      	lsrs	r3, r3, #1
 80047b2:	441a      	add	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b0f      	cmp	r3, #15
 80047c2:	d916      	bls.n	80047f2 <UART_SetConfig+0x446>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d212      	bcs.n	80047f2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f023 030f 	bic.w	r3, r3, #15
 80047d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	f003 0307 	and.w	r3, r3, #7
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	8afb      	ldrh	r3, [r7, #22]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	8afa      	ldrh	r2, [r7, #22]
 80047ee:	60da      	str	r2, [r3, #12]
 80047f0:	e052      	b.n	8004898 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80047f8:	e04e      	b.n	8004898 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d827      	bhi.n	8004852 <UART_SetConfig+0x4a6>
 8004802:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x45c>)
 8004804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	08004853 	.word	0x08004853
 8004818:	08004843 	.word	0x08004843
 800481c:	08004853 	.word	0x08004853
 8004820:	08004853 	.word	0x08004853
 8004824:	08004853 	.word	0x08004853
 8004828:	0800484b 	.word	0x0800484b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7fe f9e2 	bl	8002bf4 <HAL_RCC_GetPCLK1Freq>
 8004830:	61f8      	str	r0, [r7, #28]
        break;
 8004832:	e014      	b.n	800485e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004834:	f7fe f9f4 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8004838:	61f8      	str	r0, [r7, #28]
        break;
 800483a:	e010      	b.n	800485e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <UART_SetConfig+0x508>)
 800483e:	61fb      	str	r3, [r7, #28]
        break;
 8004840:	e00d      	b.n	800485e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004842:	f7fe f93f 	bl	8002ac4 <HAL_RCC_GetSysClockFreq>
 8004846:	61f8      	str	r0, [r7, #28]
        break;
 8004848:	e009      	b.n	800485e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484e:	61fb      	str	r3, [r7, #28]
        break;
 8004850:	e005      	b.n	800485e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800485c:	bf00      	nop
    }

    if (pclk != 0U)
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d019      	beq.n	8004898 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	085a      	lsrs	r2, r3, #1
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	441a      	add	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	fbb2 f3f3 	udiv	r3, r2, r3
 8004876:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	2b0f      	cmp	r3, #15
 800487c:	d909      	bls.n	8004892 <UART_SetConfig+0x4e6>
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004884:	d205      	bcs.n	8004892 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	60da      	str	r2, [r3, #12]
 8004890:	e002      	b.n	8004898 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048a4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	; 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048b2:	bf00      	nop
 80048b4:	00f42400 	.word	0x00f42400

080048b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	f003 0310 	and.w	r3, r3, #16
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d01a      	beq.n	80049ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b6:	d10a      	bne.n	80049ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	430a      	orrs	r2, r1
 80049cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	430a      	orrs	r2, r1
 80049ee:	605a      	str	r2, [r3, #4]
  }
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af02      	add	r7, sp, #8
 8004a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a0c:	f7fc fe6c 	bl	80016e8 <HAL_GetTick>
 8004a10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d10e      	bne.n	8004a3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f82d 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e023      	b.n	8004a86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d10e      	bne.n	8004a6a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f817 	bl	8004a8e <UART_WaitOnFlagUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e00d      	b.n	8004a86 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2220      	movs	r2, #32
 8004a6e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2220      	movs	r2, #32
 8004a74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3710      	adds	r7, #16
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b09c      	sub	sp, #112	; 0x70
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	603b      	str	r3, [r7, #0]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a9e:	e0a5      	b.n	8004bec <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa6:	f000 80a1 	beq.w	8004bec <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fc fe1d 	bl	80016e8 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004aba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d13e      	bne.n	8004b3e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac8:	e853 3f00 	ldrex	r3, [r3]
 8004acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ad4:	667b      	str	r3, [r7, #100]	; 0x64
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004ae6:	e841 2300 	strex	r3, r2, [r1]
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004aec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1e6      	bne.n	8004ac0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	3308      	adds	r3, #8
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	e853 3f00 	ldrex	r3, [r3]
 8004b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b04:	f023 0301 	bic.w	r3, r3, #1
 8004b08:	663b      	str	r3, [r7, #96]	; 0x60
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b12:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b14:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b1a:	e841 2300 	strex	r3, r2, [r1]
 8004b1e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1e5      	bne.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2220      	movs	r2, #32
 8004b2a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e067      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d04f      	beq.n	8004bec <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5a:	d147      	bne.n	8004bec <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b64:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	461a      	mov	r2, r3
 8004b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
 8004b86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e6      	bne.n	8004b66 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3308      	adds	r3, #8
 8004bb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bb8:	623a      	str	r2, [r7, #32]
 8004bba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	69f9      	ldr	r1, [r7, #28]
 8004bbe:	6a3a      	ldr	r2, [r7, #32]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2220      	movs	r2, #32
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e010      	b.n	8004c0e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	69da      	ldr	r2, [r3, #28]
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	bf0c      	ite	eq
 8004bfc:	2301      	moveq	r3, #1
 8004bfe:	2300      	movne	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	461a      	mov	r2, r3
 8004c04:	79fb      	ldrb	r3, [r7, #7]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	f43f af4a 	beq.w	8004aa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3770      	adds	r7, #112	; 0x70
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <__assert_func>:
 8004c18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <__assert_func+0x2c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4605      	mov	r5, r0
 8004c24:	68d8      	ldr	r0, [r3, #12]
 8004c26:	b14c      	cbz	r4, 8004c3c <__assert_func+0x24>
 8004c28:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <__assert_func+0x30>)
 8004c2a:	9100      	str	r1, [sp, #0]
 8004c2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004c30:	4906      	ldr	r1, [pc, #24]	; (8004c4c <__assert_func+0x34>)
 8004c32:	462b      	mov	r3, r5
 8004c34:	f000 f814 	bl	8004c60 <fiprintf>
 8004c38:	f000 fc16 	bl	8005468 <abort>
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <__assert_func+0x38>)
 8004c3e:	461c      	mov	r4, r3
 8004c40:	e7f3      	b.n	8004c2a <__assert_func+0x12>
 8004c42:	bf00      	nop
 8004c44:	2000000c 	.word	0x2000000c
 8004c48:	08005f40 	.word	0x08005f40
 8004c4c:	08005f4d 	.word	0x08005f4d
 8004c50:	08005f7b 	.word	0x08005f7b

08004c54 <__errno>:
 8004c54:	4b01      	ldr	r3, [pc, #4]	; (8004c5c <__errno+0x8>)
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <fiprintf>:
 8004c60:	b40e      	push	{r1, r2, r3}
 8004c62:	b503      	push	{r0, r1, lr}
 8004c64:	4601      	mov	r1, r0
 8004c66:	ab03      	add	r3, sp, #12
 8004c68:	4805      	ldr	r0, [pc, #20]	; (8004c80 <fiprintf+0x20>)
 8004c6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c6e:	6800      	ldr	r0, [r0, #0]
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	f000 f85d 	bl	8004d30 <_vfiprintf_r>
 8004c76:	b002      	add	sp, #8
 8004c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c7c:	b003      	add	sp, #12
 8004c7e:	4770      	bx	lr
 8004c80:	2000000c 	.word	0x2000000c

08004c84 <__libc_init_array>:
 8004c84:	b570      	push	{r4, r5, r6, lr}
 8004c86:	4d0d      	ldr	r5, [pc, #52]	; (8004cbc <__libc_init_array+0x38>)
 8004c88:	4c0d      	ldr	r4, [pc, #52]	; (8004cc0 <__libc_init_array+0x3c>)
 8004c8a:	1b64      	subs	r4, r4, r5
 8004c8c:	10a4      	asrs	r4, r4, #2
 8004c8e:	2600      	movs	r6, #0
 8004c90:	42a6      	cmp	r6, r4
 8004c92:	d109      	bne.n	8004ca8 <__libc_init_array+0x24>
 8004c94:	4d0b      	ldr	r5, [pc, #44]	; (8004cc4 <__libc_init_array+0x40>)
 8004c96:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <__libc_init_array+0x44>)
 8004c98:	f000 fffa 	bl	8005c90 <_init>
 8004c9c:	1b64      	subs	r4, r4, r5
 8004c9e:	10a4      	asrs	r4, r4, #2
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	42a6      	cmp	r6, r4
 8004ca4:	d105      	bne.n	8004cb2 <__libc_init_array+0x2e>
 8004ca6:	bd70      	pop	{r4, r5, r6, pc}
 8004ca8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cac:	4798      	blx	r3
 8004cae:	3601      	adds	r6, #1
 8004cb0:	e7ee      	b.n	8004c90 <__libc_init_array+0xc>
 8004cb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb6:	4798      	blx	r3
 8004cb8:	3601      	adds	r6, #1
 8004cba:	e7f2      	b.n	8004ca2 <__libc_init_array+0x1e>
 8004cbc:	0800601c 	.word	0x0800601c
 8004cc0:	0800601c 	.word	0x0800601c
 8004cc4:	0800601c 	.word	0x0800601c
 8004cc8:	08006020 	.word	0x08006020

08004ccc <memset>:
 8004ccc:	4402      	add	r2, r0
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d100      	bne.n	8004cd6 <memset+0xa>
 8004cd4:	4770      	bx	lr
 8004cd6:	f803 1b01 	strb.w	r1, [r3], #1
 8004cda:	e7f9      	b.n	8004cd0 <memset+0x4>

08004cdc <__sfputc_r>:
 8004cdc:	6893      	ldr	r3, [r2, #8]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	b410      	push	{r4}
 8004ce4:	6093      	str	r3, [r2, #8]
 8004ce6:	da08      	bge.n	8004cfa <__sfputc_r+0x1e>
 8004ce8:	6994      	ldr	r4, [r2, #24]
 8004cea:	42a3      	cmp	r3, r4
 8004cec:	db01      	blt.n	8004cf2 <__sfputc_r+0x16>
 8004cee:	290a      	cmp	r1, #10
 8004cf0:	d103      	bne.n	8004cfa <__sfputc_r+0x1e>
 8004cf2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cf6:	f000 baf7 	b.w	80052e8 <__swbuf_r>
 8004cfa:	6813      	ldr	r3, [r2, #0]
 8004cfc:	1c58      	adds	r0, r3, #1
 8004cfe:	6010      	str	r0, [r2, #0]
 8004d00:	7019      	strb	r1, [r3, #0]
 8004d02:	4608      	mov	r0, r1
 8004d04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <__sfputs_r>:
 8004d0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d0c:	4606      	mov	r6, r0
 8004d0e:	460f      	mov	r7, r1
 8004d10:	4614      	mov	r4, r2
 8004d12:	18d5      	adds	r5, r2, r3
 8004d14:	42ac      	cmp	r4, r5
 8004d16:	d101      	bne.n	8004d1c <__sfputs_r+0x12>
 8004d18:	2000      	movs	r0, #0
 8004d1a:	e007      	b.n	8004d2c <__sfputs_r+0x22>
 8004d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d20:	463a      	mov	r2, r7
 8004d22:	4630      	mov	r0, r6
 8004d24:	f7ff ffda 	bl	8004cdc <__sfputc_r>
 8004d28:	1c43      	adds	r3, r0, #1
 8004d2a:	d1f3      	bne.n	8004d14 <__sfputs_r+0xa>
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d30 <_vfiprintf_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	460d      	mov	r5, r1
 8004d36:	b09d      	sub	sp, #116	; 0x74
 8004d38:	4614      	mov	r4, r2
 8004d3a:	4698      	mov	r8, r3
 8004d3c:	4606      	mov	r6, r0
 8004d3e:	b118      	cbz	r0, 8004d48 <_vfiprintf_r+0x18>
 8004d40:	6983      	ldr	r3, [r0, #24]
 8004d42:	b90b      	cbnz	r3, 8004d48 <_vfiprintf_r+0x18>
 8004d44:	f000 fcb2 	bl	80056ac <__sinit>
 8004d48:	4b89      	ldr	r3, [pc, #548]	; (8004f70 <_vfiprintf_r+0x240>)
 8004d4a:	429d      	cmp	r5, r3
 8004d4c:	d11b      	bne.n	8004d86 <_vfiprintf_r+0x56>
 8004d4e:	6875      	ldr	r5, [r6, #4]
 8004d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d52:	07d9      	lsls	r1, r3, #31
 8004d54:	d405      	bmi.n	8004d62 <_vfiprintf_r+0x32>
 8004d56:	89ab      	ldrh	r3, [r5, #12]
 8004d58:	059a      	lsls	r2, r3, #22
 8004d5a:	d402      	bmi.n	8004d62 <_vfiprintf_r+0x32>
 8004d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d5e:	f000 fd43 	bl	80057e8 <__retarget_lock_acquire_recursive>
 8004d62:	89ab      	ldrh	r3, [r5, #12]
 8004d64:	071b      	lsls	r3, r3, #28
 8004d66:	d501      	bpl.n	8004d6c <_vfiprintf_r+0x3c>
 8004d68:	692b      	ldr	r3, [r5, #16]
 8004d6a:	b9eb      	cbnz	r3, 8004da8 <_vfiprintf_r+0x78>
 8004d6c:	4629      	mov	r1, r5
 8004d6e:	4630      	mov	r0, r6
 8004d70:	f000 fb0c 	bl	800538c <__swsetup_r>
 8004d74:	b1c0      	cbz	r0, 8004da8 <_vfiprintf_r+0x78>
 8004d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d78:	07dc      	lsls	r4, r3, #31
 8004d7a:	d50e      	bpl.n	8004d9a <_vfiprintf_r+0x6a>
 8004d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004d80:	b01d      	add	sp, #116	; 0x74
 8004d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d86:	4b7b      	ldr	r3, [pc, #492]	; (8004f74 <_vfiprintf_r+0x244>)
 8004d88:	429d      	cmp	r5, r3
 8004d8a:	d101      	bne.n	8004d90 <_vfiprintf_r+0x60>
 8004d8c:	68b5      	ldr	r5, [r6, #8]
 8004d8e:	e7df      	b.n	8004d50 <_vfiprintf_r+0x20>
 8004d90:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <_vfiprintf_r+0x248>)
 8004d92:	429d      	cmp	r5, r3
 8004d94:	bf08      	it	eq
 8004d96:	68f5      	ldreq	r5, [r6, #12]
 8004d98:	e7da      	b.n	8004d50 <_vfiprintf_r+0x20>
 8004d9a:	89ab      	ldrh	r3, [r5, #12]
 8004d9c:	0598      	lsls	r0, r3, #22
 8004d9e:	d4ed      	bmi.n	8004d7c <_vfiprintf_r+0x4c>
 8004da0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004da2:	f000 fd22 	bl	80057ea <__retarget_lock_release_recursive>
 8004da6:	e7e9      	b.n	8004d7c <_vfiprintf_r+0x4c>
 8004da8:	2300      	movs	r3, #0
 8004daa:	9309      	str	r3, [sp, #36]	; 0x24
 8004dac:	2320      	movs	r3, #32
 8004dae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004db2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004db6:	2330      	movs	r3, #48	; 0x30
 8004db8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f7c <_vfiprintf_r+0x24c>
 8004dbc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dc0:	f04f 0901 	mov.w	r9, #1
 8004dc4:	4623      	mov	r3, r4
 8004dc6:	469a      	mov	sl, r3
 8004dc8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dcc:	b10a      	cbz	r2, 8004dd2 <_vfiprintf_r+0xa2>
 8004dce:	2a25      	cmp	r2, #37	; 0x25
 8004dd0:	d1f9      	bne.n	8004dc6 <_vfiprintf_r+0x96>
 8004dd2:	ebba 0b04 	subs.w	fp, sl, r4
 8004dd6:	d00b      	beq.n	8004df0 <_vfiprintf_r+0xc0>
 8004dd8:	465b      	mov	r3, fp
 8004dda:	4622      	mov	r2, r4
 8004ddc:	4629      	mov	r1, r5
 8004dde:	4630      	mov	r0, r6
 8004de0:	f7ff ff93 	bl	8004d0a <__sfputs_r>
 8004de4:	3001      	adds	r0, #1
 8004de6:	f000 80aa 	beq.w	8004f3e <_vfiprintf_r+0x20e>
 8004dea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004dec:	445a      	add	r2, fp
 8004dee:	9209      	str	r2, [sp, #36]	; 0x24
 8004df0:	f89a 3000 	ldrb.w	r3, [sl]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	f000 80a2 	beq.w	8004f3e <_vfiprintf_r+0x20e>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8004e00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e04:	f10a 0a01 	add.w	sl, sl, #1
 8004e08:	9304      	str	r3, [sp, #16]
 8004e0a:	9307      	str	r3, [sp, #28]
 8004e0c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e10:	931a      	str	r3, [sp, #104]	; 0x68
 8004e12:	4654      	mov	r4, sl
 8004e14:	2205      	movs	r2, #5
 8004e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1a:	4858      	ldr	r0, [pc, #352]	; (8004f7c <_vfiprintf_r+0x24c>)
 8004e1c:	f7fb f9e0 	bl	80001e0 <memchr>
 8004e20:	9a04      	ldr	r2, [sp, #16]
 8004e22:	b9d8      	cbnz	r0, 8004e5c <_vfiprintf_r+0x12c>
 8004e24:	06d1      	lsls	r1, r2, #27
 8004e26:	bf44      	itt	mi
 8004e28:	2320      	movmi	r3, #32
 8004e2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e2e:	0713      	lsls	r3, r2, #28
 8004e30:	bf44      	itt	mi
 8004e32:	232b      	movmi	r3, #43	; 0x2b
 8004e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e38:	f89a 3000 	ldrb.w	r3, [sl]
 8004e3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e3e:	d015      	beq.n	8004e6c <_vfiprintf_r+0x13c>
 8004e40:	9a07      	ldr	r2, [sp, #28]
 8004e42:	4654      	mov	r4, sl
 8004e44:	2000      	movs	r0, #0
 8004e46:	f04f 0c0a 	mov.w	ip, #10
 8004e4a:	4621      	mov	r1, r4
 8004e4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e50:	3b30      	subs	r3, #48	; 0x30
 8004e52:	2b09      	cmp	r3, #9
 8004e54:	d94e      	bls.n	8004ef4 <_vfiprintf_r+0x1c4>
 8004e56:	b1b0      	cbz	r0, 8004e86 <_vfiprintf_r+0x156>
 8004e58:	9207      	str	r2, [sp, #28]
 8004e5a:	e014      	b.n	8004e86 <_vfiprintf_r+0x156>
 8004e5c:	eba0 0308 	sub.w	r3, r0, r8
 8004e60:	fa09 f303 	lsl.w	r3, r9, r3
 8004e64:	4313      	orrs	r3, r2
 8004e66:	9304      	str	r3, [sp, #16]
 8004e68:	46a2      	mov	sl, r4
 8004e6a:	e7d2      	b.n	8004e12 <_vfiprintf_r+0xe2>
 8004e6c:	9b03      	ldr	r3, [sp, #12]
 8004e6e:	1d19      	adds	r1, r3, #4
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	9103      	str	r1, [sp, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bfbb      	ittet	lt
 8004e78:	425b      	neglt	r3, r3
 8004e7a:	f042 0202 	orrlt.w	r2, r2, #2
 8004e7e:	9307      	strge	r3, [sp, #28]
 8004e80:	9307      	strlt	r3, [sp, #28]
 8004e82:	bfb8      	it	lt
 8004e84:	9204      	strlt	r2, [sp, #16]
 8004e86:	7823      	ldrb	r3, [r4, #0]
 8004e88:	2b2e      	cmp	r3, #46	; 0x2e
 8004e8a:	d10c      	bne.n	8004ea6 <_vfiprintf_r+0x176>
 8004e8c:	7863      	ldrb	r3, [r4, #1]
 8004e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8004e90:	d135      	bne.n	8004efe <_vfiprintf_r+0x1ce>
 8004e92:	9b03      	ldr	r3, [sp, #12]
 8004e94:	1d1a      	adds	r2, r3, #4
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	9203      	str	r2, [sp, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	bfb8      	it	lt
 8004e9e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ea2:	3402      	adds	r4, #2
 8004ea4:	9305      	str	r3, [sp, #20]
 8004ea6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f8c <_vfiprintf_r+0x25c>
 8004eaa:	7821      	ldrb	r1, [r4, #0]
 8004eac:	2203      	movs	r2, #3
 8004eae:	4650      	mov	r0, sl
 8004eb0:	f7fb f996 	bl	80001e0 <memchr>
 8004eb4:	b140      	cbz	r0, 8004ec8 <_vfiprintf_r+0x198>
 8004eb6:	2340      	movs	r3, #64	; 0x40
 8004eb8:	eba0 000a 	sub.w	r0, r0, sl
 8004ebc:	fa03 f000 	lsl.w	r0, r3, r0
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	4303      	orrs	r3, r0
 8004ec4:	3401      	adds	r4, #1
 8004ec6:	9304      	str	r3, [sp, #16]
 8004ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ecc:	482c      	ldr	r0, [pc, #176]	; (8004f80 <_vfiprintf_r+0x250>)
 8004ece:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ed2:	2206      	movs	r2, #6
 8004ed4:	f7fb f984 	bl	80001e0 <memchr>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d03f      	beq.n	8004f5c <_vfiprintf_r+0x22c>
 8004edc:	4b29      	ldr	r3, [pc, #164]	; (8004f84 <_vfiprintf_r+0x254>)
 8004ede:	bb1b      	cbnz	r3, 8004f28 <_vfiprintf_r+0x1f8>
 8004ee0:	9b03      	ldr	r3, [sp, #12]
 8004ee2:	3307      	adds	r3, #7
 8004ee4:	f023 0307 	bic.w	r3, r3, #7
 8004ee8:	3308      	adds	r3, #8
 8004eea:	9303      	str	r3, [sp, #12]
 8004eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eee:	443b      	add	r3, r7
 8004ef0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ef2:	e767      	b.n	8004dc4 <_vfiprintf_r+0x94>
 8004ef4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ef8:	460c      	mov	r4, r1
 8004efa:	2001      	movs	r0, #1
 8004efc:	e7a5      	b.n	8004e4a <_vfiprintf_r+0x11a>
 8004efe:	2300      	movs	r3, #0
 8004f00:	3401      	adds	r4, #1
 8004f02:	9305      	str	r3, [sp, #20]
 8004f04:	4619      	mov	r1, r3
 8004f06:	f04f 0c0a 	mov.w	ip, #10
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f10:	3a30      	subs	r2, #48	; 0x30
 8004f12:	2a09      	cmp	r2, #9
 8004f14:	d903      	bls.n	8004f1e <_vfiprintf_r+0x1ee>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0c5      	beq.n	8004ea6 <_vfiprintf_r+0x176>
 8004f1a:	9105      	str	r1, [sp, #20]
 8004f1c:	e7c3      	b.n	8004ea6 <_vfiprintf_r+0x176>
 8004f1e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f22:	4604      	mov	r4, r0
 8004f24:	2301      	movs	r3, #1
 8004f26:	e7f0      	b.n	8004f0a <_vfiprintf_r+0x1da>
 8004f28:	ab03      	add	r3, sp, #12
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	462a      	mov	r2, r5
 8004f2e:	4b16      	ldr	r3, [pc, #88]	; (8004f88 <_vfiprintf_r+0x258>)
 8004f30:	a904      	add	r1, sp, #16
 8004f32:	4630      	mov	r0, r6
 8004f34:	f3af 8000 	nop.w
 8004f38:	4607      	mov	r7, r0
 8004f3a:	1c78      	adds	r0, r7, #1
 8004f3c:	d1d6      	bne.n	8004eec <_vfiprintf_r+0x1bc>
 8004f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f40:	07d9      	lsls	r1, r3, #31
 8004f42:	d405      	bmi.n	8004f50 <_vfiprintf_r+0x220>
 8004f44:	89ab      	ldrh	r3, [r5, #12]
 8004f46:	059a      	lsls	r2, r3, #22
 8004f48:	d402      	bmi.n	8004f50 <_vfiprintf_r+0x220>
 8004f4a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f4c:	f000 fc4d 	bl	80057ea <__retarget_lock_release_recursive>
 8004f50:	89ab      	ldrh	r3, [r5, #12]
 8004f52:	065b      	lsls	r3, r3, #25
 8004f54:	f53f af12 	bmi.w	8004d7c <_vfiprintf_r+0x4c>
 8004f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f5a:	e711      	b.n	8004d80 <_vfiprintf_r+0x50>
 8004f5c:	ab03      	add	r3, sp, #12
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	462a      	mov	r2, r5
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <_vfiprintf_r+0x258>)
 8004f64:	a904      	add	r1, sp, #16
 8004f66:	4630      	mov	r0, r6
 8004f68:	f000 f880 	bl	800506c <_printf_i>
 8004f6c:	e7e4      	b.n	8004f38 <_vfiprintf_r+0x208>
 8004f6e:	bf00      	nop
 8004f70:	08005fd4 	.word	0x08005fd4
 8004f74:	08005ff4 	.word	0x08005ff4
 8004f78:	08005fb4 	.word	0x08005fb4
 8004f7c:	08005f80 	.word	0x08005f80
 8004f80:	08005f8a 	.word	0x08005f8a
 8004f84:	00000000 	.word	0x00000000
 8004f88:	08004d0b 	.word	0x08004d0b
 8004f8c:	08005f86 	.word	0x08005f86

08004f90 <_printf_common>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	4616      	mov	r6, r2
 8004f96:	4699      	mov	r9, r3
 8004f98:	688a      	ldr	r2, [r1, #8]
 8004f9a:	690b      	ldr	r3, [r1, #16]
 8004f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	bfb8      	it	lt
 8004fa4:	4613      	movlt	r3, r2
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fac:	4607      	mov	r7, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	b10a      	cbz	r2, 8004fb6 <_printf_common+0x26>
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	0699      	lsls	r1, r3, #26
 8004fba:	bf42      	ittt	mi
 8004fbc:	6833      	ldrmi	r3, [r6, #0]
 8004fbe:	3302      	addmi	r3, #2
 8004fc0:	6033      	strmi	r3, [r6, #0]
 8004fc2:	6825      	ldr	r5, [r4, #0]
 8004fc4:	f015 0506 	ands.w	r5, r5, #6
 8004fc8:	d106      	bne.n	8004fd8 <_printf_common+0x48>
 8004fca:	f104 0a19 	add.w	sl, r4, #25
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	6832      	ldr	r2, [r6, #0]
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	42ab      	cmp	r3, r5
 8004fd6:	dc26      	bgt.n	8005026 <_printf_common+0x96>
 8004fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fdc:	1e13      	subs	r3, r2, #0
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	0692      	lsls	r2, r2, #26
 8004fe6:	d42b      	bmi.n	8005040 <_printf_common+0xb0>
 8004fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fec:	4649      	mov	r1, r9
 8004fee:	4638      	mov	r0, r7
 8004ff0:	47c0      	blx	r8
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d01e      	beq.n	8005034 <_printf_common+0xa4>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	68e5      	ldr	r5, [r4, #12]
 8004ffa:	6832      	ldr	r2, [r6, #0]
 8004ffc:	f003 0306 	and.w	r3, r3, #6
 8005000:	2b04      	cmp	r3, #4
 8005002:	bf08      	it	eq
 8005004:	1aad      	subeq	r5, r5, r2
 8005006:	68a3      	ldr	r3, [r4, #8]
 8005008:	6922      	ldr	r2, [r4, #16]
 800500a:	bf0c      	ite	eq
 800500c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005010:	2500      	movne	r5, #0
 8005012:	4293      	cmp	r3, r2
 8005014:	bfc4      	itt	gt
 8005016:	1a9b      	subgt	r3, r3, r2
 8005018:	18ed      	addgt	r5, r5, r3
 800501a:	2600      	movs	r6, #0
 800501c:	341a      	adds	r4, #26
 800501e:	42b5      	cmp	r5, r6
 8005020:	d11a      	bne.n	8005058 <_printf_common+0xc8>
 8005022:	2000      	movs	r0, #0
 8005024:	e008      	b.n	8005038 <_printf_common+0xa8>
 8005026:	2301      	movs	r3, #1
 8005028:	4652      	mov	r2, sl
 800502a:	4649      	mov	r1, r9
 800502c:	4638      	mov	r0, r7
 800502e:	47c0      	blx	r8
 8005030:	3001      	adds	r0, #1
 8005032:	d103      	bne.n	800503c <_printf_common+0xac>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	3501      	adds	r5, #1
 800503e:	e7c6      	b.n	8004fce <_printf_common+0x3e>
 8005040:	18e1      	adds	r1, r4, r3
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	2030      	movs	r0, #48	; 0x30
 8005046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800504a:	4422      	add	r2, r4
 800504c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005054:	3302      	adds	r3, #2
 8005056:	e7c7      	b.n	8004fe8 <_printf_common+0x58>
 8005058:	2301      	movs	r3, #1
 800505a:	4622      	mov	r2, r4
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d0e6      	beq.n	8005034 <_printf_common+0xa4>
 8005066:	3601      	adds	r6, #1
 8005068:	e7d9      	b.n	800501e <_printf_common+0x8e>
	...

0800506c <_printf_i>:
 800506c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	7e0f      	ldrb	r7, [r1, #24]
 8005072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005074:	2f78      	cmp	r7, #120	; 0x78
 8005076:	4691      	mov	r9, r2
 8005078:	4680      	mov	r8, r0
 800507a:	460c      	mov	r4, r1
 800507c:	469a      	mov	sl, r3
 800507e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005082:	d807      	bhi.n	8005094 <_printf_i+0x28>
 8005084:	2f62      	cmp	r7, #98	; 0x62
 8005086:	d80a      	bhi.n	800509e <_printf_i+0x32>
 8005088:	2f00      	cmp	r7, #0
 800508a:	f000 80d8 	beq.w	800523e <_printf_i+0x1d2>
 800508e:	2f58      	cmp	r7, #88	; 0x58
 8005090:	f000 80a3 	beq.w	80051da <_printf_i+0x16e>
 8005094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800509c:	e03a      	b.n	8005114 <_printf_i+0xa8>
 800509e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050a2:	2b15      	cmp	r3, #21
 80050a4:	d8f6      	bhi.n	8005094 <_printf_i+0x28>
 80050a6:	a101      	add	r1, pc, #4	; (adr r1, 80050ac <_printf_i+0x40>)
 80050a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050ac:	08005105 	.word	0x08005105
 80050b0:	08005119 	.word	0x08005119
 80050b4:	08005095 	.word	0x08005095
 80050b8:	08005095 	.word	0x08005095
 80050bc:	08005095 	.word	0x08005095
 80050c0:	08005095 	.word	0x08005095
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005095 	.word	0x08005095
 80050cc:	08005095 	.word	0x08005095
 80050d0:	08005095 	.word	0x08005095
 80050d4:	08005095 	.word	0x08005095
 80050d8:	08005225 	.word	0x08005225
 80050dc:	08005149 	.word	0x08005149
 80050e0:	08005207 	.word	0x08005207
 80050e4:	08005095 	.word	0x08005095
 80050e8:	08005095 	.word	0x08005095
 80050ec:	08005247 	.word	0x08005247
 80050f0:	08005095 	.word	0x08005095
 80050f4:	08005149 	.word	0x08005149
 80050f8:	08005095 	.word	0x08005095
 80050fc:	08005095 	.word	0x08005095
 8005100:	0800520f 	.word	0x0800520f
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	602a      	str	r2, [r5, #0]
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005114:	2301      	movs	r3, #1
 8005116:	e0a3      	b.n	8005260 <_printf_i+0x1f4>
 8005118:	6820      	ldr	r0, [r4, #0]
 800511a:	6829      	ldr	r1, [r5, #0]
 800511c:	0606      	lsls	r6, r0, #24
 800511e:	f101 0304 	add.w	r3, r1, #4
 8005122:	d50a      	bpl.n	800513a <_printf_i+0xce>
 8005124:	680e      	ldr	r6, [r1, #0]
 8005126:	602b      	str	r3, [r5, #0]
 8005128:	2e00      	cmp	r6, #0
 800512a:	da03      	bge.n	8005134 <_printf_i+0xc8>
 800512c:	232d      	movs	r3, #45	; 0x2d
 800512e:	4276      	negs	r6, r6
 8005130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005134:	485e      	ldr	r0, [pc, #376]	; (80052b0 <_printf_i+0x244>)
 8005136:	230a      	movs	r3, #10
 8005138:	e019      	b.n	800516e <_printf_i+0x102>
 800513a:	680e      	ldr	r6, [r1, #0]
 800513c:	602b      	str	r3, [r5, #0]
 800513e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005142:	bf18      	it	ne
 8005144:	b236      	sxthne	r6, r6
 8005146:	e7ef      	b.n	8005128 <_printf_i+0xbc>
 8005148:	682b      	ldr	r3, [r5, #0]
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	1d19      	adds	r1, r3, #4
 800514e:	6029      	str	r1, [r5, #0]
 8005150:	0601      	lsls	r1, r0, #24
 8005152:	d501      	bpl.n	8005158 <_printf_i+0xec>
 8005154:	681e      	ldr	r6, [r3, #0]
 8005156:	e002      	b.n	800515e <_printf_i+0xf2>
 8005158:	0646      	lsls	r6, r0, #25
 800515a:	d5fb      	bpl.n	8005154 <_printf_i+0xe8>
 800515c:	881e      	ldrh	r6, [r3, #0]
 800515e:	4854      	ldr	r0, [pc, #336]	; (80052b0 <_printf_i+0x244>)
 8005160:	2f6f      	cmp	r7, #111	; 0x6f
 8005162:	bf0c      	ite	eq
 8005164:	2308      	moveq	r3, #8
 8005166:	230a      	movne	r3, #10
 8005168:	2100      	movs	r1, #0
 800516a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800516e:	6865      	ldr	r5, [r4, #4]
 8005170:	60a5      	str	r5, [r4, #8]
 8005172:	2d00      	cmp	r5, #0
 8005174:	bfa2      	ittt	ge
 8005176:	6821      	ldrge	r1, [r4, #0]
 8005178:	f021 0104 	bicge.w	r1, r1, #4
 800517c:	6021      	strge	r1, [r4, #0]
 800517e:	b90e      	cbnz	r6, 8005184 <_printf_i+0x118>
 8005180:	2d00      	cmp	r5, #0
 8005182:	d04d      	beq.n	8005220 <_printf_i+0x1b4>
 8005184:	4615      	mov	r5, r2
 8005186:	fbb6 f1f3 	udiv	r1, r6, r3
 800518a:	fb03 6711 	mls	r7, r3, r1, r6
 800518e:	5dc7      	ldrb	r7, [r0, r7]
 8005190:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005194:	4637      	mov	r7, r6
 8005196:	42bb      	cmp	r3, r7
 8005198:	460e      	mov	r6, r1
 800519a:	d9f4      	bls.n	8005186 <_printf_i+0x11a>
 800519c:	2b08      	cmp	r3, #8
 800519e:	d10b      	bne.n	80051b8 <_printf_i+0x14c>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	07de      	lsls	r6, r3, #31
 80051a4:	d508      	bpl.n	80051b8 <_printf_i+0x14c>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	6861      	ldr	r1, [r4, #4]
 80051aa:	4299      	cmp	r1, r3
 80051ac:	bfde      	ittt	le
 80051ae:	2330      	movle	r3, #48	; 0x30
 80051b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051b8:	1b52      	subs	r2, r2, r5
 80051ba:	6122      	str	r2, [r4, #16]
 80051bc:	f8cd a000 	str.w	sl, [sp]
 80051c0:	464b      	mov	r3, r9
 80051c2:	aa03      	add	r2, sp, #12
 80051c4:	4621      	mov	r1, r4
 80051c6:	4640      	mov	r0, r8
 80051c8:	f7ff fee2 	bl	8004f90 <_printf_common>
 80051cc:	3001      	adds	r0, #1
 80051ce:	d14c      	bne.n	800526a <_printf_i+0x1fe>
 80051d0:	f04f 30ff 	mov.w	r0, #4294967295
 80051d4:	b004      	add	sp, #16
 80051d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051da:	4835      	ldr	r0, [pc, #212]	; (80052b0 <_printf_i+0x244>)
 80051dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80051e0:	6829      	ldr	r1, [r5, #0]
 80051e2:	6823      	ldr	r3, [r4, #0]
 80051e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80051e8:	6029      	str	r1, [r5, #0]
 80051ea:	061d      	lsls	r5, r3, #24
 80051ec:	d514      	bpl.n	8005218 <_printf_i+0x1ac>
 80051ee:	07df      	lsls	r7, r3, #31
 80051f0:	bf44      	itt	mi
 80051f2:	f043 0320 	orrmi.w	r3, r3, #32
 80051f6:	6023      	strmi	r3, [r4, #0]
 80051f8:	b91e      	cbnz	r6, 8005202 <_printf_i+0x196>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	f023 0320 	bic.w	r3, r3, #32
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	2310      	movs	r3, #16
 8005204:	e7b0      	b.n	8005168 <_printf_i+0xfc>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	f043 0320 	orr.w	r3, r3, #32
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	2378      	movs	r3, #120	; 0x78
 8005210:	4828      	ldr	r0, [pc, #160]	; (80052b4 <_printf_i+0x248>)
 8005212:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005216:	e7e3      	b.n	80051e0 <_printf_i+0x174>
 8005218:	0659      	lsls	r1, r3, #25
 800521a:	bf48      	it	mi
 800521c:	b2b6      	uxthmi	r6, r6
 800521e:	e7e6      	b.n	80051ee <_printf_i+0x182>
 8005220:	4615      	mov	r5, r2
 8005222:	e7bb      	b.n	800519c <_printf_i+0x130>
 8005224:	682b      	ldr	r3, [r5, #0]
 8005226:	6826      	ldr	r6, [r4, #0]
 8005228:	6961      	ldr	r1, [r4, #20]
 800522a:	1d18      	adds	r0, r3, #4
 800522c:	6028      	str	r0, [r5, #0]
 800522e:	0635      	lsls	r5, r6, #24
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	d501      	bpl.n	8005238 <_printf_i+0x1cc>
 8005234:	6019      	str	r1, [r3, #0]
 8005236:	e002      	b.n	800523e <_printf_i+0x1d2>
 8005238:	0670      	lsls	r0, r6, #25
 800523a:	d5fb      	bpl.n	8005234 <_printf_i+0x1c8>
 800523c:	8019      	strh	r1, [r3, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	6123      	str	r3, [r4, #16]
 8005242:	4615      	mov	r5, r2
 8005244:	e7ba      	b.n	80051bc <_printf_i+0x150>
 8005246:	682b      	ldr	r3, [r5, #0]
 8005248:	1d1a      	adds	r2, r3, #4
 800524a:	602a      	str	r2, [r5, #0]
 800524c:	681d      	ldr	r5, [r3, #0]
 800524e:	6862      	ldr	r2, [r4, #4]
 8005250:	2100      	movs	r1, #0
 8005252:	4628      	mov	r0, r5
 8005254:	f7fa ffc4 	bl	80001e0 <memchr>
 8005258:	b108      	cbz	r0, 800525e <_printf_i+0x1f2>
 800525a:	1b40      	subs	r0, r0, r5
 800525c:	6060      	str	r0, [r4, #4]
 800525e:	6863      	ldr	r3, [r4, #4]
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	2300      	movs	r3, #0
 8005264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005268:	e7a8      	b.n	80051bc <_printf_i+0x150>
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	462a      	mov	r2, r5
 800526e:	4649      	mov	r1, r9
 8005270:	4640      	mov	r0, r8
 8005272:	47d0      	blx	sl
 8005274:	3001      	adds	r0, #1
 8005276:	d0ab      	beq.n	80051d0 <_printf_i+0x164>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	079b      	lsls	r3, r3, #30
 800527c:	d413      	bmi.n	80052a6 <_printf_i+0x23a>
 800527e:	68e0      	ldr	r0, [r4, #12]
 8005280:	9b03      	ldr	r3, [sp, #12]
 8005282:	4298      	cmp	r0, r3
 8005284:	bfb8      	it	lt
 8005286:	4618      	movlt	r0, r3
 8005288:	e7a4      	b.n	80051d4 <_printf_i+0x168>
 800528a:	2301      	movs	r3, #1
 800528c:	4632      	mov	r2, r6
 800528e:	4649      	mov	r1, r9
 8005290:	4640      	mov	r0, r8
 8005292:	47d0      	blx	sl
 8005294:	3001      	adds	r0, #1
 8005296:	d09b      	beq.n	80051d0 <_printf_i+0x164>
 8005298:	3501      	adds	r5, #1
 800529a:	68e3      	ldr	r3, [r4, #12]
 800529c:	9903      	ldr	r1, [sp, #12]
 800529e:	1a5b      	subs	r3, r3, r1
 80052a0:	42ab      	cmp	r3, r5
 80052a2:	dcf2      	bgt.n	800528a <_printf_i+0x21e>
 80052a4:	e7eb      	b.n	800527e <_printf_i+0x212>
 80052a6:	2500      	movs	r5, #0
 80052a8:	f104 0619 	add.w	r6, r4, #25
 80052ac:	e7f5      	b.n	800529a <_printf_i+0x22e>
 80052ae:	bf00      	nop
 80052b0:	08005f91 	.word	0x08005f91
 80052b4:	08005fa2 	.word	0x08005fa2

080052b8 <iprintf>:
 80052b8:	b40f      	push	{r0, r1, r2, r3}
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <iprintf+0x2c>)
 80052bc:	b513      	push	{r0, r1, r4, lr}
 80052be:	681c      	ldr	r4, [r3, #0]
 80052c0:	b124      	cbz	r4, 80052cc <iprintf+0x14>
 80052c2:	69a3      	ldr	r3, [r4, #24]
 80052c4:	b913      	cbnz	r3, 80052cc <iprintf+0x14>
 80052c6:	4620      	mov	r0, r4
 80052c8:	f000 f9f0 	bl	80056ac <__sinit>
 80052cc:	ab05      	add	r3, sp, #20
 80052ce:	9a04      	ldr	r2, [sp, #16]
 80052d0:	68a1      	ldr	r1, [r4, #8]
 80052d2:	9301      	str	r3, [sp, #4]
 80052d4:	4620      	mov	r0, r4
 80052d6:	f7ff fd2b 	bl	8004d30 <_vfiprintf_r>
 80052da:	b002      	add	sp, #8
 80052dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e0:	b004      	add	sp, #16
 80052e2:	4770      	bx	lr
 80052e4:	2000000c 	.word	0x2000000c

080052e8 <__swbuf_r>:
 80052e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ea:	460e      	mov	r6, r1
 80052ec:	4614      	mov	r4, r2
 80052ee:	4605      	mov	r5, r0
 80052f0:	b118      	cbz	r0, 80052fa <__swbuf_r+0x12>
 80052f2:	6983      	ldr	r3, [r0, #24]
 80052f4:	b90b      	cbnz	r3, 80052fa <__swbuf_r+0x12>
 80052f6:	f000 f9d9 	bl	80056ac <__sinit>
 80052fa:	4b21      	ldr	r3, [pc, #132]	; (8005380 <__swbuf_r+0x98>)
 80052fc:	429c      	cmp	r4, r3
 80052fe:	d12b      	bne.n	8005358 <__swbuf_r+0x70>
 8005300:	686c      	ldr	r4, [r5, #4]
 8005302:	69a3      	ldr	r3, [r4, #24]
 8005304:	60a3      	str	r3, [r4, #8]
 8005306:	89a3      	ldrh	r3, [r4, #12]
 8005308:	071a      	lsls	r2, r3, #28
 800530a:	d52f      	bpl.n	800536c <__swbuf_r+0x84>
 800530c:	6923      	ldr	r3, [r4, #16]
 800530e:	b36b      	cbz	r3, 800536c <__swbuf_r+0x84>
 8005310:	6923      	ldr	r3, [r4, #16]
 8005312:	6820      	ldr	r0, [r4, #0]
 8005314:	1ac0      	subs	r0, r0, r3
 8005316:	6963      	ldr	r3, [r4, #20]
 8005318:	b2f6      	uxtb	r6, r6
 800531a:	4283      	cmp	r3, r0
 800531c:	4637      	mov	r7, r6
 800531e:	dc04      	bgt.n	800532a <__swbuf_r+0x42>
 8005320:	4621      	mov	r1, r4
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f92e 	bl	8005584 <_fflush_r>
 8005328:	bb30      	cbnz	r0, 8005378 <__swbuf_r+0x90>
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	3b01      	subs	r3, #1
 800532e:	60a3      	str	r3, [r4, #8]
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	1c5a      	adds	r2, r3, #1
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	701e      	strb	r6, [r3, #0]
 8005338:	6963      	ldr	r3, [r4, #20]
 800533a:	3001      	adds	r0, #1
 800533c:	4283      	cmp	r3, r0
 800533e:	d004      	beq.n	800534a <__swbuf_r+0x62>
 8005340:	89a3      	ldrh	r3, [r4, #12]
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d506      	bpl.n	8005354 <__swbuf_r+0x6c>
 8005346:	2e0a      	cmp	r6, #10
 8005348:	d104      	bne.n	8005354 <__swbuf_r+0x6c>
 800534a:	4621      	mov	r1, r4
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f919 	bl	8005584 <_fflush_r>
 8005352:	b988      	cbnz	r0, 8005378 <__swbuf_r+0x90>
 8005354:	4638      	mov	r0, r7
 8005356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005358:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <__swbuf_r+0x9c>)
 800535a:	429c      	cmp	r4, r3
 800535c:	d101      	bne.n	8005362 <__swbuf_r+0x7a>
 800535e:	68ac      	ldr	r4, [r5, #8]
 8005360:	e7cf      	b.n	8005302 <__swbuf_r+0x1a>
 8005362:	4b09      	ldr	r3, [pc, #36]	; (8005388 <__swbuf_r+0xa0>)
 8005364:	429c      	cmp	r4, r3
 8005366:	bf08      	it	eq
 8005368:	68ec      	ldreq	r4, [r5, #12]
 800536a:	e7ca      	b.n	8005302 <__swbuf_r+0x1a>
 800536c:	4621      	mov	r1, r4
 800536e:	4628      	mov	r0, r5
 8005370:	f000 f80c 	bl	800538c <__swsetup_r>
 8005374:	2800      	cmp	r0, #0
 8005376:	d0cb      	beq.n	8005310 <__swbuf_r+0x28>
 8005378:	f04f 37ff 	mov.w	r7, #4294967295
 800537c:	e7ea      	b.n	8005354 <__swbuf_r+0x6c>
 800537e:	bf00      	nop
 8005380:	08005fd4 	.word	0x08005fd4
 8005384:	08005ff4 	.word	0x08005ff4
 8005388:	08005fb4 	.word	0x08005fb4

0800538c <__swsetup_r>:
 800538c:	4b32      	ldr	r3, [pc, #200]	; (8005458 <__swsetup_r+0xcc>)
 800538e:	b570      	push	{r4, r5, r6, lr}
 8005390:	681d      	ldr	r5, [r3, #0]
 8005392:	4606      	mov	r6, r0
 8005394:	460c      	mov	r4, r1
 8005396:	b125      	cbz	r5, 80053a2 <__swsetup_r+0x16>
 8005398:	69ab      	ldr	r3, [r5, #24]
 800539a:	b913      	cbnz	r3, 80053a2 <__swsetup_r+0x16>
 800539c:	4628      	mov	r0, r5
 800539e:	f000 f985 	bl	80056ac <__sinit>
 80053a2:	4b2e      	ldr	r3, [pc, #184]	; (800545c <__swsetup_r+0xd0>)
 80053a4:	429c      	cmp	r4, r3
 80053a6:	d10f      	bne.n	80053c8 <__swsetup_r+0x3c>
 80053a8:	686c      	ldr	r4, [r5, #4]
 80053aa:	89a3      	ldrh	r3, [r4, #12]
 80053ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053b0:	0719      	lsls	r1, r3, #28
 80053b2:	d42c      	bmi.n	800540e <__swsetup_r+0x82>
 80053b4:	06dd      	lsls	r5, r3, #27
 80053b6:	d411      	bmi.n	80053dc <__swsetup_r+0x50>
 80053b8:	2309      	movs	r3, #9
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	f04f 30ff 	mov.w	r0, #4294967295
 80053c6:	e03e      	b.n	8005446 <__swsetup_r+0xba>
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <__swsetup_r+0xd4>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d101      	bne.n	80053d2 <__swsetup_r+0x46>
 80053ce:	68ac      	ldr	r4, [r5, #8]
 80053d0:	e7eb      	b.n	80053aa <__swsetup_r+0x1e>
 80053d2:	4b24      	ldr	r3, [pc, #144]	; (8005464 <__swsetup_r+0xd8>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	bf08      	it	eq
 80053d8:	68ec      	ldreq	r4, [r5, #12]
 80053da:	e7e6      	b.n	80053aa <__swsetup_r+0x1e>
 80053dc:	0758      	lsls	r0, r3, #29
 80053de:	d512      	bpl.n	8005406 <__swsetup_r+0x7a>
 80053e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053e2:	b141      	cbz	r1, 80053f6 <__swsetup_r+0x6a>
 80053e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053e8:	4299      	cmp	r1, r3
 80053ea:	d002      	beq.n	80053f2 <__swsetup_r+0x66>
 80053ec:	4630      	mov	r0, r6
 80053ee:	f000 fa63 	bl	80058b8 <_free_r>
 80053f2:	2300      	movs	r3, #0
 80053f4:	6363      	str	r3, [r4, #52]	; 0x34
 80053f6:	89a3      	ldrh	r3, [r4, #12]
 80053f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80053fc:	81a3      	strh	r3, [r4, #12]
 80053fe:	2300      	movs	r3, #0
 8005400:	6063      	str	r3, [r4, #4]
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	6023      	str	r3, [r4, #0]
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f043 0308 	orr.w	r3, r3, #8
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	6923      	ldr	r3, [r4, #16]
 8005410:	b94b      	cbnz	r3, 8005426 <__swsetup_r+0x9a>
 8005412:	89a3      	ldrh	r3, [r4, #12]
 8005414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541c:	d003      	beq.n	8005426 <__swsetup_r+0x9a>
 800541e:	4621      	mov	r1, r4
 8005420:	4630      	mov	r0, r6
 8005422:	f000 fa09 	bl	8005838 <__smakebuf_r>
 8005426:	89a0      	ldrh	r0, [r4, #12]
 8005428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800542c:	f010 0301 	ands.w	r3, r0, #1
 8005430:	d00a      	beq.n	8005448 <__swsetup_r+0xbc>
 8005432:	2300      	movs	r3, #0
 8005434:	60a3      	str	r3, [r4, #8]
 8005436:	6963      	ldr	r3, [r4, #20]
 8005438:	425b      	negs	r3, r3
 800543a:	61a3      	str	r3, [r4, #24]
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	b943      	cbnz	r3, 8005452 <__swsetup_r+0xc6>
 8005440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005444:	d1ba      	bne.n	80053bc <__swsetup_r+0x30>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	0781      	lsls	r1, r0, #30
 800544a:	bf58      	it	pl
 800544c:	6963      	ldrpl	r3, [r4, #20]
 800544e:	60a3      	str	r3, [r4, #8]
 8005450:	e7f4      	b.n	800543c <__swsetup_r+0xb0>
 8005452:	2000      	movs	r0, #0
 8005454:	e7f7      	b.n	8005446 <__swsetup_r+0xba>
 8005456:	bf00      	nop
 8005458:	2000000c 	.word	0x2000000c
 800545c:	08005fd4 	.word	0x08005fd4
 8005460:	08005ff4 	.word	0x08005ff4
 8005464:	08005fb4 	.word	0x08005fb4

08005468 <abort>:
 8005468:	b508      	push	{r3, lr}
 800546a:	2006      	movs	r0, #6
 800546c:	f000 fb3c 	bl	8005ae8 <raise>
 8005470:	2001      	movs	r0, #1
 8005472:	f7fb ffdf 	bl	8001434 <_exit>
	...

08005478 <__sflush_r>:
 8005478:	898a      	ldrh	r2, [r1, #12]
 800547a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800547e:	4605      	mov	r5, r0
 8005480:	0710      	lsls	r0, r2, #28
 8005482:	460c      	mov	r4, r1
 8005484:	d458      	bmi.n	8005538 <__sflush_r+0xc0>
 8005486:	684b      	ldr	r3, [r1, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	dc05      	bgt.n	8005498 <__sflush_r+0x20>
 800548c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800548e:	2b00      	cmp	r3, #0
 8005490:	dc02      	bgt.n	8005498 <__sflush_r+0x20>
 8005492:	2000      	movs	r0, #0
 8005494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800549a:	2e00      	cmp	r6, #0
 800549c:	d0f9      	beq.n	8005492 <__sflush_r+0x1a>
 800549e:	2300      	movs	r3, #0
 80054a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054a4:	682f      	ldr	r7, [r5, #0]
 80054a6:	602b      	str	r3, [r5, #0]
 80054a8:	d032      	beq.n	8005510 <__sflush_r+0x98>
 80054aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054ac:	89a3      	ldrh	r3, [r4, #12]
 80054ae:	075a      	lsls	r2, r3, #29
 80054b0:	d505      	bpl.n	80054be <__sflush_r+0x46>
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	1ac0      	subs	r0, r0, r3
 80054b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054b8:	b10b      	cbz	r3, 80054be <__sflush_r+0x46>
 80054ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054bc:	1ac0      	subs	r0, r0, r3
 80054be:	2300      	movs	r3, #0
 80054c0:	4602      	mov	r2, r0
 80054c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054c4:	6a21      	ldr	r1, [r4, #32]
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b0      	blx	r6
 80054ca:	1c43      	adds	r3, r0, #1
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	d106      	bne.n	80054de <__sflush_r+0x66>
 80054d0:	6829      	ldr	r1, [r5, #0]
 80054d2:	291d      	cmp	r1, #29
 80054d4:	d82c      	bhi.n	8005530 <__sflush_r+0xb8>
 80054d6:	4a2a      	ldr	r2, [pc, #168]	; (8005580 <__sflush_r+0x108>)
 80054d8:	40ca      	lsrs	r2, r1
 80054da:	07d6      	lsls	r6, r2, #31
 80054dc:	d528      	bpl.n	8005530 <__sflush_r+0xb8>
 80054de:	2200      	movs	r2, #0
 80054e0:	6062      	str	r2, [r4, #4]
 80054e2:	04d9      	lsls	r1, r3, #19
 80054e4:	6922      	ldr	r2, [r4, #16]
 80054e6:	6022      	str	r2, [r4, #0]
 80054e8:	d504      	bpl.n	80054f4 <__sflush_r+0x7c>
 80054ea:	1c42      	adds	r2, r0, #1
 80054ec:	d101      	bne.n	80054f2 <__sflush_r+0x7a>
 80054ee:	682b      	ldr	r3, [r5, #0]
 80054f0:	b903      	cbnz	r3, 80054f4 <__sflush_r+0x7c>
 80054f2:	6560      	str	r0, [r4, #84]	; 0x54
 80054f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80054f6:	602f      	str	r7, [r5, #0]
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d0ca      	beq.n	8005492 <__sflush_r+0x1a>
 80054fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005500:	4299      	cmp	r1, r3
 8005502:	d002      	beq.n	800550a <__sflush_r+0x92>
 8005504:	4628      	mov	r0, r5
 8005506:	f000 f9d7 	bl	80058b8 <_free_r>
 800550a:	2000      	movs	r0, #0
 800550c:	6360      	str	r0, [r4, #52]	; 0x34
 800550e:	e7c1      	b.n	8005494 <__sflush_r+0x1c>
 8005510:	6a21      	ldr	r1, [r4, #32]
 8005512:	2301      	movs	r3, #1
 8005514:	4628      	mov	r0, r5
 8005516:	47b0      	blx	r6
 8005518:	1c41      	adds	r1, r0, #1
 800551a:	d1c7      	bne.n	80054ac <__sflush_r+0x34>
 800551c:	682b      	ldr	r3, [r5, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0c4      	beq.n	80054ac <__sflush_r+0x34>
 8005522:	2b1d      	cmp	r3, #29
 8005524:	d001      	beq.n	800552a <__sflush_r+0xb2>
 8005526:	2b16      	cmp	r3, #22
 8005528:	d101      	bne.n	800552e <__sflush_r+0xb6>
 800552a:	602f      	str	r7, [r5, #0]
 800552c:	e7b1      	b.n	8005492 <__sflush_r+0x1a>
 800552e:	89a3      	ldrh	r3, [r4, #12]
 8005530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005534:	81a3      	strh	r3, [r4, #12]
 8005536:	e7ad      	b.n	8005494 <__sflush_r+0x1c>
 8005538:	690f      	ldr	r7, [r1, #16]
 800553a:	2f00      	cmp	r7, #0
 800553c:	d0a9      	beq.n	8005492 <__sflush_r+0x1a>
 800553e:	0793      	lsls	r3, r2, #30
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	bf08      	it	eq
 8005544:	694b      	ldreq	r3, [r1, #20]
 8005546:	600f      	str	r7, [r1, #0]
 8005548:	bf18      	it	ne
 800554a:	2300      	movne	r3, #0
 800554c:	eba6 0807 	sub.w	r8, r6, r7
 8005550:	608b      	str	r3, [r1, #8]
 8005552:	f1b8 0f00 	cmp.w	r8, #0
 8005556:	dd9c      	ble.n	8005492 <__sflush_r+0x1a>
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800555c:	4643      	mov	r3, r8
 800555e:	463a      	mov	r2, r7
 8005560:	4628      	mov	r0, r5
 8005562:	47b0      	blx	r6
 8005564:	2800      	cmp	r0, #0
 8005566:	dc06      	bgt.n	8005576 <__sflush_r+0xfe>
 8005568:	89a3      	ldrh	r3, [r4, #12]
 800556a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800556e:	81a3      	strh	r3, [r4, #12]
 8005570:	f04f 30ff 	mov.w	r0, #4294967295
 8005574:	e78e      	b.n	8005494 <__sflush_r+0x1c>
 8005576:	4407      	add	r7, r0
 8005578:	eba8 0800 	sub.w	r8, r8, r0
 800557c:	e7e9      	b.n	8005552 <__sflush_r+0xda>
 800557e:	bf00      	nop
 8005580:	20400001 	.word	0x20400001

08005584 <_fflush_r>:
 8005584:	b538      	push	{r3, r4, r5, lr}
 8005586:	690b      	ldr	r3, [r1, #16]
 8005588:	4605      	mov	r5, r0
 800558a:	460c      	mov	r4, r1
 800558c:	b913      	cbnz	r3, 8005594 <_fflush_r+0x10>
 800558e:	2500      	movs	r5, #0
 8005590:	4628      	mov	r0, r5
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	b118      	cbz	r0, 800559e <_fflush_r+0x1a>
 8005596:	6983      	ldr	r3, [r0, #24]
 8005598:	b90b      	cbnz	r3, 800559e <_fflush_r+0x1a>
 800559a:	f000 f887 	bl	80056ac <__sinit>
 800559e:	4b14      	ldr	r3, [pc, #80]	; (80055f0 <_fflush_r+0x6c>)
 80055a0:	429c      	cmp	r4, r3
 80055a2:	d11b      	bne.n	80055dc <_fflush_r+0x58>
 80055a4:	686c      	ldr	r4, [r5, #4]
 80055a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0ef      	beq.n	800558e <_fflush_r+0xa>
 80055ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055b0:	07d0      	lsls	r0, r2, #31
 80055b2:	d404      	bmi.n	80055be <_fflush_r+0x3a>
 80055b4:	0599      	lsls	r1, r3, #22
 80055b6:	d402      	bmi.n	80055be <_fflush_r+0x3a>
 80055b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ba:	f000 f915 	bl	80057e8 <__retarget_lock_acquire_recursive>
 80055be:	4628      	mov	r0, r5
 80055c0:	4621      	mov	r1, r4
 80055c2:	f7ff ff59 	bl	8005478 <__sflush_r>
 80055c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055c8:	07da      	lsls	r2, r3, #31
 80055ca:	4605      	mov	r5, r0
 80055cc:	d4e0      	bmi.n	8005590 <_fflush_r+0xc>
 80055ce:	89a3      	ldrh	r3, [r4, #12]
 80055d0:	059b      	lsls	r3, r3, #22
 80055d2:	d4dd      	bmi.n	8005590 <_fflush_r+0xc>
 80055d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055d6:	f000 f908 	bl	80057ea <__retarget_lock_release_recursive>
 80055da:	e7d9      	b.n	8005590 <_fflush_r+0xc>
 80055dc:	4b05      	ldr	r3, [pc, #20]	; (80055f4 <_fflush_r+0x70>)
 80055de:	429c      	cmp	r4, r3
 80055e0:	d101      	bne.n	80055e6 <_fflush_r+0x62>
 80055e2:	68ac      	ldr	r4, [r5, #8]
 80055e4:	e7df      	b.n	80055a6 <_fflush_r+0x22>
 80055e6:	4b04      	ldr	r3, [pc, #16]	; (80055f8 <_fflush_r+0x74>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	bf08      	it	eq
 80055ec:	68ec      	ldreq	r4, [r5, #12]
 80055ee:	e7da      	b.n	80055a6 <_fflush_r+0x22>
 80055f0:	08005fd4 	.word	0x08005fd4
 80055f4:	08005ff4 	.word	0x08005ff4
 80055f8:	08005fb4 	.word	0x08005fb4

080055fc <std>:
 80055fc:	2300      	movs	r3, #0
 80055fe:	b510      	push	{r4, lr}
 8005600:	4604      	mov	r4, r0
 8005602:	e9c0 3300 	strd	r3, r3, [r0]
 8005606:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800560a:	6083      	str	r3, [r0, #8]
 800560c:	8181      	strh	r1, [r0, #12]
 800560e:	6643      	str	r3, [r0, #100]	; 0x64
 8005610:	81c2      	strh	r2, [r0, #14]
 8005612:	6183      	str	r3, [r0, #24]
 8005614:	4619      	mov	r1, r3
 8005616:	2208      	movs	r2, #8
 8005618:	305c      	adds	r0, #92	; 0x5c
 800561a:	f7ff fb57 	bl	8004ccc <memset>
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <std+0x38>)
 8005620:	6263      	str	r3, [r4, #36]	; 0x24
 8005622:	4b05      	ldr	r3, [pc, #20]	; (8005638 <std+0x3c>)
 8005624:	62a3      	str	r3, [r4, #40]	; 0x28
 8005626:	4b05      	ldr	r3, [pc, #20]	; (800563c <std+0x40>)
 8005628:	62e3      	str	r3, [r4, #44]	; 0x2c
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <std+0x44>)
 800562c:	6224      	str	r4, [r4, #32]
 800562e:	6323      	str	r3, [r4, #48]	; 0x30
 8005630:	bd10      	pop	{r4, pc}
 8005632:	bf00      	nop
 8005634:	08005b21 	.word	0x08005b21
 8005638:	08005b43 	.word	0x08005b43
 800563c:	08005b7b 	.word	0x08005b7b
 8005640:	08005b9f 	.word	0x08005b9f

08005644 <_cleanup_r>:
 8005644:	4901      	ldr	r1, [pc, #4]	; (800564c <_cleanup_r+0x8>)
 8005646:	f000 b8af 	b.w	80057a8 <_fwalk_reent>
 800564a:	bf00      	nop
 800564c:	08005585 	.word	0x08005585

08005650 <__sfmoreglue>:
 8005650:	b570      	push	{r4, r5, r6, lr}
 8005652:	2268      	movs	r2, #104	; 0x68
 8005654:	1e4d      	subs	r5, r1, #1
 8005656:	4355      	muls	r5, r2
 8005658:	460e      	mov	r6, r1
 800565a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800565e:	f000 f997 	bl	8005990 <_malloc_r>
 8005662:	4604      	mov	r4, r0
 8005664:	b140      	cbz	r0, 8005678 <__sfmoreglue+0x28>
 8005666:	2100      	movs	r1, #0
 8005668:	e9c0 1600 	strd	r1, r6, [r0]
 800566c:	300c      	adds	r0, #12
 800566e:	60a0      	str	r0, [r4, #8]
 8005670:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005674:	f7ff fb2a 	bl	8004ccc <memset>
 8005678:	4620      	mov	r0, r4
 800567a:	bd70      	pop	{r4, r5, r6, pc}

0800567c <__sfp_lock_acquire>:
 800567c:	4801      	ldr	r0, [pc, #4]	; (8005684 <__sfp_lock_acquire+0x8>)
 800567e:	f000 b8b3 	b.w	80057e8 <__retarget_lock_acquire_recursive>
 8005682:	bf00      	nop
 8005684:	20000201 	.word	0x20000201

08005688 <__sfp_lock_release>:
 8005688:	4801      	ldr	r0, [pc, #4]	; (8005690 <__sfp_lock_release+0x8>)
 800568a:	f000 b8ae 	b.w	80057ea <__retarget_lock_release_recursive>
 800568e:	bf00      	nop
 8005690:	20000201 	.word	0x20000201

08005694 <__sinit_lock_acquire>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__sinit_lock_acquire+0x8>)
 8005696:	f000 b8a7 	b.w	80057e8 <__retarget_lock_acquire_recursive>
 800569a:	bf00      	nop
 800569c:	20000202 	.word	0x20000202

080056a0 <__sinit_lock_release>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__sinit_lock_release+0x8>)
 80056a2:	f000 b8a2 	b.w	80057ea <__retarget_lock_release_recursive>
 80056a6:	bf00      	nop
 80056a8:	20000202 	.word	0x20000202

080056ac <__sinit>:
 80056ac:	b510      	push	{r4, lr}
 80056ae:	4604      	mov	r4, r0
 80056b0:	f7ff fff0 	bl	8005694 <__sinit_lock_acquire>
 80056b4:	69a3      	ldr	r3, [r4, #24]
 80056b6:	b11b      	cbz	r3, 80056c0 <__sinit+0x14>
 80056b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056bc:	f7ff bff0 	b.w	80056a0 <__sinit_lock_release>
 80056c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056c4:	6523      	str	r3, [r4, #80]	; 0x50
 80056c6:	4b13      	ldr	r3, [pc, #76]	; (8005714 <__sinit+0x68>)
 80056c8:	4a13      	ldr	r2, [pc, #76]	; (8005718 <__sinit+0x6c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80056ce:	42a3      	cmp	r3, r4
 80056d0:	bf04      	itt	eq
 80056d2:	2301      	moveq	r3, #1
 80056d4:	61a3      	streq	r3, [r4, #24]
 80056d6:	4620      	mov	r0, r4
 80056d8:	f000 f820 	bl	800571c <__sfp>
 80056dc:	6060      	str	r0, [r4, #4]
 80056de:	4620      	mov	r0, r4
 80056e0:	f000 f81c 	bl	800571c <__sfp>
 80056e4:	60a0      	str	r0, [r4, #8]
 80056e6:	4620      	mov	r0, r4
 80056e8:	f000 f818 	bl	800571c <__sfp>
 80056ec:	2200      	movs	r2, #0
 80056ee:	60e0      	str	r0, [r4, #12]
 80056f0:	2104      	movs	r1, #4
 80056f2:	6860      	ldr	r0, [r4, #4]
 80056f4:	f7ff ff82 	bl	80055fc <std>
 80056f8:	68a0      	ldr	r0, [r4, #8]
 80056fa:	2201      	movs	r2, #1
 80056fc:	2109      	movs	r1, #9
 80056fe:	f7ff ff7d 	bl	80055fc <std>
 8005702:	68e0      	ldr	r0, [r4, #12]
 8005704:	2202      	movs	r2, #2
 8005706:	2112      	movs	r1, #18
 8005708:	f7ff ff78 	bl	80055fc <std>
 800570c:	2301      	movs	r3, #1
 800570e:	61a3      	str	r3, [r4, #24]
 8005710:	e7d2      	b.n	80056b8 <__sinit+0xc>
 8005712:	bf00      	nop
 8005714:	08005f7c 	.word	0x08005f7c
 8005718:	08005645 	.word	0x08005645

0800571c <__sfp>:
 800571c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571e:	4607      	mov	r7, r0
 8005720:	f7ff ffac 	bl	800567c <__sfp_lock_acquire>
 8005724:	4b1e      	ldr	r3, [pc, #120]	; (80057a0 <__sfp+0x84>)
 8005726:	681e      	ldr	r6, [r3, #0]
 8005728:	69b3      	ldr	r3, [r6, #24]
 800572a:	b913      	cbnz	r3, 8005732 <__sfp+0x16>
 800572c:	4630      	mov	r0, r6
 800572e:	f7ff ffbd 	bl	80056ac <__sinit>
 8005732:	3648      	adds	r6, #72	; 0x48
 8005734:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005738:	3b01      	subs	r3, #1
 800573a:	d503      	bpl.n	8005744 <__sfp+0x28>
 800573c:	6833      	ldr	r3, [r6, #0]
 800573e:	b30b      	cbz	r3, 8005784 <__sfp+0x68>
 8005740:	6836      	ldr	r6, [r6, #0]
 8005742:	e7f7      	b.n	8005734 <__sfp+0x18>
 8005744:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005748:	b9d5      	cbnz	r5, 8005780 <__sfp+0x64>
 800574a:	4b16      	ldr	r3, [pc, #88]	; (80057a4 <__sfp+0x88>)
 800574c:	60e3      	str	r3, [r4, #12]
 800574e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005752:	6665      	str	r5, [r4, #100]	; 0x64
 8005754:	f000 f847 	bl	80057e6 <__retarget_lock_init_recursive>
 8005758:	f7ff ff96 	bl	8005688 <__sfp_lock_release>
 800575c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005760:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005764:	6025      	str	r5, [r4, #0]
 8005766:	61a5      	str	r5, [r4, #24]
 8005768:	2208      	movs	r2, #8
 800576a:	4629      	mov	r1, r5
 800576c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005770:	f7ff faac 	bl	8004ccc <memset>
 8005774:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005778:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800577c:	4620      	mov	r0, r4
 800577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005780:	3468      	adds	r4, #104	; 0x68
 8005782:	e7d9      	b.n	8005738 <__sfp+0x1c>
 8005784:	2104      	movs	r1, #4
 8005786:	4638      	mov	r0, r7
 8005788:	f7ff ff62 	bl	8005650 <__sfmoreglue>
 800578c:	4604      	mov	r4, r0
 800578e:	6030      	str	r0, [r6, #0]
 8005790:	2800      	cmp	r0, #0
 8005792:	d1d5      	bne.n	8005740 <__sfp+0x24>
 8005794:	f7ff ff78 	bl	8005688 <__sfp_lock_release>
 8005798:	230c      	movs	r3, #12
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	e7ee      	b.n	800577c <__sfp+0x60>
 800579e:	bf00      	nop
 80057a0:	08005f7c 	.word	0x08005f7c
 80057a4:	ffff0001 	.word	0xffff0001

080057a8 <_fwalk_reent>:
 80057a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057ac:	4606      	mov	r6, r0
 80057ae:	4688      	mov	r8, r1
 80057b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057b4:	2700      	movs	r7, #0
 80057b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ba:	f1b9 0901 	subs.w	r9, r9, #1
 80057be:	d505      	bpl.n	80057cc <_fwalk_reent+0x24>
 80057c0:	6824      	ldr	r4, [r4, #0]
 80057c2:	2c00      	cmp	r4, #0
 80057c4:	d1f7      	bne.n	80057b6 <_fwalk_reent+0xe>
 80057c6:	4638      	mov	r0, r7
 80057c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057cc:	89ab      	ldrh	r3, [r5, #12]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d907      	bls.n	80057e2 <_fwalk_reent+0x3a>
 80057d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057d6:	3301      	adds	r3, #1
 80057d8:	d003      	beq.n	80057e2 <_fwalk_reent+0x3a>
 80057da:	4629      	mov	r1, r5
 80057dc:	4630      	mov	r0, r6
 80057de:	47c0      	blx	r8
 80057e0:	4307      	orrs	r7, r0
 80057e2:	3568      	adds	r5, #104	; 0x68
 80057e4:	e7e9      	b.n	80057ba <_fwalk_reent+0x12>

080057e6 <__retarget_lock_init_recursive>:
 80057e6:	4770      	bx	lr

080057e8 <__retarget_lock_acquire_recursive>:
 80057e8:	4770      	bx	lr

080057ea <__retarget_lock_release_recursive>:
 80057ea:	4770      	bx	lr

080057ec <__swhatbuf_r>:
 80057ec:	b570      	push	{r4, r5, r6, lr}
 80057ee:	460e      	mov	r6, r1
 80057f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f4:	2900      	cmp	r1, #0
 80057f6:	b096      	sub	sp, #88	; 0x58
 80057f8:	4614      	mov	r4, r2
 80057fa:	461d      	mov	r5, r3
 80057fc:	da08      	bge.n	8005810 <__swhatbuf_r+0x24>
 80057fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	602a      	str	r2, [r5, #0]
 8005806:	061a      	lsls	r2, r3, #24
 8005808:	d410      	bmi.n	800582c <__swhatbuf_r+0x40>
 800580a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580e:	e00e      	b.n	800582e <__swhatbuf_r+0x42>
 8005810:	466a      	mov	r2, sp
 8005812:	f000 f9eb 	bl	8005bec <_fstat_r>
 8005816:	2800      	cmp	r0, #0
 8005818:	dbf1      	blt.n	80057fe <__swhatbuf_r+0x12>
 800581a:	9a01      	ldr	r2, [sp, #4]
 800581c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005820:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005824:	425a      	negs	r2, r3
 8005826:	415a      	adcs	r2, r3
 8005828:	602a      	str	r2, [r5, #0]
 800582a:	e7ee      	b.n	800580a <__swhatbuf_r+0x1e>
 800582c:	2340      	movs	r3, #64	; 0x40
 800582e:	2000      	movs	r0, #0
 8005830:	6023      	str	r3, [r4, #0]
 8005832:	b016      	add	sp, #88	; 0x58
 8005834:	bd70      	pop	{r4, r5, r6, pc}
	...

08005838 <__smakebuf_r>:
 8005838:	898b      	ldrh	r3, [r1, #12]
 800583a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800583c:	079d      	lsls	r5, r3, #30
 800583e:	4606      	mov	r6, r0
 8005840:	460c      	mov	r4, r1
 8005842:	d507      	bpl.n	8005854 <__smakebuf_r+0x1c>
 8005844:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	6123      	str	r3, [r4, #16]
 800584c:	2301      	movs	r3, #1
 800584e:	6163      	str	r3, [r4, #20]
 8005850:	b002      	add	sp, #8
 8005852:	bd70      	pop	{r4, r5, r6, pc}
 8005854:	ab01      	add	r3, sp, #4
 8005856:	466a      	mov	r2, sp
 8005858:	f7ff ffc8 	bl	80057ec <__swhatbuf_r>
 800585c:	9900      	ldr	r1, [sp, #0]
 800585e:	4605      	mov	r5, r0
 8005860:	4630      	mov	r0, r6
 8005862:	f000 f895 	bl	8005990 <_malloc_r>
 8005866:	b948      	cbnz	r0, 800587c <__smakebuf_r+0x44>
 8005868:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800586c:	059a      	lsls	r2, r3, #22
 800586e:	d4ef      	bmi.n	8005850 <__smakebuf_r+0x18>
 8005870:	f023 0303 	bic.w	r3, r3, #3
 8005874:	f043 0302 	orr.w	r3, r3, #2
 8005878:	81a3      	strh	r3, [r4, #12]
 800587a:	e7e3      	b.n	8005844 <__smakebuf_r+0xc>
 800587c:	4b0d      	ldr	r3, [pc, #52]	; (80058b4 <__smakebuf_r+0x7c>)
 800587e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005880:	89a3      	ldrh	r3, [r4, #12]
 8005882:	6020      	str	r0, [r4, #0]
 8005884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005888:	81a3      	strh	r3, [r4, #12]
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	6163      	str	r3, [r4, #20]
 800588e:	9b01      	ldr	r3, [sp, #4]
 8005890:	6120      	str	r0, [r4, #16]
 8005892:	b15b      	cbz	r3, 80058ac <__smakebuf_r+0x74>
 8005894:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005898:	4630      	mov	r0, r6
 800589a:	f000 f9b9 	bl	8005c10 <_isatty_r>
 800589e:	b128      	cbz	r0, 80058ac <__smakebuf_r+0x74>
 80058a0:	89a3      	ldrh	r3, [r4, #12]
 80058a2:	f023 0303 	bic.w	r3, r3, #3
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	81a3      	strh	r3, [r4, #12]
 80058ac:	89a0      	ldrh	r0, [r4, #12]
 80058ae:	4305      	orrs	r5, r0
 80058b0:	81a5      	strh	r5, [r4, #12]
 80058b2:	e7cd      	b.n	8005850 <__smakebuf_r+0x18>
 80058b4:	08005645 	.word	0x08005645

080058b8 <_free_r>:
 80058b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ba:	2900      	cmp	r1, #0
 80058bc:	d044      	beq.n	8005948 <_free_r+0x90>
 80058be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058c2:	9001      	str	r0, [sp, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f1a1 0404 	sub.w	r4, r1, #4
 80058ca:	bfb8      	it	lt
 80058cc:	18e4      	addlt	r4, r4, r3
 80058ce:	f000 f9c1 	bl	8005c54 <__malloc_lock>
 80058d2:	4a1e      	ldr	r2, [pc, #120]	; (800594c <_free_r+0x94>)
 80058d4:	9801      	ldr	r0, [sp, #4]
 80058d6:	6813      	ldr	r3, [r2, #0]
 80058d8:	b933      	cbnz	r3, 80058e8 <_free_r+0x30>
 80058da:	6063      	str	r3, [r4, #4]
 80058dc:	6014      	str	r4, [r2, #0]
 80058de:	b003      	add	sp, #12
 80058e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058e4:	f000 b9bc 	b.w	8005c60 <__malloc_unlock>
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	d908      	bls.n	80058fe <_free_r+0x46>
 80058ec:	6825      	ldr	r5, [r4, #0]
 80058ee:	1961      	adds	r1, r4, r5
 80058f0:	428b      	cmp	r3, r1
 80058f2:	bf01      	itttt	eq
 80058f4:	6819      	ldreq	r1, [r3, #0]
 80058f6:	685b      	ldreq	r3, [r3, #4]
 80058f8:	1949      	addeq	r1, r1, r5
 80058fa:	6021      	streq	r1, [r4, #0]
 80058fc:	e7ed      	b.n	80058da <_free_r+0x22>
 80058fe:	461a      	mov	r2, r3
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	b10b      	cbz	r3, 8005908 <_free_r+0x50>
 8005904:	42a3      	cmp	r3, r4
 8005906:	d9fa      	bls.n	80058fe <_free_r+0x46>
 8005908:	6811      	ldr	r1, [r2, #0]
 800590a:	1855      	adds	r5, r2, r1
 800590c:	42a5      	cmp	r5, r4
 800590e:	d10b      	bne.n	8005928 <_free_r+0x70>
 8005910:	6824      	ldr	r4, [r4, #0]
 8005912:	4421      	add	r1, r4
 8005914:	1854      	adds	r4, r2, r1
 8005916:	42a3      	cmp	r3, r4
 8005918:	6011      	str	r1, [r2, #0]
 800591a:	d1e0      	bne.n	80058de <_free_r+0x26>
 800591c:	681c      	ldr	r4, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6053      	str	r3, [r2, #4]
 8005922:	4421      	add	r1, r4
 8005924:	6011      	str	r1, [r2, #0]
 8005926:	e7da      	b.n	80058de <_free_r+0x26>
 8005928:	d902      	bls.n	8005930 <_free_r+0x78>
 800592a:	230c      	movs	r3, #12
 800592c:	6003      	str	r3, [r0, #0]
 800592e:	e7d6      	b.n	80058de <_free_r+0x26>
 8005930:	6825      	ldr	r5, [r4, #0]
 8005932:	1961      	adds	r1, r4, r5
 8005934:	428b      	cmp	r3, r1
 8005936:	bf04      	itt	eq
 8005938:	6819      	ldreq	r1, [r3, #0]
 800593a:	685b      	ldreq	r3, [r3, #4]
 800593c:	6063      	str	r3, [r4, #4]
 800593e:	bf04      	itt	eq
 8005940:	1949      	addeq	r1, r1, r5
 8005942:	6021      	streq	r1, [r4, #0]
 8005944:	6054      	str	r4, [r2, #4]
 8005946:	e7ca      	b.n	80058de <_free_r+0x26>
 8005948:	b003      	add	sp, #12
 800594a:	bd30      	pop	{r4, r5, pc}
 800594c:	20000204 	.word	0x20000204

08005950 <sbrk_aligned>:
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	4e0e      	ldr	r6, [pc, #56]	; (800598c <sbrk_aligned+0x3c>)
 8005954:	460c      	mov	r4, r1
 8005956:	6831      	ldr	r1, [r6, #0]
 8005958:	4605      	mov	r5, r0
 800595a:	b911      	cbnz	r1, 8005962 <sbrk_aligned+0x12>
 800595c:	f000 f88c 	bl	8005a78 <_sbrk_r>
 8005960:	6030      	str	r0, [r6, #0]
 8005962:	4621      	mov	r1, r4
 8005964:	4628      	mov	r0, r5
 8005966:	f000 f887 	bl	8005a78 <_sbrk_r>
 800596a:	1c43      	adds	r3, r0, #1
 800596c:	d00a      	beq.n	8005984 <sbrk_aligned+0x34>
 800596e:	1cc4      	adds	r4, r0, #3
 8005970:	f024 0403 	bic.w	r4, r4, #3
 8005974:	42a0      	cmp	r0, r4
 8005976:	d007      	beq.n	8005988 <sbrk_aligned+0x38>
 8005978:	1a21      	subs	r1, r4, r0
 800597a:	4628      	mov	r0, r5
 800597c:	f000 f87c 	bl	8005a78 <_sbrk_r>
 8005980:	3001      	adds	r0, #1
 8005982:	d101      	bne.n	8005988 <sbrk_aligned+0x38>
 8005984:	f04f 34ff 	mov.w	r4, #4294967295
 8005988:	4620      	mov	r0, r4
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	20000208 	.word	0x20000208

08005990 <_malloc_r>:
 8005990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005994:	1ccd      	adds	r5, r1, #3
 8005996:	f025 0503 	bic.w	r5, r5, #3
 800599a:	3508      	adds	r5, #8
 800599c:	2d0c      	cmp	r5, #12
 800599e:	bf38      	it	cc
 80059a0:	250c      	movcc	r5, #12
 80059a2:	2d00      	cmp	r5, #0
 80059a4:	4607      	mov	r7, r0
 80059a6:	db01      	blt.n	80059ac <_malloc_r+0x1c>
 80059a8:	42a9      	cmp	r1, r5
 80059aa:	d905      	bls.n	80059b8 <_malloc_r+0x28>
 80059ac:	230c      	movs	r3, #12
 80059ae:	603b      	str	r3, [r7, #0]
 80059b0:	2600      	movs	r6, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059b8:	4e2e      	ldr	r6, [pc, #184]	; (8005a74 <_malloc_r+0xe4>)
 80059ba:	f000 f94b 	bl	8005c54 <__malloc_lock>
 80059be:	6833      	ldr	r3, [r6, #0]
 80059c0:	461c      	mov	r4, r3
 80059c2:	bb34      	cbnz	r4, 8005a12 <_malloc_r+0x82>
 80059c4:	4629      	mov	r1, r5
 80059c6:	4638      	mov	r0, r7
 80059c8:	f7ff ffc2 	bl	8005950 <sbrk_aligned>
 80059cc:	1c43      	adds	r3, r0, #1
 80059ce:	4604      	mov	r4, r0
 80059d0:	d14d      	bne.n	8005a6e <_malloc_r+0xde>
 80059d2:	6834      	ldr	r4, [r6, #0]
 80059d4:	4626      	mov	r6, r4
 80059d6:	2e00      	cmp	r6, #0
 80059d8:	d140      	bne.n	8005a5c <_malloc_r+0xcc>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	4631      	mov	r1, r6
 80059de:	4638      	mov	r0, r7
 80059e0:	eb04 0803 	add.w	r8, r4, r3
 80059e4:	f000 f848 	bl	8005a78 <_sbrk_r>
 80059e8:	4580      	cmp	r8, r0
 80059ea:	d13a      	bne.n	8005a62 <_malloc_r+0xd2>
 80059ec:	6821      	ldr	r1, [r4, #0]
 80059ee:	3503      	adds	r5, #3
 80059f0:	1a6d      	subs	r5, r5, r1
 80059f2:	f025 0503 	bic.w	r5, r5, #3
 80059f6:	3508      	adds	r5, #8
 80059f8:	2d0c      	cmp	r5, #12
 80059fa:	bf38      	it	cc
 80059fc:	250c      	movcc	r5, #12
 80059fe:	4629      	mov	r1, r5
 8005a00:	4638      	mov	r0, r7
 8005a02:	f7ff ffa5 	bl	8005950 <sbrk_aligned>
 8005a06:	3001      	adds	r0, #1
 8005a08:	d02b      	beq.n	8005a62 <_malloc_r+0xd2>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	442b      	add	r3, r5
 8005a0e:	6023      	str	r3, [r4, #0]
 8005a10:	e00e      	b.n	8005a30 <_malloc_r+0xa0>
 8005a12:	6822      	ldr	r2, [r4, #0]
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	d41e      	bmi.n	8005a56 <_malloc_r+0xc6>
 8005a18:	2a0b      	cmp	r2, #11
 8005a1a:	d916      	bls.n	8005a4a <_malloc_r+0xba>
 8005a1c:	1961      	adds	r1, r4, r5
 8005a1e:	42a3      	cmp	r3, r4
 8005a20:	6025      	str	r5, [r4, #0]
 8005a22:	bf18      	it	ne
 8005a24:	6059      	strne	r1, [r3, #4]
 8005a26:	6863      	ldr	r3, [r4, #4]
 8005a28:	bf08      	it	eq
 8005a2a:	6031      	streq	r1, [r6, #0]
 8005a2c:	5162      	str	r2, [r4, r5]
 8005a2e:	604b      	str	r3, [r1, #4]
 8005a30:	4638      	mov	r0, r7
 8005a32:	f104 060b 	add.w	r6, r4, #11
 8005a36:	f000 f913 	bl	8005c60 <__malloc_unlock>
 8005a3a:	f026 0607 	bic.w	r6, r6, #7
 8005a3e:	1d23      	adds	r3, r4, #4
 8005a40:	1af2      	subs	r2, r6, r3
 8005a42:	d0b6      	beq.n	80059b2 <_malloc_r+0x22>
 8005a44:	1b9b      	subs	r3, r3, r6
 8005a46:	50a3      	str	r3, [r4, r2]
 8005a48:	e7b3      	b.n	80059b2 <_malloc_r+0x22>
 8005a4a:	6862      	ldr	r2, [r4, #4]
 8005a4c:	42a3      	cmp	r3, r4
 8005a4e:	bf0c      	ite	eq
 8005a50:	6032      	streq	r2, [r6, #0]
 8005a52:	605a      	strne	r2, [r3, #4]
 8005a54:	e7ec      	b.n	8005a30 <_malloc_r+0xa0>
 8005a56:	4623      	mov	r3, r4
 8005a58:	6864      	ldr	r4, [r4, #4]
 8005a5a:	e7b2      	b.n	80059c2 <_malloc_r+0x32>
 8005a5c:	4634      	mov	r4, r6
 8005a5e:	6876      	ldr	r6, [r6, #4]
 8005a60:	e7b9      	b.n	80059d6 <_malloc_r+0x46>
 8005a62:	230c      	movs	r3, #12
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	4638      	mov	r0, r7
 8005a68:	f000 f8fa 	bl	8005c60 <__malloc_unlock>
 8005a6c:	e7a1      	b.n	80059b2 <_malloc_r+0x22>
 8005a6e:	6025      	str	r5, [r4, #0]
 8005a70:	e7de      	b.n	8005a30 <_malloc_r+0xa0>
 8005a72:	bf00      	nop
 8005a74:	20000204 	.word	0x20000204

08005a78 <_sbrk_r>:
 8005a78:	b538      	push	{r3, r4, r5, lr}
 8005a7a:	4d06      	ldr	r5, [pc, #24]	; (8005a94 <_sbrk_r+0x1c>)
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	4604      	mov	r4, r0
 8005a80:	4608      	mov	r0, r1
 8005a82:	602b      	str	r3, [r5, #0]
 8005a84:	f7fb fd4e 	bl	8001524 <_sbrk>
 8005a88:	1c43      	adds	r3, r0, #1
 8005a8a:	d102      	bne.n	8005a92 <_sbrk_r+0x1a>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	b103      	cbz	r3, 8005a92 <_sbrk_r+0x1a>
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	bd38      	pop	{r3, r4, r5, pc}
 8005a94:	2000020c 	.word	0x2000020c

08005a98 <_raise_r>:
 8005a98:	291f      	cmp	r1, #31
 8005a9a:	b538      	push	{r3, r4, r5, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	460d      	mov	r5, r1
 8005aa0:	d904      	bls.n	8005aac <_raise_r+0x14>
 8005aa2:	2316      	movs	r3, #22
 8005aa4:	6003      	str	r3, [r0, #0]
 8005aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}
 8005aac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005aae:	b112      	cbz	r2, 8005ab6 <_raise_r+0x1e>
 8005ab0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ab4:	b94b      	cbnz	r3, 8005aca <_raise_r+0x32>
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	f000 f830 	bl	8005b1c <_getpid_r>
 8005abc:	462a      	mov	r2, r5
 8005abe:	4601      	mov	r1, r0
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ac6:	f000 b817 	b.w	8005af8 <_kill_r>
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d00a      	beq.n	8005ae4 <_raise_r+0x4c>
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	d103      	bne.n	8005ada <_raise_r+0x42>
 8005ad2:	2316      	movs	r3, #22
 8005ad4:	6003      	str	r3, [r0, #0]
 8005ad6:	2001      	movs	r0, #1
 8005ad8:	e7e7      	b.n	8005aaa <_raise_r+0x12>
 8005ada:	2400      	movs	r4, #0
 8005adc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	4798      	blx	r3
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	e7e0      	b.n	8005aaa <_raise_r+0x12>

08005ae8 <raise>:
 8005ae8:	4b02      	ldr	r3, [pc, #8]	; (8005af4 <raise+0xc>)
 8005aea:	4601      	mov	r1, r0
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	f7ff bfd3 	b.w	8005a98 <_raise_r>
 8005af2:	bf00      	nop
 8005af4:	2000000c 	.word	0x2000000c

08005af8 <_kill_r>:
 8005af8:	b538      	push	{r3, r4, r5, lr}
 8005afa:	4d07      	ldr	r5, [pc, #28]	; (8005b18 <_kill_r+0x20>)
 8005afc:	2300      	movs	r3, #0
 8005afe:	4604      	mov	r4, r0
 8005b00:	4608      	mov	r0, r1
 8005b02:	4611      	mov	r1, r2
 8005b04:	602b      	str	r3, [r5, #0]
 8005b06:	f7fb fc85 	bl	8001414 <_kill>
 8005b0a:	1c43      	adds	r3, r0, #1
 8005b0c:	d102      	bne.n	8005b14 <_kill_r+0x1c>
 8005b0e:	682b      	ldr	r3, [r5, #0]
 8005b10:	b103      	cbz	r3, 8005b14 <_kill_r+0x1c>
 8005b12:	6023      	str	r3, [r4, #0]
 8005b14:	bd38      	pop	{r3, r4, r5, pc}
 8005b16:	bf00      	nop
 8005b18:	2000020c 	.word	0x2000020c

08005b1c <_getpid_r>:
 8005b1c:	f7fb bc72 	b.w	8001404 <_getpid>

08005b20 <__sread>:
 8005b20:	b510      	push	{r4, lr}
 8005b22:	460c      	mov	r4, r1
 8005b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b28:	f000 f8a0 	bl	8005c6c <_read_r>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	bfab      	itete	ge
 8005b30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b32:	89a3      	ldrhlt	r3, [r4, #12]
 8005b34:	181b      	addge	r3, r3, r0
 8005b36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b3a:	bfac      	ite	ge
 8005b3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b3e:	81a3      	strhlt	r3, [r4, #12]
 8005b40:	bd10      	pop	{r4, pc}

08005b42 <__swrite>:
 8005b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b46:	461f      	mov	r7, r3
 8005b48:	898b      	ldrh	r3, [r1, #12]
 8005b4a:	05db      	lsls	r3, r3, #23
 8005b4c:	4605      	mov	r5, r0
 8005b4e:	460c      	mov	r4, r1
 8005b50:	4616      	mov	r6, r2
 8005b52:	d505      	bpl.n	8005b60 <__swrite+0x1e>
 8005b54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b58:	2302      	movs	r3, #2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f000 f868 	bl	8005c30 <_lseek_r>
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b6a:	81a3      	strh	r3, [r4, #12]
 8005b6c:	4632      	mov	r2, r6
 8005b6e:	463b      	mov	r3, r7
 8005b70:	4628      	mov	r0, r5
 8005b72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b76:	f000 b817 	b.w	8005ba8 <_write_r>

08005b7a <__sseek>:
 8005b7a:	b510      	push	{r4, lr}
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b82:	f000 f855 	bl	8005c30 <_lseek_r>
 8005b86:	1c43      	adds	r3, r0, #1
 8005b88:	89a3      	ldrh	r3, [r4, #12]
 8005b8a:	bf15      	itete	ne
 8005b8c:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b96:	81a3      	strheq	r3, [r4, #12]
 8005b98:	bf18      	it	ne
 8005b9a:	81a3      	strhne	r3, [r4, #12]
 8005b9c:	bd10      	pop	{r4, pc}

08005b9e <__sclose>:
 8005b9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ba2:	f000 b813 	b.w	8005bcc <_close_r>
	...

08005ba8 <_write_r>:
 8005ba8:	b538      	push	{r3, r4, r5, lr}
 8005baa:	4d07      	ldr	r5, [pc, #28]	; (8005bc8 <_write_r+0x20>)
 8005bac:	4604      	mov	r4, r0
 8005bae:	4608      	mov	r0, r1
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	602a      	str	r2, [r5, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f7fb fc63 	bl	8001482 <_write>
 8005bbc:	1c43      	adds	r3, r0, #1
 8005bbe:	d102      	bne.n	8005bc6 <_write_r+0x1e>
 8005bc0:	682b      	ldr	r3, [r5, #0]
 8005bc2:	b103      	cbz	r3, 8005bc6 <_write_r+0x1e>
 8005bc4:	6023      	str	r3, [r4, #0]
 8005bc6:	bd38      	pop	{r3, r4, r5, pc}
 8005bc8:	2000020c 	.word	0x2000020c

08005bcc <_close_r>:
 8005bcc:	b538      	push	{r3, r4, r5, lr}
 8005bce:	4d06      	ldr	r5, [pc, #24]	; (8005be8 <_close_r+0x1c>)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	4604      	mov	r4, r0
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	f7fb fc6f 	bl	80014ba <_close>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d102      	bne.n	8005be6 <_close_r+0x1a>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	b103      	cbz	r3, 8005be6 <_close_r+0x1a>
 8005be4:	6023      	str	r3, [r4, #0]
 8005be6:	bd38      	pop	{r3, r4, r5, pc}
 8005be8:	2000020c 	.word	0x2000020c

08005bec <_fstat_r>:
 8005bec:	b538      	push	{r3, r4, r5, lr}
 8005bee:	4d07      	ldr	r5, [pc, #28]	; (8005c0c <_fstat_r+0x20>)
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	4604      	mov	r4, r0
 8005bf4:	4608      	mov	r0, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	602b      	str	r3, [r5, #0]
 8005bfa:	f7fb fc6a 	bl	80014d2 <_fstat>
 8005bfe:	1c43      	adds	r3, r0, #1
 8005c00:	d102      	bne.n	8005c08 <_fstat_r+0x1c>
 8005c02:	682b      	ldr	r3, [r5, #0]
 8005c04:	b103      	cbz	r3, 8005c08 <_fstat_r+0x1c>
 8005c06:	6023      	str	r3, [r4, #0]
 8005c08:	bd38      	pop	{r3, r4, r5, pc}
 8005c0a:	bf00      	nop
 8005c0c:	2000020c 	.word	0x2000020c

08005c10 <_isatty_r>:
 8005c10:	b538      	push	{r3, r4, r5, lr}
 8005c12:	4d06      	ldr	r5, [pc, #24]	; (8005c2c <_isatty_r+0x1c>)
 8005c14:	2300      	movs	r3, #0
 8005c16:	4604      	mov	r4, r0
 8005c18:	4608      	mov	r0, r1
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fb fc69 	bl	80014f2 <_isatty>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d102      	bne.n	8005c2a <_isatty_r+0x1a>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	b103      	cbz	r3, 8005c2a <_isatty_r+0x1a>
 8005c28:	6023      	str	r3, [r4, #0]
 8005c2a:	bd38      	pop	{r3, r4, r5, pc}
 8005c2c:	2000020c 	.word	0x2000020c

08005c30 <_lseek_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d07      	ldr	r5, [pc, #28]	; (8005c50 <_lseek_r+0x20>)
 8005c34:	4604      	mov	r4, r0
 8005c36:	4608      	mov	r0, r1
 8005c38:	4611      	mov	r1, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	602a      	str	r2, [r5, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	f7fb fc62 	bl	8001508 <_lseek>
 8005c44:	1c43      	adds	r3, r0, #1
 8005c46:	d102      	bne.n	8005c4e <_lseek_r+0x1e>
 8005c48:	682b      	ldr	r3, [r5, #0]
 8005c4a:	b103      	cbz	r3, 8005c4e <_lseek_r+0x1e>
 8005c4c:	6023      	str	r3, [r4, #0]
 8005c4e:	bd38      	pop	{r3, r4, r5, pc}
 8005c50:	2000020c 	.word	0x2000020c

08005c54 <__malloc_lock>:
 8005c54:	4801      	ldr	r0, [pc, #4]	; (8005c5c <__malloc_lock+0x8>)
 8005c56:	f7ff bdc7 	b.w	80057e8 <__retarget_lock_acquire_recursive>
 8005c5a:	bf00      	nop
 8005c5c:	20000200 	.word	0x20000200

08005c60 <__malloc_unlock>:
 8005c60:	4801      	ldr	r0, [pc, #4]	; (8005c68 <__malloc_unlock+0x8>)
 8005c62:	f7ff bdc2 	b.w	80057ea <__retarget_lock_release_recursive>
 8005c66:	bf00      	nop
 8005c68:	20000200 	.word	0x20000200

08005c6c <_read_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d07      	ldr	r5, [pc, #28]	; (8005c8c <_read_r+0x20>)
 8005c70:	4604      	mov	r4, r0
 8005c72:	4608      	mov	r0, r1
 8005c74:	4611      	mov	r1, r2
 8005c76:	2200      	movs	r2, #0
 8005c78:	602a      	str	r2, [r5, #0]
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	f7fb fbe4 	bl	8001448 <_read>
 8005c80:	1c43      	adds	r3, r0, #1
 8005c82:	d102      	bne.n	8005c8a <_read_r+0x1e>
 8005c84:	682b      	ldr	r3, [r5, #0]
 8005c86:	b103      	cbz	r3, 8005c8a <_read_r+0x1e>
 8005c88:	6023      	str	r3, [r4, #0]
 8005c8a:	bd38      	pop	{r3, r4, r5, pc}
 8005c8c:	2000020c 	.word	0x2000020c

08005c90 <_init>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr

08005c9c <_fini>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr
