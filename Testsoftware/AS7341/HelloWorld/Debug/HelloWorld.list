
HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08005494  08005494  00015494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d0  080056d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080056d0  080056d0  000156d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056d8  080056d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056dc  080056dc  000156dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080056e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  20000070  08005750  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08005750  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f754  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002275  00000000  00000000  0002f7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  00032860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000236c5  00000000  00000000  00033568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100cc  00000000  00000000  00056c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d259f  00000000  00000000  00066cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139298  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000410c  00000000  00000000  001392e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800547c 	.word	0x0800547c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800547c 	.word	0x0800547c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800058a:	f000 ff13 	bl	80013b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058e:	f000 f897 	bl	80006c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000592:	f000 f957 	bl	8000844 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000596:	f000 f925 	bl	80007e4 <MX_USART2_UART_Init>
	MX_I2C3_Init();
 800059a:	f000 f8e3 	bl	8000764 <MX_I2C3_Init>
	/* USER CODE BEGIN 2 */
	AS7341_Init(eSpm);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 fc3e 	bl	8000e20 <AS7341_Init>
	AS7341_ATIME_config(100);
 80005a4:	2064      	movs	r0, #100	; 0x64
 80005a6:	f000 fea7 	bl	80012f8 <AS7341_ATIME_config>
	AS7341_ASTEP_config(999);
 80005aa:	f240 30e7 	movw	r0, #999	; 0x3e7
 80005ae:	f000 feb1 	bl	8001314 <AS7341_ASTEP_config>
	AS7341_AGAIN_config(6);
 80005b2:	2006      	movs	r0, #6
 80005b4:	f000 fec7 	bl	8001346 <AS7341_AGAIN_config>
		//	strcpy((char*) buf, "Startup\r\n");
		//HAL_UART_Transmit(&huart2, buf, strlen((char*) buf), HAL_MAX_DELAY);

		sModeOneData_t data1;
		sModeTwoData_t data2;
		AS7341_startMeasure(eF1F4ClearNIR);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f000 fd8b 	bl	80010d4 <AS7341_startMeasure>
		data1 = AS7341_ReadSpectralDataOne();
 80005be:	f107 0310 	add.w	r3, r7, #16
 80005c2:	4618      	mov	r0, r3
 80005c4:	f000 fe1b 	bl	80011fe <AS7341_ReadSpectralDataOne>
		printf("channel1(405-425nm):\r\n");
 80005c8:	4831      	ldr	r0, [pc, #196]	; (8000690 <main+0x10c>)
 80005ca:	f003 ffd9 	bl	8004580 <puts>
		printf("%d\r\n", data1.channel1);
 80005ce:	8a3b      	ldrh	r3, [r7, #16]
 80005d0:	4619      	mov	r1, r3
 80005d2:	4830      	ldr	r0, [pc, #192]	; (8000694 <main+0x110>)
 80005d4:	f003 ff4e 	bl	8004474 <iprintf>
		printf("channel2(435-455nm):\r\n");
 80005d8:	482f      	ldr	r0, [pc, #188]	; (8000698 <main+0x114>)
 80005da:	f003 ffd1 	bl	8004580 <puts>
		printf("%d\r\n", data1.channel2);
 80005de:	8a7b      	ldrh	r3, [r7, #18]
 80005e0:	4619      	mov	r1, r3
 80005e2:	482c      	ldr	r0, [pc, #176]	; (8000694 <main+0x110>)
 80005e4:	f003 ff46 	bl	8004474 <iprintf>
		printf("channel3(470-490nm):\r\n");
 80005e8:	482c      	ldr	r0, [pc, #176]	; (800069c <main+0x118>)
 80005ea:	f003 ffc9 	bl	8004580 <puts>
		printf("%d\r\n", data1.channel3);
 80005ee:	8abb      	ldrh	r3, [r7, #20]
 80005f0:	4619      	mov	r1, r3
 80005f2:	4828      	ldr	r0, [pc, #160]	; (8000694 <main+0x110>)
 80005f4:	f003 ff3e 	bl	8004474 <iprintf>
		printf("channel4(505-525nm):\r\n");
 80005f8:	4829      	ldr	r0, [pc, #164]	; (80006a0 <main+0x11c>)
 80005fa:	f003 ffc1 	bl	8004580 <puts>
		printf("%d\r\n", data1.channel4);
 80005fe:	8afb      	ldrh	r3, [r7, #22]
 8000600:	4619      	mov	r1, r3
 8000602:	4824      	ldr	r0, [pc, #144]	; (8000694 <main+0x110>)
 8000604:	f003 ff36 	bl	8004474 <iprintf>
		AS7341_startMeasure(eF5F8ClearNIR);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fd63 	bl	80010d4 <AS7341_startMeasure>
		data2 = AS7341_ReadSpectralDataTwo();
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fe22 	bl	800125a <AS7341_ReadSpectralDataTwo>
		printf("channel5(545-565nm):\r\n");
 8000616:	4823      	ldr	r0, [pc, #140]	; (80006a4 <main+0x120>)
 8000618:	f003 ffb2 	bl	8004580 <puts>
		printf("%d\r\n", data2.channel5);
 800061c:	88bb      	ldrh	r3, [r7, #4]
 800061e:	4619      	mov	r1, r3
 8000620:	481c      	ldr	r0, [pc, #112]	; (8000694 <main+0x110>)
 8000622:	f003 ff27 	bl	8004474 <iprintf>
		printf("channel6(580-600nm):\r\n");
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <main+0x124>)
 8000628:	f003 ffaa 	bl	8004580 <puts>
		printf("%d\r\n", data2.channel6);
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	4619      	mov	r1, r3
 8000630:	4818      	ldr	r0, [pc, #96]	; (8000694 <main+0x110>)
 8000632:	f003 ff1f 	bl	8004474 <iprintf>
		printf("channel7(620-640nm):\r\n");
 8000636:	481d      	ldr	r0, [pc, #116]	; (80006ac <main+0x128>)
 8000638:	f003 ffa2 	bl	8004580 <puts>
		printf("%d\r\n", data2.channel7);
 800063c:	893b      	ldrh	r3, [r7, #8]
 800063e:	4619      	mov	r1, r3
 8000640:	4814      	ldr	r0, [pc, #80]	; (8000694 <main+0x110>)
 8000642:	f003 ff17 	bl	8004474 <iprintf>
		printf("channel8(670-690nm):\r\n");
 8000646:	481a      	ldr	r0, [pc, #104]	; (80006b0 <main+0x12c>)
 8000648:	f003 ff9a 	bl	8004580 <puts>
		printf("%d\r\n", data2.channel8);
 800064c:	897b      	ldrh	r3, [r7, #10]
 800064e:	4619      	mov	r1, r3
 8000650:	4810      	ldr	r0, [pc, #64]	; (8000694 <main+0x110>)
 8000652:	f003 ff0f 	bl	8004474 <iprintf>
		printf("Clear:\r\n");
 8000656:	4817      	ldr	r0, [pc, #92]	; (80006b4 <main+0x130>)
 8000658:	f003 ff92 	bl	8004580 <puts>
		printf("%d\r\n", data2.CLEAR);
 800065c:	89bb      	ldrh	r3, [r7, #12]
 800065e:	4619      	mov	r1, r3
 8000660:	480c      	ldr	r0, [pc, #48]	; (8000694 <main+0x110>)
 8000662:	f003 ff07 	bl	8004474 <iprintf>
		printf("NIR:\r\n");
 8000666:	4814      	ldr	r0, [pc, #80]	; (80006b8 <main+0x134>)
 8000668:	f003 ff8a 	bl	8004580 <puts>
		printf("%d\r\n", data2.NIR);
 800066c:	89fb      	ldrh	r3, [r7, #14]
 800066e:	4619      	mov	r1, r3
 8000670:	4808      	ldr	r0, [pc, #32]	; (8000694 <main+0x110>)
 8000672:	f003 feff 	bl	8004474 <iprintf>
		printf("--------------------------\r\n");
 8000676:	4811      	ldr	r0, [pc, #68]	; (80006bc <main+0x138>)
 8000678:	f003 ff82 	bl	8004580 <puts>
		DEV_Delay_ms(500);
 800067c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000680:	f000 fb45 	bl	8000d0e <DEV_Delay_ms>

		//strcpy((char*) buf, "Hello! \r\n");
		//HAL_UART_Transmit(&huart2, buf, strlen((char*) buf), HAL_MAX_DELAY);
		//HAL_Delay(500);

		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000684:	2120      	movs	r1, #32
 8000686:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800068a:	f001 f9ab 	bl	80019e4 <HAL_GPIO_TogglePin>
	while (1) {
 800068e:	e793      	b.n	80005b8 <main+0x34>
 8000690:	08005494 	.word	0x08005494
 8000694:	080054ac 	.word	0x080054ac
 8000698:	080054b4 	.word	0x080054b4
 800069c:	080054cc 	.word	0x080054cc
 80006a0:	080054e4 	.word	0x080054e4
 80006a4:	080054fc 	.word	0x080054fc
 80006a8:	08005514 	.word	0x08005514
 80006ac:	0800552c 	.word	0x0800552c
 80006b0:	08005544 	.word	0x08005544
 80006b4:	0800555c 	.word	0x0800555c
 80006b8:	08005564 	.word	0x08005564
 80006bc:	0800556c 	.word	0x0800556c

080006c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b096      	sub	sp, #88	; 0x58
 80006c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2244      	movs	r2, #68	; 0x44
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fec8 	bl	8004464 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006d4:	463b      	mov	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006e6:	f001 ffa1 	bl	800262c <HAL_PWREx_ControlVoltageScaling>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006f0:	f000 f920 	bl	8000934 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f4:	2302      	movs	r3, #2
 80006f6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006fc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	2340      	movs	r3, #64	; 0x40
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000706:	2302      	movs	r3, #2
 8000708:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800070a:	2301      	movs	r3, #1
 800070c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 800070e:	230a      	movs	r3, #10
 8000710:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000712:	2307      	movs	r3, #7
 8000714:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800071e:	f107 0314 	add.w	r3, r7, #20
 8000722:	4618      	mov	r0, r3
 8000724:	f001 ffd8 	bl	80026d8 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x72>
		Error_Handler();
 800072e:	f000 f901 	bl	8000934 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000746:	463b      	mov	r3, r7
 8000748:	2104      	movs	r1, #4
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fbe4 	bl	8002f18 <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x9a>
		Error_Handler();
 8000756:	f000 f8ed 	bl	8000934 <Error_Handler>
	}
}
 800075a:	bf00      	nop
 800075c:	3758      	adds	r7, #88	; 0x58
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
	...

08000764 <MX_I2C3_Init>:
/**
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_I2C3_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	; (80007dc <MX_I2C3_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
	hi2c3.Init.Timing = 0x10909CEC;
 800076e:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <MX_I2C3_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
	hi2c3.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_I2C3_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
	hi2c3.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK) {
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007a0:	f001 f93a 	bl	8001a18 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x4a>
		Error_Handler();
 80007aa:	f000 f8c3 	bl	8000934 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007b2:	f001 fe95 	bl	80024e0 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 80007bc:	f000 f8ba 	bl	8000934 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK) {
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_I2C3_Init+0x74>)
 80007c4:	f001 fed7 	bl	8002576 <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x6e>
		Error_Handler();
 80007ce:	f000 f8b1 	bl	8000934 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	2000008c 	.word	0x2000008c
 80007dc:	40005c00 	.word	0x40005c00
 80007e0:	10909cec 	.word	0x10909cec

080007e4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_USART2_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART2_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART2_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART2_UART_Init+0x58>)
 8000828:	f003 f8da 	bl	80039e0 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000832:	f000 f87f 	bl	8000934 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	200000d8 	.word	0x200000d8
 8000840:	40004400 	.word	0x40004400

08000844 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800084a:	f107 0314 	add.w	r3, r7, #20
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]
 8000858:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800085a:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <MX_GPIO_Init+0xc4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a2a      	ldr	r2, [pc, #168]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000876:	4a24      	ldr	r2, [pc, #144]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800087e:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_GPIO_Init+0xc4>)
 800088c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088e:	4a1e      	ldr	r2, [pc, #120]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_GPIO_Init+0xc4>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	f003 0301 	and.w	r3, r3, #1
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_GPIO_Init+0xc4>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a18      	ldr	r2, [pc, #96]	; (8000908 <MX_GPIO_Init+0xc4>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_GPIO_Init+0xc4>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2120      	movs	r1, #32
 80008be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008c2:	f001 f877 	bl	80019b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008d6:	f107 0314 	add.w	r3, r7, #20
 80008da:	4619      	mov	r1, r3
 80008dc:	480b      	ldr	r0, [pc, #44]	; (800090c <MX_GPIO_Init+0xc8>)
 80008de:	f000 feef 	bl	80016c0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80008e2:	2320      	movs	r3, #32
 80008e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008fc:	f000 fee0 	bl	80016c0 <HAL_GPIO_Init>

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	; 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40021000 	.word	0x40021000
 800090c:	48000800 	.word	0x48000800

08000910 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000918:	1d39      	adds	r1, r7, #4
 800091a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800091e:	2201      	movs	r2, #1
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <__io_putchar+0x20>)
 8000922:	f003 f8ab 	bl	8003a7c <HAL_UART_Transmit>

	return ch;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200000d8 	.word	0x200000d8

08000934 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b0a4      	sub	sp, #144	; 0x90
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2268      	movs	r2, #104	; 0x68
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fd5b 	bl	8004464 <memset>
  if(hi2c->Instance==I2C3)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	4a21      	ldr	r2, [pc, #132]	; (8000a38 <HAL_I2C_MspInit+0xb0>)
 80009b4:	4293      	cmp	r3, r2
 80009b6:	d13a      	bne.n	8000a2e <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80009b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009bc:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80009be:	2300      	movs	r3, #0
 80009c0:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f002 fcac 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80009d2:	f7ff ffaf 	bl	8000934 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009d6:	4b19      	ldr	r3, [pc, #100]	; (8000a3c <HAL_I2C_MspInit+0xb4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <HAL_I2C_MspInit+0xb4>)
 80009dc:	f043 0304 	orr.w	r3, r3, #4
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <HAL_I2C_MspInit+0xb4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0304 	and.w	r3, r3, #4
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009ee:	2303      	movs	r3, #3
 80009f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009f2:	2312      	movs	r3, #18
 80009f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a04:	2304      	movs	r3, #4
 8000a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a0a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480b      	ldr	r0, [pc, #44]	; (8000a40 <HAL_I2C_MspInit+0xb8>)
 8000a12:	f000 fe55 	bl	80016c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <HAL_I2C_MspInit+0xb4>)
 8000a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a1a:	4a08      	ldr	r2, [pc, #32]	; (8000a3c <HAL_I2C_MspInit+0xb4>)
 8000a1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a20:	6593      	str	r3, [r2, #88]	; 0x58
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_I2C_MspInit+0xb4>)
 8000a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000a2e:	bf00      	nop
 8000a30:	3790      	adds	r7, #144	; 0x90
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40005c00 	.word	0x40005c00
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	48000800 	.word	0x48000800

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0a4      	sub	sp, #144	; 0x90
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	2268      	movs	r2, #104	; 0x68
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fcfd 	bl	8004464 <memset>
  if(huart->Instance==USART2)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a21      	ldr	r2, [pc, #132]	; (8000af4 <HAL_UART_MspInit+0xb0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d13a      	bne.n	8000aea <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4618      	mov	r0, r3
 8000a82:	f002 fc4f 	bl	8003324 <HAL_RCCEx_PeriphCLKConfig>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a8c:	f7ff ff52 	bl	8000934 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a90:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a94:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9c:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa4:	613b      	str	r3, [r7, #16]
 8000aa6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aac:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000aae:	f043 0301 	orr.w	r3, r3, #1
 8000ab2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0xb4>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae6:	f000 fdeb 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3790      	adds	r7, #144	; 0x90
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40021000 	.word	0x40021000

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b48:	f000 fc90 	bl	800146c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e00a      	b.n	8000b78 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b62:	f3af 8000 	nop.w
 8000b66:	4601      	mov	r1, r0
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	1c5a      	adds	r2, r3, #1
 8000b6c:	60ba      	str	r2, [r7, #8]
 8000b6e:	b2ca      	uxtb	r2, r1
 8000b70:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	3301      	adds	r3, #1
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	697a      	ldr	r2, [r7, #20]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	dbf0      	blt.n	8000b62 <_read+0x12>
	}

return len;
 8000b80:	687b      	ldr	r3, [r7, #4]
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3718      	adds	r7, #24
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e009      	b.n	8000bb0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	1c5a      	adds	r2, r3, #1
 8000ba0:	60ba      	str	r2, [r7, #8]
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff feb3 	bl	8000910 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	dbf1      	blt.n	8000b9c <_write+0x12>
	}
	return len;
 8000bb8:	687b      	ldr	r3, [r7, #4]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3718      	adds	r7, #24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <_close>:

int _close(int file)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	370c      	adds	r7, #12
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	b083      	sub	sp, #12
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	6078      	str	r0, [r7, #4]
 8000be2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bea:	605a      	str	r2, [r3, #4]
	return 0;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <_isatty>:

int _isatty(int file)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	b083      	sub	sp, #12
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
	return 1;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c1c:	2300      	movs	r3, #0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
	...

08000c2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c34:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <_sbrk+0x5c>)
 8000c36:	4b15      	ldr	r3, [pc, #84]	; (8000c8c <_sbrk+0x60>)
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c40:	4b13      	ldr	r3, [pc, #76]	; (8000c90 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d102      	bne.n	8000c4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <_sbrk+0x64>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <_sbrk+0x68>)
 8000c4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	4413      	add	r3, r2
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	429a      	cmp	r2, r3
 8000c5a:	d207      	bcs.n	8000c6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c5c:	f003 fbd8 	bl	8004410 <__errno>
 8000c60:	4603      	mov	r3, r0
 8000c62:	220c      	movs	r2, #12
 8000c64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c66:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6a:	e009      	b.n	8000c80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <_sbrk+0x64>)
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4413      	add	r3, r2
 8000c7a:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <_sbrk+0x64>)
 8000c7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20028000 	.word	0x20028000
 8000c8c:	00000400 	.word	0x00000400
 8000c90:	2000015c 	.word	0x2000015c
 8000c94:	20000178 	.word	0x20000178

08000c98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	; (8000cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <LoopForever+0xe>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	; (8000d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	; (8000d08 <LoopForever+0x16>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 fb97 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fc49 	bl	8000584 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf4:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d00:	080056e0 	.word	0x080056e0
  ldr r2, =_sbss
 8000d04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d08:	20000178 	.word	0x20000178

08000d0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_IRQHandler>

08000d0e <DEV_Delay_ms>:

/**
 * delay x ms
**/
void DEV_Delay_ms(UDOUBLE xms)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
	HAL_Delay(xms);
 8000d16:	6878      	ldr	r0, [r7, #4]
 8000d18:	f000 fbc8 	bl	80014ac <HAL_Delay>
}
 8000d1c:	bf00      	nop
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <DEV_I2C_Init+0x24>)
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8000d34:	4a05      	ldr	r2, [pc, #20]	; (8000d4c <DEV_I2C_Init+0x28>)
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	7013      	strb	r3, [r2, #0]
#endif
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	20000160 	.word	0x20000160
 8000d4c:	20000161 	.word	0x20000161

08000d50 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af04      	add	r7, sp, #16
 8000d56:	4603      	mov	r3, r0
 8000d58:	460a      	mov	r2, r1
 8000d5a:	71fb      	strb	r3, [r7, #7]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8000d60:	2300      	movs	r3, #0
 8000d62:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c3, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000d68:	4b09      	ldr	r3, [pc, #36]	; (8000d90 <I2C_Write_Byte+0x40>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	b299      	uxth	r1, r3
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	2320      	movs	r3, #32
 8000d74:	9302      	str	r3, [sp, #8]
 8000d76:	2301      	movs	r3, #1
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <I2C_Write_Byte+0x44>)
 8000d84:	f000 fed8 	bl	8001b38 <HAL_I2C_Mem_Write>
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000161 	.word	0x20000161
 8000d94:	2000008c 	.word	0x2000008c

08000d98 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af04      	add	r7, sp, #16
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8000da2:	2300      	movs	r3, #0
 8000da4:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c3, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <I2C_Read_Byte+0x3c>)
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	3301      	adds	r3, #1
 8000dae:	b299      	uxth	r1, r3
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	2320      	movs	r3, #32
 8000db6:	9302      	str	r3, [sp, #8]
 8000db8:	2301      	movs	r3, #1
 8000dba:	9301      	str	r3, [sp, #4]
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	4804      	ldr	r0, [pc, #16]	; (8000dd8 <I2C_Read_Byte+0x40>)
 8000dc6:	f000 ffcb 	bl	8001d60 <HAL_I2C_Mem_Read>
	return Buf[0];
 8000dca:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000161 	.word	0x20000161
 8000dd8:	2000008c 	.word	0x2000008c

08000ddc <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ffd5 	bl	8000d98 <I2C_Read_Byte>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b2db      	uxtb	r3, r3
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	4603      	mov	r3, r0
 8000e02:	460a      	mov	r2, r1
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	4613      	mov	r3, r2
 8000e08:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 8000e0a:	79ba      	ldrb	r2, [r7, #6]
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff9d 	bl	8000d50 <I2C_Write_Byte>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 8000e2a:	2072      	movs	r0, #114	; 0x72
 8000e2c:	f7ff ff7a 	bl	8000d24 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8000e30:	2001      	movs	r0, #1
 8000e32:	f000 f80b 	bl	8000e4c <AS7341_Enable>
	measureMode=mode;
 8000e36:	4a04      	ldr	r2, [pc, #16]	; (8000e48 <AS7341_Init+0x28>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	7013      	strb	r3, [r2, #0]
	return 0;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000162 	.word	0x20000162

08000e4c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8000e54:	2080      	movs	r0, #128	; 0x80
 8000e56:	f7ff ffc1 	bl	8000ddc <AS7341_Read_Byte>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d104      	bne.n	8000e6e <AS7341_Enable+0x22>
    data = data | (1<<0);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	f043 0301 	orr.w	r3, r3, #1
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e003      	b.n	8000e76 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	f023 0301 	bic.w	r3, r3, #1
 8000e74:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	f7ff ffbd 	bl	8000dfa <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8000e80:	4805      	ldr	r0, [pc, #20]	; (8000e98 <AS7341_Enable+0x4c>)
 8000e82:	f003 fb7d 	bl	8004580 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8000e86:	2130      	movs	r1, #48	; 0x30
 8000e88:	2000      	movs	r0, #0
 8000e8a:	f7ff ffb6 	bl	8000dfa <AS7341_Write_Byte>
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	08005588 	.word	0x08005588

08000e9c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000ea4:	2080      	movs	r0, #128	; 0x80
 8000ea6:	f7ff ff99 	bl	8000ddc <AS7341_Read_Byte>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d104      	bne.n	8000ebe <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e003      	b.n	8000ec6 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	f023 0302 	bic.w	r3, r3, #2
 8000ec4:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	2080      	movs	r0, #128	; 0x80
 8000ecc:	f7ff ff95 	bl	8000dfa <AS7341_Write_Byte>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8000ee0:	2080      	movs	r0, #128	; 0x80
 8000ee2:	f7ff ff7b 	bl	8000ddc <AS7341_Read_Byte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d104      	bne.n	8000efa <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	73fb      	strb	r3, [r7, #15]
 8000ef8:	e003      	b.n	8000f02 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 8000efa:	7bfb      	ldrb	r3, [r7, #15]
 8000efc:	f023 0310 	bic.w	r3, r3, #16
 8000f00:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	4619      	mov	r1, r3
 8000f06:	2080      	movs	r0, #128	; 0x80
 8000f08:	f7ff ff77 	bl	8000dfa <AS7341_Write_Byte>
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f000 fa24 	bl	800136c <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8000f24:	2070      	movs	r0, #112	; 0x70
 8000f26:	f7ff ff59 	bl	8000ddc <AS7341_Read_Byte>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b03      	cmp	r3, #3
 8000f32:	d015      	beq.n	8000f60 <AS7341_Config+0x4c>
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	dc18      	bgt.n	8000f6a <AS7341_Config+0x56>
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d002      	beq.n	8000f42 <AS7341_Config+0x2e>
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d005      	beq.n	8000f4c <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8000f40:	e013      	b.n	8000f6a <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f023 0303 	bic.w	r3, r3, #3
 8000f48:	73fb      	strb	r3, [r7, #15]
	break;
 8000f4a:	e00f      	b.n	8000f6c <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 8000f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f50:	f023 0303 	bic.w	r3, r3, #3
 8000f54:	b25b      	sxtb	r3, r3
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	b25b      	sxtb	r3, r3
 8000f5c:	73fb      	strb	r3, [r7, #15]
	break;
 8000f5e:	e005      	b.n	8000f6c <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0303 	orr.w	r3, r3, #3
 8000f66:	73fb      	strb	r3, [r7, #15]
	break;
 8000f68:	e000      	b.n	8000f6c <AS7341_Config+0x58>
    default : break;
 8000f6a:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2070      	movs	r0, #112	; 0x70
 8000f72:	f7ff ff42 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f9f8 	bl	800136c <AS7341_SetBank>
}
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8000f88:	2130      	movs	r1, #48	; 0x30
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f7ff ff35 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8000f90:	2101      	movs	r1, #1
 8000f92:	2001      	movs	r0, #1
 8000f94:	f7ff ff31 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2002      	movs	r0, #2
 8000f9c:	f7ff ff2d 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f7ff ff29 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8000fa8:	2100      	movs	r1, #0
 8000faa:	2004      	movs	r0, #4
 8000fac:	f7ff ff25 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8000fb0:	2142      	movs	r1, #66	; 0x42
 8000fb2:	2005      	movs	r0, #5
 8000fb4:	f7ff ff21 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2006      	movs	r0, #6
 8000fbc:	f7ff ff1d 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2007      	movs	r0, #7
 8000fc4:	f7ff ff19 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8000fc8:	2150      	movs	r1, #80	; 0x50
 8000fca:	2008      	movs	r0, #8
 8000fcc:	f7ff ff15 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2009      	movs	r0, #9
 8000fd4:	f7ff ff11 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 8000fd8:	2100      	movs	r1, #0
 8000fda:	200a      	movs	r0, #10
 8000fdc:	f7ff ff0d 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	200b      	movs	r0, #11
 8000fe4:	f7ff ff09 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 8000fe8:	2120      	movs	r1, #32
 8000fea:	200c      	movs	r0, #12
 8000fec:	f7ff ff05 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	200d      	movs	r0, #13
 8000ff4:	f7ff ff01 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	200e      	movs	r0, #14
 8000ffc:	f7ff fefd 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 8001000:	2130      	movs	r1, #48	; 0x30
 8001002:	200f      	movs	r0, #15
 8001004:	f7ff fef9 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 8001008:	2101      	movs	r1, #1
 800100a:	2010      	movs	r0, #16
 800100c:	f7ff fef5 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8001010:	2150      	movs	r1, #80	; 0x50
 8001012:	2011      	movs	r0, #17
 8001014:	f7ff fef1 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8001018:	2100      	movs	r1, #0
 800101a:	2012      	movs	r0, #18
 800101c:	f7ff feed 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8001020:	2106      	movs	r1, #6
 8001022:	2013      	movs	r0, #19
 8001024:	f7ff fee9 	bl	8000dfa <AS7341_Write_Byte>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8001030:	2100      	movs	r1, #0
 8001032:	2000      	movs	r0, #0
 8001034:	f7ff fee1 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 8001038:	2100      	movs	r1, #0
 800103a:	2001      	movs	r0, #1
 800103c:	f7ff fedd 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8001040:	2100      	movs	r1, #0
 8001042:	2002      	movs	r0, #2
 8001044:	f7ff fed9 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 8001048:	2140      	movs	r1, #64	; 0x40
 800104a:	2003      	movs	r0, #3
 800104c:	f7ff fed5 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8001050:	2102      	movs	r1, #2
 8001052:	2004      	movs	r0, #4
 8001054:	f7ff fed1 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 8001058:	2100      	movs	r1, #0
 800105a:	2005      	movs	r0, #5
 800105c:	f7ff fecd 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8001060:	2110      	movs	r1, #16
 8001062:	2006      	movs	r0, #6
 8001064:	f7ff fec9 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 8001068:	2103      	movs	r1, #3
 800106a:	2007      	movs	r0, #7
 800106c:	f7ff fec5 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8001070:	2150      	movs	r1, #80	; 0x50
 8001072:	2008      	movs	r0, #8
 8001074:	f7ff fec1 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 8001078:	2110      	movs	r1, #16
 800107a:	2009      	movs	r0, #9
 800107c:	f7ff febd 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8001080:	2103      	movs	r1, #3
 8001082:	200a      	movs	r0, #10
 8001084:	f7ff feb9 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8001088:	2100      	movs	r1, #0
 800108a:	200b      	movs	r0, #11
 800108c:	f7ff feb5 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8001090:	2100      	movs	r1, #0
 8001092:	200c      	movs	r0, #12
 8001094:	f7ff feb1 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8001098:	2100      	movs	r1, #0
 800109a:	200d      	movs	r0, #13
 800109c:	f7ff fead 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 80010a0:	2124      	movs	r1, #36	; 0x24
 80010a2:	200e      	movs	r0, #14
 80010a4:	f7ff fea9 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 80010a8:	2100      	movs	r1, #0
 80010aa:	200f      	movs	r0, #15
 80010ac:	f7ff fea5 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 80010b0:	2100      	movs	r1, #0
 80010b2:	2010      	movs	r0, #16
 80010b4:	f7ff fea1 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80010b8:	2150      	movs	r1, #80	; 0x50
 80010ba:	2011      	movs	r0, #17
 80010bc:	f7ff fe9d 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80010c0:	2100      	movs	r1, #0
 80010c2:	2012      	movs	r0, #18
 80010c4:	f7ff fe99 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80010c8:	2106      	movs	r1, #6
 80010ca:	2013      	movs	r0, #19
 80010cc:	f7ff fe95 	bl	8000dfa <AS7341_Write_Byte>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 80010e2:	20a9      	movs	r0, #169	; 0xa9
 80010e4:	f7ff fe7a 	bl	8000ddc <AS7341_Read_Byte>
 80010e8:	4603      	mov	r3, r0
 80010ea:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	f023 0310 	bic.w	r3, r3, #16
 80010f2:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 80010f4:	7bfb      	ldrb	r3, [r7, #15]
 80010f6:	4619      	mov	r1, r3
 80010f8:	20a9      	movs	r0, #169	; 0xa9
 80010fa:	f7ff fe7e 	bl	8000dfa <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 80010fe:	2000      	movs	r0, #0
 8001100:	f7ff fecc 	bl	8000e9c <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 8001104:	2110      	movs	r1, #16
 8001106:	20af      	movs	r0, #175	; 0xaf
 8001108:	f7ff fe77 	bl	8000dfa <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d102      	bne.n	8001118 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 8001112:	f7ff ff37 	bl	8000f84 <F1F4_Clear_NIR>
 8001116:	e004      	b.n	8001122 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b01      	cmp	r3, #1
 800111c:	d101      	bne.n	8001122 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 800111e:	f7ff ff85 	bl	800102c <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff fed8 	bl	8000ed8 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8001128:	4b12      	ldr	r3, [pc, #72]	; (8001174 <AS7341_startMeasure+0xa0>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d106      	bne.n	800113e <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8001130:	2000      	movs	r0, #0
 8001132:	f000 f8c0 	bl	80012b6 <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff feec 	bl	8000f14 <AS7341_Config>
 800113c:	e006      	b.n	800114c <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <AS7341_startMeasure+0xa0>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8001146:	2000      	movs	r0, #0
 8001148:	f7ff fee4 	bl	8000f14 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 800114c:	2001      	movs	r0, #1
 800114e:	f7ff fea5 	bl	8000e9c <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <AS7341_startMeasure+0xa0>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d108      	bne.n	800116c <AS7341_startMeasure+0x98>
        while(!AS7341_MeasureComplete()){
 800115a:	e002      	b.n	8001162 <AS7341_startMeasure+0x8e>
        DEV_Delay_ms(1);
 800115c:	2001      	movs	r0, #1
 800115e:	f7ff fdd6 	bl	8000d0e <DEV_Delay_ms>
        while(!AS7341_MeasureComplete()){
 8001162:	f000 f809 	bl	8001178 <AS7341_MeasureComplete>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f7      	beq.n	800115c <AS7341_startMeasure+0x88>
        }
      }
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000162 	.word	0x20000162

08001178 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 800117e:	20a3      	movs	r0, #163	; 0xa3
 8001180:	f7ff fe2c 	bl	8000ddc <AS7341_Read_Byte>
 8001184:	4603      	mov	r3, r0
 8001186:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <AS7341_MeasureComplete+0x1e>
		return true;
 8001192:	2301      	movs	r3, #1
 8001194:	e000      	b.n	8001198 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8001196:	2300      	movs	r3, #0
	}
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 80011aa:	2300      	movs	r3, #0
 80011ac:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	3b6b      	subs	r3, #107	; 0x6b
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff fe0f 	bl	8000ddc <AS7341_Read_Byte>
 80011be:	4603      	mov	r3, r0
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	334b      	adds	r3, #75	; 0x4b
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f7ff fe04 	bl	8000ddc <AS7341_Read_Byte>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 80011da:	897b      	ldrh	r3, [r7, #10]
 80011dc:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 80011de:	89fb      	ldrh	r3, [r7, #14]
 80011e0:	021b      	lsls	r3, r3, #8
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	893b      	ldrh	r3, [r7, #8]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21b      	sxth	r3, r3
 80011ec:	81fb      	strh	r3, [r7, #14]
  DEV_Delay_ms(50);
 80011ee:	2032      	movs	r0, #50	; 0x32
 80011f0:	f7ff fd8d 	bl	8000d0e <DEV_Delay_ms>
  return channelData;
 80011f4:	89fb      	ldrh	r3, [r7, #14]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 80011fe:	b590      	push	{r4, r7, lr}
 8001200:	b087      	sub	sp, #28
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 8001206:	2000      	movs	r0, #0
 8001208:	f7ff ffca 	bl	80011a0 <AS7341_GetChannelData>
 800120c:	4603      	mov	r3, r0
 800120e:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff ffc5 	bl	80011a0 <AS7341_GetChannelData>
 8001216:	4603      	mov	r3, r0
 8001218:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 800121a:	2002      	movs	r0, #2
 800121c:	f7ff ffc0 	bl	80011a0 <AS7341_GetChannelData>
 8001220:	4603      	mov	r3, r0
 8001222:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 8001224:	2003      	movs	r0, #3
 8001226:	f7ff ffbb 	bl	80011a0 <AS7341_GetChannelData>
 800122a:	4603      	mov	r3, r0
 800122c:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 800122e:	2004      	movs	r0, #4
 8001230:	f7ff ffb6 	bl	80011a0 <AS7341_GetChannelData>
 8001234:	4603      	mov	r3, r0
 8001236:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8001238:	2005      	movs	r0, #5
 800123a:	f7ff ffb1 	bl	80011a0 <AS7341_GetChannelData>
 800123e:	4603      	mov	r3, r0
 8001240:	82fb      	strh	r3, [r7, #22]
  return data;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	461c      	mov	r4, r3
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800124c:	6020      	str	r0, [r4, #0]
 800124e:	6061      	str	r1, [r4, #4]
 8001250:	60a2      	str	r2, [r4, #8]
}
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	371c      	adds	r7, #28
 8001256:	46bd      	mov	sp, r7
 8001258:	bd90      	pop	{r4, r7, pc}

0800125a <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 800125a:	b590      	push	{r4, r7, lr}
 800125c:	b087      	sub	sp, #28
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff ff9c 	bl	80011a0 <AS7341_GetChannelData>
 8001268:	4603      	mov	r3, r0
 800126a:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 800126c:	2001      	movs	r0, #1
 800126e:	f7ff ff97 	bl	80011a0 <AS7341_GetChannelData>
 8001272:	4603      	mov	r3, r0
 8001274:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff ff92 	bl	80011a0 <AS7341_GetChannelData>
 800127c:	4603      	mov	r3, r0
 800127e:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8001280:	2003      	movs	r0, #3
 8001282:	f7ff ff8d 	bl	80011a0 <AS7341_GetChannelData>
 8001286:	4603      	mov	r3, r0
 8001288:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 800128a:	2004      	movs	r0, #4
 800128c:	f7ff ff88 	bl	80011a0 <AS7341_GetChannelData>
 8001290:	4603      	mov	r3, r0
 8001292:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 8001294:	2005      	movs	r0, #5
 8001296:	f7ff ff83 	bl	80011a0 <AS7341_GetChannelData>
 800129a:	4603      	mov	r3, r0
 800129c:	82fb      	strh	r3, [r7, #22]
  return data;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	461c      	mov	r4, r3
 80012a2:	f107 030c 	add.w	r3, r7, #12
 80012a6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80012a8:	6020      	str	r0, [r4, #0]
 80012aa:	6061      	str	r1, [r4, #4]
 80012ac:	60a2      	str	r2, [r4, #8]
}
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	371c      	adds	r7, #28
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd90      	pop	{r4, r7, pc}

080012b6 <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	4603      	mov	r3, r0
 80012be:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 80012c0:	20be      	movs	r0, #190	; 0xbe
 80012c2:	f7ff fd8b 	bl	8000ddc <AS7341_Read_Byte>
 80012c6:	4603      	mov	r3, r0
 80012c8:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d103      	bne.n	80012d8 <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	f043 0304 	orr.w	r3, r3, #4
 80012d6:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d103      	bne.n	80012e6 <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	f023 0304 	bic.w	r3, r3, #4
 80012e4:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	4619      	mov	r1, r3
 80012ea:	20be      	movs	r0, #190	; 0xbe
 80012ec:	f7ff fd85 	bl	8000dfa <AS7341_Write_Byte>
}
 80012f0:	bf00      	nop
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4619      	mov	r1, r3
 8001306:	2081      	movs	r0, #129	; 0x81
 8001308:	f7ff fd77 	bl	8000dfa <AS7341_Write_Byte>
}
 800130c:	bf00      	nop
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4619      	mov	r1, r3
 800132e:	20ca      	movs	r0, #202	; 0xca
 8001330:	f7ff fd63 	bl	8000dfa <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 8001334:	7bbb      	ldrb	r3, [r7, #14]
 8001336:	4619      	mov	r1, r3
 8001338:	20cb      	movs	r0, #203	; 0xcb
 800133a:	f7ff fd5e 	bl	8000dfa <AS7341_Write_Byte>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	2b0a      	cmp	r3, #10
 8001354:	d901      	bls.n	800135a <AS7341_AGAIN_config+0x14>
 8001356:	230a      	movs	r3, #10
 8001358:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4619      	mov	r1, r3
 800135e:	20aa      	movs	r0, #170	; 0xaa
 8001360:	f7ff fd4b 	bl	8000dfa <AS7341_Write_Byte>
}
 8001364:	bf00      	nop
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}

0800136c <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 800137a:	20a9      	movs	r0, #169	; 0xa9
 800137c:	f7ff fd2e 	bl	8000ddc <AS7341_Read_Byte>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d103      	bne.n	8001392 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	f043 0310 	orr.w	r3, r3, #16
 8001390:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	f023 0310 	bic.w	r3, r3, #16
 800139e:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	4619      	mov	r1, r3
 80013a4:	20a9      	movs	r0, #169	; 0xa9
 80013a6:	f7ff fd28 	bl	8000dfa <AS7341_Write_Byte>
}
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_Init+0x3c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a0b      	ldr	r2, [pc, #44]	; (80013f0 <HAL_Init+0x3c>)
 80013c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ca:	2003      	movs	r0, #3
 80013cc:	f000 f944 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d0:	2000      	movs	r0, #0
 80013d2:	f000 f80f 	bl	80013f4 <HAL_InitTick>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	e001      	b.n	80013e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e2:	f7ff faad 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e6:	79fb      	ldrb	r3, [r7, #7]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40022000 	.word	0x40022000

080013f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b084      	sub	sp, #16
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <HAL_InitTick+0x6c>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_InitTick+0x70>)
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_InitTick+0x6c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	4619      	mov	r1, r3
 8001412:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001416:	fbb3 f3f1 	udiv	r3, r3, r1
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f941 	bl	80016a6 <HAL_SYSTICK_Config>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10f      	bne.n	800144a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d809      	bhi.n	8001444 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f919 	bl	800166e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143c:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <HAL_InitTick+0x74>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e007      	b.n	8001454 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e004      	b.n	8001454 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	73fb      	strb	r3, [r7, #15]
 800144e:	e001      	b.n	8001454 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x20>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	461a      	mov	r2, r3
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_IncTick+0x24>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4413      	add	r3, r2
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <HAL_IncTick+0x24>)
 800147e:	6013      	str	r3, [r2, #0]
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	20000008 	.word	0x20000008
 8001490:	20000164 	.word	0x20000164

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	; (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	20000164 	.word	0x20000164

080014ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b4:	f7ff ffee 	bl	8001494 <HAL_GetTick>
 80014b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c4:	d005      	beq.n	80014d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_Delay+0x44>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4413      	add	r3, r2
 80014d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014d2:	bf00      	nop
 80014d4:	f7ff ffde 	bl	8001494 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	68fa      	ldr	r2, [r7, #12]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d8f7      	bhi.n	80014d4 <HAL_Delay+0x28>
  {
  }
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000008 	.word	0x20000008

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff47 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff5c 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffb0 	bl	8001614 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e154      	b.n	800197a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8146 	beq.w	8001974 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0303 	and.w	r3, r3, #3
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d005      	beq.n	8001700 <HAL_GPIO_Init+0x40>
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f003 0303 	and.w	r3, r3, #3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d130      	bne.n	8001762 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	2203      	movs	r2, #3
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	43db      	mvns	r3, r3
 8001712:	693a      	ldr	r2, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4313      	orrs	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001736:	2201      	movs	r2, #1
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	091b      	lsrs	r3, r3, #4
 800174c:	f003 0201 	and.w	r2, r3, #1
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b03      	cmp	r3, #3
 800176c:	d017      	beq.n	800179e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4013      	ands	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	fa02 f303 	lsl.w	r3, r2, r3
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80a0 	beq.w	8001974 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6613      	str	r3, [r2, #96]	; 0x60
 8001840:	4b55      	ldr	r3, [pc, #340]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800184c:	4a53      	ldr	r2, [pc, #332]	; (800199c <HAL_GPIO_Init+0x2dc>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001876:	d019      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1e4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a46      	ldr	r2, [pc, #280]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1dc>
 8001898:	2304      	movs	r3, #4
 800189a:	e008      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 800189c:	2307      	movs	r3, #7
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a0:	2303      	movs	r3, #3
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018ac:	2300      	movs	r3, #0
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018be:	4937      	ldr	r1, [pc, #220]	; (800199c <HAL_GPIO_Init+0x2dc>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f47f aea3 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	48000800 	.word	0x48000800
 80019a8:	48000c00 	.word	0x48000c00
 80019ac:	48001000 	.word	0x48001000
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019f6:	887a      	ldrh	r2, [r7, #2]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	4013      	ands	r3, r2
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	43d9      	mvns	r1, r3
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	400b      	ands	r3, r1
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	619a      	str	r2, [r3, #24]
}
 8001a0c:	bf00      	nop
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e081      	b.n	8001b2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe ffa2 	bl	8000988 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	68db      	ldr	r3, [r3, #12]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d107      	bne.n	8001a92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a8e:	609a      	str	r2, [r3, #8]
 8001a90:	e006      	b.n	8001aa0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001a9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d104      	bne.n	8001ab2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ab0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ac0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ac4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691a      	ldr	r2, [r3, #16]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	695b      	ldr	r3, [r3, #20]
 8001ade:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	69d9      	ldr	r1, [r3, #28]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1a      	ldr	r2, [r3, #32]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2200      	movs	r2, #0
 8001b14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2220      	movs	r2, #32
 8001b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	4608      	mov	r0, r1
 8001b42:	4611      	mov	r1, r2
 8001b44:	461a      	mov	r2, r3
 8001b46:	4603      	mov	r3, r0
 8001b48:	817b      	strh	r3, [r7, #10]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	813b      	strh	r3, [r7, #8]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	f040 80f9 	bne.w	8001d52 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d002      	beq.n	8001b6c <HAL_I2C_Mem_Write+0x34>
 8001b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b72:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e0ed      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d101      	bne.n	8001b86 <HAL_I2C_Mem_Write+0x4e>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e0e6      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b8e:	f7ff fc81 	bl	8001494 <HAL_GetTick>
 8001b92:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2319      	movs	r3, #25
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ba0:	68f8      	ldr	r0, [r7, #12]
 8001ba2:	f000 fac3 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0d1      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2221      	movs	r2, #33	; 0x21
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a3a      	ldr	r2, [r7, #32]
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bd8:	88f8      	ldrh	r0, [r7, #6]
 8001bda:	893a      	ldrh	r2, [r7, #8]
 8001bdc:	8979      	ldrh	r1, [r7, #10]
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	4603      	mov	r3, r0
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f000 f9d3 	bl	8001f94 <I2C_RequestMemoryWrite>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d005      	beq.n	8001c00 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0a9      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	2bff      	cmp	r3, #255	; 0xff
 8001c08:	d90e      	bls.n	8001c28 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	22ff      	movs	r2, #255	; 0xff
 8001c0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	8979      	ldrh	r1, [r7, #10]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fc2b 	bl	800247c <I2C_TransferConfig>
 8001c26:	e00f      	b.n	8001c48 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	8979      	ldrh	r1, [r7, #10]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f000 fc1a 	bl	800247c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 faad 	bl	80021ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e07b      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c84:	3b01      	subs	r3, #1
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c90:	b29b      	uxth	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d034      	beq.n	8001d00 <HAL_I2C_Mem_Write+0x1c8>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d130      	bne.n	8001d00 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f000 fa3f 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e04d      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	2bff      	cmp	r3, #255	; 0xff
 8001cc0:	d90e      	bls.n	8001ce0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	22ff      	movs	r2, #255	; 0xff
 8001cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	8979      	ldrh	r1, [r7, #10]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 fbcf 	bl	800247c <I2C_TransferConfig>
 8001cde:	e00f      	b.n	8001d00 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cee:	b2da      	uxtb	r2, r3
 8001cf0:	8979      	ldrh	r1, [r7, #10]
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	9300      	str	r3, [sp, #0]
 8001cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 fbbe 	bl	800247c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d19e      	bne.n	8001c48 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 fa8c 	bl	800222c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e01a      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2220      	movs	r2, #32
 8001d24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6859      	ldr	r1, [r3, #4]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_I2C_Mem_Write+0x224>)
 8001d32:	400b      	ands	r3, r1
 8001d34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2220      	movs	r2, #32
 8001d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d52:	2302      	movs	r3, #2
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	fe00e800 	.word	0xfe00e800

08001d60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b088      	sub	sp, #32
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	4608      	mov	r0, r1
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	817b      	strh	r3, [r7, #10]
 8001d72:	460b      	mov	r3, r1
 8001d74:	813b      	strh	r3, [r7, #8]
 8001d76:	4613      	mov	r3, r2
 8001d78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b20      	cmp	r3, #32
 8001d84:	f040 80fd 	bne.w	8001f82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d002      	beq.n	8001d94 <HAL_I2C_Mem_Read+0x34>
 8001d8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e0f1      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Mem_Read+0x4e>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0ea      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001db6:	f7ff fb6d 	bl	8001494 <HAL_GetTick>
 8001dba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	2319      	movs	r3, #25
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f9af 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0d5      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2222      	movs	r2, #34	; 0x22
 8001ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6a3a      	ldr	r2, [r7, #32]
 8001df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e00:	88f8      	ldrh	r0, [r7, #6]
 8001e02:	893a      	ldrh	r2, [r7, #8]
 8001e04:	8979      	ldrh	r1, [r7, #10]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	4603      	mov	r3, r0
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 f913 	bl	800203c <I2C_RequestMemoryRead>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0ad      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	2bff      	cmp	r3, #255	; 0xff
 8001e30:	d90e      	bls.n	8001e50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	22ff      	movs	r2, #255	; 0xff
 8001e36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	8979      	ldrh	r1, [r7, #10]
 8001e40:	4b52      	ldr	r3, [pc, #328]	; (8001f8c <HAL_I2C_Mem_Read+0x22c>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f000 fb17 	bl	800247c <I2C_TransferConfig>
 8001e4e:	e00f      	b.n	8001e70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	8979      	ldrh	r1, [r7, #10]
 8001e62:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HAL_I2C_Mem_Read+0x22c>)
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f000 fb06 	bl	800247c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	9300      	str	r3, [sp, #0]
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	2200      	movs	r2, #0
 8001e78:	2104      	movs	r1, #4
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f956 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e07c      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d034      	beq.n	8001f30 <HAL_I2C_Mem_Read+0x1d0>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d130      	bne.n	8001f30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	9300      	str	r3, [sp, #0]
 8001ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 f927 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e04d      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d90e      	bls.n	8001f10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	22ff      	movs	r2, #255	; 0xff
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	8979      	ldrh	r1, [r7, #10]
 8001f00:	2300      	movs	r3, #0
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fab7 	bl	800247c <I2C_TransferConfig>
 8001f0e:	e00f      	b.n	8001f30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	8979      	ldrh	r1, [r7, #10]
 8001f22:	2300      	movs	r3, #0
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f2a:	68f8      	ldr	r0, [r7, #12]
 8001f2c:	f000 faa6 	bl	800247c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d19a      	bne.n	8001e70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f3e:	68f8      	ldr	r0, [r7, #12]
 8001f40:	f000 f974 	bl	800222c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01a      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2220      	movs	r2, #32
 8001f54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6859      	ldr	r1, [r3, #4]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <HAL_I2C_Mem_Read+0x230>)
 8001f62:	400b      	ands	r3, r1
 8001f64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	e000      	b.n	8001f84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001f82:	2302      	movs	r3, #2
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	80002400 	.word	0x80002400
 8001f90:	fe00e800 	.word	0xfe00e800

08001f94 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	4608      	mov	r0, r1
 8001f9e:	4611      	mov	r1, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	817b      	strh	r3, [r7, #10]
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	813b      	strh	r3, [r7, #8]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	4b20      	ldr	r3, [pc, #128]	; (8002038 <I2C_RequestMemoryWrite+0xa4>)
 8001fb6:	9300      	str	r3, [sp, #0]
 8001fb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f000 fa5d 	bl	800247c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fc2:	69fa      	ldr	r2, [r7, #28]
 8001fc4:	69b9      	ldr	r1, [r7, #24]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f8f0 	bl	80021ac <I2C_WaitOnTXISFlagUntilTimeout>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e02c      	b.n	8002030 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fd6:	88fb      	ldrh	r3, [r7, #6]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001fdc:	893b      	ldrh	r3, [r7, #8]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	629a      	str	r2, [r3, #40]	; 0x28
 8001fe6:	e015      	b.n	8002014 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	69b9      	ldr	r1, [r7, #24]
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f000 f8d6 	bl	80021ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e012      	b.n	8002030 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800200a:	893b      	ldrh	r3, [r7, #8]
 800200c:	b2da      	uxtb	r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	9300      	str	r3, [sp, #0]
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2200      	movs	r2, #0
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f884 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	80002000 	.word	0x80002000

0800203c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	4608      	mov	r0, r1
 8002046:	4611      	mov	r1, r2
 8002048:	461a      	mov	r2, r3
 800204a:	4603      	mov	r3, r0
 800204c:	817b      	strh	r3, [r7, #10]
 800204e:	460b      	mov	r3, r1
 8002050:	813b      	strh	r3, [r7, #8]
 8002052:	4613      	mov	r3, r2
 8002054:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	8979      	ldrh	r1, [r7, #10]
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <I2C_RequestMemoryRead+0xa4>)
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2300      	movs	r3, #0
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 fa0a 	bl	800247c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002068:	69fa      	ldr	r2, [r7, #28]
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	68f8      	ldr	r0, [r7, #12]
 800206e:	f000 f89d 	bl	80021ac <I2C_WaitOnTXISFlagUntilTimeout>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e02c      	b.n	80020d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002082:	893b      	ldrh	r3, [r7, #8]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	629a      	str	r2, [r3, #40]	; 0x28
 800208c:	e015      	b.n	80020ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800208e:	893b      	ldrh	r3, [r7, #8]
 8002090:	0a1b      	lsrs	r3, r3, #8
 8002092:	b29b      	uxth	r3, r3
 8002094:	b2da      	uxtb	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800209c:	69fa      	ldr	r2, [r7, #28]
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 f883 	bl	80021ac <I2C_WaitOnTXISFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e012      	b.n	80020d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020b0:	893b      	ldrh	r3, [r7, #8]
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2200      	movs	r2, #0
 80020c2:	2140      	movs	r1, #64	; 0x40
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 f831 	bl	800212c <I2C_WaitOnFlagUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	80002000 	.word	0x80002000

080020e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d103      	bne.n	8002102 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2200      	movs	r2, #0
 8002100:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d007      	beq.n	8002120 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	619a      	str	r2, [r3, #24]
  }
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4613      	mov	r3, r2
 800213a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800213c:	e022      	b.n	8002184 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d01e      	beq.n	8002184 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002146:	f7ff f9a5 	bl	8001494 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	429a      	cmp	r2, r3
 8002154:	d302      	bcc.n	800215c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d113      	bne.n	8002184 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002160:	f043 0220 	orr.w	r2, r3, #32
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e00f      	b.n	80021a4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	4013      	ands	r3, r2
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	429a      	cmp	r2, r3
 8002192:	bf0c      	ite	eq
 8002194:	2301      	moveq	r3, #1
 8002196:	2300      	movne	r3, #0
 8002198:	b2db      	uxtb	r3, r3
 800219a:	461a      	mov	r2, r3
 800219c:	79fb      	ldrb	r3, [r7, #7]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d0cd      	beq.n	800213e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021b8:	e02c      	b.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f000 f870 	bl	80022a4 <I2C_IsErrorOccurred>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e02a      	b.n	8002224 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d4:	d01e      	beq.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d6:	f7ff f95d 	bl	8001494 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d302      	bcc.n	80021ec <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d113      	bne.n	8002214 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f0:	f043 0220 	orr.w	r2, r3, #32
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2220      	movs	r2, #32
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e007      	b.n	8002224 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b02      	cmp	r3, #2
 8002220:	d1cb      	bne.n	80021ba <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3710      	adds	r7, #16
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002238:	e028      	b.n	800228c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f000 f830 	bl	80022a4 <I2C_IsErrorOccurred>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e026      	b.n	800229c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224e:	f7ff f921 	bl	8001494 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	68ba      	ldr	r2, [r7, #8]
 800225a:	429a      	cmp	r2, r3
 800225c:	d302      	bcc.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d113      	bne.n	800228c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002268:	f043 0220 	orr.w	r2, r3, #32
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e007      	b.n	800229c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b20      	cmp	r3, #32
 8002298:	d1cf      	bne.n	800223a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	f003 0310 	and.w	r3, r3, #16
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d075      	beq.n	80023bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2210      	movs	r2, #16
 80022d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80022d8:	e056      	b.n	8002388 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d052      	beq.n	8002388 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022e2:	f7ff f8d7 	bl	8001494 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	68ba      	ldr	r2, [r7, #8]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d302      	bcc.n	80022f8 <I2C_IsErrorOccurred+0x54>
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d147      	bne.n	8002388 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800230a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231a:	d12e      	bne.n	800237a <I2C_IsErrorOccurred+0xd6>
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002322:	d02a      	beq.n	800237a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	2b20      	cmp	r3, #32
 8002328:	d027      	beq.n	800237a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002338:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800233a:	f7ff f8ab 	bl	8001494 <HAL_GetTick>
 800233e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002340:	e01b      	b.n	800237a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002342:	f7ff f8a7 	bl	8001494 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	2b19      	cmp	r3, #25
 800234e:	d914      	bls.n	800237a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002354:	f043 0220 	orr.w	r2, r3, #32
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f003 0320 	and.w	r3, r3, #32
 8002384:	2b20      	cmp	r3, #32
 8002386:	d1dc      	bne.n	8002342 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	699b      	ldr	r3, [r3, #24]
 800238e:	f003 0320 	and.w	r3, r3, #32
 8002392:	2b20      	cmp	r3, #32
 8002394:	d003      	beq.n	800239e <I2C_IsErrorOccurred+0xfa>
 8002396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800239a:	2b00      	cmp	r3, #0
 800239c:	d09d      	beq.n	80022da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800239e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2220      	movs	r2, #32
 80023ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80023ae:	6a3b      	ldr	r3, [r7, #32]
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00b      	beq.n	8002408 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80023f0:	6a3b      	ldr	r3, [r7, #32]
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00b      	beq.n	800242a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002412:	6a3b      	ldr	r3, [r7, #32]
 8002414:	f043 0302 	orr.w	r3, r3, #2
 8002418:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800242a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01c      	beq.n	800246c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f7ff fe56 	bl	80020e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4b0d      	ldr	r3, [pc, #52]	; (8002478 <I2C_IsErrorOccurred+0x1d4>)
 8002444:	400b      	ands	r3, r1
 8002446:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800244c:	6a3b      	ldr	r3, [r7, #32]
 800244e:	431a      	orrs	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2220      	movs	r2, #32
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800246c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002470:	4618      	mov	r0, r3
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	fe00e800 	.word	0xfe00e800

0800247c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	460b      	mov	r3, r1
 8002488:	817b      	strh	r3, [r7, #10]
 800248a:	4613      	mov	r3, r2
 800248c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800248e:	897b      	ldrh	r3, [r7, #10]
 8002490:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002494:	7a7b      	ldrb	r3, [r7, #9]
 8002496:	041b      	lsls	r3, r3, #16
 8002498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800249c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024aa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	0d5b      	lsrs	r3, r3, #21
 80024b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <I2C_TransferConfig+0x60>)
 80024bc:	430b      	orrs	r3, r1
 80024be:	43db      	mvns	r3, r3
 80024c0:	ea02 0103 	and.w	r1, r2, r3
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80024ce:	bf00      	nop
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	03ff63ff 	.word	0x03ff63ff

080024e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d138      	bne.n	8002568 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d101      	bne.n	8002504 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002500:	2302      	movs	r3, #2
 8002502:	e032      	b.n	800256a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2224      	movs	r2, #36	; 0x24
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0201 	bic.w	r2, r2, #1
 8002522:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002532:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f042 0201 	orr.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002564:	2300      	movs	r3, #0
 8002566:	e000      	b.n	800256a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002568:	2302      	movs	r3, #2
  }
}
 800256a:	4618      	mov	r0, r3
 800256c:	370c      	adds	r7, #12
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002576:	b480      	push	{r7}
 8002578:	b085      	sub	sp, #20
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
 800257e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	d139      	bne.n	8002600 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002596:	2302      	movs	r3, #2
 8002598:	e033      	b.n	8002602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2224      	movs	r2, #36	; 0x24
 80025a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0201 	bic.w	r2, r2, #1
 80025b8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025c8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0201 	orr.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e000      	b.n	8002602 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002600:	2302      	movs	r3, #2
  }
}
 8002602:	4618      	mov	r0, r3
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002614:	4b04      	ldr	r3, [pc, #16]	; (8002628 <HAL_PWREx_GetVoltageRange+0x18>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40007000 	.word	0x40007000

0800262c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800263a:	d130      	bne.n	800269e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002644:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002648:	d038      	beq.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800264a:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002652:	4a1e      	ldr	r2, [pc, #120]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002658:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800265a:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2232      	movs	r2, #50	; 0x32
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	4a1b      	ldr	r2, [pc, #108]	; (80026d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002666:	fba2 2303 	umull	r2, r3, r2, r3
 800266a:	0c9b      	lsrs	r3, r3, #18
 800266c:	3301      	adds	r3, #1
 800266e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002670:	e002      	b.n	8002678 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	3b01      	subs	r3, #1
 8002676:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002678:	4b14      	ldr	r3, [pc, #80]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002684:	d102      	bne.n	800268c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1f2      	bne.n	8002672 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800268c:	4b0f      	ldr	r3, [pc, #60]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002698:	d110      	bne.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e00f      	b.n	80026be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026aa:	d007      	beq.n	80026bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80026ac:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80026b4:	4a05      	ldr	r2, [pc, #20]	; (80026cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40007000 	.word	0x40007000
 80026d0:	20000000 	.word	0x20000000
 80026d4:	431bde83 	.word	0x431bde83

080026d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b088      	sub	sp, #32
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f000 bc10 	b.w	8002f0c <HAL_RCC_OscConfig+0x834>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	4b96      	ldr	r3, [pc, #600]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 030c 	and.w	r3, r3, #12
 80026f4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f6:	4b94      	ldr	r3, [pc, #592]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	f003 0303 	and.w	r3, r3, #3
 80026fe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0310 	and.w	r3, r3, #16
 8002708:	2b00      	cmp	r3, #0
 800270a:	f000 80e4 	beq.w	80028d6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <HAL_RCC_OscConfig+0x4c>
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	f040 808b 	bne.w	8002832 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b01      	cmp	r3, #1
 8002720:	f040 8087 	bne.w	8002832 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002724:	4b88      	ldr	r3, [pc, #544]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x64>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e3e7      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a1a      	ldr	r2, [r3, #32]
 8002740:	4b81      	ldr	r3, [pc, #516]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b00      	cmp	r3, #0
 800274a:	d004      	beq.n	8002756 <HAL_RCC_OscConfig+0x7e>
 800274c:	4b7e      	ldr	r3, [pc, #504]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002754:	e005      	b.n	8002762 <HAL_RCC_OscConfig+0x8a>
 8002756:	4b7c      	ldr	r3, [pc, #496]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800275c:	091b      	lsrs	r3, r3, #4
 800275e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002762:	4293      	cmp	r3, r2
 8002764:	d223      	bcs.n	80027ae <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fd7a 	bl	8003264 <RCC_SetFlashLatencyFromMSIRange>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e3c8      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a72      	ldr	r2, [pc, #456]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002780:	f043 0308 	orr.w	r3, r3, #8
 8002784:	6013      	str	r3, [r2, #0]
 8002786:	4b70      	ldr	r3, [pc, #448]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	496d      	ldr	r1, [pc, #436]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002798:	4b6b      	ldr	r3, [pc, #428]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	69db      	ldr	r3, [r3, #28]
 80027a4:	021b      	lsls	r3, r3, #8
 80027a6:	4968      	ldr	r1, [pc, #416]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
 80027ac:	e025      	b.n	80027fa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ae:	4b66      	ldr	r3, [pc, #408]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a65      	ldr	r2, [pc, #404]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b63      	ldr	r3, [pc, #396]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4960      	ldr	r1, [pc, #384]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027cc:	4b5e      	ldr	r3, [pc, #376]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	495b      	ldr	r1, [pc, #364]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d109      	bne.n	80027fa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a1b      	ldr	r3, [r3, #32]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f000 fd3a 	bl	8003264 <RCC_SetFlashLatencyFromMSIRange>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e388      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027fa:	f000 fc6f 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 80027fe:	4602      	mov	r2, r0
 8002800:	4b51      	ldr	r3, [pc, #324]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 030f 	and.w	r3, r3, #15
 800280a:	4950      	ldr	r1, [pc, #320]	; (800294c <HAL_RCC_OscConfig+0x274>)
 800280c:	5ccb      	ldrb	r3, [r1, r3]
 800280e:	f003 031f 	and.w	r3, r3, #31
 8002812:	fa22 f303 	lsr.w	r3, r2, r3
 8002816:	4a4e      	ldr	r2, [pc, #312]	; (8002950 <HAL_RCC_OscConfig+0x278>)
 8002818:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800281a:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <HAL_RCC_OscConfig+0x27c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fde8 	bl	80013f4 <HAL_InitTick>
 8002824:	4603      	mov	r3, r0
 8002826:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002828:	7bfb      	ldrb	r3, [r7, #15]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d052      	beq.n	80028d4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	e36c      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d032      	beq.n	80028a0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800283a:	4b43      	ldr	r3, [pc, #268]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a42      	ldr	r2, [pc, #264]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002846:	f7fe fe25 	bl	8001494 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800284e:	f7fe fe21 	bl	8001494 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e355      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002860:	4b39      	ldr	r3, [pc, #228]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800286c:	4b36      	ldr	r3, [pc, #216]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a35      	ldr	r2, [pc, #212]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002872:	f043 0308 	orr.w	r3, r3, #8
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b33      	ldr	r3, [pc, #204]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4930      	ldr	r1, [pc, #192]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002886:	4313      	orrs	r3, r2
 8002888:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800288a:	4b2f      	ldr	r3, [pc, #188]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	021b      	lsls	r3, r3, #8
 8002898:	492b      	ldr	r1, [pc, #172]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800289a:	4313      	orrs	r3, r2
 800289c:	604b      	str	r3, [r1, #4]
 800289e:	e01a      	b.n	80028d6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028a0:	4b29      	ldr	r3, [pc, #164]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a28      	ldr	r2, [pc, #160]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80028a6:	f023 0301 	bic.w	r3, r3, #1
 80028aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028ac:	f7fe fdf2 	bl	8001494 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028b4:	f7fe fdee 	bl	8001494 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e322      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x1dc>
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d073      	beq.n	80029ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_OscConfig+0x21c>
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	2b0c      	cmp	r3, #12
 80028ec:	d10e      	bne.n	800290c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d10b      	bne.n	800290c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d063      	beq.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d15f      	bne.n	80029c8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e2ff      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002914:	d106      	bne.n	8002924 <HAL_RCC_OscConfig+0x24c>
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800291c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002920:	6013      	str	r3, [r2, #0]
 8002922:	e025      	b.n	8002970 <HAL_RCC_OscConfig+0x298>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800292c:	d114      	bne.n	8002958 <HAL_RCC_OscConfig+0x280>
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a02      	ldr	r2, [pc, #8]	; (8002948 <HAL_RCC_OscConfig+0x270>)
 8002940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002944:	6013      	str	r3, [r2, #0]
 8002946:	e013      	b.n	8002970 <HAL_RCC_OscConfig+0x298>
 8002948:	40021000 	.word	0x40021000
 800294c:	080055f0 	.word	0x080055f0
 8002950:	20000000 	.word	0x20000000
 8002954:	20000004 	.word	0x20000004
 8002958:	4ba0      	ldr	r3, [pc, #640]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a9f      	ldr	r2, [pc, #636]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 800295e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002962:	6013      	str	r3, [r2, #0]
 8002964:	4b9d      	ldr	r3, [pc, #628]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a9c      	ldr	r2, [pc, #624]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 800296a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d013      	beq.n	80029a0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002978:	f7fe fd8c 	bl	8001494 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002980:	f7fe fd88 	bl	8001494 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b64      	cmp	r3, #100	; 0x64
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e2bc      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002992:	4b92      	ldr	r3, [pc, #584]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x2a8>
 800299e:	e014      	b.n	80029ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a0:	f7fe fd78 	bl	8001494 <HAL_GetTick>
 80029a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029a6:	e008      	b.n	80029ba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029a8:	f7fe fd74 	bl	8001494 <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e2a8      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ba:	4b88      	ldr	r3, [pc, #544]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f0      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2d0>
 80029c6:	e000      	b.n	80029ca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d060      	beq.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_OscConfig+0x310>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	2b0c      	cmp	r3, #12
 80029e0:	d119      	bne.n	8002a16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d116      	bne.n	8002a16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029e8:	4b7c      	ldr	r3, [pc, #496]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d005      	beq.n	8002a00 <HAL_RCC_OscConfig+0x328>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e285      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a00:	4b76      	ldr	r3, [pc, #472]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	691b      	ldr	r3, [r3, #16]
 8002a0c:	061b      	lsls	r3, r3, #24
 8002a0e:	4973      	ldr	r1, [pc, #460]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a14:	e040      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d023      	beq.n	8002a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a1e:	4b6f      	ldr	r3, [pc, #444]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fd33 	bl	8001494 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7fe fd2f 	bl	8001494 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e263      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a44:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	061b      	lsls	r3, r3, #24
 8002a5e:	495f      	ldr	r1, [pc, #380]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	604b      	str	r3, [r1, #4]
 8002a64:	e018      	b.n	8002a98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b5d      	ldr	r3, [pc, #372]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a5c      	ldr	r2, [pc, #368]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a72:	f7fe fd0f 	bl	8001494 <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a7a:	f7fe fd0b 	bl	8001494 <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e23f      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1f0      	bne.n	8002a7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0308 	and.w	r3, r3, #8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d03c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d01c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	4a4a      	ldr	r2, [pc, #296]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fcea 	bl	8001494 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fce6 	bl	8001494 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e21a      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x3ec>
 8002ae4:	e01b      	b.n	8002b1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aec:	4a3b      	ldr	r2, [pc, #236]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002aee:	f023 0301 	bic.w	r3, r3, #1
 8002af2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7fe fccd 	bl	8001494 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afe:	f7fe fcc9 	bl	8001494 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e1fd      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b10:	4b32      	ldr	r3, [pc, #200]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1ef      	bne.n	8002afe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a6 	beq.w	8002c78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b30:	4b2a      	ldr	r3, [pc, #168]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10d      	bne.n	8002b58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b40:	4a26      	ldr	r2, [pc, #152]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b46:	6593      	str	r3, [r2, #88]	; 0x58
 8002b48:	4b24      	ldr	r3, [pc, #144]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b50:	60bb      	str	r3, [r7, #8]
 8002b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b54:	2301      	movs	r3, #1
 8002b56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b58:	4b21      	ldr	r3, [pc, #132]	; (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d118      	bne.n	8002b96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a1d      	ldr	r2, [pc, #116]	; (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b70:	f7fe fc90 	bl	8001494 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b78:	f7fe fc8c 	bl	8001494 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e1c0      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8a:	4b15      	ldr	r3, [pc, #84]	; (8002be0 <HAL_RCC_OscConfig+0x508>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0f0      	beq.n	8002b78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4d8>
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba4:	4a0d      	ldr	r2, [pc, #52]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f043 0301 	orr.w	r3, r3, #1
 8002baa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bae:	e029      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	2b05      	cmp	r3, #5
 8002bb6:	d115      	bne.n	8002be4 <HAL_RCC_OscConfig+0x50c>
 8002bb8:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bbe:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bc0:	f043 0304 	orr.w	r3, r3, #4
 8002bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bce:	4a03      	ldr	r2, [pc, #12]	; (8002bdc <HAL_RCC_OscConfig+0x504>)
 8002bd0:	f043 0301 	orr.w	r3, r3, #1
 8002bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd8:	e014      	b.n	8002c04 <HAL_RCC_OscConfig+0x52c>
 8002bda:	bf00      	nop
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40007000 	.word	0x40007000
 8002be4:	4b9a      	ldr	r3, [pc, #616]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bea:	4a99      	ldr	r2, [pc, #612]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bf4:	4b96      	ldr	r3, [pc, #600]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bfa:	4a95      	ldr	r2, [pc, #596]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002bfc:	f023 0304 	bic.w	r3, r3, #4
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d016      	beq.n	8002c3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fc42 	bl	8001494 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fc3e 	bl	8001494 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e170      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2a:	4b89      	ldr	r3, [pc, #548]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d0ed      	beq.n	8002c14 <HAL_RCC_OscConfig+0x53c>
 8002c38:	e015      	b.n	8002c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c3a:	f7fe fc2b 	bl	8001494 <HAL_GetTick>
 8002c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c40:	e00a      	b.n	8002c58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c42:	f7fe fc27 	bl	8001494 <HAL_GetTick>
 8002c46:	4602      	mov	r2, r0
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e159      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c58:	4b7d      	ldr	r3, [pc, #500]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1ed      	bne.n	8002c42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d105      	bne.n	8002c78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c6c:	4b78      	ldr	r3, [pc, #480]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c70:	4a77      	ldr	r2, [pc, #476]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002c72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c76:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0320 	and.w	r3, r3, #32
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d03c      	beq.n	8002cfe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d01c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c8c:	4b70      	ldr	r3, [pc, #448]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002c8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c92:	4a6f      	ldr	r2, [pc, #444]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002c94:	f043 0301 	orr.w	r3, r3, #1
 8002c98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe fbfa 	bl	8001494 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ca4:	f7fe fbf6 	bl	8001494 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e12a      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cb6:	4b66      	ldr	r3, [pc, #408]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d0ef      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x5cc>
 8002cc4:	e01b      	b.n	8002cfe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cc6:	4b62      	ldr	r3, [pc, #392]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ccc:	4a60      	ldr	r2, [pc, #384]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002cce:	f023 0301 	bic.w	r3, r3, #1
 8002cd2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd6:	f7fe fbdd 	bl	8001494 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cde:	f7fe fbd9 	bl	8001494 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e10d      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cf0:	4b57      	ldr	r3, [pc, #348]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002cf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1ef      	bne.n	8002cde <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8101 	beq.w	8002f0a <HAL_RCC_OscConfig+0x832>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	f040 80c9 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d12:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f003 0203 	and.w	r2, r3, #3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d12c      	bne.n	8002d80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	3b01      	subs	r3, #1
 8002d32:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d123      	bne.n	8002d80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d42:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d11b      	bne.n	8002d80 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d113      	bne.n	8002d80 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	085b      	lsrs	r3, r3, #1
 8002d64:	3b01      	subs	r3, #1
 8002d66:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d109      	bne.n	8002d80 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	085b      	lsrs	r3, r3, #1
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d06b      	beq.n	8002e58 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	2b0c      	cmp	r3, #12
 8002d84:	d062      	beq.n	8002e4c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d86:	4b32      	ldr	r3, [pc, #200]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e0ba      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d96:	4b2e      	ldr	r3, [pc, #184]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a2d      	ldr	r2, [pc, #180]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002da2:	f7fe fb77 	bl	8001494 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002daa:	f7fe fb73 	bl	8001494 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e0a7      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dbc:	4b24      	ldr	r3, [pc, #144]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1f0      	bne.n	8002daa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dc8:	4b21      	ldr	r3, [pc, #132]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <HAL_RCC_OscConfig+0x77c>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	0112      	lsls	r2, r2, #4
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de2:	0212      	lsls	r2, r2, #8
 8002de4:	4311      	orrs	r1, r2
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dea:	0852      	lsrs	r2, r2, #1
 8002dec:	3a01      	subs	r2, #1
 8002dee:	0552      	lsls	r2, r2, #21
 8002df0:	4311      	orrs	r1, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002df6:	0852      	lsrs	r2, r2, #1
 8002df8:	3a01      	subs	r2, #1
 8002dfa:	0652      	lsls	r2, r2, #25
 8002dfc:	4311      	orrs	r1, r2
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e02:	06d2      	lsls	r2, r2, #27
 8002e04:	430a      	orrs	r2, r1
 8002e06:	4912      	ldr	r1, [pc, #72]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0f      	ldr	r2, [pc, #60]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002e12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e16:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e18:	4b0d      	ldr	r3, [pc, #52]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	4a0c      	ldr	r2, [pc, #48]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002e1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e22:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e24:	f7fe fb36 	bl	8001494 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2c:	f7fe fb32 	bl	8001494 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e066      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e3e:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <HAL_RCC_OscConfig+0x778>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e4a:	e05e      	b.n	8002f0a <HAL_RCC_OscConfig+0x832>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e05d      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
 8002e50:	40021000 	.word	0x40021000
 8002e54:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e58:	4b2e      	ldr	r3, [pc, #184]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d152      	bne.n	8002f0a <HAL_RCC_OscConfig+0x832>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e64:	4b2b      	ldr	r3, [pc, #172]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2a      	ldr	r2, [pc, #168]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	4a27      	ldr	r2, [pc, #156]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e7c:	f7fe fb0a 	bl	8001494 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe fb06 	bl	8001494 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e03a      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e96:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x7ac>
 8002ea2:	e032      	b.n	8002f0a <HAL_RCC_OscConfig+0x832>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	2b0c      	cmp	r3, #12
 8002ea8:	d02d      	beq.n	8002f06 <HAL_RCC_OscConfig+0x82e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a19      	ldr	r2, [pc, #100]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002eb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eb4:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_RCC_OscConfig+0x7f6>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002ec2:	4b14      	ldr	r3, [pc, #80]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002ec8:	f023 0303 	bic.w	r3, r3, #3
 8002ecc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	4a10      	ldr	r2, [pc, #64]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002ed4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002ed8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002edc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ede:	f7fe fad9 	bl	8001494 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	e008      	b.n	8002ef8 <HAL_RCC_OscConfig+0x820>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ee6:	f7fe fad5 	bl	8001494 <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x820>
          {
            return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e009      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <HAL_RCC_OscConfig+0x83c>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1f0      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x80e>
 8002f04:	e001      	b.n	8002f0a <HAL_RCC_OscConfig+0x832>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e000      	b.n	8002f0c <HAL_RCC_OscConfig+0x834>
      }
    }
  }
  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000

08002f18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e0c8      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d910      	bls.n	8002f5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b63      	ldr	r3, [pc, #396]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 0207 	bic.w	r2, r3, #7
 8002f42:	4961      	ldr	r1, [pc, #388]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b5f      	ldr	r3, [pc, #380]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0307 	and.w	r3, r3, #7
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d001      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e0b0      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d04c      	beq.n	8003002 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f70:	4b56      	ldr	r3, [pc, #344]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d121      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e09e      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f88:	4b50      	ldr	r3, [pc, #320]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d115      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e092      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fa0:	4b4a      	ldr	r3, [pc, #296]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d109      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e086      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fb0:	4b46      	ldr	r3, [pc, #280]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e07e      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fc0:	4b42      	ldr	r3, [pc, #264]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f023 0203 	bic.w	r2, r3, #3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	493f      	ldr	r1, [pc, #252]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd2:	f7fe fa5f 	bl	8001494 <HAL_GetTick>
 8002fd6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd8:	e00a      	b.n	8002ff0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fda:	f7fe fa5b 	bl	8001494 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e066      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff0:	4b36      	ldr	r3, [pc, #216]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 020c 	and.w	r2, r3, #12
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d1eb      	bne.n	8002fda <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300e:	4b2f      	ldr	r3, [pc, #188]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	492c      	ldr	r1, [pc, #176]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003020:	4b29      	ldr	r3, [pc, #164]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	429a      	cmp	r2, r3
 800302c:	d210      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800302e:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f023 0207 	bic.w	r2, r3, #7
 8003036:	4924      	ldr	r1, [pc, #144]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	4313      	orrs	r3, r2
 800303c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800303e:	4b22      	ldr	r3, [pc, #136]	; (80030c8 <HAL_RCC_ClockConfig+0x1b0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	683a      	ldr	r2, [r7, #0]
 8003048:	429a      	cmp	r2, r3
 800304a:	d001      	beq.n	8003050 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e036      	b.n	80030be <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800305c:	4b1b      	ldr	r3, [pc, #108]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4918      	ldr	r1, [pc, #96]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0308 	and.w	r3, r3, #8
 8003076:	2b00      	cmp	r3, #0
 8003078:	d009      	beq.n	800308e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800307a:	4b14      	ldr	r3, [pc, #80]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4910      	ldr	r1, [pc, #64]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308e:	f000 f825 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003092:	4602      	mov	r2, r0
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <HAL_RCC_ClockConfig+0x1b4>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	091b      	lsrs	r3, r3, #4
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	490c      	ldr	r1, [pc, #48]	; (80030d0 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	5ccb      	ldrb	r3, [r1, r3]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a0a      	ldr	r2, [pc, #40]	; (80030d4 <HAL_RCC_ClockConfig+0x1bc>)
 80030ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030ae:	4b0a      	ldr	r3, [pc, #40]	; (80030d8 <HAL_RCC_ClockConfig+0x1c0>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe f99e 	bl	80013f4 <HAL_InitTick>
 80030b8:	4603      	mov	r3, r0
 80030ba:	72fb      	strb	r3, [r7, #11]

  return status;
 80030bc:	7afb      	ldrb	r3, [r7, #11]
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40022000 	.word	0x40022000
 80030cc:	40021000 	.word	0x40021000
 80030d0:	080055f0 	.word	0x080055f0
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	2300      	movs	r3, #0
 80030e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030f4:	4b3b      	ldr	r3, [pc, #236]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0303 	and.w	r3, r3, #3
 80030fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d005      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x34>
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b0c      	cmp	r3, #12
 8003108:	d121      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d11e      	bne.n	800314e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003110:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0308 	and.w	r3, r3, #8
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800311c:	4b31      	ldr	r3, [pc, #196]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800311e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003122:	0a1b      	lsrs	r3, r3, #8
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	61fb      	str	r3, [r7, #28]
 800312a:	e005      	b.n	8003138 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800312c:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	091b      	lsrs	r3, r3, #4
 8003132:	f003 030f 	and.w	r3, r3, #15
 8003136:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003138:	4a2b      	ldr	r2, [pc, #172]	; (80031e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003140:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800314c:	e00a      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d102      	bne.n	800315a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003154:	4b25      	ldr	r3, [pc, #148]	; (80031ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	e004      	b.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2b08      	cmp	r3, #8
 800315e:	d101      	bne.n	8003164 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003162:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b0c      	cmp	r3, #12
 8003168:	d134      	bne.n	80031d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d003      	beq.n	8003182 <HAL_RCC_GetSysClockFreq+0xa6>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b03      	cmp	r3, #3
 800317e:	d003      	beq.n	8003188 <HAL_RCC_GetSysClockFreq+0xac>
 8003180:	e005      	b.n	800318e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003182:	4b1a      	ldr	r3, [pc, #104]	; (80031ec <HAL_RCC_GetSysClockFreq+0x110>)
 8003184:	617b      	str	r3, [r7, #20]
      break;
 8003186:	e005      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800318a:	617b      	str	r3, [r7, #20]
      break;
 800318c:	e002      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	617b      	str	r3, [r7, #20]
      break;
 8003192:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003194:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 0307 	and.w	r3, r3, #7
 800319e:	3301      	adds	r3, #1
 80031a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031a2:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	fb03 f202 	mul.w	r2, r3, r2
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ba:	4b0a      	ldr	r3, [pc, #40]	; (80031e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	0e5b      	lsrs	r3, r3, #25
 80031c0:	f003 0303 	and.w	r3, r3, #3
 80031c4:	3301      	adds	r3, #1
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031d4:	69bb      	ldr	r3, [r7, #24]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3724      	adds	r7, #36	; 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	08005608 	.word	0x08005608
 80031ec:	00f42400 	.word	0x00f42400
 80031f0:	007a1200 	.word	0x007a1200

080031f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <HAL_RCC_GetHCLKFreq+0x14>)
 80031fa:	681b      	ldr	r3, [r3, #0]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	20000000 	.word	0x20000000

0800320c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003210:	f7ff fff0 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003214:	4602      	mov	r2, r0
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 0307 	and.w	r3, r3, #7
 8003220:	4904      	ldr	r1, [pc, #16]	; (8003234 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003222:	5ccb      	ldrb	r3, [r1, r3]
 8003224:	f003 031f 	and.w	r3, r3, #31
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	08005600 	.word	0x08005600

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800323c:	f7ff ffda 	bl	80031f4 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0adb      	lsrs	r3, r3, #11
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4904      	ldr	r1, [pc, #16]	; (8003260 <HAL_RCC_GetPCLK2Freq+0x28>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003258:	4618      	mov	r0, r3
 800325a:	bd80      	pop	{r7, pc}
 800325c:	40021000 	.word	0x40021000
 8003260:	08005600 	.word	0x08005600

08003264 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800326c:	2300      	movs	r3, #0
 800326e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003270:	4b2a      	ldr	r3, [pc, #168]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800327c:	f7ff f9c8 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 8003280:	6178      	str	r0, [r7, #20]
 8003282:	e014      	b.n	80032ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003284:	4b25      	ldr	r3, [pc, #148]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	4a24      	ldr	r2, [pc, #144]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800328a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800328e:	6593      	str	r3, [r2, #88]	; 0x58
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800329c:	f7ff f9b8 	bl	8002610 <HAL_PWREx_GetVoltageRange>
 80032a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032a2:	4b1e      	ldr	r3, [pc, #120]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a6:	4a1d      	ldr	r2, [pc, #116]	; (800331c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b4:	d10b      	bne.n	80032ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d919      	bls.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2ba0      	cmp	r3, #160	; 0xa0
 80032c0:	d902      	bls.n	80032c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032c2:	2302      	movs	r3, #2
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	e013      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c8:	2301      	movs	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	e010      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d902      	bls.n	80032da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032d4:	2303      	movs	r3, #3
 80032d6:	613b      	str	r3, [r7, #16]
 80032d8:	e00a      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b80      	cmp	r3, #128	; 0x80
 80032de:	d102      	bne.n	80032e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032e0:	2302      	movs	r3, #2
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	e004      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b70      	cmp	r3, #112	; 0x70
 80032ea:	d101      	bne.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032ec:	2301      	movs	r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f023 0207 	bic.w	r2, r3, #7
 80032f8:	4909      	ldr	r1, [pc, #36]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003300:	4b07      	ldr	r3, [pc, #28]	; (8003320 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	d001      	beq.n	8003312 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40021000 	.word	0x40021000
 8003320:	40022000 	.word	0x40022000

08003324 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800332c:	2300      	movs	r3, #0
 800332e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003330:	2300      	movs	r3, #0
 8003332:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800333c:	2b00      	cmp	r3, #0
 800333e:	d031      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003344:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003348:	d01a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800334a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800334e:	d814      	bhi.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003350:	2b00      	cmp	r3, #0
 8003352:	d009      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003354:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003358:	d10f      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800335a:	4b5d      	ldr	r3, [pc, #372]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	4a5c      	ldr	r2, [pc, #368]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003364:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003366:	e00c      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3304      	adds	r3, #4
 800336c:	2100      	movs	r1, #0
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fa44 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003374:	4603      	mov	r3, r0
 8003376:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003378:	e003      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	74fb      	strb	r3, [r7, #19]
      break;
 800337e:	e000      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003380:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003382:	7cfb      	ldrb	r3, [r7, #19]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10b      	bne.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003388:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003396:	494e      	ldr	r1, [pc, #312]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003398:	4313      	orrs	r3, r2
 800339a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800339e:	e001      	b.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033a0:	7cfb      	ldrb	r3, [r7, #19]
 80033a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 809e 	beq.w	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033b6:	4b46      	ldr	r3, [pc, #280]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033c6:	2300      	movs	r3, #0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d00d      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d0:	4a3f      	ldr	r2, [pc, #252]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6593      	str	r3, [r2, #88]	; 0x58
 80033d8:	4b3d      	ldr	r3, [pc, #244]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033e8:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a39      	ldr	r2, [pc, #228]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80033ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033f4:	f7fe f84e 	bl	8001494 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033fa:	e009      	b.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033fc:	f7fe f84a 	bl	8001494 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d902      	bls.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	74fb      	strb	r3, [r7, #19]
        break;
 800340e:	e005      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003410:	4b30      	ldr	r3, [pc, #192]	; (80034d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003418:	2b00      	cmp	r3, #0
 800341a:	d0ef      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800341c:	7cfb      	ldrb	r3, [r7, #19]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d15a      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d01e      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d019      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800343e:	4b24      	ldr	r3, [pc, #144]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003440:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003448:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800344a:	4b21      	ldr	r3, [pc, #132]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4a1f      	ldr	r2, [pc, #124]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003452:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800345a:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800345c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003460:	4a1b      	ldr	r2, [pc, #108]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003462:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003466:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800346a:	4a19      	ldr	r2, [pc, #100]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0301 	and.w	r3, r3, #1
 8003478:	2b00      	cmp	r3, #0
 800347a:	d016      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe f80a 	bl	8001494 <HAL_GetTick>
 8003480:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003482:	e00b      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003484:	f7fe f806 	bl	8001494 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003492:	4293      	cmp	r3, r2
 8003494:	d902      	bls.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	74fb      	strb	r3, [r7, #19]
            break;
 800349a:	e006      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800349c:	4b0c      	ldr	r3, [pc, #48]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800349e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0ec      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034aa:	7cfb      	ldrb	r3, [r7, #19]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10b      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034b0:	4b07      	ldr	r3, [pc, #28]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034be:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034c6:	e009      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
 80034cc:	e006      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80034ce:	bf00      	nop
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d8:	7cfb      	ldrb	r3, [r7, #19]
 80034da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034dc:	7c7b      	ldrb	r3, [r7, #17]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b9e      	ldr	r3, [pc, #632]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e6:	4a9d      	ldr	r2, [pc, #628]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034fa:	4b98      	ldr	r3, [pc, #608]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80034fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003500:	f023 0203 	bic.w	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	4994      	ldr	r1, [pc, #592]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800350a:	4313      	orrs	r3, r2
 800350c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800351c:	4b8f      	ldr	r3, [pc, #572]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f023 020c 	bic.w	r2, r3, #12
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	498c      	ldr	r1, [pc, #560]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00a      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800353e:	4b87      	ldr	r3, [pc, #540]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003544:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	4983      	ldr	r1, [pc, #524]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800354e:	4313      	orrs	r3, r2
 8003550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0308 	and.w	r3, r3, #8
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003560:	4b7e      	ldr	r3, [pc, #504]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	497b      	ldr	r1, [pc, #492]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003570:	4313      	orrs	r3, r2
 8003572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003582:	4b76      	ldr	r3, [pc, #472]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	4972      	ldr	r1, [pc, #456]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035a4:	4b6d      	ldr	r3, [pc, #436]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b2:	496a      	ldr	r1, [pc, #424]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00a      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035c6:	4b65      	ldr	r3, [pc, #404]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035d4:	4961      	ldr	r1, [pc, #388]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00a      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035e8:	4b5c      	ldr	r3, [pc, #368]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	4959      	ldr	r1, [pc, #356]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b00      	cmp	r3, #0
 8003608:	d00a      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800360a:	4b54      	ldr	r3, [pc, #336]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800360c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003610:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	4950      	ldr	r1, [pc, #320]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800361a:	4313      	orrs	r3, r2
 800361c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800362c:	4b4b      	ldr	r3, [pc, #300]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800362e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003632:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363a:	4948      	ldr	r1, [pc, #288]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800363c:	4313      	orrs	r3, r2
 800363e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003650:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003654:	f023 0203 	bic.w	r2, r3, #3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	493f      	ldr	r1, [pc, #252]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800365e:	4313      	orrs	r3, r2
 8003660:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d028      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003670:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800367e:	4937      	ldr	r1, [pc, #220]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800368a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800368e:	d106      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	4a31      	ldr	r2, [pc, #196]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800369a:	60d3      	str	r3, [r2, #12]
 800369c:	e011      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036a6:	d10c      	bne.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	3304      	adds	r3, #4
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 f8a4 	bl	80037fc <RCCEx_PLLSAI1_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d028      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036ce:	4b23      	ldr	r3, [pc, #140]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	491f      	ldr	r1, [pc, #124]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036ec:	d106      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036ee:	4b1b      	ldr	r3, [pc, #108]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036f8:	60d3      	str	r3, [r2, #12]
 80036fa:	e011      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003700:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003704:	d10c      	bne.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	3304      	adds	r3, #4
 800370a:	2101      	movs	r1, #1
 800370c:	4618      	mov	r0, r3
 800370e:	f000 f875 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003716:	7cfb      	ldrb	r3, [r7, #19]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800371c:	7cfb      	ldrb	r3, [r7, #19]
 800371e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d02b      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003732:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800373a:	4908      	ldr	r1, [pc, #32]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800373c:	4313      	orrs	r3, r2
 800373e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003746:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800374a:	d109      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	4a02      	ldr	r2, [pc, #8]	; (800375c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003756:	60d3      	str	r3, [r2, #12]
 8003758:	e014      	b.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003768:	d10c      	bne.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3304      	adds	r3, #4
 800376e:	2101      	movs	r1, #1
 8003770:	4618      	mov	r0, r3
 8003772:	f000 f843 	bl	80037fc <RCCEx_PLLSAI1_Config>
 8003776:	4603      	mov	r3, r0
 8003778:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800377a:	7cfb      	ldrb	r3, [r7, #19]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d001      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01c      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003790:	4b19      	ldr	r3, [pc, #100]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003796:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379e:	4916      	ldr	r1, [pc, #88]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ae:	d10c      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3304      	adds	r3, #4
 80037b4:	2102      	movs	r1, #2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 f820 	bl	80037fc <RCCEx_PLLSAI1_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037c0:	7cfb      	ldrb	r3, [r7, #19]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80037d6:	4b08      	ldr	r3, [pc, #32]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e4:	4904      	ldr	r1, [pc, #16]	; (80037f8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037ec:	7cbb      	ldrb	r3, [r7, #18]
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40021000 	.word	0x40021000

080037fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800380a:	4b74      	ldr	r3, [pc, #464]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d018      	beq.n	8003848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003816:	4b71      	ldr	r3, [pc, #452]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	f003 0203 	and.w	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	429a      	cmp	r2, r3
 8003824:	d10d      	bne.n	8003842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
       ||
 800382a:	2b00      	cmp	r3, #0
 800382c:	d009      	beq.n	8003842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800382e:	4b6b      	ldr	r3, [pc, #428]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	091b      	lsrs	r3, r3, #4
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	685b      	ldr	r3, [r3, #4]
       ||
 800383e:	429a      	cmp	r2, r3
 8003840:	d047      	beq.n	80038d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	73fb      	strb	r3, [r7, #15]
 8003846:	e044      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b03      	cmp	r3, #3
 800384e:	d018      	beq.n	8003882 <RCCEx_PLLSAI1_Config+0x86>
 8003850:	2b03      	cmp	r3, #3
 8003852:	d825      	bhi.n	80038a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <RCCEx_PLLSAI1_Config+0x62>
 8003858:	2b02      	cmp	r3, #2
 800385a:	d009      	beq.n	8003870 <RCCEx_PLLSAI1_Config+0x74>
 800385c:	e020      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800385e:	4b5f      	ldr	r3, [pc, #380]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d11d      	bne.n	80038a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800386e:	e01a      	b.n	80038a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003870:	4b5a      	ldr	r3, [pc, #360]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003878:	2b00      	cmp	r3, #0
 800387a:	d116      	bne.n	80038aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003880:	e013      	b.n	80038aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003882:	4b56      	ldr	r3, [pc, #344]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10f      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800388e:	4b53      	ldr	r3, [pc, #332]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d109      	bne.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800389e:	e006      	b.n	80038ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	73fb      	strb	r3, [r7, #15]
      break;
 80038a4:	e004      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038a6:	bf00      	nop
 80038a8:	e002      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038aa:	bf00      	nop
 80038ac:	e000      	b.n	80038b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038b6:	4b49      	ldr	r3, [pc, #292]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6819      	ldr	r1, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	430b      	orrs	r3, r1
 80038cc:	4943      	ldr	r1, [pc, #268]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d17c      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80038d8:	4b40      	ldr	r3, [pc, #256]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a3f      	ldr	r2, [pc, #252]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80038de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038e4:	f7fd fdd6 	bl	8001494 <HAL_GetTick>
 80038e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038ea:	e009      	b.n	8003900 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ec:	f7fd fdd2 	bl	8001494 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d902      	bls.n	8003900 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	73fb      	strb	r3, [r7, #15]
        break;
 80038fe:	e005      	b.n	800390c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003900:	4b36      	ldr	r3, [pc, #216]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003908:	2b00      	cmp	r3, #0
 800390a:	d1ef      	bne.n	80038ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800390c:	7bfb      	ldrb	r3, [r7, #15]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d15f      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d110      	bne.n	800393a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003918:	4b30      	ldr	r3, [pc, #192]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6892      	ldr	r2, [r2, #8]
 8003928:	0211      	lsls	r1, r2, #8
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68d2      	ldr	r2, [r2, #12]
 800392e:	06d2      	lsls	r2, r2, #27
 8003930:	430a      	orrs	r2, r1
 8003932:	492a      	ldr	r1, [pc, #168]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003934:	4313      	orrs	r3, r2
 8003936:	610b      	str	r3, [r1, #16]
 8003938:	e027      	b.n	800398a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d112      	bne.n	8003966 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003940:	4b26      	ldr	r3, [pc, #152]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6892      	ldr	r2, [r2, #8]
 8003950:	0211      	lsls	r1, r2, #8
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6912      	ldr	r2, [r2, #16]
 8003956:	0852      	lsrs	r2, r2, #1
 8003958:	3a01      	subs	r2, #1
 800395a:	0552      	lsls	r2, r2, #21
 800395c:	430a      	orrs	r2, r1
 800395e:	491f      	ldr	r1, [pc, #124]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003960:	4313      	orrs	r3, r2
 8003962:	610b      	str	r3, [r1, #16]
 8003964:	e011      	b.n	800398a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003966:	4b1d      	ldr	r3, [pc, #116]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800396e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	0211      	lsls	r1, r2, #8
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	6952      	ldr	r2, [r2, #20]
 800397c:	0852      	lsrs	r2, r2, #1
 800397e:	3a01      	subs	r2, #1
 8003980:	0652      	lsls	r2, r2, #25
 8003982:	430a      	orrs	r2, r1
 8003984:	4915      	ldr	r1, [pc, #84]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003986:	4313      	orrs	r3, r2
 8003988:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800398a:	4b14      	ldr	r3, [pc, #80]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a13      	ldr	r2, [pc, #76]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003994:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003996:	f7fd fd7d 	bl	8001494 <HAL_GetTick>
 800399a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800399c:	e009      	b.n	80039b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800399e:	f7fd fd79 	bl	8001494 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d902      	bls.n	80039b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	73fb      	strb	r3, [r7, #15]
          break;
 80039b0:	e005      	b.n	80039be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039b2:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0ef      	beq.n	800399e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039be:	7bfb      	ldrb	r3, [r7, #15]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039c4:	4b05      	ldr	r3, [pc, #20]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	4903      	ldr	r1, [pc, #12]	; (80039dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80039d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	40021000 	.word	0x40021000

080039e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e040      	b.n	8003a74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7fd f81e 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2224      	movs	r2, #36	; 0x24
 8003a0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 0201 	bic.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f8c0 	bl	8003ba4 <UART_SetConfig>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e022      	b.n	8003a74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fb3a 	bl	80040b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f042 0201 	orr.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fbc1 	bl	80041f4 <UART_CheckIdleState>
 8003a72:	4603      	mov	r3, r0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3708      	adds	r7, #8
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	603b      	str	r3, [r7, #0]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a90:	2b20      	cmp	r3, #32
 8003a92:	f040 8082 	bne.w	8003b9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_Transmit+0x26>
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e07a      	b.n	8003b9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_UART_Transmit+0x38>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e073      	b.n	8003b9c <HAL_UART_Transmit+0x120>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2221      	movs	r2, #33	; 0x21
 8003ac8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003aca:	f7fd fce3 	bl	8001494 <HAL_GetTick>
 8003ace:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	88fa      	ldrh	r2, [r7, #6]
 8003adc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ae8:	d108      	bne.n	8003afc <HAL_UART_Transmit+0x80>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d104      	bne.n	8003afc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	e003      	b.n	8003b04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b0c:	e02d      	b.n	8003b6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f000 fbb4 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e039      	b.n	8003b9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10b      	bne.n	8003b46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b2e:	69bb      	ldr	r3, [r7, #24]
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	3302      	adds	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
 8003b44:	e008      	b.n	8003b58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b292      	uxth	r2, r2
 8003b50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	3301      	adds	r3, #1
 8003b56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1cb      	bne.n	8003b0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2140      	movs	r1, #64	; 0x40
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb80 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e005      	b.n	8003b9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	e000      	b.n	8003b9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b9a:	2302      	movs	r3, #2
  }
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ba4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba8:	b08a      	sub	sp, #40	; 0x28
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	431a      	orrs	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4ba5      	ldr	r3, [pc, #660]	; (8003e68 <UART_SetConfig+0x2c4>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bdc:	430b      	orrs	r3, r1
 8003bde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a9a      	ldr	r2, [pc, #616]	; (8003e6c <UART_SetConfig+0x2c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d004      	beq.n	8003c10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a91      	ldr	r2, [pc, #580]	; (8003e70 <UART_SetConfig+0x2cc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d126      	bne.n	8003c7c <UART_SetConfig+0xd8>
 8003c2e:	4b91      	ldr	r3, [pc, #580]	; (8003e74 <UART_SetConfig+0x2d0>)
 8003c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d81b      	bhi.n	8003c74 <UART_SetConfig+0xd0>
 8003c3c:	a201      	add	r2, pc, #4	; (adr r2, 8003c44 <UART_SetConfig+0xa0>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003c55 	.word	0x08003c55
 8003c48:	08003c65 	.word	0x08003c65
 8003c4c:	08003c5d 	.word	0x08003c5d
 8003c50:	08003c6d 	.word	0x08003c6d
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e0d6      	b.n	8003e0a <UART_SetConfig+0x266>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e0d2      	b.n	8003e0a <UART_SetConfig+0x266>
 8003c64:	2304      	movs	r3, #4
 8003c66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c6a:	e0ce      	b.n	8003e0a <UART_SetConfig+0x266>
 8003c6c:	2308      	movs	r3, #8
 8003c6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c72:	e0ca      	b.n	8003e0a <UART_SetConfig+0x266>
 8003c74:	2310      	movs	r3, #16
 8003c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c7a:	e0c6      	b.n	8003e0a <UART_SetConfig+0x266>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a7d      	ldr	r2, [pc, #500]	; (8003e78 <UART_SetConfig+0x2d4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d138      	bne.n	8003cf8 <UART_SetConfig+0x154>
 8003c86:	4b7b      	ldr	r3, [pc, #492]	; (8003e74 <UART_SetConfig+0x2d0>)
 8003c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d82d      	bhi.n	8003cf0 <UART_SetConfig+0x14c>
 8003c94:	a201      	add	r2, pc, #4	; (adr r2, 8003c9c <UART_SetConfig+0xf8>)
 8003c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9a:	bf00      	nop
 8003c9c:	08003cd1 	.word	0x08003cd1
 8003ca0:	08003cf1 	.word	0x08003cf1
 8003ca4:	08003cf1 	.word	0x08003cf1
 8003ca8:	08003cf1 	.word	0x08003cf1
 8003cac:	08003ce1 	.word	0x08003ce1
 8003cb0:	08003cf1 	.word	0x08003cf1
 8003cb4:	08003cf1 	.word	0x08003cf1
 8003cb8:	08003cf1 	.word	0x08003cf1
 8003cbc:	08003cd9 	.word	0x08003cd9
 8003cc0:	08003cf1 	.word	0x08003cf1
 8003cc4:	08003cf1 	.word	0x08003cf1
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003ce9 	.word	0x08003ce9
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e098      	b.n	8003e0a <UART_SetConfig+0x266>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e094      	b.n	8003e0a <UART_SetConfig+0x266>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e090      	b.n	8003e0a <UART_SetConfig+0x266>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e08c      	b.n	8003e0a <UART_SetConfig+0x266>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e088      	b.n	8003e0a <UART_SetConfig+0x266>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a5f      	ldr	r2, [pc, #380]	; (8003e7c <UART_SetConfig+0x2d8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d125      	bne.n	8003d4e <UART_SetConfig+0x1aa>
 8003d02:	4b5c      	ldr	r3, [pc, #368]	; (8003e74 <UART_SetConfig+0x2d0>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d0c:	2b30      	cmp	r3, #48	; 0x30
 8003d0e:	d016      	beq.n	8003d3e <UART_SetConfig+0x19a>
 8003d10:	2b30      	cmp	r3, #48	; 0x30
 8003d12:	d818      	bhi.n	8003d46 <UART_SetConfig+0x1a2>
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d00a      	beq.n	8003d2e <UART_SetConfig+0x18a>
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d814      	bhi.n	8003d46 <UART_SetConfig+0x1a2>
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d002      	beq.n	8003d26 <UART_SetConfig+0x182>
 8003d20:	2b10      	cmp	r3, #16
 8003d22:	d008      	beq.n	8003d36 <UART_SetConfig+0x192>
 8003d24:	e00f      	b.n	8003d46 <UART_SetConfig+0x1a2>
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2c:	e06d      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d34:	e069      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d36:	2304      	movs	r3, #4
 8003d38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3c:	e065      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d3e:	2308      	movs	r3, #8
 8003d40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d44:	e061      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d46:	2310      	movs	r3, #16
 8003d48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4c:	e05d      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a4b      	ldr	r2, [pc, #300]	; (8003e80 <UART_SetConfig+0x2dc>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d125      	bne.n	8003da4 <UART_SetConfig+0x200>
 8003d58:	4b46      	ldr	r3, [pc, #280]	; (8003e74 <UART_SetConfig+0x2d0>)
 8003d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d62:	2bc0      	cmp	r3, #192	; 0xc0
 8003d64:	d016      	beq.n	8003d94 <UART_SetConfig+0x1f0>
 8003d66:	2bc0      	cmp	r3, #192	; 0xc0
 8003d68:	d818      	bhi.n	8003d9c <UART_SetConfig+0x1f8>
 8003d6a:	2b80      	cmp	r3, #128	; 0x80
 8003d6c:	d00a      	beq.n	8003d84 <UART_SetConfig+0x1e0>
 8003d6e:	2b80      	cmp	r3, #128	; 0x80
 8003d70:	d814      	bhi.n	8003d9c <UART_SetConfig+0x1f8>
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <UART_SetConfig+0x1d8>
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d008      	beq.n	8003d8c <UART_SetConfig+0x1e8>
 8003d7a:	e00f      	b.n	8003d9c <UART_SetConfig+0x1f8>
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d82:	e042      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d84:	2302      	movs	r3, #2
 8003d86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8a:	e03e      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d8c:	2304      	movs	r3, #4
 8003d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d92:	e03a      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d94:	2308      	movs	r3, #8
 8003d96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9a:	e036      	b.n	8003e0a <UART_SetConfig+0x266>
 8003d9c:	2310      	movs	r3, #16
 8003d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da2:	e032      	b.n	8003e0a <UART_SetConfig+0x266>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a30      	ldr	r2, [pc, #192]	; (8003e6c <UART_SetConfig+0x2c8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d12a      	bne.n	8003e04 <UART_SetConfig+0x260>
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <UART_SetConfig+0x2d0>)
 8003db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003db8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dbc:	d01a      	beq.n	8003df4 <UART_SetConfig+0x250>
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc2:	d81b      	bhi.n	8003dfc <UART_SetConfig+0x258>
 8003dc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dc8:	d00c      	beq.n	8003de4 <UART_SetConfig+0x240>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d815      	bhi.n	8003dfc <UART_SetConfig+0x258>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <UART_SetConfig+0x238>
 8003dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd8:	d008      	beq.n	8003dec <UART_SetConfig+0x248>
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x258>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e012      	b.n	8003e0a <UART_SetConfig+0x266>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e00e      	b.n	8003e0a <UART_SetConfig+0x266>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e00a      	b.n	8003e0a <UART_SetConfig+0x266>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e006      	b.n	8003e0a <UART_SetConfig+0x266>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e002      	b.n	8003e0a <UART_SetConfig+0x266>
 8003e04:	2310      	movs	r3, #16
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a17      	ldr	r2, [pc, #92]	; (8003e6c <UART_SetConfig+0x2c8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	f040 808b 	bne.w	8003f2c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d834      	bhi.n	8003e88 <UART_SetConfig+0x2e4>
 8003e1e:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <UART_SetConfig+0x280>)
 8003e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e89 	.word	0x08003e89
 8003e2c:	08003e51 	.word	0x08003e51
 8003e30:	08003e89 	.word	0x08003e89
 8003e34:	08003e57 	.word	0x08003e57
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003e89 	.word	0x08003e89
 8003e40:	08003e89 	.word	0x08003e89
 8003e44:	08003e5f 	.word	0x08003e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e48:	f7ff f9e0 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8003e4c:	61f8      	str	r0, [r7, #28]
        break;
 8003e4e:	e021      	b.n	8003e94 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e50:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <UART_SetConfig+0x2e0>)
 8003e52:	61fb      	str	r3, [r7, #28]
        break;
 8003e54:	e01e      	b.n	8003e94 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e56:	f7ff f941 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003e5a:	61f8      	str	r0, [r7, #28]
        break;
 8003e5c:	e01a      	b.n	8003e94 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e62:	61fb      	str	r3, [r7, #28]
        break;
 8003e64:	e016      	b.n	8003e94 <UART_SetConfig+0x2f0>
 8003e66:	bf00      	nop
 8003e68:	efff69f3 	.word	0xefff69f3
 8003e6c:	40008000 	.word	0x40008000
 8003e70:	40013800 	.word	0x40013800
 8003e74:	40021000 	.word	0x40021000
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	40004800 	.word	0x40004800
 8003e80:	40004c00 	.word	0x40004c00
 8003e84:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e92:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	f000 80fa 	beq.w	8004090 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	4413      	add	r3, r2
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d305      	bcc.n	8003eb8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d903      	bls.n	8003ec0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ebe:	e0e7      	b.n	8004090 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	461c      	mov	r4, r3
 8003ec6:	4615      	mov	r5, r2
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	022b      	lsls	r3, r5, #8
 8003ed2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ed6:	0222      	lsls	r2, r4, #8
 8003ed8:	68f9      	ldr	r1, [r7, #12]
 8003eda:	6849      	ldr	r1, [r1, #4]
 8003edc:	0849      	lsrs	r1, r1, #1
 8003ede:	2000      	movs	r0, #0
 8003ee0:	4688      	mov	r8, r1
 8003ee2:	4681      	mov	r9, r0
 8003ee4:	eb12 0a08 	adds.w	sl, r2, r8
 8003ee8:	eb43 0b09 	adc.w	fp, r3, r9
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	607a      	str	r2, [r7, #4]
 8003ef6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003efa:	4650      	mov	r0, sl
 8003efc:	4659      	mov	r1, fp
 8003efe:	f7fc f9bf 	bl	8000280 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4613      	mov	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f10:	d308      	bcc.n	8003f24 <UART_SetConfig+0x380>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f18:	d204      	bcs.n	8003f24 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e0b5      	b.n	8004090 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f2a:	e0b1      	b.n	8004090 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f34:	d15d      	bne.n	8003ff2 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8003f36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d827      	bhi.n	8003f8e <UART_SetConfig+0x3ea>
 8003f3e:	a201      	add	r2, pc, #4	; (adr r2, 8003f44 <UART_SetConfig+0x3a0>)
 8003f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f44:	08003f69 	.word	0x08003f69
 8003f48:	08003f71 	.word	0x08003f71
 8003f4c:	08003f79 	.word	0x08003f79
 8003f50:	08003f8f 	.word	0x08003f8f
 8003f54:	08003f7f 	.word	0x08003f7f
 8003f58:	08003f8f 	.word	0x08003f8f
 8003f5c:	08003f8f 	.word	0x08003f8f
 8003f60:	08003f8f 	.word	0x08003f8f
 8003f64:	08003f87 	.word	0x08003f87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f68:	f7ff f950 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8003f6c:	61f8      	str	r0, [r7, #28]
        break;
 8003f6e:	e014      	b.n	8003f9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f70:	f7ff f962 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8003f74:	61f8      	str	r0, [r7, #28]
        break;
 8003f76:	e010      	b.n	8003f9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f78:	4b4c      	ldr	r3, [pc, #304]	; (80040ac <UART_SetConfig+0x508>)
 8003f7a:	61fb      	str	r3, [r7, #28]
        break;
 8003f7c:	e00d      	b.n	8003f9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f7e:	f7ff f8ad 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 8003f82:	61f8      	str	r0, [r7, #28]
        break;
 8003f84:	e009      	b.n	8003f9a <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8a:	61fb      	str	r3, [r7, #28]
        break;
 8003f8c:	e005      	b.n	8003f9a <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d077      	beq.n	8004090 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	005a      	lsls	r2, r3, #1
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	085b      	lsrs	r3, r3, #1
 8003faa:	441a      	add	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b0f      	cmp	r3, #15
 8003fba:	d916      	bls.n	8003fea <UART_SetConfig+0x446>
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d212      	bcs.n	8003fea <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f023 030f 	bic.w	r3, r3, #15
 8003fcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	085b      	lsrs	r3, r3, #1
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	8afb      	ldrh	r3, [r7, #22]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	8afa      	ldrh	r2, [r7, #22]
 8003fe6:	60da      	str	r2, [r3, #12]
 8003fe8:	e052      	b.n	8004090 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ff0:	e04e      	b.n	8004090 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ff2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d827      	bhi.n	800404a <UART_SetConfig+0x4a6>
 8003ffa:	a201      	add	r2, pc, #4	; (adr r2, 8004000 <UART_SetConfig+0x45c>)
 8003ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004000:	08004025 	.word	0x08004025
 8004004:	0800402d 	.word	0x0800402d
 8004008:	08004035 	.word	0x08004035
 800400c:	0800404b 	.word	0x0800404b
 8004010:	0800403b 	.word	0x0800403b
 8004014:	0800404b 	.word	0x0800404b
 8004018:	0800404b 	.word	0x0800404b
 800401c:	0800404b 	.word	0x0800404b
 8004020:	08004043 	.word	0x08004043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004024:	f7ff f8f2 	bl	800320c <HAL_RCC_GetPCLK1Freq>
 8004028:	61f8      	str	r0, [r7, #28]
        break;
 800402a:	e014      	b.n	8004056 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800402c:	f7ff f904 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 8004030:	61f8      	str	r0, [r7, #28]
        break;
 8004032:	e010      	b.n	8004056 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004034:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <UART_SetConfig+0x508>)
 8004036:	61fb      	str	r3, [r7, #28]
        break;
 8004038:	e00d      	b.n	8004056 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403a:	f7ff f84f 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800403e:	61f8      	str	r0, [r7, #28]
        break;
 8004040:	e009      	b.n	8004056 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004046:	61fb      	str	r3, [r7, #28]
        break;
 8004048:	e005      	b.n	8004056 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800404a:	2300      	movs	r3, #0
 800404c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004054:	bf00      	nop
    }

    if (pclk != 0U)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d019      	beq.n	8004090 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	085a      	lsrs	r2, r3, #1
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	441a      	add	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	fbb2 f3f3 	udiv	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	2b0f      	cmp	r3, #15
 8004074:	d909      	bls.n	800408a <UART_SetConfig+0x4e6>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800407c:	d205      	bcs.n	800408a <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	b29a      	uxth	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60da      	str	r2, [r3, #12]
 8004088:	e002      	b.n	8004090 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2200      	movs	r2, #0
 8004094:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800409c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3728      	adds	r7, #40	; 0x28
 80040a4:	46bd      	mov	sp, r7
 80040a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040aa:	bf00      	nop
 80040ac:	00f42400 	.word	0x00f42400

080040b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	f003 0301 	and.w	r3, r3, #1
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	f003 0304 	and.w	r3, r3, #4
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	430a      	orrs	r2, r1
 800411c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	430a      	orrs	r2, r1
 800413e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0310 	and.w	r3, r3, #16
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	430a      	orrs	r2, r1
 8004160:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	430a      	orrs	r2, r1
 8004182:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d10a      	bne.n	80041c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00a      	beq.n	80041e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	430a      	orrs	r2, r1
 80041e6:	605a      	str	r2, [r3, #4]
  }
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004204:	f7fd f946 	bl	8001494 <HAL_GetTick>
 8004208:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b08      	cmp	r3, #8
 8004216:	d10e      	bne.n	8004236 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004218:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800421c:	9300      	str	r3, [sp, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f82d 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e023      	b.n	800427e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0304 	and.w	r3, r3, #4
 8004240:	2b04      	cmp	r3, #4
 8004242:	d10e      	bne.n	8004262 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004244:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f817 	bl	8004286 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e00d      	b.n	800427e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b09c      	sub	sp, #112	; 0x70
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	603b      	str	r3, [r7, #0]
 8004292:	4613      	mov	r3, r2
 8004294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004296:	e0a5      	b.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800429a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429e:	f000 80a1 	beq.w	80043e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fd f8f7 	bl	8001494 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80042b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d13e      	bne.n	8004336 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c0:	e853 3f00 	ldrex	r3, [r3]
 80042c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80042c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042cc:	667b      	str	r3, [r7, #100]	; 0x64
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	461a      	mov	r2, r3
 80042d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80042d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80042dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80042de:	e841 2300 	strex	r3, r2, [r1]
 80042e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80042e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1e6      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3308      	adds	r3, #8
 80042f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	663b      	str	r3, [r7, #96]	; 0x60
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3308      	adds	r3, #8
 8004308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800430a:	64ba      	str	r2, [r7, #72]	; 0x48
 800430c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004312:	e841 2300 	strex	r3, r2, [r1]
 8004316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1e5      	bne.n	80042ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2220      	movs	r2, #32
 8004322:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e067      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0304 	and.w	r3, r3, #4
 8004340:	2b00      	cmp	r3, #0
 8004342:	d04f      	beq.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004352:	d147      	bne.n	80043e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800435c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	e853 3f00 	ldrex	r3, [r3]
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800436c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004372:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800437c:	637b      	str	r3, [r7, #52]	; 0x34
 800437e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004382:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004384:	e841 2300 	strex	r3, r2, [r1]
 8004388:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800438a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1e6      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3308      	adds	r3, #8
 8004396:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	613b      	str	r3, [r7, #16]
   return(result);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	f023 0301 	bic.w	r3, r3, #1
 80043a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	3308      	adds	r3, #8
 80043ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80043b0:	623a      	str	r2, [r7, #32]
 80043b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	69f9      	ldr	r1, [r7, #28]
 80043b6:	6a3a      	ldr	r2, [r7, #32]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80043be:	69bb      	ldr	r3, [r7, #24]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e5      	bne.n	8004390 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e010      	b.n	8004406 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69da      	ldr	r2, [r3, #28]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	4013      	ands	r3, r2
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	bf0c      	ite	eq
 80043f4:	2301      	moveq	r3, #1
 80043f6:	2300      	movne	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	461a      	mov	r2, r3
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	429a      	cmp	r2, r3
 8004400:	f43f af4a 	beq.w	8004298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004404:	2300      	movs	r3, #0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3770      	adds	r7, #112	; 0x70
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <__errno>:
 8004410:	4b01      	ldr	r3, [pc, #4]	; (8004418 <__errno+0x8>)
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	2000000c 	.word	0x2000000c

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	4d0d      	ldr	r5, [pc, #52]	; (8004454 <__libc_init_array+0x38>)
 8004420:	4c0d      	ldr	r4, [pc, #52]	; (8004458 <__libc_init_array+0x3c>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	2600      	movs	r6, #0
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	4d0b      	ldr	r5, [pc, #44]	; (800445c <__libc_init_array+0x40>)
 800442e:	4c0c      	ldr	r4, [pc, #48]	; (8004460 <__libc_init_array+0x44>)
 8004430:	f001 f824 	bl	800547c <_init>
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	2600      	movs	r6, #0
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	080056d8 	.word	0x080056d8
 8004458:	080056d8 	.word	0x080056d8
 800445c:	080056d8 	.word	0x080056d8
 8004460:	080056dc 	.word	0x080056dc

08004464 <memset>:
 8004464:	4402      	add	r2, r0
 8004466:	4603      	mov	r3, r0
 8004468:	4293      	cmp	r3, r2
 800446a:	d100      	bne.n	800446e <memset+0xa>
 800446c:	4770      	bx	lr
 800446e:	f803 1b01 	strb.w	r1, [r3], #1
 8004472:	e7f9      	b.n	8004468 <memset+0x4>

08004474 <iprintf>:
 8004474:	b40f      	push	{r0, r1, r2, r3}
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <iprintf+0x2c>)
 8004478:	b513      	push	{r0, r1, r4, lr}
 800447a:	681c      	ldr	r4, [r3, #0]
 800447c:	b124      	cbz	r4, 8004488 <iprintf+0x14>
 800447e:	69a3      	ldr	r3, [r4, #24]
 8004480:	b913      	cbnz	r3, 8004488 <iprintf+0x14>
 8004482:	4620      	mov	r0, r4
 8004484:	f000 fa5e 	bl	8004944 <__sinit>
 8004488:	ab05      	add	r3, sp, #20
 800448a:	9a04      	ldr	r2, [sp, #16]
 800448c:	68a1      	ldr	r1, [r4, #8]
 800448e:	9301      	str	r3, [sp, #4]
 8004490:	4620      	mov	r0, r4
 8004492:	f000 fc67 	bl	8004d64 <_vfiprintf_r>
 8004496:	b002      	add	sp, #8
 8004498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800449c:	b004      	add	sp, #16
 800449e:	4770      	bx	lr
 80044a0:	2000000c 	.word	0x2000000c

080044a4 <_puts_r>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	460e      	mov	r6, r1
 80044a8:	4605      	mov	r5, r0
 80044aa:	b118      	cbz	r0, 80044b4 <_puts_r+0x10>
 80044ac:	6983      	ldr	r3, [r0, #24]
 80044ae:	b90b      	cbnz	r3, 80044b4 <_puts_r+0x10>
 80044b0:	f000 fa48 	bl	8004944 <__sinit>
 80044b4:	69ab      	ldr	r3, [r5, #24]
 80044b6:	68ac      	ldr	r4, [r5, #8]
 80044b8:	b913      	cbnz	r3, 80044c0 <_puts_r+0x1c>
 80044ba:	4628      	mov	r0, r5
 80044bc:	f000 fa42 	bl	8004944 <__sinit>
 80044c0:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <_puts_r+0xd0>)
 80044c2:	429c      	cmp	r4, r3
 80044c4:	d120      	bne.n	8004508 <_puts_r+0x64>
 80044c6:	686c      	ldr	r4, [r5, #4]
 80044c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ca:	07db      	lsls	r3, r3, #31
 80044cc:	d405      	bmi.n	80044da <_puts_r+0x36>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	0598      	lsls	r0, r3, #22
 80044d2:	d402      	bmi.n	80044da <_puts_r+0x36>
 80044d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044d6:	f000 fad3 	bl	8004a80 <__retarget_lock_acquire_recursive>
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	0719      	lsls	r1, r3, #28
 80044de:	d51d      	bpl.n	800451c <_puts_r+0x78>
 80044e0:	6923      	ldr	r3, [r4, #16]
 80044e2:	b1db      	cbz	r3, 800451c <_puts_r+0x78>
 80044e4:	3e01      	subs	r6, #1
 80044e6:	68a3      	ldr	r3, [r4, #8]
 80044e8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80044ec:	3b01      	subs	r3, #1
 80044ee:	60a3      	str	r3, [r4, #8]
 80044f0:	bb39      	cbnz	r1, 8004542 <_puts_r+0x9e>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	da38      	bge.n	8004568 <_puts_r+0xc4>
 80044f6:	4622      	mov	r2, r4
 80044f8:	210a      	movs	r1, #10
 80044fa:	4628      	mov	r0, r5
 80044fc:	f000 f848 	bl	8004590 <__swbuf_r>
 8004500:	3001      	adds	r0, #1
 8004502:	d011      	beq.n	8004528 <_puts_r+0x84>
 8004504:	250a      	movs	r5, #10
 8004506:	e011      	b.n	800452c <_puts_r+0x88>
 8004508:	4b1b      	ldr	r3, [pc, #108]	; (8004578 <_puts_r+0xd4>)
 800450a:	429c      	cmp	r4, r3
 800450c:	d101      	bne.n	8004512 <_puts_r+0x6e>
 800450e:	68ac      	ldr	r4, [r5, #8]
 8004510:	e7da      	b.n	80044c8 <_puts_r+0x24>
 8004512:	4b1a      	ldr	r3, [pc, #104]	; (800457c <_puts_r+0xd8>)
 8004514:	429c      	cmp	r4, r3
 8004516:	bf08      	it	eq
 8004518:	68ec      	ldreq	r4, [r5, #12]
 800451a:	e7d5      	b.n	80044c8 <_puts_r+0x24>
 800451c:	4621      	mov	r1, r4
 800451e:	4628      	mov	r0, r5
 8004520:	f000 f888 	bl	8004634 <__swsetup_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	d0dd      	beq.n	80044e4 <_puts_r+0x40>
 8004528:	f04f 35ff 	mov.w	r5, #4294967295
 800452c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800452e:	07da      	lsls	r2, r3, #31
 8004530:	d405      	bmi.n	800453e <_puts_r+0x9a>
 8004532:	89a3      	ldrh	r3, [r4, #12]
 8004534:	059b      	lsls	r3, r3, #22
 8004536:	d402      	bmi.n	800453e <_puts_r+0x9a>
 8004538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800453a:	f000 faa2 	bl	8004a82 <__retarget_lock_release_recursive>
 800453e:	4628      	mov	r0, r5
 8004540:	bd70      	pop	{r4, r5, r6, pc}
 8004542:	2b00      	cmp	r3, #0
 8004544:	da04      	bge.n	8004550 <_puts_r+0xac>
 8004546:	69a2      	ldr	r2, [r4, #24]
 8004548:	429a      	cmp	r2, r3
 800454a:	dc06      	bgt.n	800455a <_puts_r+0xb6>
 800454c:	290a      	cmp	r1, #10
 800454e:	d004      	beq.n	800455a <_puts_r+0xb6>
 8004550:	6823      	ldr	r3, [r4, #0]
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	6022      	str	r2, [r4, #0]
 8004556:	7019      	strb	r1, [r3, #0]
 8004558:	e7c5      	b.n	80044e6 <_puts_r+0x42>
 800455a:	4622      	mov	r2, r4
 800455c:	4628      	mov	r0, r5
 800455e:	f000 f817 	bl	8004590 <__swbuf_r>
 8004562:	3001      	adds	r0, #1
 8004564:	d1bf      	bne.n	80044e6 <_puts_r+0x42>
 8004566:	e7df      	b.n	8004528 <_puts_r+0x84>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	250a      	movs	r5, #10
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	6022      	str	r2, [r4, #0]
 8004570:	701d      	strb	r5, [r3, #0]
 8004572:	e7db      	b.n	800452c <_puts_r+0x88>
 8004574:	0800565c 	.word	0x0800565c
 8004578:	0800567c 	.word	0x0800567c
 800457c:	0800563c 	.word	0x0800563c

08004580 <puts>:
 8004580:	4b02      	ldr	r3, [pc, #8]	; (800458c <puts+0xc>)
 8004582:	4601      	mov	r1, r0
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	f7ff bf8d 	b.w	80044a4 <_puts_r>
 800458a:	bf00      	nop
 800458c:	2000000c 	.word	0x2000000c

08004590 <__swbuf_r>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	460e      	mov	r6, r1
 8004594:	4614      	mov	r4, r2
 8004596:	4605      	mov	r5, r0
 8004598:	b118      	cbz	r0, 80045a2 <__swbuf_r+0x12>
 800459a:	6983      	ldr	r3, [r0, #24]
 800459c:	b90b      	cbnz	r3, 80045a2 <__swbuf_r+0x12>
 800459e:	f000 f9d1 	bl	8004944 <__sinit>
 80045a2:	4b21      	ldr	r3, [pc, #132]	; (8004628 <__swbuf_r+0x98>)
 80045a4:	429c      	cmp	r4, r3
 80045a6:	d12b      	bne.n	8004600 <__swbuf_r+0x70>
 80045a8:	686c      	ldr	r4, [r5, #4]
 80045aa:	69a3      	ldr	r3, [r4, #24]
 80045ac:	60a3      	str	r3, [r4, #8]
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	071a      	lsls	r2, r3, #28
 80045b2:	d52f      	bpl.n	8004614 <__swbuf_r+0x84>
 80045b4:	6923      	ldr	r3, [r4, #16]
 80045b6:	b36b      	cbz	r3, 8004614 <__swbuf_r+0x84>
 80045b8:	6923      	ldr	r3, [r4, #16]
 80045ba:	6820      	ldr	r0, [r4, #0]
 80045bc:	1ac0      	subs	r0, r0, r3
 80045be:	6963      	ldr	r3, [r4, #20]
 80045c0:	b2f6      	uxtb	r6, r6
 80045c2:	4283      	cmp	r3, r0
 80045c4:	4637      	mov	r7, r6
 80045c6:	dc04      	bgt.n	80045d2 <__swbuf_r+0x42>
 80045c8:	4621      	mov	r1, r4
 80045ca:	4628      	mov	r0, r5
 80045cc:	f000 f926 	bl	800481c <_fflush_r>
 80045d0:	bb30      	cbnz	r0, 8004620 <__swbuf_r+0x90>
 80045d2:	68a3      	ldr	r3, [r4, #8]
 80045d4:	3b01      	subs	r3, #1
 80045d6:	60a3      	str	r3, [r4, #8]
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	1c5a      	adds	r2, r3, #1
 80045dc:	6022      	str	r2, [r4, #0]
 80045de:	701e      	strb	r6, [r3, #0]
 80045e0:	6963      	ldr	r3, [r4, #20]
 80045e2:	3001      	adds	r0, #1
 80045e4:	4283      	cmp	r3, r0
 80045e6:	d004      	beq.n	80045f2 <__swbuf_r+0x62>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	07db      	lsls	r3, r3, #31
 80045ec:	d506      	bpl.n	80045fc <__swbuf_r+0x6c>
 80045ee:	2e0a      	cmp	r6, #10
 80045f0:	d104      	bne.n	80045fc <__swbuf_r+0x6c>
 80045f2:	4621      	mov	r1, r4
 80045f4:	4628      	mov	r0, r5
 80045f6:	f000 f911 	bl	800481c <_fflush_r>
 80045fa:	b988      	cbnz	r0, 8004620 <__swbuf_r+0x90>
 80045fc:	4638      	mov	r0, r7
 80045fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004600:	4b0a      	ldr	r3, [pc, #40]	; (800462c <__swbuf_r+0x9c>)
 8004602:	429c      	cmp	r4, r3
 8004604:	d101      	bne.n	800460a <__swbuf_r+0x7a>
 8004606:	68ac      	ldr	r4, [r5, #8]
 8004608:	e7cf      	b.n	80045aa <__swbuf_r+0x1a>
 800460a:	4b09      	ldr	r3, [pc, #36]	; (8004630 <__swbuf_r+0xa0>)
 800460c:	429c      	cmp	r4, r3
 800460e:	bf08      	it	eq
 8004610:	68ec      	ldreq	r4, [r5, #12]
 8004612:	e7ca      	b.n	80045aa <__swbuf_r+0x1a>
 8004614:	4621      	mov	r1, r4
 8004616:	4628      	mov	r0, r5
 8004618:	f000 f80c 	bl	8004634 <__swsetup_r>
 800461c:	2800      	cmp	r0, #0
 800461e:	d0cb      	beq.n	80045b8 <__swbuf_r+0x28>
 8004620:	f04f 37ff 	mov.w	r7, #4294967295
 8004624:	e7ea      	b.n	80045fc <__swbuf_r+0x6c>
 8004626:	bf00      	nop
 8004628:	0800565c 	.word	0x0800565c
 800462c:	0800567c 	.word	0x0800567c
 8004630:	0800563c 	.word	0x0800563c

08004634 <__swsetup_r>:
 8004634:	4b32      	ldr	r3, [pc, #200]	; (8004700 <__swsetup_r+0xcc>)
 8004636:	b570      	push	{r4, r5, r6, lr}
 8004638:	681d      	ldr	r5, [r3, #0]
 800463a:	4606      	mov	r6, r0
 800463c:	460c      	mov	r4, r1
 800463e:	b125      	cbz	r5, 800464a <__swsetup_r+0x16>
 8004640:	69ab      	ldr	r3, [r5, #24]
 8004642:	b913      	cbnz	r3, 800464a <__swsetup_r+0x16>
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f97d 	bl	8004944 <__sinit>
 800464a:	4b2e      	ldr	r3, [pc, #184]	; (8004704 <__swsetup_r+0xd0>)
 800464c:	429c      	cmp	r4, r3
 800464e:	d10f      	bne.n	8004670 <__swsetup_r+0x3c>
 8004650:	686c      	ldr	r4, [r5, #4]
 8004652:	89a3      	ldrh	r3, [r4, #12]
 8004654:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004658:	0719      	lsls	r1, r3, #28
 800465a:	d42c      	bmi.n	80046b6 <__swsetup_r+0x82>
 800465c:	06dd      	lsls	r5, r3, #27
 800465e:	d411      	bmi.n	8004684 <__swsetup_r+0x50>
 8004660:	2309      	movs	r3, #9
 8004662:	6033      	str	r3, [r6, #0]
 8004664:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004668:	81a3      	strh	r3, [r4, #12]
 800466a:	f04f 30ff 	mov.w	r0, #4294967295
 800466e:	e03e      	b.n	80046ee <__swsetup_r+0xba>
 8004670:	4b25      	ldr	r3, [pc, #148]	; (8004708 <__swsetup_r+0xd4>)
 8004672:	429c      	cmp	r4, r3
 8004674:	d101      	bne.n	800467a <__swsetup_r+0x46>
 8004676:	68ac      	ldr	r4, [r5, #8]
 8004678:	e7eb      	b.n	8004652 <__swsetup_r+0x1e>
 800467a:	4b24      	ldr	r3, [pc, #144]	; (800470c <__swsetup_r+0xd8>)
 800467c:	429c      	cmp	r4, r3
 800467e:	bf08      	it	eq
 8004680:	68ec      	ldreq	r4, [r5, #12]
 8004682:	e7e6      	b.n	8004652 <__swsetup_r+0x1e>
 8004684:	0758      	lsls	r0, r3, #29
 8004686:	d512      	bpl.n	80046ae <__swsetup_r+0x7a>
 8004688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800468a:	b141      	cbz	r1, 800469e <__swsetup_r+0x6a>
 800468c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004690:	4299      	cmp	r1, r3
 8004692:	d002      	beq.n	800469a <__swsetup_r+0x66>
 8004694:	4630      	mov	r0, r6
 8004696:	f000 fa5b 	bl	8004b50 <_free_r>
 800469a:	2300      	movs	r3, #0
 800469c:	6363      	str	r3, [r4, #52]	; 0x34
 800469e:	89a3      	ldrh	r3, [r4, #12]
 80046a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80046a4:	81a3      	strh	r3, [r4, #12]
 80046a6:	2300      	movs	r3, #0
 80046a8:	6063      	str	r3, [r4, #4]
 80046aa:	6923      	ldr	r3, [r4, #16]
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	89a3      	ldrh	r3, [r4, #12]
 80046b0:	f043 0308 	orr.w	r3, r3, #8
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	6923      	ldr	r3, [r4, #16]
 80046b8:	b94b      	cbnz	r3, 80046ce <__swsetup_r+0x9a>
 80046ba:	89a3      	ldrh	r3, [r4, #12]
 80046bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80046c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c4:	d003      	beq.n	80046ce <__swsetup_r+0x9a>
 80046c6:	4621      	mov	r1, r4
 80046c8:	4630      	mov	r0, r6
 80046ca:	f000 fa01 	bl	8004ad0 <__smakebuf_r>
 80046ce:	89a0      	ldrh	r0, [r4, #12]
 80046d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046d4:	f010 0301 	ands.w	r3, r0, #1
 80046d8:	d00a      	beq.n	80046f0 <__swsetup_r+0xbc>
 80046da:	2300      	movs	r3, #0
 80046dc:	60a3      	str	r3, [r4, #8]
 80046de:	6963      	ldr	r3, [r4, #20]
 80046e0:	425b      	negs	r3, r3
 80046e2:	61a3      	str	r3, [r4, #24]
 80046e4:	6923      	ldr	r3, [r4, #16]
 80046e6:	b943      	cbnz	r3, 80046fa <__swsetup_r+0xc6>
 80046e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80046ec:	d1ba      	bne.n	8004664 <__swsetup_r+0x30>
 80046ee:	bd70      	pop	{r4, r5, r6, pc}
 80046f0:	0781      	lsls	r1, r0, #30
 80046f2:	bf58      	it	pl
 80046f4:	6963      	ldrpl	r3, [r4, #20]
 80046f6:	60a3      	str	r3, [r4, #8]
 80046f8:	e7f4      	b.n	80046e4 <__swsetup_r+0xb0>
 80046fa:	2000      	movs	r0, #0
 80046fc:	e7f7      	b.n	80046ee <__swsetup_r+0xba>
 80046fe:	bf00      	nop
 8004700:	2000000c 	.word	0x2000000c
 8004704:	0800565c 	.word	0x0800565c
 8004708:	0800567c 	.word	0x0800567c
 800470c:	0800563c 	.word	0x0800563c

08004710 <__sflush_r>:
 8004710:	898a      	ldrh	r2, [r1, #12]
 8004712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004716:	4605      	mov	r5, r0
 8004718:	0710      	lsls	r0, r2, #28
 800471a:	460c      	mov	r4, r1
 800471c:	d458      	bmi.n	80047d0 <__sflush_r+0xc0>
 800471e:	684b      	ldr	r3, [r1, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	dc05      	bgt.n	8004730 <__sflush_r+0x20>
 8004724:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	dc02      	bgt.n	8004730 <__sflush_r+0x20>
 800472a:	2000      	movs	r0, #0
 800472c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004730:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004732:	2e00      	cmp	r6, #0
 8004734:	d0f9      	beq.n	800472a <__sflush_r+0x1a>
 8004736:	2300      	movs	r3, #0
 8004738:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800473c:	682f      	ldr	r7, [r5, #0]
 800473e:	602b      	str	r3, [r5, #0]
 8004740:	d032      	beq.n	80047a8 <__sflush_r+0x98>
 8004742:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004744:	89a3      	ldrh	r3, [r4, #12]
 8004746:	075a      	lsls	r2, r3, #29
 8004748:	d505      	bpl.n	8004756 <__sflush_r+0x46>
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	1ac0      	subs	r0, r0, r3
 800474e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004750:	b10b      	cbz	r3, 8004756 <__sflush_r+0x46>
 8004752:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004754:	1ac0      	subs	r0, r0, r3
 8004756:	2300      	movs	r3, #0
 8004758:	4602      	mov	r2, r0
 800475a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800475c:	6a21      	ldr	r1, [r4, #32]
 800475e:	4628      	mov	r0, r5
 8004760:	47b0      	blx	r6
 8004762:	1c43      	adds	r3, r0, #1
 8004764:	89a3      	ldrh	r3, [r4, #12]
 8004766:	d106      	bne.n	8004776 <__sflush_r+0x66>
 8004768:	6829      	ldr	r1, [r5, #0]
 800476a:	291d      	cmp	r1, #29
 800476c:	d82c      	bhi.n	80047c8 <__sflush_r+0xb8>
 800476e:	4a2a      	ldr	r2, [pc, #168]	; (8004818 <__sflush_r+0x108>)
 8004770:	40ca      	lsrs	r2, r1
 8004772:	07d6      	lsls	r6, r2, #31
 8004774:	d528      	bpl.n	80047c8 <__sflush_r+0xb8>
 8004776:	2200      	movs	r2, #0
 8004778:	6062      	str	r2, [r4, #4]
 800477a:	04d9      	lsls	r1, r3, #19
 800477c:	6922      	ldr	r2, [r4, #16]
 800477e:	6022      	str	r2, [r4, #0]
 8004780:	d504      	bpl.n	800478c <__sflush_r+0x7c>
 8004782:	1c42      	adds	r2, r0, #1
 8004784:	d101      	bne.n	800478a <__sflush_r+0x7a>
 8004786:	682b      	ldr	r3, [r5, #0]
 8004788:	b903      	cbnz	r3, 800478c <__sflush_r+0x7c>
 800478a:	6560      	str	r0, [r4, #84]	; 0x54
 800478c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800478e:	602f      	str	r7, [r5, #0]
 8004790:	2900      	cmp	r1, #0
 8004792:	d0ca      	beq.n	800472a <__sflush_r+0x1a>
 8004794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004798:	4299      	cmp	r1, r3
 800479a:	d002      	beq.n	80047a2 <__sflush_r+0x92>
 800479c:	4628      	mov	r0, r5
 800479e:	f000 f9d7 	bl	8004b50 <_free_r>
 80047a2:	2000      	movs	r0, #0
 80047a4:	6360      	str	r0, [r4, #52]	; 0x34
 80047a6:	e7c1      	b.n	800472c <__sflush_r+0x1c>
 80047a8:	6a21      	ldr	r1, [r4, #32]
 80047aa:	2301      	movs	r3, #1
 80047ac:	4628      	mov	r0, r5
 80047ae:	47b0      	blx	r6
 80047b0:	1c41      	adds	r1, r0, #1
 80047b2:	d1c7      	bne.n	8004744 <__sflush_r+0x34>
 80047b4:	682b      	ldr	r3, [r5, #0]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0c4      	beq.n	8004744 <__sflush_r+0x34>
 80047ba:	2b1d      	cmp	r3, #29
 80047bc:	d001      	beq.n	80047c2 <__sflush_r+0xb2>
 80047be:	2b16      	cmp	r3, #22
 80047c0:	d101      	bne.n	80047c6 <__sflush_r+0xb6>
 80047c2:	602f      	str	r7, [r5, #0]
 80047c4:	e7b1      	b.n	800472a <__sflush_r+0x1a>
 80047c6:	89a3      	ldrh	r3, [r4, #12]
 80047c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047cc:	81a3      	strh	r3, [r4, #12]
 80047ce:	e7ad      	b.n	800472c <__sflush_r+0x1c>
 80047d0:	690f      	ldr	r7, [r1, #16]
 80047d2:	2f00      	cmp	r7, #0
 80047d4:	d0a9      	beq.n	800472a <__sflush_r+0x1a>
 80047d6:	0793      	lsls	r3, r2, #30
 80047d8:	680e      	ldr	r6, [r1, #0]
 80047da:	bf08      	it	eq
 80047dc:	694b      	ldreq	r3, [r1, #20]
 80047de:	600f      	str	r7, [r1, #0]
 80047e0:	bf18      	it	ne
 80047e2:	2300      	movne	r3, #0
 80047e4:	eba6 0807 	sub.w	r8, r6, r7
 80047e8:	608b      	str	r3, [r1, #8]
 80047ea:	f1b8 0f00 	cmp.w	r8, #0
 80047ee:	dd9c      	ble.n	800472a <__sflush_r+0x1a>
 80047f0:	6a21      	ldr	r1, [r4, #32]
 80047f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80047f4:	4643      	mov	r3, r8
 80047f6:	463a      	mov	r2, r7
 80047f8:	4628      	mov	r0, r5
 80047fa:	47b0      	blx	r6
 80047fc:	2800      	cmp	r0, #0
 80047fe:	dc06      	bgt.n	800480e <__sflush_r+0xfe>
 8004800:	89a3      	ldrh	r3, [r4, #12]
 8004802:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004806:	81a3      	strh	r3, [r4, #12]
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	e78e      	b.n	800472c <__sflush_r+0x1c>
 800480e:	4407      	add	r7, r0
 8004810:	eba8 0800 	sub.w	r8, r8, r0
 8004814:	e7e9      	b.n	80047ea <__sflush_r+0xda>
 8004816:	bf00      	nop
 8004818:	20400001 	.word	0x20400001

0800481c <_fflush_r>:
 800481c:	b538      	push	{r3, r4, r5, lr}
 800481e:	690b      	ldr	r3, [r1, #16]
 8004820:	4605      	mov	r5, r0
 8004822:	460c      	mov	r4, r1
 8004824:	b913      	cbnz	r3, 800482c <_fflush_r+0x10>
 8004826:	2500      	movs	r5, #0
 8004828:	4628      	mov	r0, r5
 800482a:	bd38      	pop	{r3, r4, r5, pc}
 800482c:	b118      	cbz	r0, 8004836 <_fflush_r+0x1a>
 800482e:	6983      	ldr	r3, [r0, #24]
 8004830:	b90b      	cbnz	r3, 8004836 <_fflush_r+0x1a>
 8004832:	f000 f887 	bl	8004944 <__sinit>
 8004836:	4b14      	ldr	r3, [pc, #80]	; (8004888 <_fflush_r+0x6c>)
 8004838:	429c      	cmp	r4, r3
 800483a:	d11b      	bne.n	8004874 <_fflush_r+0x58>
 800483c:	686c      	ldr	r4, [r5, #4]
 800483e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ef      	beq.n	8004826 <_fflush_r+0xa>
 8004846:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004848:	07d0      	lsls	r0, r2, #31
 800484a:	d404      	bmi.n	8004856 <_fflush_r+0x3a>
 800484c:	0599      	lsls	r1, r3, #22
 800484e:	d402      	bmi.n	8004856 <_fflush_r+0x3a>
 8004850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004852:	f000 f915 	bl	8004a80 <__retarget_lock_acquire_recursive>
 8004856:	4628      	mov	r0, r5
 8004858:	4621      	mov	r1, r4
 800485a:	f7ff ff59 	bl	8004710 <__sflush_r>
 800485e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004860:	07da      	lsls	r2, r3, #31
 8004862:	4605      	mov	r5, r0
 8004864:	d4e0      	bmi.n	8004828 <_fflush_r+0xc>
 8004866:	89a3      	ldrh	r3, [r4, #12]
 8004868:	059b      	lsls	r3, r3, #22
 800486a:	d4dd      	bmi.n	8004828 <_fflush_r+0xc>
 800486c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800486e:	f000 f908 	bl	8004a82 <__retarget_lock_release_recursive>
 8004872:	e7d9      	b.n	8004828 <_fflush_r+0xc>
 8004874:	4b05      	ldr	r3, [pc, #20]	; (800488c <_fflush_r+0x70>)
 8004876:	429c      	cmp	r4, r3
 8004878:	d101      	bne.n	800487e <_fflush_r+0x62>
 800487a:	68ac      	ldr	r4, [r5, #8]
 800487c:	e7df      	b.n	800483e <_fflush_r+0x22>
 800487e:	4b04      	ldr	r3, [pc, #16]	; (8004890 <_fflush_r+0x74>)
 8004880:	429c      	cmp	r4, r3
 8004882:	bf08      	it	eq
 8004884:	68ec      	ldreq	r4, [r5, #12]
 8004886:	e7da      	b.n	800483e <_fflush_r+0x22>
 8004888:	0800565c 	.word	0x0800565c
 800488c:	0800567c 	.word	0x0800567c
 8004890:	0800563c 	.word	0x0800563c

08004894 <std>:
 8004894:	2300      	movs	r3, #0
 8004896:	b510      	push	{r4, lr}
 8004898:	4604      	mov	r4, r0
 800489a:	e9c0 3300 	strd	r3, r3, [r0]
 800489e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80048a2:	6083      	str	r3, [r0, #8]
 80048a4:	8181      	strh	r1, [r0, #12]
 80048a6:	6643      	str	r3, [r0, #100]	; 0x64
 80048a8:	81c2      	strh	r2, [r0, #14]
 80048aa:	6183      	str	r3, [r0, #24]
 80048ac:	4619      	mov	r1, r3
 80048ae:	2208      	movs	r2, #8
 80048b0:	305c      	adds	r0, #92	; 0x5c
 80048b2:	f7ff fdd7 	bl	8004464 <memset>
 80048b6:	4b05      	ldr	r3, [pc, #20]	; (80048cc <std+0x38>)
 80048b8:	6263      	str	r3, [r4, #36]	; 0x24
 80048ba:	4b05      	ldr	r3, [pc, #20]	; (80048d0 <std+0x3c>)
 80048bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <std+0x40>)
 80048c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <std+0x44>)
 80048c4:	6224      	str	r4, [r4, #32]
 80048c6:	6323      	str	r3, [r4, #48]	; 0x30
 80048c8:	bd10      	pop	{r4, pc}
 80048ca:	bf00      	nop
 80048cc:	0800530d 	.word	0x0800530d
 80048d0:	0800532f 	.word	0x0800532f
 80048d4:	08005367 	.word	0x08005367
 80048d8:	0800538b 	.word	0x0800538b

080048dc <_cleanup_r>:
 80048dc:	4901      	ldr	r1, [pc, #4]	; (80048e4 <_cleanup_r+0x8>)
 80048de:	f000 b8af 	b.w	8004a40 <_fwalk_reent>
 80048e2:	bf00      	nop
 80048e4:	0800481d 	.word	0x0800481d

080048e8 <__sfmoreglue>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	2268      	movs	r2, #104	; 0x68
 80048ec:	1e4d      	subs	r5, r1, #1
 80048ee:	4355      	muls	r5, r2
 80048f0:	460e      	mov	r6, r1
 80048f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80048f6:	f000 f997 	bl	8004c28 <_malloc_r>
 80048fa:	4604      	mov	r4, r0
 80048fc:	b140      	cbz	r0, 8004910 <__sfmoreglue+0x28>
 80048fe:	2100      	movs	r1, #0
 8004900:	e9c0 1600 	strd	r1, r6, [r0]
 8004904:	300c      	adds	r0, #12
 8004906:	60a0      	str	r0, [r4, #8]
 8004908:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800490c:	f7ff fdaa 	bl	8004464 <memset>
 8004910:	4620      	mov	r0, r4
 8004912:	bd70      	pop	{r4, r5, r6, pc}

08004914 <__sfp_lock_acquire>:
 8004914:	4801      	ldr	r0, [pc, #4]	; (800491c <__sfp_lock_acquire+0x8>)
 8004916:	f000 b8b3 	b.w	8004a80 <__retarget_lock_acquire_recursive>
 800491a:	bf00      	nop
 800491c:	20000169 	.word	0x20000169

08004920 <__sfp_lock_release>:
 8004920:	4801      	ldr	r0, [pc, #4]	; (8004928 <__sfp_lock_release+0x8>)
 8004922:	f000 b8ae 	b.w	8004a82 <__retarget_lock_release_recursive>
 8004926:	bf00      	nop
 8004928:	20000169 	.word	0x20000169

0800492c <__sinit_lock_acquire>:
 800492c:	4801      	ldr	r0, [pc, #4]	; (8004934 <__sinit_lock_acquire+0x8>)
 800492e:	f000 b8a7 	b.w	8004a80 <__retarget_lock_acquire_recursive>
 8004932:	bf00      	nop
 8004934:	2000016a 	.word	0x2000016a

08004938 <__sinit_lock_release>:
 8004938:	4801      	ldr	r0, [pc, #4]	; (8004940 <__sinit_lock_release+0x8>)
 800493a:	f000 b8a2 	b.w	8004a82 <__retarget_lock_release_recursive>
 800493e:	bf00      	nop
 8004940:	2000016a 	.word	0x2000016a

08004944 <__sinit>:
 8004944:	b510      	push	{r4, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	f7ff fff0 	bl	800492c <__sinit_lock_acquire>
 800494c:	69a3      	ldr	r3, [r4, #24]
 800494e:	b11b      	cbz	r3, 8004958 <__sinit+0x14>
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004954:	f7ff bff0 	b.w	8004938 <__sinit_lock_release>
 8004958:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800495c:	6523      	str	r3, [r4, #80]	; 0x50
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <__sinit+0x68>)
 8004960:	4a13      	ldr	r2, [pc, #76]	; (80049b0 <__sinit+0x6c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	62a2      	str	r2, [r4, #40]	; 0x28
 8004966:	42a3      	cmp	r3, r4
 8004968:	bf04      	itt	eq
 800496a:	2301      	moveq	r3, #1
 800496c:	61a3      	streq	r3, [r4, #24]
 800496e:	4620      	mov	r0, r4
 8004970:	f000 f820 	bl	80049b4 <__sfp>
 8004974:	6060      	str	r0, [r4, #4]
 8004976:	4620      	mov	r0, r4
 8004978:	f000 f81c 	bl	80049b4 <__sfp>
 800497c:	60a0      	str	r0, [r4, #8]
 800497e:	4620      	mov	r0, r4
 8004980:	f000 f818 	bl	80049b4 <__sfp>
 8004984:	2200      	movs	r2, #0
 8004986:	60e0      	str	r0, [r4, #12]
 8004988:	2104      	movs	r1, #4
 800498a:	6860      	ldr	r0, [r4, #4]
 800498c:	f7ff ff82 	bl	8004894 <std>
 8004990:	68a0      	ldr	r0, [r4, #8]
 8004992:	2201      	movs	r2, #1
 8004994:	2109      	movs	r1, #9
 8004996:	f7ff ff7d 	bl	8004894 <std>
 800499a:	68e0      	ldr	r0, [r4, #12]
 800499c:	2202      	movs	r2, #2
 800499e:	2112      	movs	r1, #18
 80049a0:	f7ff ff78 	bl	8004894 <std>
 80049a4:	2301      	movs	r3, #1
 80049a6:	61a3      	str	r3, [r4, #24]
 80049a8:	e7d2      	b.n	8004950 <__sinit+0xc>
 80049aa:	bf00      	nop
 80049ac:	08005638 	.word	0x08005638
 80049b0:	080048dd 	.word	0x080048dd

080049b4 <__sfp>:
 80049b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b6:	4607      	mov	r7, r0
 80049b8:	f7ff ffac 	bl	8004914 <__sfp_lock_acquire>
 80049bc:	4b1e      	ldr	r3, [pc, #120]	; (8004a38 <__sfp+0x84>)
 80049be:	681e      	ldr	r6, [r3, #0]
 80049c0:	69b3      	ldr	r3, [r6, #24]
 80049c2:	b913      	cbnz	r3, 80049ca <__sfp+0x16>
 80049c4:	4630      	mov	r0, r6
 80049c6:	f7ff ffbd 	bl	8004944 <__sinit>
 80049ca:	3648      	adds	r6, #72	; 0x48
 80049cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	d503      	bpl.n	80049dc <__sfp+0x28>
 80049d4:	6833      	ldr	r3, [r6, #0]
 80049d6:	b30b      	cbz	r3, 8004a1c <__sfp+0x68>
 80049d8:	6836      	ldr	r6, [r6, #0]
 80049da:	e7f7      	b.n	80049cc <__sfp+0x18>
 80049dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80049e0:	b9d5      	cbnz	r5, 8004a18 <__sfp+0x64>
 80049e2:	4b16      	ldr	r3, [pc, #88]	; (8004a3c <__sfp+0x88>)
 80049e4:	60e3      	str	r3, [r4, #12]
 80049e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80049ea:	6665      	str	r5, [r4, #100]	; 0x64
 80049ec:	f000 f847 	bl	8004a7e <__retarget_lock_init_recursive>
 80049f0:	f7ff ff96 	bl	8004920 <__sfp_lock_release>
 80049f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80049f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80049fc:	6025      	str	r5, [r4, #0]
 80049fe:	61a5      	str	r5, [r4, #24]
 8004a00:	2208      	movs	r2, #8
 8004a02:	4629      	mov	r1, r5
 8004a04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a08:	f7ff fd2c 	bl	8004464 <memset>
 8004a0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a14:	4620      	mov	r0, r4
 8004a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a18:	3468      	adds	r4, #104	; 0x68
 8004a1a:	e7d9      	b.n	80049d0 <__sfp+0x1c>
 8004a1c:	2104      	movs	r1, #4
 8004a1e:	4638      	mov	r0, r7
 8004a20:	f7ff ff62 	bl	80048e8 <__sfmoreglue>
 8004a24:	4604      	mov	r4, r0
 8004a26:	6030      	str	r0, [r6, #0]
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d1d5      	bne.n	80049d8 <__sfp+0x24>
 8004a2c:	f7ff ff78 	bl	8004920 <__sfp_lock_release>
 8004a30:	230c      	movs	r3, #12
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	e7ee      	b.n	8004a14 <__sfp+0x60>
 8004a36:	bf00      	nop
 8004a38:	08005638 	.word	0x08005638
 8004a3c:	ffff0001 	.word	0xffff0001

08004a40 <_fwalk_reent>:
 8004a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a44:	4606      	mov	r6, r0
 8004a46:	4688      	mov	r8, r1
 8004a48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004a4c:	2700      	movs	r7, #0
 8004a4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a52:	f1b9 0901 	subs.w	r9, r9, #1
 8004a56:	d505      	bpl.n	8004a64 <_fwalk_reent+0x24>
 8004a58:	6824      	ldr	r4, [r4, #0]
 8004a5a:	2c00      	cmp	r4, #0
 8004a5c:	d1f7      	bne.n	8004a4e <_fwalk_reent+0xe>
 8004a5e:	4638      	mov	r0, r7
 8004a60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a64:	89ab      	ldrh	r3, [r5, #12]
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d907      	bls.n	8004a7a <_fwalk_reent+0x3a>
 8004a6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	d003      	beq.n	8004a7a <_fwalk_reent+0x3a>
 8004a72:	4629      	mov	r1, r5
 8004a74:	4630      	mov	r0, r6
 8004a76:	47c0      	blx	r8
 8004a78:	4307      	orrs	r7, r0
 8004a7a:	3568      	adds	r5, #104	; 0x68
 8004a7c:	e7e9      	b.n	8004a52 <_fwalk_reent+0x12>

08004a7e <__retarget_lock_init_recursive>:
 8004a7e:	4770      	bx	lr

08004a80 <__retarget_lock_acquire_recursive>:
 8004a80:	4770      	bx	lr

08004a82 <__retarget_lock_release_recursive>:
 8004a82:	4770      	bx	lr

08004a84 <__swhatbuf_r>:
 8004a84:	b570      	push	{r4, r5, r6, lr}
 8004a86:	460e      	mov	r6, r1
 8004a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	b096      	sub	sp, #88	; 0x58
 8004a90:	4614      	mov	r4, r2
 8004a92:	461d      	mov	r5, r3
 8004a94:	da08      	bge.n	8004aa8 <__swhatbuf_r+0x24>
 8004a96:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	602a      	str	r2, [r5, #0]
 8004a9e:	061a      	lsls	r2, r3, #24
 8004aa0:	d410      	bmi.n	8004ac4 <__swhatbuf_r+0x40>
 8004aa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004aa6:	e00e      	b.n	8004ac6 <__swhatbuf_r+0x42>
 8004aa8:	466a      	mov	r2, sp
 8004aaa:	f000 fc95 	bl	80053d8 <_fstat_r>
 8004aae:	2800      	cmp	r0, #0
 8004ab0:	dbf1      	blt.n	8004a96 <__swhatbuf_r+0x12>
 8004ab2:	9a01      	ldr	r2, [sp, #4]
 8004ab4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ab8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004abc:	425a      	negs	r2, r3
 8004abe:	415a      	adcs	r2, r3
 8004ac0:	602a      	str	r2, [r5, #0]
 8004ac2:	e7ee      	b.n	8004aa2 <__swhatbuf_r+0x1e>
 8004ac4:	2340      	movs	r3, #64	; 0x40
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	b016      	add	sp, #88	; 0x58
 8004acc:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ad0 <__smakebuf_r>:
 8004ad0:	898b      	ldrh	r3, [r1, #12]
 8004ad2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ad4:	079d      	lsls	r5, r3, #30
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	460c      	mov	r4, r1
 8004ada:	d507      	bpl.n	8004aec <__smakebuf_r+0x1c>
 8004adc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ae0:	6023      	str	r3, [r4, #0]
 8004ae2:	6123      	str	r3, [r4, #16]
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	6163      	str	r3, [r4, #20]
 8004ae8:	b002      	add	sp, #8
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	ab01      	add	r3, sp, #4
 8004aee:	466a      	mov	r2, sp
 8004af0:	f7ff ffc8 	bl	8004a84 <__swhatbuf_r>
 8004af4:	9900      	ldr	r1, [sp, #0]
 8004af6:	4605      	mov	r5, r0
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 f895 	bl	8004c28 <_malloc_r>
 8004afe:	b948      	cbnz	r0, 8004b14 <__smakebuf_r+0x44>
 8004b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b04:	059a      	lsls	r2, r3, #22
 8004b06:	d4ef      	bmi.n	8004ae8 <__smakebuf_r+0x18>
 8004b08:	f023 0303 	bic.w	r3, r3, #3
 8004b0c:	f043 0302 	orr.w	r3, r3, #2
 8004b10:	81a3      	strh	r3, [r4, #12]
 8004b12:	e7e3      	b.n	8004adc <__smakebuf_r+0xc>
 8004b14:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <__smakebuf_r+0x7c>)
 8004b16:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b18:	89a3      	ldrh	r3, [r4, #12]
 8004b1a:	6020      	str	r0, [r4, #0]
 8004b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b20:	81a3      	strh	r3, [r4, #12]
 8004b22:	9b00      	ldr	r3, [sp, #0]
 8004b24:	6163      	str	r3, [r4, #20]
 8004b26:	9b01      	ldr	r3, [sp, #4]
 8004b28:	6120      	str	r0, [r4, #16]
 8004b2a:	b15b      	cbz	r3, 8004b44 <__smakebuf_r+0x74>
 8004b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b30:	4630      	mov	r0, r6
 8004b32:	f000 fc63 	bl	80053fc <_isatty_r>
 8004b36:	b128      	cbz	r0, 8004b44 <__smakebuf_r+0x74>
 8004b38:	89a3      	ldrh	r3, [r4, #12]
 8004b3a:	f023 0303 	bic.w	r3, r3, #3
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	81a3      	strh	r3, [r4, #12]
 8004b44:	89a0      	ldrh	r0, [r4, #12]
 8004b46:	4305      	orrs	r5, r0
 8004b48:	81a5      	strh	r5, [r4, #12]
 8004b4a:	e7cd      	b.n	8004ae8 <__smakebuf_r+0x18>
 8004b4c:	080048dd 	.word	0x080048dd

08004b50 <_free_r>:
 8004b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b52:	2900      	cmp	r1, #0
 8004b54:	d044      	beq.n	8004be0 <_free_r+0x90>
 8004b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b5a:	9001      	str	r0, [sp, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004b62:	bfb8      	it	lt
 8004b64:	18e4      	addlt	r4, r4, r3
 8004b66:	f000 fc6b 	bl	8005440 <__malloc_lock>
 8004b6a:	4a1e      	ldr	r2, [pc, #120]	; (8004be4 <_free_r+0x94>)
 8004b6c:	9801      	ldr	r0, [sp, #4]
 8004b6e:	6813      	ldr	r3, [r2, #0]
 8004b70:	b933      	cbnz	r3, 8004b80 <_free_r+0x30>
 8004b72:	6063      	str	r3, [r4, #4]
 8004b74:	6014      	str	r4, [r2, #0]
 8004b76:	b003      	add	sp, #12
 8004b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b7c:	f000 bc66 	b.w	800544c <__malloc_unlock>
 8004b80:	42a3      	cmp	r3, r4
 8004b82:	d908      	bls.n	8004b96 <_free_r+0x46>
 8004b84:	6825      	ldr	r5, [r4, #0]
 8004b86:	1961      	adds	r1, r4, r5
 8004b88:	428b      	cmp	r3, r1
 8004b8a:	bf01      	itttt	eq
 8004b8c:	6819      	ldreq	r1, [r3, #0]
 8004b8e:	685b      	ldreq	r3, [r3, #4]
 8004b90:	1949      	addeq	r1, r1, r5
 8004b92:	6021      	streq	r1, [r4, #0]
 8004b94:	e7ed      	b.n	8004b72 <_free_r+0x22>
 8004b96:	461a      	mov	r2, r3
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	b10b      	cbz	r3, 8004ba0 <_free_r+0x50>
 8004b9c:	42a3      	cmp	r3, r4
 8004b9e:	d9fa      	bls.n	8004b96 <_free_r+0x46>
 8004ba0:	6811      	ldr	r1, [r2, #0]
 8004ba2:	1855      	adds	r5, r2, r1
 8004ba4:	42a5      	cmp	r5, r4
 8004ba6:	d10b      	bne.n	8004bc0 <_free_r+0x70>
 8004ba8:	6824      	ldr	r4, [r4, #0]
 8004baa:	4421      	add	r1, r4
 8004bac:	1854      	adds	r4, r2, r1
 8004bae:	42a3      	cmp	r3, r4
 8004bb0:	6011      	str	r1, [r2, #0]
 8004bb2:	d1e0      	bne.n	8004b76 <_free_r+0x26>
 8004bb4:	681c      	ldr	r4, [r3, #0]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	6053      	str	r3, [r2, #4]
 8004bba:	4421      	add	r1, r4
 8004bbc:	6011      	str	r1, [r2, #0]
 8004bbe:	e7da      	b.n	8004b76 <_free_r+0x26>
 8004bc0:	d902      	bls.n	8004bc8 <_free_r+0x78>
 8004bc2:	230c      	movs	r3, #12
 8004bc4:	6003      	str	r3, [r0, #0]
 8004bc6:	e7d6      	b.n	8004b76 <_free_r+0x26>
 8004bc8:	6825      	ldr	r5, [r4, #0]
 8004bca:	1961      	adds	r1, r4, r5
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	bf04      	itt	eq
 8004bd0:	6819      	ldreq	r1, [r3, #0]
 8004bd2:	685b      	ldreq	r3, [r3, #4]
 8004bd4:	6063      	str	r3, [r4, #4]
 8004bd6:	bf04      	itt	eq
 8004bd8:	1949      	addeq	r1, r1, r5
 8004bda:	6021      	streq	r1, [r4, #0]
 8004bdc:	6054      	str	r4, [r2, #4]
 8004bde:	e7ca      	b.n	8004b76 <_free_r+0x26>
 8004be0:	b003      	add	sp, #12
 8004be2:	bd30      	pop	{r4, r5, pc}
 8004be4:	2000016c 	.word	0x2000016c

08004be8 <sbrk_aligned>:
 8004be8:	b570      	push	{r4, r5, r6, lr}
 8004bea:	4e0e      	ldr	r6, [pc, #56]	; (8004c24 <sbrk_aligned+0x3c>)
 8004bec:	460c      	mov	r4, r1
 8004bee:	6831      	ldr	r1, [r6, #0]
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	b911      	cbnz	r1, 8004bfa <sbrk_aligned+0x12>
 8004bf4:	f000 fb7a 	bl	80052ec <_sbrk_r>
 8004bf8:	6030      	str	r0, [r6, #0]
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 fb75 	bl	80052ec <_sbrk_r>
 8004c02:	1c43      	adds	r3, r0, #1
 8004c04:	d00a      	beq.n	8004c1c <sbrk_aligned+0x34>
 8004c06:	1cc4      	adds	r4, r0, #3
 8004c08:	f024 0403 	bic.w	r4, r4, #3
 8004c0c:	42a0      	cmp	r0, r4
 8004c0e:	d007      	beq.n	8004c20 <sbrk_aligned+0x38>
 8004c10:	1a21      	subs	r1, r4, r0
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 fb6a 	bl	80052ec <_sbrk_r>
 8004c18:	3001      	adds	r0, #1
 8004c1a:	d101      	bne.n	8004c20 <sbrk_aligned+0x38>
 8004c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004c20:	4620      	mov	r0, r4
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	20000170 	.word	0x20000170

08004c28 <_malloc_r>:
 8004c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2c:	1ccd      	adds	r5, r1, #3
 8004c2e:	f025 0503 	bic.w	r5, r5, #3
 8004c32:	3508      	adds	r5, #8
 8004c34:	2d0c      	cmp	r5, #12
 8004c36:	bf38      	it	cc
 8004c38:	250c      	movcc	r5, #12
 8004c3a:	2d00      	cmp	r5, #0
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	db01      	blt.n	8004c44 <_malloc_r+0x1c>
 8004c40:	42a9      	cmp	r1, r5
 8004c42:	d905      	bls.n	8004c50 <_malloc_r+0x28>
 8004c44:	230c      	movs	r3, #12
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	2600      	movs	r6, #0
 8004c4a:	4630      	mov	r0, r6
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c50:	4e2e      	ldr	r6, [pc, #184]	; (8004d0c <_malloc_r+0xe4>)
 8004c52:	f000 fbf5 	bl	8005440 <__malloc_lock>
 8004c56:	6833      	ldr	r3, [r6, #0]
 8004c58:	461c      	mov	r4, r3
 8004c5a:	bb34      	cbnz	r4, 8004caa <_malloc_r+0x82>
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4638      	mov	r0, r7
 8004c60:	f7ff ffc2 	bl	8004be8 <sbrk_aligned>
 8004c64:	1c43      	adds	r3, r0, #1
 8004c66:	4604      	mov	r4, r0
 8004c68:	d14d      	bne.n	8004d06 <_malloc_r+0xde>
 8004c6a:	6834      	ldr	r4, [r6, #0]
 8004c6c:	4626      	mov	r6, r4
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	d140      	bne.n	8004cf4 <_malloc_r+0xcc>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	4631      	mov	r1, r6
 8004c76:	4638      	mov	r0, r7
 8004c78:	eb04 0803 	add.w	r8, r4, r3
 8004c7c:	f000 fb36 	bl	80052ec <_sbrk_r>
 8004c80:	4580      	cmp	r8, r0
 8004c82:	d13a      	bne.n	8004cfa <_malloc_r+0xd2>
 8004c84:	6821      	ldr	r1, [r4, #0]
 8004c86:	3503      	adds	r5, #3
 8004c88:	1a6d      	subs	r5, r5, r1
 8004c8a:	f025 0503 	bic.w	r5, r5, #3
 8004c8e:	3508      	adds	r5, #8
 8004c90:	2d0c      	cmp	r5, #12
 8004c92:	bf38      	it	cc
 8004c94:	250c      	movcc	r5, #12
 8004c96:	4629      	mov	r1, r5
 8004c98:	4638      	mov	r0, r7
 8004c9a:	f7ff ffa5 	bl	8004be8 <sbrk_aligned>
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d02b      	beq.n	8004cfa <_malloc_r+0xd2>
 8004ca2:	6823      	ldr	r3, [r4, #0]
 8004ca4:	442b      	add	r3, r5
 8004ca6:	6023      	str	r3, [r4, #0]
 8004ca8:	e00e      	b.n	8004cc8 <_malloc_r+0xa0>
 8004caa:	6822      	ldr	r2, [r4, #0]
 8004cac:	1b52      	subs	r2, r2, r5
 8004cae:	d41e      	bmi.n	8004cee <_malloc_r+0xc6>
 8004cb0:	2a0b      	cmp	r2, #11
 8004cb2:	d916      	bls.n	8004ce2 <_malloc_r+0xba>
 8004cb4:	1961      	adds	r1, r4, r5
 8004cb6:	42a3      	cmp	r3, r4
 8004cb8:	6025      	str	r5, [r4, #0]
 8004cba:	bf18      	it	ne
 8004cbc:	6059      	strne	r1, [r3, #4]
 8004cbe:	6863      	ldr	r3, [r4, #4]
 8004cc0:	bf08      	it	eq
 8004cc2:	6031      	streq	r1, [r6, #0]
 8004cc4:	5162      	str	r2, [r4, r5]
 8004cc6:	604b      	str	r3, [r1, #4]
 8004cc8:	4638      	mov	r0, r7
 8004cca:	f104 060b 	add.w	r6, r4, #11
 8004cce:	f000 fbbd 	bl	800544c <__malloc_unlock>
 8004cd2:	f026 0607 	bic.w	r6, r6, #7
 8004cd6:	1d23      	adds	r3, r4, #4
 8004cd8:	1af2      	subs	r2, r6, r3
 8004cda:	d0b6      	beq.n	8004c4a <_malloc_r+0x22>
 8004cdc:	1b9b      	subs	r3, r3, r6
 8004cde:	50a3      	str	r3, [r4, r2]
 8004ce0:	e7b3      	b.n	8004c4a <_malloc_r+0x22>
 8004ce2:	6862      	ldr	r2, [r4, #4]
 8004ce4:	42a3      	cmp	r3, r4
 8004ce6:	bf0c      	ite	eq
 8004ce8:	6032      	streq	r2, [r6, #0]
 8004cea:	605a      	strne	r2, [r3, #4]
 8004cec:	e7ec      	b.n	8004cc8 <_malloc_r+0xa0>
 8004cee:	4623      	mov	r3, r4
 8004cf0:	6864      	ldr	r4, [r4, #4]
 8004cf2:	e7b2      	b.n	8004c5a <_malloc_r+0x32>
 8004cf4:	4634      	mov	r4, r6
 8004cf6:	6876      	ldr	r6, [r6, #4]
 8004cf8:	e7b9      	b.n	8004c6e <_malloc_r+0x46>
 8004cfa:	230c      	movs	r3, #12
 8004cfc:	603b      	str	r3, [r7, #0]
 8004cfe:	4638      	mov	r0, r7
 8004d00:	f000 fba4 	bl	800544c <__malloc_unlock>
 8004d04:	e7a1      	b.n	8004c4a <_malloc_r+0x22>
 8004d06:	6025      	str	r5, [r4, #0]
 8004d08:	e7de      	b.n	8004cc8 <_malloc_r+0xa0>
 8004d0a:	bf00      	nop
 8004d0c:	2000016c 	.word	0x2000016c

08004d10 <__sfputc_r>:
 8004d10:	6893      	ldr	r3, [r2, #8]
 8004d12:	3b01      	subs	r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	b410      	push	{r4}
 8004d18:	6093      	str	r3, [r2, #8]
 8004d1a:	da08      	bge.n	8004d2e <__sfputc_r+0x1e>
 8004d1c:	6994      	ldr	r4, [r2, #24]
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	db01      	blt.n	8004d26 <__sfputc_r+0x16>
 8004d22:	290a      	cmp	r1, #10
 8004d24:	d103      	bne.n	8004d2e <__sfputc_r+0x1e>
 8004d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d2a:	f7ff bc31 	b.w	8004590 <__swbuf_r>
 8004d2e:	6813      	ldr	r3, [r2, #0]
 8004d30:	1c58      	adds	r0, r3, #1
 8004d32:	6010      	str	r0, [r2, #0]
 8004d34:	7019      	strb	r1, [r3, #0]
 8004d36:	4608      	mov	r0, r1
 8004d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <__sfputs_r>:
 8004d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d40:	4606      	mov	r6, r0
 8004d42:	460f      	mov	r7, r1
 8004d44:	4614      	mov	r4, r2
 8004d46:	18d5      	adds	r5, r2, r3
 8004d48:	42ac      	cmp	r4, r5
 8004d4a:	d101      	bne.n	8004d50 <__sfputs_r+0x12>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	e007      	b.n	8004d60 <__sfputs_r+0x22>
 8004d50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d54:	463a      	mov	r2, r7
 8004d56:	4630      	mov	r0, r6
 8004d58:	f7ff ffda 	bl	8004d10 <__sfputc_r>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d1f3      	bne.n	8004d48 <__sfputs_r+0xa>
 8004d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d64 <_vfiprintf_r>:
 8004d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	460d      	mov	r5, r1
 8004d6a:	b09d      	sub	sp, #116	; 0x74
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	4698      	mov	r8, r3
 8004d70:	4606      	mov	r6, r0
 8004d72:	b118      	cbz	r0, 8004d7c <_vfiprintf_r+0x18>
 8004d74:	6983      	ldr	r3, [r0, #24]
 8004d76:	b90b      	cbnz	r3, 8004d7c <_vfiprintf_r+0x18>
 8004d78:	f7ff fde4 	bl	8004944 <__sinit>
 8004d7c:	4b89      	ldr	r3, [pc, #548]	; (8004fa4 <_vfiprintf_r+0x240>)
 8004d7e:	429d      	cmp	r5, r3
 8004d80:	d11b      	bne.n	8004dba <_vfiprintf_r+0x56>
 8004d82:	6875      	ldr	r5, [r6, #4]
 8004d84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d86:	07d9      	lsls	r1, r3, #31
 8004d88:	d405      	bmi.n	8004d96 <_vfiprintf_r+0x32>
 8004d8a:	89ab      	ldrh	r3, [r5, #12]
 8004d8c:	059a      	lsls	r2, r3, #22
 8004d8e:	d402      	bmi.n	8004d96 <_vfiprintf_r+0x32>
 8004d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d92:	f7ff fe75 	bl	8004a80 <__retarget_lock_acquire_recursive>
 8004d96:	89ab      	ldrh	r3, [r5, #12]
 8004d98:	071b      	lsls	r3, r3, #28
 8004d9a:	d501      	bpl.n	8004da0 <_vfiprintf_r+0x3c>
 8004d9c:	692b      	ldr	r3, [r5, #16]
 8004d9e:	b9eb      	cbnz	r3, 8004ddc <_vfiprintf_r+0x78>
 8004da0:	4629      	mov	r1, r5
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7ff fc46 	bl	8004634 <__swsetup_r>
 8004da8:	b1c0      	cbz	r0, 8004ddc <_vfiprintf_r+0x78>
 8004daa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dac:	07dc      	lsls	r4, r3, #31
 8004dae:	d50e      	bpl.n	8004dce <_vfiprintf_r+0x6a>
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	b01d      	add	sp, #116	; 0x74
 8004db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dba:	4b7b      	ldr	r3, [pc, #492]	; (8004fa8 <_vfiprintf_r+0x244>)
 8004dbc:	429d      	cmp	r5, r3
 8004dbe:	d101      	bne.n	8004dc4 <_vfiprintf_r+0x60>
 8004dc0:	68b5      	ldr	r5, [r6, #8]
 8004dc2:	e7df      	b.n	8004d84 <_vfiprintf_r+0x20>
 8004dc4:	4b79      	ldr	r3, [pc, #484]	; (8004fac <_vfiprintf_r+0x248>)
 8004dc6:	429d      	cmp	r5, r3
 8004dc8:	bf08      	it	eq
 8004dca:	68f5      	ldreq	r5, [r6, #12]
 8004dcc:	e7da      	b.n	8004d84 <_vfiprintf_r+0x20>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	0598      	lsls	r0, r3, #22
 8004dd2:	d4ed      	bmi.n	8004db0 <_vfiprintf_r+0x4c>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd6:	f7ff fe54 	bl	8004a82 <__retarget_lock_release_recursive>
 8004dda:	e7e9      	b.n	8004db0 <_vfiprintf_r+0x4c>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	9309      	str	r3, [sp, #36]	; 0x24
 8004de0:	2320      	movs	r3, #32
 8004de2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004de6:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dea:	2330      	movs	r3, #48	; 0x30
 8004dec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004fb0 <_vfiprintf_r+0x24c>
 8004df0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004df4:	f04f 0901 	mov.w	r9, #1
 8004df8:	4623      	mov	r3, r4
 8004dfa:	469a      	mov	sl, r3
 8004dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e00:	b10a      	cbz	r2, 8004e06 <_vfiprintf_r+0xa2>
 8004e02:	2a25      	cmp	r2, #37	; 0x25
 8004e04:	d1f9      	bne.n	8004dfa <_vfiprintf_r+0x96>
 8004e06:	ebba 0b04 	subs.w	fp, sl, r4
 8004e0a:	d00b      	beq.n	8004e24 <_vfiprintf_r+0xc0>
 8004e0c:	465b      	mov	r3, fp
 8004e0e:	4622      	mov	r2, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	4630      	mov	r0, r6
 8004e14:	f7ff ff93 	bl	8004d3e <__sfputs_r>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f000 80aa 	beq.w	8004f72 <_vfiprintf_r+0x20e>
 8004e1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e20:	445a      	add	r2, fp
 8004e22:	9209      	str	r2, [sp, #36]	; 0x24
 8004e24:	f89a 3000 	ldrb.w	r3, [sl]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 80a2 	beq.w	8004f72 <_vfiprintf_r+0x20e>
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f04f 32ff 	mov.w	r2, #4294967295
 8004e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e38:	f10a 0a01 	add.w	sl, sl, #1
 8004e3c:	9304      	str	r3, [sp, #16]
 8004e3e:	9307      	str	r3, [sp, #28]
 8004e40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e44:	931a      	str	r3, [sp, #104]	; 0x68
 8004e46:	4654      	mov	r4, sl
 8004e48:	2205      	movs	r2, #5
 8004e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e4e:	4858      	ldr	r0, [pc, #352]	; (8004fb0 <_vfiprintf_r+0x24c>)
 8004e50:	f7fb f9c6 	bl	80001e0 <memchr>
 8004e54:	9a04      	ldr	r2, [sp, #16]
 8004e56:	b9d8      	cbnz	r0, 8004e90 <_vfiprintf_r+0x12c>
 8004e58:	06d1      	lsls	r1, r2, #27
 8004e5a:	bf44      	itt	mi
 8004e5c:	2320      	movmi	r3, #32
 8004e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e62:	0713      	lsls	r3, r2, #28
 8004e64:	bf44      	itt	mi
 8004e66:	232b      	movmi	r3, #43	; 0x2b
 8004e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8004e70:	2b2a      	cmp	r3, #42	; 0x2a
 8004e72:	d015      	beq.n	8004ea0 <_vfiprintf_r+0x13c>
 8004e74:	9a07      	ldr	r2, [sp, #28]
 8004e76:	4654      	mov	r4, sl
 8004e78:	2000      	movs	r0, #0
 8004e7a:	f04f 0c0a 	mov.w	ip, #10
 8004e7e:	4621      	mov	r1, r4
 8004e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e84:	3b30      	subs	r3, #48	; 0x30
 8004e86:	2b09      	cmp	r3, #9
 8004e88:	d94e      	bls.n	8004f28 <_vfiprintf_r+0x1c4>
 8004e8a:	b1b0      	cbz	r0, 8004eba <_vfiprintf_r+0x156>
 8004e8c:	9207      	str	r2, [sp, #28]
 8004e8e:	e014      	b.n	8004eba <_vfiprintf_r+0x156>
 8004e90:	eba0 0308 	sub.w	r3, r0, r8
 8004e94:	fa09 f303 	lsl.w	r3, r9, r3
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	46a2      	mov	sl, r4
 8004e9e:	e7d2      	b.n	8004e46 <_vfiprintf_r+0xe2>
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	1d19      	adds	r1, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	9103      	str	r1, [sp, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bfbb      	ittet	lt
 8004eac:	425b      	neglt	r3, r3
 8004eae:	f042 0202 	orrlt.w	r2, r2, #2
 8004eb2:	9307      	strge	r3, [sp, #28]
 8004eb4:	9307      	strlt	r3, [sp, #28]
 8004eb6:	bfb8      	it	lt
 8004eb8:	9204      	strlt	r2, [sp, #16]
 8004eba:	7823      	ldrb	r3, [r4, #0]
 8004ebc:	2b2e      	cmp	r3, #46	; 0x2e
 8004ebe:	d10c      	bne.n	8004eda <_vfiprintf_r+0x176>
 8004ec0:	7863      	ldrb	r3, [r4, #1]
 8004ec2:	2b2a      	cmp	r3, #42	; 0x2a
 8004ec4:	d135      	bne.n	8004f32 <_vfiprintf_r+0x1ce>
 8004ec6:	9b03      	ldr	r3, [sp, #12]
 8004ec8:	1d1a      	adds	r2, r3, #4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	9203      	str	r2, [sp, #12]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	bfb8      	it	lt
 8004ed2:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ed6:	3402      	adds	r4, #2
 8004ed8:	9305      	str	r3, [sp, #20]
 8004eda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004fc0 <_vfiprintf_r+0x25c>
 8004ede:	7821      	ldrb	r1, [r4, #0]
 8004ee0:	2203      	movs	r2, #3
 8004ee2:	4650      	mov	r0, sl
 8004ee4:	f7fb f97c 	bl	80001e0 <memchr>
 8004ee8:	b140      	cbz	r0, 8004efc <_vfiprintf_r+0x198>
 8004eea:	2340      	movs	r3, #64	; 0x40
 8004eec:	eba0 000a 	sub.w	r0, r0, sl
 8004ef0:	fa03 f000 	lsl.w	r0, r3, r0
 8004ef4:	9b04      	ldr	r3, [sp, #16]
 8004ef6:	4303      	orrs	r3, r0
 8004ef8:	3401      	adds	r4, #1
 8004efa:	9304      	str	r3, [sp, #16]
 8004efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f00:	482c      	ldr	r0, [pc, #176]	; (8004fb4 <_vfiprintf_r+0x250>)
 8004f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f06:	2206      	movs	r2, #6
 8004f08:	f7fb f96a 	bl	80001e0 <memchr>
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	d03f      	beq.n	8004f90 <_vfiprintf_r+0x22c>
 8004f10:	4b29      	ldr	r3, [pc, #164]	; (8004fb8 <_vfiprintf_r+0x254>)
 8004f12:	bb1b      	cbnz	r3, 8004f5c <_vfiprintf_r+0x1f8>
 8004f14:	9b03      	ldr	r3, [sp, #12]
 8004f16:	3307      	adds	r3, #7
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	3308      	adds	r3, #8
 8004f1e:	9303      	str	r3, [sp, #12]
 8004f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f22:	443b      	add	r3, r7
 8004f24:	9309      	str	r3, [sp, #36]	; 0x24
 8004f26:	e767      	b.n	8004df8 <_vfiprintf_r+0x94>
 8004f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	2001      	movs	r0, #1
 8004f30:	e7a5      	b.n	8004e7e <_vfiprintf_r+0x11a>
 8004f32:	2300      	movs	r3, #0
 8004f34:	3401      	adds	r4, #1
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f04f 0c0a 	mov.w	ip, #10
 8004f3e:	4620      	mov	r0, r4
 8004f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f44:	3a30      	subs	r2, #48	; 0x30
 8004f46:	2a09      	cmp	r2, #9
 8004f48:	d903      	bls.n	8004f52 <_vfiprintf_r+0x1ee>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0c5      	beq.n	8004eda <_vfiprintf_r+0x176>
 8004f4e:	9105      	str	r1, [sp, #20]
 8004f50:	e7c3      	b.n	8004eda <_vfiprintf_r+0x176>
 8004f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f56:	4604      	mov	r4, r0
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e7f0      	b.n	8004f3e <_vfiprintf_r+0x1da>
 8004f5c:	ab03      	add	r3, sp, #12
 8004f5e:	9300      	str	r3, [sp, #0]
 8004f60:	462a      	mov	r2, r5
 8004f62:	4b16      	ldr	r3, [pc, #88]	; (8004fbc <_vfiprintf_r+0x258>)
 8004f64:	a904      	add	r1, sp, #16
 8004f66:	4630      	mov	r0, r6
 8004f68:	f3af 8000 	nop.w
 8004f6c:	4607      	mov	r7, r0
 8004f6e:	1c78      	adds	r0, r7, #1
 8004f70:	d1d6      	bne.n	8004f20 <_vfiprintf_r+0x1bc>
 8004f72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004f74:	07d9      	lsls	r1, r3, #31
 8004f76:	d405      	bmi.n	8004f84 <_vfiprintf_r+0x220>
 8004f78:	89ab      	ldrh	r3, [r5, #12]
 8004f7a:	059a      	lsls	r2, r3, #22
 8004f7c:	d402      	bmi.n	8004f84 <_vfiprintf_r+0x220>
 8004f7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004f80:	f7ff fd7f 	bl	8004a82 <__retarget_lock_release_recursive>
 8004f84:	89ab      	ldrh	r3, [r5, #12]
 8004f86:	065b      	lsls	r3, r3, #25
 8004f88:	f53f af12 	bmi.w	8004db0 <_vfiprintf_r+0x4c>
 8004f8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f8e:	e711      	b.n	8004db4 <_vfiprintf_r+0x50>
 8004f90:	ab03      	add	r3, sp, #12
 8004f92:	9300      	str	r3, [sp, #0]
 8004f94:	462a      	mov	r2, r5
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <_vfiprintf_r+0x258>)
 8004f98:	a904      	add	r1, sp, #16
 8004f9a:	4630      	mov	r0, r6
 8004f9c:	f000 f880 	bl	80050a0 <_printf_i>
 8004fa0:	e7e4      	b.n	8004f6c <_vfiprintf_r+0x208>
 8004fa2:	bf00      	nop
 8004fa4:	0800565c 	.word	0x0800565c
 8004fa8:	0800567c 	.word	0x0800567c
 8004fac:	0800563c 	.word	0x0800563c
 8004fb0:	0800569c 	.word	0x0800569c
 8004fb4:	080056a6 	.word	0x080056a6
 8004fb8:	00000000 	.word	0x00000000
 8004fbc:	08004d3f 	.word	0x08004d3f
 8004fc0:	080056a2 	.word	0x080056a2

08004fc4 <_printf_common>:
 8004fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc8:	4616      	mov	r6, r2
 8004fca:	4699      	mov	r9, r3
 8004fcc:	688a      	ldr	r2, [r1, #8]
 8004fce:	690b      	ldr	r3, [r1, #16]
 8004fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	bfb8      	it	lt
 8004fd8:	4613      	movlt	r3, r2
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fe0:	4607      	mov	r7, r0
 8004fe2:	460c      	mov	r4, r1
 8004fe4:	b10a      	cbz	r2, 8004fea <_printf_common+0x26>
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	6033      	str	r3, [r6, #0]
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	0699      	lsls	r1, r3, #26
 8004fee:	bf42      	ittt	mi
 8004ff0:	6833      	ldrmi	r3, [r6, #0]
 8004ff2:	3302      	addmi	r3, #2
 8004ff4:	6033      	strmi	r3, [r6, #0]
 8004ff6:	6825      	ldr	r5, [r4, #0]
 8004ff8:	f015 0506 	ands.w	r5, r5, #6
 8004ffc:	d106      	bne.n	800500c <_printf_common+0x48>
 8004ffe:	f104 0a19 	add.w	sl, r4, #25
 8005002:	68e3      	ldr	r3, [r4, #12]
 8005004:	6832      	ldr	r2, [r6, #0]
 8005006:	1a9b      	subs	r3, r3, r2
 8005008:	42ab      	cmp	r3, r5
 800500a:	dc26      	bgt.n	800505a <_printf_common+0x96>
 800500c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005010:	1e13      	subs	r3, r2, #0
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	2301      	movne	r3, #1
 8005018:	0692      	lsls	r2, r2, #26
 800501a:	d42b      	bmi.n	8005074 <_printf_common+0xb0>
 800501c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005020:	4649      	mov	r1, r9
 8005022:	4638      	mov	r0, r7
 8005024:	47c0      	blx	r8
 8005026:	3001      	adds	r0, #1
 8005028:	d01e      	beq.n	8005068 <_printf_common+0xa4>
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	68e5      	ldr	r5, [r4, #12]
 800502e:	6832      	ldr	r2, [r6, #0]
 8005030:	f003 0306 	and.w	r3, r3, #6
 8005034:	2b04      	cmp	r3, #4
 8005036:	bf08      	it	eq
 8005038:	1aad      	subeq	r5, r5, r2
 800503a:	68a3      	ldr	r3, [r4, #8]
 800503c:	6922      	ldr	r2, [r4, #16]
 800503e:	bf0c      	ite	eq
 8005040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005044:	2500      	movne	r5, #0
 8005046:	4293      	cmp	r3, r2
 8005048:	bfc4      	itt	gt
 800504a:	1a9b      	subgt	r3, r3, r2
 800504c:	18ed      	addgt	r5, r5, r3
 800504e:	2600      	movs	r6, #0
 8005050:	341a      	adds	r4, #26
 8005052:	42b5      	cmp	r5, r6
 8005054:	d11a      	bne.n	800508c <_printf_common+0xc8>
 8005056:	2000      	movs	r0, #0
 8005058:	e008      	b.n	800506c <_printf_common+0xa8>
 800505a:	2301      	movs	r3, #1
 800505c:	4652      	mov	r2, sl
 800505e:	4649      	mov	r1, r9
 8005060:	4638      	mov	r0, r7
 8005062:	47c0      	blx	r8
 8005064:	3001      	adds	r0, #1
 8005066:	d103      	bne.n	8005070 <_printf_common+0xac>
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	3501      	adds	r5, #1
 8005072:	e7c6      	b.n	8005002 <_printf_common+0x3e>
 8005074:	18e1      	adds	r1, r4, r3
 8005076:	1c5a      	adds	r2, r3, #1
 8005078:	2030      	movs	r0, #48	; 0x30
 800507a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800507e:	4422      	add	r2, r4
 8005080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005088:	3302      	adds	r3, #2
 800508a:	e7c7      	b.n	800501c <_printf_common+0x58>
 800508c:	2301      	movs	r3, #1
 800508e:	4622      	mov	r2, r4
 8005090:	4649      	mov	r1, r9
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	3001      	adds	r0, #1
 8005098:	d0e6      	beq.n	8005068 <_printf_common+0xa4>
 800509a:	3601      	adds	r6, #1
 800509c:	e7d9      	b.n	8005052 <_printf_common+0x8e>
	...

080050a0 <_printf_i>:
 80050a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050a4:	7e0f      	ldrb	r7, [r1, #24]
 80050a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050a8:	2f78      	cmp	r7, #120	; 0x78
 80050aa:	4691      	mov	r9, r2
 80050ac:	4680      	mov	r8, r0
 80050ae:	460c      	mov	r4, r1
 80050b0:	469a      	mov	sl, r3
 80050b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050b6:	d807      	bhi.n	80050c8 <_printf_i+0x28>
 80050b8:	2f62      	cmp	r7, #98	; 0x62
 80050ba:	d80a      	bhi.n	80050d2 <_printf_i+0x32>
 80050bc:	2f00      	cmp	r7, #0
 80050be:	f000 80d8 	beq.w	8005272 <_printf_i+0x1d2>
 80050c2:	2f58      	cmp	r7, #88	; 0x58
 80050c4:	f000 80a3 	beq.w	800520e <_printf_i+0x16e>
 80050c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050d0:	e03a      	b.n	8005148 <_printf_i+0xa8>
 80050d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050d6:	2b15      	cmp	r3, #21
 80050d8:	d8f6      	bhi.n	80050c8 <_printf_i+0x28>
 80050da:	a101      	add	r1, pc, #4	; (adr r1, 80050e0 <_printf_i+0x40>)
 80050dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050e0:	08005139 	.word	0x08005139
 80050e4:	0800514d 	.word	0x0800514d
 80050e8:	080050c9 	.word	0x080050c9
 80050ec:	080050c9 	.word	0x080050c9
 80050f0:	080050c9 	.word	0x080050c9
 80050f4:	080050c9 	.word	0x080050c9
 80050f8:	0800514d 	.word	0x0800514d
 80050fc:	080050c9 	.word	0x080050c9
 8005100:	080050c9 	.word	0x080050c9
 8005104:	080050c9 	.word	0x080050c9
 8005108:	080050c9 	.word	0x080050c9
 800510c:	08005259 	.word	0x08005259
 8005110:	0800517d 	.word	0x0800517d
 8005114:	0800523b 	.word	0x0800523b
 8005118:	080050c9 	.word	0x080050c9
 800511c:	080050c9 	.word	0x080050c9
 8005120:	0800527b 	.word	0x0800527b
 8005124:	080050c9 	.word	0x080050c9
 8005128:	0800517d 	.word	0x0800517d
 800512c:	080050c9 	.word	0x080050c9
 8005130:	080050c9 	.word	0x080050c9
 8005134:	08005243 	.word	0x08005243
 8005138:	682b      	ldr	r3, [r5, #0]
 800513a:	1d1a      	adds	r2, r3, #4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	602a      	str	r2, [r5, #0]
 8005140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005148:	2301      	movs	r3, #1
 800514a:	e0a3      	b.n	8005294 <_printf_i+0x1f4>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	6829      	ldr	r1, [r5, #0]
 8005150:	0606      	lsls	r6, r0, #24
 8005152:	f101 0304 	add.w	r3, r1, #4
 8005156:	d50a      	bpl.n	800516e <_printf_i+0xce>
 8005158:	680e      	ldr	r6, [r1, #0]
 800515a:	602b      	str	r3, [r5, #0]
 800515c:	2e00      	cmp	r6, #0
 800515e:	da03      	bge.n	8005168 <_printf_i+0xc8>
 8005160:	232d      	movs	r3, #45	; 0x2d
 8005162:	4276      	negs	r6, r6
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005168:	485e      	ldr	r0, [pc, #376]	; (80052e4 <_printf_i+0x244>)
 800516a:	230a      	movs	r3, #10
 800516c:	e019      	b.n	80051a2 <_printf_i+0x102>
 800516e:	680e      	ldr	r6, [r1, #0]
 8005170:	602b      	str	r3, [r5, #0]
 8005172:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005176:	bf18      	it	ne
 8005178:	b236      	sxthne	r6, r6
 800517a:	e7ef      	b.n	800515c <_printf_i+0xbc>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	6820      	ldr	r0, [r4, #0]
 8005180:	1d19      	adds	r1, r3, #4
 8005182:	6029      	str	r1, [r5, #0]
 8005184:	0601      	lsls	r1, r0, #24
 8005186:	d501      	bpl.n	800518c <_printf_i+0xec>
 8005188:	681e      	ldr	r6, [r3, #0]
 800518a:	e002      	b.n	8005192 <_printf_i+0xf2>
 800518c:	0646      	lsls	r6, r0, #25
 800518e:	d5fb      	bpl.n	8005188 <_printf_i+0xe8>
 8005190:	881e      	ldrh	r6, [r3, #0]
 8005192:	4854      	ldr	r0, [pc, #336]	; (80052e4 <_printf_i+0x244>)
 8005194:	2f6f      	cmp	r7, #111	; 0x6f
 8005196:	bf0c      	ite	eq
 8005198:	2308      	moveq	r3, #8
 800519a:	230a      	movne	r3, #10
 800519c:	2100      	movs	r1, #0
 800519e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051a2:	6865      	ldr	r5, [r4, #4]
 80051a4:	60a5      	str	r5, [r4, #8]
 80051a6:	2d00      	cmp	r5, #0
 80051a8:	bfa2      	ittt	ge
 80051aa:	6821      	ldrge	r1, [r4, #0]
 80051ac:	f021 0104 	bicge.w	r1, r1, #4
 80051b0:	6021      	strge	r1, [r4, #0]
 80051b2:	b90e      	cbnz	r6, 80051b8 <_printf_i+0x118>
 80051b4:	2d00      	cmp	r5, #0
 80051b6:	d04d      	beq.n	8005254 <_printf_i+0x1b4>
 80051b8:	4615      	mov	r5, r2
 80051ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80051be:	fb03 6711 	mls	r7, r3, r1, r6
 80051c2:	5dc7      	ldrb	r7, [r0, r7]
 80051c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051c8:	4637      	mov	r7, r6
 80051ca:	42bb      	cmp	r3, r7
 80051cc:	460e      	mov	r6, r1
 80051ce:	d9f4      	bls.n	80051ba <_printf_i+0x11a>
 80051d0:	2b08      	cmp	r3, #8
 80051d2:	d10b      	bne.n	80051ec <_printf_i+0x14c>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	07de      	lsls	r6, r3, #31
 80051d8:	d508      	bpl.n	80051ec <_printf_i+0x14c>
 80051da:	6923      	ldr	r3, [r4, #16]
 80051dc:	6861      	ldr	r1, [r4, #4]
 80051de:	4299      	cmp	r1, r3
 80051e0:	bfde      	ittt	le
 80051e2:	2330      	movle	r3, #48	; 0x30
 80051e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051ec:	1b52      	subs	r2, r2, r5
 80051ee:	6122      	str	r2, [r4, #16]
 80051f0:	f8cd a000 	str.w	sl, [sp]
 80051f4:	464b      	mov	r3, r9
 80051f6:	aa03      	add	r2, sp, #12
 80051f8:	4621      	mov	r1, r4
 80051fa:	4640      	mov	r0, r8
 80051fc:	f7ff fee2 	bl	8004fc4 <_printf_common>
 8005200:	3001      	adds	r0, #1
 8005202:	d14c      	bne.n	800529e <_printf_i+0x1fe>
 8005204:	f04f 30ff 	mov.w	r0, #4294967295
 8005208:	b004      	add	sp, #16
 800520a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520e:	4835      	ldr	r0, [pc, #212]	; (80052e4 <_printf_i+0x244>)
 8005210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005214:	6829      	ldr	r1, [r5, #0]
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	f851 6b04 	ldr.w	r6, [r1], #4
 800521c:	6029      	str	r1, [r5, #0]
 800521e:	061d      	lsls	r5, r3, #24
 8005220:	d514      	bpl.n	800524c <_printf_i+0x1ac>
 8005222:	07df      	lsls	r7, r3, #31
 8005224:	bf44      	itt	mi
 8005226:	f043 0320 	orrmi.w	r3, r3, #32
 800522a:	6023      	strmi	r3, [r4, #0]
 800522c:	b91e      	cbnz	r6, 8005236 <_printf_i+0x196>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	f023 0320 	bic.w	r3, r3, #32
 8005234:	6023      	str	r3, [r4, #0]
 8005236:	2310      	movs	r3, #16
 8005238:	e7b0      	b.n	800519c <_printf_i+0xfc>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6023      	str	r3, [r4, #0]
 8005242:	2378      	movs	r3, #120	; 0x78
 8005244:	4828      	ldr	r0, [pc, #160]	; (80052e8 <_printf_i+0x248>)
 8005246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800524a:	e7e3      	b.n	8005214 <_printf_i+0x174>
 800524c:	0659      	lsls	r1, r3, #25
 800524e:	bf48      	it	mi
 8005250:	b2b6      	uxthmi	r6, r6
 8005252:	e7e6      	b.n	8005222 <_printf_i+0x182>
 8005254:	4615      	mov	r5, r2
 8005256:	e7bb      	b.n	80051d0 <_printf_i+0x130>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	6826      	ldr	r6, [r4, #0]
 800525c:	6961      	ldr	r1, [r4, #20]
 800525e:	1d18      	adds	r0, r3, #4
 8005260:	6028      	str	r0, [r5, #0]
 8005262:	0635      	lsls	r5, r6, #24
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	d501      	bpl.n	800526c <_printf_i+0x1cc>
 8005268:	6019      	str	r1, [r3, #0]
 800526a:	e002      	b.n	8005272 <_printf_i+0x1d2>
 800526c:	0670      	lsls	r0, r6, #25
 800526e:	d5fb      	bpl.n	8005268 <_printf_i+0x1c8>
 8005270:	8019      	strh	r1, [r3, #0]
 8005272:	2300      	movs	r3, #0
 8005274:	6123      	str	r3, [r4, #16]
 8005276:	4615      	mov	r5, r2
 8005278:	e7ba      	b.n	80051f0 <_printf_i+0x150>
 800527a:	682b      	ldr	r3, [r5, #0]
 800527c:	1d1a      	adds	r2, r3, #4
 800527e:	602a      	str	r2, [r5, #0]
 8005280:	681d      	ldr	r5, [r3, #0]
 8005282:	6862      	ldr	r2, [r4, #4]
 8005284:	2100      	movs	r1, #0
 8005286:	4628      	mov	r0, r5
 8005288:	f7fa ffaa 	bl	80001e0 <memchr>
 800528c:	b108      	cbz	r0, 8005292 <_printf_i+0x1f2>
 800528e:	1b40      	subs	r0, r0, r5
 8005290:	6060      	str	r0, [r4, #4]
 8005292:	6863      	ldr	r3, [r4, #4]
 8005294:	6123      	str	r3, [r4, #16]
 8005296:	2300      	movs	r3, #0
 8005298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800529c:	e7a8      	b.n	80051f0 <_printf_i+0x150>
 800529e:	6923      	ldr	r3, [r4, #16]
 80052a0:	462a      	mov	r2, r5
 80052a2:	4649      	mov	r1, r9
 80052a4:	4640      	mov	r0, r8
 80052a6:	47d0      	blx	sl
 80052a8:	3001      	adds	r0, #1
 80052aa:	d0ab      	beq.n	8005204 <_printf_i+0x164>
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	079b      	lsls	r3, r3, #30
 80052b0:	d413      	bmi.n	80052da <_printf_i+0x23a>
 80052b2:	68e0      	ldr	r0, [r4, #12]
 80052b4:	9b03      	ldr	r3, [sp, #12]
 80052b6:	4298      	cmp	r0, r3
 80052b8:	bfb8      	it	lt
 80052ba:	4618      	movlt	r0, r3
 80052bc:	e7a4      	b.n	8005208 <_printf_i+0x168>
 80052be:	2301      	movs	r3, #1
 80052c0:	4632      	mov	r2, r6
 80052c2:	4649      	mov	r1, r9
 80052c4:	4640      	mov	r0, r8
 80052c6:	47d0      	blx	sl
 80052c8:	3001      	adds	r0, #1
 80052ca:	d09b      	beq.n	8005204 <_printf_i+0x164>
 80052cc:	3501      	adds	r5, #1
 80052ce:	68e3      	ldr	r3, [r4, #12]
 80052d0:	9903      	ldr	r1, [sp, #12]
 80052d2:	1a5b      	subs	r3, r3, r1
 80052d4:	42ab      	cmp	r3, r5
 80052d6:	dcf2      	bgt.n	80052be <_printf_i+0x21e>
 80052d8:	e7eb      	b.n	80052b2 <_printf_i+0x212>
 80052da:	2500      	movs	r5, #0
 80052dc:	f104 0619 	add.w	r6, r4, #25
 80052e0:	e7f5      	b.n	80052ce <_printf_i+0x22e>
 80052e2:	bf00      	nop
 80052e4:	080056ad 	.word	0x080056ad
 80052e8:	080056be 	.word	0x080056be

080052ec <_sbrk_r>:
 80052ec:	b538      	push	{r3, r4, r5, lr}
 80052ee:	4d06      	ldr	r5, [pc, #24]	; (8005308 <_sbrk_r+0x1c>)
 80052f0:	2300      	movs	r3, #0
 80052f2:	4604      	mov	r4, r0
 80052f4:	4608      	mov	r0, r1
 80052f6:	602b      	str	r3, [r5, #0]
 80052f8:	f7fb fc98 	bl	8000c2c <_sbrk>
 80052fc:	1c43      	adds	r3, r0, #1
 80052fe:	d102      	bne.n	8005306 <_sbrk_r+0x1a>
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	b103      	cbz	r3, 8005306 <_sbrk_r+0x1a>
 8005304:	6023      	str	r3, [r4, #0]
 8005306:	bd38      	pop	{r3, r4, r5, pc}
 8005308:	20000174 	.word	0x20000174

0800530c <__sread>:
 800530c:	b510      	push	{r4, lr}
 800530e:	460c      	mov	r4, r1
 8005310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005314:	f000 f8a0 	bl	8005458 <_read_r>
 8005318:	2800      	cmp	r0, #0
 800531a:	bfab      	itete	ge
 800531c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800531e:	89a3      	ldrhlt	r3, [r4, #12]
 8005320:	181b      	addge	r3, r3, r0
 8005322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005326:	bfac      	ite	ge
 8005328:	6563      	strge	r3, [r4, #84]	; 0x54
 800532a:	81a3      	strhlt	r3, [r4, #12]
 800532c:	bd10      	pop	{r4, pc}

0800532e <__swrite>:
 800532e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005332:	461f      	mov	r7, r3
 8005334:	898b      	ldrh	r3, [r1, #12]
 8005336:	05db      	lsls	r3, r3, #23
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	4616      	mov	r6, r2
 800533e:	d505      	bpl.n	800534c <__swrite+0x1e>
 8005340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005344:	2302      	movs	r3, #2
 8005346:	2200      	movs	r2, #0
 8005348:	f000 f868 	bl	800541c <_lseek_r>
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005356:	81a3      	strh	r3, [r4, #12]
 8005358:	4632      	mov	r2, r6
 800535a:	463b      	mov	r3, r7
 800535c:	4628      	mov	r0, r5
 800535e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005362:	f000 b817 	b.w	8005394 <_write_r>

08005366 <__sseek>:
 8005366:	b510      	push	{r4, lr}
 8005368:	460c      	mov	r4, r1
 800536a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536e:	f000 f855 	bl	800541c <_lseek_r>
 8005372:	1c43      	adds	r3, r0, #1
 8005374:	89a3      	ldrh	r3, [r4, #12]
 8005376:	bf15      	itete	ne
 8005378:	6560      	strne	r0, [r4, #84]	; 0x54
 800537a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800537e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005382:	81a3      	strheq	r3, [r4, #12]
 8005384:	bf18      	it	ne
 8005386:	81a3      	strhne	r3, [r4, #12]
 8005388:	bd10      	pop	{r4, pc}

0800538a <__sclose>:
 800538a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538e:	f000 b813 	b.w	80053b8 <_close_r>
	...

08005394 <_write_r>:
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4d07      	ldr	r5, [pc, #28]	; (80053b4 <_write_r+0x20>)
 8005398:	4604      	mov	r4, r0
 800539a:	4608      	mov	r0, r1
 800539c:	4611      	mov	r1, r2
 800539e:	2200      	movs	r2, #0
 80053a0:	602a      	str	r2, [r5, #0]
 80053a2:	461a      	mov	r2, r3
 80053a4:	f7fb fbf1 	bl	8000b8a <_write>
 80053a8:	1c43      	adds	r3, r0, #1
 80053aa:	d102      	bne.n	80053b2 <_write_r+0x1e>
 80053ac:	682b      	ldr	r3, [r5, #0]
 80053ae:	b103      	cbz	r3, 80053b2 <_write_r+0x1e>
 80053b0:	6023      	str	r3, [r4, #0]
 80053b2:	bd38      	pop	{r3, r4, r5, pc}
 80053b4:	20000174 	.word	0x20000174

080053b8 <_close_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	4d06      	ldr	r5, [pc, #24]	; (80053d4 <_close_r+0x1c>)
 80053bc:	2300      	movs	r3, #0
 80053be:	4604      	mov	r4, r0
 80053c0:	4608      	mov	r0, r1
 80053c2:	602b      	str	r3, [r5, #0]
 80053c4:	f7fb fbfd 	bl	8000bc2 <_close>
 80053c8:	1c43      	adds	r3, r0, #1
 80053ca:	d102      	bne.n	80053d2 <_close_r+0x1a>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	b103      	cbz	r3, 80053d2 <_close_r+0x1a>
 80053d0:	6023      	str	r3, [r4, #0]
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
 80053d4:	20000174 	.word	0x20000174

080053d8 <_fstat_r>:
 80053d8:	b538      	push	{r3, r4, r5, lr}
 80053da:	4d07      	ldr	r5, [pc, #28]	; (80053f8 <_fstat_r+0x20>)
 80053dc:	2300      	movs	r3, #0
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	602b      	str	r3, [r5, #0]
 80053e6:	f7fb fbf8 	bl	8000bda <_fstat>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	d102      	bne.n	80053f4 <_fstat_r+0x1c>
 80053ee:	682b      	ldr	r3, [r5, #0]
 80053f0:	b103      	cbz	r3, 80053f4 <_fstat_r+0x1c>
 80053f2:	6023      	str	r3, [r4, #0]
 80053f4:	bd38      	pop	{r3, r4, r5, pc}
 80053f6:	bf00      	nop
 80053f8:	20000174 	.word	0x20000174

080053fc <_isatty_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	; (8005418 <_isatty_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fb fbf7 	bl	8000bfa <_isatty>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_isatty_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_isatty_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	20000174 	.word	0x20000174

0800541c <_lseek_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d07      	ldr	r5, [pc, #28]	; (800543c <_lseek_r+0x20>)
 8005420:	4604      	mov	r4, r0
 8005422:	4608      	mov	r0, r1
 8005424:	4611      	mov	r1, r2
 8005426:	2200      	movs	r2, #0
 8005428:	602a      	str	r2, [r5, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	f7fb fbf0 	bl	8000c10 <_lseek>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d102      	bne.n	800543a <_lseek_r+0x1e>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	b103      	cbz	r3, 800543a <_lseek_r+0x1e>
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	20000174 	.word	0x20000174

08005440 <__malloc_lock>:
 8005440:	4801      	ldr	r0, [pc, #4]	; (8005448 <__malloc_lock+0x8>)
 8005442:	f7ff bb1d 	b.w	8004a80 <__retarget_lock_acquire_recursive>
 8005446:	bf00      	nop
 8005448:	20000168 	.word	0x20000168

0800544c <__malloc_unlock>:
 800544c:	4801      	ldr	r0, [pc, #4]	; (8005454 <__malloc_unlock+0x8>)
 800544e:	f7ff bb18 	b.w	8004a82 <__retarget_lock_release_recursive>
 8005452:	bf00      	nop
 8005454:	20000168 	.word	0x20000168

08005458 <_read_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d07      	ldr	r5, [pc, #28]	; (8005478 <_read_r+0x20>)
 800545c:	4604      	mov	r4, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fb fb72 	bl	8000b50 <_read>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_read_r+0x1e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_read_r+0x1e>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	20000174 	.word	0x20000174

0800547c <_init>:
 800547c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547e:	bf00      	nop
 8005480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005482:	bc08      	pop	{r3}
 8005484:	469e      	mov	lr, r3
 8005486:	4770      	bx	lr

08005488 <_fini>:
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	bf00      	nop
 800548c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548e:	bc08      	pop	{r3}
 8005490:	469e      	mov	lr, r3
 8005492:	4770      	bx	lr
