
IMU_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b4  08004ca0  08004ca0  00014ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e54  08004e54  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e54  08004e54  00014e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e5c  08004e5c  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e60  08004e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  2000007c  08004ee0  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004ee0  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002b61  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000794  00000000  00000000  00022c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a58  00000000  00000000  000233a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  00023df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008124  00000000  00000000  00024768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001c06  00000000  00000000  0002c88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002e492  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002c90  00000000  00000000  0002e4e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000007c 	.word	0x2000007c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c88 	.word	0x08004c88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000080 	.word	0x20000080
 8000104:	08004c88 	.word	0x08004c88

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	b08d      	sub	sp, #52	; 0x34
 80004c0:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c2:	f000 fd91 	bl	8000fe8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c6:	f000 faf7 	bl	8000ab8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ca:	f000 fbd3 	bl	8000c74 <MX_GPIO_Init>
	MX_I2C1_Init();
 80004ce:	f000 fb61 	bl	8000b94 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80004d2:	f000 fb9f 	bl	8000c14 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	bmi160dev.id = BMI160_I2C_ADDR;
 80004d6:	4bd1      	ldr	r3, [pc, #836]	; (800081c <main+0x360>)
 80004d8:	2268      	movs	r2, #104	; 0x68
 80004da:	705a      	strb	r2, [r3, #1]
	//bmi160dev.write = HAL_I2C_Mem_Write;

	// Process to initialize magnetometer to low power preset at 12.5Hz and enable magnetometer interface data mode
	// see also DS of BMX160 p.25
	// put MAG_IF into normal mode
	data_write = 0x19;
 80004dc:	4bd0      	ldr	r3, [pc, #832]	; (8000820 <main+0x364>)
 80004de:	2219      	movs	r2, #25
 80004e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x7E, memAddSize8,
 80004e2:	4bce      	ldr	r3, [pc, #824]	; (800081c <main+0x360>)
 80004e4:	785b      	ldrb	r3, [r3, #1]
 80004e6:	b29b      	uxth	r3, r3
 80004e8:	18db      	adds	r3, r3, r3
 80004ea:	b299      	uxth	r1, r3
 80004ec:	4bcd      	ldr	r3, [pc, #820]	; (8000824 <main+0x368>)
 80004ee:	881c      	ldrh	r4, [r3, #0]
 80004f0:	4bcd      	ldr	r3, [pc, #820]	; (8000828 <main+0x36c>)
 80004f2:	881a      	ldrh	r2, [r3, #0]
 80004f4:	4bcd      	ldr	r3, [pc, #820]	; (800082c <main+0x370>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	48cd      	ldr	r0, [pc, #820]	; (8000830 <main+0x374>)
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	9201      	str	r2, [sp, #4]
 80004fe:	4bc8      	ldr	r3, [pc, #800]	; (8000820 <main+0x364>)
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	0023      	movs	r3, r4
 8000504:	227e      	movs	r2, #126	; 0x7e
 8000506:	f001 f8c3 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	HAL_Delay(1);
 800050a:	2001      	movs	r0, #1
 800050c:	f000 fddc 	bl	80010c8 <HAL_Delay>

	// mag_manual_en= 0b1, mag_if setup mode mag_offset<3:0>= 0b0000, maximum offset, recommend for
	// BSX library
	// enable magnetometer register access on MAG_IF[1] (read operations) or MAG_IF[2] (write access)
	// setup mode ON, data mode OFF
	data_write = 0x80;
 8000510:	4bc3      	ldr	r3, [pc, #780]	; (8000820 <main+0x364>)
 8000512:	2280      	movs	r2, #128	; 0x80
 8000514:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4C, memAddSize8,
 8000516:	4bc1      	ldr	r3, [pc, #772]	; (800081c <main+0x360>)
 8000518:	785b      	ldrb	r3, [r3, #1]
 800051a:	b29b      	uxth	r3, r3
 800051c:	18db      	adds	r3, r3, r3
 800051e:	b299      	uxth	r1, r3
 8000520:	4bc0      	ldr	r3, [pc, #768]	; (8000824 <main+0x368>)
 8000522:	881c      	ldrh	r4, [r3, #0]
 8000524:	4bc0      	ldr	r3, [pc, #768]	; (8000828 <main+0x36c>)
 8000526:	881a      	ldrh	r2, [r3, #0]
 8000528:	4bc0      	ldr	r3, [pc, #768]	; (800082c <main+0x370>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	48c0      	ldr	r0, [pc, #768]	; (8000830 <main+0x374>)
 800052e:	9302      	str	r3, [sp, #8]
 8000530:	9201      	str	r2, [sp, #4]
 8000532:	4bbb      	ldr	r3, [pc, #748]	; (8000820 <main+0x364>)
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	0023      	movs	r3, r4
 8000538:	224c      	movs	r2, #76	; 0x4c
 800053a:	f001 f8a9 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);

	// indirect write 0x01 to MAG register 0x4B
	data_write = 0x01;
 800053e:	4bb8      	ldr	r3, [pc, #736]	; (8000820 <main+0x364>)
 8000540:	2201      	movs	r2, #1
 8000542:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4F, memAddSize8,
 8000544:	4bb5      	ldr	r3, [pc, #724]	; (800081c <main+0x360>)
 8000546:	785b      	ldrb	r3, [r3, #1]
 8000548:	b29b      	uxth	r3, r3
 800054a:	18db      	adds	r3, r3, r3
 800054c:	b299      	uxth	r1, r3
 800054e:	4bb5      	ldr	r3, [pc, #724]	; (8000824 <main+0x368>)
 8000550:	881c      	ldrh	r4, [r3, #0]
 8000552:	4bb5      	ldr	r3, [pc, #724]	; (8000828 <main+0x36c>)
 8000554:	881a      	ldrh	r2, [r3, #0]
 8000556:	4bb5      	ldr	r3, [pc, #724]	; (800082c <main+0x370>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	48b5      	ldr	r0, [pc, #724]	; (8000830 <main+0x374>)
 800055c:	9302      	str	r3, [sp, #8]
 800055e:	9201      	str	r2, [sp, #4]
 8000560:	4baf      	ldr	r3, [pc, #700]	; (8000820 <main+0x364>)
 8000562:	9300      	str	r3, [sp, #0]
 8000564:	0023      	movs	r3, r4
 8000566:	224f      	movs	r2, #79	; 0x4f
 8000568:	f001 f892 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	data_write = 0x4B;
 800056c:	4bac      	ldr	r3, [pc, #688]	; (8000820 <main+0x364>)
 800056e:	224b      	movs	r2, #75	; 0x4b
 8000570:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4E, memAddSize8,
 8000572:	4baa      	ldr	r3, [pc, #680]	; (800081c <main+0x360>)
 8000574:	785b      	ldrb	r3, [r3, #1]
 8000576:	b29b      	uxth	r3, r3
 8000578:	18db      	adds	r3, r3, r3
 800057a:	b299      	uxth	r1, r3
 800057c:	4ba9      	ldr	r3, [pc, #676]	; (8000824 <main+0x368>)
 800057e:	881c      	ldrh	r4, [r3, #0]
 8000580:	4ba9      	ldr	r3, [pc, #676]	; (8000828 <main+0x36c>)
 8000582:	881a      	ldrh	r2, [r3, #0]
 8000584:	4ba9      	ldr	r3, [pc, #676]	; (800082c <main+0x370>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	48a9      	ldr	r0, [pc, #676]	; (8000830 <main+0x374>)
 800058a:	9302      	str	r3, [sp, #8]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	4ba4      	ldr	r3, [pc, #656]	; (8000820 <main+0x364>)
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	0023      	movs	r3, r4
 8000594:	224e      	movs	r2, #78	; 0x4e
 8000596:	f001 f87b 	bl	8001690 <HAL_I2C_Mem_Write>
	 * 			0x04 for regular preset
	 * 			0x07 for enhanced regular preset
	 * 			0x17 for high accuracy preset
	 to MAG register 0x51
	 */
	data_write = 0x01;
 800059a:	4ba1      	ldr	r3, [pc, #644]	; (8000820 <main+0x364>)
 800059c:	2201      	movs	r2, #1
 800059e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4F, memAddSize8,
 80005a0:	4b9e      	ldr	r3, [pc, #632]	; (800081c <main+0x360>)
 80005a2:	785b      	ldrb	r3, [r3, #1]
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	18db      	adds	r3, r3, r3
 80005a8:	b299      	uxth	r1, r3
 80005aa:	4b9e      	ldr	r3, [pc, #632]	; (8000824 <main+0x368>)
 80005ac:	881c      	ldrh	r4, [r3, #0]
 80005ae:	4b9e      	ldr	r3, [pc, #632]	; (8000828 <main+0x36c>)
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	4b9e      	ldr	r3, [pc, #632]	; (800082c <main+0x370>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	489e      	ldr	r0, [pc, #632]	; (8000830 <main+0x374>)
 80005b8:	9302      	str	r3, [sp, #8]
 80005ba:	9201      	str	r2, [sp, #4]
 80005bc:	4b98      	ldr	r3, [pc, #608]	; (8000820 <main+0x364>)
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	0023      	movs	r3, r4
 80005c2:	224f      	movs	r2, #79	; 0x4f
 80005c4:	f001 f864 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	data_write = 0x51;
 80005c8:	4b95      	ldr	r3, [pc, #596]	; (8000820 <main+0x364>)
 80005ca:	2251      	movs	r2, #81	; 0x51
 80005cc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4E, memAddSize8,
 80005ce:	4b93      	ldr	r3, [pc, #588]	; (800081c <main+0x360>)
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	18db      	adds	r3, r3, r3
 80005d6:	b299      	uxth	r1, r3
 80005d8:	4b92      	ldr	r3, [pc, #584]	; (8000824 <main+0x368>)
 80005da:	881c      	ldrh	r4, [r3, #0]
 80005dc:	4b92      	ldr	r3, [pc, #584]	; (8000828 <main+0x36c>)
 80005de:	881a      	ldrh	r2, [r3, #0]
 80005e0:	4b92      	ldr	r3, [pc, #584]	; (800082c <main+0x370>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4892      	ldr	r0, [pc, #584]	; (8000830 <main+0x374>)
 80005e6:	9302      	str	r3, [sp, #8]
 80005e8:	9201      	str	r2, [sp, #4]
 80005ea:	4b8d      	ldr	r3, [pc, #564]	; (8000820 <main+0x364>)
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	0023      	movs	r3, r4
 80005f0:	224e      	movs	r2, #78	; 0x4e
 80005f2:	f001 f84d 	bl	8001690 <HAL_I2C_Mem_Write>
	 * 			0x0E for regular preset
	 * 			0x1A for enhanced regular preset
	 * 			0x52 for high accuracy preset
	 to MAG register 0x52
	 */
	data_write = 0x0E;
 80005f6:	4b8a      	ldr	r3, [pc, #552]	; (8000820 <main+0x364>)
 80005f8:	220e      	movs	r2, #14
 80005fa:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4F, memAddSize8,
 80005fc:	4b87      	ldr	r3, [pc, #540]	; (800081c <main+0x360>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
 8000600:	b29b      	uxth	r3, r3
 8000602:	18db      	adds	r3, r3, r3
 8000604:	b299      	uxth	r1, r3
 8000606:	4b87      	ldr	r3, [pc, #540]	; (8000824 <main+0x368>)
 8000608:	881c      	ldrh	r4, [r3, #0]
 800060a:	4b87      	ldr	r3, [pc, #540]	; (8000828 <main+0x36c>)
 800060c:	881a      	ldrh	r2, [r3, #0]
 800060e:	4b87      	ldr	r3, [pc, #540]	; (800082c <main+0x370>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4887      	ldr	r0, [pc, #540]	; (8000830 <main+0x374>)
 8000614:	9302      	str	r3, [sp, #8]
 8000616:	9201      	str	r2, [sp, #4]
 8000618:	4b81      	ldr	r3, [pc, #516]	; (8000820 <main+0x364>)
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	0023      	movs	r3, r4
 800061e:	224f      	movs	r2, #79	; 0x4f
 8000620:	f001 f836 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	data_write = 0x52;
 8000624:	4b7e      	ldr	r3, [pc, #504]	; (8000820 <main+0x364>)
 8000626:	2252      	movs	r2, #82	; 0x52
 8000628:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4E, memAddSize8,
 800062a:	4b7c      	ldr	r3, [pc, #496]	; (800081c <main+0x360>)
 800062c:	785b      	ldrb	r3, [r3, #1]
 800062e:	b29b      	uxth	r3, r3
 8000630:	18db      	adds	r3, r3, r3
 8000632:	b299      	uxth	r1, r3
 8000634:	4b7b      	ldr	r3, [pc, #492]	; (8000824 <main+0x368>)
 8000636:	881c      	ldrh	r4, [r3, #0]
 8000638:	4b7b      	ldr	r3, [pc, #492]	; (8000828 <main+0x36c>)
 800063a:	881a      	ldrh	r2, [r3, #0]
 800063c:	4b7b      	ldr	r3, [pc, #492]	; (800082c <main+0x370>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	487b      	ldr	r0, [pc, #492]	; (8000830 <main+0x374>)
 8000642:	9302      	str	r3, [sp, #8]
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	4b76      	ldr	r3, [pc, #472]	; (8000820 <main+0x364>)
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	0023      	movs	r3, r4
 800064c:	224e      	movs	r2, #78	; 0x4e
 800064e:	f001 f81f 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);

	// Prepare MAG_IF[1-3] for mag_if data mode
	data_write = 0x02;
 8000652:	4b73      	ldr	r3, [pc, #460]	; (8000820 <main+0x364>)
 8000654:	2202      	movs	r2, #2
 8000656:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4F, memAddSize8,
 8000658:	4b70      	ldr	r3, [pc, #448]	; (800081c <main+0x360>)
 800065a:	785b      	ldrb	r3, [r3, #1]
 800065c:	b29b      	uxth	r3, r3
 800065e:	18db      	adds	r3, r3, r3
 8000660:	b299      	uxth	r1, r3
 8000662:	4b70      	ldr	r3, [pc, #448]	; (8000824 <main+0x368>)
 8000664:	881c      	ldrh	r4, [r3, #0]
 8000666:	4b70      	ldr	r3, [pc, #448]	; (8000828 <main+0x36c>)
 8000668:	881a      	ldrh	r2, [r3, #0]
 800066a:	4b70      	ldr	r3, [pc, #448]	; (800082c <main+0x370>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4870      	ldr	r0, [pc, #448]	; (8000830 <main+0x374>)
 8000670:	9302      	str	r3, [sp, #8]
 8000672:	9201      	str	r2, [sp, #4]
 8000674:	4b6a      	ldr	r3, [pc, #424]	; (8000820 <main+0x364>)
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	0023      	movs	r3, r4
 800067a:	224f      	movs	r2, #79	; 0x4f
 800067c:	f001 f808 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	data_write = 0x4C;
 8000680:	4b67      	ldr	r3, [pc, #412]	; (8000820 <main+0x364>)
 8000682:	224c      	movs	r2, #76	; 0x4c
 8000684:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4E, memAddSize8,
 8000686:	4b65      	ldr	r3, [pc, #404]	; (800081c <main+0x360>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	b29b      	uxth	r3, r3
 800068c:	18db      	adds	r3, r3, r3
 800068e:	b299      	uxth	r1, r3
 8000690:	4b64      	ldr	r3, [pc, #400]	; (8000824 <main+0x368>)
 8000692:	881c      	ldrh	r4, [r3, #0]
 8000694:	4b64      	ldr	r3, [pc, #400]	; (8000828 <main+0x36c>)
 8000696:	881a      	ldrh	r2, [r3, #0]
 8000698:	4b64      	ldr	r3, [pc, #400]	; (800082c <main+0x370>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4864      	ldr	r0, [pc, #400]	; (8000830 <main+0x374>)
 800069e:	9302      	str	r3, [sp, #8]
 80006a0:	9201      	str	r2, [sp, #4]
 80006a2:	4b5f      	ldr	r3, [pc, #380]	; (8000820 <main+0x364>)
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	0023      	movs	r3, r4
 80006a8:	224e      	movs	r2, #78	; 0x4e
 80006aa:	f000 fff1 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	data_write = 0x42;
 80006ae:	4b5c      	ldr	r3, [pc, #368]	; (8000820 <main+0x364>)
 80006b0:	2242      	movs	r2, #66	; 0x42
 80006b2:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4D, memAddSize8,
 80006b4:	4b59      	ldr	r3, [pc, #356]	; (800081c <main+0x360>)
 80006b6:	785b      	ldrb	r3, [r3, #1]
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	18db      	adds	r3, r3, r3
 80006bc:	b299      	uxth	r1, r3
 80006be:	4b59      	ldr	r3, [pc, #356]	; (8000824 <main+0x368>)
 80006c0:	881c      	ldrh	r4, [r3, #0]
 80006c2:	4b59      	ldr	r3, [pc, #356]	; (8000828 <main+0x36c>)
 80006c4:	881a      	ldrh	r2, [r3, #0]
 80006c6:	4b59      	ldr	r3, [pc, #356]	; (800082c <main+0x370>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4859      	ldr	r0, [pc, #356]	; (8000830 <main+0x374>)
 80006cc:	9302      	str	r3, [sp, #8]
 80006ce:	9201      	str	r2, [sp, #4]
 80006d0:	4b53      	ldr	r3, [pc, #332]	; (8000820 <main+0x364>)
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	0023      	movs	r3, r4
 80006d6:	224d      	movs	r2, #77	; 0x4d
 80006d8:	f000 ffda 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);

	// mag_odr<3:0>= 0b0101, set ODR to 12.5Hz (50/(2^7-val(mag_odr<3:0>))Hz
	data_write = 0x05;
 80006dc:	4b50      	ldr	r3, [pc, #320]	; (8000820 <main+0x364>)
 80006de:	2205      	movs	r2, #5
 80006e0:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x44, memAddSize8,
 80006e2:	4b4e      	ldr	r3, [pc, #312]	; (800081c <main+0x360>)
 80006e4:	785b      	ldrb	r3, [r3, #1]
 80006e6:	b29b      	uxth	r3, r3
 80006e8:	18db      	adds	r3, r3, r3
 80006ea:	b299      	uxth	r1, r3
 80006ec:	4b4d      	ldr	r3, [pc, #308]	; (8000824 <main+0x368>)
 80006ee:	881c      	ldrh	r4, [r3, #0]
 80006f0:	4b4d      	ldr	r3, [pc, #308]	; (8000828 <main+0x36c>)
 80006f2:	881a      	ldrh	r2, [r3, #0]
 80006f4:	4b4d      	ldr	r3, [pc, #308]	; (800082c <main+0x370>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	484d      	ldr	r0, [pc, #308]	; (8000830 <main+0x374>)
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	9201      	str	r2, [sp, #4]
 80006fe:	4b48      	ldr	r3, [pc, #288]	; (8000820 <main+0x364>)
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	0023      	movs	r3, r4
 8000704:	2244      	movs	r2, #68	; 0x44
 8000706:	f000 ffc3 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);

	// mag_manual_en= 0b0, mag_if data mode mag_offset<3:0>= 0b0000, maximum offset, recommend for BSX library
	data_write = 0x00;
 800070a:	4b45      	ldr	r3, [pc, #276]	; (8000820 <main+0x364>)
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x4C, memAddSize8,
 8000710:	4b42      	ldr	r3, [pc, #264]	; (800081c <main+0x360>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	b29b      	uxth	r3, r3
 8000716:	18db      	adds	r3, r3, r3
 8000718:	b299      	uxth	r1, r3
 800071a:	4b42      	ldr	r3, [pc, #264]	; (8000824 <main+0x368>)
 800071c:	881c      	ldrh	r4, [r3, #0]
 800071e:	4b42      	ldr	r3, [pc, #264]	; (8000828 <main+0x36c>)
 8000720:	881a      	ldrh	r2, [r3, #0]
 8000722:	4b42      	ldr	r3, [pc, #264]	; (800082c <main+0x370>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4842      	ldr	r0, [pc, #264]	; (8000830 <main+0x374>)
 8000728:	9302      	str	r3, [sp, #8]
 800072a:	9201      	str	r2, [sp, #4]
 800072c:	4b3c      	ldr	r3, [pc, #240]	; (8000820 <main+0x364>)
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	0023      	movs	r3, r4
 8000732:	224c      	movs	r2, #76	; 0x4c
 8000734:	f000 ffac 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);

	// put MAG_IF into low power mode
	data_write = 0x1A;
 8000738:	4b39      	ldr	r3, [pc, #228]	; (8000820 <main+0x364>)
 800073a:	221a      	movs	r2, #26
 800073c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x7E, memAddSize8,
 800073e:	4b37      	ldr	r3, [pc, #220]	; (800081c <main+0x360>)
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	b29b      	uxth	r3, r3
 8000744:	18db      	adds	r3, r3, r3
 8000746:	b299      	uxth	r1, r3
 8000748:	4b36      	ldr	r3, [pc, #216]	; (8000824 <main+0x368>)
 800074a:	881c      	ldrh	r4, [r3, #0]
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <main+0x36c>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b36      	ldr	r3, [pc, #216]	; (800082c <main+0x370>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4836      	ldr	r0, [pc, #216]	; (8000830 <main+0x374>)
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	9201      	str	r2, [sp, #4]
 800075a:	4b31      	ldr	r3, [pc, #196]	; (8000820 <main+0x364>)
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	0023      	movs	r3, r4
 8000760:	227e      	movs	r2, #126	; 0x7e
 8000762:	f000 ff95 	bl	8001690 <HAL_I2C_Mem_Write>
			&data_write, size, timeout);
	// optional: put MAG_IF into normal power mode
	// data_write=0x19;
	//		HAL_I2C_Mem_Write(&hi2c1, (bmi160dev.id << 1), 0x7E, memAddSize8, &data_write,
	//			size, timeout);
	HAL_Delay(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fcae 	bl	80010c8 <HAL_Delay>
	while (1) {
		uint8_t data;
		uint8_t dev_ID;
		uint16_t status;

		if (HAL_I2C_IsDeviceReady(&hi2c1, (bmi160dev.id << 1), trials, timeout)
 800076c:	4b2b      	ldr	r3, [pc, #172]	; (800081c <main+0x360>)
 800076e:	785b      	ldrb	r3, [r3, #1]
 8000770:	b29b      	uxth	r3, r3
 8000772:	18db      	adds	r3, r3, r3
 8000774:	b299      	uxth	r1, r3
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <main+0x378>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	4b2c      	ldr	r3, [pc, #176]	; (800082c <main+0x370>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	482c      	ldr	r0, [pc, #176]	; (8000830 <main+0x374>)
 8000780:	f001 f9e8 	bl	8001b54 <HAL_I2C_IsDeviceReady>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d003      	beq.n	8000790 <main+0x2d4>
				!= HAL_OK) {
			printf("\nDevice not ready\r");
 8000788:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <main+0x37c>)
 800078a:	0018      	movs	r0, r3
 800078c:	f003 faa4 	bl	8003cd8 <iprintf>
		};
		if (HAL_I2C_IsDeviceReady(&hi2c1, (bmi160dev.id << 1), trials, timeout)
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <main+0x360>)
 8000792:	785b      	ldrb	r3, [r3, #1]
 8000794:	b29b      	uxth	r3, r3
 8000796:	18db      	adds	r3, r3, r3
 8000798:	b299      	uxth	r1, r3
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <main+0x378>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b23      	ldr	r3, [pc, #140]	; (800082c <main+0x370>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4823      	ldr	r0, [pc, #140]	; (8000830 <main+0x374>)
 80007a4:	f001 f9d6 	bl	8001b54 <HAL_I2C_IsDeviceReady>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d103      	bne.n	80007b4 <main+0x2f8>
				== HAL_OK) {
			printf("\nDevice ready\r");
 80007ac:	4b23      	ldr	r3, [pc, #140]	; (800083c <main+0x380>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f003 fa92 	bl	8003cd8 <iprintf>
		};

		status = HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1),
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <main+0x360>)
 80007b6:	785b      	ldrb	r3, [r3, #1]
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	18db      	adds	r3, r3, r3
 80007bc:	b299      	uxth	r1, r3
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <main+0x368>)
 80007c0:	881c      	ldrh	r4, [r3, #0]
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <main+0x36c>)
 80007c4:	881a      	ldrh	r2, [r3, #0]
 80007c6:	4b19      	ldr	r3, [pc, #100]	; (800082c <main+0x370>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4819      	ldr	r0, [pc, #100]	; (8000830 <main+0x374>)
 80007cc:	9302      	str	r3, [sp, #8]
 80007ce:	9201      	str	r2, [sp, #4]
 80007d0:	2313      	movs	r3, #19
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	0023      	movs	r3, r4
 80007d8:	2200      	movs	r2, #0
 80007da:	f001 f887 	bl	80018ec <HAL_I2C_Mem_Read>
 80007de:	0003      	movs	r3, r0
 80007e0:	001a      	movs	r2, r3
 80007e2:	211e      	movs	r1, #30
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	801a      	strh	r2, [r3, #0]
		BMI160_CHIP_ID_ADDR, memAddSize8, &data, size, timeout);

		if (status == HAL_OK) {
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d103      	bne.n	80007f8 <main+0x33c>
			printf("\nI2C ok\r");
 80007f0:	4b13      	ldr	r3, [pc, #76]	; (8000840 <main+0x384>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 fa70 	bl	8003cd8 <iprintf>
		};
		if (status != HAL_OK) {
 80007f8:	231e      	movs	r3, #30
 80007fa:	18fb      	adds	r3, r7, r3
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d024      	beq.n	800084c <main+0x390>
			printf("\nI2C read error\r");
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <main+0x388>)
 8000804:	0018      	movs	r0, r3
 8000806:	f003 fa67 	bl	8003cd8 <iprintf>
			if (hi2c1.ErrorCode == HAL_I2C_ERROR_TIMEOUT) {
 800080a:	4b09      	ldr	r3, [pc, #36]	; (8000830 <main+0x374>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	2b20      	cmp	r3, #32
 8000810:	d129      	bne.n	8000866 <main+0x3aa>
				printf(" - HAL_I2C_ERROR_TIMEOUT\r"); // HAL_I2C_ERROR_TIMEOUT
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <main+0x38c>)
 8000814:	0018      	movs	r0, r3
 8000816:	f003 fa5f 	bl	8003cd8 <iprintf>
 800081a:	e024      	b.n	8000866 <main+0x3aa>
 800081c:	20000168 	.word	0x20000168
 8000820:	20000194 	.word	0x20000194
 8000824:	20000002 	.word	0x20000002
 8000828:	20000000 	.word	0x20000000
 800082c:	20000008 	.word	0x20000008
 8000830:	20000098 	.word	0x20000098
 8000834:	20000004 	.word	0x20000004
 8000838:	08004ca0 	.word	0x08004ca0
 800083c:	08004cb4 	.word	0x08004cb4
 8000840:	08004cc4 	.word	0x08004cc4
 8000844:	08004cd0 	.word	0x08004cd0
 8000848:	08004ce4 	.word	0x08004ce4
			}

		} else {
			dev_ID = data;
 800084c:	211d      	movs	r1, #29
 800084e:	187b      	adds	r3, r7, r1
 8000850:	2213      	movs	r2, #19
 8000852:	18ba      	adds	r2, r7, r2
 8000854:	7812      	ldrb	r2, [r2, #0]
 8000856:	701a      	strb	r2, [r3, #0]
			printf("\nDevice-ID=%X\r", dev_ID);
 8000858:	187b      	adds	r3, r7, r1
 800085a:	781a      	ldrb	r2, [r3, #0]
 800085c:	4b8e      	ldr	r3, [pc, #568]	; (8000a98 <main+0x5dc>)
 800085e:	0011      	movs	r1, r2
 8000860:	0018      	movs	r0, r3
 8000862:	f003 fa39 	bl	8003cd8 <iprintf>
		};
		HAL_Delay(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f000 fc2e 	bl	80010c8 <HAL_Delay>

		// read temperature data:
		uint16_t sens_temperature;
		uint8_t data_read[2] = { 0, 0 };
 800086c:	2510      	movs	r5, #16
 800086e:	197b      	adds	r3, r7, r5
 8000870:	2200      	movs	r2, #0
 8000872:	801a      	strh	r2, [r3, #0]
		HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x20, memAddSize8,
 8000874:	4b89      	ldr	r3, [pc, #548]	; (8000a9c <main+0x5e0>)
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	b29b      	uxth	r3, r3
 800087a:	18db      	adds	r3, r3, r3
 800087c:	b299      	uxth	r1, r3
 800087e:	4b88      	ldr	r3, [pc, #544]	; (8000aa0 <main+0x5e4>)
 8000880:	881c      	ldrh	r4, [r3, #0]
 8000882:	4b88      	ldr	r3, [pc, #544]	; (8000aa4 <main+0x5e8>)
 8000884:	881a      	ldrh	r2, [r3, #0]
 8000886:	4b88      	ldr	r3, [pc, #544]	; (8000aa8 <main+0x5ec>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4888      	ldr	r0, [pc, #544]	; (8000aac <main+0x5f0>)
 800088c:	9302      	str	r3, [sp, #8]
 800088e:	9201      	str	r2, [sp, #4]
 8000890:	197b      	adds	r3, r7, r5
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	0023      	movs	r3, r4
 8000896:	2220      	movs	r2, #32
 8000898:	f001 f828 	bl	80018ec <HAL_I2C_Mem_Read>
				&data_read[0], size, timeout);
		HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x21, memAddSize8,
 800089c:	4b7f      	ldr	r3, [pc, #508]	; (8000a9c <main+0x5e0>)
 800089e:	785b      	ldrb	r3, [r3, #1]
 80008a0:	b29b      	uxth	r3, r3
 80008a2:	18db      	adds	r3, r3, r3
 80008a4:	b299      	uxth	r1, r3
 80008a6:	4b7e      	ldr	r3, [pc, #504]	; (8000aa0 <main+0x5e4>)
 80008a8:	881c      	ldrh	r4, [r3, #0]
 80008aa:	4b7e      	ldr	r3, [pc, #504]	; (8000aa4 <main+0x5e8>)
 80008ac:	881a      	ldrh	r2, [r3, #0]
 80008ae:	4b7e      	ldr	r3, [pc, #504]	; (8000aa8 <main+0x5ec>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	487e      	ldr	r0, [pc, #504]	; (8000aac <main+0x5f0>)
 80008b4:	9302      	str	r3, [sp, #8]
 80008b6:	9201      	str	r2, [sp, #4]
 80008b8:	197b      	adds	r3, r7, r5
 80008ba:	3301      	adds	r3, #1
 80008bc:	9300      	str	r3, [sp, #0]
 80008be:	0023      	movs	r3, r4
 80008c0:	2221      	movs	r2, #33	; 0x21
 80008c2:	f001 f813 	bl	80018ec <HAL_I2C_Mem_Read>
				&data_read[1], size, timeout);
		sens_temperature = (data_read[1] << 8) | (data_read[0]);
 80008c6:	197b      	adds	r3, r7, r5
 80008c8:	785b      	ldrb	r3, [r3, #1]
 80008ca:	021b      	lsls	r3, r3, #8
 80008cc:	b21a      	sxth	r2, r3
 80008ce:	197b      	adds	r3, r7, r5
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b21b      	sxth	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b21a      	sxth	r2, r3
 80008d8:	211a      	movs	r1, #26
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	801a      	strh	r2, [r3, #0]
		printf("\nSensortemperatur: 0x%04X\r", sens_temperature);
 80008de:	187b      	adds	r3, r7, r1
 80008e0:	881a      	ldrh	r2, [r3, #0]
 80008e2:	4b73      	ldr	r3, [pc, #460]	; (8000ab0 <main+0x5f4>)
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f003 f9f6 	bl	8003cd8 <iprintf>

		// read magnetometer data:
		uint8_t reg_status;
		uint8_t mag_x[2] = { 0, 0 };
 80008ec:	250c      	movs	r5, #12
 80008ee:	197b      	adds	r3, r7, r5
 80008f0:	2200      	movs	r2, #0
 80008f2:	801a      	strh	r2, [r3, #0]
		uint8_t mag_y[2] = { 0, 0 };
 80008f4:	2608      	movs	r6, #8
 80008f6:	19bb      	adds	r3, r7, r6
 80008f8:	2200      	movs	r2, #0
 80008fa:	801a      	strh	r2, [r3, #0]
		uint8_t mag_z[2] = { 0, 0 };
 80008fc:	1d3b      	adds	r3, r7, #4
 80008fe:	2200      	movs	r2, #0
 8000900:	801a      	strh	r2, [r3, #0]
		uint16_t mag_x_data;
		uint16_t mag_y_data;
		uint16_t mag_z_data;
		HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x1B, memAddSize8,
 8000902:	4b66      	ldr	r3, [pc, #408]	; (8000a9c <main+0x5e0>)
 8000904:	785b      	ldrb	r3, [r3, #1]
 8000906:	b29b      	uxth	r3, r3
 8000908:	18db      	adds	r3, r3, r3
 800090a:	b299      	uxth	r1, r3
 800090c:	4b64      	ldr	r3, [pc, #400]	; (8000aa0 <main+0x5e4>)
 800090e:	881c      	ldrh	r4, [r3, #0]
 8000910:	4b64      	ldr	r3, [pc, #400]	; (8000aa4 <main+0x5e8>)
 8000912:	881a      	ldrh	r2, [r3, #0]
 8000914:	4b64      	ldr	r3, [pc, #400]	; (8000aa8 <main+0x5ec>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4864      	ldr	r0, [pc, #400]	; (8000aac <main+0x5f0>)
 800091a:	9302      	str	r3, [sp, #8]
 800091c:	9201      	str	r2, [sp, #4]
 800091e:	230f      	movs	r3, #15
 8000920:	18fb      	adds	r3, r7, r3
 8000922:	9300      	str	r3, [sp, #0]
 8000924:	0023      	movs	r3, r4
 8000926:	221b      	movs	r2, #27
 8000928:	f000 ffe0 	bl	80018ec <HAL_I2C_Mem_Read>
				&reg_status, size, timeout);
		if (reg_status & (0b00100000)) {
 800092c:	230f      	movs	r3, #15
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	001a      	movs	r2, r3
 8000934:	2320      	movs	r3, #32
 8000936:	4013      	ands	r3, r2
 8000938:	d100      	bne.n	800093c <main+0x480>
 800093a:	e0a7      	b.n	8000a8c <main+0x5d0>
			// read each magnetometer registers (2 per channel)
			HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x04, memAddSize8,
 800093c:	4b57      	ldr	r3, [pc, #348]	; (8000a9c <main+0x5e0>)
 800093e:	785b      	ldrb	r3, [r3, #1]
 8000940:	b29b      	uxth	r3, r3
 8000942:	18db      	adds	r3, r3, r3
 8000944:	b299      	uxth	r1, r3
 8000946:	4b56      	ldr	r3, [pc, #344]	; (8000aa0 <main+0x5e4>)
 8000948:	881c      	ldrh	r4, [r3, #0]
 800094a:	4b56      	ldr	r3, [pc, #344]	; (8000aa4 <main+0x5e8>)
 800094c:	881a      	ldrh	r2, [r3, #0]
 800094e:	4b56      	ldr	r3, [pc, #344]	; (8000aa8 <main+0x5ec>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4856      	ldr	r0, [pc, #344]	; (8000aac <main+0x5f0>)
 8000954:	9302      	str	r3, [sp, #8]
 8000956:	9201      	str	r2, [sp, #4]
 8000958:	197b      	adds	r3, r7, r5
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	0023      	movs	r3, r4
 800095e:	2204      	movs	r2, #4
 8000960:	f000 ffc4 	bl	80018ec <HAL_I2C_Mem_Read>
					&mag_x[0], size, timeout);
			HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x05, memAddSize8,
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <main+0x5e0>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	b29b      	uxth	r3, r3
 800096a:	18db      	adds	r3, r3, r3
 800096c:	b299      	uxth	r1, r3
 800096e:	4b4c      	ldr	r3, [pc, #304]	; (8000aa0 <main+0x5e4>)
 8000970:	881c      	ldrh	r4, [r3, #0]
 8000972:	4b4c      	ldr	r3, [pc, #304]	; (8000aa4 <main+0x5e8>)
 8000974:	881a      	ldrh	r2, [r3, #0]
 8000976:	4b4c      	ldr	r3, [pc, #304]	; (8000aa8 <main+0x5ec>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	484c      	ldr	r0, [pc, #304]	; (8000aac <main+0x5f0>)
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	9201      	str	r2, [sp, #4]
 8000980:	197b      	adds	r3, r7, r5
 8000982:	3301      	adds	r3, #1
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	0023      	movs	r3, r4
 8000988:	2205      	movs	r2, #5
 800098a:	f000 ffaf 	bl	80018ec <HAL_I2C_Mem_Read>
					&mag_x[1], size, timeout);
			HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x06, memAddSize8,
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <main+0x5e0>)
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	b29b      	uxth	r3, r3
 8000994:	18db      	adds	r3, r3, r3
 8000996:	b299      	uxth	r1, r3
 8000998:	4b41      	ldr	r3, [pc, #260]	; (8000aa0 <main+0x5e4>)
 800099a:	881c      	ldrh	r4, [r3, #0]
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <main+0x5e8>)
 800099e:	881a      	ldrh	r2, [r3, #0]
 80009a0:	4b41      	ldr	r3, [pc, #260]	; (8000aa8 <main+0x5ec>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4841      	ldr	r0, [pc, #260]	; (8000aac <main+0x5f0>)
 80009a6:	9302      	str	r3, [sp, #8]
 80009a8:	9201      	str	r2, [sp, #4]
 80009aa:	19bb      	adds	r3, r7, r6
 80009ac:	9300      	str	r3, [sp, #0]
 80009ae:	0023      	movs	r3, r4
 80009b0:	2206      	movs	r2, #6
 80009b2:	f000 ff9b 	bl	80018ec <HAL_I2C_Mem_Read>
					&mag_y[0], size, timeout);
			HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x07, memAddSize8,
 80009b6:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <main+0x5e0>)
 80009b8:	785b      	ldrb	r3, [r3, #1]
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	18db      	adds	r3, r3, r3
 80009be:	b299      	uxth	r1, r3
 80009c0:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <main+0x5e4>)
 80009c2:	881c      	ldrh	r4, [r3, #0]
 80009c4:	4b37      	ldr	r3, [pc, #220]	; (8000aa4 <main+0x5e8>)
 80009c6:	881a      	ldrh	r2, [r3, #0]
 80009c8:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <main+0x5ec>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4837      	ldr	r0, [pc, #220]	; (8000aac <main+0x5f0>)
 80009ce:	9302      	str	r3, [sp, #8]
 80009d0:	9201      	str	r2, [sp, #4]
 80009d2:	19bb      	adds	r3, r7, r6
 80009d4:	3301      	adds	r3, #1
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	0023      	movs	r3, r4
 80009da:	2207      	movs	r2, #7
 80009dc:	f000 ff86 	bl	80018ec <HAL_I2C_Mem_Read>
					&mag_y[1], size, timeout);
			HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x08, memAddSize8,
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <main+0x5e0>)
 80009e2:	785b      	ldrb	r3, [r3, #1]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	18db      	adds	r3, r3, r3
 80009e8:	b299      	uxth	r1, r3
 80009ea:	4b2d      	ldr	r3, [pc, #180]	; (8000aa0 <main+0x5e4>)
 80009ec:	881c      	ldrh	r4, [r3, #0]
 80009ee:	4b2d      	ldr	r3, [pc, #180]	; (8000aa4 <main+0x5e8>)
 80009f0:	881a      	ldrh	r2, [r3, #0]
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <main+0x5ec>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	482d      	ldr	r0, [pc, #180]	; (8000aac <main+0x5f0>)
 80009f8:	9302      	str	r3, [sp, #8]
 80009fa:	9201      	str	r2, [sp, #4]
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	0023      	movs	r3, r4
 8000a02:	2208      	movs	r2, #8
 8000a04:	f000 ff72 	bl	80018ec <HAL_I2C_Mem_Read>
					&mag_z[0], size, timeout);
			HAL_I2C_Mem_Read(&hi2c1, (bmi160dev.id << 1), 0x09, memAddSize8,
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <main+0x5e0>)
 8000a0a:	785b      	ldrb	r3, [r3, #1]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	18db      	adds	r3, r3, r3
 8000a10:	b299      	uxth	r1, r3
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <main+0x5e4>)
 8000a14:	881c      	ldrh	r4, [r3, #0]
 8000a16:	4b23      	ldr	r3, [pc, #140]	; (8000aa4 <main+0x5e8>)
 8000a18:	881a      	ldrh	r2, [r3, #0]
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <main+0x5ec>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4823      	ldr	r0, [pc, #140]	; (8000aac <main+0x5f0>)
 8000a20:	9302      	str	r3, [sp, #8]
 8000a22:	9201      	str	r2, [sp, #4]
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	3301      	adds	r3, #1
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	0023      	movs	r3, r4
 8000a2c:	2209      	movs	r2, #9
 8000a2e:	f000 ff5d 	bl	80018ec <HAL_I2C_Mem_Read>
					&mag_z[1], size, timeout);
			mag_x_data = (mag_x[1] << 8) | (mag_x[0]);
 8000a32:	197b      	adds	r3, r7, r5
 8000a34:	785b      	ldrb	r3, [r3, #1]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	b21a      	sxth	r2, r3
 8000a3a:	197b      	adds	r3, r7, r5
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	b21a      	sxth	r2, r3
 8000a44:	2118      	movs	r1, #24
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	801a      	strh	r2, [r3, #0]
			mag_y_data = (mag_y[1] << 8) | (mag_y[0]);
 8000a4a:	19bb      	adds	r3, r7, r6
 8000a4c:	785b      	ldrb	r3, [r3, #1]
 8000a4e:	021b      	lsls	r3, r3, #8
 8000a50:	b21a      	sxth	r2, r3
 8000a52:	19bb      	adds	r3, r7, r6
 8000a54:	781b      	ldrb	r3, [r3, #0]
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b21a      	sxth	r2, r3
 8000a5c:	2016      	movs	r0, #22
 8000a5e:	183b      	adds	r3, r7, r0
 8000a60:	801a      	strh	r2, [r3, #0]
			mag_z_data = (mag_z[1] << 8) | (mag_z[0]);
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	021b      	lsls	r3, r3, #8
 8000a68:	b21a      	sxth	r2, r3
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	4313      	orrs	r3, r2
 8000a72:	b21a      	sxth	r2, r3
 8000a74:	2414      	movs	r4, #20
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	801a      	strh	r2, [r3, #0]
			printf("\nMagnetometer (X,Y,Z): %d, %d, %d\r", mag_x_data, mag_y_data, mag_z_data);
 8000a7a:	187b      	adds	r3, r7, r1
 8000a7c:	8819      	ldrh	r1, [r3, #0]
 8000a7e:	183b      	adds	r3, r7, r0
 8000a80:	881a      	ldrh	r2, [r3, #0]
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	881b      	ldrh	r3, [r3, #0]
 8000a86:	480b      	ldr	r0, [pc, #44]	; (8000ab4 <main+0x5f8>)
 8000a88:	f003 f926 	bl	8003cd8 <iprintf>
		}

		HAL_Delay(500);
 8000a8c:	23fa      	movs	r3, #250	; 0xfa
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fb19 	bl	80010c8 <HAL_Delay>
	while (1) {
 8000a96:	e669      	b.n	800076c <main+0x2b0>
 8000a98:	08004d00 	.word	0x08004d00
 8000a9c:	20000168 	.word	0x20000168
 8000aa0:	20000002 	.word	0x20000002
 8000aa4:	20000000 	.word	0x20000000
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	20000098 	.word	0x20000098
 8000ab0:	08004d10 	.word	0x08004d10
 8000ab4:	08004d2c 	.word	0x08004d2c

08000ab8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ab8:	b590      	push	{r4, r7, lr}
 8000aba:	b09d      	sub	sp, #116	; 0x74
 8000abc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000abe:	2438      	movs	r4, #56	; 0x38
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	2338      	movs	r3, #56	; 0x38
 8000ac6:	001a      	movs	r2, r3
 8000ac8:	2100      	movs	r1, #0
 8000aca:	f003 f8fd 	bl	8003cc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ace:	2324      	movs	r3, #36	; 0x24
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	2314      	movs	r3, #20
 8000ad6:	001a      	movs	r2, r3
 8000ad8:	2100      	movs	r1, #0
 8000ada:	f003 f8f5 	bl	8003cc8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000ade:	003b      	movs	r3, r7
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	2324      	movs	r3, #36	; 0x24
 8000ae4:	001a      	movs	r2, r3
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	f003 f8ee 	bl	8003cc8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <SystemClock_Config+0xd4>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a27      	ldr	r2, [pc, #156]	; (8000b90 <SystemClock_Config+0xd8>)
 8000af2:	401a      	ands	r2, r3
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <SystemClock_Config+0xd4>)
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	0109      	lsls	r1, r1, #4
 8000afa:	430a      	orrs	r2, r1
 8000afc:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000afe:	0021      	movs	r1, r4
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2210      	movs	r2, #16
 8000b04:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2201      	movs	r2, #1
 8000b0a:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b12:	187b      	adds	r3, r7, r1
 8000b14:	22a0      	movs	r2, #160	; 0xa0
 8000b16:	0212      	lsls	r2, r2, #8
 8000b18:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b1a:	187b      	adds	r3, r7, r1
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b20:	187b      	adds	r3, r7, r1
 8000b22:	0018      	movs	r0, r3
 8000b24:	f001 fc1a 	bl	800235c <HAL_RCC_OscConfig>
 8000b28:	1e03      	subs	r3, r0, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0x78>
		Error_Handler();
 8000b2c:	f000 f8d8 	bl	8000ce0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b30:	2124      	movs	r1, #36	; 0x24
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	220f      	movs	r2, #15
 8000b36:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b38:	187b      	adds	r3, r7, r1
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b44:	187b      	adds	r3, r7, r1
 8000b46:	2200      	movs	r2, #0
 8000b48:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b50:	187b      	adds	r3, r7, r1
 8000b52:	2100      	movs	r1, #0
 8000b54:	0018      	movs	r0, r3
 8000b56:	f001 ffc5 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8000b5a:	1e03      	subs	r3, r0, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0xaa>
		Error_Handler();
 8000b5e:	f000 f8bf 	bl	8000ce0 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 8000b62:	003b      	movs	r3, r7
 8000b64:	220a      	movs	r2, #10
 8000b66:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000b74:	003b      	movs	r3, r7
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 f9d8 	bl	8002f2c <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xcc>
		Error_Handler();
 8000b80:	f000 f8ae 	bl	8000ce0 <Error_Handler>
	}
}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b01d      	add	sp, #116	; 0x74
 8000b8a:	bd90      	pop	{r4, r7, pc}
 8000b8c:	40007000 	.word	0x40007000
 8000b90:	ffffe7ff 	.word	0xffffe7ff

08000b94 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000b98:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <MX_I2C1_Init+0x7c>)
 8000b9c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000708;
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000ba0:	22e1      	movs	r2, #225	; 0xe1
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bac:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bca:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fcc6 	bl	8001564 <HAL_I2C_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000bdc:	f000 f880 	bl	8000ce0 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000be2:	2100      	movs	r1, #0
 8000be4:	0018      	movs	r0, r3
 8000be6:	f001 fb21 	bl	800222c <HAL_I2CEx_ConfigAnalogFilter>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 8000bee:	f000 f877 	bl	8000ce0 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_I2C1_Init+0x78>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	f001 fb64 	bl	80022c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000bfc:	1e03      	subs	r3, r0, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_I2C1_Init+0x70>
		Error_Handler();
 8000c00:	f000 f86e 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	20000098 	.word	0x20000098
 8000c10:	40005400 	.word	0x40005400

08000c14 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c1a:	4a15      	ldr	r2, [pc, #84]	; (8000c70 <MX_USART2_UART_Init+0x5c>)
 8000c1c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c20:	22e1      	movs	r2, #225	; 0xe1
 8000c22:	0252      	lsls	r2, r2, #9
 8000c24:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <MX_USART2_UART_Init+0x58>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f002 facb 	bl	80031f4 <HAL_UART_Init>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000c62:	f000 f83d 	bl	8000ce0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200000e4 	.word	0x200000e4
 8000c70:	40004400 	.word	0x40004400

08000c74 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_GPIO_Init+0x40>)
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <MX_GPIO_Init+0x40>)
 8000c80:	2101      	movs	r1, #1
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0x40>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_GPIO_Init+0x40>)
 8000c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c96:	4b07      	ldr	r3, [pc, #28]	; (8000cb4 <MX_GPIO_Init+0x40>)
 8000c98:	2102      	movs	r1, #2
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MX_GPIO_Init+0x40>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	603b      	str	r3, [r7, #0]
 8000ca8:	683b      	ldr	r3, [r7, #0]

}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	40021000 	.word	0x40021000

08000cb8 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <__io_putchar+0x20>)
 8000cc2:	1d39      	adds	r1, r7, #4
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <__io_putchar+0x24>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f002 fae8 	bl	800329c <HAL_UART_Transmit>

	return ch;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	0000ffff 	.word	0x0000ffff
 8000cdc:	200000e4 	.word	0x200000e4

08000ce0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce4:	b672      	cpsid	i
}
 8000ce6:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000ce8:	e7fe      	b.n	8000ce8 <Error_Handler+0x8>
	...

08000cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <HAL_MspInit+0x24>)
 8000cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cf4:	4b06      	ldr	r3, [pc, #24]	; (8000d10 <HAL_MspInit+0x24>)
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_MspInit+0x24>)
 8000cfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d00:	4b03      	ldr	r3, [pc, #12]	; (8000d10 <HAL_MspInit+0x24>)
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	0549      	lsls	r1, r1, #21
 8000d06:	430a      	orrs	r2, r1
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	46c0      	nop			; (mov r8, r8)
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40021000 	.word	0x40021000

08000d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d14:	b590      	push	{r4, r7, lr}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	240c      	movs	r4, #12
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	0018      	movs	r0, r3
 8000d22:	2314      	movs	r3, #20
 8000d24:	001a      	movs	r2, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	f002 ffce 	bl	8003cc8 <memset>
  if(hi2c->Instance==I2C1)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <HAL_I2C_MspInit+0x7c>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d128      	bne.n	8000d88 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <HAL_I2C_MspInit+0x80>)
 8000d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_I2C_MspInit+0x80>)
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d42:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <HAL_I2C_MspInit+0x80>)
 8000d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d46:	2202      	movs	r2, #2
 8000d48:	4013      	ands	r3, r2
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d4e:	0021      	movs	r1, r4
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	22c0      	movs	r2, #192	; 0xc0
 8000d54:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2212      	movs	r2, #18
 8000d5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2203      	movs	r2, #3
 8000d66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_I2C_MspInit+0x84>)
 8000d72:	0019      	movs	r1, r3
 8000d74:	0010      	movs	r0, r2
 8000d76:	f000 fa7f 	bl	8001278 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_I2C_MspInit+0x80>)
 8000d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <HAL_I2C_MspInit+0x80>)
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	0389      	lsls	r1, r1, #14
 8000d84:	430a      	orrs	r2, r1
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b009      	add	sp, #36	; 0x24
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	40005400 	.word	0x40005400
 8000d94:	40021000 	.word	0x40021000
 8000d98:	50000400 	.word	0x50000400

08000d9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d9c:	b590      	push	{r4, r7, lr}
 8000d9e:	b089      	sub	sp, #36	; 0x24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	240c      	movs	r4, #12
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	2314      	movs	r3, #20
 8000dac:	001a      	movs	r2, r3
 8000dae:	2100      	movs	r1, #0
 8000db0:	f002 ff8a 	bl	8003cc8 <memset>
  if(huart->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <HAL_UART_MspInit+0x80>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d129      	bne.n	8000e12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dc4:	2180      	movs	r1, #128	; 0x80
 8000dc6:	0289      	lsls	r1, r1, #10
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	4b13      	ldr	r3, [pc, #76]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd8:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_UART_MspInit+0x84>)
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	4013      	ands	r3, r2
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000de4:	0021      	movs	r1, r4
 8000de6:	187b      	adds	r3, r7, r1
 8000de8:	220c      	movs	r2, #12
 8000dea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2202      	movs	r2, #2
 8000df0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2204      	movs	r2, #4
 8000e02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	187a      	adds	r2, r7, r1
 8000e06:	23a0      	movs	r3, #160	; 0xa0
 8000e08:	05db      	lsls	r3, r3, #23
 8000e0a:	0011      	movs	r1, r2
 8000e0c:	0018      	movs	r0, r3
 8000e0e:	f000 fa33 	bl	8001278 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b009      	add	sp, #36	; 0x24
 8000e18:	bd90      	pop	{r4, r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	40004400 	.word	0x40004400
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <NMI_Handler+0x4>

08000e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <HardFault_Handler+0x4>

08000e30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e48:	f000 f922 	bl	8001090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e4c:	46c0      	nop			; (mov r8, r8)
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b086      	sub	sp, #24
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	60f8      	str	r0, [r7, #12]
 8000e5a:	60b9      	str	r1, [r7, #8]
 8000e5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
 8000e62:	e00a      	b.n	8000e7a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e64:	e000      	b.n	8000e68 <_read+0x16>
 8000e66:	bf00      	nop
 8000e68:	0001      	movs	r1, r0
 8000e6a:	68bb      	ldr	r3, [r7, #8]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	60ba      	str	r2, [r7, #8]
 8000e70:	b2ca      	uxtb	r2, r1
 8000e72:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	3301      	adds	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
 8000e7a:	697a      	ldr	r2, [r7, #20]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	dbf0      	blt.n	8000e64 <_read+0x12>
	}

return len;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	0018      	movs	r0, r3
 8000e86:	46bd      	mov	sp, r7
 8000e88:	b006      	add	sp, #24
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e009      	b.n	8000eb2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000e9e:	68bb      	ldr	r3, [r7, #8]
 8000ea0:	1c5a      	adds	r2, r3, #1
 8000ea2:	60ba      	str	r2, [r7, #8]
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff ff06 	bl	8000cb8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697a      	ldr	r2, [r7, #20]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	dbf1      	blt.n	8000e9e <_write+0x12>
	}
	return len;
 8000eba:	687b      	ldr	r3, [r7, #4]
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b006      	add	sp, #24
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_close>:

int _close(int file)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	return -1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	425b      	negs	r3, r3
}
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	b002      	add	sp, #8
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0192      	lsls	r2, r2, #6
 8000ee8:	605a      	str	r2, [r3, #4]
	return 0;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b002      	add	sp, #8
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_isatty>:

int _isatty(int file)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return 1;
 8000efc:	2301      	movs	r3, #1
}
 8000efe:	0018      	movs	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b084      	sub	sp, #16
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	60f8      	str	r0, [r7, #12]
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
	return 0;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	0018      	movs	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	b004      	add	sp, #16
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <_sbrk+0x5c>)
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <_sbrk+0x60>)
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d102      	bne.n	8000f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f38:	4b11      	ldr	r3, [pc, #68]	; (8000f80 <_sbrk+0x64>)
 8000f3a:	4a12      	ldr	r2, [pc, #72]	; (8000f84 <_sbrk+0x68>)
 8000f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <_sbrk+0x64>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	429a      	cmp	r2, r3
 8000f4a:	d207      	bcs.n	8000f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f4c:	f002 fe92 	bl	8003c74 <__errno>
 8000f50:	0003      	movs	r3, r0
 8000f52:	220c      	movs	r2, #12
 8000f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f56:	2301      	movs	r3, #1
 8000f58:	425b      	negs	r3, r3
 8000f5a:	e009      	b.n	8000f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f62:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	18d2      	adds	r2, r2, r3
 8000f6a:	4b05      	ldr	r3, [pc, #20]	; (8000f80 <_sbrk+0x64>)
 8000f6c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000f6e:	68fb      	ldr	r3, [r7, #12]
}
 8000f70:	0018      	movs	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b006      	add	sp, #24
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20002000 	.word	0x20002000
 8000f7c:	00000400 	.word	0x00000400
 8000f80:	20000198 	.word	0x20000198
 8000f84:	200001b0 	.word	0x200001b0

08000f88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f8c:	46c0      	nop			; (mov r8, r8)
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
	...

08000f94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000f94:	480d      	ldr	r0, [pc, #52]	; (8000fcc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f96:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f9a:	490e      	ldr	r1, [pc, #56]	; (8000fd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <LoopForever+0xe>)
  movs r3, #0
 8000f9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fa0:	e002      	b.n	8000fa8 <LoopCopyDataInit>

08000fa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fa6:	3304      	adds	r3, #4

08000fa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000faa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fac:	d3f9      	bcc.n	8000fa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fae:	4a0b      	ldr	r2, [pc, #44]	; (8000fdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb0:	4c0b      	ldr	r4, [pc, #44]	; (8000fe0 <LoopForever+0x16>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fb4:	e001      	b.n	8000fba <LoopFillZerobss>

08000fb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb8:	3204      	adds	r2, #4

08000fba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fbc:	d3fb      	bcc.n	8000fb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fbe:	f7ff ffe3 	bl	8000f88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fc2:	f002 fe5d 	bl	8003c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fc6:	f7ff fa79 	bl	80004bc <main>

08000fca <LoopForever>:

LoopForever:
    b LoopForever
 8000fca:	e7fe      	b.n	8000fca <LoopForever>
  ldr   r0, =_estack
 8000fcc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000fd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000fd8:	08004e64 	.word	0x08004e64
  ldr r2, =_sbss
 8000fdc:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000fe0:	200001b0 	.word	0x200001b0

08000fe4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fe4:	e7fe      	b.n	8000fe4 <ADC1_COMP_IRQHandler>
	...

08000fe8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_Init+0x3c>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_Init+0x3c>)
 8000ffa:	2140      	movs	r1, #64	; 0x40
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f811 	bl	8001028 <HAL_InitTick>
 8001006:	1e03      	subs	r3, r0, #0
 8001008:	d003      	beq.n	8001012 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800100a:	1dfb      	adds	r3, r7, #7
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
 8001010:	e001      	b.n	8001016 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001012:	f7ff fe6b 	bl	8000cec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001016:	1dfb      	adds	r3, r7, #7
 8001018:	781b      	ldrb	r3, [r3, #0]
}
 800101a:	0018      	movs	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	40022000 	.word	0x40022000

08001028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <HAL_InitTick+0x5c>)
 8001032:	681c      	ldr	r4, [r3, #0]
 8001034:	4b14      	ldr	r3, [pc, #80]	; (8001088 <HAL_InitTick+0x60>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	0019      	movs	r1, r3
 800103a:	23fa      	movs	r3, #250	; 0xfa
 800103c:	0098      	lsls	r0, r3, #2
 800103e:	f7ff f86d 	bl	800011c <__udivsi3>
 8001042:	0003      	movs	r3, r0
 8001044:	0019      	movs	r1, r3
 8001046:	0020      	movs	r0, r4
 8001048:	f7ff f868 	bl	800011c <__udivsi3>
 800104c:	0003      	movs	r3, r0
 800104e:	0018      	movs	r0, r3
 8001050:	f000 f905 	bl	800125e <HAL_SYSTICK_Config>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e00f      	b.n	800107c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d80b      	bhi.n	800107a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	2301      	movs	r3, #1
 8001066:	425b      	negs	r3, r3
 8001068:	2200      	movs	r2, #0
 800106a:	0018      	movs	r0, r3
 800106c:	f000 f8e2 	bl	8001234 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_InitTick+0x64>)
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	e000      	b.n	800107c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b003      	add	sp, #12
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	2000000c 	.word	0x2000000c
 8001088:	20000014 	.word	0x20000014
 800108c:	20000010 	.word	0x20000010

08001090 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <HAL_IncTick+0x1c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	001a      	movs	r2, r3
 800109a:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <HAL_IncTick+0x20>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	18d2      	adds	r2, r2, r3
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_IncTick+0x20>)
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	46c0      	nop			; (mov r8, r8)
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	20000014 	.word	0x20000014
 80010b0:	2000019c 	.word	0x2000019c

080010b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  return uwTick;
 80010b8:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <HAL_GetTick+0x10>)
 80010ba:	681b      	ldr	r3, [r3, #0]
}
 80010bc:	0018      	movs	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	2000019c 	.word	0x2000019c

080010c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d0:	f7ff fff0 	bl	80010b4 <HAL_GetTick>
 80010d4:	0003      	movs	r3, r0
 80010d6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3301      	adds	r3, #1
 80010e0:	d005      	beq.n	80010ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <HAL_Delay+0x44>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	001a      	movs	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	f7ff ffe0 	bl	80010b4 <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	68fa      	ldr	r2, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8f7      	bhi.n	80010f0 <HAL_Delay+0x28>
  {
  }
}
 8001100:	46c0      	nop			; (mov r8, r8)
 8001102:	46c0      	nop			; (mov r8, r8)
 8001104:	46bd      	mov	sp, r7
 8001106:	b004      	add	sp, #16
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000014 	.word	0x20000014

08001110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001110:	b590      	push	{r4, r7, lr}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	0002      	movs	r2, r0
 8001118:	6039      	str	r1, [r7, #0]
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b7f      	cmp	r3, #127	; 0x7f
 8001124:	d828      	bhi.n	8001178 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001126:	4a2f      	ldr	r2, [pc, #188]	; (80011e4 <__NVIC_SetPriority+0xd4>)
 8001128:	1dfb      	adds	r3, r7, #7
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b25b      	sxtb	r3, r3
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	33c0      	adds	r3, #192	; 0xc0
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	589b      	ldr	r3, [r3, r2]
 8001136:	1dfa      	adds	r2, r7, #7
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	0011      	movs	r1, r2
 800113c:	2203      	movs	r2, #3
 800113e:	400a      	ands	r2, r1
 8001140:	00d2      	lsls	r2, r2, #3
 8001142:	21ff      	movs	r1, #255	; 0xff
 8001144:	4091      	lsls	r1, r2
 8001146:	000a      	movs	r2, r1
 8001148:	43d2      	mvns	r2, r2
 800114a:	401a      	ands	r2, r3
 800114c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	019b      	lsls	r3, r3, #6
 8001152:	22ff      	movs	r2, #255	; 0xff
 8001154:	401a      	ands	r2, r3
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0018      	movs	r0, r3
 800115c:	2303      	movs	r3, #3
 800115e:	4003      	ands	r3, r0
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001164:	481f      	ldr	r0, [pc, #124]	; (80011e4 <__NVIC_SetPriority+0xd4>)
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b25b      	sxtb	r3, r3
 800116c:	089b      	lsrs	r3, r3, #2
 800116e:	430a      	orrs	r2, r1
 8001170:	33c0      	adds	r3, #192	; 0xc0
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001176:	e031      	b.n	80011dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <__NVIC_SetPriority+0xd8>)
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	0019      	movs	r1, r3
 8001180:	230f      	movs	r3, #15
 8001182:	400b      	ands	r3, r1
 8001184:	3b08      	subs	r3, #8
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3306      	adds	r3, #6
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	18d3      	adds	r3, r2, r3
 800118e:	3304      	adds	r3, #4
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	1dfa      	adds	r2, r7, #7
 8001194:	7812      	ldrb	r2, [r2, #0]
 8001196:	0011      	movs	r1, r2
 8001198:	2203      	movs	r2, #3
 800119a:	400a      	ands	r2, r1
 800119c:	00d2      	lsls	r2, r2, #3
 800119e:	21ff      	movs	r1, #255	; 0xff
 80011a0:	4091      	lsls	r1, r2
 80011a2:	000a      	movs	r2, r1
 80011a4:	43d2      	mvns	r2, r2
 80011a6:	401a      	ands	r2, r3
 80011a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	019b      	lsls	r3, r3, #6
 80011ae:	22ff      	movs	r2, #255	; 0xff
 80011b0:	401a      	ands	r2, r3
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	0018      	movs	r0, r3
 80011b8:	2303      	movs	r3, #3
 80011ba:	4003      	ands	r3, r0
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <__NVIC_SetPriority+0xd8>)
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	001c      	movs	r4, r3
 80011c8:	230f      	movs	r3, #15
 80011ca:	4023      	ands	r3, r4
 80011cc:	3b08      	subs	r3, #8
 80011ce:	089b      	lsrs	r3, r3, #2
 80011d0:	430a      	orrs	r2, r1
 80011d2:	3306      	adds	r3, #6
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	18c3      	adds	r3, r0, r3
 80011d8:	3304      	adds	r3, #4
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b003      	add	sp, #12
 80011e2:	bd90      	pop	{r4, r7, pc}
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	045b      	lsls	r3, r3, #17
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d301      	bcc.n	8001204 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001200:	2301      	movs	r3, #1
 8001202:	e010      	b.n	8001226 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <SysTick_Config+0x44>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	3a01      	subs	r2, #1
 800120a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120c:	2301      	movs	r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	2103      	movs	r1, #3
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff ff7c 	bl	8001110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <SysTick_Config+0x44>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	; (8001230 <SysTick_Config+0x44>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	210f      	movs	r1, #15
 8001240:	187b      	adds	r3, r7, r1
 8001242:	1c02      	adds	r2, r0, #0
 8001244:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	187b      	adds	r3, r7, r1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff5d 	bl	8001110 <__NVIC_SetPriority>
}
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	0018      	movs	r0, r3
 800126a:	f7ff ffbf 	bl	80011ec <SysTick_Config>
 800126e:	0003      	movs	r3, r0
}
 8001270:	0018      	movs	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	b002      	add	sp, #8
 8001276:	bd80      	pop	{r7, pc}

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800128e:	e14f      	b.n	8001530 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2101      	movs	r1, #1
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4091      	lsls	r1, r2
 800129a:	000a      	movs	r2, r1
 800129c:	4013      	ands	r3, r2
 800129e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d100      	bne.n	80012a8 <HAL_GPIO_Init+0x30>
 80012a6:	e140      	b.n	800152a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2203      	movs	r2, #3
 80012ae:	4013      	ands	r3, r2
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d005      	beq.n	80012c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	2203      	movs	r2, #3
 80012ba:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d130      	bne.n	8001322 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	005b      	lsls	r3, r3, #1
 80012ca:	2203      	movs	r2, #3
 80012cc:	409a      	lsls	r2, r3
 80012ce:	0013      	movs	r3, r2
 80012d0:	43da      	mvns	r2, r3
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68da      	ldr	r2, [r3, #12]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f6:	2201      	movs	r2, #1
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	409a      	lsls	r2, r3
 80012fc:	0013      	movs	r3, r2
 80012fe:	43da      	mvns	r2, r3
 8001300:	693b      	ldr	r3, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	091b      	lsrs	r3, r3, #4
 800130c:	2201      	movs	r2, #1
 800130e:	401a      	ands	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	409a      	lsls	r2, r3
 8001314:	0013      	movs	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2203      	movs	r2, #3
 8001328:	4013      	ands	r3, r2
 800132a:	2b03      	cmp	r3, #3
 800132c:	d017      	beq.n	800135e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	005b      	lsls	r3, r3, #1
 8001338:	2203      	movs	r2, #3
 800133a:	409a      	lsls	r2, r3
 800133c:	0013      	movs	r3, r2
 800133e:	43da      	mvns	r2, r3
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	4013      	ands	r3, r2
 8001344:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	409a      	lsls	r2, r3
 8001350:	0013      	movs	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2203      	movs	r2, #3
 8001364:	4013      	ands	r3, r2
 8001366:	2b02      	cmp	r3, #2
 8001368:	d123      	bne.n	80013b2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	08da      	lsrs	r2, r3, #3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3208      	adds	r2, #8
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	58d3      	ldr	r3, [r2, r3]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	2207      	movs	r2, #7
 800137c:	4013      	ands	r3, r2
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	220f      	movs	r2, #15
 8001382:	409a      	lsls	r2, r3
 8001384:	0013      	movs	r3, r2
 8001386:	43da      	mvns	r2, r3
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	691a      	ldr	r2, [r3, #16]
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	2107      	movs	r1, #7
 8001396:	400b      	ands	r3, r1
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	409a      	lsls	r2, r3
 800139c:	0013      	movs	r3, r2
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	08da      	lsrs	r2, r3, #3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3208      	adds	r2, #8
 80013ac:	0092      	lsls	r2, r2, #2
 80013ae:	6939      	ldr	r1, [r7, #16]
 80013b0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	2203      	movs	r2, #3
 80013be:	409a      	lsls	r2, r3
 80013c0:	0013      	movs	r3, r2
 80013c2:	43da      	mvns	r2, r3
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2203      	movs	r2, #3
 80013d0:	401a      	ands	r2, r3
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	409a      	lsls	r2, r3
 80013d8:	0013      	movs	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	23c0      	movs	r3, #192	; 0xc0
 80013ec:	029b      	lsls	r3, r3, #10
 80013ee:	4013      	ands	r3, r2
 80013f0:	d100      	bne.n	80013f4 <HAL_GPIO_Init+0x17c>
 80013f2:	e09a      	b.n	800152a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	4b54      	ldr	r3, [pc, #336]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80013f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80013f8:	4b53      	ldr	r3, [pc, #332]	; (8001548 <HAL_GPIO_Init+0x2d0>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	430a      	orrs	r2, r1
 80013fe:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_GPIO_Init+0x2d4>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	589b      	ldr	r3, [r3, r2]
 800140c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	2203      	movs	r2, #3
 8001412:	4013      	ands	r3, r2
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	220f      	movs	r2, #15
 8001418:	409a      	lsls	r2, r3
 800141a:	0013      	movs	r3, r2
 800141c:	43da      	mvns	r2, r3
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	23a0      	movs	r3, #160	; 0xa0
 8001428:	05db      	lsls	r3, r3, #23
 800142a:	429a      	cmp	r2, r3
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x1ea>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a47      	ldr	r2, [pc, #284]	; (8001550 <HAL_GPIO_Init+0x2d8>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x1e6>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a46      	ldr	r2, [pc, #280]	; (8001554 <HAL_GPIO_Init+0x2dc>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x1e2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a45      	ldr	r2, [pc, #276]	; (8001558 <HAL_GPIO_Init+0x2e0>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x1de>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a44      	ldr	r2, [pc, #272]	; (800155c <HAL_GPIO_Init+0x2e4>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x1da>
 800144e:	2305      	movs	r3, #5
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x1ec>
 8001452:	2306      	movs	r3, #6
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x1ec>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x1ec>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x1ec>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x1ec>
 8001462:	2300      	movs	r3, #0
 8001464:	697a      	ldr	r2, [r7, #20]
 8001466:	2103      	movs	r1, #3
 8001468:	400a      	ands	r2, r1
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	; (800154c <HAL_GPIO_Init+0x2d4>)
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43da      	mvns	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	2380      	movs	r3, #128	; 0x80
 8001498:	025b      	lsls	r3, r3, #9
 800149a:	4013      	ands	r3, r2
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80014a6:	4b2e      	ldr	r3, [pc, #184]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80014ac:	4b2c      	ldr	r3, [pc, #176]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	43da      	mvns	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	029b      	lsls	r3, r3, #10
 80014c4:	4013      	ands	r3, r2
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014d0:	4b23      	ldr	r3, [pc, #140]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d6:	4b22      	ldr	r3, [pc, #136]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	43da      	mvns	r2, r3
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	4013      	ands	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	2380      	movs	r3, #128	; 0x80
 80014ec:	035b      	lsls	r3, r3, #13
 80014ee:	4013      	ands	r3, r2
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	43da      	mvns	r2, r3
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	4013      	ands	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	039b      	lsls	r3, r3, #14
 8001518:	4013      	ands	r3, r2
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <HAL_GPIO_Init+0x2e8>)
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	40da      	lsrs	r2, r3
 8001538:	1e13      	subs	r3, r2, #0
 800153a:	d000      	beq.n	800153e <HAL_GPIO_Init+0x2c6>
 800153c:	e6a8      	b.n	8001290 <HAL_GPIO_Init+0x18>
  }
}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	46c0      	nop			; (mov r8, r8)
 8001542:	46bd      	mov	sp, r7
 8001544:	b006      	add	sp, #24
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000
 8001550:	50000400 	.word	0x50000400
 8001554:	50000800 	.word	0x50000800
 8001558:	50000c00 	.word	0x50000c00
 800155c:	50001c00 	.word	0x50001c00
 8001560:	40010400 	.word	0x40010400

08001564 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e082      	b.n	800167c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2241      	movs	r2, #65	; 0x41
 800157a:	5c9b      	ldrb	r3, [r3, r2]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d107      	bne.n	8001592 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2240      	movs	r2, #64	; 0x40
 8001586:	2100      	movs	r1, #0
 8001588:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff fbc1 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2241      	movs	r2, #65	; 0x41
 8001596:	2124      	movs	r1, #36	; 0x24
 8001598:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2101      	movs	r1, #1
 80015a6:	438a      	bics	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4934      	ldr	r1, [pc, #208]	; (8001684 <HAL_I2C_Init+0x120>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4931      	ldr	r1, [pc, #196]	; (8001688 <HAL_I2C_Init+0x124>)
 80015c4:	400a      	ands	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	0209      	lsls	r1, r1, #8
 80015dc:	430a      	orrs	r2, r1
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	e007      	b.n	80015f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	2184      	movs	r1, #132	; 0x84
 80015ec:	0209      	lsls	r1, r1, #8
 80015ee:	430a      	orrs	r2, r1
 80015f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d104      	bne.n	8001604 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	2280      	movs	r2, #128	; 0x80
 8001600:	0112      	lsls	r2, r2, #4
 8001602:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	491f      	ldr	r1, [pc, #124]	; (800168c <HAL_I2C_Init+0x128>)
 8001610:	430a      	orrs	r2, r1
 8001612:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68da      	ldr	r2, [r3, #12]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	491a      	ldr	r1, [pc, #104]	; (8001688 <HAL_I2C_Init+0x124>)
 8001620:	400a      	ands	r2, r1
 8001622:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	691a      	ldr	r2, [r3, #16]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	695b      	ldr	r3, [r3, #20]
 800162c:	431a      	orrs	r2, r3
 800162e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69d9      	ldr	r1, [r3, #28]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a1a      	ldr	r2, [r3, #32]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	430a      	orrs	r2, r1
 800164c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2241      	movs	r2, #65	; 0x41
 8001668:	2120      	movs	r1, #32
 800166a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2242      	movs	r2, #66	; 0x42
 8001676:	2100      	movs	r1, #0
 8001678:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800167a:	2300      	movs	r3, #0
}
 800167c:	0018      	movs	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	b002      	add	sp, #8
 8001682:	bd80      	pop	{r7, pc}
 8001684:	f0ffffff 	.word	0xf0ffffff
 8001688:	ffff7fff 	.word	0xffff7fff
 800168c:	02008000 	.word	0x02008000

08001690 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001690:	b590      	push	{r4, r7, lr}
 8001692:	b089      	sub	sp, #36	; 0x24
 8001694:	af02      	add	r7, sp, #8
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	000c      	movs	r4, r1
 800169a:	0010      	movs	r0, r2
 800169c:	0019      	movs	r1, r3
 800169e:	230a      	movs	r3, #10
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	1c22      	adds	r2, r4, #0
 80016a4:	801a      	strh	r2, [r3, #0]
 80016a6:	2308      	movs	r3, #8
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	1c02      	adds	r2, r0, #0
 80016ac:	801a      	strh	r2, [r3, #0]
 80016ae:	1dbb      	adds	r3, r7, #6
 80016b0:	1c0a      	adds	r2, r1, #0
 80016b2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2241      	movs	r2, #65	; 0x41
 80016b8:	5c9b      	ldrb	r3, [r3, r2]
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	2b20      	cmp	r3, #32
 80016be:	d000      	beq.n	80016c2 <HAL_I2C_Mem_Write+0x32>
 80016c0:	e10c      	b.n	80018dc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d004      	beq.n	80016d2 <HAL_I2C_Mem_Write+0x42>
 80016c8:	232c      	movs	r3, #44	; 0x2c
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2280      	movs	r2, #128	; 0x80
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e0ff      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2240      	movs	r2, #64	; 0x40
 80016e2:	5c9b      	ldrb	r3, [r3, r2]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2C_Mem_Write+0x5c>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0f8      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2240      	movs	r2, #64	; 0x40
 80016f0:	2101      	movs	r1, #1
 80016f2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016f4:	f7ff fcde 	bl	80010b4 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	0219      	lsls	r1, r3, #8
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2319      	movs	r3, #25
 8001708:	2201      	movs	r2, #1
 800170a:	f000 fc25 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 800170e:	1e03      	subs	r3, r0, #0
 8001710:	d001      	beq.n	8001716 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e0e3      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2241      	movs	r2, #65	; 0x41
 800171a:	2121      	movs	r1, #33	; 0x21
 800171c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2242      	movs	r2, #66	; 0x42
 8001722:	2140      	movs	r1, #64	; 0x40
 8001724:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2200      	movs	r2, #0
 800172a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	222c      	movs	r2, #44	; 0x2c
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	8812      	ldrh	r2, [r2, #0]
 800173a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2200      	movs	r2, #0
 8001740:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001742:	1dbb      	adds	r3, r7, #6
 8001744:	881c      	ldrh	r4, [r3, #0]
 8001746:	2308      	movs	r3, #8
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	230a      	movs	r3, #10
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	8819      	ldrh	r1, [r3, #0]
 8001752:	68f8      	ldr	r0, [r7, #12]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	9301      	str	r3, [sp, #4]
 8001758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	0023      	movs	r3, r4
 800175e:	f000 fb13 	bl	8001d88 <I2C_RequestMemoryWrite>
 8001762:	1e03      	subs	r3, r0, #0
 8001764:	d005      	beq.n	8001772 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	2240      	movs	r2, #64	; 0x40
 800176a:	2100      	movs	r1, #0
 800176c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e0b5      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	d911      	bls.n	80017a0 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	22ff      	movs	r2, #255	; 0xff
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	b2da      	uxtb	r2, r3
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	045c      	lsls	r4, r3, #17
 800178c:	230a      	movs	r3, #10
 800178e:	18fb      	adds	r3, r7, r3
 8001790:	8819      	ldrh	r1, [r3, #0]
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	2300      	movs	r3, #0
 8001796:	9300      	str	r3, [sp, #0]
 8001798:	0023      	movs	r3, r4
 800179a:	f000 fd11 	bl	80021c0 <I2C_TransferConfig>
 800179e:	e012      	b.n	80017c6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ae:	b2da      	uxtb	r2, r3
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	049c      	lsls	r4, r3, #18
 80017b4:	230a      	movs	r3, #10
 80017b6:	18fb      	adds	r3, r7, r3
 80017b8:	8819      	ldrh	r1, [r3, #0]
 80017ba:	68f8      	ldr	r0, [r7, #12]
 80017bc:	2300      	movs	r3, #0
 80017be:	9300      	str	r3, [sp, #0]
 80017c0:	0023      	movs	r3, r4
 80017c2:	f000 fcfd 	bl	80021c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0018      	movs	r0, r3
 80017ce:	f000 fc02 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 80017d2:	1e03      	subs	r3, r0, #0
 80017d4:	d001      	beq.n	80017da <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e081      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	781a      	ldrb	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	d03a      	beq.n	800188a <HAL_I2C_Mem_Write+0x1fa>
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001818:	2b00      	cmp	r3, #0
 800181a:	d136      	bne.n	800188a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800181c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	0013      	movs	r3, r2
 8001826:	2200      	movs	r2, #0
 8001828:	2180      	movs	r1, #128	; 0x80
 800182a:	f000 fb95 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 800182e:	1e03      	subs	r3, r0, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e053      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183a:	b29b      	uxth	r3, r3
 800183c:	2bff      	cmp	r3, #255	; 0xff
 800183e:	d911      	bls.n	8001864 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	22ff      	movs	r2, #255	; 0xff
 8001844:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184a:	b2da      	uxtb	r2, r3
 800184c:	2380      	movs	r3, #128	; 0x80
 800184e:	045c      	lsls	r4, r3, #17
 8001850:	230a      	movs	r3, #10
 8001852:	18fb      	adds	r3, r7, r3
 8001854:	8819      	ldrh	r1, [r3, #0]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	2300      	movs	r3, #0
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	0023      	movs	r3, r4
 800185e:	f000 fcaf 	bl	80021c0 <I2C_TransferConfig>
 8001862:	e012      	b.n	800188a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	b2da      	uxtb	r2, r3
 8001874:	2380      	movs	r3, #128	; 0x80
 8001876:	049c      	lsls	r4, r3, #18
 8001878:	230a      	movs	r3, #10
 800187a:	18fb      	adds	r3, r7, r3
 800187c:	8819      	ldrh	r1, [r3, #0]
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	2300      	movs	r3, #0
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	0023      	movs	r3, r4
 8001886:	f000 fc9b 	bl	80021c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188e:	b29b      	uxth	r3, r3
 8001890:	2b00      	cmp	r3, #0
 8001892:	d198      	bne.n	80017c6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	0018      	movs	r0, r3
 800189c:	f000 fbda 	bl	8002054 <I2C_WaitOnSTOPFlagUntilTimeout>
 80018a0:	1e03      	subs	r3, r0, #0
 80018a2:	d001      	beq.n	80018a8 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e01a      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2220      	movs	r2, #32
 80018ae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685a      	ldr	r2, [r3, #4]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	490b      	ldr	r1, [pc, #44]	; (80018e8 <HAL_I2C_Mem_Write+0x258>)
 80018bc:	400a      	ands	r2, r1
 80018be:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2241      	movs	r2, #65	; 0x41
 80018c4:	2120      	movs	r1, #32
 80018c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2242      	movs	r2, #66	; 0x42
 80018cc:	2100      	movs	r1, #0
 80018ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2240      	movs	r2, #64	; 0x40
 80018d4:	2100      	movs	r1, #0
 80018d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80018d8:	2300      	movs	r3, #0
 80018da:	e000      	b.n	80018de <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80018dc:	2302      	movs	r3, #2
  }
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b007      	add	sp, #28
 80018e4:	bd90      	pop	{r4, r7, pc}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	fe00e800 	.word	0xfe00e800

080018ec <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af02      	add	r7, sp, #8
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	000c      	movs	r4, r1
 80018f6:	0010      	movs	r0, r2
 80018f8:	0019      	movs	r1, r3
 80018fa:	230a      	movs	r3, #10
 80018fc:	18fb      	adds	r3, r7, r3
 80018fe:	1c22      	adds	r2, r4, #0
 8001900:	801a      	strh	r2, [r3, #0]
 8001902:	2308      	movs	r3, #8
 8001904:	18fb      	adds	r3, r7, r3
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	1dbb      	adds	r3, r7, #6
 800190c:	1c0a      	adds	r2, r1, #0
 800190e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2241      	movs	r2, #65	; 0x41
 8001914:	5c9b      	ldrb	r3, [r3, r2]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b20      	cmp	r3, #32
 800191a:	d000      	beq.n	800191e <HAL_I2C_Mem_Read+0x32>
 800191c:	e110      	b.n	8001b40 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 800191e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_I2C_Mem_Read+0x42>
 8001924:	232c      	movs	r3, #44	; 0x2c
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2280      	movs	r2, #128	; 0x80
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e103      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2240      	movs	r2, #64	; 0x40
 800193e:	5c9b      	ldrb	r3, [r3, r2]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d101      	bne.n	8001948 <HAL_I2C_Mem_Read+0x5c>
 8001944:	2302      	movs	r3, #2
 8001946:	e0fc      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2240      	movs	r2, #64	; 0x40
 800194c:	2101      	movs	r1, #1
 800194e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001950:	f7ff fbb0 	bl	80010b4 <HAL_GetTick>
 8001954:	0003      	movs	r3, r0
 8001956:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001958:	2380      	movs	r3, #128	; 0x80
 800195a:	0219      	lsls	r1, r3, #8
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	9300      	str	r3, [sp, #0]
 8001962:	2319      	movs	r3, #25
 8001964:	2201      	movs	r2, #1
 8001966:	f000 faf7 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 800196a:	1e03      	subs	r3, r0, #0
 800196c:	d001      	beq.n	8001972 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e0e7      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2241      	movs	r2, #65	; 0x41
 8001976:	2122      	movs	r1, #34	; 0x22
 8001978:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2242      	movs	r2, #66	; 0x42
 800197e:	2140      	movs	r1, #64	; 0x40
 8001980:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800198c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	222c      	movs	r2, #44	; 0x2c
 8001992:	18ba      	adds	r2, r7, r2
 8001994:	8812      	ldrh	r2, [r2, #0]
 8001996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800199e:	1dbb      	adds	r3, r7, #6
 80019a0:	881c      	ldrh	r4, [r3, #0]
 80019a2:	2308      	movs	r3, #8
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	230a      	movs	r3, #10
 80019aa:	18fb      	adds	r3, r7, r3
 80019ac:	8819      	ldrh	r1, [r3, #0]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	0023      	movs	r3, r4
 80019ba:	f000 fa49 	bl	8001e50 <I2C_RequestMemoryRead>
 80019be:	1e03      	subs	r3, r0, #0
 80019c0:	d005      	beq.n	80019ce <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2240      	movs	r2, #64	; 0x40
 80019c6:	2100      	movs	r1, #0
 80019c8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e0b9      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d2:	b29b      	uxth	r3, r3
 80019d4:	2bff      	cmp	r3, #255	; 0xff
 80019d6:	d911      	bls.n	80019fc <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	22ff      	movs	r2, #255	; 0xff
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	045c      	lsls	r4, r3, #17
 80019e8:	230a      	movs	r3, #10
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	8819      	ldrh	r1, [r3, #0]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	4b56      	ldr	r3, [pc, #344]	; (8001b4c <HAL_I2C_Mem_Read+0x260>)
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	0023      	movs	r3, r4
 80019f6:	f000 fbe3 	bl	80021c0 <I2C_TransferConfig>
 80019fa:	e012      	b.n	8001a22 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	2380      	movs	r3, #128	; 0x80
 8001a0e:	049c      	lsls	r4, r3, #18
 8001a10:	230a      	movs	r3, #10
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	8819      	ldrh	r1, [r3, #0]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	4b4c      	ldr	r3, [pc, #304]	; (8001b4c <HAL_I2C_Mem_Read+0x260>)
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	0023      	movs	r3, r4
 8001a1e:	f000 fbcf 	bl	80021c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2104      	movs	r1, #4
 8001a30:	f000 fa92 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001a34:	1e03      	subs	r3, r0, #0
 8001a36:	d001      	beq.n	8001a3c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	e082      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	3b01      	subs	r3, #1
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d03a      	beq.n	8001aee <HAL_I2C_Mem_Read+0x202>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d136      	bne.n	8001aee <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	0013      	movs	r3, r2
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2180      	movs	r1, #128	; 0x80
 8001a8e:	f000 fa63 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d001      	beq.n	8001a9a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e053      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2bff      	cmp	r3, #255	; 0xff
 8001aa2:	d911      	bls.n	8001ac8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	045c      	lsls	r4, r3, #17
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	8819      	ldrh	r1, [r3, #0]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	0023      	movs	r3, r4
 8001ac2:	f000 fb7d 	bl	80021c0 <I2C_TransferConfig>
 8001ac6:	e012      	b.n	8001aee <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	049c      	lsls	r4, r3, #18
 8001adc:	230a      	movs	r3, #10
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	8819      	ldrh	r1, [r3, #0]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	0023      	movs	r3, r4
 8001aea:	f000 fb69 	bl	80021c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d194      	bne.n	8001a22 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af8:	697a      	ldr	r2, [r7, #20]
 8001afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	0018      	movs	r0, r3
 8001b00:	f000 faa8 	bl	8002054 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001b04:	1e03      	subs	r3, r0, #0
 8001b06:	d001      	beq.n	8001b0c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e01a      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2220      	movs	r2, #32
 8001b12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685a      	ldr	r2, [r3, #4]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	490c      	ldr	r1, [pc, #48]	; (8001b50 <HAL_I2C_Mem_Read+0x264>)
 8001b20:	400a      	ands	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2241      	movs	r2, #65	; 0x41
 8001b28:	2120      	movs	r1, #32
 8001b2a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2242      	movs	r2, #66	; 0x42
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	2100      	movs	r1, #0
 8001b3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	e000      	b.n	8001b42 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b40:	2302      	movs	r3, #2
  }
}
 8001b42:	0018      	movs	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b007      	add	sp, #28
 8001b48:	bd90      	pop	{r4, r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	80002400 	.word	0x80002400
 8001b50:	fe00e800 	.word	0xfe00e800

08001b54 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af02      	add	r7, sp, #8
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	607a      	str	r2, [r7, #4]
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	230a      	movs	r3, #10
 8001b62:	18fb      	adds	r3, r7, r3
 8001b64:	1c0a      	adds	r2, r1, #0
 8001b66:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2241      	movs	r2, #65	; 0x41
 8001b70:	5c9b      	ldrb	r3, [r3, r2]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b20      	cmp	r3, #32
 8001b76:	d000      	beq.n	8001b7a <HAL_I2C_IsDeviceReady+0x26>
 8001b78:	e0fe      	b.n	8001d78 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	699a      	ldr	r2, [r3, #24]
 8001b80:	2380      	movs	r3, #128	; 0x80
 8001b82:	021b      	lsls	r3, r3, #8
 8001b84:	401a      	ands	r2, r3
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d101      	bne.n	8001b92 <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	e0f3      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2240      	movs	r2, #64	; 0x40
 8001b96:	5c9b      	ldrb	r3, [r3, r2]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d101      	bne.n	8001ba0 <HAL_I2C_IsDeviceReady+0x4c>
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	e0ec      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2240      	movs	r2, #64	; 0x40
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2241      	movs	r2, #65	; 0x41
 8001bac:	2124      	movs	r1, #36	; 0x24
 8001bae:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d107      	bne.n	8001bce <HAL_I2C_IsDeviceReady+0x7a>
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	18fb      	adds	r3, r7, r3
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	059b      	lsls	r3, r3, #22
 8001bc6:	0d9b      	lsrs	r3, r3, #22
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_I2C_IsDeviceReady+0x230>)
 8001bca:	431a      	orrs	r2, r3
 8001bcc:	e007      	b.n	8001bde <HAL_I2C_IsDeviceReady+0x8a>
 8001bce:	230a      	movs	r3, #10
 8001bd0:	18fb      	adds	r3, r7, r3
 8001bd2:	881b      	ldrh	r3, [r3, #0]
 8001bd4:	059b      	lsls	r3, r3, #22
 8001bd6:	0d9b      	lsrs	r3, r3, #22
 8001bd8:	22a0      	movs	r2, #160	; 0xa0
 8001bda:	0192      	lsls	r2, r2, #6
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001be4:	f7ff fa66 	bl	80010b4 <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	3b20      	subs	r3, #32
 8001bf8:	425a      	negs	r2, r3
 8001bfa:	4153      	adcs	r3, r2
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	231f      	movs	r3, #31
 8001c00:	18fb      	adds	r3, r7, r3
 8001c02:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	3b10      	subs	r3, #16
 8001c10:	425a      	negs	r2, r3
 8001c12:	4153      	adcs	r3, r2
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	231e      	movs	r3, #30
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c1c:	e035      	b.n	8001c8a <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	d01a      	beq.n	8001c5a <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c24:	f7ff fa46 	bl	80010b4 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d302      	bcc.n	8001c3a <HAL_I2C_IsDeviceReady+0xe6>
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10f      	bne.n	8001c5a <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	2241      	movs	r2, #65	; 0x41
 8001c3e:	2120      	movs	r1, #32
 8001c40:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	2220      	movs	r2, #32
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2240      	movs	r2, #64	; 0x40
 8001c52:	2100      	movs	r1, #0
 8001c54:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e08f      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	2220      	movs	r2, #32
 8001c62:	4013      	ands	r3, r2
 8001c64:	3b20      	subs	r3, #32
 8001c66:	425a      	negs	r2, r3
 8001c68:	4153      	adcs	r3, r2
 8001c6a:	b2da      	uxtb	r2, r3
 8001c6c:	231f      	movs	r3, #31
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2210      	movs	r2, #16
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	3b10      	subs	r3, #16
 8001c7e:	425a      	negs	r2, r3
 8001c80:	4153      	adcs	r3, r2
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	231e      	movs	r3, #30
 8001c86:	18fb      	adds	r3, r7, r3
 8001c88:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c8a:	231f      	movs	r3, #31
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d104      	bne.n	8001c9e <HAL_I2C_IsDeviceReady+0x14a>
 8001c94:	231e      	movs	r3, #30
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0bf      	beq.n	8001c1e <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	2210      	movs	r2, #16
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d01a      	beq.n	8001ce2 <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2120      	movs	r1, #32
 8001cba:	f000 f94d 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e059      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2241      	movs	r2, #65	; 0x41
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2240      	movs	r2, #64	; 0x40
 8001cda:	2100      	movs	r1, #0
 8001cdc:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e04b      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	68f8      	ldr	r0, [r7, #12]
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	0013      	movs	r3, r2
 8001cec:	2200      	movs	r2, #0
 8001cee:	2120      	movs	r1, #32
 8001cf0:	f000 f932 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001cf4:	1e03      	subs	r3, r0, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e03e      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d119      	bne.n	8001d48 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	01c9      	lsls	r1, r1, #7
 8001d22:	430a      	orrs	r2, r1
 8001d24:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	0013      	movs	r3, r2
 8001d30:	2200      	movs	r2, #0
 8001d32:	2120      	movs	r1, #32
 8001d34:	f000 f910 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001d38:	1e03      	subs	r3, r0, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e01c      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2220      	movs	r2, #32
 8001d46:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d900      	bls.n	8001d58 <HAL_I2C_IsDeviceReady+0x204>
 8001d56:	e72e      	b.n	8001bb6 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2241      	movs	r2, #65	; 0x41
 8001d5c:	2120      	movs	r1, #32
 8001d5e:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d64:	2220      	movs	r2, #32
 8001d66:	431a      	orrs	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2240      	movs	r2, #64	; 0x40
 8001d70:	2100      	movs	r1, #0
 8001d72:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001d78:	2302      	movs	r3, #2
  }
}
 8001d7a:	0018      	movs	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	b008      	add	sp, #32
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	46c0      	nop			; (mov r8, r8)
 8001d84:	02002000 	.word	0x02002000

08001d88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af02      	add	r7, sp, #8
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	000c      	movs	r4, r1
 8001d92:	0010      	movs	r0, r2
 8001d94:	0019      	movs	r1, r3
 8001d96:	250a      	movs	r5, #10
 8001d98:	197b      	adds	r3, r7, r5
 8001d9a:	1c22      	adds	r2, r4, #0
 8001d9c:	801a      	strh	r2, [r3, #0]
 8001d9e:	2308      	movs	r3, #8
 8001da0:	18fb      	adds	r3, r7, r3
 8001da2:	1c02      	adds	r2, r0, #0
 8001da4:	801a      	strh	r2, [r3, #0]
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	1c0a      	adds	r2, r1, #0
 8001daa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001dac:	1dbb      	adds	r3, r7, #6
 8001dae:	881b      	ldrh	r3, [r3, #0]
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	045c      	lsls	r4, r3, #17
 8001db6:	197b      	adds	r3, r7, r5
 8001db8:	8819      	ldrh	r1, [r3, #0]
 8001dba:	68f8      	ldr	r0, [r7, #12]
 8001dbc:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <I2C_RequestMemoryWrite+0xc4>)
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	0023      	movs	r3, r4
 8001dc2:	f000 f9fd 	bl	80021c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc8:	6a39      	ldr	r1, [r7, #32]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f000 f902 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dd2:	1e03      	subs	r3, r0, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e033      	b.n	8001e42 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dda:	1dbb      	adds	r3, r7, #6
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d107      	bne.n	8001df2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001de2:	2308      	movs	r3, #8
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	881b      	ldrh	r3, [r3, #0]
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
 8001df0:	e019      	b.n	8001e26 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001df2:	2308      	movs	r3, #8
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	881b      	ldrh	r3, [r3, #0]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e06:	6a39      	ldr	r1, [r7, #32]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	0018      	movs	r0, r3
 8001e0c:	f000 f8e3 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e10:	1e03      	subs	r3, r0, #0
 8001e12:	d001      	beq.n	8001e18 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	e014      	b.n	8001e42 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001e18:	2308      	movs	r3, #8
 8001e1a:	18fb      	adds	r3, r7, r3
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001e26:	6a3a      	ldr	r2, [r7, #32]
 8001e28:	68f8      	ldr	r0, [r7, #12]
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	0013      	movs	r3, r2
 8001e30:	2200      	movs	r2, #0
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	f000 f890 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001e38:	1e03      	subs	r3, r0, #0
 8001e3a:	d001      	beq.n	8001e40 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	0018      	movs	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	b004      	add	sp, #16
 8001e48:	bdb0      	pop	{r4, r5, r7, pc}
 8001e4a:	46c0      	nop			; (mov r8, r8)
 8001e4c:	80002000 	.word	0x80002000

08001e50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	000c      	movs	r4, r1
 8001e5a:	0010      	movs	r0, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	250a      	movs	r5, #10
 8001e60:	197b      	adds	r3, r7, r5
 8001e62:	1c22      	adds	r2, r4, #0
 8001e64:	801a      	strh	r2, [r3, #0]
 8001e66:	2308      	movs	r3, #8
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	1c02      	adds	r2, r0, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	1dbb      	adds	r3, r7, #6
 8001e70:	1c0a      	adds	r2, r1, #0
 8001e72:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001e74:	1dbb      	adds	r3, r7, #6
 8001e76:	881b      	ldrh	r3, [r3, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	197b      	adds	r3, r7, r5
 8001e7c:	8819      	ldrh	r1, [r3, #0]
 8001e7e:	68f8      	ldr	r0, [r7, #12]
 8001e80:	4b23      	ldr	r3, [pc, #140]	; (8001f10 <I2C_RequestMemoryRead+0xc0>)
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2300      	movs	r3, #0
 8001e86:	f000 f99b 	bl	80021c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	6a39      	ldr	r1, [r7, #32]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	0018      	movs	r0, r3
 8001e92:	f000 f8a0 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e96:	1e03      	subs	r3, r0, #0
 8001e98:	d001      	beq.n	8001e9e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e033      	b.n	8001f06 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e9e:	1dbb      	adds	r3, r7, #6
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d107      	bne.n	8001eb6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb4:	e019      	b.n	8001eea <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb6:	2308      	movs	r3, #8
 8001eb8:	18fb      	adds	r3, r7, r3
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	0a1b      	lsrs	r3, r3, #8
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	b2da      	uxtb	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001eca:	6a39      	ldr	r1, [r7, #32]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f000 f881 	bl	8001fd6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ed4:	1e03      	subs	r3, r0, #0
 8001ed6:	d001      	beq.n	8001edc <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e014      	b.n	8001f06 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001edc:	2308      	movs	r3, #8
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001eea:	6a3a      	ldr	r2, [r7, #32]
 8001eec:	68f8      	ldr	r0, [r7, #12]
 8001eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	0013      	movs	r3, r2
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2140      	movs	r1, #64	; 0x40
 8001ef8:	f000 f82e 	bl	8001f58 <I2C_WaitOnFlagUntilTimeout>
 8001efc:	1e03      	subs	r3, r0, #0
 8001efe:	d001      	beq.n	8001f04 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e000      	b.n	8001f06 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	0018      	movs	r0, r3
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	b004      	add	sp, #16
 8001f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f0e:	46c0      	nop			; (mov r8, r8)
 8001f10:	80002000 	.word	0x80002000

08001f14 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	2202      	movs	r2, #2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d103      	bne.n	8001f32 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d007      	beq.n	8001f50 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699a      	ldr	r2, [r3, #24]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	619a      	str	r2, [r3, #24]
  }
}
 8001f50:	46c0      	nop			; (mov r8, r8)
 8001f52:	46bd      	mov	sp, r7
 8001f54:	b002      	add	sp, #8
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	1dfb      	adds	r3, r7, #7
 8001f66:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f68:	e021      	b.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	d01e      	beq.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f70:	f7ff f8a0 	bl	80010b4 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d302      	bcc.n	8001f86 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	2220      	movs	r2, #32
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2241      	movs	r2, #65	; 0x41
 8001f96:	2120      	movs	r1, #32
 8001f98:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2242      	movs	r2, #66	; 0x42
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2240      	movs	r2, #64	; 0x40
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e00f      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	68ba      	ldr	r2, [r7, #8]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	68ba      	ldr	r2, [r7, #8]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	425a      	negs	r2, r3
 8001fbe:	4153      	adcs	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	001a      	movs	r2, r3
 8001fc4:	1dfb      	adds	r3, r7, #7
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d0ce      	beq.n	8001f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b004      	add	sp, #16
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fe2:	e02b      	b.n	800203c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	0018      	movs	r0, r3
 8001fec:	f000 f86e 	bl	80020cc <I2C_IsAcknowledgeFailed>
 8001ff0:	1e03      	subs	r3, r0, #0
 8001ff2:	d001      	beq.n	8001ff8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e029      	b.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	d01e      	beq.n	800203c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ffe:	f7ff f859 	bl	80010b4 <HAL_GetTick>
 8002002:	0002      	movs	r2, r0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	d302      	bcc.n	8002014 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d113      	bne.n	800203c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002018:	2220      	movs	r2, #32
 800201a:	431a      	orrs	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2241      	movs	r2, #65	; 0x41
 8002024:	2120      	movs	r1, #32
 8002026:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2242      	movs	r2, #66	; 0x42
 800202c:	2100      	movs	r1, #0
 800202e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2240      	movs	r2, #64	; 0x40
 8002034:	2100      	movs	r1, #0
 8002036:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e007      	b.n	800204c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	699b      	ldr	r3, [r3, #24]
 8002042:	2202      	movs	r2, #2
 8002044:	4013      	ands	r3, r2
 8002046:	2b02      	cmp	r3, #2
 8002048:	d1cc      	bne.n	8001fe4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	0018      	movs	r0, r3
 800204e:	46bd      	mov	sp, r7
 8002050:	b004      	add	sp, #16
 8002052:	bd80      	pop	{r7, pc}

08002054 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002060:	e028      	b.n	80020b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	0018      	movs	r0, r3
 800206a:	f000 f82f 	bl	80020cc <I2C_IsAcknowledgeFailed>
 800206e:	1e03      	subs	r3, r0, #0
 8002070:	d001      	beq.n	8002076 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e026      	b.n	80020c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7ff f81d 	bl	80010b4 <HAL_GetTick>
 800207a:	0002      	movs	r2, r0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d113      	bne.n	80020b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	2220      	movs	r2, #32
 8002092:	431a      	orrs	r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2241      	movs	r2, #65	; 0x41
 800209c:	2120      	movs	r1, #32
 800209e:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2242      	movs	r2, #66	; 0x42
 80020a4:	2100      	movs	r1, #0
 80020a6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2240      	movs	r2, #64	; 0x40
 80020ac:	2100      	movs	r1, #0
 80020ae:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e007      	b.n	80020c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	2220      	movs	r2, #32
 80020bc:	4013      	ands	r3, r2
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d1cf      	bne.n	8002062 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	0018      	movs	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b004      	add	sp, #16
 80020ca:	bd80      	pop	{r7, pc}

080020cc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	2210      	movs	r2, #16
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b10      	cmp	r3, #16
 80020e4:	d164      	bne.n	80021b0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	049b      	lsls	r3, r3, #18
 80020f0:	401a      	ands	r2, r3
 80020f2:	2380      	movs	r3, #128	; 0x80
 80020f4:	049b      	lsls	r3, r3, #18
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d02b      	beq.n	8002152 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	01c9      	lsls	r1, r1, #7
 8002108:	430a      	orrs	r2, r1
 800210a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800210c:	e021      	b.n	8002152 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	3301      	adds	r3, #1
 8002112:	d01e      	beq.n	8002152 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002114:	f7fe ffce 	bl	80010b4 <HAL_GetTick>
 8002118:	0002      	movs	r2, r0
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68ba      	ldr	r2, [r7, #8]
 8002120:	429a      	cmp	r2, r3
 8002122:	d302      	bcc.n	800212a <I2C_IsAcknowledgeFailed+0x5e>
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d113      	bne.n	8002152 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212e:	2220      	movs	r2, #32
 8002130:	431a      	orrs	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2241      	movs	r2, #65	; 0x41
 800213a:	2120      	movs	r1, #32
 800213c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2242      	movs	r2, #66	; 0x42
 8002142:	2100      	movs	r1, #0
 8002144:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2240      	movs	r2, #64	; 0x40
 800214a:	2100      	movs	r1, #0
 800214c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e02f      	b.n	80021b2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2220      	movs	r2, #32
 800215a:	4013      	ands	r3, r2
 800215c:	2b20      	cmp	r3, #32
 800215e:	d1d6      	bne.n	800210e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2210      	movs	r2, #16
 8002166:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2220      	movs	r2, #32
 800216e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	0018      	movs	r0, r3
 8002174:	f7ff fece 	bl	8001f14 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	490e      	ldr	r1, [pc, #56]	; (80021bc <I2C_IsAcknowledgeFailed+0xf0>)
 8002184:	400a      	ands	r2, r1
 8002186:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218c:	2204      	movs	r2, #4
 800218e:	431a      	orrs	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2241      	movs	r2, #65	; 0x41
 8002198:	2120      	movs	r1, #32
 800219a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2242      	movs	r2, #66	; 0x42
 80021a0:	2100      	movs	r1, #0
 80021a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2240      	movs	r2, #64	; 0x40
 80021a8:	2100      	movs	r1, #0
 80021aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e000      	b.n	80021b2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	0018      	movs	r0, r3
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	fe00e800 	.word	0xfe00e800

080021c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	0008      	movs	r0, r1
 80021ca:	0011      	movs	r1, r2
 80021cc:	607b      	str	r3, [r7, #4]
 80021ce:	240a      	movs	r4, #10
 80021d0:	193b      	adds	r3, r7, r4
 80021d2:	1c02      	adds	r2, r0, #0
 80021d4:	801a      	strh	r2, [r3, #0]
 80021d6:	2009      	movs	r0, #9
 80021d8:	183b      	adds	r3, r7, r0
 80021da:	1c0a      	adds	r2, r1, #0
 80021dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	0d51      	lsrs	r1, r2, #21
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	00d2      	lsls	r2, r2, #3
 80021ec:	400a      	ands	r2, r1
 80021ee:	490e      	ldr	r1, [pc, #56]	; (8002228 <I2C_TransferConfig+0x68>)
 80021f0:	430a      	orrs	r2, r1
 80021f2:	43d2      	mvns	r2, r2
 80021f4:	401a      	ands	r2, r3
 80021f6:	0011      	movs	r1, r2
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	881b      	ldrh	r3, [r3, #0]
 80021fc:	059b      	lsls	r3, r3, #22
 80021fe:	0d9a      	lsrs	r2, r3, #22
 8002200:	183b      	adds	r3, r7, r0
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	0418      	lsls	r0, r3, #16
 8002206:	23ff      	movs	r3, #255	; 0xff
 8002208:	041b      	lsls	r3, r3, #16
 800220a:	4003      	ands	r3, r0
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	431a      	orrs	r2, r3
 8002212:	6a3b      	ldr	r3, [r7, #32]
 8002214:	431a      	orrs	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800221e:	46c0      	nop			; (mov r8, r8)
 8002220:	46bd      	mov	sp, r7
 8002222:	b005      	add	sp, #20
 8002224:	bd90      	pop	{r4, r7, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	03ff63ff 	.word	0x03ff63ff

0800222c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2241      	movs	r2, #65	; 0x41
 800223a:	5c9b      	ldrb	r3, [r3, r2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2b20      	cmp	r3, #32
 8002240:	d138      	bne.n	80022b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	5c9b      	ldrb	r3, [r3, r2]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800224c:	2302      	movs	r3, #2
 800224e:	e032      	b.n	80022b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2240      	movs	r2, #64	; 0x40
 8002254:	2101      	movs	r1, #1
 8002256:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2241      	movs	r2, #65	; 0x41
 800225c:	2124      	movs	r1, #36	; 0x24
 800225e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2101      	movs	r1, #1
 800226c:	438a      	bics	r2, r1
 800226e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4911      	ldr	r1, [pc, #68]	; (80022c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800227c:	400a      	ands	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6819      	ldr	r1, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2101      	movs	r1, #1
 800229c:	430a      	orrs	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2241      	movs	r2, #65	; 0x41
 80022a4:	2120      	movs	r1, #32
 80022a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2240      	movs	r2, #64	; 0x40
 80022ac:	2100      	movs	r1, #0
 80022ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e000      	b.n	80022b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022b4:	2302      	movs	r3, #2
  }
}
 80022b6:	0018      	movs	r0, r3
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b002      	add	sp, #8
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	ffffefff 	.word	0xffffefff

080022c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2241      	movs	r2, #65	; 0x41
 80022d2:	5c9b      	ldrb	r3, [r3, r2]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b20      	cmp	r3, #32
 80022d8:	d139      	bne.n	800234e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2240      	movs	r2, #64	; 0x40
 80022de:	5c9b      	ldrb	r3, [r3, r2]
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d101      	bne.n	80022e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022e4:	2302      	movs	r3, #2
 80022e6:	e033      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	2101      	movs	r1, #1
 80022ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2241      	movs	r2, #65	; 0x41
 80022f4:	2124      	movs	r1, #36	; 0x24
 80022f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4a11      	ldr	r2, [pc, #68]	; (8002358 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002314:	4013      	ands	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	021b      	lsls	r3, r3, #8
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	4313      	orrs	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2101      	movs	r1, #1
 8002336:	430a      	orrs	r2, r1
 8002338:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2241      	movs	r2, #65	; 0x41
 800233e:	2120      	movs	r1, #32
 8002340:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2240      	movs	r2, #64	; 0x40
 8002346:	2100      	movs	r1, #0
 8002348:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	e000      	b.n	8002350 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800234e:	2302      	movs	r3, #2
  }
}
 8002350:	0018      	movs	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	b004      	add	sp, #16
 8002356:	bd80      	pop	{r7, pc}
 8002358:	fffff0ff 	.word	0xfffff0ff

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b5b0      	push	{r4, r5, r7, lr}
 800235e:	b08a      	sub	sp, #40	; 0x28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d102      	bne.n	8002370 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	f000 fbaf 	bl	8002ace <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002370:	4bcf      	ldr	r3, [pc, #828]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	220c      	movs	r2, #12
 8002376:	4013      	ands	r3, r2
 8002378:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237a:	4bcd      	ldr	r3, [pc, #820]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	2380      	movs	r3, #128	; 0x80
 8002380:	025b      	lsls	r3, r3, #9
 8002382:	4013      	ands	r3, r2
 8002384:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2201      	movs	r2, #1
 800238c:	4013      	ands	r3, r2
 800238e:	d100      	bne.n	8002392 <HAL_RCC_OscConfig+0x36>
 8002390:	e07e      	b.n	8002490 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d007      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002398:	6a3b      	ldr	r3, [r7, #32]
 800239a:	2b0c      	cmp	r3, #12
 800239c:	d112      	bne.n	80023c4 <HAL_RCC_OscConfig+0x68>
 800239e:	69fa      	ldr	r2, [r7, #28]
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	025b      	lsls	r3, r3, #9
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a8:	4bc1      	ldr	r3, [pc, #772]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	2380      	movs	r3, #128	; 0x80
 80023ae:	029b      	lsls	r3, r3, #10
 80023b0:	4013      	ands	r3, r2
 80023b2:	d100      	bne.n	80023b6 <HAL_RCC_OscConfig+0x5a>
 80023b4:	e06b      	b.n	800248e <HAL_RCC_OscConfig+0x132>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d167      	bne.n	800248e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	f000 fb85 	bl	8002ace <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	025b      	lsls	r3, r3, #9
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x84>
 80023d0:	4bb7      	ldr	r3, [pc, #732]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4bb6      	ldr	r3, [pc, #728]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80023d6:	2180      	movs	r1, #128	; 0x80
 80023d8:	0249      	lsls	r1, r1, #9
 80023da:	430a      	orrs	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	e027      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	23a0      	movs	r3, #160	; 0xa0
 80023e6:	02db      	lsls	r3, r3, #11
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d10e      	bne.n	800240a <HAL_RCC_OscConfig+0xae>
 80023ec:	4bb0      	ldr	r3, [pc, #704]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4baf      	ldr	r3, [pc, #700]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80023f2:	2180      	movs	r1, #128	; 0x80
 80023f4:	02c9      	lsls	r1, r1, #11
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	4bad      	ldr	r3, [pc, #692]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	4bac      	ldr	r3, [pc, #688]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0249      	lsls	r1, r1, #9
 8002404:	430a      	orrs	r2, r1
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	e012      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 800240a:	4ba9      	ldr	r3, [pc, #676]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4ba8      	ldr	r3, [pc, #672]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002410:	49a8      	ldr	r1, [pc, #672]	; (80026b4 <HAL_RCC_OscConfig+0x358>)
 8002412:	400a      	ands	r2, r1
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	4ba6      	ldr	r3, [pc, #664]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	2380      	movs	r3, #128	; 0x80
 800241c:	025b      	lsls	r3, r3, #9
 800241e:	4013      	ands	r3, r2
 8002420:	60fb      	str	r3, [r7, #12]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	4ba2      	ldr	r3, [pc, #648]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4ba1      	ldr	r3, [pc, #644]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800242a:	49a3      	ldr	r1, [pc, #652]	; (80026b8 <HAL_RCC_OscConfig+0x35c>)
 800242c:	400a      	ands	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d015      	beq.n	8002464 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe fe3c 	bl	80010b4 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002440:	e009      	b.n	8002456 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002442:	f7fe fe37 	bl	80010b4 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b64      	cmp	r3, #100	; 0x64
 800244e:	d902      	bls.n	8002456 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	f000 fb3c 	bl	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002456:	4b96      	ldr	r3, [pc, #600]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	2380      	movs	r3, #128	; 0x80
 800245c:	029b      	lsls	r3, r3, #10
 800245e:	4013      	ands	r3, r2
 8002460:	d0ef      	beq.n	8002442 <HAL_RCC_OscConfig+0xe6>
 8002462:	e015      	b.n	8002490 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002464:	f7fe fe26 	bl	80010b4 <HAL_GetTick>
 8002468:	0003      	movs	r3, r0
 800246a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800246c:	e008      	b.n	8002480 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800246e:	f7fe fe21 	bl	80010b4 <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	69bb      	ldr	r3, [r7, #24]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b64      	cmp	r3, #100	; 0x64
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e326      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002480:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	2380      	movs	r3, #128	; 0x80
 8002486:	029b      	lsls	r3, r3, #10
 8002488:	4013      	ands	r3, r2
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_OscConfig+0x112>
 800248c:	e000      	b.n	8002490 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800248e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2202      	movs	r2, #2
 8002496:	4013      	ands	r3, r2
 8002498:	d100      	bne.n	800249c <HAL_RCC_OscConfig+0x140>
 800249a:	e08b      	b.n	80025b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	68db      	ldr	r3, [r3, #12]
 80024a0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d13e      	bne.n	800252c <HAL_RCC_OscConfig+0x1d0>
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d13b      	bne.n	800252c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80024b4:	4b7e      	ldr	r3, [pc, #504]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2204      	movs	r2, #4
 80024ba:	4013      	ands	r3, r2
 80024bc:	d004      	beq.n	80024c8 <HAL_RCC_OscConfig+0x16c>
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d101      	bne.n	80024c8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e302      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c8:	4b79      	ldr	r3, [pc, #484]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a7b      	ldr	r2, [pc, #492]	; (80026bc <HAL_RCC_OscConfig+0x360>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	021a      	lsls	r2, r3, #8
 80024d8:	4b75      	ldr	r3, [pc, #468]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80024da:	430a      	orrs	r2, r1
 80024dc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024de:	4b74      	ldr	r3, [pc, #464]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2209      	movs	r2, #9
 80024e4:	4393      	bics	r3, r2
 80024e6:	0019      	movs	r1, r3
 80024e8:	4b71      	ldr	r3, [pc, #452]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f0:	f000 fc40 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 80024f4:	0001      	movs	r1, r0
 80024f6:	4b6e      	ldr	r3, [pc, #440]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	091b      	lsrs	r3, r3, #4
 80024fc:	220f      	movs	r2, #15
 80024fe:	4013      	ands	r3, r2
 8002500:	4a6f      	ldr	r2, [pc, #444]	; (80026c0 <HAL_RCC_OscConfig+0x364>)
 8002502:	5cd3      	ldrb	r3, [r2, r3]
 8002504:	000a      	movs	r2, r1
 8002506:	40da      	lsrs	r2, r3
 8002508:	4b6e      	ldr	r3, [pc, #440]	; (80026c4 <HAL_RCC_OscConfig+0x368>)
 800250a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800250c:	4b6e      	ldr	r3, [pc, #440]	; (80026c8 <HAL_RCC_OscConfig+0x36c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	2513      	movs	r5, #19
 8002512:	197c      	adds	r4, r7, r5
 8002514:	0018      	movs	r0, r3
 8002516:	f7fe fd87 	bl	8001028 <HAL_InitTick>
 800251a:	0003      	movs	r3, r0
 800251c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800251e:	197b      	adds	r3, r7, r5
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d046      	beq.n	80025b4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8002526:	197b      	adds	r3, r7, r5
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	e2d0      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d027      	beq.n	8002582 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002532:	4b5f      	ldr	r3, [pc, #380]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2209      	movs	r2, #9
 8002538:	4393      	bics	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	4b5c      	ldr	r3, [pc, #368]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7fe fdb6 	bl	80010b4 <HAL_GetTick>
 8002548:	0003      	movs	r3, r0
 800254a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7fe fdb1 	bl	80010b4 <HAL_GetTick>
 8002552:	0002      	movs	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e2b6      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002560:	4b53      	ldr	r3, [pc, #332]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	4013      	ands	r3, r2
 8002568:	d0f1      	beq.n	800254e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256a:	4b51      	ldr	r3, [pc, #324]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	4a53      	ldr	r2, [pc, #332]	; (80026bc <HAL_RCC_OscConfig+0x360>)
 8002570:	4013      	ands	r3, r2
 8002572:	0019      	movs	r1, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	021a      	lsls	r2, r3, #8
 800257a:	4b4d      	ldr	r3, [pc, #308]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800257c:	430a      	orrs	r2, r1
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	e018      	b.n	80025b4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b4b      	ldr	r3, [pc, #300]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	4b4a      	ldr	r3, [pc, #296]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002588:	2101      	movs	r1, #1
 800258a:	438a      	bics	r2, r1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fd91 	bl	80010b4 <HAL_GetTick>
 8002592:	0003      	movs	r3, r0
 8002594:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002596:	e008      	b.n	80025aa <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002598:	f7fe fd8c 	bl	80010b4 <HAL_GetTick>
 800259c:	0002      	movs	r2, r0
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e291      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80025aa:	4b41      	ldr	r3, [pc, #260]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2204      	movs	r2, #4
 80025b0:	4013      	ands	r3, r2
 80025b2:	d1f1      	bne.n	8002598 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2210      	movs	r2, #16
 80025ba:	4013      	ands	r3, r2
 80025bc:	d100      	bne.n	80025c0 <HAL_RCC_OscConfig+0x264>
 80025be:	e0a1      	b.n	8002704 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c0:	6a3b      	ldr	r3, [r7, #32]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d140      	bne.n	8002648 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c6:	4b3a      	ldr	r3, [pc, #232]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	4013      	ands	r3, r2
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x282>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e277      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025de:	4b34      	ldr	r3, [pc, #208]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a3a      	ldr	r2, [pc, #232]	; (80026cc <HAL_RCC_OscConfig+0x370>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	0019      	movs	r1, r3
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025ec:	4b30      	ldr	r3, [pc, #192]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80025ee:	430a      	orrs	r2, r1
 80025f0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	0a19      	lsrs	r1, r3, #8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	061a      	lsls	r2, r3, #24
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002602:	430a      	orrs	r2, r1
 8002604:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	0b5b      	lsrs	r3, r3, #13
 800260c:	3301      	adds	r3, #1
 800260e:	2280      	movs	r2, #128	; 0x80
 8002610:	0212      	lsls	r2, r2, #8
 8002612:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002614:	4b26      	ldr	r3, [pc, #152]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	091b      	lsrs	r3, r3, #4
 800261a:	210f      	movs	r1, #15
 800261c:	400b      	ands	r3, r1
 800261e:	4928      	ldr	r1, [pc, #160]	; (80026c0 <HAL_RCC_OscConfig+0x364>)
 8002620:	5ccb      	ldrb	r3, [r1, r3]
 8002622:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_RCC_OscConfig+0x368>)
 8002626:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002628:	4b27      	ldr	r3, [pc, #156]	; (80026c8 <HAL_RCC_OscConfig+0x36c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2513      	movs	r5, #19
 800262e:	197c      	adds	r4, r7, r5
 8002630:	0018      	movs	r0, r3
 8002632:	f7fe fcf9 	bl	8001028 <HAL_InitTick>
 8002636:	0003      	movs	r3, r0
 8002638:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800263a:	197b      	adds	r3, r7, r5
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d060      	beq.n	8002704 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8002642:	197b      	adds	r3, r7, r5
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	e242      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d03f      	beq.n	80026d0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b16      	ldr	r3, [pc, #88]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002656:	2180      	movs	r1, #128	; 0x80
 8002658:	0049      	lsls	r1, r1, #1
 800265a:	430a      	orrs	r2, r1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fd29 	bl	80010b4 <HAL_GetTick>
 8002662:	0003      	movs	r3, r0
 8002664:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002668:	f7fe fd24 	bl	80010b4 <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e229      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800267a:	4b0d      	ldr	r3, [pc, #52]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	; 0x80
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4013      	ands	r3, r2
 8002684:	d0f0      	beq.n	8002668 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002686:	4b0a      	ldr	r3, [pc, #40]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a10      	ldr	r2, [pc, #64]	; (80026cc <HAL_RCC_OscConfig+0x370>)
 800268c:	4013      	ands	r3, r2
 800268e:	0019      	movs	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002694:	4b06      	ldr	r3, [pc, #24]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 8002696:	430a      	orrs	r2, r1
 8002698:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800269a:	4b05      	ldr	r3, [pc, #20]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	021b      	lsls	r3, r3, #8
 80026a0:	0a19      	lsrs	r1, r3, #8
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	061a      	lsls	r2, r3, #24
 80026a8:	4b01      	ldr	r3, [pc, #4]	; (80026b0 <HAL_RCC_OscConfig+0x354>)
 80026aa:	430a      	orrs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	e029      	b.n	8002704 <HAL_RCC_OscConfig+0x3a8>
 80026b0:	40021000 	.word	0x40021000
 80026b4:	fffeffff 	.word	0xfffeffff
 80026b8:	fffbffff 	.word	0xfffbffff
 80026bc:	ffffe0ff 	.word	0xffffe0ff
 80026c0:	08004d50 	.word	0x08004d50
 80026c4:	2000000c 	.word	0x2000000c
 80026c8:	20000010 	.word	0x20000010
 80026cc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026d0:	4bbd      	ldr	r3, [pc, #756]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4bbc      	ldr	r3, [pc, #752]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80026d6:	49bd      	ldr	r1, [pc, #756]	; (80029cc <HAL_RCC_OscConfig+0x670>)
 80026d8:	400a      	ands	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026dc:	f7fe fcea 	bl	80010b4 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026e6:	f7fe fce5 	bl	80010b4 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1ea      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026f8:	4bb3      	ldr	r3, [pc, #716]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2208      	movs	r2, #8
 800270a:	4013      	ands	r3, r2
 800270c:	d036      	beq.n	800277c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d019      	beq.n	800274a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002716:	4bac      	ldr	r3, [pc, #688]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002718:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800271a:	4bab      	ldr	r3, [pc, #684]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800271c:	2101      	movs	r1, #1
 800271e:	430a      	orrs	r2, r1
 8002720:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7fe fcc7 	bl	80010b4 <HAL_GetTick>
 8002726:	0003      	movs	r3, r0
 8002728:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fcc2 	bl	80010b4 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1c7      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800273e:	4ba2      	ldr	r3, [pc, #648]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002742:	2202      	movs	r2, #2
 8002744:	4013      	ands	r3, r2
 8002746:	d0f1      	beq.n	800272c <HAL_RCC_OscConfig+0x3d0>
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800274a:	4b9f      	ldr	r3, [pc, #636]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800274c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800274e:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002750:	2101      	movs	r1, #1
 8002752:	438a      	bics	r2, r1
 8002754:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002756:	f7fe fcad 	bl	80010b4 <HAL_GetTick>
 800275a:	0003      	movs	r3, r0
 800275c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002760:	f7fe fca8 	bl	80010b4 <HAL_GetTick>
 8002764:	0002      	movs	r2, r0
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e1ad      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002772:	4b95      	ldr	r3, [pc, #596]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002776:	2202      	movs	r2, #2
 8002778:	4013      	ands	r3, r2
 800277a:	d1f1      	bne.n	8002760 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2204      	movs	r2, #4
 8002782:	4013      	ands	r3, r2
 8002784:	d100      	bne.n	8002788 <HAL_RCC_OscConfig+0x42c>
 8002786:	e0ae      	b.n	80028e6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002788:	2027      	movs	r0, #39	; 0x27
 800278a:	183b      	adds	r3, r7, r0
 800278c:	2200      	movs	r2, #0
 800278e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002790:	4b8d      	ldr	r3, [pc, #564]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	055b      	lsls	r3, r3, #21
 8002798:	4013      	ands	r3, r2
 800279a:	d109      	bne.n	80027b0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800279c:	4b8a      	ldr	r3, [pc, #552]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800279e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027a0:	4b89      	ldr	r3, [pc, #548]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80027a2:	2180      	movs	r1, #128	; 0x80
 80027a4:	0549      	lsls	r1, r1, #21
 80027a6:	430a      	orrs	r2, r1
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80027aa:	183b      	adds	r3, r7, r0
 80027ac:	2201      	movs	r2, #1
 80027ae:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b0:	4b87      	ldr	r3, [pc, #540]	; (80029d0 <HAL_RCC_OscConfig+0x674>)
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4013      	ands	r3, r2
 80027ba:	d11a      	bne.n	80027f2 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027bc:	4b84      	ldr	r3, [pc, #528]	; (80029d0 <HAL_RCC_OscConfig+0x674>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b83      	ldr	r3, [pc, #524]	; (80029d0 <HAL_RCC_OscConfig+0x674>)
 80027c2:	2180      	movs	r1, #128	; 0x80
 80027c4:	0049      	lsls	r1, r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ca:	f7fe fc73 	bl	80010b4 <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d4:	f7fe fc6e 	bl	80010b4 <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e173      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e6:	4b7a      	ldr	r3, [pc, #488]	; (80029d0 <HAL_RCC_OscConfig+0x674>)
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	4013      	ands	r3, r2
 80027f0:	d0f0      	beq.n	80027d4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	2380      	movs	r3, #128	; 0x80
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_OscConfig+0x4b2>
 80027fe:	4b72      	ldr	r3, [pc, #456]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002800:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002802:	4b71      	ldr	r3, [pc, #452]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0049      	lsls	r1, r1, #1
 8002808:	430a      	orrs	r2, r1
 800280a:	651a      	str	r2, [r3, #80]	; 0x50
 800280c:	e031      	b.n	8002872 <HAL_RCC_OscConfig+0x516>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x4d4>
 8002816:	4b6c      	ldr	r3, [pc, #432]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281a:	4b6b      	ldr	r3, [pc, #428]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800281c:	496b      	ldr	r1, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x670>)
 800281e:	400a      	ands	r2, r1
 8002820:	651a      	str	r2, [r3, #80]	; 0x50
 8002822:	4b69      	ldr	r3, [pc, #420]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002826:	4b68      	ldr	r3, [pc, #416]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002828:	496a      	ldr	r1, [pc, #424]	; (80029d4 <HAL_RCC_OscConfig+0x678>)
 800282a:	400a      	ands	r2, r1
 800282c:	651a      	str	r2, [r3, #80]	; 0x50
 800282e:	e020      	b.n	8002872 <HAL_RCC_OscConfig+0x516>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	23a0      	movs	r3, #160	; 0xa0
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	429a      	cmp	r2, r3
 800283a:	d10e      	bne.n	800285a <HAL_RCC_OscConfig+0x4fe>
 800283c:	4b62      	ldr	r3, [pc, #392]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800283e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002840:	4b61      	ldr	r3, [pc, #388]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002842:	2180      	movs	r1, #128	; 0x80
 8002844:	00c9      	lsls	r1, r1, #3
 8002846:	430a      	orrs	r2, r1
 8002848:	651a      	str	r2, [r3, #80]	; 0x50
 800284a:	4b5f      	ldr	r3, [pc, #380]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800284c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800284e:	4b5e      	ldr	r3, [pc, #376]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002850:	2180      	movs	r1, #128	; 0x80
 8002852:	0049      	lsls	r1, r1, #1
 8002854:	430a      	orrs	r2, r1
 8002856:	651a      	str	r2, [r3, #80]	; 0x50
 8002858:	e00b      	b.n	8002872 <HAL_RCC_OscConfig+0x516>
 800285a:	4b5b      	ldr	r3, [pc, #364]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800285c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800285e:	4b5a      	ldr	r3, [pc, #360]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002860:	495a      	ldr	r1, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x670>)
 8002862:	400a      	ands	r2, r1
 8002864:	651a      	str	r2, [r3, #80]	; 0x50
 8002866:	4b58      	ldr	r3, [pc, #352]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800286a:	4b57      	ldr	r3, [pc, #348]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800286c:	4959      	ldr	r1, [pc, #356]	; (80029d4 <HAL_RCC_OscConfig+0x678>)
 800286e:	400a      	ands	r2, r1
 8002870:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d015      	beq.n	80028a6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe fc1b 	bl	80010b4 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002882:	e009      	b.n	8002898 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fc16 	bl	80010b4 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a52      	ldr	r2, [pc, #328]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e11a      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800289a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4013      	ands	r3, r2
 80028a2:	d0ef      	beq.n	8002884 <HAL_RCC_OscConfig+0x528>
 80028a4:	e014      	b.n	80028d0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028a6:	f7fe fc05 	bl	80010b4 <HAL_GetTick>
 80028aa:	0003      	movs	r3, r0
 80028ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ae:	e009      	b.n	80028c4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b0:	f7fe fc00 	bl	80010b4 <HAL_GetTick>
 80028b4:	0002      	movs	r2, r0
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	4a47      	ldr	r2, [pc, #284]	; (80029d8 <HAL_RCC_OscConfig+0x67c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d901      	bls.n	80028c4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e104      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028c4:	4b40      	ldr	r3, [pc, #256]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80028c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4013      	ands	r3, r2
 80028ce:	d1ef      	bne.n	80028b0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d0:	2327      	movs	r3, #39	; 0x27
 80028d2:	18fb      	adds	r3, r7, r3
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80028dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028de:	4b3a      	ldr	r3, [pc, #232]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80028e0:	493e      	ldr	r1, [pc, #248]	; (80029dc <HAL_RCC_OscConfig+0x680>)
 80028e2:	400a      	ands	r2, r1
 80028e4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2220      	movs	r2, #32
 80028ec:	4013      	ands	r3, r2
 80028ee:	d049      	beq.n	8002984 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	699b      	ldr	r3, [r3, #24]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d026      	beq.n	8002946 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028f8:	4b33      	ldr	r3, [pc, #204]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	4b32      	ldr	r3, [pc, #200]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80028fe:	2101      	movs	r1, #1
 8002900:	430a      	orrs	r2, r1
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002908:	4b2f      	ldr	r3, [pc, #188]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800290a:	2101      	movs	r1, #1
 800290c:	430a      	orrs	r2, r1
 800290e:	635a      	str	r2, [r3, #52]	; 0x34
 8002910:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <HAL_RCC_OscConfig+0x684>)
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	4b32      	ldr	r3, [pc, #200]	; (80029e0 <HAL_RCC_OscConfig+0x684>)
 8002916:	2180      	movs	r1, #128	; 0x80
 8002918:	0189      	lsls	r1, r1, #6
 800291a:	430a      	orrs	r2, r1
 800291c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291e:	f7fe fbc9 	bl	80010b4 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002928:	f7fe fbc4 	bl	80010b4 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b02      	cmp	r3, #2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0c9      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	2202      	movs	r2, #2
 8002940:	4013      	ands	r3, r2
 8002942:	d0f1      	beq.n	8002928 <HAL_RCC_OscConfig+0x5cc>
 8002944:	e01e      	b.n	8002984 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800294c:	2101      	movs	r1, #1
 800294e:	438a      	bics	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_RCC_OscConfig+0x684>)
 8002954:	6a1a      	ldr	r2, [r3, #32]
 8002956:	4b22      	ldr	r3, [pc, #136]	; (80029e0 <HAL_RCC_OscConfig+0x684>)
 8002958:	4922      	ldr	r1, [pc, #136]	; (80029e4 <HAL_RCC_OscConfig+0x688>)
 800295a:	400a      	ands	r2, r1
 800295c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295e:	f7fe fba9 	bl	80010b4 <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002968:	f7fe fba4 	bl	80010b4 <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e0a9      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2202      	movs	r2, #2
 8002980:	4013      	ands	r3, r2
 8002982:	d1f1      	bne.n	8002968 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d100      	bne.n	800298e <HAL_RCC_OscConfig+0x632>
 800298c:	e09e      	b.n	8002acc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	2b0c      	cmp	r3, #12
 8002992:	d100      	bne.n	8002996 <HAL_RCC_OscConfig+0x63a>
 8002994:	e077      	b.n	8002a86 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299a:	2b02      	cmp	r3, #2
 800299c:	d158      	bne.n	8002a50 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800299e:	4b0a      	ldr	r3, [pc, #40]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_OscConfig+0x66c>)
 80029a4:	4910      	ldr	r1, [pc, #64]	; (80029e8 <HAL_RCC_OscConfig+0x68c>)
 80029a6:	400a      	ands	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe fb83 	bl	80010b4 <HAL_GetTick>
 80029ae:	0003      	movs	r3, r0
 80029b0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029b2:	e01b      	b.n	80029ec <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fb7e 	bl	80010b4 <HAL_GetTick>
 80029b8:	0002      	movs	r2, r0
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d914      	bls.n	80029ec <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e083      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40021000 	.word	0x40021000
 80029cc:	fffffeff 	.word	0xfffffeff
 80029d0:	40007000 	.word	0x40007000
 80029d4:	fffffbff 	.word	0xfffffbff
 80029d8:	00001388 	.word	0x00001388
 80029dc:	efffffff 	.word	0xefffffff
 80029e0:	40010000 	.word	0x40010000
 80029e4:	ffffdfff 	.word	0xffffdfff
 80029e8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029ec:	4b3a      	ldr	r3, [pc, #232]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	049b      	lsls	r3, r3, #18
 80029f4:	4013      	ands	r3, r2
 80029f6:	d1dd      	bne.n	80029b4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029f8:	4b37      	ldr	r3, [pc, #220]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a37      	ldr	r2, [pc, #220]	; (8002adc <HAL_RCC_OscConfig+0x780>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	0019      	movs	r1, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a10:	431a      	orrs	r2, r3
 8002a12:	4b31      	ldr	r3, [pc, #196]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a14:	430a      	orrs	r2, r1
 8002a16:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a18:	4b2f      	ldr	r3, [pc, #188]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a1e:	2180      	movs	r1, #128	; 0x80
 8002a20:	0449      	lsls	r1, r1, #17
 8002a22:	430a      	orrs	r2, r1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fb45 	bl	80010b4 <HAL_GetTick>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a30:	f7fe fb40 	bl	80010b4 <HAL_GetTick>
 8002a34:	0002      	movs	r2, r0
 8002a36:	69bb      	ldr	r3, [r7, #24]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e045      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	; 0x80
 8002a48:	049b      	lsls	r3, r3, #18
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x6d4>
 8002a4e:	e03d      	b.n	8002acc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4b20      	ldr	r3, [pc, #128]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a56:	4922      	ldr	r1, [pc, #136]	; (8002ae0 <HAL_RCC_OscConfig+0x784>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fe fb2a 	bl	80010b4 <HAL_GetTick>
 8002a60:	0003      	movs	r3, r0
 8002a62:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a66:	f7fe fb25 	bl	80010b4 <HAL_GetTick>
 8002a6a:	0002      	movs	r2, r0
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e02a      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	049b      	lsls	r3, r3, #18
 8002a80:	4013      	ands	r3, r2
 8002a82:	d1f0      	bne.n	8002a66 <HAL_RCC_OscConfig+0x70a>
 8002a84:	e022      	b.n	8002acc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e01d      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a92:	4b11      	ldr	r3, [pc, #68]	; (8002ad8 <HAL_RCC_OscConfig+0x77c>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	401a      	ands	r2, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d10f      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	23f0      	movs	r3, #240	; 0xf0
 8002aac:	039b      	lsls	r3, r3, #14
 8002aae:	401a      	ands	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d107      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	23c0      	movs	r3, #192	; 0xc0
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	401a      	ands	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b00a      	add	sp, #40	; 0x28
 8002ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	ff02ffff 	.word	0xff02ffff
 8002ae0:	feffffff 	.word	0xfeffffff

08002ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b5b0      	push	{r4, r5, r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e128      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b96      	ldr	r3, [pc, #600]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d91e      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b93      	ldr	r3, [pc, #588]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b90      	ldr	r3, [pc, #576]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b18:	f7fe facc 	bl	80010b4 <HAL_GetTick>
 8002b1c:	0003      	movs	r3, r0
 8002b1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b20:	e009      	b.n	8002b36 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b22:	f7fe fac7 	bl	80010b4 <HAL_GetTick>
 8002b26:	0002      	movs	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	4a8a      	ldr	r2, [pc, #552]	; (8002d58 <HAL_RCC_ClockConfig+0x274>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e109      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b87      	ldr	r3, [pc, #540]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d1ee      	bne.n	8002b22 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2202      	movs	r2, #2
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d009      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4e:	4b83      	ldr	r3, [pc, #524]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	22f0      	movs	r2, #240	; 0xf0
 8002b54:	4393      	bics	r3, r2
 8002b56:	0019      	movs	r1, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	4b7f      	ldr	r3, [pc, #508]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2201      	movs	r2, #1
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d100      	bne.n	8002b6e <HAL_RCC_ClockConfig+0x8a>
 8002b6c:	e089      	b.n	8002c82 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b76:	4b79      	ldr	r3, [pc, #484]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	2380      	movs	r3, #128	; 0x80
 8002b7c:	029b      	lsls	r3, r3, #10
 8002b7e:	4013      	ands	r3, r2
 8002b80:	d120      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0e1      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b8e:	4b73      	ldr	r3, [pc, #460]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	; 0x80
 8002b94:	049b      	lsls	r3, r3, #18
 8002b96:	4013      	ands	r3, r2
 8002b98:	d114      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e0d5      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d106      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2204      	movs	r2, #4
 8002bac:	4013      	ands	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0ca      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002bb4:	4b69      	ldr	r3, [pc, #420]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0c2      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bc4:	4b65      	ldr	r3, [pc, #404]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	2203      	movs	r2, #3
 8002bca:	4393      	bics	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685a      	ldr	r2, [r3, #4]
 8002bd2:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fa6c 	bl	80010b4 <HAL_GetTick>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d111      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002be8:	e009      	b.n	8002bfe <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bea:	f7fe fa63 	bl	80010b4 <HAL_GetTick>
 8002bee:	0002      	movs	r2, r0
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	4a58      	ldr	r2, [pc, #352]	; (8002d58 <HAL_RCC_ClockConfig+0x274>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e0a5      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bfe:	4b57      	ldr	r3, [pc, #348]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	220c      	movs	r2, #12
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d1ef      	bne.n	8002bea <HAL_RCC_ClockConfig+0x106>
 8002c0a:	e03a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b03      	cmp	r3, #3
 8002c12:	d111      	bne.n	8002c38 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c14:	e009      	b.n	8002c2a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c16:	f7fe fa4d 	bl	80010b4 <HAL_GetTick>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	4a4d      	ldr	r2, [pc, #308]	; (8002d58 <HAL_RCC_ClockConfig+0x274>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e08f      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c2a:	4b4c      	ldr	r3, [pc, #304]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	220c      	movs	r2, #12
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b0c      	cmp	r3, #12
 8002c34:	d1ef      	bne.n	8002c16 <HAL_RCC_ClockConfig+0x132>
 8002c36:	e024      	b.n	8002c82 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d11b      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c40:	e009      	b.n	8002c56 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c42:	f7fe fa37 	bl	80010b4 <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	4a42      	ldr	r2, [pc, #264]	; (8002d58 <HAL_RCC_ClockConfig+0x274>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e079      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c56:	4b41      	ldr	r3, [pc, #260]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	220c      	movs	r2, #12
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	2b04      	cmp	r3, #4
 8002c60:	d1ef      	bne.n	8002c42 <HAL_RCC_ClockConfig+0x15e>
 8002c62:	e00e      	b.n	8002c82 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c64:	f7fe fa26 	bl	80010b4 <HAL_GetTick>
 8002c68:	0002      	movs	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <HAL_RCC_ClockConfig+0x274>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e068      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	220c      	movs	r2, #12
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c82:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2201      	movs	r2, #1
 8002c88:	4013      	ands	r3, r2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d21e      	bcs.n	8002cce <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c90:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4393      	bics	r3, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	4b2e      	ldr	r3, [pc, #184]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ca2:	f7fe fa07 	bl	80010b4 <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	e009      	b.n	8002cc0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fa02 	bl	80010b4 <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	4a28      	ldr	r2, [pc, #160]	; (8002d58 <HAL_RCC_ClockConfig+0x274>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e044      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_ClockConfig+0x270>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d1ee      	bne.n	8002cac <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d009      	beq.n	8002cec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd8:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4a20      	ldr	r2, [pc, #128]	; (8002d60 <HAL_RCC_ClockConfig+0x27c>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	0019      	movs	r1, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cf6:	4b19      	ldr	r3, [pc, #100]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002cf8:	68db      	ldr	r3, [r3, #12]
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	; (8002d64 <HAL_RCC_ClockConfig+0x280>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	0019      	movs	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	00da      	lsls	r2, r3, #3
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d0c:	f000 f832 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8002d10:	0001      	movs	r1, r0
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_ClockConfig+0x278>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	091b      	lsrs	r3, r3, #4
 8002d18:	220f      	movs	r2, #15
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	4a12      	ldr	r2, [pc, #72]	; (8002d68 <HAL_RCC_ClockConfig+0x284>)
 8002d1e:	5cd3      	ldrb	r3, [r2, r3]
 8002d20:	000a      	movs	r2, r1
 8002d22:	40da      	lsrs	r2, r3
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_ClockConfig+0x288>)
 8002d26:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d28:	4b11      	ldr	r3, [pc, #68]	; (8002d70 <HAL_RCC_ClockConfig+0x28c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	250b      	movs	r5, #11
 8002d2e:	197c      	adds	r4, r7, r5
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7fe f979 	bl	8001028 <HAL_InitTick>
 8002d36:	0003      	movs	r3, r0
 8002d38:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d3a:	197b      	adds	r3, r7, r5
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002d42:	197b      	adds	r3, r7, r5
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	e000      	b.n	8002d4a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bdb0      	pop	{r4, r5, r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	40022000 	.word	0x40022000
 8002d58:	00001388 	.word	0x00001388
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	fffff8ff 	.word	0xfffff8ff
 8002d64:	ffffc7ff 	.word	0xffffc7ff
 8002d68:	08004d50 	.word	0x08004d50
 8002d6c:	2000000c 	.word	0x2000000c
 8002d70:	20000010 	.word	0x20000010

08002d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b08e      	sub	sp, #56	; 0x38
 8002d78:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d7a:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_GetSysClockFreq+0x138>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d82:	230c      	movs	r3, #12
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b0c      	cmp	r3, #12
 8002d88:	d014      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x40>
 8002d8a:	d900      	bls.n	8002d8e <HAL_RCC_GetSysClockFreq+0x1a>
 8002d8c:	e07b      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x112>
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d002      	beq.n	8002d98 <HAL_RCC_GetSysClockFreq+0x24>
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d00b      	beq.n	8002dae <HAL_RCC_GetSysClockFreq+0x3a>
 8002d96:	e076      	b.n	8002e86 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d98:	4b44      	ldr	r3, [pc, #272]	; (8002eac <HAL_RCC_GetSysClockFreq+0x138>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2210      	movs	r2, #16
 8002d9e:	4013      	ands	r3, r2
 8002da0:	d002      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002da2:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002da4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002da6:	e07c      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002da8:	4b42      	ldr	r3, [pc, #264]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002dac:	e079      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002db0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002db2:	e076      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	0c9a      	lsrs	r2, r3, #18
 8002db8:	230f      	movs	r3, #15
 8002dba:	401a      	ands	r2, r3
 8002dbc:	4b3f      	ldr	r3, [pc, #252]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x148>)
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	0d9a      	lsrs	r2, r3, #22
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	4013      	ands	r3, r2
 8002dca:	3301      	adds	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <HAL_RCC_GetSysClockFreq+0x138>)
 8002dd0:	68da      	ldr	r2, [r3, #12]
 8002dd2:	2380      	movs	r3, #128	; 0x80
 8002dd4:	025b      	lsls	r3, r3, #9
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d01a      	beq.n	8002e10 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	61bb      	str	r3, [r7, #24]
 8002dde:	2300      	movs	r3, #0
 8002de0:	61fb      	str	r3, [r7, #28]
 8002de2:	4a35      	ldr	r2, [pc, #212]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002de4:	2300      	movs	r3, #0
 8002de6:	69b8      	ldr	r0, [r7, #24]
 8002de8:	69f9      	ldr	r1, [r7, #28]
 8002dea:	f7fd fa43 	bl	8000274 <__aeabi_lmul>
 8002dee:	0002      	movs	r2, r0
 8002df0:	000b      	movs	r3, r1
 8002df2:	0010      	movs	r0, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	613b      	str	r3, [r7, #16]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	617b      	str	r3, [r7, #20]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f7fd fa17 	bl	8000234 <__aeabi_uldivmod>
 8002e06:	0002      	movs	r2, r0
 8002e08:	000b      	movs	r3, r1
 8002e0a:	0013      	movs	r3, r2
 8002e0c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e0e:	e037      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002e10:	4b26      	ldr	r3, [pc, #152]	; (8002eac <HAL_RCC_GetSysClockFreq+0x138>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2210      	movs	r2, #16
 8002e16:	4013      	ands	r3, r2
 8002e18:	d01a      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	60fb      	str	r3, [r7, #12]
 8002e22:	4a23      	ldr	r2, [pc, #140]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e24:	2300      	movs	r3, #0
 8002e26:	68b8      	ldr	r0, [r7, #8]
 8002e28:	68f9      	ldr	r1, [r7, #12]
 8002e2a:	f7fd fa23 	bl	8000274 <__aeabi_lmul>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	000b      	movs	r3, r1
 8002e32:	0010      	movs	r0, r2
 8002e34:	0019      	movs	r1, r3
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	607b      	str	r3, [r7, #4]
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f7fd f9f7 	bl	8000234 <__aeabi_uldivmod>
 8002e46:	0002      	movs	r2, r0
 8002e48:	000b      	movs	r3, r1
 8002e4a:	0013      	movs	r3, r2
 8002e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e4e:	e017      	b.n	8002e80 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	0018      	movs	r0, r3
 8002e54:	2300      	movs	r3, #0
 8002e56:	0019      	movs	r1, r3
 8002e58:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f7fd fa0a 	bl	8000274 <__aeabi_lmul>
 8002e60:	0002      	movs	r2, r0
 8002e62:	000b      	movs	r3, r1
 8002e64:	0010      	movs	r0, r2
 8002e66:	0019      	movs	r1, r3
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	001c      	movs	r4, r3
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	001d      	movs	r5, r3
 8002e70:	0022      	movs	r2, r4
 8002e72:	002b      	movs	r3, r5
 8002e74:	f7fd f9de 	bl	8000234 <__aeabi_uldivmod>
 8002e78:	0002      	movs	r2, r0
 8002e7a:	000b      	movs	r3, r1
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e82:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e84:	e00d      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e86:	4b09      	ldr	r3, [pc, #36]	; (8002eac <HAL_RCC_GetSysClockFreq+0x138>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0b5b      	lsrs	r3, r3, #13
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	4013      	ands	r3, r2
 8002e90:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	3301      	adds	r3, #1
 8002e96:	2280      	movs	r2, #128	; 0x80
 8002e98:	0212      	lsls	r2, r2, #8
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002ea0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b00e      	add	sp, #56	; 0x38
 8002eaa:	bdb0      	pop	{r4, r5, r7, pc}
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	003d0900 	.word	0x003d0900
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	007a1200 	.word	0x007a1200
 8002ebc:	08004d68 	.word	0x08004d68

08002ec0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec4:	4b02      	ldr	r3, [pc, #8]	; (8002ed0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
}
 8002ec8:	0018      	movs	r0, r3
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	2000000c 	.word	0x2000000c

08002ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed8:	f7ff fff2 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002edc:	0001      	movs	r1, r0
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	0a1b      	lsrs	r3, r3, #8
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	40d9      	lsrs	r1, r3
 8002eee:	000b      	movs	r3, r1
}
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	46c0      	nop			; (mov r8, r8)
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	08004d60 	.word	0x08004d60

08002f00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f04:	f7ff ffdc 	bl	8002ec0 <HAL_RCC_GetHCLKFreq>
 8002f08:	0001      	movs	r1, r0
 8002f0a:	4b06      	ldr	r3, [pc, #24]	; (8002f24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	0adb      	lsrs	r3, r3, #11
 8002f10:	2207      	movs	r2, #7
 8002f12:	4013      	ands	r3, r2
 8002f14:	4a04      	ldr	r2, [pc, #16]	; (8002f28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f16:	5cd3      	ldrb	r3, [r2, r3]
 8002f18:	40d9      	lsrs	r1, r3
 8002f1a:	000b      	movs	r3, r1
}
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	40021000 	.word	0x40021000
 8002f28:	08004d60 	.word	0x08004d60

08002f2c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002f34:	2317      	movs	r3, #23
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	2200      	movs	r2, #0
 8002f3a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2220      	movs	r2, #32
 8002f42:	4013      	ands	r3, r2
 8002f44:	d106      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	4013      	ands	r3, r2
 8002f50:	d100      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002f52:	e0d9      	b.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f54:	4b9c      	ldr	r3, [pc, #624]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	055b      	lsls	r3, r3, #21
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d10a      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b99      	ldr	r3, [pc, #612]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f64:	4b98      	ldr	r3, [pc, #608]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0549      	lsls	r1, r1, #21
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f6e:	2317      	movs	r3, #23
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	2201      	movs	r2, #1
 8002f74:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f76:	4b95      	ldr	r3, [pc, #596]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	4013      	ands	r3, r2
 8002f80:	d11a      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f82:	4b92      	ldr	r3, [pc, #584]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	4b91      	ldr	r3, [pc, #580]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002f88:	2180      	movs	r1, #128	; 0x80
 8002f8a:	0049      	lsls	r1, r1, #1
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f90:	f7fe f890 	bl	80010b4 <HAL_GetTick>
 8002f94:	0003      	movs	r3, r0
 8002f96:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f98:	e008      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f9a:	f7fe f88b 	bl	80010b4 <HAL_GetTick>
 8002f9e:	0002      	movs	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b64      	cmp	r3, #100	; 0x64
 8002fa6:	d901      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e108      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fac:	4b87      	ldr	r3, [pc, #540]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d0f0      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002fb8:	4b83      	ldr	r3, [pc, #524]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	23c0      	movs	r3, #192	; 0xc0
 8002fbe:	039b      	lsls	r3, r3, #14
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685a      	ldr	r2, [r3, #4]
 8002fc8:	23c0      	movs	r3, #192	; 0xc0
 8002fca:	039b      	lsls	r3, r3, #14
 8002fcc:	4013      	ands	r3, r2
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	23c0      	movs	r3, #192	; 0xc0
 8002fda:	039b      	lsls	r3, r3, #14
 8002fdc:	4013      	ands	r3, r2
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d013      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	23c0      	movs	r3, #192	; 0xc0
 8002fea:	029b      	lsls	r3, r3, #10
 8002fec:	401a      	ands	r2, r3
 8002fee:	23c0      	movs	r3, #192	; 0xc0
 8002ff0:	029b      	lsls	r3, r3, #10
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d10a      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ff6:	4b74      	ldr	r3, [pc, #464]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	2380      	movs	r3, #128	; 0x80
 8002ffc:	029b      	lsls	r3, r3, #10
 8002ffe:	401a      	ands	r2, r3
 8003000:	2380      	movs	r3, #128	; 0x80
 8003002:	029b      	lsls	r3, r3, #10
 8003004:	429a      	cmp	r2, r3
 8003006:	d101      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d8      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800300c:	4b6e      	ldr	r3, [pc, #440]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800300e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003010:	23c0      	movs	r3, #192	; 0xc0
 8003012:	029b      	lsls	r3, r3, #10
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d049      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685a      	ldr	r2, [r3, #4]
 8003022:	23c0      	movs	r3, #192	; 0xc0
 8003024:	029b      	lsls	r3, r3, #10
 8003026:	4013      	ands	r3, r2
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	429a      	cmp	r2, r3
 800302c:	d004      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2220      	movs	r2, #32
 8003034:	4013      	ands	r3, r2
 8003036:	d10d      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	23c0      	movs	r3, #192	; 0xc0
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4013      	ands	r3, r2
 8003042:	68fa      	ldr	r2, [r7, #12]
 8003044:	429a      	cmp	r2, r3
 8003046:	d034      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	4013      	ands	r3, r2
 8003052:	d02e      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003054:	4b5c      	ldr	r3, [pc, #368]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	4a5d      	ldr	r2, [pc, #372]	; (80031d0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800305a:	4013      	ands	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800305e:	4b5a      	ldr	r3, [pc, #360]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003062:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003064:	2180      	movs	r1, #128	; 0x80
 8003066:	0309      	lsls	r1, r1, #12
 8003068:	430a      	orrs	r2, r1
 800306a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800306c:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800306e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003070:	4b55      	ldr	r3, [pc, #340]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003072:	4958      	ldr	r1, [pc, #352]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8003074:	400a      	ands	r2, r1
 8003076:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003078:	4b53      	ldr	r3, [pc, #332]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d014      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fe f814 	bl	80010b4 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003090:	e009      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fe f80f 	bl	80010b4 <HAL_GetTick>
 8003096:	0002      	movs	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	4a4e      	ldr	r2, [pc, #312]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e08b      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80030a6:	4b48      	ldr	r3, [pc, #288]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4013      	ands	r3, r2
 80030b0:	d0ef      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	23c0      	movs	r3, #192	; 0xc0
 80030b8:	029b      	lsls	r3, r3, #10
 80030ba:	401a      	ands	r2, r3
 80030bc:	23c0      	movs	r3, #192	; 0xc0
 80030be:	029b      	lsls	r3, r3, #10
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d10c      	bne.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80030c4:	4b40      	ldr	r3, [pc, #256]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a44      	ldr	r2, [pc, #272]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80030ca:	4013      	ands	r3, r2
 80030cc:	0019      	movs	r1, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	23c0      	movs	r3, #192	; 0xc0
 80030d4:	039b      	lsls	r3, r3, #14
 80030d6:	401a      	ands	r2, r3
 80030d8:	4b3b      	ldr	r3, [pc, #236]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	4b3a      	ldr	r3, [pc, #232]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	23c0      	movs	r3, #192	; 0xc0
 80030e8:	029b      	lsls	r3, r3, #10
 80030ea:	401a      	ands	r2, r3
 80030ec:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030ee:	430a      	orrs	r2, r1
 80030f0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030f2:	2317      	movs	r3, #23
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80030fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003100:	4b31      	ldr	r3, [pc, #196]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003102:	4937      	ldr	r1, [pc, #220]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8003104:	400a      	ands	r2, r1
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2201      	movs	r2, #1
 800310e:	4013      	ands	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003112:	4b2d      	ldr	r3, [pc, #180]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003116:	2203      	movs	r2, #3
 8003118:	4393      	bics	r3, r2
 800311a:	0019      	movs	r1, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	4b29      	ldr	r3, [pc, #164]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003122:	430a      	orrs	r2, r1
 8003124:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2202      	movs	r2, #2
 800312c:	4013      	ands	r3, r2
 800312e:	d009      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003130:	4b25      	ldr	r3, [pc, #148]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003134:	220c      	movs	r2, #12
 8003136:	4393      	bics	r3, r2
 8003138:	0019      	movs	r1, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	691a      	ldr	r2, [r3, #16]
 800313e:	4b22      	ldr	r3, [pc, #136]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003140:	430a      	orrs	r2, r1
 8003142:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2204      	movs	r2, #4
 800314a:	4013      	ands	r3, r2
 800314c:	d009      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800314e:	4b1e      	ldr	r3, [pc, #120]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	4a24      	ldr	r2, [pc, #144]	; (80031e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8003154:	4013      	ands	r3, r2
 8003156:	0019      	movs	r1, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800315e:	430a      	orrs	r2, r1
 8003160:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	4013      	ands	r3, r2
 800316a:	d009      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800316c:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800316e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003170:	4a1d      	ldr	r2, [pc, #116]	; (80031e8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8003172:	4013      	ands	r3, r2
 8003174:	0019      	movs	r1, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699a      	ldr	r2, [r3, #24]
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800317c:	430a      	orrs	r2, r1
 800317e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2240      	movs	r2, #64	; 0x40
 8003186:	4013      	ands	r3, r2
 8003188:	d009      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800318a:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800318c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800319a:	430a      	orrs	r2, r1
 800319c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2280      	movs	r2, #128	; 0x80
 80031a4:	4013      	ands	r3, r2
 80031a6:	d009      	beq.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80031a8:	4b07      	ldr	r3, [pc, #28]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80031ae:	4013      	ands	r3, r2
 80031b0:	0019      	movs	r1, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69da      	ldr	r2, [r3, #28]
 80031b6:	4b04      	ldr	r3, [pc, #16]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80031b8:	430a      	orrs	r2, r1
 80031ba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b006      	add	sp, #24
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	46c0      	nop			; (mov r8, r8)
 80031c8:	40021000 	.word	0x40021000
 80031cc:	40007000 	.word	0x40007000
 80031d0:	fffcffff 	.word	0xfffcffff
 80031d4:	fff7ffff 	.word	0xfff7ffff
 80031d8:	00001388 	.word	0x00001388
 80031dc:	ffcfffff 	.word	0xffcfffff
 80031e0:	efffffff 	.word	0xefffffff
 80031e4:	fffff3ff 	.word	0xfffff3ff
 80031e8:	ffffcfff 	.word	0xffffcfff
 80031ec:	fbffffff 	.word	0xfbffffff
 80031f0:	fff3ffff 	.word	0xfff3ffff

080031f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e044      	b.n	8003290 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320a:	2b00      	cmp	r3, #0
 800320c:	d107      	bne.n	800321e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2274      	movs	r2, #116	; 0x74
 8003212:	2100      	movs	r1, #0
 8003214:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	0018      	movs	r0, r3
 800321a:	f7fd fdbf 	bl	8000d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2224      	movs	r2, #36	; 0x24
 8003222:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2101      	movs	r1, #1
 8003230:	438a      	bics	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	0018      	movs	r0, r3
 8003238:	f000 f8d8 	bl	80033ec <UART_SetConfig>
 800323c:	0003      	movs	r3, r0
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e024      	b.n	8003290 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	2b00      	cmp	r3, #0
 800324c:	d003      	beq.n	8003256 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	0018      	movs	r0, r3
 8003252:	f000 fb4f 	bl	80038f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685a      	ldr	r2, [r3, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	490d      	ldr	r1, [pc, #52]	; (8003298 <HAL_UART_Init+0xa4>)
 8003262:	400a      	ands	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	212a      	movs	r1, #42	; 0x2a
 8003272:	438a      	bics	r2, r1
 8003274:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2101      	movs	r1, #1
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fbe7 	bl	8003a5c <UART_CheckIdleState>
 800328e:	0003      	movs	r3, r0
}
 8003290:	0018      	movs	r0, r3
 8003292:	46bd      	mov	sp, r7
 8003294:	b002      	add	sp, #8
 8003296:	bd80      	pop	{r7, pc}
 8003298:	ffffb7ff 	.word	0xffffb7ff

0800329c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b08a      	sub	sp, #40	; 0x28
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	1dbb      	adds	r3, r7, #6
 80032aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032b0:	2b20      	cmp	r3, #32
 80032b2:	d000      	beq.n	80032b6 <HAL_UART_Transmit+0x1a>
 80032b4:	e095      	b.n	80033e2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_UART_Transmit+0x28>
 80032bc:	1dbb      	adds	r3, r7, #6
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d101      	bne.n	80032c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	e08d      	b.n	80033e4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	015b      	lsls	r3, r3, #5
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d109      	bne.n	80032e8 <HAL_UART_Transmit+0x4c>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2201      	movs	r2, #1
 80032e0:	4013      	ands	r3, r2
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e07d      	b.n	80033e4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2274      	movs	r2, #116	; 0x74
 80032ec:	5c9b      	ldrb	r3, [r3, r2]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_UART_Transmit+0x5a>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e076      	b.n	80033e4 <HAL_UART_Transmit+0x148>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2274      	movs	r2, #116	; 0x74
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	2100      	movs	r1, #0
 8003304:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2221      	movs	r2, #33	; 0x21
 800330a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800330c:	f7fd fed2 	bl	80010b4 <HAL_GetTick>
 8003310:	0003      	movs	r3, r0
 8003312:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1dba      	adds	r2, r7, #6
 8003318:	2150      	movs	r1, #80	; 0x50
 800331a:	8812      	ldrh	r2, [r2, #0]
 800331c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1dba      	adds	r2, r7, #6
 8003322:	2152      	movs	r1, #82	; 0x52
 8003324:	8812      	ldrh	r2, [r2, #0]
 8003326:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	015b      	lsls	r3, r3, #5
 8003330:	429a      	cmp	r2, r3
 8003332:	d108      	bne.n	8003346 <HAL_UART_Transmit+0xaa>
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e003      	b.n	800334e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2274      	movs	r2, #116	; 0x74
 8003352:	2100      	movs	r1, #0
 8003354:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003356:	e02c      	b.n	80033b2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	0013      	movs	r3, r2
 8003362:	2200      	movs	r2, #0
 8003364:	2180      	movs	r1, #128	; 0x80
 8003366:	f000 fbc1 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 800336a:	1e03      	subs	r3, r0, #0
 800336c:	d001      	beq.n	8003372 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e038      	b.n	80033e4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	881b      	ldrh	r3, [r3, #0]
 800337c:	001a      	movs	r2, r3
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	05d2      	lsls	r2, r2, #23
 8003384:	0dd2      	lsrs	r2, r2, #23
 8003386:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	3302      	adds	r3, #2
 800338c:	61bb      	str	r3, [r7, #24]
 800338e:	e007      	b.n	80033a0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3301      	adds	r3, #1
 800339e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2252      	movs	r2, #82	; 0x52
 80033a4:	5a9b      	ldrh	r3, [r3, r2]
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b299      	uxth	r1, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2252      	movs	r2, #82	; 0x52
 80033b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2252      	movs	r2, #82	; 0x52
 80033b6:	5a9b      	ldrh	r3, [r3, r2]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1cc      	bne.n	8003358 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	0013      	movs	r3, r2
 80033c8:	2200      	movs	r2, #0
 80033ca:	2140      	movs	r1, #64	; 0x40
 80033cc:	f000 fb8e 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 80033d0:	1e03      	subs	r3, r0, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e005      	b.n	80033e4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	e000      	b.n	80033e4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80033e2:	2302      	movs	r3, #2
  }
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b008      	add	sp, #32
 80033ea:	bd80      	pop	{r7, pc}

080033ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033ec:	b5b0      	push	{r4, r5, r7, lr}
 80033ee:	b08e      	sub	sp, #56	; 0x38
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033f4:	231a      	movs	r3, #26
 80033f6:	2218      	movs	r2, #24
 80033f8:	189b      	adds	r3, r3, r2
 80033fa:	19db      	adds	r3, r3, r7
 80033fc:	2200      	movs	r2, #0
 80033fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	4313      	orrs	r3, r2
 8003416:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4ac6      	ldr	r2, [pc, #792]	; (8003738 <UART_SetConfig+0x34c>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800342a:	430a      	orrs	r2, r1
 800342c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4ac1      	ldr	r2, [pc, #772]	; (800373c <UART_SetConfig+0x350>)
 8003436:	4013      	ands	r3, r2
 8003438:	0019      	movs	r1, r3
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	430a      	orrs	r2, r1
 8003444:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4abb      	ldr	r2, [pc, #748]	; (8003740 <UART_SetConfig+0x354>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800345c:	4313      	orrs	r3, r2
 800345e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	4ab7      	ldr	r2, [pc, #732]	; (8003744 <UART_SetConfig+0x358>)
 8003468:	4013      	ands	r3, r2
 800346a:	0019      	movs	r1, r3
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003472:	430a      	orrs	r2, r1
 8003474:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4ab3      	ldr	r2, [pc, #716]	; (8003748 <UART_SetConfig+0x35c>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d131      	bne.n	80034e4 <UART_SetConfig+0xf8>
 8003480:	4bb2      	ldr	r3, [pc, #712]	; (800374c <UART_SetConfig+0x360>)
 8003482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003484:	2203      	movs	r2, #3
 8003486:	4013      	ands	r3, r2
 8003488:	2b03      	cmp	r3, #3
 800348a:	d01d      	beq.n	80034c8 <UART_SetConfig+0xdc>
 800348c:	d823      	bhi.n	80034d6 <UART_SetConfig+0xea>
 800348e:	2b02      	cmp	r3, #2
 8003490:	d00c      	beq.n	80034ac <UART_SetConfig+0xc0>
 8003492:	d820      	bhi.n	80034d6 <UART_SetConfig+0xea>
 8003494:	2b00      	cmp	r3, #0
 8003496:	d002      	beq.n	800349e <UART_SetConfig+0xb2>
 8003498:	2b01      	cmp	r3, #1
 800349a:	d00e      	beq.n	80034ba <UART_SetConfig+0xce>
 800349c:	e01b      	b.n	80034d6 <UART_SetConfig+0xea>
 800349e:	231b      	movs	r3, #27
 80034a0:	2218      	movs	r2, #24
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	19db      	adds	r3, r3, r7
 80034a6:	2201      	movs	r2, #1
 80034a8:	701a      	strb	r2, [r3, #0]
 80034aa:	e09c      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80034ac:	231b      	movs	r3, #27
 80034ae:	2218      	movs	r2, #24
 80034b0:	189b      	adds	r3, r3, r2
 80034b2:	19db      	adds	r3, r3, r7
 80034b4:	2202      	movs	r2, #2
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e095      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80034ba:	231b      	movs	r3, #27
 80034bc:	2218      	movs	r2, #24
 80034be:	189b      	adds	r3, r3, r2
 80034c0:	19db      	adds	r3, r3, r7
 80034c2:	2204      	movs	r2, #4
 80034c4:	701a      	strb	r2, [r3, #0]
 80034c6:	e08e      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80034c8:	231b      	movs	r3, #27
 80034ca:	2218      	movs	r2, #24
 80034cc:	189b      	adds	r3, r3, r2
 80034ce:	19db      	adds	r3, r3, r7
 80034d0:	2208      	movs	r2, #8
 80034d2:	701a      	strb	r2, [r3, #0]
 80034d4:	e087      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80034d6:	231b      	movs	r3, #27
 80034d8:	2218      	movs	r2, #24
 80034da:	189b      	adds	r3, r3, r2
 80034dc:	19db      	adds	r3, r3, r7
 80034de:	2210      	movs	r2, #16
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	e080      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a99      	ldr	r2, [pc, #612]	; (8003750 <UART_SetConfig+0x364>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d131      	bne.n	8003552 <UART_SetConfig+0x166>
 80034ee:	4b97      	ldr	r3, [pc, #604]	; (800374c <UART_SetConfig+0x360>)
 80034f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f2:	220c      	movs	r2, #12
 80034f4:	4013      	ands	r3, r2
 80034f6:	2b0c      	cmp	r3, #12
 80034f8:	d01d      	beq.n	8003536 <UART_SetConfig+0x14a>
 80034fa:	d823      	bhi.n	8003544 <UART_SetConfig+0x158>
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00c      	beq.n	800351a <UART_SetConfig+0x12e>
 8003500:	d820      	bhi.n	8003544 <UART_SetConfig+0x158>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <UART_SetConfig+0x120>
 8003506:	2b04      	cmp	r3, #4
 8003508:	d00e      	beq.n	8003528 <UART_SetConfig+0x13c>
 800350a:	e01b      	b.n	8003544 <UART_SetConfig+0x158>
 800350c:	231b      	movs	r3, #27
 800350e:	2218      	movs	r2, #24
 8003510:	189b      	adds	r3, r3, r2
 8003512:	19db      	adds	r3, r3, r7
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e065      	b.n	80035e6 <UART_SetConfig+0x1fa>
 800351a:	231b      	movs	r3, #27
 800351c:	2218      	movs	r2, #24
 800351e:	189b      	adds	r3, r3, r2
 8003520:	19db      	adds	r3, r3, r7
 8003522:	2202      	movs	r2, #2
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	e05e      	b.n	80035e6 <UART_SetConfig+0x1fa>
 8003528:	231b      	movs	r3, #27
 800352a:	2218      	movs	r2, #24
 800352c:	189b      	adds	r3, r3, r2
 800352e:	19db      	adds	r3, r3, r7
 8003530:	2204      	movs	r2, #4
 8003532:	701a      	strb	r2, [r3, #0]
 8003534:	e057      	b.n	80035e6 <UART_SetConfig+0x1fa>
 8003536:	231b      	movs	r3, #27
 8003538:	2218      	movs	r2, #24
 800353a:	189b      	adds	r3, r3, r2
 800353c:	19db      	adds	r3, r3, r7
 800353e:	2208      	movs	r2, #8
 8003540:	701a      	strb	r2, [r3, #0]
 8003542:	e050      	b.n	80035e6 <UART_SetConfig+0x1fa>
 8003544:	231b      	movs	r3, #27
 8003546:	2218      	movs	r2, #24
 8003548:	189b      	adds	r3, r3, r2
 800354a:	19db      	adds	r3, r3, r7
 800354c:	2210      	movs	r2, #16
 800354e:	701a      	strb	r2, [r3, #0]
 8003550:	e049      	b.n	80035e6 <UART_SetConfig+0x1fa>
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <UART_SetConfig+0x354>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d13e      	bne.n	80035da <UART_SetConfig+0x1ee>
 800355c:	4b7b      	ldr	r3, [pc, #492]	; (800374c <UART_SetConfig+0x360>)
 800355e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003560:	23c0      	movs	r3, #192	; 0xc0
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	4013      	ands	r3, r2
 8003566:	22c0      	movs	r2, #192	; 0xc0
 8003568:	0112      	lsls	r2, r2, #4
 800356a:	4293      	cmp	r3, r2
 800356c:	d027      	beq.n	80035be <UART_SetConfig+0x1d2>
 800356e:	22c0      	movs	r2, #192	; 0xc0
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	4293      	cmp	r3, r2
 8003574:	d82a      	bhi.n	80035cc <UART_SetConfig+0x1e0>
 8003576:	2280      	movs	r2, #128	; 0x80
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	4293      	cmp	r3, r2
 800357c:	d011      	beq.n	80035a2 <UART_SetConfig+0x1b6>
 800357e:	2280      	movs	r2, #128	; 0x80
 8003580:	0112      	lsls	r2, r2, #4
 8003582:	4293      	cmp	r3, r2
 8003584:	d822      	bhi.n	80035cc <UART_SetConfig+0x1e0>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <UART_SetConfig+0x1a8>
 800358a:	2280      	movs	r2, #128	; 0x80
 800358c:	00d2      	lsls	r2, r2, #3
 800358e:	4293      	cmp	r3, r2
 8003590:	d00e      	beq.n	80035b0 <UART_SetConfig+0x1c4>
 8003592:	e01b      	b.n	80035cc <UART_SetConfig+0x1e0>
 8003594:	231b      	movs	r3, #27
 8003596:	2218      	movs	r2, #24
 8003598:	189b      	adds	r3, r3, r2
 800359a:	19db      	adds	r3, r3, r7
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
 80035a0:	e021      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80035a2:	231b      	movs	r3, #27
 80035a4:	2218      	movs	r2, #24
 80035a6:	189b      	adds	r3, r3, r2
 80035a8:	19db      	adds	r3, r3, r7
 80035aa:	2202      	movs	r2, #2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e01a      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80035b0:	231b      	movs	r3, #27
 80035b2:	2218      	movs	r2, #24
 80035b4:	189b      	adds	r3, r3, r2
 80035b6:	19db      	adds	r3, r3, r7
 80035b8:	2204      	movs	r2, #4
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	e013      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80035be:	231b      	movs	r3, #27
 80035c0:	2218      	movs	r2, #24
 80035c2:	189b      	adds	r3, r3, r2
 80035c4:	19db      	adds	r3, r3, r7
 80035c6:	2208      	movs	r2, #8
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	e00c      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80035cc:	231b      	movs	r3, #27
 80035ce:	2218      	movs	r2, #24
 80035d0:	189b      	adds	r3, r3, r2
 80035d2:	19db      	adds	r3, r3, r7
 80035d4:	2210      	movs	r2, #16
 80035d6:	701a      	strb	r2, [r3, #0]
 80035d8:	e005      	b.n	80035e6 <UART_SetConfig+0x1fa>
 80035da:	231b      	movs	r3, #27
 80035dc:	2218      	movs	r2, #24
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	19db      	adds	r3, r3, r7
 80035e2:	2210      	movs	r2, #16
 80035e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a55      	ldr	r2, [pc, #340]	; (8003740 <UART_SetConfig+0x354>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d000      	beq.n	80035f2 <UART_SetConfig+0x206>
 80035f0:	e084      	b.n	80036fc <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035f2:	231b      	movs	r3, #27
 80035f4:	2218      	movs	r2, #24
 80035f6:	189b      	adds	r3, r3, r2
 80035f8:	19db      	adds	r3, r3, r7
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d01d      	beq.n	800363c <UART_SetConfig+0x250>
 8003600:	dc20      	bgt.n	8003644 <UART_SetConfig+0x258>
 8003602:	2b04      	cmp	r3, #4
 8003604:	d015      	beq.n	8003632 <UART_SetConfig+0x246>
 8003606:	dc1d      	bgt.n	8003644 <UART_SetConfig+0x258>
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <UART_SetConfig+0x226>
 800360c:	2b02      	cmp	r3, #2
 800360e:	d005      	beq.n	800361c <UART_SetConfig+0x230>
 8003610:	e018      	b.n	8003644 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003612:	f7ff fc5f 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003616:	0003      	movs	r3, r0
 8003618:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800361a:	e01c      	b.n	8003656 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800361c:	4b4b      	ldr	r3, [pc, #300]	; (800374c <UART_SetConfig+0x360>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2210      	movs	r2, #16
 8003622:	4013      	ands	r3, r2
 8003624:	d002      	beq.n	800362c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003626:	4b4b      	ldr	r3, [pc, #300]	; (8003754 <UART_SetConfig+0x368>)
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800362a:	e014      	b.n	8003656 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800362c:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <UART_SetConfig+0x36c>)
 800362e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003630:	e011      	b.n	8003656 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003632:	f7ff fb9f 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 8003636:	0003      	movs	r3, r0
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800363a:	e00c      	b.n	8003656 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800363c:	2380      	movs	r3, #128	; 0x80
 800363e:	021b      	lsls	r3, r3, #8
 8003640:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003642:	e008      	b.n	8003656 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003648:	231a      	movs	r3, #26
 800364a:	2218      	movs	r2, #24
 800364c:	189b      	adds	r3, r3, r2
 800364e:	19db      	adds	r3, r3, r7
 8003650:	2201      	movs	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
        break;
 8003654:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003658:	2b00      	cmp	r3, #0
 800365a:	d100      	bne.n	800365e <UART_SetConfig+0x272>
 800365c:	e133      	b.n	80038c6 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	0013      	movs	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	189b      	adds	r3, r3, r2
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	429a      	cmp	r2, r3
 800366c:	d305      	bcc.n	800367a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003674:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003676:	429a      	cmp	r2, r3
 8003678:	d906      	bls.n	8003688 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 800367a:	231a      	movs	r3, #26
 800367c:	2218      	movs	r2, #24
 800367e:	189b      	adds	r3, r3, r2
 8003680:	19db      	adds	r3, r3, r7
 8003682:	2201      	movs	r2, #1
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e11e      	b.n	80038c6 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	000b      	movs	r3, r1
 8003696:	0e1b      	lsrs	r3, r3, #24
 8003698:	0010      	movs	r0, r2
 800369a:	0205      	lsls	r5, r0, #8
 800369c:	431d      	orrs	r5, r3
 800369e:	000b      	movs	r3, r1
 80036a0:	021c      	lsls	r4, r3, #8
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	68b8      	ldr	r0, [r7, #8]
 80036b0:	68f9      	ldr	r1, [r7, #12]
 80036b2:	1900      	adds	r0, r0, r4
 80036b4:	4169      	adcs	r1, r5
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	2300      	movs	r3, #0
 80036be:	607b      	str	r3, [r7, #4]
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f7fc fdb6 	bl	8000234 <__aeabi_uldivmod>
 80036c8:	0002      	movs	r2, r0
 80036ca:	000b      	movs	r3, r1
 80036cc:	0013      	movs	r3, r2
 80036ce:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036d2:	23c0      	movs	r3, #192	; 0xc0
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d309      	bcc.n	80036ee <UART_SetConfig+0x302>
 80036da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	035b      	lsls	r3, r3, #13
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d204      	bcs.n	80036ee <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036ea:	60da      	str	r2, [r3, #12]
 80036ec:	e0eb      	b.n	80038c6 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 80036ee:	231a      	movs	r3, #26
 80036f0:	2218      	movs	r2, #24
 80036f2:	189b      	adds	r3, r3, r2
 80036f4:	19db      	adds	r3, r3, r7
 80036f6:	2201      	movs	r2, #1
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e0e4      	b.n	80038c6 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	2380      	movs	r3, #128	; 0x80
 8003702:	021b      	lsls	r3, r3, #8
 8003704:	429a      	cmp	r2, r3
 8003706:	d000      	beq.n	800370a <UART_SetConfig+0x31e>
 8003708:	e086      	b.n	8003818 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 800370a:	231b      	movs	r3, #27
 800370c:	2218      	movs	r2, #24
 800370e:	189b      	adds	r3, r3, r2
 8003710:	19db      	adds	r3, r3, r7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	2b08      	cmp	r3, #8
 8003716:	d837      	bhi.n	8003788 <UART_SetConfig+0x39c>
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	4b10      	ldr	r3, [pc, #64]	; (800375c <UART_SetConfig+0x370>)
 800371c:	18d3      	adds	r3, r2, r3
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003722:	f7ff fbd7 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003726:	0003      	movs	r3, r0
 8003728:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800372a:	e036      	b.n	800379a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800372c:	f7ff fbe8 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 8003730:	0003      	movs	r3, r0
 8003732:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003734:	e031      	b.n	800379a <UART_SetConfig+0x3ae>
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	efff69f3 	.word	0xefff69f3
 800373c:	ffffcfff 	.word	0xffffcfff
 8003740:	40004800 	.word	0x40004800
 8003744:	fffff4ff 	.word	0xfffff4ff
 8003748:	40013800 	.word	0x40013800
 800374c:	40021000 	.word	0x40021000
 8003750:	40004400 	.word	0x40004400
 8003754:	003d0900 	.word	0x003d0900
 8003758:	00f42400 	.word	0x00f42400
 800375c:	08004d74 	.word	0x08004d74
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003760:	4b60      	ldr	r3, [pc, #384]	; (80038e4 <UART_SetConfig+0x4f8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2210      	movs	r2, #16
 8003766:	4013      	ands	r3, r2
 8003768:	d002      	beq.n	8003770 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800376a:	4b5f      	ldr	r3, [pc, #380]	; (80038e8 <UART_SetConfig+0x4fc>)
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800376e:	e014      	b.n	800379a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003770:	4b5e      	ldr	r3, [pc, #376]	; (80038ec <UART_SetConfig+0x500>)
 8003772:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003774:	e011      	b.n	800379a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003776:	f7ff fafd 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 800377a:	0003      	movs	r3, r0
 800377c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800377e:	e00c      	b.n	800379a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003786:	e008      	b.n	800379a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003788:	2300      	movs	r3, #0
 800378a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800378c:	231a      	movs	r3, #26
 800378e:	2218      	movs	r2, #24
 8003790:	189b      	adds	r3, r3, r2
 8003792:	19db      	adds	r3, r3, r7
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
        break;
 8003798:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800379a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d100      	bne.n	80037a2 <UART_SetConfig+0x3b6>
 80037a0:	e091      	b.n	80038c6 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	005a      	lsls	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	18d2      	adds	r2, r2, r3
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0019      	movs	r1, r3
 80037b4:	0010      	movs	r0, r2
 80037b6:	f7fc fcb1 	bl	800011c <__udivsi3>
 80037ba:	0003      	movs	r3, r0
 80037bc:	b29b      	uxth	r3, r3
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	2b0f      	cmp	r3, #15
 80037c4:	d921      	bls.n	800380a <UART_SetConfig+0x41e>
 80037c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	025b      	lsls	r3, r3, #9
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d21c      	bcs.n	800380a <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	200e      	movs	r0, #14
 80037d6:	2418      	movs	r4, #24
 80037d8:	1903      	adds	r3, r0, r4
 80037da:	19db      	adds	r3, r3, r7
 80037dc:	210f      	movs	r1, #15
 80037de:	438a      	bics	r2, r1
 80037e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	085b      	lsrs	r3, r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2207      	movs	r2, #7
 80037ea:	4013      	ands	r3, r2
 80037ec:	b299      	uxth	r1, r3
 80037ee:	1903      	adds	r3, r0, r4
 80037f0:	19db      	adds	r3, r3, r7
 80037f2:	1902      	adds	r2, r0, r4
 80037f4:	19d2      	adds	r2, r2, r7
 80037f6:	8812      	ldrh	r2, [r2, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	1902      	adds	r2, r0, r4
 8003802:	19d2      	adds	r2, r2, r7
 8003804:	8812      	ldrh	r2, [r2, #0]
 8003806:	60da      	str	r2, [r3, #12]
 8003808:	e05d      	b.n	80038c6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800380a:	231a      	movs	r3, #26
 800380c:	2218      	movs	r2, #24
 800380e:	189b      	adds	r3, r3, r2
 8003810:	19db      	adds	r3, r3, r7
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
 8003816:	e056      	b.n	80038c6 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003818:	231b      	movs	r3, #27
 800381a:	2218      	movs	r2, #24
 800381c:	189b      	adds	r3, r3, r2
 800381e:	19db      	adds	r3, r3, r7
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b08      	cmp	r3, #8
 8003824:	d822      	bhi.n	800386c <UART_SetConfig+0x480>
 8003826:	009a      	lsls	r2, r3, #2
 8003828:	4b31      	ldr	r3, [pc, #196]	; (80038f0 <UART_SetConfig+0x504>)
 800382a:	18d3      	adds	r3, r2, r3
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003830:	f7ff fb50 	bl	8002ed4 <HAL_RCC_GetPCLK1Freq>
 8003834:	0003      	movs	r3, r0
 8003836:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003838:	e021      	b.n	800387e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800383a:	f7ff fb61 	bl	8002f00 <HAL_RCC_GetPCLK2Freq>
 800383e:	0003      	movs	r3, r0
 8003840:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003842:	e01c      	b.n	800387e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003844:	4b27      	ldr	r3, [pc, #156]	; (80038e4 <UART_SetConfig+0x4f8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2210      	movs	r2, #16
 800384a:	4013      	ands	r3, r2
 800384c:	d002      	beq.n	8003854 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800384e:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <UART_SetConfig+0x4fc>)
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003852:	e014      	b.n	800387e <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <UART_SetConfig+0x500>)
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003858:	e011      	b.n	800387e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7ff fa8b 	bl	8002d74 <HAL_RCC_GetSysClockFreq>
 800385e:	0003      	movs	r3, r0
 8003860:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003862:	e00c      	b.n	800387e <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	021b      	lsls	r3, r3, #8
 8003868:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800386a:	e008      	b.n	800387e <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003870:	231a      	movs	r3, #26
 8003872:	2218      	movs	r2, #24
 8003874:	189b      	adds	r3, r3, r2
 8003876:	19db      	adds	r3, r3, r7
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
        break;
 800387c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	085a      	lsrs	r2, r3, #1
 800388a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388c:	18d2      	adds	r2, r2, r3
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	0019      	movs	r1, r3
 8003894:	0010      	movs	r0, r2
 8003896:	f7fc fc41 	bl	800011c <__udivsi3>
 800389a:	0003      	movs	r3, r0
 800389c:	b29b      	uxth	r3, r3
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a2:	2b0f      	cmp	r3, #15
 80038a4:	d909      	bls.n	80038ba <UART_SetConfig+0x4ce>
 80038a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	025b      	lsls	r3, r3, #9
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d204      	bcs.n	80038ba <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038b6:	60da      	str	r2, [r3, #12]
 80038b8:	e005      	b.n	80038c6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80038ba:	231a      	movs	r3, #26
 80038bc:	2218      	movs	r2, #24
 80038be:	189b      	adds	r3, r3, r2
 80038c0:	19db      	adds	r3, r3, r7
 80038c2:	2201      	movs	r2, #1
 80038c4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	2200      	movs	r2, #0
 80038ca:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	2200      	movs	r2, #0
 80038d0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80038d2:	231a      	movs	r3, #26
 80038d4:	2218      	movs	r2, #24
 80038d6:	189b      	adds	r3, r3, r2
 80038d8:	19db      	adds	r3, r3, r7
 80038da:	781b      	ldrb	r3, [r3, #0]
}
 80038dc:	0018      	movs	r0, r3
 80038de:	46bd      	mov	sp, r7
 80038e0:	b00e      	add	sp, #56	; 0x38
 80038e2:	bdb0      	pop	{r4, r5, r7, pc}
 80038e4:	40021000 	.word	0x40021000
 80038e8:	003d0900 	.word	0x003d0900
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	08004d98 	.word	0x08004d98

080038f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003900:	2201      	movs	r2, #1
 8003902:	4013      	ands	r3, r2
 8003904:	d00b      	beq.n	800391e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <UART_AdvFeatureConfig+0x144>)
 800390e:	4013      	ands	r3, r2
 8003910:	0019      	movs	r1, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	2202      	movs	r2, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d00b      	beq.n	8003940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4a43      	ldr	r2, [pc, #268]	; (8003a3c <UART_AdvFeatureConfig+0x148>)
 8003930:	4013      	ands	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2204      	movs	r2, #4
 8003946:	4013      	ands	r3, r2
 8003948:	d00b      	beq.n	8003962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4a3b      	ldr	r2, [pc, #236]	; (8003a40 <UART_AdvFeatureConfig+0x14c>)
 8003952:	4013      	ands	r3, r2
 8003954:	0019      	movs	r1, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	2208      	movs	r2, #8
 8003968:	4013      	ands	r3, r2
 800396a:	d00b      	beq.n	8003984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <UART_AdvFeatureConfig+0x150>)
 8003974:	4013      	ands	r3, r2
 8003976:	0019      	movs	r1, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003988:	2210      	movs	r2, #16
 800398a:	4013      	ands	r3, r2
 800398c:	d00b      	beq.n	80039a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	4a2c      	ldr	r2, [pc, #176]	; (8003a48 <UART_AdvFeatureConfig+0x154>)
 8003996:	4013      	ands	r3, r2
 8003998:	0019      	movs	r1, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039aa:	2220      	movs	r2, #32
 80039ac:	4013      	ands	r3, r2
 80039ae:	d00b      	beq.n	80039c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <UART_AdvFeatureConfig+0x158>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	0019      	movs	r1, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	2240      	movs	r2, #64	; 0x40
 80039ce:	4013      	ands	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <UART_AdvFeatureConfig+0x15c>)
 80039da:	4013      	ands	r3, r2
 80039dc:	0019      	movs	r1, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ee:	2380      	movs	r3, #128	; 0x80
 80039f0:	035b      	lsls	r3, r3, #13
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10b      	bne.n	8003a0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a15      	ldr	r2, [pc, #84]	; (8003a54 <UART_AdvFeatureConfig+0x160>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2280      	movs	r2, #128	; 0x80
 8003a14:	4013      	ands	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a0e      	ldr	r2, [pc, #56]	; (8003a58 <UART_AdvFeatureConfig+0x164>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }
}
 8003a30:	46c0      	nop			; (mov r8, r8)
 8003a32:	46bd      	mov	sp, r7
 8003a34:	b002      	add	sp, #8
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	fffdffff 	.word	0xfffdffff
 8003a3c:	fffeffff 	.word	0xfffeffff
 8003a40:	fffbffff 	.word	0xfffbffff
 8003a44:	ffff7fff 	.word	0xffff7fff
 8003a48:	ffffefff 	.word	0xffffefff
 8003a4c:	ffffdfff 	.word	0xffffdfff
 8003a50:	ffefffff 	.word	0xffefffff
 8003a54:	ff9fffff 	.word	0xff9fffff
 8003a58:	fff7ffff 	.word	0xfff7ffff

08003a5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2280      	movs	r2, #128	; 0x80
 8003a68:	2100      	movs	r1, #0
 8003a6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a6c:	f7fd fb22 	bl	80010b4 <HAL_GetTick>
 8003a70:	0003      	movs	r3, r0
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2208      	movs	r2, #8
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b08      	cmp	r3, #8
 8003a80:	d10c      	bne.n	8003a9c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2280      	movs	r2, #128	; 0x80
 8003a86:	0391      	lsls	r1, r2, #14
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <UART_CheckIdleState+0x8c>)
 8003a8c:	9200      	str	r2, [sp, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f000 f82c 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003a94:	1e03      	subs	r3, r0, #0
 8003a96:	d001      	beq.n	8003a9c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e021      	b.n	8003ae0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2204      	movs	r2, #4
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d10c      	bne.n	8003ac4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2280      	movs	r2, #128	; 0x80
 8003aae:	03d1      	lsls	r1, r2, #15
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	4a0d      	ldr	r2, [pc, #52]	; (8003ae8 <UART_CheckIdleState+0x8c>)
 8003ab4:	9200      	str	r2, [sp, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f000 f818 	bl	8003aec <UART_WaitOnFlagUntilTimeout>
 8003abc:	1e03      	subs	r3, r0, #0
 8003abe:	d001      	beq.n	8003ac4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	e00d      	b.n	8003ae0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2274      	movs	r2, #116	; 0x74
 8003ada:	2100      	movs	r1, #0
 8003adc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b004      	add	sp, #16
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	01ffffff 	.word	0x01ffffff

08003aec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b094      	sub	sp, #80	; 0x50
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	603b      	str	r3, [r7, #0]
 8003af8:	1dfb      	adds	r3, r7, #7
 8003afa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003afc:	e0a3      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b00:	3301      	adds	r3, #1
 8003b02:	d100      	bne.n	8003b06 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003b04:	e09f      	b.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b06:	f7fd fad5 	bl	80010b4 <HAL_GetTick>
 8003b0a:	0002      	movs	r2, r0
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d13d      	bne.n	8003b98 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b20:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b24:	647b      	str	r3, [r7, #68]	; 0x44
 8003b26:	2301      	movs	r3, #1
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	494c      	ldr	r1, [pc, #304]	; (8003c70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003b3e:	400a      	ands	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b44:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b52:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b56:	643b      	str	r3, [r7, #64]	; 0x40
 8003b58:	2301      	movs	r3, #1
 8003b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b5e:	f383 8810 	msr	PRIMASK, r3
}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2101      	movs	r1, #1
 8003b70:	438a      	bics	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b76:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7a:	f383 8810 	msr	PRIMASK, r3
}
 8003b7e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2220      	movs	r2, #32
 8003b84:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2274      	movs	r2, #116	; 0x74
 8003b90:	2100      	movs	r1, #0
 8003b92:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e067      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2204      	movs	r2, #4
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d050      	beq.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	401a      	ands	r2, r3
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d146      	bne.n	8003c46 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0112      	lsls	r2, r2, #4
 8003bc0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc6:	613b      	str	r3, [r7, #16]
  return(result);
 8003bc8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bcc:	2301      	movs	r3, #1
 8003bce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			; (mov r8, r8)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4923      	ldr	r1, [pc, #140]	; (8003c70 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003be4:	400a      	ands	r2, r1
 8003be6:	601a      	str	r2, [r3, #0]
 8003be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003bfa:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bfe:	2301      	movs	r3, #1
 8003c00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f383 8810 	msr	PRIMASK, r3
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2101      	movs	r1, #1
 8003c16:	438a      	bics	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]
 8003c1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c20:	f383 8810 	msr	PRIMASK, r3
}
 8003c24:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2280      	movs	r2, #128	; 0x80
 8003c36:	2120      	movs	r1, #32
 8003c38:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2274      	movs	r2, #116	; 0x74
 8003c3e:	2100      	movs	r1, #0
 8003c40:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e010      	b.n	8003c68 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	425a      	negs	r2, r3
 8003c56:	4153      	adcs	r3, r2
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	001a      	movs	r2, r3
 8003c5c:	1dfb      	adds	r3, r7, #7
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d100      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003c64:	e74b      	b.n	8003afe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	0018      	movs	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b014      	add	sp, #80	; 0x50
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	fffffe5f 	.word	0xfffffe5f

08003c74 <__errno>:
 8003c74:	4b01      	ldr	r3, [pc, #4]	; (8003c7c <__errno+0x8>)
 8003c76:	6818      	ldr	r0, [r3, #0]
 8003c78:	4770      	bx	lr
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	20000018 	.word	0x20000018

08003c80 <__libc_init_array>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	2600      	movs	r6, #0
 8003c84:	4d0c      	ldr	r5, [pc, #48]	; (8003cb8 <__libc_init_array+0x38>)
 8003c86:	4c0d      	ldr	r4, [pc, #52]	; (8003cbc <__libc_init_array+0x3c>)
 8003c88:	1b64      	subs	r4, r4, r5
 8003c8a:	10a4      	asrs	r4, r4, #2
 8003c8c:	42a6      	cmp	r6, r4
 8003c8e:	d109      	bne.n	8003ca4 <__libc_init_array+0x24>
 8003c90:	2600      	movs	r6, #0
 8003c92:	f000 fff9 	bl	8004c88 <_init>
 8003c96:	4d0a      	ldr	r5, [pc, #40]	; (8003cc0 <__libc_init_array+0x40>)
 8003c98:	4c0a      	ldr	r4, [pc, #40]	; (8003cc4 <__libc_init_array+0x44>)
 8003c9a:	1b64      	subs	r4, r4, r5
 8003c9c:	10a4      	asrs	r4, r4, #2
 8003c9e:	42a6      	cmp	r6, r4
 8003ca0:	d105      	bne.n	8003cae <__libc_init_array+0x2e>
 8003ca2:	bd70      	pop	{r4, r5, r6, pc}
 8003ca4:	00b3      	lsls	r3, r6, #2
 8003ca6:	58eb      	ldr	r3, [r5, r3]
 8003ca8:	4798      	blx	r3
 8003caa:	3601      	adds	r6, #1
 8003cac:	e7ee      	b.n	8003c8c <__libc_init_array+0xc>
 8003cae:	00b3      	lsls	r3, r6, #2
 8003cb0:	58eb      	ldr	r3, [r5, r3]
 8003cb2:	4798      	blx	r3
 8003cb4:	3601      	adds	r6, #1
 8003cb6:	e7f2      	b.n	8003c9e <__libc_init_array+0x1e>
 8003cb8:	08004e5c 	.word	0x08004e5c
 8003cbc:	08004e5c 	.word	0x08004e5c
 8003cc0:	08004e5c 	.word	0x08004e5c
 8003cc4:	08004e60 	.word	0x08004e60

08003cc8 <memset>:
 8003cc8:	0003      	movs	r3, r0
 8003cca:	1882      	adds	r2, r0, r2
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d100      	bne.n	8003cd2 <memset+0xa>
 8003cd0:	4770      	bx	lr
 8003cd2:	7019      	strb	r1, [r3, #0]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	e7f9      	b.n	8003ccc <memset+0x4>

08003cd8 <iprintf>:
 8003cd8:	b40f      	push	{r0, r1, r2, r3}
 8003cda:	4b0b      	ldr	r3, [pc, #44]	; (8003d08 <iprintf+0x30>)
 8003cdc:	b513      	push	{r0, r1, r4, lr}
 8003cde:	681c      	ldr	r4, [r3, #0]
 8003ce0:	2c00      	cmp	r4, #0
 8003ce2:	d005      	beq.n	8003cf0 <iprintf+0x18>
 8003ce4:	69a3      	ldr	r3, [r4, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d102      	bne.n	8003cf0 <iprintf+0x18>
 8003cea:	0020      	movs	r0, r4
 8003cec:	f000 f870 	bl	8003dd0 <__sinit>
 8003cf0:	ab05      	add	r3, sp, #20
 8003cf2:	0020      	movs	r0, r4
 8003cf4:	9a04      	ldr	r2, [sp, #16]
 8003cf6:	68a1      	ldr	r1, [r4, #8]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	f000 f9cd 	bl	8004098 <_vfiprintf_r>
 8003cfe:	bc16      	pop	{r1, r2, r4}
 8003d00:	bc08      	pop	{r3}
 8003d02:	b004      	add	sp, #16
 8003d04:	4718      	bx	r3
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	20000018 	.word	0x20000018

08003d0c <std>:
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	0004      	movs	r4, r0
 8003d12:	6003      	str	r3, [r0, #0]
 8003d14:	6043      	str	r3, [r0, #4]
 8003d16:	6083      	str	r3, [r0, #8]
 8003d18:	8181      	strh	r1, [r0, #12]
 8003d1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	81c2      	strh	r2, [r0, #14]
 8003d20:	6103      	str	r3, [r0, #16]
 8003d22:	6143      	str	r3, [r0, #20]
 8003d24:	6183      	str	r3, [r0, #24]
 8003d26:	2208      	movs	r2, #8
 8003d28:	305c      	adds	r0, #92	; 0x5c
 8003d2a:	f7ff ffcd 	bl	8003cc8 <memset>
 8003d2e:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <std+0x38>)
 8003d30:	6224      	str	r4, [r4, #32]
 8003d32:	6263      	str	r3, [r4, #36]	; 0x24
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <std+0x3c>)
 8003d36:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d38:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <std+0x40>)
 8003d3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <std+0x44>)
 8003d3e:	6323      	str	r3, [r4, #48]	; 0x30
 8003d40:	bd10      	pop	{r4, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	08004635 	.word	0x08004635
 8003d48:	0800465d 	.word	0x0800465d
 8003d4c:	08004695 	.word	0x08004695
 8003d50:	080046c1 	.word	0x080046c1

08003d54 <_cleanup_r>:
 8003d54:	b510      	push	{r4, lr}
 8003d56:	4902      	ldr	r1, [pc, #8]	; (8003d60 <_cleanup_r+0xc>)
 8003d58:	f000 f8ba 	bl	8003ed0 <_fwalk_reent>
 8003d5c:	bd10      	pop	{r4, pc}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	080049cd 	.word	0x080049cd

08003d64 <__sfmoreglue>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	2568      	movs	r5, #104	; 0x68
 8003d68:	1e4a      	subs	r2, r1, #1
 8003d6a:	4355      	muls	r5, r2
 8003d6c:	000e      	movs	r6, r1
 8003d6e:	0029      	movs	r1, r5
 8003d70:	3174      	adds	r1, #116	; 0x74
 8003d72:	f000 f8f3 	bl	8003f5c <_malloc_r>
 8003d76:	1e04      	subs	r4, r0, #0
 8003d78:	d008      	beq.n	8003d8c <__sfmoreglue+0x28>
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	002a      	movs	r2, r5
 8003d7e:	6001      	str	r1, [r0, #0]
 8003d80:	6046      	str	r6, [r0, #4]
 8003d82:	300c      	adds	r0, #12
 8003d84:	60a0      	str	r0, [r4, #8]
 8003d86:	3268      	adds	r2, #104	; 0x68
 8003d88:	f7ff ff9e 	bl	8003cc8 <memset>
 8003d8c:	0020      	movs	r0, r4
 8003d8e:	bd70      	pop	{r4, r5, r6, pc}

08003d90 <__sfp_lock_acquire>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4802      	ldr	r0, [pc, #8]	; (8003d9c <__sfp_lock_acquire+0xc>)
 8003d94:	f000 f8bd 	bl	8003f12 <__retarget_lock_acquire_recursive>
 8003d98:	bd10      	pop	{r4, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	200001a1 	.word	0x200001a1

08003da0 <__sfp_lock_release>:
 8003da0:	b510      	push	{r4, lr}
 8003da2:	4802      	ldr	r0, [pc, #8]	; (8003dac <__sfp_lock_release+0xc>)
 8003da4:	f000 f8b6 	bl	8003f14 <__retarget_lock_release_recursive>
 8003da8:	bd10      	pop	{r4, pc}
 8003daa:	46c0      	nop			; (mov r8, r8)
 8003dac:	200001a1 	.word	0x200001a1

08003db0 <__sinit_lock_acquire>:
 8003db0:	b510      	push	{r4, lr}
 8003db2:	4802      	ldr	r0, [pc, #8]	; (8003dbc <__sinit_lock_acquire+0xc>)
 8003db4:	f000 f8ad 	bl	8003f12 <__retarget_lock_acquire_recursive>
 8003db8:	bd10      	pop	{r4, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	200001a2 	.word	0x200001a2

08003dc0 <__sinit_lock_release>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4802      	ldr	r0, [pc, #8]	; (8003dcc <__sinit_lock_release+0xc>)
 8003dc4:	f000 f8a6 	bl	8003f14 <__retarget_lock_release_recursive>
 8003dc8:	bd10      	pop	{r4, pc}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	200001a2 	.word	0x200001a2

08003dd0 <__sinit>:
 8003dd0:	b513      	push	{r0, r1, r4, lr}
 8003dd2:	0004      	movs	r4, r0
 8003dd4:	f7ff ffec 	bl	8003db0 <__sinit_lock_acquire>
 8003dd8:	69a3      	ldr	r3, [r4, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <__sinit+0x14>
 8003dde:	f7ff ffef 	bl	8003dc0 <__sinit_lock_release>
 8003de2:	bd13      	pop	{r0, r1, r4, pc}
 8003de4:	64a3      	str	r3, [r4, #72]	; 0x48
 8003de6:	64e3      	str	r3, [r4, #76]	; 0x4c
 8003de8:	6523      	str	r3, [r4, #80]	; 0x50
 8003dea:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <__sinit+0x68>)
 8003dec:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <__sinit+0x6c>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003df2:	9301      	str	r3, [sp, #4]
 8003df4:	42a3      	cmp	r3, r4
 8003df6:	d101      	bne.n	8003dfc <__sinit+0x2c>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	61a3      	str	r3, [r4, #24]
 8003dfc:	0020      	movs	r0, r4
 8003dfe:	f000 f81f 	bl	8003e40 <__sfp>
 8003e02:	6060      	str	r0, [r4, #4]
 8003e04:	0020      	movs	r0, r4
 8003e06:	f000 f81b 	bl	8003e40 <__sfp>
 8003e0a:	60a0      	str	r0, [r4, #8]
 8003e0c:	0020      	movs	r0, r4
 8003e0e:	f000 f817 	bl	8003e40 <__sfp>
 8003e12:	2200      	movs	r2, #0
 8003e14:	2104      	movs	r1, #4
 8003e16:	60e0      	str	r0, [r4, #12]
 8003e18:	6860      	ldr	r0, [r4, #4]
 8003e1a:	f7ff ff77 	bl	8003d0c <std>
 8003e1e:	2201      	movs	r2, #1
 8003e20:	2109      	movs	r1, #9
 8003e22:	68a0      	ldr	r0, [r4, #8]
 8003e24:	f7ff ff72 	bl	8003d0c <std>
 8003e28:	2202      	movs	r2, #2
 8003e2a:	2112      	movs	r1, #18
 8003e2c:	68e0      	ldr	r0, [r4, #12]
 8003e2e:	f7ff ff6d 	bl	8003d0c <std>
 8003e32:	2301      	movs	r3, #1
 8003e34:	61a3      	str	r3, [r4, #24]
 8003e36:	e7d2      	b.n	8003dde <__sinit+0xe>
 8003e38:	08004dbc 	.word	0x08004dbc
 8003e3c:	08003d55 	.word	0x08003d55

08003e40 <__sfp>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	0007      	movs	r7, r0
 8003e44:	f7ff ffa4 	bl	8003d90 <__sfp_lock_acquire>
 8003e48:	4b1f      	ldr	r3, [pc, #124]	; (8003ec8 <__sfp+0x88>)
 8003e4a:	681e      	ldr	r6, [r3, #0]
 8003e4c:	69b3      	ldr	r3, [r6, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <__sfp+0x18>
 8003e52:	0030      	movs	r0, r6
 8003e54:	f7ff ffbc 	bl	8003dd0 <__sinit>
 8003e58:	3648      	adds	r6, #72	; 0x48
 8003e5a:	68b4      	ldr	r4, [r6, #8]
 8003e5c:	6873      	ldr	r3, [r6, #4]
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	d504      	bpl.n	8003e6c <__sfp+0x2c>
 8003e62:	6833      	ldr	r3, [r6, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d022      	beq.n	8003eae <__sfp+0x6e>
 8003e68:	6836      	ldr	r6, [r6, #0]
 8003e6a:	e7f6      	b.n	8003e5a <__sfp+0x1a>
 8003e6c:	220c      	movs	r2, #12
 8003e6e:	5ea5      	ldrsh	r5, [r4, r2]
 8003e70:	2d00      	cmp	r5, #0
 8003e72:	d11a      	bne.n	8003eaa <__sfp+0x6a>
 8003e74:	0020      	movs	r0, r4
 8003e76:	4b15      	ldr	r3, [pc, #84]	; (8003ecc <__sfp+0x8c>)
 8003e78:	3058      	adds	r0, #88	; 0x58
 8003e7a:	60e3      	str	r3, [r4, #12]
 8003e7c:	6665      	str	r5, [r4, #100]	; 0x64
 8003e7e:	f000 f847 	bl	8003f10 <__retarget_lock_init_recursive>
 8003e82:	f7ff ff8d 	bl	8003da0 <__sfp_lock_release>
 8003e86:	0020      	movs	r0, r4
 8003e88:	2208      	movs	r2, #8
 8003e8a:	0029      	movs	r1, r5
 8003e8c:	6025      	str	r5, [r4, #0]
 8003e8e:	60a5      	str	r5, [r4, #8]
 8003e90:	6065      	str	r5, [r4, #4]
 8003e92:	6125      	str	r5, [r4, #16]
 8003e94:	6165      	str	r5, [r4, #20]
 8003e96:	61a5      	str	r5, [r4, #24]
 8003e98:	305c      	adds	r0, #92	; 0x5c
 8003e9a:	f7ff ff15 	bl	8003cc8 <memset>
 8003e9e:	6365      	str	r5, [r4, #52]	; 0x34
 8003ea0:	63a5      	str	r5, [r4, #56]	; 0x38
 8003ea2:	64a5      	str	r5, [r4, #72]	; 0x48
 8003ea4:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003ea6:	0020      	movs	r0, r4
 8003ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eaa:	3468      	adds	r4, #104	; 0x68
 8003eac:	e7d7      	b.n	8003e5e <__sfp+0x1e>
 8003eae:	2104      	movs	r1, #4
 8003eb0:	0038      	movs	r0, r7
 8003eb2:	f7ff ff57 	bl	8003d64 <__sfmoreglue>
 8003eb6:	1e04      	subs	r4, r0, #0
 8003eb8:	6030      	str	r0, [r6, #0]
 8003eba:	d1d5      	bne.n	8003e68 <__sfp+0x28>
 8003ebc:	f7ff ff70 	bl	8003da0 <__sfp_lock_release>
 8003ec0:	230c      	movs	r3, #12
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	e7ef      	b.n	8003ea6 <__sfp+0x66>
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	08004dbc 	.word	0x08004dbc
 8003ecc:	ffff0001 	.word	0xffff0001

08003ed0 <_fwalk_reent>:
 8003ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ed2:	0004      	movs	r4, r0
 8003ed4:	0006      	movs	r6, r0
 8003ed6:	2700      	movs	r7, #0
 8003ed8:	9101      	str	r1, [sp, #4]
 8003eda:	3448      	adds	r4, #72	; 0x48
 8003edc:	6863      	ldr	r3, [r4, #4]
 8003ede:	68a5      	ldr	r5, [r4, #8]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	9b00      	ldr	r3, [sp, #0]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	d504      	bpl.n	8003ef4 <_fwalk_reent+0x24>
 8003eea:	6824      	ldr	r4, [r4, #0]
 8003eec:	2c00      	cmp	r4, #0
 8003eee:	d1f5      	bne.n	8003edc <_fwalk_reent+0xc>
 8003ef0:	0038      	movs	r0, r7
 8003ef2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003ef4:	89ab      	ldrh	r3, [r5, #12]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d908      	bls.n	8003f0c <_fwalk_reent+0x3c>
 8003efa:	220e      	movs	r2, #14
 8003efc:	5eab      	ldrsh	r3, [r5, r2]
 8003efe:	3301      	adds	r3, #1
 8003f00:	d004      	beq.n	8003f0c <_fwalk_reent+0x3c>
 8003f02:	0029      	movs	r1, r5
 8003f04:	0030      	movs	r0, r6
 8003f06:	9b01      	ldr	r3, [sp, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	4307      	orrs	r7, r0
 8003f0c:	3568      	adds	r5, #104	; 0x68
 8003f0e:	e7e8      	b.n	8003ee2 <_fwalk_reent+0x12>

08003f10 <__retarget_lock_init_recursive>:
 8003f10:	4770      	bx	lr

08003f12 <__retarget_lock_acquire_recursive>:
 8003f12:	4770      	bx	lr

08003f14 <__retarget_lock_release_recursive>:
 8003f14:	4770      	bx	lr
	...

08003f18 <sbrk_aligned>:
 8003f18:	b570      	push	{r4, r5, r6, lr}
 8003f1a:	4e0f      	ldr	r6, [pc, #60]	; (8003f58 <sbrk_aligned+0x40>)
 8003f1c:	000d      	movs	r5, r1
 8003f1e:	6831      	ldr	r1, [r6, #0]
 8003f20:	0004      	movs	r4, r0
 8003f22:	2900      	cmp	r1, #0
 8003f24:	d102      	bne.n	8003f2c <sbrk_aligned+0x14>
 8003f26:	f000 fb73 	bl	8004610 <_sbrk_r>
 8003f2a:	6030      	str	r0, [r6, #0]
 8003f2c:	0029      	movs	r1, r5
 8003f2e:	0020      	movs	r0, r4
 8003f30:	f000 fb6e 	bl	8004610 <_sbrk_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d00a      	beq.n	8003f4e <sbrk_aligned+0x36>
 8003f38:	2303      	movs	r3, #3
 8003f3a:	1cc5      	adds	r5, r0, #3
 8003f3c:	439d      	bics	r5, r3
 8003f3e:	42a8      	cmp	r0, r5
 8003f40:	d007      	beq.n	8003f52 <sbrk_aligned+0x3a>
 8003f42:	1a29      	subs	r1, r5, r0
 8003f44:	0020      	movs	r0, r4
 8003f46:	f000 fb63 	bl	8004610 <_sbrk_r>
 8003f4a:	1c43      	adds	r3, r0, #1
 8003f4c:	d101      	bne.n	8003f52 <sbrk_aligned+0x3a>
 8003f4e:	2501      	movs	r5, #1
 8003f50:	426d      	negs	r5, r5
 8003f52:	0028      	movs	r0, r5
 8003f54:	bd70      	pop	{r4, r5, r6, pc}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	200001a8 	.word	0x200001a8

08003f5c <_malloc_r>:
 8003f5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f5e:	2203      	movs	r2, #3
 8003f60:	1ccb      	adds	r3, r1, #3
 8003f62:	4393      	bics	r3, r2
 8003f64:	3308      	adds	r3, #8
 8003f66:	0006      	movs	r6, r0
 8003f68:	001f      	movs	r7, r3
 8003f6a:	2b0c      	cmp	r3, #12
 8003f6c:	d232      	bcs.n	8003fd4 <_malloc_r+0x78>
 8003f6e:	270c      	movs	r7, #12
 8003f70:	42b9      	cmp	r1, r7
 8003f72:	d831      	bhi.n	8003fd8 <_malloc_r+0x7c>
 8003f74:	0030      	movs	r0, r6
 8003f76:	f000 fdf5 	bl	8004b64 <__malloc_lock>
 8003f7a:	4d32      	ldr	r5, [pc, #200]	; (8004044 <_malloc_r+0xe8>)
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	001c      	movs	r4, r3
 8003f80:	2c00      	cmp	r4, #0
 8003f82:	d12e      	bne.n	8003fe2 <_malloc_r+0x86>
 8003f84:	0039      	movs	r1, r7
 8003f86:	0030      	movs	r0, r6
 8003f88:	f7ff ffc6 	bl	8003f18 <sbrk_aligned>
 8003f8c:	0004      	movs	r4, r0
 8003f8e:	1c43      	adds	r3, r0, #1
 8003f90:	d11e      	bne.n	8003fd0 <_malloc_r+0x74>
 8003f92:	682c      	ldr	r4, [r5, #0]
 8003f94:	0025      	movs	r5, r4
 8003f96:	2d00      	cmp	r5, #0
 8003f98:	d14a      	bne.n	8004030 <_malloc_r+0xd4>
 8003f9a:	6823      	ldr	r3, [r4, #0]
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	18e3      	adds	r3, r4, r3
 8003fa0:	0030      	movs	r0, r6
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	f000 fb34 	bl	8004610 <_sbrk_r>
 8003fa8:	9b01      	ldr	r3, [sp, #4]
 8003faa:	4283      	cmp	r3, r0
 8003fac:	d143      	bne.n	8004036 <_malloc_r+0xda>
 8003fae:	6823      	ldr	r3, [r4, #0]
 8003fb0:	3703      	adds	r7, #3
 8003fb2:	1aff      	subs	r7, r7, r3
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	439f      	bics	r7, r3
 8003fb8:	3708      	adds	r7, #8
 8003fba:	2f0c      	cmp	r7, #12
 8003fbc:	d200      	bcs.n	8003fc0 <_malloc_r+0x64>
 8003fbe:	270c      	movs	r7, #12
 8003fc0:	0039      	movs	r1, r7
 8003fc2:	0030      	movs	r0, r6
 8003fc4:	f7ff ffa8 	bl	8003f18 <sbrk_aligned>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d034      	beq.n	8004036 <_malloc_r+0xda>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	19df      	adds	r7, r3, r7
 8003fd0:	6027      	str	r7, [r4, #0]
 8003fd2:	e013      	b.n	8003ffc <_malloc_r+0xa0>
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	dacb      	bge.n	8003f70 <_malloc_r+0x14>
 8003fd8:	230c      	movs	r3, #12
 8003fda:	2500      	movs	r5, #0
 8003fdc:	6033      	str	r3, [r6, #0]
 8003fde:	0028      	movs	r0, r5
 8003fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003fe2:	6822      	ldr	r2, [r4, #0]
 8003fe4:	1bd1      	subs	r1, r2, r7
 8003fe6:	d420      	bmi.n	800402a <_malloc_r+0xce>
 8003fe8:	290b      	cmp	r1, #11
 8003fea:	d917      	bls.n	800401c <_malloc_r+0xc0>
 8003fec:	19e2      	adds	r2, r4, r7
 8003fee:	6027      	str	r7, [r4, #0]
 8003ff0:	42a3      	cmp	r3, r4
 8003ff2:	d111      	bne.n	8004018 <_malloc_r+0xbc>
 8003ff4:	602a      	str	r2, [r5, #0]
 8003ff6:	6863      	ldr	r3, [r4, #4]
 8003ff8:	6011      	str	r1, [r2, #0]
 8003ffa:	6053      	str	r3, [r2, #4]
 8003ffc:	0030      	movs	r0, r6
 8003ffe:	0025      	movs	r5, r4
 8004000:	f000 fdb8 	bl	8004b74 <__malloc_unlock>
 8004004:	2207      	movs	r2, #7
 8004006:	350b      	adds	r5, #11
 8004008:	1d23      	adds	r3, r4, #4
 800400a:	4395      	bics	r5, r2
 800400c:	1aea      	subs	r2, r5, r3
 800400e:	429d      	cmp	r5, r3
 8004010:	d0e5      	beq.n	8003fde <_malloc_r+0x82>
 8004012:	1b5b      	subs	r3, r3, r5
 8004014:	50a3      	str	r3, [r4, r2]
 8004016:	e7e2      	b.n	8003fde <_malloc_r+0x82>
 8004018:	605a      	str	r2, [r3, #4]
 800401a:	e7ec      	b.n	8003ff6 <_malloc_r+0x9a>
 800401c:	6862      	ldr	r2, [r4, #4]
 800401e:	42a3      	cmp	r3, r4
 8004020:	d101      	bne.n	8004026 <_malloc_r+0xca>
 8004022:	602a      	str	r2, [r5, #0]
 8004024:	e7ea      	b.n	8003ffc <_malloc_r+0xa0>
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e7e8      	b.n	8003ffc <_malloc_r+0xa0>
 800402a:	0023      	movs	r3, r4
 800402c:	6864      	ldr	r4, [r4, #4]
 800402e:	e7a7      	b.n	8003f80 <_malloc_r+0x24>
 8004030:	002c      	movs	r4, r5
 8004032:	686d      	ldr	r5, [r5, #4]
 8004034:	e7af      	b.n	8003f96 <_malloc_r+0x3a>
 8004036:	230c      	movs	r3, #12
 8004038:	0030      	movs	r0, r6
 800403a:	6033      	str	r3, [r6, #0]
 800403c:	f000 fd9a 	bl	8004b74 <__malloc_unlock>
 8004040:	e7cd      	b.n	8003fde <_malloc_r+0x82>
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	200001a4 	.word	0x200001a4

08004048 <__sfputc_r>:
 8004048:	6893      	ldr	r3, [r2, #8]
 800404a:	b510      	push	{r4, lr}
 800404c:	3b01      	subs	r3, #1
 800404e:	6093      	str	r3, [r2, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	da04      	bge.n	800405e <__sfputc_r+0x16>
 8004054:	6994      	ldr	r4, [r2, #24]
 8004056:	42a3      	cmp	r3, r4
 8004058:	db07      	blt.n	800406a <__sfputc_r+0x22>
 800405a:	290a      	cmp	r1, #10
 800405c:	d005      	beq.n	800406a <__sfputc_r+0x22>
 800405e:	6813      	ldr	r3, [r2, #0]
 8004060:	1c58      	adds	r0, r3, #1
 8004062:	6010      	str	r0, [r2, #0]
 8004064:	7019      	strb	r1, [r3, #0]
 8004066:	0008      	movs	r0, r1
 8004068:	bd10      	pop	{r4, pc}
 800406a:	f000 fb2f 	bl	80046cc <__swbuf_r>
 800406e:	0001      	movs	r1, r0
 8004070:	e7f9      	b.n	8004066 <__sfputc_r+0x1e>

08004072 <__sfputs_r>:
 8004072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004074:	0006      	movs	r6, r0
 8004076:	000f      	movs	r7, r1
 8004078:	0014      	movs	r4, r2
 800407a:	18d5      	adds	r5, r2, r3
 800407c:	42ac      	cmp	r4, r5
 800407e:	d101      	bne.n	8004084 <__sfputs_r+0x12>
 8004080:	2000      	movs	r0, #0
 8004082:	e007      	b.n	8004094 <__sfputs_r+0x22>
 8004084:	7821      	ldrb	r1, [r4, #0]
 8004086:	003a      	movs	r2, r7
 8004088:	0030      	movs	r0, r6
 800408a:	f7ff ffdd 	bl	8004048 <__sfputc_r>
 800408e:	3401      	adds	r4, #1
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d1f3      	bne.n	800407c <__sfputs_r+0xa>
 8004094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004098 <_vfiprintf_r>:
 8004098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409a:	b0a1      	sub	sp, #132	; 0x84
 800409c:	0006      	movs	r6, r0
 800409e:	000c      	movs	r4, r1
 80040a0:	001f      	movs	r7, r3
 80040a2:	9203      	str	r2, [sp, #12]
 80040a4:	2800      	cmp	r0, #0
 80040a6:	d004      	beq.n	80040b2 <_vfiprintf_r+0x1a>
 80040a8:	6983      	ldr	r3, [r0, #24]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <_vfiprintf_r+0x1a>
 80040ae:	f7ff fe8f 	bl	8003dd0 <__sinit>
 80040b2:	4b8e      	ldr	r3, [pc, #568]	; (80042ec <_vfiprintf_r+0x254>)
 80040b4:	429c      	cmp	r4, r3
 80040b6:	d11c      	bne.n	80040f2 <_vfiprintf_r+0x5a>
 80040b8:	6874      	ldr	r4, [r6, #4]
 80040ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040bc:	07db      	lsls	r3, r3, #31
 80040be:	d405      	bmi.n	80040cc <_vfiprintf_r+0x34>
 80040c0:	89a3      	ldrh	r3, [r4, #12]
 80040c2:	059b      	lsls	r3, r3, #22
 80040c4:	d402      	bmi.n	80040cc <_vfiprintf_r+0x34>
 80040c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80040c8:	f7ff ff23 	bl	8003f12 <__retarget_lock_acquire_recursive>
 80040cc:	89a3      	ldrh	r3, [r4, #12]
 80040ce:	071b      	lsls	r3, r3, #28
 80040d0:	d502      	bpl.n	80040d8 <_vfiprintf_r+0x40>
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11d      	bne.n	8004114 <_vfiprintf_r+0x7c>
 80040d8:	0021      	movs	r1, r4
 80040da:	0030      	movs	r0, r6
 80040dc:	f000 fb60 	bl	80047a0 <__swsetup_r>
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d017      	beq.n	8004114 <_vfiprintf_r+0x7c>
 80040e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80040e6:	07db      	lsls	r3, r3, #31
 80040e8:	d50d      	bpl.n	8004106 <_vfiprintf_r+0x6e>
 80040ea:	2001      	movs	r0, #1
 80040ec:	4240      	negs	r0, r0
 80040ee:	b021      	add	sp, #132	; 0x84
 80040f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040f2:	4b7f      	ldr	r3, [pc, #508]	; (80042f0 <_vfiprintf_r+0x258>)
 80040f4:	429c      	cmp	r4, r3
 80040f6:	d101      	bne.n	80040fc <_vfiprintf_r+0x64>
 80040f8:	68b4      	ldr	r4, [r6, #8]
 80040fa:	e7de      	b.n	80040ba <_vfiprintf_r+0x22>
 80040fc:	4b7d      	ldr	r3, [pc, #500]	; (80042f4 <_vfiprintf_r+0x25c>)
 80040fe:	429c      	cmp	r4, r3
 8004100:	d1db      	bne.n	80040ba <_vfiprintf_r+0x22>
 8004102:	68f4      	ldr	r4, [r6, #12]
 8004104:	e7d9      	b.n	80040ba <_vfiprintf_r+0x22>
 8004106:	89a3      	ldrh	r3, [r4, #12]
 8004108:	059b      	lsls	r3, r3, #22
 800410a:	d4ee      	bmi.n	80040ea <_vfiprintf_r+0x52>
 800410c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800410e:	f7ff ff01 	bl	8003f14 <__retarget_lock_release_recursive>
 8004112:	e7ea      	b.n	80040ea <_vfiprintf_r+0x52>
 8004114:	2300      	movs	r3, #0
 8004116:	ad08      	add	r5, sp, #32
 8004118:	616b      	str	r3, [r5, #20]
 800411a:	3320      	adds	r3, #32
 800411c:	766b      	strb	r3, [r5, #25]
 800411e:	3310      	adds	r3, #16
 8004120:	76ab      	strb	r3, [r5, #26]
 8004122:	9707      	str	r7, [sp, #28]
 8004124:	9f03      	ldr	r7, [sp, #12]
 8004126:	783b      	ldrb	r3, [r7, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <_vfiprintf_r+0x98>
 800412c:	2b25      	cmp	r3, #37	; 0x25
 800412e:	d14e      	bne.n	80041ce <_vfiprintf_r+0x136>
 8004130:	9b03      	ldr	r3, [sp, #12]
 8004132:	1afb      	subs	r3, r7, r3
 8004134:	9305      	str	r3, [sp, #20]
 8004136:	9b03      	ldr	r3, [sp, #12]
 8004138:	429f      	cmp	r7, r3
 800413a:	d00d      	beq.n	8004158 <_vfiprintf_r+0xc0>
 800413c:	9b05      	ldr	r3, [sp, #20]
 800413e:	0021      	movs	r1, r4
 8004140:	0030      	movs	r0, r6
 8004142:	9a03      	ldr	r2, [sp, #12]
 8004144:	f7ff ff95 	bl	8004072 <__sfputs_r>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d100      	bne.n	800414e <_vfiprintf_r+0xb6>
 800414c:	e0b5      	b.n	80042ba <_vfiprintf_r+0x222>
 800414e:	696a      	ldr	r2, [r5, #20]
 8004150:	9b05      	ldr	r3, [sp, #20]
 8004152:	4694      	mov	ip, r2
 8004154:	4463      	add	r3, ip
 8004156:	616b      	str	r3, [r5, #20]
 8004158:	783b      	ldrb	r3, [r7, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d100      	bne.n	8004160 <_vfiprintf_r+0xc8>
 800415e:	e0ac      	b.n	80042ba <_vfiprintf_r+0x222>
 8004160:	2201      	movs	r2, #1
 8004162:	1c7b      	adds	r3, r7, #1
 8004164:	9303      	str	r3, [sp, #12]
 8004166:	2300      	movs	r3, #0
 8004168:	4252      	negs	r2, r2
 800416a:	606a      	str	r2, [r5, #4]
 800416c:	a904      	add	r1, sp, #16
 800416e:	3254      	adds	r2, #84	; 0x54
 8004170:	1852      	adds	r2, r2, r1
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	60eb      	str	r3, [r5, #12]
 8004176:	60ab      	str	r3, [r5, #8]
 8004178:	7013      	strb	r3, [r2, #0]
 800417a:	65ab      	str	r3, [r5, #88]	; 0x58
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	2205      	movs	r2, #5
 8004180:	7819      	ldrb	r1, [r3, #0]
 8004182:	485d      	ldr	r0, [pc, #372]	; (80042f8 <_vfiprintf_r+0x260>)
 8004184:	f000 fce2 	bl	8004b4c <memchr>
 8004188:	9b03      	ldr	r3, [sp, #12]
 800418a:	1c5f      	adds	r7, r3, #1
 800418c:	2800      	cmp	r0, #0
 800418e:	d120      	bne.n	80041d2 <_vfiprintf_r+0x13a>
 8004190:	682a      	ldr	r2, [r5, #0]
 8004192:	06d3      	lsls	r3, r2, #27
 8004194:	d504      	bpl.n	80041a0 <_vfiprintf_r+0x108>
 8004196:	2353      	movs	r3, #83	; 0x53
 8004198:	a904      	add	r1, sp, #16
 800419a:	185b      	adds	r3, r3, r1
 800419c:	2120      	movs	r1, #32
 800419e:	7019      	strb	r1, [r3, #0]
 80041a0:	0713      	lsls	r3, r2, #28
 80041a2:	d504      	bpl.n	80041ae <_vfiprintf_r+0x116>
 80041a4:	2353      	movs	r3, #83	; 0x53
 80041a6:	a904      	add	r1, sp, #16
 80041a8:	185b      	adds	r3, r3, r1
 80041aa:	212b      	movs	r1, #43	; 0x2b
 80041ac:	7019      	strb	r1, [r3, #0]
 80041ae:	9b03      	ldr	r3, [sp, #12]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	2b2a      	cmp	r3, #42	; 0x2a
 80041b4:	d016      	beq.n	80041e4 <_vfiprintf_r+0x14c>
 80041b6:	2100      	movs	r1, #0
 80041b8:	68eb      	ldr	r3, [r5, #12]
 80041ba:	9f03      	ldr	r7, [sp, #12]
 80041bc:	783a      	ldrb	r2, [r7, #0]
 80041be:	1c78      	adds	r0, r7, #1
 80041c0:	3a30      	subs	r2, #48	; 0x30
 80041c2:	4684      	mov	ip, r0
 80041c4:	2a09      	cmp	r2, #9
 80041c6:	d94f      	bls.n	8004268 <_vfiprintf_r+0x1d0>
 80041c8:	2900      	cmp	r1, #0
 80041ca:	d111      	bne.n	80041f0 <_vfiprintf_r+0x158>
 80041cc:	e017      	b.n	80041fe <_vfiprintf_r+0x166>
 80041ce:	3701      	adds	r7, #1
 80041d0:	e7a9      	b.n	8004126 <_vfiprintf_r+0x8e>
 80041d2:	4b49      	ldr	r3, [pc, #292]	; (80042f8 <_vfiprintf_r+0x260>)
 80041d4:	682a      	ldr	r2, [r5, #0]
 80041d6:	1ac0      	subs	r0, r0, r3
 80041d8:	2301      	movs	r3, #1
 80041da:	4083      	lsls	r3, r0
 80041dc:	4313      	orrs	r3, r2
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	9703      	str	r7, [sp, #12]
 80041e2:	e7cb      	b.n	800417c <_vfiprintf_r+0xe4>
 80041e4:	9b07      	ldr	r3, [sp, #28]
 80041e6:	1d19      	adds	r1, r3, #4
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	9107      	str	r1, [sp, #28]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db01      	blt.n	80041f4 <_vfiprintf_r+0x15c>
 80041f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80041f2:	e004      	b.n	80041fe <_vfiprintf_r+0x166>
 80041f4:	425b      	negs	r3, r3
 80041f6:	60eb      	str	r3, [r5, #12]
 80041f8:	2302      	movs	r3, #2
 80041fa:	4313      	orrs	r3, r2
 80041fc:	602b      	str	r3, [r5, #0]
 80041fe:	783b      	ldrb	r3, [r7, #0]
 8004200:	2b2e      	cmp	r3, #46	; 0x2e
 8004202:	d10a      	bne.n	800421a <_vfiprintf_r+0x182>
 8004204:	787b      	ldrb	r3, [r7, #1]
 8004206:	2b2a      	cmp	r3, #42	; 0x2a
 8004208:	d137      	bne.n	800427a <_vfiprintf_r+0x1e2>
 800420a:	9b07      	ldr	r3, [sp, #28]
 800420c:	3702      	adds	r7, #2
 800420e:	1d1a      	adds	r2, r3, #4
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	9207      	str	r2, [sp, #28]
 8004214:	2b00      	cmp	r3, #0
 8004216:	db2d      	blt.n	8004274 <_vfiprintf_r+0x1dc>
 8004218:	9309      	str	r3, [sp, #36]	; 0x24
 800421a:	2203      	movs	r2, #3
 800421c:	7839      	ldrb	r1, [r7, #0]
 800421e:	4837      	ldr	r0, [pc, #220]	; (80042fc <_vfiprintf_r+0x264>)
 8004220:	f000 fc94 	bl	8004b4c <memchr>
 8004224:	2800      	cmp	r0, #0
 8004226:	d007      	beq.n	8004238 <_vfiprintf_r+0x1a0>
 8004228:	4b34      	ldr	r3, [pc, #208]	; (80042fc <_vfiprintf_r+0x264>)
 800422a:	682a      	ldr	r2, [r5, #0]
 800422c:	1ac0      	subs	r0, r0, r3
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	4083      	lsls	r3, r0
 8004232:	4313      	orrs	r3, r2
 8004234:	3701      	adds	r7, #1
 8004236:	602b      	str	r3, [r5, #0]
 8004238:	7839      	ldrb	r1, [r7, #0]
 800423a:	1c7b      	adds	r3, r7, #1
 800423c:	2206      	movs	r2, #6
 800423e:	4830      	ldr	r0, [pc, #192]	; (8004300 <_vfiprintf_r+0x268>)
 8004240:	9303      	str	r3, [sp, #12]
 8004242:	7629      	strb	r1, [r5, #24]
 8004244:	f000 fc82 	bl	8004b4c <memchr>
 8004248:	2800      	cmp	r0, #0
 800424a:	d045      	beq.n	80042d8 <_vfiprintf_r+0x240>
 800424c:	4b2d      	ldr	r3, [pc, #180]	; (8004304 <_vfiprintf_r+0x26c>)
 800424e:	2b00      	cmp	r3, #0
 8004250:	d127      	bne.n	80042a2 <_vfiprintf_r+0x20a>
 8004252:	2207      	movs	r2, #7
 8004254:	9b07      	ldr	r3, [sp, #28]
 8004256:	3307      	adds	r3, #7
 8004258:	4393      	bics	r3, r2
 800425a:	3308      	adds	r3, #8
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	696b      	ldr	r3, [r5, #20]
 8004260:	9a04      	ldr	r2, [sp, #16]
 8004262:	189b      	adds	r3, r3, r2
 8004264:	616b      	str	r3, [r5, #20]
 8004266:	e75d      	b.n	8004124 <_vfiprintf_r+0x8c>
 8004268:	210a      	movs	r1, #10
 800426a:	434b      	muls	r3, r1
 800426c:	4667      	mov	r7, ip
 800426e:	189b      	adds	r3, r3, r2
 8004270:	3909      	subs	r1, #9
 8004272:	e7a3      	b.n	80041bc <_vfiprintf_r+0x124>
 8004274:	2301      	movs	r3, #1
 8004276:	425b      	negs	r3, r3
 8004278:	e7ce      	b.n	8004218 <_vfiprintf_r+0x180>
 800427a:	2300      	movs	r3, #0
 800427c:	001a      	movs	r2, r3
 800427e:	3701      	adds	r7, #1
 8004280:	606b      	str	r3, [r5, #4]
 8004282:	7839      	ldrb	r1, [r7, #0]
 8004284:	1c78      	adds	r0, r7, #1
 8004286:	3930      	subs	r1, #48	; 0x30
 8004288:	4684      	mov	ip, r0
 800428a:	2909      	cmp	r1, #9
 800428c:	d903      	bls.n	8004296 <_vfiprintf_r+0x1fe>
 800428e:	2b00      	cmp	r3, #0
 8004290:	d0c3      	beq.n	800421a <_vfiprintf_r+0x182>
 8004292:	9209      	str	r2, [sp, #36]	; 0x24
 8004294:	e7c1      	b.n	800421a <_vfiprintf_r+0x182>
 8004296:	230a      	movs	r3, #10
 8004298:	435a      	muls	r2, r3
 800429a:	4667      	mov	r7, ip
 800429c:	1852      	adds	r2, r2, r1
 800429e:	3b09      	subs	r3, #9
 80042a0:	e7ef      	b.n	8004282 <_vfiprintf_r+0x1ea>
 80042a2:	ab07      	add	r3, sp, #28
 80042a4:	9300      	str	r3, [sp, #0]
 80042a6:	0022      	movs	r2, r4
 80042a8:	0029      	movs	r1, r5
 80042aa:	0030      	movs	r0, r6
 80042ac:	4b16      	ldr	r3, [pc, #88]	; (8004308 <_vfiprintf_r+0x270>)
 80042ae:	e000      	b.n	80042b2 <_vfiprintf_r+0x21a>
 80042b0:	bf00      	nop
 80042b2:	9004      	str	r0, [sp, #16]
 80042b4:	9b04      	ldr	r3, [sp, #16]
 80042b6:	3301      	adds	r3, #1
 80042b8:	d1d1      	bne.n	800425e <_vfiprintf_r+0x1c6>
 80042ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d405      	bmi.n	80042cc <_vfiprintf_r+0x234>
 80042c0:	89a3      	ldrh	r3, [r4, #12]
 80042c2:	059b      	lsls	r3, r3, #22
 80042c4:	d402      	bmi.n	80042cc <_vfiprintf_r+0x234>
 80042c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042c8:	f7ff fe24 	bl	8003f14 <__retarget_lock_release_recursive>
 80042cc:	89a3      	ldrh	r3, [r4, #12]
 80042ce:	065b      	lsls	r3, r3, #25
 80042d0:	d500      	bpl.n	80042d4 <_vfiprintf_r+0x23c>
 80042d2:	e70a      	b.n	80040ea <_vfiprintf_r+0x52>
 80042d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80042d6:	e70a      	b.n	80040ee <_vfiprintf_r+0x56>
 80042d8:	ab07      	add	r3, sp, #28
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	0022      	movs	r2, r4
 80042de:	0029      	movs	r1, r5
 80042e0:	0030      	movs	r0, r6
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <_vfiprintf_r+0x270>)
 80042e4:	f000 f882 	bl	80043ec <_printf_i>
 80042e8:	e7e3      	b.n	80042b2 <_vfiprintf_r+0x21a>
 80042ea:	46c0      	nop			; (mov r8, r8)
 80042ec:	08004de0 	.word	0x08004de0
 80042f0:	08004e00 	.word	0x08004e00
 80042f4:	08004dc0 	.word	0x08004dc0
 80042f8:	08004e20 	.word	0x08004e20
 80042fc:	08004e26 	.word	0x08004e26
 8004300:	08004e2a 	.word	0x08004e2a
 8004304:	00000000 	.word	0x00000000
 8004308:	08004073 	.word	0x08004073

0800430c <_printf_common>:
 800430c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800430e:	0015      	movs	r5, r2
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	688a      	ldr	r2, [r1, #8]
 8004314:	690b      	ldr	r3, [r1, #16]
 8004316:	000c      	movs	r4, r1
 8004318:	9000      	str	r0, [sp, #0]
 800431a:	4293      	cmp	r3, r2
 800431c:	da00      	bge.n	8004320 <_printf_common+0x14>
 800431e:	0013      	movs	r3, r2
 8004320:	0022      	movs	r2, r4
 8004322:	602b      	str	r3, [r5, #0]
 8004324:	3243      	adds	r2, #67	; 0x43
 8004326:	7812      	ldrb	r2, [r2, #0]
 8004328:	2a00      	cmp	r2, #0
 800432a:	d001      	beq.n	8004330 <_printf_common+0x24>
 800432c:	3301      	adds	r3, #1
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	6823      	ldr	r3, [r4, #0]
 8004332:	069b      	lsls	r3, r3, #26
 8004334:	d502      	bpl.n	800433c <_printf_common+0x30>
 8004336:	682b      	ldr	r3, [r5, #0]
 8004338:	3302      	adds	r3, #2
 800433a:	602b      	str	r3, [r5, #0]
 800433c:	6822      	ldr	r2, [r4, #0]
 800433e:	2306      	movs	r3, #6
 8004340:	0017      	movs	r7, r2
 8004342:	401f      	ands	r7, r3
 8004344:	421a      	tst	r2, r3
 8004346:	d027      	beq.n	8004398 <_printf_common+0x8c>
 8004348:	0023      	movs	r3, r4
 800434a:	3343      	adds	r3, #67	; 0x43
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	4193      	sbcs	r3, r2
 8004352:	6822      	ldr	r2, [r4, #0]
 8004354:	0692      	lsls	r2, r2, #26
 8004356:	d430      	bmi.n	80043ba <_printf_common+0xae>
 8004358:	0022      	movs	r2, r4
 800435a:	9901      	ldr	r1, [sp, #4]
 800435c:	9800      	ldr	r0, [sp, #0]
 800435e:	9e08      	ldr	r6, [sp, #32]
 8004360:	3243      	adds	r2, #67	; 0x43
 8004362:	47b0      	blx	r6
 8004364:	1c43      	adds	r3, r0, #1
 8004366:	d025      	beq.n	80043b4 <_printf_common+0xa8>
 8004368:	2306      	movs	r3, #6
 800436a:	6820      	ldr	r0, [r4, #0]
 800436c:	682a      	ldr	r2, [r5, #0]
 800436e:	68e1      	ldr	r1, [r4, #12]
 8004370:	2500      	movs	r5, #0
 8004372:	4003      	ands	r3, r0
 8004374:	2b04      	cmp	r3, #4
 8004376:	d103      	bne.n	8004380 <_printf_common+0x74>
 8004378:	1a8d      	subs	r5, r1, r2
 800437a:	43eb      	mvns	r3, r5
 800437c:	17db      	asrs	r3, r3, #31
 800437e:	401d      	ands	r5, r3
 8004380:	68a3      	ldr	r3, [r4, #8]
 8004382:	6922      	ldr	r2, [r4, #16]
 8004384:	4293      	cmp	r3, r2
 8004386:	dd01      	ble.n	800438c <_printf_common+0x80>
 8004388:	1a9b      	subs	r3, r3, r2
 800438a:	18ed      	adds	r5, r5, r3
 800438c:	2700      	movs	r7, #0
 800438e:	42bd      	cmp	r5, r7
 8004390:	d120      	bne.n	80043d4 <_printf_common+0xc8>
 8004392:	2000      	movs	r0, #0
 8004394:	e010      	b.n	80043b8 <_printf_common+0xac>
 8004396:	3701      	adds	r7, #1
 8004398:	68e3      	ldr	r3, [r4, #12]
 800439a:	682a      	ldr	r2, [r5, #0]
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	42bb      	cmp	r3, r7
 80043a0:	ddd2      	ble.n	8004348 <_printf_common+0x3c>
 80043a2:	0022      	movs	r2, r4
 80043a4:	2301      	movs	r3, #1
 80043a6:	9901      	ldr	r1, [sp, #4]
 80043a8:	9800      	ldr	r0, [sp, #0]
 80043aa:	9e08      	ldr	r6, [sp, #32]
 80043ac:	3219      	adds	r2, #25
 80043ae:	47b0      	blx	r6
 80043b0:	1c43      	adds	r3, r0, #1
 80043b2:	d1f0      	bne.n	8004396 <_printf_common+0x8a>
 80043b4:	2001      	movs	r0, #1
 80043b6:	4240      	negs	r0, r0
 80043b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80043ba:	2030      	movs	r0, #48	; 0x30
 80043bc:	18e1      	adds	r1, r4, r3
 80043be:	3143      	adds	r1, #67	; 0x43
 80043c0:	7008      	strb	r0, [r1, #0]
 80043c2:	0021      	movs	r1, r4
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	3145      	adds	r1, #69	; 0x45
 80043c8:	7809      	ldrb	r1, [r1, #0]
 80043ca:	18a2      	adds	r2, r4, r2
 80043cc:	3243      	adds	r2, #67	; 0x43
 80043ce:	3302      	adds	r3, #2
 80043d0:	7011      	strb	r1, [r2, #0]
 80043d2:	e7c1      	b.n	8004358 <_printf_common+0x4c>
 80043d4:	0022      	movs	r2, r4
 80043d6:	2301      	movs	r3, #1
 80043d8:	9901      	ldr	r1, [sp, #4]
 80043da:	9800      	ldr	r0, [sp, #0]
 80043dc:	9e08      	ldr	r6, [sp, #32]
 80043de:	321a      	adds	r2, #26
 80043e0:	47b0      	blx	r6
 80043e2:	1c43      	adds	r3, r0, #1
 80043e4:	d0e6      	beq.n	80043b4 <_printf_common+0xa8>
 80043e6:	3701      	adds	r7, #1
 80043e8:	e7d1      	b.n	800438e <_printf_common+0x82>
	...

080043ec <_printf_i>:
 80043ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ee:	b08b      	sub	sp, #44	; 0x2c
 80043f0:	9206      	str	r2, [sp, #24]
 80043f2:	000a      	movs	r2, r1
 80043f4:	3243      	adds	r2, #67	; 0x43
 80043f6:	9307      	str	r3, [sp, #28]
 80043f8:	9005      	str	r0, [sp, #20]
 80043fa:	9204      	str	r2, [sp, #16]
 80043fc:	7e0a      	ldrb	r2, [r1, #24]
 80043fe:	000c      	movs	r4, r1
 8004400:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004402:	2a78      	cmp	r2, #120	; 0x78
 8004404:	d807      	bhi.n	8004416 <_printf_i+0x2a>
 8004406:	2a62      	cmp	r2, #98	; 0x62
 8004408:	d809      	bhi.n	800441e <_printf_i+0x32>
 800440a:	2a00      	cmp	r2, #0
 800440c:	d100      	bne.n	8004410 <_printf_i+0x24>
 800440e:	e0c1      	b.n	8004594 <_printf_i+0x1a8>
 8004410:	2a58      	cmp	r2, #88	; 0x58
 8004412:	d100      	bne.n	8004416 <_printf_i+0x2a>
 8004414:	e08c      	b.n	8004530 <_printf_i+0x144>
 8004416:	0026      	movs	r6, r4
 8004418:	3642      	adds	r6, #66	; 0x42
 800441a:	7032      	strb	r2, [r6, #0]
 800441c:	e022      	b.n	8004464 <_printf_i+0x78>
 800441e:	0010      	movs	r0, r2
 8004420:	3863      	subs	r0, #99	; 0x63
 8004422:	2815      	cmp	r0, #21
 8004424:	d8f7      	bhi.n	8004416 <_printf_i+0x2a>
 8004426:	f7fb fe6f 	bl	8000108 <__gnu_thumb1_case_shi>
 800442a:	0016      	.short	0x0016
 800442c:	fff6001f 	.word	0xfff6001f
 8004430:	fff6fff6 	.word	0xfff6fff6
 8004434:	001ffff6 	.word	0x001ffff6
 8004438:	fff6fff6 	.word	0xfff6fff6
 800443c:	fff6fff6 	.word	0xfff6fff6
 8004440:	003600a8 	.word	0x003600a8
 8004444:	fff6009a 	.word	0xfff6009a
 8004448:	00b9fff6 	.word	0x00b9fff6
 800444c:	0036fff6 	.word	0x0036fff6
 8004450:	fff6fff6 	.word	0xfff6fff6
 8004454:	009e      	.short	0x009e
 8004456:	0026      	movs	r6, r4
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	3642      	adds	r6, #66	; 0x42
 800445c:	1d11      	adds	r1, r2, #4
 800445e:	6019      	str	r1, [r3, #0]
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	7033      	strb	r3, [r6, #0]
 8004464:	2301      	movs	r3, #1
 8004466:	e0a7      	b.n	80045b8 <_printf_i+0x1cc>
 8004468:	6808      	ldr	r0, [r1, #0]
 800446a:	6819      	ldr	r1, [r3, #0]
 800446c:	1d0a      	adds	r2, r1, #4
 800446e:	0605      	lsls	r5, r0, #24
 8004470:	d50b      	bpl.n	800448a <_printf_i+0x9e>
 8004472:	680d      	ldr	r5, [r1, #0]
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	2d00      	cmp	r5, #0
 8004478:	da03      	bge.n	8004482 <_printf_i+0x96>
 800447a:	232d      	movs	r3, #45	; 0x2d
 800447c:	9a04      	ldr	r2, [sp, #16]
 800447e:	426d      	negs	r5, r5
 8004480:	7013      	strb	r3, [r2, #0]
 8004482:	4b61      	ldr	r3, [pc, #388]	; (8004608 <_printf_i+0x21c>)
 8004484:	270a      	movs	r7, #10
 8004486:	9303      	str	r3, [sp, #12]
 8004488:	e01b      	b.n	80044c2 <_printf_i+0xd6>
 800448a:	680d      	ldr	r5, [r1, #0]
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	0641      	lsls	r1, r0, #25
 8004490:	d5f1      	bpl.n	8004476 <_printf_i+0x8a>
 8004492:	b22d      	sxth	r5, r5
 8004494:	e7ef      	b.n	8004476 <_printf_i+0x8a>
 8004496:	680d      	ldr	r5, [r1, #0]
 8004498:	6819      	ldr	r1, [r3, #0]
 800449a:	1d08      	adds	r0, r1, #4
 800449c:	6018      	str	r0, [r3, #0]
 800449e:	062e      	lsls	r6, r5, #24
 80044a0:	d501      	bpl.n	80044a6 <_printf_i+0xba>
 80044a2:	680d      	ldr	r5, [r1, #0]
 80044a4:	e003      	b.n	80044ae <_printf_i+0xc2>
 80044a6:	066d      	lsls	r5, r5, #25
 80044a8:	d5fb      	bpl.n	80044a2 <_printf_i+0xb6>
 80044aa:	680d      	ldr	r5, [r1, #0]
 80044ac:	b2ad      	uxth	r5, r5
 80044ae:	4b56      	ldr	r3, [pc, #344]	; (8004608 <_printf_i+0x21c>)
 80044b0:	2708      	movs	r7, #8
 80044b2:	9303      	str	r3, [sp, #12]
 80044b4:	2a6f      	cmp	r2, #111	; 0x6f
 80044b6:	d000      	beq.n	80044ba <_printf_i+0xce>
 80044b8:	3702      	adds	r7, #2
 80044ba:	0023      	movs	r3, r4
 80044bc:	2200      	movs	r2, #0
 80044be:	3343      	adds	r3, #67	; 0x43
 80044c0:	701a      	strb	r2, [r3, #0]
 80044c2:	6863      	ldr	r3, [r4, #4]
 80044c4:	60a3      	str	r3, [r4, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	db03      	blt.n	80044d2 <_printf_i+0xe6>
 80044ca:	2204      	movs	r2, #4
 80044cc:	6821      	ldr	r1, [r4, #0]
 80044ce:	4391      	bics	r1, r2
 80044d0:	6021      	str	r1, [r4, #0]
 80044d2:	2d00      	cmp	r5, #0
 80044d4:	d102      	bne.n	80044dc <_printf_i+0xf0>
 80044d6:	9e04      	ldr	r6, [sp, #16]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <_printf_i+0x10a>
 80044dc:	9e04      	ldr	r6, [sp, #16]
 80044de:	0028      	movs	r0, r5
 80044e0:	0039      	movs	r1, r7
 80044e2:	f7fb fea1 	bl	8000228 <__aeabi_uidivmod>
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	3e01      	subs	r6, #1
 80044ea:	5c5b      	ldrb	r3, [r3, r1]
 80044ec:	7033      	strb	r3, [r6, #0]
 80044ee:	002b      	movs	r3, r5
 80044f0:	0005      	movs	r5, r0
 80044f2:	429f      	cmp	r7, r3
 80044f4:	d9f3      	bls.n	80044de <_printf_i+0xf2>
 80044f6:	2f08      	cmp	r7, #8
 80044f8:	d109      	bne.n	800450e <_printf_i+0x122>
 80044fa:	6823      	ldr	r3, [r4, #0]
 80044fc:	07db      	lsls	r3, r3, #31
 80044fe:	d506      	bpl.n	800450e <_printf_i+0x122>
 8004500:	6863      	ldr	r3, [r4, #4]
 8004502:	6922      	ldr	r2, [r4, #16]
 8004504:	4293      	cmp	r3, r2
 8004506:	dc02      	bgt.n	800450e <_printf_i+0x122>
 8004508:	2330      	movs	r3, #48	; 0x30
 800450a:	3e01      	subs	r6, #1
 800450c:	7033      	strb	r3, [r6, #0]
 800450e:	9b04      	ldr	r3, [sp, #16]
 8004510:	1b9b      	subs	r3, r3, r6
 8004512:	6123      	str	r3, [r4, #16]
 8004514:	9b07      	ldr	r3, [sp, #28]
 8004516:	0021      	movs	r1, r4
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	9805      	ldr	r0, [sp, #20]
 800451c:	9b06      	ldr	r3, [sp, #24]
 800451e:	aa09      	add	r2, sp, #36	; 0x24
 8004520:	f7ff fef4 	bl	800430c <_printf_common>
 8004524:	1c43      	adds	r3, r0, #1
 8004526:	d14c      	bne.n	80045c2 <_printf_i+0x1d6>
 8004528:	2001      	movs	r0, #1
 800452a:	4240      	negs	r0, r0
 800452c:	b00b      	add	sp, #44	; 0x2c
 800452e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004530:	3145      	adds	r1, #69	; 0x45
 8004532:	700a      	strb	r2, [r1, #0]
 8004534:	4a34      	ldr	r2, [pc, #208]	; (8004608 <_printf_i+0x21c>)
 8004536:	9203      	str	r2, [sp, #12]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	6821      	ldr	r1, [r4, #0]
 800453c:	ca20      	ldmia	r2!, {r5}
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	0608      	lsls	r0, r1, #24
 8004542:	d516      	bpl.n	8004572 <_printf_i+0x186>
 8004544:	07cb      	lsls	r3, r1, #31
 8004546:	d502      	bpl.n	800454e <_printf_i+0x162>
 8004548:	2320      	movs	r3, #32
 800454a:	4319      	orrs	r1, r3
 800454c:	6021      	str	r1, [r4, #0]
 800454e:	2710      	movs	r7, #16
 8004550:	2d00      	cmp	r5, #0
 8004552:	d1b2      	bne.n	80044ba <_printf_i+0xce>
 8004554:	2320      	movs	r3, #32
 8004556:	6822      	ldr	r2, [r4, #0]
 8004558:	439a      	bics	r2, r3
 800455a:	6022      	str	r2, [r4, #0]
 800455c:	e7ad      	b.n	80044ba <_printf_i+0xce>
 800455e:	2220      	movs	r2, #32
 8004560:	6809      	ldr	r1, [r1, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	6022      	str	r2, [r4, #0]
 8004566:	0022      	movs	r2, r4
 8004568:	2178      	movs	r1, #120	; 0x78
 800456a:	3245      	adds	r2, #69	; 0x45
 800456c:	7011      	strb	r1, [r2, #0]
 800456e:	4a27      	ldr	r2, [pc, #156]	; (800460c <_printf_i+0x220>)
 8004570:	e7e1      	b.n	8004536 <_printf_i+0x14a>
 8004572:	0648      	lsls	r0, r1, #25
 8004574:	d5e6      	bpl.n	8004544 <_printf_i+0x158>
 8004576:	b2ad      	uxth	r5, r5
 8004578:	e7e4      	b.n	8004544 <_printf_i+0x158>
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	680d      	ldr	r5, [r1, #0]
 800457e:	1d10      	adds	r0, r2, #4
 8004580:	6949      	ldr	r1, [r1, #20]
 8004582:	6018      	str	r0, [r3, #0]
 8004584:	6813      	ldr	r3, [r2, #0]
 8004586:	062e      	lsls	r6, r5, #24
 8004588:	d501      	bpl.n	800458e <_printf_i+0x1a2>
 800458a:	6019      	str	r1, [r3, #0]
 800458c:	e002      	b.n	8004594 <_printf_i+0x1a8>
 800458e:	066d      	lsls	r5, r5, #25
 8004590:	d5fb      	bpl.n	800458a <_printf_i+0x19e>
 8004592:	8019      	strh	r1, [r3, #0]
 8004594:	2300      	movs	r3, #0
 8004596:	9e04      	ldr	r6, [sp, #16]
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	e7bb      	b.n	8004514 <_printf_i+0x128>
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	1d11      	adds	r1, r2, #4
 80045a0:	6019      	str	r1, [r3, #0]
 80045a2:	6816      	ldr	r6, [r2, #0]
 80045a4:	2100      	movs	r1, #0
 80045a6:	0030      	movs	r0, r6
 80045a8:	6862      	ldr	r2, [r4, #4]
 80045aa:	f000 facf 	bl	8004b4c <memchr>
 80045ae:	2800      	cmp	r0, #0
 80045b0:	d001      	beq.n	80045b6 <_printf_i+0x1ca>
 80045b2:	1b80      	subs	r0, r0, r6
 80045b4:	6060      	str	r0, [r4, #4]
 80045b6:	6863      	ldr	r3, [r4, #4]
 80045b8:	6123      	str	r3, [r4, #16]
 80045ba:	2300      	movs	r3, #0
 80045bc:	9a04      	ldr	r2, [sp, #16]
 80045be:	7013      	strb	r3, [r2, #0]
 80045c0:	e7a8      	b.n	8004514 <_printf_i+0x128>
 80045c2:	6923      	ldr	r3, [r4, #16]
 80045c4:	0032      	movs	r2, r6
 80045c6:	9906      	ldr	r1, [sp, #24]
 80045c8:	9805      	ldr	r0, [sp, #20]
 80045ca:	9d07      	ldr	r5, [sp, #28]
 80045cc:	47a8      	blx	r5
 80045ce:	1c43      	adds	r3, r0, #1
 80045d0:	d0aa      	beq.n	8004528 <_printf_i+0x13c>
 80045d2:	6823      	ldr	r3, [r4, #0]
 80045d4:	079b      	lsls	r3, r3, #30
 80045d6:	d415      	bmi.n	8004604 <_printf_i+0x218>
 80045d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045da:	68e0      	ldr	r0, [r4, #12]
 80045dc:	4298      	cmp	r0, r3
 80045de:	daa5      	bge.n	800452c <_printf_i+0x140>
 80045e0:	0018      	movs	r0, r3
 80045e2:	e7a3      	b.n	800452c <_printf_i+0x140>
 80045e4:	0022      	movs	r2, r4
 80045e6:	2301      	movs	r3, #1
 80045e8:	9906      	ldr	r1, [sp, #24]
 80045ea:	9805      	ldr	r0, [sp, #20]
 80045ec:	9e07      	ldr	r6, [sp, #28]
 80045ee:	3219      	adds	r2, #25
 80045f0:	47b0      	blx	r6
 80045f2:	1c43      	adds	r3, r0, #1
 80045f4:	d098      	beq.n	8004528 <_printf_i+0x13c>
 80045f6:	3501      	adds	r5, #1
 80045f8:	68e3      	ldr	r3, [r4, #12]
 80045fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fc:	1a9b      	subs	r3, r3, r2
 80045fe:	42ab      	cmp	r3, r5
 8004600:	dcf0      	bgt.n	80045e4 <_printf_i+0x1f8>
 8004602:	e7e9      	b.n	80045d8 <_printf_i+0x1ec>
 8004604:	2500      	movs	r5, #0
 8004606:	e7f7      	b.n	80045f8 <_printf_i+0x20c>
 8004608:	08004e31 	.word	0x08004e31
 800460c:	08004e42 	.word	0x08004e42

08004610 <_sbrk_r>:
 8004610:	2300      	movs	r3, #0
 8004612:	b570      	push	{r4, r5, r6, lr}
 8004614:	4d06      	ldr	r5, [pc, #24]	; (8004630 <_sbrk_r+0x20>)
 8004616:	0004      	movs	r4, r0
 8004618:	0008      	movs	r0, r1
 800461a:	602b      	str	r3, [r5, #0]
 800461c:	f7fc fc7e 	bl	8000f1c <_sbrk>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d103      	bne.n	800462c <_sbrk_r+0x1c>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d000      	beq.n	800462c <_sbrk_r+0x1c>
 800462a:	6023      	str	r3, [r4, #0]
 800462c:	bd70      	pop	{r4, r5, r6, pc}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	200001ac 	.word	0x200001ac

08004634 <__sread>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	000c      	movs	r4, r1
 8004638:	250e      	movs	r5, #14
 800463a:	5f49      	ldrsh	r1, [r1, r5]
 800463c:	f000 faec 	bl	8004c18 <_read_r>
 8004640:	2800      	cmp	r0, #0
 8004642:	db03      	blt.n	800464c <__sread+0x18>
 8004644:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004646:	181b      	adds	r3, r3, r0
 8004648:	6563      	str	r3, [r4, #84]	; 0x54
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	89a3      	ldrh	r3, [r4, #12]
 800464e:	4a02      	ldr	r2, [pc, #8]	; (8004658 <__sread+0x24>)
 8004650:	4013      	ands	r3, r2
 8004652:	81a3      	strh	r3, [r4, #12]
 8004654:	e7f9      	b.n	800464a <__sread+0x16>
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	ffffefff 	.word	0xffffefff

0800465c <__swrite>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	001f      	movs	r7, r3
 8004660:	898b      	ldrh	r3, [r1, #12]
 8004662:	0005      	movs	r5, r0
 8004664:	000c      	movs	r4, r1
 8004666:	0016      	movs	r6, r2
 8004668:	05db      	lsls	r3, r3, #23
 800466a:	d505      	bpl.n	8004678 <__swrite+0x1c>
 800466c:	230e      	movs	r3, #14
 800466e:	5ec9      	ldrsh	r1, [r1, r3]
 8004670:	2200      	movs	r2, #0
 8004672:	2302      	movs	r3, #2
 8004674:	f000 f9ea 	bl	8004a4c <_lseek_r>
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	4a05      	ldr	r2, [pc, #20]	; (8004690 <__swrite+0x34>)
 800467c:	0028      	movs	r0, r5
 800467e:	4013      	ands	r3, r2
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	0032      	movs	r2, r6
 8004684:	230e      	movs	r3, #14
 8004686:	5ee1      	ldrsh	r1, [r4, r3]
 8004688:	003b      	movs	r3, r7
 800468a:	f000 f875 	bl	8004778 <_write_r>
 800468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004690:	ffffefff 	.word	0xffffefff

08004694 <__sseek>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	000c      	movs	r4, r1
 8004698:	250e      	movs	r5, #14
 800469a:	5f49      	ldrsh	r1, [r1, r5]
 800469c:	f000 f9d6 	bl	8004a4c <_lseek_r>
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	1c42      	adds	r2, r0, #1
 80046a4:	d103      	bne.n	80046ae <__sseek+0x1a>
 80046a6:	4a05      	ldr	r2, [pc, #20]	; (80046bc <__sseek+0x28>)
 80046a8:	4013      	ands	r3, r2
 80046aa:	81a3      	strh	r3, [r4, #12]
 80046ac:	bd70      	pop	{r4, r5, r6, pc}
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	0152      	lsls	r2, r2, #5
 80046b2:	4313      	orrs	r3, r2
 80046b4:	81a3      	strh	r3, [r4, #12]
 80046b6:	6560      	str	r0, [r4, #84]	; 0x54
 80046b8:	e7f8      	b.n	80046ac <__sseek+0x18>
 80046ba:	46c0      	nop			; (mov r8, r8)
 80046bc:	ffffefff 	.word	0xffffefff

080046c0 <__sclose>:
 80046c0:	b510      	push	{r4, lr}
 80046c2:	230e      	movs	r3, #14
 80046c4:	5ec9      	ldrsh	r1, [r1, r3]
 80046c6:	f000 f8e3 	bl	8004890 <_close_r>
 80046ca:	bd10      	pop	{r4, pc}

080046cc <__swbuf_r>:
 80046cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ce:	0005      	movs	r5, r0
 80046d0:	000e      	movs	r6, r1
 80046d2:	0014      	movs	r4, r2
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d004      	beq.n	80046e2 <__swbuf_r+0x16>
 80046d8:	6983      	ldr	r3, [r0, #24]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d101      	bne.n	80046e2 <__swbuf_r+0x16>
 80046de:	f7ff fb77 	bl	8003dd0 <__sinit>
 80046e2:	4b22      	ldr	r3, [pc, #136]	; (800476c <__swbuf_r+0xa0>)
 80046e4:	429c      	cmp	r4, r3
 80046e6:	d12e      	bne.n	8004746 <__swbuf_r+0x7a>
 80046e8:	686c      	ldr	r4, [r5, #4]
 80046ea:	69a3      	ldr	r3, [r4, #24]
 80046ec:	60a3      	str	r3, [r4, #8]
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	071b      	lsls	r3, r3, #28
 80046f2:	d532      	bpl.n	800475a <__swbuf_r+0x8e>
 80046f4:	6923      	ldr	r3, [r4, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d02f      	beq.n	800475a <__swbuf_r+0x8e>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	6922      	ldr	r2, [r4, #16]
 80046fe:	b2f7      	uxtb	r7, r6
 8004700:	1a98      	subs	r0, r3, r2
 8004702:	6963      	ldr	r3, [r4, #20]
 8004704:	b2f6      	uxtb	r6, r6
 8004706:	4283      	cmp	r3, r0
 8004708:	dc05      	bgt.n	8004716 <__swbuf_r+0x4a>
 800470a:	0021      	movs	r1, r4
 800470c:	0028      	movs	r0, r5
 800470e:	f000 f95d 	bl	80049cc <_fflush_r>
 8004712:	2800      	cmp	r0, #0
 8004714:	d127      	bne.n	8004766 <__swbuf_r+0x9a>
 8004716:	68a3      	ldr	r3, [r4, #8]
 8004718:	3001      	adds	r0, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	60a3      	str	r3, [r4, #8]
 800471e:	6823      	ldr	r3, [r4, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	6022      	str	r2, [r4, #0]
 8004724:	701f      	strb	r7, [r3, #0]
 8004726:	6963      	ldr	r3, [r4, #20]
 8004728:	4283      	cmp	r3, r0
 800472a:	d004      	beq.n	8004736 <__swbuf_r+0x6a>
 800472c:	89a3      	ldrh	r3, [r4, #12]
 800472e:	07db      	lsls	r3, r3, #31
 8004730:	d507      	bpl.n	8004742 <__swbuf_r+0x76>
 8004732:	2e0a      	cmp	r6, #10
 8004734:	d105      	bne.n	8004742 <__swbuf_r+0x76>
 8004736:	0021      	movs	r1, r4
 8004738:	0028      	movs	r0, r5
 800473a:	f000 f947 	bl	80049cc <_fflush_r>
 800473e:	2800      	cmp	r0, #0
 8004740:	d111      	bne.n	8004766 <__swbuf_r+0x9a>
 8004742:	0030      	movs	r0, r6
 8004744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <__swbuf_r+0xa4>)
 8004748:	429c      	cmp	r4, r3
 800474a:	d101      	bne.n	8004750 <__swbuf_r+0x84>
 800474c:	68ac      	ldr	r4, [r5, #8]
 800474e:	e7cc      	b.n	80046ea <__swbuf_r+0x1e>
 8004750:	4b08      	ldr	r3, [pc, #32]	; (8004774 <__swbuf_r+0xa8>)
 8004752:	429c      	cmp	r4, r3
 8004754:	d1c9      	bne.n	80046ea <__swbuf_r+0x1e>
 8004756:	68ec      	ldr	r4, [r5, #12]
 8004758:	e7c7      	b.n	80046ea <__swbuf_r+0x1e>
 800475a:	0021      	movs	r1, r4
 800475c:	0028      	movs	r0, r5
 800475e:	f000 f81f 	bl	80047a0 <__swsetup_r>
 8004762:	2800      	cmp	r0, #0
 8004764:	d0c9      	beq.n	80046fa <__swbuf_r+0x2e>
 8004766:	2601      	movs	r6, #1
 8004768:	4276      	negs	r6, r6
 800476a:	e7ea      	b.n	8004742 <__swbuf_r+0x76>
 800476c:	08004de0 	.word	0x08004de0
 8004770:	08004e00 	.word	0x08004e00
 8004774:	08004dc0 	.word	0x08004dc0

08004778 <_write_r>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	0004      	movs	r4, r0
 800477c:	0008      	movs	r0, r1
 800477e:	0011      	movs	r1, r2
 8004780:	001a      	movs	r2, r3
 8004782:	2300      	movs	r3, #0
 8004784:	4d05      	ldr	r5, [pc, #20]	; (800479c <_write_r+0x24>)
 8004786:	602b      	str	r3, [r5, #0]
 8004788:	f7fc fb80 	bl	8000e8c <_write>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d103      	bne.n	8004798 <_write_r+0x20>
 8004790:	682b      	ldr	r3, [r5, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d000      	beq.n	8004798 <_write_r+0x20>
 8004796:	6023      	str	r3, [r4, #0]
 8004798:	bd70      	pop	{r4, r5, r6, pc}
 800479a:	46c0      	nop			; (mov r8, r8)
 800479c:	200001ac 	.word	0x200001ac

080047a0 <__swsetup_r>:
 80047a0:	4b37      	ldr	r3, [pc, #220]	; (8004880 <__swsetup_r+0xe0>)
 80047a2:	b570      	push	{r4, r5, r6, lr}
 80047a4:	681d      	ldr	r5, [r3, #0]
 80047a6:	0006      	movs	r6, r0
 80047a8:	000c      	movs	r4, r1
 80047aa:	2d00      	cmp	r5, #0
 80047ac:	d005      	beq.n	80047ba <__swsetup_r+0x1a>
 80047ae:	69ab      	ldr	r3, [r5, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d102      	bne.n	80047ba <__swsetup_r+0x1a>
 80047b4:	0028      	movs	r0, r5
 80047b6:	f7ff fb0b 	bl	8003dd0 <__sinit>
 80047ba:	4b32      	ldr	r3, [pc, #200]	; (8004884 <__swsetup_r+0xe4>)
 80047bc:	429c      	cmp	r4, r3
 80047be:	d10f      	bne.n	80047e0 <__swsetup_r+0x40>
 80047c0:	686c      	ldr	r4, [r5, #4]
 80047c2:	230c      	movs	r3, #12
 80047c4:	5ee2      	ldrsh	r2, [r4, r3]
 80047c6:	b293      	uxth	r3, r2
 80047c8:	0711      	lsls	r1, r2, #28
 80047ca:	d42d      	bmi.n	8004828 <__swsetup_r+0x88>
 80047cc:	06d9      	lsls	r1, r3, #27
 80047ce:	d411      	bmi.n	80047f4 <__swsetup_r+0x54>
 80047d0:	2309      	movs	r3, #9
 80047d2:	2001      	movs	r0, #1
 80047d4:	6033      	str	r3, [r6, #0]
 80047d6:	3337      	adds	r3, #55	; 0x37
 80047d8:	4313      	orrs	r3, r2
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	4240      	negs	r0, r0
 80047de:	bd70      	pop	{r4, r5, r6, pc}
 80047e0:	4b29      	ldr	r3, [pc, #164]	; (8004888 <__swsetup_r+0xe8>)
 80047e2:	429c      	cmp	r4, r3
 80047e4:	d101      	bne.n	80047ea <__swsetup_r+0x4a>
 80047e6:	68ac      	ldr	r4, [r5, #8]
 80047e8:	e7eb      	b.n	80047c2 <__swsetup_r+0x22>
 80047ea:	4b28      	ldr	r3, [pc, #160]	; (800488c <__swsetup_r+0xec>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d1e8      	bne.n	80047c2 <__swsetup_r+0x22>
 80047f0:	68ec      	ldr	r4, [r5, #12]
 80047f2:	e7e6      	b.n	80047c2 <__swsetup_r+0x22>
 80047f4:	075b      	lsls	r3, r3, #29
 80047f6:	d513      	bpl.n	8004820 <__swsetup_r+0x80>
 80047f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047fa:	2900      	cmp	r1, #0
 80047fc:	d008      	beq.n	8004810 <__swsetup_r+0x70>
 80047fe:	0023      	movs	r3, r4
 8004800:	3344      	adds	r3, #68	; 0x44
 8004802:	4299      	cmp	r1, r3
 8004804:	d002      	beq.n	800480c <__swsetup_r+0x6c>
 8004806:	0030      	movs	r0, r6
 8004808:	f000 f9bc 	bl	8004b84 <_free_r>
 800480c:	2300      	movs	r3, #0
 800480e:	6363      	str	r3, [r4, #52]	; 0x34
 8004810:	2224      	movs	r2, #36	; 0x24
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	4393      	bics	r3, r2
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	2300      	movs	r3, #0
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	2308      	movs	r3, #8
 8004822:	89a2      	ldrh	r2, [r4, #12]
 8004824:	4313      	orrs	r3, r2
 8004826:	81a3      	strh	r3, [r4, #12]
 8004828:	6923      	ldr	r3, [r4, #16]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <__swsetup_r+0xa6>
 800482e:	21a0      	movs	r1, #160	; 0xa0
 8004830:	2280      	movs	r2, #128	; 0x80
 8004832:	89a3      	ldrh	r3, [r4, #12]
 8004834:	0089      	lsls	r1, r1, #2
 8004836:	0092      	lsls	r2, r2, #2
 8004838:	400b      	ands	r3, r1
 800483a:	4293      	cmp	r3, r2
 800483c:	d003      	beq.n	8004846 <__swsetup_r+0xa6>
 800483e:	0021      	movs	r1, r4
 8004840:	0030      	movs	r0, r6
 8004842:	f000 f93f 	bl	8004ac4 <__smakebuf_r>
 8004846:	220c      	movs	r2, #12
 8004848:	5ea3      	ldrsh	r3, [r4, r2]
 800484a:	2001      	movs	r0, #1
 800484c:	001a      	movs	r2, r3
 800484e:	b299      	uxth	r1, r3
 8004850:	4002      	ands	r2, r0
 8004852:	4203      	tst	r3, r0
 8004854:	d00f      	beq.n	8004876 <__swsetup_r+0xd6>
 8004856:	2200      	movs	r2, #0
 8004858:	60a2      	str	r2, [r4, #8]
 800485a:	6962      	ldr	r2, [r4, #20]
 800485c:	4252      	negs	r2, r2
 800485e:	61a2      	str	r2, [r4, #24]
 8004860:	2000      	movs	r0, #0
 8004862:	6922      	ldr	r2, [r4, #16]
 8004864:	4282      	cmp	r2, r0
 8004866:	d1ba      	bne.n	80047de <__swsetup_r+0x3e>
 8004868:	060a      	lsls	r2, r1, #24
 800486a:	d5b8      	bpl.n	80047de <__swsetup_r+0x3e>
 800486c:	2240      	movs	r2, #64	; 0x40
 800486e:	4313      	orrs	r3, r2
 8004870:	81a3      	strh	r3, [r4, #12]
 8004872:	3801      	subs	r0, #1
 8004874:	e7b3      	b.n	80047de <__swsetup_r+0x3e>
 8004876:	0788      	lsls	r0, r1, #30
 8004878:	d400      	bmi.n	800487c <__swsetup_r+0xdc>
 800487a:	6962      	ldr	r2, [r4, #20]
 800487c:	60a2      	str	r2, [r4, #8]
 800487e:	e7ef      	b.n	8004860 <__swsetup_r+0xc0>
 8004880:	20000018 	.word	0x20000018
 8004884:	08004de0 	.word	0x08004de0
 8004888:	08004e00 	.word	0x08004e00
 800488c:	08004dc0 	.word	0x08004dc0

08004890 <_close_r>:
 8004890:	2300      	movs	r3, #0
 8004892:	b570      	push	{r4, r5, r6, lr}
 8004894:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_close_r+0x20>)
 8004896:	0004      	movs	r4, r0
 8004898:	0008      	movs	r0, r1
 800489a:	602b      	str	r3, [r5, #0]
 800489c:	f7fc fb12 	bl	8000ec4 <_close>
 80048a0:	1c43      	adds	r3, r0, #1
 80048a2:	d103      	bne.n	80048ac <_close_r+0x1c>
 80048a4:	682b      	ldr	r3, [r5, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d000      	beq.n	80048ac <_close_r+0x1c>
 80048aa:	6023      	str	r3, [r4, #0]
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	46c0      	nop			; (mov r8, r8)
 80048b0:	200001ac 	.word	0x200001ac

080048b4 <__sflush_r>:
 80048b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80048b6:	898b      	ldrh	r3, [r1, #12]
 80048b8:	0005      	movs	r5, r0
 80048ba:	000c      	movs	r4, r1
 80048bc:	071a      	lsls	r2, r3, #28
 80048be:	d45f      	bmi.n	8004980 <__sflush_r+0xcc>
 80048c0:	684a      	ldr	r2, [r1, #4]
 80048c2:	2a00      	cmp	r2, #0
 80048c4:	dc04      	bgt.n	80048d0 <__sflush_r+0x1c>
 80048c6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80048c8:	2a00      	cmp	r2, #0
 80048ca:	dc01      	bgt.n	80048d0 <__sflush_r+0x1c>
 80048cc:	2000      	movs	r0, #0
 80048ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80048d0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80048d2:	2f00      	cmp	r7, #0
 80048d4:	d0fa      	beq.n	80048cc <__sflush_r+0x18>
 80048d6:	2200      	movs	r2, #0
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	682e      	ldr	r6, [r5, #0]
 80048dc:	602a      	str	r2, [r5, #0]
 80048de:	001a      	movs	r2, r3
 80048e0:	0149      	lsls	r1, r1, #5
 80048e2:	400a      	ands	r2, r1
 80048e4:	420b      	tst	r3, r1
 80048e6:	d034      	beq.n	8004952 <__sflush_r+0x9e>
 80048e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048ea:	89a3      	ldrh	r3, [r4, #12]
 80048ec:	075b      	lsls	r3, r3, #29
 80048ee:	d506      	bpl.n	80048fe <__sflush_r+0x4a>
 80048f0:	6863      	ldr	r3, [r4, #4]
 80048f2:	1ac0      	subs	r0, r0, r3
 80048f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <__sflush_r+0x4a>
 80048fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048fc:	1ac0      	subs	r0, r0, r3
 80048fe:	0002      	movs	r2, r0
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	2300      	movs	r3, #0
 8004904:	0028      	movs	r0, r5
 8004906:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004908:	47b8      	blx	r7
 800490a:	89a1      	ldrh	r1, [r4, #12]
 800490c:	1c43      	adds	r3, r0, #1
 800490e:	d106      	bne.n	800491e <__sflush_r+0x6a>
 8004910:	682b      	ldr	r3, [r5, #0]
 8004912:	2b1d      	cmp	r3, #29
 8004914:	d831      	bhi.n	800497a <__sflush_r+0xc6>
 8004916:	4a2c      	ldr	r2, [pc, #176]	; (80049c8 <__sflush_r+0x114>)
 8004918:	40da      	lsrs	r2, r3
 800491a:	07d3      	lsls	r3, r2, #31
 800491c:	d52d      	bpl.n	800497a <__sflush_r+0xc6>
 800491e:	2300      	movs	r3, #0
 8004920:	6063      	str	r3, [r4, #4]
 8004922:	6923      	ldr	r3, [r4, #16]
 8004924:	6023      	str	r3, [r4, #0]
 8004926:	04cb      	lsls	r3, r1, #19
 8004928:	d505      	bpl.n	8004936 <__sflush_r+0x82>
 800492a:	1c43      	adds	r3, r0, #1
 800492c:	d102      	bne.n	8004934 <__sflush_r+0x80>
 800492e:	682b      	ldr	r3, [r5, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d100      	bne.n	8004936 <__sflush_r+0x82>
 8004934:	6560      	str	r0, [r4, #84]	; 0x54
 8004936:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004938:	602e      	str	r6, [r5, #0]
 800493a:	2900      	cmp	r1, #0
 800493c:	d0c6      	beq.n	80048cc <__sflush_r+0x18>
 800493e:	0023      	movs	r3, r4
 8004940:	3344      	adds	r3, #68	; 0x44
 8004942:	4299      	cmp	r1, r3
 8004944:	d002      	beq.n	800494c <__sflush_r+0x98>
 8004946:	0028      	movs	r0, r5
 8004948:	f000 f91c 	bl	8004b84 <_free_r>
 800494c:	2000      	movs	r0, #0
 800494e:	6360      	str	r0, [r4, #52]	; 0x34
 8004950:	e7bd      	b.n	80048ce <__sflush_r+0x1a>
 8004952:	2301      	movs	r3, #1
 8004954:	0028      	movs	r0, r5
 8004956:	6a21      	ldr	r1, [r4, #32]
 8004958:	47b8      	blx	r7
 800495a:	1c43      	adds	r3, r0, #1
 800495c:	d1c5      	bne.n	80048ea <__sflush_r+0x36>
 800495e:	682b      	ldr	r3, [r5, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0c2      	beq.n	80048ea <__sflush_r+0x36>
 8004964:	2b1d      	cmp	r3, #29
 8004966:	d001      	beq.n	800496c <__sflush_r+0xb8>
 8004968:	2b16      	cmp	r3, #22
 800496a:	d101      	bne.n	8004970 <__sflush_r+0xbc>
 800496c:	602e      	str	r6, [r5, #0]
 800496e:	e7ad      	b.n	80048cc <__sflush_r+0x18>
 8004970:	2340      	movs	r3, #64	; 0x40
 8004972:	89a2      	ldrh	r2, [r4, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	e7a9      	b.n	80048ce <__sflush_r+0x1a>
 800497a:	2340      	movs	r3, #64	; 0x40
 800497c:	430b      	orrs	r3, r1
 800497e:	e7fa      	b.n	8004976 <__sflush_r+0xc2>
 8004980:	690f      	ldr	r7, [r1, #16]
 8004982:	2f00      	cmp	r7, #0
 8004984:	d0a2      	beq.n	80048cc <__sflush_r+0x18>
 8004986:	680a      	ldr	r2, [r1, #0]
 8004988:	600f      	str	r7, [r1, #0]
 800498a:	1bd2      	subs	r2, r2, r7
 800498c:	9201      	str	r2, [sp, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	079b      	lsls	r3, r3, #30
 8004992:	d100      	bne.n	8004996 <__sflush_r+0xe2>
 8004994:	694a      	ldr	r2, [r1, #20]
 8004996:	60a2      	str	r2, [r4, #8]
 8004998:	9b01      	ldr	r3, [sp, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	dc00      	bgt.n	80049a0 <__sflush_r+0xec>
 800499e:	e795      	b.n	80048cc <__sflush_r+0x18>
 80049a0:	003a      	movs	r2, r7
 80049a2:	0028      	movs	r0, r5
 80049a4:	9b01      	ldr	r3, [sp, #4]
 80049a6:	6a21      	ldr	r1, [r4, #32]
 80049a8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049aa:	47b0      	blx	r6
 80049ac:	2800      	cmp	r0, #0
 80049ae:	dc06      	bgt.n	80049be <__sflush_r+0x10a>
 80049b0:	2340      	movs	r3, #64	; 0x40
 80049b2:	2001      	movs	r0, #1
 80049b4:	89a2      	ldrh	r2, [r4, #12]
 80049b6:	4240      	negs	r0, r0
 80049b8:	4313      	orrs	r3, r2
 80049ba:	81a3      	strh	r3, [r4, #12]
 80049bc:	e787      	b.n	80048ce <__sflush_r+0x1a>
 80049be:	9b01      	ldr	r3, [sp, #4]
 80049c0:	183f      	adds	r7, r7, r0
 80049c2:	1a1b      	subs	r3, r3, r0
 80049c4:	9301      	str	r3, [sp, #4]
 80049c6:	e7e7      	b.n	8004998 <__sflush_r+0xe4>
 80049c8:	20400001 	.word	0x20400001

080049cc <_fflush_r>:
 80049cc:	690b      	ldr	r3, [r1, #16]
 80049ce:	b570      	push	{r4, r5, r6, lr}
 80049d0:	0005      	movs	r5, r0
 80049d2:	000c      	movs	r4, r1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d102      	bne.n	80049de <_fflush_r+0x12>
 80049d8:	2500      	movs	r5, #0
 80049da:	0028      	movs	r0, r5
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
 80049de:	2800      	cmp	r0, #0
 80049e0:	d004      	beq.n	80049ec <_fflush_r+0x20>
 80049e2:	6983      	ldr	r3, [r0, #24]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <_fflush_r+0x20>
 80049e8:	f7ff f9f2 	bl	8003dd0 <__sinit>
 80049ec:	4b14      	ldr	r3, [pc, #80]	; (8004a40 <_fflush_r+0x74>)
 80049ee:	429c      	cmp	r4, r3
 80049f0:	d11b      	bne.n	8004a2a <_fflush_r+0x5e>
 80049f2:	686c      	ldr	r4, [r5, #4]
 80049f4:	220c      	movs	r2, #12
 80049f6:	5ea3      	ldrsh	r3, [r4, r2]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d0ed      	beq.n	80049d8 <_fflush_r+0xc>
 80049fc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049fe:	07d2      	lsls	r2, r2, #31
 8004a00:	d404      	bmi.n	8004a0c <_fflush_r+0x40>
 8004a02:	059b      	lsls	r3, r3, #22
 8004a04:	d402      	bmi.n	8004a0c <_fflush_r+0x40>
 8004a06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a08:	f7ff fa83 	bl	8003f12 <__retarget_lock_acquire_recursive>
 8004a0c:	0028      	movs	r0, r5
 8004a0e:	0021      	movs	r1, r4
 8004a10:	f7ff ff50 	bl	80048b4 <__sflush_r>
 8004a14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a16:	0005      	movs	r5, r0
 8004a18:	07db      	lsls	r3, r3, #31
 8004a1a:	d4de      	bmi.n	80049da <_fflush_r+0xe>
 8004a1c:	89a3      	ldrh	r3, [r4, #12]
 8004a1e:	059b      	lsls	r3, r3, #22
 8004a20:	d4db      	bmi.n	80049da <_fflush_r+0xe>
 8004a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a24:	f7ff fa76 	bl	8003f14 <__retarget_lock_release_recursive>
 8004a28:	e7d7      	b.n	80049da <_fflush_r+0xe>
 8004a2a:	4b06      	ldr	r3, [pc, #24]	; (8004a44 <_fflush_r+0x78>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	d101      	bne.n	8004a34 <_fflush_r+0x68>
 8004a30:	68ac      	ldr	r4, [r5, #8]
 8004a32:	e7df      	b.n	80049f4 <_fflush_r+0x28>
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <_fflush_r+0x7c>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	d1dc      	bne.n	80049f4 <_fflush_r+0x28>
 8004a3a:	68ec      	ldr	r4, [r5, #12]
 8004a3c:	e7da      	b.n	80049f4 <_fflush_r+0x28>
 8004a3e:	46c0      	nop			; (mov r8, r8)
 8004a40:	08004de0 	.word	0x08004de0
 8004a44:	08004e00 	.word	0x08004e00
 8004a48:	08004dc0 	.word	0x08004dc0

08004a4c <_lseek_r>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	0004      	movs	r4, r0
 8004a50:	0008      	movs	r0, r1
 8004a52:	0011      	movs	r1, r2
 8004a54:	001a      	movs	r2, r3
 8004a56:	2300      	movs	r3, #0
 8004a58:	4d05      	ldr	r5, [pc, #20]	; (8004a70 <_lseek_r+0x24>)
 8004a5a:	602b      	str	r3, [r5, #0]
 8004a5c:	f7fc fa53 	bl	8000f06 <_lseek>
 8004a60:	1c43      	adds	r3, r0, #1
 8004a62:	d103      	bne.n	8004a6c <_lseek_r+0x20>
 8004a64:	682b      	ldr	r3, [r5, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d000      	beq.n	8004a6c <_lseek_r+0x20>
 8004a6a:	6023      	str	r3, [r4, #0]
 8004a6c:	bd70      	pop	{r4, r5, r6, pc}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	200001ac 	.word	0x200001ac

08004a74 <__swhatbuf_r>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	000e      	movs	r6, r1
 8004a78:	001d      	movs	r5, r3
 8004a7a:	230e      	movs	r3, #14
 8004a7c:	5ec9      	ldrsh	r1, [r1, r3]
 8004a7e:	0014      	movs	r4, r2
 8004a80:	b096      	sub	sp, #88	; 0x58
 8004a82:	2900      	cmp	r1, #0
 8004a84:	da08      	bge.n	8004a98 <__swhatbuf_r+0x24>
 8004a86:	220c      	movs	r2, #12
 8004a88:	5eb3      	ldrsh	r3, [r6, r2]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	602a      	str	r2, [r5, #0]
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	d411      	bmi.n	8004ab6 <__swhatbuf_r+0x42>
 8004a92:	2380      	movs	r3, #128	; 0x80
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	e00f      	b.n	8004ab8 <__swhatbuf_r+0x44>
 8004a98:	466a      	mov	r2, sp
 8004a9a:	f000 f8d1 	bl	8004c40 <_fstat_r>
 8004a9e:	2800      	cmp	r0, #0
 8004aa0:	dbf1      	blt.n	8004a86 <__swhatbuf_r+0x12>
 8004aa2:	23f0      	movs	r3, #240	; 0xf0
 8004aa4:	9901      	ldr	r1, [sp, #4]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	4019      	ands	r1, r3
 8004aaa:	4b05      	ldr	r3, [pc, #20]	; (8004ac0 <__swhatbuf_r+0x4c>)
 8004aac:	18c9      	adds	r1, r1, r3
 8004aae:	424b      	negs	r3, r1
 8004ab0:	4159      	adcs	r1, r3
 8004ab2:	6029      	str	r1, [r5, #0]
 8004ab4:	e7ed      	b.n	8004a92 <__swhatbuf_r+0x1e>
 8004ab6:	2340      	movs	r3, #64	; 0x40
 8004ab8:	2000      	movs	r0, #0
 8004aba:	6023      	str	r3, [r4, #0]
 8004abc:	b016      	add	sp, #88	; 0x58
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	ffffe000 	.word	0xffffe000

08004ac4 <__smakebuf_r>:
 8004ac4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ac6:	2602      	movs	r6, #2
 8004ac8:	898b      	ldrh	r3, [r1, #12]
 8004aca:	0005      	movs	r5, r0
 8004acc:	000c      	movs	r4, r1
 8004ace:	4233      	tst	r3, r6
 8004ad0:	d006      	beq.n	8004ae0 <__smakebuf_r+0x1c>
 8004ad2:	0023      	movs	r3, r4
 8004ad4:	3347      	adds	r3, #71	; 0x47
 8004ad6:	6023      	str	r3, [r4, #0]
 8004ad8:	6123      	str	r3, [r4, #16]
 8004ada:	2301      	movs	r3, #1
 8004adc:	6163      	str	r3, [r4, #20]
 8004ade:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004ae0:	466a      	mov	r2, sp
 8004ae2:	ab01      	add	r3, sp, #4
 8004ae4:	f7ff ffc6 	bl	8004a74 <__swhatbuf_r>
 8004ae8:	9900      	ldr	r1, [sp, #0]
 8004aea:	0007      	movs	r7, r0
 8004aec:	0028      	movs	r0, r5
 8004aee:	f7ff fa35 	bl	8003f5c <_malloc_r>
 8004af2:	2800      	cmp	r0, #0
 8004af4:	d108      	bne.n	8004b08 <__smakebuf_r+0x44>
 8004af6:	220c      	movs	r2, #12
 8004af8:	5ea3      	ldrsh	r3, [r4, r2]
 8004afa:	059a      	lsls	r2, r3, #22
 8004afc:	d4ef      	bmi.n	8004ade <__smakebuf_r+0x1a>
 8004afe:	2203      	movs	r2, #3
 8004b00:	4393      	bics	r3, r2
 8004b02:	431e      	orrs	r6, r3
 8004b04:	81a6      	strh	r6, [r4, #12]
 8004b06:	e7e4      	b.n	8004ad2 <__smakebuf_r+0xe>
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <__smakebuf_r+0x84>)
 8004b0a:	62ab      	str	r3, [r5, #40]	; 0x28
 8004b0c:	2380      	movs	r3, #128	; 0x80
 8004b0e:	89a2      	ldrh	r2, [r4, #12]
 8004b10:	6020      	str	r0, [r4, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	81a3      	strh	r3, [r4, #12]
 8004b16:	9b00      	ldr	r3, [sp, #0]
 8004b18:	6120      	str	r0, [r4, #16]
 8004b1a:	6163      	str	r3, [r4, #20]
 8004b1c:	9b01      	ldr	r3, [sp, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00d      	beq.n	8004b3e <__smakebuf_r+0x7a>
 8004b22:	0028      	movs	r0, r5
 8004b24:	230e      	movs	r3, #14
 8004b26:	5ee1      	ldrsh	r1, [r4, r3]
 8004b28:	f000 f89c 	bl	8004c64 <_isatty_r>
 8004b2c:	2800      	cmp	r0, #0
 8004b2e:	d006      	beq.n	8004b3e <__smakebuf_r+0x7a>
 8004b30:	2203      	movs	r2, #3
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	4393      	bics	r3, r2
 8004b36:	001a      	movs	r2, r3
 8004b38:	2301      	movs	r3, #1
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	81a3      	strh	r3, [r4, #12]
 8004b3e:	89a0      	ldrh	r0, [r4, #12]
 8004b40:	4307      	orrs	r7, r0
 8004b42:	81a7      	strh	r7, [r4, #12]
 8004b44:	e7cb      	b.n	8004ade <__smakebuf_r+0x1a>
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	08003d55 	.word	0x08003d55

08004b4c <memchr>:
 8004b4c:	b2c9      	uxtb	r1, r1
 8004b4e:	1882      	adds	r2, r0, r2
 8004b50:	4290      	cmp	r0, r2
 8004b52:	d101      	bne.n	8004b58 <memchr+0xc>
 8004b54:	2000      	movs	r0, #0
 8004b56:	4770      	bx	lr
 8004b58:	7803      	ldrb	r3, [r0, #0]
 8004b5a:	428b      	cmp	r3, r1
 8004b5c:	d0fb      	beq.n	8004b56 <memchr+0xa>
 8004b5e:	3001      	adds	r0, #1
 8004b60:	e7f6      	b.n	8004b50 <memchr+0x4>
	...

08004b64 <__malloc_lock>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	4802      	ldr	r0, [pc, #8]	; (8004b70 <__malloc_lock+0xc>)
 8004b68:	f7ff f9d3 	bl	8003f12 <__retarget_lock_acquire_recursive>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	200001a0 	.word	0x200001a0

08004b74 <__malloc_unlock>:
 8004b74:	b510      	push	{r4, lr}
 8004b76:	4802      	ldr	r0, [pc, #8]	; (8004b80 <__malloc_unlock+0xc>)
 8004b78:	f7ff f9cc 	bl	8003f14 <__retarget_lock_release_recursive>
 8004b7c:	bd10      	pop	{r4, pc}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	200001a0 	.word	0x200001a0

08004b84 <_free_r>:
 8004b84:	b570      	push	{r4, r5, r6, lr}
 8004b86:	0005      	movs	r5, r0
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	d010      	beq.n	8004bae <_free_r+0x2a>
 8004b8c:	1f0c      	subs	r4, r1, #4
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	da00      	bge.n	8004b96 <_free_r+0x12>
 8004b94:	18e4      	adds	r4, r4, r3
 8004b96:	0028      	movs	r0, r5
 8004b98:	f7ff ffe4 	bl	8004b64 <__malloc_lock>
 8004b9c:	4a1d      	ldr	r2, [pc, #116]	; (8004c14 <_free_r+0x90>)
 8004b9e:	6813      	ldr	r3, [r2, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d105      	bne.n	8004bb0 <_free_r+0x2c>
 8004ba4:	6063      	str	r3, [r4, #4]
 8004ba6:	6014      	str	r4, [r2, #0]
 8004ba8:	0028      	movs	r0, r5
 8004baa:	f7ff ffe3 	bl	8004b74 <__malloc_unlock>
 8004bae:	bd70      	pop	{r4, r5, r6, pc}
 8004bb0:	42a3      	cmp	r3, r4
 8004bb2:	d908      	bls.n	8004bc6 <_free_r+0x42>
 8004bb4:	6821      	ldr	r1, [r4, #0]
 8004bb6:	1860      	adds	r0, r4, r1
 8004bb8:	4283      	cmp	r3, r0
 8004bba:	d1f3      	bne.n	8004ba4 <_free_r+0x20>
 8004bbc:	6818      	ldr	r0, [r3, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	1841      	adds	r1, r0, r1
 8004bc2:	6021      	str	r1, [r4, #0]
 8004bc4:	e7ee      	b.n	8004ba4 <_free_r+0x20>
 8004bc6:	001a      	movs	r2, r3
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <_free_r+0x4e>
 8004bce:	42a3      	cmp	r3, r4
 8004bd0:	d9f9      	bls.n	8004bc6 <_free_r+0x42>
 8004bd2:	6811      	ldr	r1, [r2, #0]
 8004bd4:	1850      	adds	r0, r2, r1
 8004bd6:	42a0      	cmp	r0, r4
 8004bd8:	d10b      	bne.n	8004bf2 <_free_r+0x6e>
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	1809      	adds	r1, r1, r0
 8004bde:	1850      	adds	r0, r2, r1
 8004be0:	6011      	str	r1, [r2, #0]
 8004be2:	4283      	cmp	r3, r0
 8004be4:	d1e0      	bne.n	8004ba8 <_free_r+0x24>
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	1841      	adds	r1, r0, r1
 8004bec:	6011      	str	r1, [r2, #0]
 8004bee:	6053      	str	r3, [r2, #4]
 8004bf0:	e7da      	b.n	8004ba8 <_free_r+0x24>
 8004bf2:	42a0      	cmp	r0, r4
 8004bf4:	d902      	bls.n	8004bfc <_free_r+0x78>
 8004bf6:	230c      	movs	r3, #12
 8004bf8:	602b      	str	r3, [r5, #0]
 8004bfa:	e7d5      	b.n	8004ba8 <_free_r+0x24>
 8004bfc:	6821      	ldr	r1, [r4, #0]
 8004bfe:	1860      	adds	r0, r4, r1
 8004c00:	4283      	cmp	r3, r0
 8004c02:	d103      	bne.n	8004c0c <_free_r+0x88>
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	1841      	adds	r1, r0, r1
 8004c0a:	6021      	str	r1, [r4, #0]
 8004c0c:	6063      	str	r3, [r4, #4]
 8004c0e:	6054      	str	r4, [r2, #4]
 8004c10:	e7ca      	b.n	8004ba8 <_free_r+0x24>
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	200001a4 	.word	0x200001a4

08004c18 <_read_r>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	0004      	movs	r4, r0
 8004c1c:	0008      	movs	r0, r1
 8004c1e:	0011      	movs	r1, r2
 8004c20:	001a      	movs	r2, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	4d05      	ldr	r5, [pc, #20]	; (8004c3c <_read_r+0x24>)
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	f7fc f913 	bl	8000e52 <_read>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d103      	bne.n	8004c38 <_read_r+0x20>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d000      	beq.n	8004c38 <_read_r+0x20>
 8004c36:	6023      	str	r3, [r4, #0]
 8004c38:	bd70      	pop	{r4, r5, r6, pc}
 8004c3a:	46c0      	nop			; (mov r8, r8)
 8004c3c:	200001ac 	.word	0x200001ac

08004c40 <_fstat_r>:
 8004c40:	2300      	movs	r3, #0
 8004c42:	b570      	push	{r4, r5, r6, lr}
 8004c44:	4d06      	ldr	r5, [pc, #24]	; (8004c60 <_fstat_r+0x20>)
 8004c46:	0004      	movs	r4, r0
 8004c48:	0008      	movs	r0, r1
 8004c4a:	0011      	movs	r1, r2
 8004c4c:	602b      	str	r3, [r5, #0]
 8004c4e:	f7fc f943 	bl	8000ed8 <_fstat>
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d103      	bne.n	8004c5e <_fstat_r+0x1e>
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d000      	beq.n	8004c5e <_fstat_r+0x1e>
 8004c5c:	6023      	str	r3, [r4, #0]
 8004c5e:	bd70      	pop	{r4, r5, r6, pc}
 8004c60:	200001ac 	.word	0x200001ac

08004c64 <_isatty_r>:
 8004c64:	2300      	movs	r3, #0
 8004c66:	b570      	push	{r4, r5, r6, lr}
 8004c68:	4d06      	ldr	r5, [pc, #24]	; (8004c84 <_isatty_r+0x20>)
 8004c6a:	0004      	movs	r4, r0
 8004c6c:	0008      	movs	r0, r1
 8004c6e:	602b      	str	r3, [r5, #0]
 8004c70:	f7fc f940 	bl	8000ef4 <_isatty>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d103      	bne.n	8004c80 <_isatty_r+0x1c>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d000      	beq.n	8004c80 <_isatty_r+0x1c>
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	200001ac 	.word	0x200001ac

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr
