
IMU_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000990c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  080099d0  080099d0  000199d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a034  0800a034  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a03c  0800a03c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a03c  0800a03c  0001a03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a040  0800a040  0001a040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800a044  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001dc  0800a220  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800a220  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c92  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000826  00000000  00000000  00022e96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  000236c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  00024190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00008558  00000000  00000000  00024b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001d19  00000000  00000000  0002d0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002edd9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000039f8  00000000  00000000  0002ee2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080099b4 	.word	0x080099b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	080099b4 	.word	0x080099b4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ff09 	bl	8002254 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 fe59 	bl	8002104 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fefb 	bl	8002254 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fef1 	bl	8002254 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fe81 	bl	8002188 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fe77 	bl	8002188 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc6f 	bl	8000d94 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbfb 	bl	8000cbc <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc61 	bl	8000d94 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			; (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc57 	bl	8000d94 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc07 	bl	8000d08 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbfd 	bl	8000d08 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	; (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	; (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			; (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			; (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4647      	mov	r7, r8
 8000562:	b580      	push	{r7, lr}
 8000564:	0007      	movs	r7, r0
 8000566:	4699      	mov	r9, r3
 8000568:	0c3b      	lsrs	r3, r7, #16
 800056a:	469c      	mov	ip, r3
 800056c:	0413      	lsls	r3, r2, #16
 800056e:	0c1b      	lsrs	r3, r3, #16
 8000570:	001d      	movs	r5, r3
 8000572:	000e      	movs	r6, r1
 8000574:	4661      	mov	r1, ip
 8000576:	0400      	lsls	r0, r0, #16
 8000578:	0c14      	lsrs	r4, r2, #16
 800057a:	0c00      	lsrs	r0, r0, #16
 800057c:	4345      	muls	r5, r0
 800057e:	434b      	muls	r3, r1
 8000580:	4360      	muls	r0, r4
 8000582:	4361      	muls	r1, r4
 8000584:	18c0      	adds	r0, r0, r3
 8000586:	0c2c      	lsrs	r4, r5, #16
 8000588:	1820      	adds	r0, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	4283      	cmp	r3, r0
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4372      	muls	r2, r6
 800059e:	0c03      	lsrs	r3, r0, #16
 80005a0:	4463      	add	r3, ip
 80005a2:	042d      	lsls	r5, r5, #16
 80005a4:	0c2d      	lsrs	r5, r5, #16
 80005a6:	18c9      	adds	r1, r1, r3
 80005a8:	0400      	lsls	r0, r0, #16
 80005aa:	1940      	adds	r0, r0, r5
 80005ac:	1889      	adds	r1, r1, r2
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 fdae 	bl	8003138 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 fda9 	bl	8003138 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	469b      	mov	fp, r3
 80005ee:	d433      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005f0:	465a      	mov	r2, fp
 80005f2:	4653      	mov	r3, sl
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83a      	bhi.n	800067a <__udivmoddi4+0xc2>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e078      	b.n	80006fc <__udivmoddi4+0x144>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e075      	b.n	8000702 <__udivmoddi4+0x14a>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e028      	b.n	8000682 <__udivmoddi4+0xca>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	2320      	movs	r3, #32
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	4652      	mov	r2, sl
 8000660:	40da      	lsrs	r2, r3
 8000662:	4641      	mov	r1, r8
 8000664:	0013      	movs	r3, r2
 8000666:	464a      	mov	r2, r9
 8000668:	408a      	lsls	r2, r1
 800066a:	0017      	movs	r7, r2
 800066c:	4642      	mov	r2, r8
 800066e:	431f      	orrs	r7, r3
 8000670:	4653      	mov	r3, sl
 8000672:	4093      	lsls	r3, r2
 8000674:	001e      	movs	r6, r3
 8000676:	42af      	cmp	r7, r5
 8000678:	d9c4      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067a:	2200      	movs	r2, #0
 800067c:	2300      	movs	r3, #0
 800067e:	9200      	str	r2, [sp, #0]
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	4643      	mov	r3, r8
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0d9      	beq.n	800063c <__udivmoddi4+0x84>
 8000688:	07fb      	lsls	r3, r7, #31
 800068a:	0872      	lsrs	r2, r6, #1
 800068c:	431a      	orrs	r2, r3
 800068e:	4646      	mov	r6, r8
 8000690:	087b      	lsrs	r3, r7, #1
 8000692:	e00e      	b.n	80006b2 <__udivmoddi4+0xfa>
 8000694:	42ab      	cmp	r3, r5
 8000696:	d101      	bne.n	800069c <__udivmoddi4+0xe4>
 8000698:	42a2      	cmp	r2, r4
 800069a:	d80c      	bhi.n	80006b6 <__udivmoddi4+0xfe>
 800069c:	1aa4      	subs	r4, r4, r2
 800069e:	419d      	sbcs	r5, r3
 80006a0:	2001      	movs	r0, #1
 80006a2:	1924      	adds	r4, r4, r4
 80006a4:	416d      	adcs	r5, r5
 80006a6:	2100      	movs	r1, #0
 80006a8:	3e01      	subs	r6, #1
 80006aa:	1824      	adds	r4, r4, r0
 80006ac:	414d      	adcs	r5, r1
 80006ae:	2e00      	cmp	r6, #0
 80006b0:	d006      	beq.n	80006c0 <__udivmoddi4+0x108>
 80006b2:	42ab      	cmp	r3, r5
 80006b4:	d9ee      	bls.n	8000694 <__udivmoddi4+0xdc>
 80006b6:	3e01      	subs	r6, #1
 80006b8:	1924      	adds	r4, r4, r4
 80006ba:	416d      	adcs	r5, r5
 80006bc:	2e00      	cmp	r6, #0
 80006be:	d1f8      	bne.n	80006b2 <__udivmoddi4+0xfa>
 80006c0:	9800      	ldr	r0, [sp, #0]
 80006c2:	9901      	ldr	r1, [sp, #4]
 80006c4:	465b      	mov	r3, fp
 80006c6:	1900      	adds	r0, r0, r4
 80006c8:	4169      	adcs	r1, r5
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	db24      	blt.n	8000718 <__udivmoddi4+0x160>
 80006ce:	002b      	movs	r3, r5
 80006d0:	465a      	mov	r2, fp
 80006d2:	4644      	mov	r4, r8
 80006d4:	40d3      	lsrs	r3, r2
 80006d6:	002a      	movs	r2, r5
 80006d8:	40e2      	lsrs	r2, r4
 80006da:	001c      	movs	r4, r3
 80006dc:	465b      	mov	r3, fp
 80006de:	0015      	movs	r5, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db2a      	blt.n	800073a <__udivmoddi4+0x182>
 80006e4:	0026      	movs	r6, r4
 80006e6:	409e      	lsls	r6, r3
 80006e8:	0033      	movs	r3, r6
 80006ea:	0026      	movs	r6, r4
 80006ec:	4647      	mov	r7, r8
 80006ee:	40be      	lsls	r6, r7
 80006f0:	0032      	movs	r2, r6
 80006f2:	1a80      	subs	r0, r0, r2
 80006f4:	4199      	sbcs	r1, r3
 80006f6:	9000      	str	r0, [sp, #0]
 80006f8:	9101      	str	r1, [sp, #4]
 80006fa:	e79f      	b.n	800063c <__udivmoddi4+0x84>
 80006fc:	42a3      	cmp	r3, r4
 80006fe:	d8bc      	bhi.n	800067a <__udivmoddi4+0xc2>
 8000700:	e783      	b.n	800060a <__udivmoddi4+0x52>
 8000702:	4642      	mov	r2, r8
 8000704:	2320      	movs	r3, #32
 8000706:	2100      	movs	r1, #0
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	2200      	movs	r2, #0
 800070c:	9100      	str	r1, [sp, #0]
 800070e:	9201      	str	r2, [sp, #4]
 8000710:	2201      	movs	r2, #1
 8000712:	40da      	lsrs	r2, r3
 8000714:	9201      	str	r2, [sp, #4]
 8000716:	e786      	b.n	8000626 <__udivmoddi4+0x6e>
 8000718:	4642      	mov	r2, r8
 800071a:	2320      	movs	r3, #32
 800071c:	1a9b      	subs	r3, r3, r2
 800071e:	002a      	movs	r2, r5
 8000720:	4646      	mov	r6, r8
 8000722:	409a      	lsls	r2, r3
 8000724:	0023      	movs	r3, r4
 8000726:	40f3      	lsrs	r3, r6
 8000728:	4644      	mov	r4, r8
 800072a:	4313      	orrs	r3, r2
 800072c:	002a      	movs	r2, r5
 800072e:	40e2      	lsrs	r2, r4
 8000730:	001c      	movs	r4, r3
 8000732:	465b      	mov	r3, fp
 8000734:	0015      	movs	r5, r2
 8000736:	2b00      	cmp	r3, #0
 8000738:	dad4      	bge.n	80006e4 <__udivmoddi4+0x12c>
 800073a:	4642      	mov	r2, r8
 800073c:	002f      	movs	r7, r5
 800073e:	2320      	movs	r3, #32
 8000740:	0026      	movs	r6, r4
 8000742:	4097      	lsls	r7, r2
 8000744:	1a9b      	subs	r3, r3, r2
 8000746:	40de      	lsrs	r6, r3
 8000748:	003b      	movs	r3, r7
 800074a:	4333      	orrs	r3, r6
 800074c:	e7cd      	b.n	80006ea <__udivmoddi4+0x132>
 800074e:	46c0      	nop			; (mov r8, r8)

08000750 <__aeabi_fadd>:
 8000750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000752:	46c6      	mov	lr, r8
 8000754:	0243      	lsls	r3, r0, #9
 8000756:	0a5b      	lsrs	r3, r3, #9
 8000758:	024e      	lsls	r6, r1, #9
 800075a:	0045      	lsls	r5, r0, #1
 800075c:	004f      	lsls	r7, r1, #1
 800075e:	00da      	lsls	r2, r3, #3
 8000760:	0fc4      	lsrs	r4, r0, #31
 8000762:	469c      	mov	ip, r3
 8000764:	0a70      	lsrs	r0, r6, #9
 8000766:	4690      	mov	r8, r2
 8000768:	b500      	push	{lr}
 800076a:	0e2d      	lsrs	r5, r5, #24
 800076c:	0e3f      	lsrs	r7, r7, #24
 800076e:	0fc9      	lsrs	r1, r1, #31
 8000770:	09b6      	lsrs	r6, r6, #6
 8000772:	428c      	cmp	r4, r1
 8000774:	d04b      	beq.n	800080e <__aeabi_fadd+0xbe>
 8000776:	1bea      	subs	r2, r5, r7
 8000778:	2a00      	cmp	r2, #0
 800077a:	dd36      	ble.n	80007ea <__aeabi_fadd+0x9a>
 800077c:	2f00      	cmp	r7, #0
 800077e:	d061      	beq.n	8000844 <__aeabi_fadd+0xf4>
 8000780:	2dff      	cmp	r5, #255	; 0xff
 8000782:	d100      	bne.n	8000786 <__aeabi_fadd+0x36>
 8000784:	e0ad      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000786:	2380      	movs	r3, #128	; 0x80
 8000788:	04db      	lsls	r3, r3, #19
 800078a:	431e      	orrs	r6, r3
 800078c:	2a1b      	cmp	r2, #27
 800078e:	dc00      	bgt.n	8000792 <__aeabi_fadd+0x42>
 8000790:	e0d3      	b.n	800093a <__aeabi_fadd+0x1ea>
 8000792:	2001      	movs	r0, #1
 8000794:	4643      	mov	r3, r8
 8000796:	1a18      	subs	r0, r3, r0
 8000798:	0143      	lsls	r3, r0, #5
 800079a:	d400      	bmi.n	800079e <__aeabi_fadd+0x4e>
 800079c:	e08c      	b.n	80008b8 <__aeabi_fadd+0x168>
 800079e:	0180      	lsls	r0, r0, #6
 80007a0:	0987      	lsrs	r7, r0, #6
 80007a2:	0038      	movs	r0, r7
 80007a4:	f002 fcaa 	bl	80030fc <__clzsi2>
 80007a8:	3805      	subs	r0, #5
 80007aa:	4087      	lsls	r7, r0
 80007ac:	4285      	cmp	r5, r0
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fadd+0x62>
 80007b0:	e0b6      	b.n	8000920 <__aeabi_fadd+0x1d0>
 80007b2:	1a2d      	subs	r5, r5, r0
 80007b4:	48b3      	ldr	r0, [pc, #716]	; (8000a84 <__aeabi_fadd+0x334>)
 80007b6:	4038      	ands	r0, r7
 80007b8:	0743      	lsls	r3, r0, #29
 80007ba:	d004      	beq.n	80007c6 <__aeabi_fadd+0x76>
 80007bc:	230f      	movs	r3, #15
 80007be:	4003      	ands	r3, r0
 80007c0:	2b04      	cmp	r3, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_fadd+0x76>
 80007c4:	3004      	adds	r0, #4
 80007c6:	0143      	lsls	r3, r0, #5
 80007c8:	d400      	bmi.n	80007cc <__aeabi_fadd+0x7c>
 80007ca:	e078      	b.n	80008be <__aeabi_fadd+0x16e>
 80007cc:	1c6a      	adds	r2, r5, #1
 80007ce:	2dfe      	cmp	r5, #254	; 0xfe
 80007d0:	d065      	beq.n	800089e <__aeabi_fadd+0x14e>
 80007d2:	0180      	lsls	r0, r0, #6
 80007d4:	0a43      	lsrs	r3, r0, #9
 80007d6:	469c      	mov	ip, r3
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	4663      	mov	r3, ip
 80007dc:	05d0      	lsls	r0, r2, #23
 80007de:	4318      	orrs	r0, r3
 80007e0:	07e4      	lsls	r4, r4, #31
 80007e2:	4320      	orrs	r0, r4
 80007e4:	bc80      	pop	{r7}
 80007e6:	46b8      	mov	r8, r7
 80007e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ea:	2a00      	cmp	r2, #0
 80007ec:	d035      	beq.n	800085a <__aeabi_fadd+0x10a>
 80007ee:	1b7a      	subs	r2, r7, r5
 80007f0:	2d00      	cmp	r5, #0
 80007f2:	d000      	beq.n	80007f6 <__aeabi_fadd+0xa6>
 80007f4:	e0af      	b.n	8000956 <__aeabi_fadd+0x206>
 80007f6:	4643      	mov	r3, r8
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d100      	bne.n	80007fe <__aeabi_fadd+0xae>
 80007fc:	e0a7      	b.n	800094e <__aeabi_fadd+0x1fe>
 80007fe:	1e53      	subs	r3, r2, #1
 8000800:	2a01      	cmp	r2, #1
 8000802:	d100      	bne.n	8000806 <__aeabi_fadd+0xb6>
 8000804:	e12f      	b.n	8000a66 <__aeabi_fadd+0x316>
 8000806:	2aff      	cmp	r2, #255	; 0xff
 8000808:	d069      	beq.n	80008de <__aeabi_fadd+0x18e>
 800080a:	001a      	movs	r2, r3
 800080c:	e0aa      	b.n	8000964 <__aeabi_fadd+0x214>
 800080e:	1be9      	subs	r1, r5, r7
 8000810:	2900      	cmp	r1, #0
 8000812:	dd70      	ble.n	80008f6 <__aeabi_fadd+0x1a6>
 8000814:	2f00      	cmp	r7, #0
 8000816:	d037      	beq.n	8000888 <__aeabi_fadd+0x138>
 8000818:	2dff      	cmp	r5, #255	; 0xff
 800081a:	d062      	beq.n	80008e2 <__aeabi_fadd+0x192>
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	04db      	lsls	r3, r3, #19
 8000820:	431e      	orrs	r6, r3
 8000822:	291b      	cmp	r1, #27
 8000824:	dc00      	bgt.n	8000828 <__aeabi_fadd+0xd8>
 8000826:	e0b0      	b.n	800098a <__aeabi_fadd+0x23a>
 8000828:	2001      	movs	r0, #1
 800082a:	4440      	add	r0, r8
 800082c:	0143      	lsls	r3, r0, #5
 800082e:	d543      	bpl.n	80008b8 <__aeabi_fadd+0x168>
 8000830:	3501      	adds	r5, #1
 8000832:	2dff      	cmp	r5, #255	; 0xff
 8000834:	d033      	beq.n	800089e <__aeabi_fadd+0x14e>
 8000836:	2301      	movs	r3, #1
 8000838:	4a93      	ldr	r2, [pc, #588]	; (8000a88 <__aeabi_fadd+0x338>)
 800083a:	4003      	ands	r3, r0
 800083c:	0840      	lsrs	r0, r0, #1
 800083e:	4010      	ands	r0, r2
 8000840:	4318      	orrs	r0, r3
 8000842:	e7b9      	b.n	80007b8 <__aeabi_fadd+0x68>
 8000844:	2e00      	cmp	r6, #0
 8000846:	d100      	bne.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e083      	b.n	8000952 <__aeabi_fadd+0x202>
 800084a:	1e51      	subs	r1, r2, #1
 800084c:	2a01      	cmp	r2, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_fadd+0x102>
 8000850:	e0d8      	b.n	8000a04 <__aeabi_fadd+0x2b4>
 8000852:	2aff      	cmp	r2, #255	; 0xff
 8000854:	d045      	beq.n	80008e2 <__aeabi_fadd+0x192>
 8000856:	000a      	movs	r2, r1
 8000858:	e798      	b.n	800078c <__aeabi_fadd+0x3c>
 800085a:	27fe      	movs	r7, #254	; 0xfe
 800085c:	1c6a      	adds	r2, r5, #1
 800085e:	4217      	tst	r7, r2
 8000860:	d000      	beq.n	8000864 <__aeabi_fadd+0x114>
 8000862:	e086      	b.n	8000972 <__aeabi_fadd+0x222>
 8000864:	2d00      	cmp	r5, #0
 8000866:	d000      	beq.n	800086a <__aeabi_fadd+0x11a>
 8000868:	e0b7      	b.n	80009da <__aeabi_fadd+0x28a>
 800086a:	4643      	mov	r3, r8
 800086c:	2b00      	cmp	r3, #0
 800086e:	d100      	bne.n	8000872 <__aeabi_fadd+0x122>
 8000870:	e0f3      	b.n	8000a5a <__aeabi_fadd+0x30a>
 8000872:	2200      	movs	r2, #0
 8000874:	2e00      	cmp	r6, #0
 8000876:	d0b0      	beq.n	80007da <__aeabi_fadd+0x8a>
 8000878:	1b98      	subs	r0, r3, r6
 800087a:	0143      	lsls	r3, r0, #5
 800087c:	d400      	bmi.n	8000880 <__aeabi_fadd+0x130>
 800087e:	e0fa      	b.n	8000a76 <__aeabi_fadd+0x326>
 8000880:	4643      	mov	r3, r8
 8000882:	000c      	movs	r4, r1
 8000884:	1af0      	subs	r0, r6, r3
 8000886:	e797      	b.n	80007b8 <__aeabi_fadd+0x68>
 8000888:	2e00      	cmp	r6, #0
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x13e>
 800088c:	e0c8      	b.n	8000a20 <__aeabi_fadd+0x2d0>
 800088e:	1e4a      	subs	r2, r1, #1
 8000890:	2901      	cmp	r1, #1
 8000892:	d100      	bne.n	8000896 <__aeabi_fadd+0x146>
 8000894:	e0ae      	b.n	80009f4 <__aeabi_fadd+0x2a4>
 8000896:	29ff      	cmp	r1, #255	; 0xff
 8000898:	d023      	beq.n	80008e2 <__aeabi_fadd+0x192>
 800089a:	0011      	movs	r1, r2
 800089c:	e7c1      	b.n	8000822 <__aeabi_fadd+0xd2>
 800089e:	2300      	movs	r3, #0
 80008a0:	22ff      	movs	r2, #255	; 0xff
 80008a2:	469c      	mov	ip, r3
 80008a4:	e799      	b.n	80007da <__aeabi_fadd+0x8a>
 80008a6:	21fe      	movs	r1, #254	; 0xfe
 80008a8:	1c6a      	adds	r2, r5, #1
 80008aa:	4211      	tst	r1, r2
 80008ac:	d077      	beq.n	800099e <__aeabi_fadd+0x24e>
 80008ae:	2aff      	cmp	r2, #255	; 0xff
 80008b0:	d0f5      	beq.n	800089e <__aeabi_fadd+0x14e>
 80008b2:	0015      	movs	r5, r2
 80008b4:	4446      	add	r6, r8
 80008b6:	0870      	lsrs	r0, r6, #1
 80008b8:	0743      	lsls	r3, r0, #29
 80008ba:	d000      	beq.n	80008be <__aeabi_fadd+0x16e>
 80008bc:	e77e      	b.n	80007bc <__aeabi_fadd+0x6c>
 80008be:	08c3      	lsrs	r3, r0, #3
 80008c0:	2dff      	cmp	r5, #255	; 0xff
 80008c2:	d00e      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008c4:	025b      	lsls	r3, r3, #9
 80008c6:	0a5b      	lsrs	r3, r3, #9
 80008c8:	469c      	mov	ip, r3
 80008ca:	b2ea      	uxtb	r2, r5
 80008cc:	e785      	b.n	80007da <__aeabi_fadd+0x8a>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	d007      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008d2:	2280      	movs	r2, #128	; 0x80
 80008d4:	03d2      	lsls	r2, r2, #15
 80008d6:	4213      	tst	r3, r2
 80008d8:	d003      	beq.n	80008e2 <__aeabi_fadd+0x192>
 80008da:	4210      	tst	r0, r2
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fadd+0x192>
 80008de:	000c      	movs	r4, r1
 80008e0:	0003      	movs	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0db      	beq.n	800089e <__aeabi_fadd+0x14e>
 80008e6:	2080      	movs	r0, #128	; 0x80
 80008e8:	03c0      	lsls	r0, r0, #15
 80008ea:	4318      	orrs	r0, r3
 80008ec:	0240      	lsls	r0, r0, #9
 80008ee:	0a43      	lsrs	r3, r0, #9
 80008f0:	469c      	mov	ip, r3
 80008f2:	22ff      	movs	r2, #255	; 0xff
 80008f4:	e771      	b.n	80007da <__aeabi_fadd+0x8a>
 80008f6:	2900      	cmp	r1, #0
 80008f8:	d0d5      	beq.n	80008a6 <__aeabi_fadd+0x156>
 80008fa:	1b7a      	subs	r2, r7, r5
 80008fc:	2d00      	cmp	r5, #0
 80008fe:	d160      	bne.n	80009c2 <__aeabi_fadd+0x272>
 8000900:	4643      	mov	r3, r8
 8000902:	2b00      	cmp	r3, #0
 8000904:	d024      	beq.n	8000950 <__aeabi_fadd+0x200>
 8000906:	1e53      	subs	r3, r2, #1
 8000908:	2a01      	cmp	r2, #1
 800090a:	d073      	beq.n	80009f4 <__aeabi_fadd+0x2a4>
 800090c:	2aff      	cmp	r2, #255	; 0xff
 800090e:	d0e7      	beq.n	80008e0 <__aeabi_fadd+0x190>
 8000910:	001a      	movs	r2, r3
 8000912:	2a1b      	cmp	r2, #27
 8000914:	dc00      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 8000916:	e085      	b.n	8000a24 <__aeabi_fadd+0x2d4>
 8000918:	2001      	movs	r0, #1
 800091a:	003d      	movs	r5, r7
 800091c:	1980      	adds	r0, r0, r6
 800091e:	e785      	b.n	800082c <__aeabi_fadd+0xdc>
 8000920:	2320      	movs	r3, #32
 8000922:	003a      	movs	r2, r7
 8000924:	1b45      	subs	r5, r0, r5
 8000926:	0038      	movs	r0, r7
 8000928:	3501      	adds	r5, #1
 800092a:	40ea      	lsrs	r2, r5
 800092c:	1b5d      	subs	r5, r3, r5
 800092e:	40a8      	lsls	r0, r5
 8000930:	1e43      	subs	r3, r0, #1
 8000932:	4198      	sbcs	r0, r3
 8000934:	2500      	movs	r5, #0
 8000936:	4310      	orrs	r0, r2
 8000938:	e73e      	b.n	80007b8 <__aeabi_fadd+0x68>
 800093a:	2320      	movs	r3, #32
 800093c:	0030      	movs	r0, r6
 800093e:	1a9b      	subs	r3, r3, r2
 8000940:	0031      	movs	r1, r6
 8000942:	4098      	lsls	r0, r3
 8000944:	40d1      	lsrs	r1, r2
 8000946:	1e43      	subs	r3, r0, #1
 8000948:	4198      	sbcs	r0, r3
 800094a:	4308      	orrs	r0, r1
 800094c:	e722      	b.n	8000794 <__aeabi_fadd+0x44>
 800094e:	000c      	movs	r4, r1
 8000950:	0003      	movs	r3, r0
 8000952:	0015      	movs	r5, r2
 8000954:	e7b4      	b.n	80008c0 <__aeabi_fadd+0x170>
 8000956:	2fff      	cmp	r7, #255	; 0xff
 8000958:	d0c1      	beq.n	80008de <__aeabi_fadd+0x18e>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	4640      	mov	r0, r8
 800095e:	04db      	lsls	r3, r3, #19
 8000960:	4318      	orrs	r0, r3
 8000962:	4680      	mov	r8, r0
 8000964:	2a1b      	cmp	r2, #27
 8000966:	dd51      	ble.n	8000a0c <__aeabi_fadd+0x2bc>
 8000968:	2001      	movs	r0, #1
 800096a:	000c      	movs	r4, r1
 800096c:	003d      	movs	r5, r7
 800096e:	1a30      	subs	r0, r6, r0
 8000970:	e712      	b.n	8000798 <__aeabi_fadd+0x48>
 8000972:	4643      	mov	r3, r8
 8000974:	1b9f      	subs	r7, r3, r6
 8000976:	017b      	lsls	r3, r7, #5
 8000978:	d42b      	bmi.n	80009d2 <__aeabi_fadd+0x282>
 800097a:	2f00      	cmp	r7, #0
 800097c:	d000      	beq.n	8000980 <__aeabi_fadd+0x230>
 800097e:	e710      	b.n	80007a2 <__aeabi_fadd+0x52>
 8000980:	2300      	movs	r3, #0
 8000982:	2400      	movs	r4, #0
 8000984:	2200      	movs	r2, #0
 8000986:	469c      	mov	ip, r3
 8000988:	e727      	b.n	80007da <__aeabi_fadd+0x8a>
 800098a:	2320      	movs	r3, #32
 800098c:	0032      	movs	r2, r6
 800098e:	0030      	movs	r0, r6
 8000990:	40ca      	lsrs	r2, r1
 8000992:	1a59      	subs	r1, r3, r1
 8000994:	4088      	lsls	r0, r1
 8000996:	1e43      	subs	r3, r0, #1
 8000998:	4198      	sbcs	r0, r3
 800099a:	4310      	orrs	r0, r2
 800099c:	e745      	b.n	800082a <__aeabi_fadd+0xda>
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d14a      	bne.n	8000a38 <__aeabi_fadd+0x2e8>
 80009a2:	4643      	mov	r3, r8
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d063      	beq.n	8000a70 <__aeabi_fadd+0x320>
 80009a8:	2200      	movs	r2, #0
 80009aa:	2e00      	cmp	r6, #0
 80009ac:	d100      	bne.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e714      	b.n	80007da <__aeabi_fadd+0x8a>
 80009b0:	0030      	movs	r0, r6
 80009b2:	4440      	add	r0, r8
 80009b4:	0143      	lsls	r3, r0, #5
 80009b6:	d400      	bmi.n	80009ba <__aeabi_fadd+0x26a>
 80009b8:	e77e      	b.n	80008b8 <__aeabi_fadd+0x168>
 80009ba:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <__aeabi_fadd+0x334>)
 80009bc:	3501      	adds	r5, #1
 80009be:	4018      	ands	r0, r3
 80009c0:	e77a      	b.n	80008b8 <__aeabi_fadd+0x168>
 80009c2:	2fff      	cmp	r7, #255	; 0xff
 80009c4:	d08c      	beq.n	80008e0 <__aeabi_fadd+0x190>
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	4641      	mov	r1, r8
 80009ca:	04db      	lsls	r3, r3, #19
 80009cc:	4319      	orrs	r1, r3
 80009ce:	4688      	mov	r8, r1
 80009d0:	e79f      	b.n	8000912 <__aeabi_fadd+0x1c2>
 80009d2:	4643      	mov	r3, r8
 80009d4:	000c      	movs	r4, r1
 80009d6:	1af7      	subs	r7, r6, r3
 80009d8:	e6e3      	b.n	80007a2 <__aeabi_fadd+0x52>
 80009da:	4642      	mov	r2, r8
 80009dc:	2a00      	cmp	r2, #0
 80009de:	d000      	beq.n	80009e2 <__aeabi_fadd+0x292>
 80009e0:	e775      	b.n	80008ce <__aeabi_fadd+0x17e>
 80009e2:	2e00      	cmp	r6, #0
 80009e4:	d000      	beq.n	80009e8 <__aeabi_fadd+0x298>
 80009e6:	e77a      	b.n	80008de <__aeabi_fadd+0x18e>
 80009e8:	2380      	movs	r3, #128	; 0x80
 80009ea:	03db      	lsls	r3, r3, #15
 80009ec:	2400      	movs	r4, #0
 80009ee:	469c      	mov	ip, r3
 80009f0:	22ff      	movs	r2, #255	; 0xff
 80009f2:	e6f2      	b.n	80007da <__aeabi_fadd+0x8a>
 80009f4:	0030      	movs	r0, r6
 80009f6:	4440      	add	r0, r8
 80009f8:	2501      	movs	r5, #1
 80009fa:	0143      	lsls	r3, r0, #5
 80009fc:	d400      	bmi.n	8000a00 <__aeabi_fadd+0x2b0>
 80009fe:	e75b      	b.n	80008b8 <__aeabi_fadd+0x168>
 8000a00:	2502      	movs	r5, #2
 8000a02:	e718      	b.n	8000836 <__aeabi_fadd+0xe6>
 8000a04:	4643      	mov	r3, r8
 8000a06:	2501      	movs	r5, #1
 8000a08:	1b98      	subs	r0, r3, r6
 8000a0a:	e6c5      	b.n	8000798 <__aeabi_fadd+0x48>
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	4644      	mov	r4, r8
 8000a10:	4640      	mov	r0, r8
 8000a12:	40d4      	lsrs	r4, r2
 8000a14:	1a9a      	subs	r2, r3, r2
 8000a16:	4090      	lsls	r0, r2
 8000a18:	1e43      	subs	r3, r0, #1
 8000a1a:	4198      	sbcs	r0, r3
 8000a1c:	4320      	orrs	r0, r4
 8000a1e:	e7a4      	b.n	800096a <__aeabi_fadd+0x21a>
 8000a20:	000d      	movs	r5, r1
 8000a22:	e74d      	b.n	80008c0 <__aeabi_fadd+0x170>
 8000a24:	2320      	movs	r3, #32
 8000a26:	4641      	mov	r1, r8
 8000a28:	4640      	mov	r0, r8
 8000a2a:	40d1      	lsrs	r1, r2
 8000a2c:	1a9a      	subs	r2, r3, r2
 8000a2e:	4090      	lsls	r0, r2
 8000a30:	1e43      	subs	r3, r0, #1
 8000a32:	4198      	sbcs	r0, r3
 8000a34:	4308      	orrs	r0, r1
 8000a36:	e770      	b.n	800091a <__aeabi_fadd+0x1ca>
 8000a38:	4642      	mov	r2, r8
 8000a3a:	2a00      	cmp	r2, #0
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fadd+0x2f0>
 8000a3e:	e74f      	b.n	80008e0 <__aeabi_fadd+0x190>
 8000a40:	2e00      	cmp	r6, #0
 8000a42:	d100      	bne.n	8000a46 <__aeabi_fadd+0x2f6>
 8000a44:	e74d      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	03d2      	lsls	r2, r2, #15
 8000a4a:	4213      	tst	r3, r2
 8000a4c:	d100      	bne.n	8000a50 <__aeabi_fadd+0x300>
 8000a4e:	e748      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a50:	4210      	tst	r0, r2
 8000a52:	d000      	beq.n	8000a56 <__aeabi_fadd+0x306>
 8000a54:	e745      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a56:	0003      	movs	r3, r0
 8000a58:	e743      	b.n	80008e2 <__aeabi_fadd+0x192>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d090      	beq.n	8000980 <__aeabi_fadd+0x230>
 8000a5e:	000c      	movs	r4, r1
 8000a60:	4684      	mov	ip, r0
 8000a62:	2200      	movs	r2, #0
 8000a64:	e6b9      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a66:	4643      	mov	r3, r8
 8000a68:	000c      	movs	r4, r1
 8000a6a:	1af0      	subs	r0, r6, r3
 8000a6c:	3501      	adds	r5, #1
 8000a6e:	e693      	b.n	8000798 <__aeabi_fadd+0x48>
 8000a70:	4684      	mov	ip, r0
 8000a72:	2200      	movs	r2, #0
 8000a74:	e6b1      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d000      	beq.n	8000a7c <__aeabi_fadd+0x32c>
 8000a7a:	e71d      	b.n	80008b8 <__aeabi_fadd+0x168>
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	2400      	movs	r4, #0
 8000a80:	469c      	mov	ip, r3
 8000a82:	e6aa      	b.n	80007da <__aeabi_fadd+0x8a>
 8000a84:	fbffffff 	.word	0xfbffffff
 8000a88:	7dffffff 	.word	0x7dffffff

08000a8c <__aeabi_fdiv>:
 8000a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a8e:	464f      	mov	r7, r9
 8000a90:	4646      	mov	r6, r8
 8000a92:	46d6      	mov	lr, sl
 8000a94:	0245      	lsls	r5, r0, #9
 8000a96:	b5c0      	push	{r6, r7, lr}
 8000a98:	0047      	lsls	r7, r0, #1
 8000a9a:	1c0c      	adds	r4, r1, #0
 8000a9c:	0a6d      	lsrs	r5, r5, #9
 8000a9e:	0e3f      	lsrs	r7, r7, #24
 8000aa0:	0fc6      	lsrs	r6, r0, #31
 8000aa2:	2f00      	cmp	r7, #0
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fdiv+0x1c>
 8000aa6:	e070      	b.n	8000b8a <__aeabi_fdiv+0xfe>
 8000aa8:	2fff      	cmp	r7, #255	; 0xff
 8000aaa:	d100      	bne.n	8000aae <__aeabi_fdiv+0x22>
 8000aac:	e075      	b.n	8000b9a <__aeabi_fdiv+0x10e>
 8000aae:	00eb      	lsls	r3, r5, #3
 8000ab0:	2580      	movs	r5, #128	; 0x80
 8000ab2:	04ed      	lsls	r5, r5, #19
 8000ab4:	431d      	orrs	r5, r3
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	4699      	mov	r9, r3
 8000aba:	469a      	mov	sl, r3
 8000abc:	3f7f      	subs	r7, #127	; 0x7f
 8000abe:	0260      	lsls	r0, r4, #9
 8000ac0:	0a43      	lsrs	r3, r0, #9
 8000ac2:	4698      	mov	r8, r3
 8000ac4:	0063      	lsls	r3, r4, #1
 8000ac6:	0e1b      	lsrs	r3, r3, #24
 8000ac8:	0fe4      	lsrs	r4, r4, #31
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d04e      	beq.n	8000b6c <__aeabi_fdiv+0xe0>
 8000ace:	2bff      	cmp	r3, #255	; 0xff
 8000ad0:	d046      	beq.n	8000b60 <__aeabi_fdiv+0xd4>
 8000ad2:	4642      	mov	r2, r8
 8000ad4:	00d0      	lsls	r0, r2, #3
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	04d2      	lsls	r2, r2, #19
 8000ada:	4302      	orrs	r2, r0
 8000adc:	4690      	mov	r8, r2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	3b7f      	subs	r3, #127	; 0x7f
 8000ae2:	0031      	movs	r1, r6
 8000ae4:	1aff      	subs	r7, r7, r3
 8000ae6:	464b      	mov	r3, r9
 8000ae8:	4061      	eors	r1, r4
 8000aea:	b2c9      	uxtb	r1, r1
 8000aec:	4313      	orrs	r3, r2
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	d900      	bls.n	8000af4 <__aeabi_fdiv+0x68>
 8000af2:	e0b5      	b.n	8000c60 <__aeabi_fdiv+0x1d4>
 8000af4:	486e      	ldr	r0, [pc, #440]	; (8000cb0 <__aeabi_fdiv+0x224>)
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	58c3      	ldr	r3, [r0, r3]
 8000afa:	469f      	mov	pc, r3
 8000afc:	2300      	movs	r3, #0
 8000afe:	4698      	mov	r8, r3
 8000b00:	0026      	movs	r6, r4
 8000b02:	4645      	mov	r5, r8
 8000b04:	4692      	mov	sl, r2
 8000b06:	4653      	mov	r3, sl
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_fdiv+0x82>
 8000b0c:	e089      	b.n	8000c22 <__aeabi_fdiv+0x196>
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d100      	bne.n	8000b14 <__aeabi_fdiv+0x88>
 8000b12:	e09e      	b.n	8000c52 <__aeabi_fdiv+0x1c6>
 8000b14:	2b01      	cmp	r3, #1
 8000b16:	d018      	beq.n	8000b4a <__aeabi_fdiv+0xbe>
 8000b18:	003b      	movs	r3, r7
 8000b1a:	337f      	adds	r3, #127	; 0x7f
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	dd69      	ble.n	8000bf4 <__aeabi_fdiv+0x168>
 8000b20:	076a      	lsls	r2, r5, #29
 8000b22:	d004      	beq.n	8000b2e <__aeabi_fdiv+0xa2>
 8000b24:	220f      	movs	r2, #15
 8000b26:	402a      	ands	r2, r5
 8000b28:	2a04      	cmp	r2, #4
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_fdiv+0xa2>
 8000b2c:	3504      	adds	r5, #4
 8000b2e:	012a      	lsls	r2, r5, #4
 8000b30:	d503      	bpl.n	8000b3a <__aeabi_fdiv+0xae>
 8000b32:	4b60      	ldr	r3, [pc, #384]	; (8000cb4 <__aeabi_fdiv+0x228>)
 8000b34:	401d      	ands	r5, r3
 8000b36:	003b      	movs	r3, r7
 8000b38:	3380      	adds	r3, #128	; 0x80
 8000b3a:	2bfe      	cmp	r3, #254	; 0xfe
 8000b3c:	dd00      	ble.n	8000b40 <__aeabi_fdiv+0xb4>
 8000b3e:	e070      	b.n	8000c22 <__aeabi_fdiv+0x196>
 8000b40:	01ad      	lsls	r5, r5, #6
 8000b42:	0a6d      	lsrs	r5, r5, #9
 8000b44:	b2d8      	uxtb	r0, r3
 8000b46:	e002      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000b48:	000e      	movs	r6, r1
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	2500      	movs	r5, #0
 8000b4e:	05c0      	lsls	r0, r0, #23
 8000b50:	4328      	orrs	r0, r5
 8000b52:	07f6      	lsls	r6, r6, #31
 8000b54:	4330      	orrs	r0, r6
 8000b56:	bce0      	pop	{r5, r6, r7}
 8000b58:	46ba      	mov	sl, r7
 8000b5a:	46b1      	mov	r9, r6
 8000b5c:	46a8      	mov	r8, r5
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b60:	4643      	mov	r3, r8
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d13f      	bne.n	8000be6 <__aeabi_fdiv+0x15a>
 8000b66:	2202      	movs	r2, #2
 8000b68:	3fff      	subs	r7, #255	; 0xff
 8000b6a:	e003      	b.n	8000b74 <__aeabi_fdiv+0xe8>
 8000b6c:	4643      	mov	r3, r8
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d12d      	bne.n	8000bce <__aeabi_fdiv+0x142>
 8000b72:	2201      	movs	r2, #1
 8000b74:	0031      	movs	r1, r6
 8000b76:	464b      	mov	r3, r9
 8000b78:	4061      	eors	r1, r4
 8000b7a:	b2c9      	uxtb	r1, r1
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	2b0f      	cmp	r3, #15
 8000b80:	d834      	bhi.n	8000bec <__aeabi_fdiv+0x160>
 8000b82:	484d      	ldr	r0, [pc, #308]	; (8000cb8 <__aeabi_fdiv+0x22c>)
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	58c3      	ldr	r3, [r0, r3]
 8000b88:	469f      	mov	pc, r3
 8000b8a:	2d00      	cmp	r5, #0
 8000b8c:	d113      	bne.n	8000bb6 <__aeabi_fdiv+0x12a>
 8000b8e:	2304      	movs	r3, #4
 8000b90:	4699      	mov	r9, r3
 8000b92:	3b03      	subs	r3, #3
 8000b94:	2700      	movs	r7, #0
 8000b96:	469a      	mov	sl, r3
 8000b98:	e791      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d105      	bne.n	8000baa <__aeabi_fdiv+0x11e>
 8000b9e:	2308      	movs	r3, #8
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	3b06      	subs	r3, #6
 8000ba4:	27ff      	movs	r7, #255	; 0xff
 8000ba6:	469a      	mov	sl, r3
 8000ba8:	e789      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000baa:	230c      	movs	r3, #12
 8000bac:	4699      	mov	r9, r3
 8000bae:	3b09      	subs	r3, #9
 8000bb0:	27ff      	movs	r7, #255	; 0xff
 8000bb2:	469a      	mov	sl, r3
 8000bb4:	e783      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000bb6:	0028      	movs	r0, r5
 8000bb8:	f002 faa0 	bl	80030fc <__clzsi2>
 8000bbc:	2776      	movs	r7, #118	; 0x76
 8000bbe:	1f43      	subs	r3, r0, #5
 8000bc0:	409d      	lsls	r5, r3
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	427f      	negs	r7, r7
 8000bc6:	4699      	mov	r9, r3
 8000bc8:	469a      	mov	sl, r3
 8000bca:	1a3f      	subs	r7, r7, r0
 8000bcc:	e777      	b.n	8000abe <__aeabi_fdiv+0x32>
 8000bce:	4640      	mov	r0, r8
 8000bd0:	f002 fa94 	bl	80030fc <__clzsi2>
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	1f43      	subs	r3, r0, #5
 8000bd8:	409a      	lsls	r2, r3
 8000bda:	2376      	movs	r3, #118	; 0x76
 8000bdc:	425b      	negs	r3, r3
 8000bde:	4690      	mov	r8, r2
 8000be0:	1a1b      	subs	r3, r3, r0
 8000be2:	2200      	movs	r2, #0
 8000be4:	e77d      	b.n	8000ae2 <__aeabi_fdiv+0x56>
 8000be6:	23ff      	movs	r3, #255	; 0xff
 8000be8:	2203      	movs	r2, #3
 8000bea:	e77a      	b.n	8000ae2 <__aeabi_fdiv+0x56>
 8000bec:	000e      	movs	r6, r1
 8000bee:	20ff      	movs	r0, #255	; 0xff
 8000bf0:	2500      	movs	r5, #0
 8000bf2:	e7ac      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	1ac0      	subs	r0, r0, r3
 8000bf8:	281b      	cmp	r0, #27
 8000bfa:	dca6      	bgt.n	8000b4a <__aeabi_fdiv+0xbe>
 8000bfc:	379e      	adds	r7, #158	; 0x9e
 8000bfe:	002a      	movs	r2, r5
 8000c00:	40bd      	lsls	r5, r7
 8000c02:	40c2      	lsrs	r2, r0
 8000c04:	1e6b      	subs	r3, r5, #1
 8000c06:	419d      	sbcs	r5, r3
 8000c08:	4315      	orrs	r5, r2
 8000c0a:	076b      	lsls	r3, r5, #29
 8000c0c:	d004      	beq.n	8000c18 <__aeabi_fdiv+0x18c>
 8000c0e:	230f      	movs	r3, #15
 8000c10:	402b      	ands	r3, r5
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d000      	beq.n	8000c18 <__aeabi_fdiv+0x18c>
 8000c16:	3504      	adds	r5, #4
 8000c18:	016b      	lsls	r3, r5, #5
 8000c1a:	d544      	bpl.n	8000ca6 <__aeabi_fdiv+0x21a>
 8000c1c:	2001      	movs	r0, #1
 8000c1e:	2500      	movs	r5, #0
 8000c20:	e795      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c22:	20ff      	movs	r0, #255	; 0xff
 8000c24:	2500      	movs	r5, #0
 8000c26:	e792      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c28:	2580      	movs	r5, #128	; 0x80
 8000c2a:	2600      	movs	r6, #0
 8000c2c:	20ff      	movs	r0, #255	; 0xff
 8000c2e:	03ed      	lsls	r5, r5, #15
 8000c30:	e78d      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c32:	2300      	movs	r3, #0
 8000c34:	4698      	mov	r8, r3
 8000c36:	2080      	movs	r0, #128	; 0x80
 8000c38:	03c0      	lsls	r0, r0, #15
 8000c3a:	4205      	tst	r5, r0
 8000c3c:	d009      	beq.n	8000c52 <__aeabi_fdiv+0x1c6>
 8000c3e:	4643      	mov	r3, r8
 8000c40:	4203      	tst	r3, r0
 8000c42:	d106      	bne.n	8000c52 <__aeabi_fdiv+0x1c6>
 8000c44:	4645      	mov	r5, r8
 8000c46:	4305      	orrs	r5, r0
 8000c48:	026d      	lsls	r5, r5, #9
 8000c4a:	0026      	movs	r6, r4
 8000c4c:	20ff      	movs	r0, #255	; 0xff
 8000c4e:	0a6d      	lsrs	r5, r5, #9
 8000c50:	e77d      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c52:	2080      	movs	r0, #128	; 0x80
 8000c54:	03c0      	lsls	r0, r0, #15
 8000c56:	4305      	orrs	r5, r0
 8000c58:	026d      	lsls	r5, r5, #9
 8000c5a:	20ff      	movs	r0, #255	; 0xff
 8000c5c:	0a6d      	lsrs	r5, r5, #9
 8000c5e:	e776      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000c60:	4642      	mov	r2, r8
 8000c62:	016b      	lsls	r3, r5, #5
 8000c64:	0150      	lsls	r0, r2, #5
 8000c66:	4283      	cmp	r3, r0
 8000c68:	d219      	bcs.n	8000c9e <__aeabi_fdiv+0x212>
 8000c6a:	221b      	movs	r2, #27
 8000c6c:	2500      	movs	r5, #0
 8000c6e:	3f01      	subs	r7, #1
 8000c70:	2601      	movs	r6, #1
 8000c72:	001c      	movs	r4, r3
 8000c74:	006d      	lsls	r5, r5, #1
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	db01      	blt.n	8000c80 <__aeabi_fdiv+0x1f4>
 8000c7c:	4298      	cmp	r0, r3
 8000c7e:	d801      	bhi.n	8000c84 <__aeabi_fdiv+0x1f8>
 8000c80:	1a1b      	subs	r3, r3, r0
 8000c82:	4335      	orrs	r5, r6
 8000c84:	3a01      	subs	r2, #1
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d1f3      	bne.n	8000c72 <__aeabi_fdiv+0x1e6>
 8000c8a:	1e5a      	subs	r2, r3, #1
 8000c8c:	4193      	sbcs	r3, r2
 8000c8e:	431d      	orrs	r5, r3
 8000c90:	003b      	movs	r3, r7
 8000c92:	337f      	adds	r3, #127	; 0x7f
 8000c94:	000e      	movs	r6, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	dd00      	ble.n	8000c9c <__aeabi_fdiv+0x210>
 8000c9a:	e741      	b.n	8000b20 <__aeabi_fdiv+0x94>
 8000c9c:	e7aa      	b.n	8000bf4 <__aeabi_fdiv+0x168>
 8000c9e:	221a      	movs	r2, #26
 8000ca0:	2501      	movs	r5, #1
 8000ca2:	1a1b      	subs	r3, r3, r0
 8000ca4:	e7e4      	b.n	8000c70 <__aeabi_fdiv+0x1e4>
 8000ca6:	01ad      	lsls	r5, r5, #6
 8000ca8:	2000      	movs	r0, #0
 8000caa:	0a6d      	lsrs	r5, r5, #9
 8000cac:	e74f      	b.n	8000b4e <__aeabi_fdiv+0xc2>
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	08009a74 	.word	0x08009a74
 8000cb4:	f7ffffff 	.word	0xf7ffffff
 8000cb8:	08009ab4 	.word	0x08009ab4

08000cbc <__eqsf2>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	0042      	lsls	r2, r0, #1
 8000cc0:	0245      	lsls	r5, r0, #9
 8000cc2:	024e      	lsls	r6, r1, #9
 8000cc4:	004c      	lsls	r4, r1, #1
 8000cc6:	0fc3      	lsrs	r3, r0, #31
 8000cc8:	0a6d      	lsrs	r5, r5, #9
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0e12      	lsrs	r2, r2, #24
 8000cce:	0a76      	lsrs	r6, r6, #9
 8000cd0:	0e24      	lsrs	r4, r4, #24
 8000cd2:	0fc9      	lsrs	r1, r1, #31
 8000cd4:	2aff      	cmp	r2, #255	; 0xff
 8000cd6:	d006      	beq.n	8000ce6 <__eqsf2+0x2a>
 8000cd8:	2cff      	cmp	r4, #255	; 0xff
 8000cda:	d003      	beq.n	8000ce4 <__eqsf2+0x28>
 8000cdc:	42a2      	cmp	r2, r4
 8000cde:	d101      	bne.n	8000ce4 <__eqsf2+0x28>
 8000ce0:	42b5      	cmp	r5, r6
 8000ce2:	d006      	beq.n	8000cf2 <__eqsf2+0x36>
 8000ce4:	bd70      	pop	{r4, r5, r6, pc}
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d1fc      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cea:	2cff      	cmp	r4, #255	; 0xff
 8000cec:	d1fa      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d1f8      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d006      	beq.n	8000d04 <__eqsf2+0x48>
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__eqsf2+0x28>
 8000cfc:	0028      	movs	r0, r5
 8000cfe:	1e43      	subs	r3, r0, #1
 8000d00:	4198      	sbcs	r0, r3
 8000d02:	e7ef      	b.n	8000ce4 <__eqsf2+0x28>
 8000d04:	2000      	movs	r0, #0
 8000d06:	e7ed      	b.n	8000ce4 <__eqsf2+0x28>

08000d08 <__gesf2>:
 8000d08:	b570      	push	{r4, r5, r6, lr}
 8000d0a:	0042      	lsls	r2, r0, #1
 8000d0c:	0245      	lsls	r5, r0, #9
 8000d0e:	024e      	lsls	r6, r1, #9
 8000d10:	004c      	lsls	r4, r1, #1
 8000d12:	0fc3      	lsrs	r3, r0, #31
 8000d14:	0a6d      	lsrs	r5, r5, #9
 8000d16:	0e12      	lsrs	r2, r2, #24
 8000d18:	0a76      	lsrs	r6, r6, #9
 8000d1a:	0e24      	lsrs	r4, r4, #24
 8000d1c:	0fc8      	lsrs	r0, r1, #31
 8000d1e:	2aff      	cmp	r2, #255	; 0xff
 8000d20:	d01b      	beq.n	8000d5a <__gesf2+0x52>
 8000d22:	2cff      	cmp	r4, #255	; 0xff
 8000d24:	d00e      	beq.n	8000d44 <__gesf2+0x3c>
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d11b      	bne.n	8000d62 <__gesf2+0x5a>
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d101      	bne.n	8000d32 <__gesf2+0x2a>
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d01c      	beq.n	8000d6c <__gesf2+0x64>
 8000d32:	2d00      	cmp	r5, #0
 8000d34:	d00c      	beq.n	8000d50 <__gesf2+0x48>
 8000d36:	4283      	cmp	r3, r0
 8000d38:	d01c      	beq.n	8000d74 <__gesf2+0x6c>
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	1e58      	subs	r0, r3, #1
 8000d3e:	4008      	ands	r0, r1
 8000d40:	3801      	subs	r0, #1
 8000d42:	bd70      	pop	{r4, r5, r6, pc}
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d122      	bne.n	8000d8e <__gesf2+0x86>
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	d1f4      	bne.n	8000d36 <__gesf2+0x2e>
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d1f2      	bne.n	8000d36 <__gesf2+0x2e>
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1f6      	bne.n	8000d42 <__gesf2+0x3a>
 8000d54:	2001      	movs	r0, #1
 8000d56:	4240      	negs	r0, r0
 8000d58:	e7f3      	b.n	8000d42 <__gesf2+0x3a>
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d117      	bne.n	8000d8e <__gesf2+0x86>
 8000d5e:	2cff      	cmp	r4, #255	; 0xff
 8000d60:	d0f0      	beq.n	8000d44 <__gesf2+0x3c>
 8000d62:	2c00      	cmp	r4, #0
 8000d64:	d1e7      	bne.n	8000d36 <__gesf2+0x2e>
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d1e5      	bne.n	8000d36 <__gesf2+0x2e>
 8000d6a:	e7e6      	b.n	8000d3a <__gesf2+0x32>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	2d00      	cmp	r5, #0
 8000d70:	d0e7      	beq.n	8000d42 <__gesf2+0x3a>
 8000d72:	e7e2      	b.n	8000d3a <__gesf2+0x32>
 8000d74:	42a2      	cmp	r2, r4
 8000d76:	dc05      	bgt.n	8000d84 <__gesf2+0x7c>
 8000d78:	dbea      	blt.n	8000d50 <__gesf2+0x48>
 8000d7a:	42b5      	cmp	r5, r6
 8000d7c:	d802      	bhi.n	8000d84 <__gesf2+0x7c>
 8000d7e:	d3e7      	bcc.n	8000d50 <__gesf2+0x48>
 8000d80:	2000      	movs	r0, #0
 8000d82:	e7de      	b.n	8000d42 <__gesf2+0x3a>
 8000d84:	4243      	negs	r3, r0
 8000d86:	4158      	adcs	r0, r3
 8000d88:	0040      	lsls	r0, r0, #1
 8000d8a:	3801      	subs	r0, #1
 8000d8c:	e7d9      	b.n	8000d42 <__gesf2+0x3a>
 8000d8e:	2002      	movs	r0, #2
 8000d90:	4240      	negs	r0, r0
 8000d92:	e7d6      	b.n	8000d42 <__gesf2+0x3a>

08000d94 <__lesf2>:
 8000d94:	b570      	push	{r4, r5, r6, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0245      	lsls	r5, r0, #9
 8000d9a:	024e      	lsls	r6, r1, #9
 8000d9c:	004c      	lsls	r4, r1, #1
 8000d9e:	0fc3      	lsrs	r3, r0, #31
 8000da0:	0a6d      	lsrs	r5, r5, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a76      	lsrs	r6, r6, #9
 8000da6:	0e24      	lsrs	r4, r4, #24
 8000da8:	0fc8      	lsrs	r0, r1, #31
 8000daa:	2aff      	cmp	r2, #255	; 0xff
 8000dac:	d00b      	beq.n	8000dc6 <__lesf2+0x32>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d00d      	beq.n	8000dce <__lesf2+0x3a>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11f      	bne.n	8000df6 <__lesf2+0x62>
 8000db6:	2c00      	cmp	r4, #0
 8000db8:	d116      	bne.n	8000de8 <__lesf2+0x54>
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d114      	bne.n	8000de8 <__lesf2+0x54>
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	2d00      	cmp	r5, #0
 8000dc2:	d010      	beq.n	8000de6 <__lesf2+0x52>
 8000dc4:	e009      	b.n	8000dda <__lesf2+0x46>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d10c      	bne.n	8000de4 <__lesf2+0x50>
 8000dca:	2cff      	cmp	r4, #255	; 0xff
 8000dcc:	d113      	bne.n	8000df6 <__lesf2+0x62>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d108      	bne.n	8000de4 <__lesf2+0x50>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d008      	beq.n	8000de8 <__lesf2+0x54>
 8000dd6:	4283      	cmp	r3, r0
 8000dd8:	d012      	beq.n	8000e00 <__lesf2+0x6c>
 8000dda:	2102      	movs	r1, #2
 8000ddc:	1e58      	subs	r0, r3, #1
 8000dde:	4008      	ands	r0, r1
 8000de0:	3801      	subs	r0, #1
 8000de2:	e000      	b.n	8000de6 <__lesf2+0x52>
 8000de4:	2002      	movs	r0, #2
 8000de6:	bd70      	pop	{r4, r5, r6, pc}
 8000de8:	2d00      	cmp	r5, #0
 8000dea:	d1f4      	bne.n	8000dd6 <__lesf2+0x42>
 8000dec:	2800      	cmp	r0, #0
 8000dee:	d1fa      	bne.n	8000de6 <__lesf2+0x52>
 8000df0:	2001      	movs	r0, #1
 8000df2:	4240      	negs	r0, r0
 8000df4:	e7f7      	b.n	8000de6 <__lesf2+0x52>
 8000df6:	2c00      	cmp	r4, #0
 8000df8:	d1ed      	bne.n	8000dd6 <__lesf2+0x42>
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d1eb      	bne.n	8000dd6 <__lesf2+0x42>
 8000dfe:	e7ec      	b.n	8000dda <__lesf2+0x46>
 8000e00:	42a2      	cmp	r2, r4
 8000e02:	dc05      	bgt.n	8000e10 <__lesf2+0x7c>
 8000e04:	dbf2      	blt.n	8000dec <__lesf2+0x58>
 8000e06:	42b5      	cmp	r5, r6
 8000e08:	d802      	bhi.n	8000e10 <__lesf2+0x7c>
 8000e0a:	d3ef      	bcc.n	8000dec <__lesf2+0x58>
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	e7ea      	b.n	8000de6 <__lesf2+0x52>
 8000e10:	4243      	negs	r3, r0
 8000e12:	4158      	adcs	r0, r3
 8000e14:	0040      	lsls	r0, r0, #1
 8000e16:	3801      	subs	r0, #1
 8000e18:	e7e5      	b.n	8000de6 <__lesf2+0x52>
 8000e1a:	46c0      	nop			; (mov r8, r8)

08000e1c <__aeabi_fmul>:
 8000e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e1e:	464f      	mov	r7, r9
 8000e20:	4646      	mov	r6, r8
 8000e22:	46d6      	mov	lr, sl
 8000e24:	0244      	lsls	r4, r0, #9
 8000e26:	0045      	lsls	r5, r0, #1
 8000e28:	b5c0      	push	{r6, r7, lr}
 8000e2a:	0a64      	lsrs	r4, r4, #9
 8000e2c:	1c0f      	adds	r7, r1, #0
 8000e2e:	0e2d      	lsrs	r5, r5, #24
 8000e30:	0fc6      	lsrs	r6, r0, #31
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d100      	bne.n	8000e38 <__aeabi_fmul+0x1c>
 8000e36:	e08d      	b.n	8000f54 <__aeabi_fmul+0x138>
 8000e38:	2dff      	cmp	r5, #255	; 0xff
 8000e3a:	d100      	bne.n	8000e3e <__aeabi_fmul+0x22>
 8000e3c:	e092      	b.n	8000f64 <__aeabi_fmul+0x148>
 8000e3e:	2300      	movs	r3, #0
 8000e40:	2080      	movs	r0, #128	; 0x80
 8000e42:	4699      	mov	r9, r3
 8000e44:	469a      	mov	sl, r3
 8000e46:	00e4      	lsls	r4, r4, #3
 8000e48:	04c0      	lsls	r0, r0, #19
 8000e4a:	4304      	orrs	r4, r0
 8000e4c:	3d7f      	subs	r5, #127	; 0x7f
 8000e4e:	0278      	lsls	r0, r7, #9
 8000e50:	0a43      	lsrs	r3, r0, #9
 8000e52:	4698      	mov	r8, r3
 8000e54:	007b      	lsls	r3, r7, #1
 8000e56:	0e1b      	lsrs	r3, r3, #24
 8000e58:	0fff      	lsrs	r7, r7, #31
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d100      	bne.n	8000e60 <__aeabi_fmul+0x44>
 8000e5e:	e070      	b.n	8000f42 <__aeabi_fmul+0x126>
 8000e60:	2bff      	cmp	r3, #255	; 0xff
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fmul+0x4a>
 8000e64:	e086      	b.n	8000f74 <__aeabi_fmul+0x158>
 8000e66:	4642      	mov	r2, r8
 8000e68:	00d0      	lsls	r0, r2, #3
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	3b7f      	subs	r3, #127	; 0x7f
 8000e6e:	18ed      	adds	r5, r5, r3
 8000e70:	2300      	movs	r3, #0
 8000e72:	04d2      	lsls	r2, r2, #19
 8000e74:	4302      	orrs	r2, r0
 8000e76:	4690      	mov	r8, r2
 8000e78:	469c      	mov	ip, r3
 8000e7a:	0031      	movs	r1, r6
 8000e7c:	464b      	mov	r3, r9
 8000e7e:	4079      	eors	r1, r7
 8000e80:	1c68      	adds	r0, r5, #1
 8000e82:	2b0f      	cmp	r3, #15
 8000e84:	d81c      	bhi.n	8000ec0 <__aeabi_fmul+0xa4>
 8000e86:	4a76      	ldr	r2, [pc, #472]	; (8001060 <__aeabi_fmul+0x244>)
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	58d3      	ldr	r3, [r2, r3]
 8000e8c:	469f      	mov	pc, r3
 8000e8e:	0039      	movs	r1, r7
 8000e90:	4644      	mov	r4, r8
 8000e92:	46e2      	mov	sl, ip
 8000e94:	4653      	mov	r3, sl
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d00f      	beq.n	8000eba <__aeabi_fmul+0x9e>
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d100      	bne.n	8000ea0 <__aeabi_fmul+0x84>
 8000e9e:	e0d7      	b.n	8001050 <__aeabi_fmul+0x234>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d137      	bne.n	8000f14 <__aeabi_fmul+0xf8>
 8000ea4:	2000      	movs	r0, #0
 8000ea6:	2400      	movs	r4, #0
 8000ea8:	05c0      	lsls	r0, r0, #23
 8000eaa:	4320      	orrs	r0, r4
 8000eac:	07c9      	lsls	r1, r1, #31
 8000eae:	4308      	orrs	r0, r1
 8000eb0:	bce0      	pop	{r5, r6, r7}
 8000eb2:	46ba      	mov	sl, r7
 8000eb4:	46b1      	mov	r9, r6
 8000eb6:	46a8      	mov	r8, r5
 8000eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eba:	20ff      	movs	r0, #255	; 0xff
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	e7f3      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8000ec0:	0c26      	lsrs	r6, r4, #16
 8000ec2:	0424      	lsls	r4, r4, #16
 8000ec4:	0c22      	lsrs	r2, r4, #16
 8000ec6:	4644      	mov	r4, r8
 8000ec8:	0424      	lsls	r4, r4, #16
 8000eca:	0c24      	lsrs	r4, r4, #16
 8000ecc:	4643      	mov	r3, r8
 8000ece:	0027      	movs	r7, r4
 8000ed0:	0c1b      	lsrs	r3, r3, #16
 8000ed2:	4357      	muls	r7, r2
 8000ed4:	4374      	muls	r4, r6
 8000ed6:	435a      	muls	r2, r3
 8000ed8:	435e      	muls	r6, r3
 8000eda:	1912      	adds	r2, r2, r4
 8000edc:	0c3b      	lsrs	r3, r7, #16
 8000ede:	189b      	adds	r3, r3, r2
 8000ee0:	429c      	cmp	r4, r3
 8000ee2:	d903      	bls.n	8000eec <__aeabi_fmul+0xd0>
 8000ee4:	2280      	movs	r2, #128	; 0x80
 8000ee6:	0252      	lsls	r2, r2, #9
 8000ee8:	4694      	mov	ip, r2
 8000eea:	4466      	add	r6, ip
 8000eec:	043f      	lsls	r7, r7, #16
 8000eee:	041a      	lsls	r2, r3, #16
 8000ef0:	0c3f      	lsrs	r7, r7, #16
 8000ef2:	19d2      	adds	r2, r2, r7
 8000ef4:	0194      	lsls	r4, r2, #6
 8000ef6:	1e67      	subs	r7, r4, #1
 8000ef8:	41bc      	sbcs	r4, r7
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	0e92      	lsrs	r2, r2, #26
 8000efe:	199b      	adds	r3, r3, r6
 8000f00:	4314      	orrs	r4, r2
 8000f02:	019b      	lsls	r3, r3, #6
 8000f04:	431c      	orrs	r4, r3
 8000f06:	011b      	lsls	r3, r3, #4
 8000f08:	d400      	bmi.n	8000f0c <__aeabi_fmul+0xf0>
 8000f0a:	e09b      	b.n	8001044 <__aeabi_fmul+0x228>
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	0862      	lsrs	r2, r4, #1
 8000f10:	401c      	ands	r4, r3
 8000f12:	4314      	orrs	r4, r2
 8000f14:	0002      	movs	r2, r0
 8000f16:	327f      	adds	r2, #127	; 0x7f
 8000f18:	2a00      	cmp	r2, #0
 8000f1a:	dd64      	ble.n	8000fe6 <__aeabi_fmul+0x1ca>
 8000f1c:	0763      	lsls	r3, r4, #29
 8000f1e:	d004      	beq.n	8000f2a <__aeabi_fmul+0x10e>
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	2b04      	cmp	r3, #4
 8000f26:	d000      	beq.n	8000f2a <__aeabi_fmul+0x10e>
 8000f28:	3404      	adds	r4, #4
 8000f2a:	0123      	lsls	r3, r4, #4
 8000f2c:	d503      	bpl.n	8000f36 <__aeabi_fmul+0x11a>
 8000f2e:	0002      	movs	r2, r0
 8000f30:	4b4c      	ldr	r3, [pc, #304]	; (8001064 <__aeabi_fmul+0x248>)
 8000f32:	3280      	adds	r2, #128	; 0x80
 8000f34:	401c      	ands	r4, r3
 8000f36:	2afe      	cmp	r2, #254	; 0xfe
 8000f38:	dcbf      	bgt.n	8000eba <__aeabi_fmul+0x9e>
 8000f3a:	01a4      	lsls	r4, r4, #6
 8000f3c:	0a64      	lsrs	r4, r4, #9
 8000f3e:	b2d0      	uxtb	r0, r2
 8000f40:	e7b2      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8000f42:	4643      	mov	r3, r8
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d13d      	bne.n	8000fc4 <__aeabi_fmul+0x1a8>
 8000f48:	464a      	mov	r2, r9
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	4691      	mov	r9, r2
 8000f50:	469c      	mov	ip, r3
 8000f52:	e792      	b.n	8000e7a <__aeabi_fmul+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d129      	bne.n	8000fac <__aeabi_fmul+0x190>
 8000f58:	2304      	movs	r3, #4
 8000f5a:	4699      	mov	r9, r3
 8000f5c:	3b03      	subs	r3, #3
 8000f5e:	2500      	movs	r5, #0
 8000f60:	469a      	mov	sl, r3
 8000f62:	e774      	b.n	8000e4e <__aeabi_fmul+0x32>
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d11b      	bne.n	8000fa0 <__aeabi_fmul+0x184>
 8000f68:	2308      	movs	r3, #8
 8000f6a:	4699      	mov	r9, r3
 8000f6c:	3b06      	subs	r3, #6
 8000f6e:	25ff      	movs	r5, #255	; 0xff
 8000f70:	469a      	mov	sl, r3
 8000f72:	e76c      	b.n	8000e4e <__aeabi_fmul+0x32>
 8000f74:	4643      	mov	r3, r8
 8000f76:	35ff      	adds	r5, #255	; 0xff
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d10b      	bne.n	8000f94 <__aeabi_fmul+0x178>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	464a      	mov	r2, r9
 8000f80:	431a      	orrs	r2, r3
 8000f82:	4691      	mov	r9, r2
 8000f84:	469c      	mov	ip, r3
 8000f86:	e778      	b.n	8000e7a <__aeabi_fmul+0x5e>
 8000f88:	4653      	mov	r3, sl
 8000f8a:	0031      	movs	r1, r6
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d000      	beq.n	8000f92 <__aeabi_fmul+0x176>
 8000f90:	e783      	b.n	8000e9a <__aeabi_fmul+0x7e>
 8000f92:	e792      	b.n	8000eba <__aeabi_fmul+0x9e>
 8000f94:	2303      	movs	r3, #3
 8000f96:	464a      	mov	r2, r9
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	4691      	mov	r9, r2
 8000f9c:	469c      	mov	ip, r3
 8000f9e:	e76c      	b.n	8000e7a <__aeabi_fmul+0x5e>
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	3b09      	subs	r3, #9
 8000fa6:	25ff      	movs	r5, #255	; 0xff
 8000fa8:	469a      	mov	sl, r3
 8000faa:	e750      	b.n	8000e4e <__aeabi_fmul+0x32>
 8000fac:	0020      	movs	r0, r4
 8000fae:	f002 f8a5 	bl	80030fc <__clzsi2>
 8000fb2:	2576      	movs	r5, #118	; 0x76
 8000fb4:	1f43      	subs	r3, r0, #5
 8000fb6:	409c      	lsls	r4, r3
 8000fb8:	2300      	movs	r3, #0
 8000fba:	426d      	negs	r5, r5
 8000fbc:	4699      	mov	r9, r3
 8000fbe:	469a      	mov	sl, r3
 8000fc0:	1a2d      	subs	r5, r5, r0
 8000fc2:	e744      	b.n	8000e4e <__aeabi_fmul+0x32>
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	f002 f899 	bl	80030fc <__clzsi2>
 8000fca:	4642      	mov	r2, r8
 8000fcc:	1f43      	subs	r3, r0, #5
 8000fce:	409a      	lsls	r2, r3
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	1a2d      	subs	r5, r5, r0
 8000fd4:	4690      	mov	r8, r2
 8000fd6:	469c      	mov	ip, r3
 8000fd8:	3d76      	subs	r5, #118	; 0x76
 8000fda:	e74e      	b.n	8000e7a <__aeabi_fmul+0x5e>
 8000fdc:	2480      	movs	r4, #128	; 0x80
 8000fde:	2100      	movs	r1, #0
 8000fe0:	20ff      	movs	r0, #255	; 0xff
 8000fe2:	03e4      	lsls	r4, r4, #15
 8000fe4:	e760      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	1a9b      	subs	r3, r3, r2
 8000fea:	2b1b      	cmp	r3, #27
 8000fec:	dd00      	ble.n	8000ff0 <__aeabi_fmul+0x1d4>
 8000fee:	e759      	b.n	8000ea4 <__aeabi_fmul+0x88>
 8000ff0:	0022      	movs	r2, r4
 8000ff2:	309e      	adds	r0, #158	; 0x9e
 8000ff4:	40da      	lsrs	r2, r3
 8000ff6:	4084      	lsls	r4, r0
 8000ff8:	0013      	movs	r3, r2
 8000ffa:	1e62      	subs	r2, r4, #1
 8000ffc:	4194      	sbcs	r4, r2
 8000ffe:	431c      	orrs	r4, r3
 8001000:	0763      	lsls	r3, r4, #29
 8001002:	d004      	beq.n	800100e <__aeabi_fmul+0x1f2>
 8001004:	230f      	movs	r3, #15
 8001006:	4023      	ands	r3, r4
 8001008:	2b04      	cmp	r3, #4
 800100a:	d000      	beq.n	800100e <__aeabi_fmul+0x1f2>
 800100c:	3404      	adds	r4, #4
 800100e:	0163      	lsls	r3, r4, #5
 8001010:	d51a      	bpl.n	8001048 <__aeabi_fmul+0x22c>
 8001012:	2001      	movs	r0, #1
 8001014:	2400      	movs	r4, #0
 8001016:	e747      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8001018:	2080      	movs	r0, #128	; 0x80
 800101a:	03c0      	lsls	r0, r0, #15
 800101c:	4204      	tst	r4, r0
 800101e:	d009      	beq.n	8001034 <__aeabi_fmul+0x218>
 8001020:	4643      	mov	r3, r8
 8001022:	4203      	tst	r3, r0
 8001024:	d106      	bne.n	8001034 <__aeabi_fmul+0x218>
 8001026:	4644      	mov	r4, r8
 8001028:	4304      	orrs	r4, r0
 800102a:	0264      	lsls	r4, r4, #9
 800102c:	0039      	movs	r1, r7
 800102e:	20ff      	movs	r0, #255	; 0xff
 8001030:	0a64      	lsrs	r4, r4, #9
 8001032:	e739      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8001034:	2080      	movs	r0, #128	; 0x80
 8001036:	03c0      	lsls	r0, r0, #15
 8001038:	4304      	orrs	r4, r0
 800103a:	0264      	lsls	r4, r4, #9
 800103c:	0031      	movs	r1, r6
 800103e:	20ff      	movs	r0, #255	; 0xff
 8001040:	0a64      	lsrs	r4, r4, #9
 8001042:	e731      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8001044:	0028      	movs	r0, r5
 8001046:	e765      	b.n	8000f14 <__aeabi_fmul+0xf8>
 8001048:	01a4      	lsls	r4, r4, #6
 800104a:	2000      	movs	r0, #0
 800104c:	0a64      	lsrs	r4, r4, #9
 800104e:	e72b      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 8001050:	2080      	movs	r0, #128	; 0x80
 8001052:	03c0      	lsls	r0, r0, #15
 8001054:	4304      	orrs	r4, r0
 8001056:	0264      	lsls	r4, r4, #9
 8001058:	20ff      	movs	r0, #255	; 0xff
 800105a:	0a64      	lsrs	r4, r4, #9
 800105c:	e724      	b.n	8000ea8 <__aeabi_fmul+0x8c>
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	08009af4 	.word	0x08009af4
 8001064:	f7ffffff 	.word	0xf7ffffff

08001068 <__aeabi_fsub>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	46ce      	mov	lr, r9
 800106c:	4647      	mov	r7, r8
 800106e:	0243      	lsls	r3, r0, #9
 8001070:	0a5b      	lsrs	r3, r3, #9
 8001072:	024e      	lsls	r6, r1, #9
 8001074:	00da      	lsls	r2, r3, #3
 8001076:	4694      	mov	ip, r2
 8001078:	0a72      	lsrs	r2, r6, #9
 800107a:	4691      	mov	r9, r2
 800107c:	0045      	lsls	r5, r0, #1
 800107e:	004a      	lsls	r2, r1, #1
 8001080:	b580      	push	{r7, lr}
 8001082:	0e2d      	lsrs	r5, r5, #24
 8001084:	001f      	movs	r7, r3
 8001086:	0fc4      	lsrs	r4, r0, #31
 8001088:	0e12      	lsrs	r2, r2, #24
 800108a:	0fc9      	lsrs	r1, r1, #31
 800108c:	09b6      	lsrs	r6, r6, #6
 800108e:	2aff      	cmp	r2, #255	; 0xff
 8001090:	d05b      	beq.n	800114a <__aeabi_fsub+0xe2>
 8001092:	2001      	movs	r0, #1
 8001094:	4041      	eors	r1, r0
 8001096:	428c      	cmp	r4, r1
 8001098:	d039      	beq.n	800110e <__aeabi_fsub+0xa6>
 800109a:	1aa8      	subs	r0, r5, r2
 800109c:	2800      	cmp	r0, #0
 800109e:	dd5a      	ble.n	8001156 <__aeabi_fsub+0xee>
 80010a0:	2a00      	cmp	r2, #0
 80010a2:	d06a      	beq.n	800117a <__aeabi_fsub+0x112>
 80010a4:	2dff      	cmp	r5, #255	; 0xff
 80010a6:	d100      	bne.n	80010aa <__aeabi_fsub+0x42>
 80010a8:	e0d9      	b.n	800125e <__aeabi_fsub+0x1f6>
 80010aa:	2280      	movs	r2, #128	; 0x80
 80010ac:	04d2      	lsls	r2, r2, #19
 80010ae:	4316      	orrs	r6, r2
 80010b0:	281b      	cmp	r0, #27
 80010b2:	dc00      	bgt.n	80010b6 <__aeabi_fsub+0x4e>
 80010b4:	e0e9      	b.n	800128a <__aeabi_fsub+0x222>
 80010b6:	2001      	movs	r0, #1
 80010b8:	4663      	mov	r3, ip
 80010ba:	1a18      	subs	r0, r3, r0
 80010bc:	0143      	lsls	r3, r0, #5
 80010be:	d400      	bmi.n	80010c2 <__aeabi_fsub+0x5a>
 80010c0:	e0b4      	b.n	800122c <__aeabi_fsub+0x1c4>
 80010c2:	0180      	lsls	r0, r0, #6
 80010c4:	0987      	lsrs	r7, r0, #6
 80010c6:	0038      	movs	r0, r7
 80010c8:	f002 f818 	bl	80030fc <__clzsi2>
 80010cc:	3805      	subs	r0, #5
 80010ce:	4087      	lsls	r7, r0
 80010d0:	4285      	cmp	r5, r0
 80010d2:	dc00      	bgt.n	80010d6 <__aeabi_fsub+0x6e>
 80010d4:	e0cc      	b.n	8001270 <__aeabi_fsub+0x208>
 80010d6:	1a2d      	subs	r5, r5, r0
 80010d8:	48b5      	ldr	r0, [pc, #724]	; (80013b0 <__aeabi_fsub+0x348>)
 80010da:	4038      	ands	r0, r7
 80010dc:	0743      	lsls	r3, r0, #29
 80010de:	d004      	beq.n	80010ea <__aeabi_fsub+0x82>
 80010e0:	230f      	movs	r3, #15
 80010e2:	4003      	ands	r3, r0
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	d000      	beq.n	80010ea <__aeabi_fsub+0x82>
 80010e8:	3004      	adds	r0, #4
 80010ea:	0143      	lsls	r3, r0, #5
 80010ec:	d400      	bmi.n	80010f0 <__aeabi_fsub+0x88>
 80010ee:	e0a0      	b.n	8001232 <__aeabi_fsub+0x1ca>
 80010f0:	1c6a      	adds	r2, r5, #1
 80010f2:	2dfe      	cmp	r5, #254	; 0xfe
 80010f4:	d100      	bne.n	80010f8 <__aeabi_fsub+0x90>
 80010f6:	e08d      	b.n	8001214 <__aeabi_fsub+0x1ac>
 80010f8:	0180      	lsls	r0, r0, #6
 80010fa:	0a47      	lsrs	r7, r0, #9
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	05d0      	lsls	r0, r2, #23
 8001100:	4338      	orrs	r0, r7
 8001102:	07e4      	lsls	r4, r4, #31
 8001104:	4320      	orrs	r0, r4
 8001106:	bcc0      	pop	{r6, r7}
 8001108:	46b9      	mov	r9, r7
 800110a:	46b0      	mov	r8, r6
 800110c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800110e:	1aa8      	subs	r0, r5, r2
 8001110:	4680      	mov	r8, r0
 8001112:	2800      	cmp	r0, #0
 8001114:	dd45      	ble.n	80011a2 <__aeabi_fsub+0x13a>
 8001116:	2a00      	cmp	r2, #0
 8001118:	d070      	beq.n	80011fc <__aeabi_fsub+0x194>
 800111a:	2dff      	cmp	r5, #255	; 0xff
 800111c:	d100      	bne.n	8001120 <__aeabi_fsub+0xb8>
 800111e:	e09e      	b.n	800125e <__aeabi_fsub+0x1f6>
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	04db      	lsls	r3, r3, #19
 8001124:	431e      	orrs	r6, r3
 8001126:	4643      	mov	r3, r8
 8001128:	2b1b      	cmp	r3, #27
 800112a:	dc00      	bgt.n	800112e <__aeabi_fsub+0xc6>
 800112c:	e0d2      	b.n	80012d4 <__aeabi_fsub+0x26c>
 800112e:	2001      	movs	r0, #1
 8001130:	4460      	add	r0, ip
 8001132:	0143      	lsls	r3, r0, #5
 8001134:	d57a      	bpl.n	800122c <__aeabi_fsub+0x1c4>
 8001136:	3501      	adds	r5, #1
 8001138:	2dff      	cmp	r5, #255	; 0xff
 800113a:	d06b      	beq.n	8001214 <__aeabi_fsub+0x1ac>
 800113c:	2301      	movs	r3, #1
 800113e:	4a9d      	ldr	r2, [pc, #628]	; (80013b4 <__aeabi_fsub+0x34c>)
 8001140:	4003      	ands	r3, r0
 8001142:	0840      	lsrs	r0, r0, #1
 8001144:	4010      	ands	r0, r2
 8001146:	4318      	orrs	r0, r3
 8001148:	e7c8      	b.n	80010dc <__aeabi_fsub+0x74>
 800114a:	2e00      	cmp	r6, #0
 800114c:	d020      	beq.n	8001190 <__aeabi_fsub+0x128>
 800114e:	428c      	cmp	r4, r1
 8001150:	d023      	beq.n	800119a <__aeabi_fsub+0x132>
 8001152:	0028      	movs	r0, r5
 8001154:	38ff      	subs	r0, #255	; 0xff
 8001156:	2800      	cmp	r0, #0
 8001158:	d039      	beq.n	80011ce <__aeabi_fsub+0x166>
 800115a:	1b57      	subs	r7, r2, r5
 800115c:	2d00      	cmp	r5, #0
 800115e:	d000      	beq.n	8001162 <__aeabi_fsub+0xfa>
 8001160:	e09d      	b.n	800129e <__aeabi_fsub+0x236>
 8001162:	4663      	mov	r3, ip
 8001164:	2b00      	cmp	r3, #0
 8001166:	d100      	bne.n	800116a <__aeabi_fsub+0x102>
 8001168:	e0db      	b.n	8001322 <__aeabi_fsub+0x2ba>
 800116a:	1e7b      	subs	r3, r7, #1
 800116c:	2f01      	cmp	r7, #1
 800116e:	d100      	bne.n	8001172 <__aeabi_fsub+0x10a>
 8001170:	e10d      	b.n	800138e <__aeabi_fsub+0x326>
 8001172:	2fff      	cmp	r7, #255	; 0xff
 8001174:	d071      	beq.n	800125a <__aeabi_fsub+0x1f2>
 8001176:	001f      	movs	r7, r3
 8001178:	e098      	b.n	80012ac <__aeabi_fsub+0x244>
 800117a:	2e00      	cmp	r6, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_fsub+0x118>
 800117e:	e0a7      	b.n	80012d0 <__aeabi_fsub+0x268>
 8001180:	1e42      	subs	r2, r0, #1
 8001182:	2801      	cmp	r0, #1
 8001184:	d100      	bne.n	8001188 <__aeabi_fsub+0x120>
 8001186:	e0e6      	b.n	8001356 <__aeabi_fsub+0x2ee>
 8001188:	28ff      	cmp	r0, #255	; 0xff
 800118a:	d068      	beq.n	800125e <__aeabi_fsub+0x1f6>
 800118c:	0010      	movs	r0, r2
 800118e:	e78f      	b.n	80010b0 <__aeabi_fsub+0x48>
 8001190:	2001      	movs	r0, #1
 8001192:	4041      	eors	r1, r0
 8001194:	42a1      	cmp	r1, r4
 8001196:	d000      	beq.n	800119a <__aeabi_fsub+0x132>
 8001198:	e77f      	b.n	800109a <__aeabi_fsub+0x32>
 800119a:	20ff      	movs	r0, #255	; 0xff
 800119c:	4240      	negs	r0, r0
 800119e:	4680      	mov	r8, r0
 80011a0:	44a8      	add	r8, r5
 80011a2:	4640      	mov	r0, r8
 80011a4:	2800      	cmp	r0, #0
 80011a6:	d038      	beq.n	800121a <__aeabi_fsub+0x1b2>
 80011a8:	1b51      	subs	r1, r2, r5
 80011aa:	2d00      	cmp	r5, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x148>
 80011ae:	e0ae      	b.n	800130e <__aeabi_fsub+0x2a6>
 80011b0:	2aff      	cmp	r2, #255	; 0xff
 80011b2:	d100      	bne.n	80011b6 <__aeabi_fsub+0x14e>
 80011b4:	e0df      	b.n	8001376 <__aeabi_fsub+0x30e>
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	4660      	mov	r0, ip
 80011ba:	04db      	lsls	r3, r3, #19
 80011bc:	4318      	orrs	r0, r3
 80011be:	4684      	mov	ip, r0
 80011c0:	291b      	cmp	r1, #27
 80011c2:	dc00      	bgt.n	80011c6 <__aeabi_fsub+0x15e>
 80011c4:	e0d9      	b.n	800137a <__aeabi_fsub+0x312>
 80011c6:	2001      	movs	r0, #1
 80011c8:	0015      	movs	r5, r2
 80011ca:	1980      	adds	r0, r0, r6
 80011cc:	e7b1      	b.n	8001132 <__aeabi_fsub+0xca>
 80011ce:	20fe      	movs	r0, #254	; 0xfe
 80011d0:	1c6a      	adds	r2, r5, #1
 80011d2:	4210      	tst	r0, r2
 80011d4:	d171      	bne.n	80012ba <__aeabi_fsub+0x252>
 80011d6:	2d00      	cmp	r5, #0
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x174>
 80011da:	e0a6      	b.n	800132a <__aeabi_fsub+0x2c2>
 80011dc:	4663      	mov	r3, ip
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x17c>
 80011e2:	e0d9      	b.n	8001398 <__aeabi_fsub+0x330>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2e00      	cmp	r6, #0
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x184>
 80011ea:	e788      	b.n	80010fe <__aeabi_fsub+0x96>
 80011ec:	1b98      	subs	r0, r3, r6
 80011ee:	0143      	lsls	r3, r0, #5
 80011f0:	d400      	bmi.n	80011f4 <__aeabi_fsub+0x18c>
 80011f2:	e0e1      	b.n	80013b8 <__aeabi_fsub+0x350>
 80011f4:	4663      	mov	r3, ip
 80011f6:	000c      	movs	r4, r1
 80011f8:	1af0      	subs	r0, r6, r3
 80011fa:	e76f      	b.n	80010dc <__aeabi_fsub+0x74>
 80011fc:	2e00      	cmp	r6, #0
 80011fe:	d100      	bne.n	8001202 <__aeabi_fsub+0x19a>
 8001200:	e0b7      	b.n	8001372 <__aeabi_fsub+0x30a>
 8001202:	0002      	movs	r2, r0
 8001204:	3a01      	subs	r2, #1
 8001206:	2801      	cmp	r0, #1
 8001208:	d100      	bne.n	800120c <__aeabi_fsub+0x1a4>
 800120a:	e09c      	b.n	8001346 <__aeabi_fsub+0x2de>
 800120c:	28ff      	cmp	r0, #255	; 0xff
 800120e:	d026      	beq.n	800125e <__aeabi_fsub+0x1f6>
 8001210:	4690      	mov	r8, r2
 8001212:	e788      	b.n	8001126 <__aeabi_fsub+0xbe>
 8001214:	22ff      	movs	r2, #255	; 0xff
 8001216:	2700      	movs	r7, #0
 8001218:	e771      	b.n	80010fe <__aeabi_fsub+0x96>
 800121a:	20fe      	movs	r0, #254	; 0xfe
 800121c:	1c6a      	adds	r2, r5, #1
 800121e:	4210      	tst	r0, r2
 8001220:	d064      	beq.n	80012ec <__aeabi_fsub+0x284>
 8001222:	2aff      	cmp	r2, #255	; 0xff
 8001224:	d0f6      	beq.n	8001214 <__aeabi_fsub+0x1ac>
 8001226:	0015      	movs	r5, r2
 8001228:	4466      	add	r6, ip
 800122a:	0870      	lsrs	r0, r6, #1
 800122c:	0743      	lsls	r3, r0, #29
 800122e:	d000      	beq.n	8001232 <__aeabi_fsub+0x1ca>
 8001230:	e756      	b.n	80010e0 <__aeabi_fsub+0x78>
 8001232:	08c3      	lsrs	r3, r0, #3
 8001234:	2dff      	cmp	r5, #255	; 0xff
 8001236:	d012      	beq.n	800125e <__aeabi_fsub+0x1f6>
 8001238:	025b      	lsls	r3, r3, #9
 800123a:	0a5f      	lsrs	r7, r3, #9
 800123c:	b2ea      	uxtb	r2, r5
 800123e:	e75e      	b.n	80010fe <__aeabi_fsub+0x96>
 8001240:	4662      	mov	r2, ip
 8001242:	2a00      	cmp	r2, #0
 8001244:	d100      	bne.n	8001248 <__aeabi_fsub+0x1e0>
 8001246:	e096      	b.n	8001376 <__aeabi_fsub+0x30e>
 8001248:	2e00      	cmp	r6, #0
 800124a:	d008      	beq.n	800125e <__aeabi_fsub+0x1f6>
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	03d2      	lsls	r2, r2, #15
 8001250:	4213      	tst	r3, r2
 8001252:	d004      	beq.n	800125e <__aeabi_fsub+0x1f6>
 8001254:	4648      	mov	r0, r9
 8001256:	4210      	tst	r0, r2
 8001258:	d101      	bne.n	800125e <__aeabi_fsub+0x1f6>
 800125a:	000c      	movs	r4, r1
 800125c:	464b      	mov	r3, r9
 800125e:	2b00      	cmp	r3, #0
 8001260:	d0d8      	beq.n	8001214 <__aeabi_fsub+0x1ac>
 8001262:	2780      	movs	r7, #128	; 0x80
 8001264:	03ff      	lsls	r7, r7, #15
 8001266:	431f      	orrs	r7, r3
 8001268:	027f      	lsls	r7, r7, #9
 800126a:	22ff      	movs	r2, #255	; 0xff
 800126c:	0a7f      	lsrs	r7, r7, #9
 800126e:	e746      	b.n	80010fe <__aeabi_fsub+0x96>
 8001270:	2320      	movs	r3, #32
 8001272:	003a      	movs	r2, r7
 8001274:	1b45      	subs	r5, r0, r5
 8001276:	0038      	movs	r0, r7
 8001278:	3501      	adds	r5, #1
 800127a:	40ea      	lsrs	r2, r5
 800127c:	1b5d      	subs	r5, r3, r5
 800127e:	40a8      	lsls	r0, r5
 8001280:	1e43      	subs	r3, r0, #1
 8001282:	4198      	sbcs	r0, r3
 8001284:	2500      	movs	r5, #0
 8001286:	4310      	orrs	r0, r2
 8001288:	e728      	b.n	80010dc <__aeabi_fsub+0x74>
 800128a:	2320      	movs	r3, #32
 800128c:	1a1b      	subs	r3, r3, r0
 800128e:	0032      	movs	r2, r6
 8001290:	409e      	lsls	r6, r3
 8001292:	40c2      	lsrs	r2, r0
 8001294:	0030      	movs	r0, r6
 8001296:	1e43      	subs	r3, r0, #1
 8001298:	4198      	sbcs	r0, r3
 800129a:	4310      	orrs	r0, r2
 800129c:	e70c      	b.n	80010b8 <__aeabi_fsub+0x50>
 800129e:	2aff      	cmp	r2, #255	; 0xff
 80012a0:	d0db      	beq.n	800125a <__aeabi_fsub+0x1f2>
 80012a2:	2380      	movs	r3, #128	; 0x80
 80012a4:	4660      	mov	r0, ip
 80012a6:	04db      	lsls	r3, r3, #19
 80012a8:	4318      	orrs	r0, r3
 80012aa:	4684      	mov	ip, r0
 80012ac:	2f1b      	cmp	r7, #27
 80012ae:	dd56      	ble.n	800135e <__aeabi_fsub+0x2f6>
 80012b0:	2001      	movs	r0, #1
 80012b2:	000c      	movs	r4, r1
 80012b4:	0015      	movs	r5, r2
 80012b6:	1a30      	subs	r0, r6, r0
 80012b8:	e700      	b.n	80010bc <__aeabi_fsub+0x54>
 80012ba:	4663      	mov	r3, ip
 80012bc:	1b9f      	subs	r7, r3, r6
 80012be:	017b      	lsls	r3, r7, #5
 80012c0:	d43d      	bmi.n	800133e <__aeabi_fsub+0x2d6>
 80012c2:	2f00      	cmp	r7, #0
 80012c4:	d000      	beq.n	80012c8 <__aeabi_fsub+0x260>
 80012c6:	e6fe      	b.n	80010c6 <__aeabi_fsub+0x5e>
 80012c8:	2400      	movs	r4, #0
 80012ca:	2200      	movs	r2, #0
 80012cc:	2700      	movs	r7, #0
 80012ce:	e716      	b.n	80010fe <__aeabi_fsub+0x96>
 80012d0:	0005      	movs	r5, r0
 80012d2:	e7af      	b.n	8001234 <__aeabi_fsub+0x1cc>
 80012d4:	0032      	movs	r2, r6
 80012d6:	4643      	mov	r3, r8
 80012d8:	4641      	mov	r1, r8
 80012da:	40da      	lsrs	r2, r3
 80012dc:	2320      	movs	r3, #32
 80012de:	1a5b      	subs	r3, r3, r1
 80012e0:	409e      	lsls	r6, r3
 80012e2:	0030      	movs	r0, r6
 80012e4:	1e43      	subs	r3, r0, #1
 80012e6:	4198      	sbcs	r0, r3
 80012e8:	4310      	orrs	r0, r2
 80012ea:	e721      	b.n	8001130 <__aeabi_fsub+0xc8>
 80012ec:	2d00      	cmp	r5, #0
 80012ee:	d1a7      	bne.n	8001240 <__aeabi_fsub+0x1d8>
 80012f0:	4663      	mov	r3, ip
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d059      	beq.n	80013aa <__aeabi_fsub+0x342>
 80012f6:	2200      	movs	r2, #0
 80012f8:	2e00      	cmp	r6, #0
 80012fa:	d100      	bne.n	80012fe <__aeabi_fsub+0x296>
 80012fc:	e6ff      	b.n	80010fe <__aeabi_fsub+0x96>
 80012fe:	0030      	movs	r0, r6
 8001300:	4460      	add	r0, ip
 8001302:	0143      	lsls	r3, r0, #5
 8001304:	d592      	bpl.n	800122c <__aeabi_fsub+0x1c4>
 8001306:	4b2a      	ldr	r3, [pc, #168]	; (80013b0 <__aeabi_fsub+0x348>)
 8001308:	3501      	adds	r5, #1
 800130a:	4018      	ands	r0, r3
 800130c:	e78e      	b.n	800122c <__aeabi_fsub+0x1c4>
 800130e:	4663      	mov	r3, ip
 8001310:	2b00      	cmp	r3, #0
 8001312:	d047      	beq.n	80013a4 <__aeabi_fsub+0x33c>
 8001314:	1e4b      	subs	r3, r1, #1
 8001316:	2901      	cmp	r1, #1
 8001318:	d015      	beq.n	8001346 <__aeabi_fsub+0x2de>
 800131a:	29ff      	cmp	r1, #255	; 0xff
 800131c:	d02b      	beq.n	8001376 <__aeabi_fsub+0x30e>
 800131e:	0019      	movs	r1, r3
 8001320:	e74e      	b.n	80011c0 <__aeabi_fsub+0x158>
 8001322:	000c      	movs	r4, r1
 8001324:	464b      	mov	r3, r9
 8001326:	003d      	movs	r5, r7
 8001328:	e784      	b.n	8001234 <__aeabi_fsub+0x1cc>
 800132a:	4662      	mov	r2, ip
 800132c:	2a00      	cmp	r2, #0
 800132e:	d18b      	bne.n	8001248 <__aeabi_fsub+0x1e0>
 8001330:	2e00      	cmp	r6, #0
 8001332:	d192      	bne.n	800125a <__aeabi_fsub+0x1f2>
 8001334:	2780      	movs	r7, #128	; 0x80
 8001336:	2400      	movs	r4, #0
 8001338:	22ff      	movs	r2, #255	; 0xff
 800133a:	03ff      	lsls	r7, r7, #15
 800133c:	e6df      	b.n	80010fe <__aeabi_fsub+0x96>
 800133e:	4663      	mov	r3, ip
 8001340:	000c      	movs	r4, r1
 8001342:	1af7      	subs	r7, r6, r3
 8001344:	e6bf      	b.n	80010c6 <__aeabi_fsub+0x5e>
 8001346:	0030      	movs	r0, r6
 8001348:	4460      	add	r0, ip
 800134a:	2501      	movs	r5, #1
 800134c:	0143      	lsls	r3, r0, #5
 800134e:	d400      	bmi.n	8001352 <__aeabi_fsub+0x2ea>
 8001350:	e76c      	b.n	800122c <__aeabi_fsub+0x1c4>
 8001352:	2502      	movs	r5, #2
 8001354:	e6f2      	b.n	800113c <__aeabi_fsub+0xd4>
 8001356:	4663      	mov	r3, ip
 8001358:	2501      	movs	r5, #1
 800135a:	1b98      	subs	r0, r3, r6
 800135c:	e6ae      	b.n	80010bc <__aeabi_fsub+0x54>
 800135e:	2320      	movs	r3, #32
 8001360:	4664      	mov	r4, ip
 8001362:	4660      	mov	r0, ip
 8001364:	40fc      	lsrs	r4, r7
 8001366:	1bdf      	subs	r7, r3, r7
 8001368:	40b8      	lsls	r0, r7
 800136a:	1e43      	subs	r3, r0, #1
 800136c:	4198      	sbcs	r0, r3
 800136e:	4320      	orrs	r0, r4
 8001370:	e79f      	b.n	80012b2 <__aeabi_fsub+0x24a>
 8001372:	0005      	movs	r5, r0
 8001374:	e75e      	b.n	8001234 <__aeabi_fsub+0x1cc>
 8001376:	464b      	mov	r3, r9
 8001378:	e771      	b.n	800125e <__aeabi_fsub+0x1f6>
 800137a:	2320      	movs	r3, #32
 800137c:	4665      	mov	r5, ip
 800137e:	4660      	mov	r0, ip
 8001380:	40cd      	lsrs	r5, r1
 8001382:	1a59      	subs	r1, r3, r1
 8001384:	4088      	lsls	r0, r1
 8001386:	1e43      	subs	r3, r0, #1
 8001388:	4198      	sbcs	r0, r3
 800138a:	4328      	orrs	r0, r5
 800138c:	e71c      	b.n	80011c8 <__aeabi_fsub+0x160>
 800138e:	4663      	mov	r3, ip
 8001390:	000c      	movs	r4, r1
 8001392:	2501      	movs	r5, #1
 8001394:	1af0      	subs	r0, r6, r3
 8001396:	e691      	b.n	80010bc <__aeabi_fsub+0x54>
 8001398:	2e00      	cmp	r6, #0
 800139a:	d095      	beq.n	80012c8 <__aeabi_fsub+0x260>
 800139c:	000c      	movs	r4, r1
 800139e:	464f      	mov	r7, r9
 80013a0:	2200      	movs	r2, #0
 80013a2:	e6ac      	b.n	80010fe <__aeabi_fsub+0x96>
 80013a4:	464b      	mov	r3, r9
 80013a6:	000d      	movs	r5, r1
 80013a8:	e744      	b.n	8001234 <__aeabi_fsub+0x1cc>
 80013aa:	464f      	mov	r7, r9
 80013ac:	2200      	movs	r2, #0
 80013ae:	e6a6      	b.n	80010fe <__aeabi_fsub+0x96>
 80013b0:	fbffffff 	.word	0xfbffffff
 80013b4:	7dffffff 	.word	0x7dffffff
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d000      	beq.n	80013be <__aeabi_fsub+0x356>
 80013bc:	e736      	b.n	800122c <__aeabi_fsub+0x1c4>
 80013be:	2400      	movs	r4, #0
 80013c0:	2700      	movs	r7, #0
 80013c2:	e69c      	b.n	80010fe <__aeabi_fsub+0x96>

080013c4 <__aeabi_f2iz>:
 80013c4:	0241      	lsls	r1, r0, #9
 80013c6:	0042      	lsls	r2, r0, #1
 80013c8:	0fc3      	lsrs	r3, r0, #31
 80013ca:	0a49      	lsrs	r1, r1, #9
 80013cc:	2000      	movs	r0, #0
 80013ce:	0e12      	lsrs	r2, r2, #24
 80013d0:	2a7e      	cmp	r2, #126	; 0x7e
 80013d2:	dd03      	ble.n	80013dc <__aeabi_f2iz+0x18>
 80013d4:	2a9d      	cmp	r2, #157	; 0x9d
 80013d6:	dd02      	ble.n	80013de <__aeabi_f2iz+0x1a>
 80013d8:	4a09      	ldr	r2, [pc, #36]	; (8001400 <__aeabi_f2iz+0x3c>)
 80013da:	1898      	adds	r0, r3, r2
 80013dc:	4770      	bx	lr
 80013de:	2080      	movs	r0, #128	; 0x80
 80013e0:	0400      	lsls	r0, r0, #16
 80013e2:	4301      	orrs	r1, r0
 80013e4:	2a95      	cmp	r2, #149	; 0x95
 80013e6:	dc07      	bgt.n	80013f8 <__aeabi_f2iz+0x34>
 80013e8:	2096      	movs	r0, #150	; 0x96
 80013ea:	1a82      	subs	r2, r0, r2
 80013ec:	40d1      	lsrs	r1, r2
 80013ee:	4248      	negs	r0, r1
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f3      	bne.n	80013dc <__aeabi_f2iz+0x18>
 80013f4:	0008      	movs	r0, r1
 80013f6:	e7f1      	b.n	80013dc <__aeabi_f2iz+0x18>
 80013f8:	3a96      	subs	r2, #150	; 0x96
 80013fa:	4091      	lsls	r1, r2
 80013fc:	e7f7      	b.n	80013ee <__aeabi_f2iz+0x2a>
 80013fe:	46c0      	nop			; (mov r8, r8)
 8001400:	7fffffff 	.word	0x7fffffff

08001404 <__aeabi_i2f>:
 8001404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001406:	2800      	cmp	r0, #0
 8001408:	d013      	beq.n	8001432 <__aeabi_i2f+0x2e>
 800140a:	17c3      	asrs	r3, r0, #31
 800140c:	18c6      	adds	r6, r0, r3
 800140e:	405e      	eors	r6, r3
 8001410:	0fc4      	lsrs	r4, r0, #31
 8001412:	0030      	movs	r0, r6
 8001414:	f001 fe72 	bl	80030fc <__clzsi2>
 8001418:	239e      	movs	r3, #158	; 0x9e
 800141a:	0005      	movs	r5, r0
 800141c:	1a1b      	subs	r3, r3, r0
 800141e:	2b96      	cmp	r3, #150	; 0x96
 8001420:	dc0f      	bgt.n	8001442 <__aeabi_i2f+0x3e>
 8001422:	2808      	cmp	r0, #8
 8001424:	dd01      	ble.n	800142a <__aeabi_i2f+0x26>
 8001426:	3d08      	subs	r5, #8
 8001428:	40ae      	lsls	r6, r5
 800142a:	0276      	lsls	r6, r6, #9
 800142c:	0a76      	lsrs	r6, r6, #9
 800142e:	b2d8      	uxtb	r0, r3
 8001430:	e002      	b.n	8001438 <__aeabi_i2f+0x34>
 8001432:	2400      	movs	r4, #0
 8001434:	2000      	movs	r0, #0
 8001436:	2600      	movs	r6, #0
 8001438:	05c0      	lsls	r0, r0, #23
 800143a:	4330      	orrs	r0, r6
 800143c:	07e4      	lsls	r4, r4, #31
 800143e:	4320      	orrs	r0, r4
 8001440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001442:	2b99      	cmp	r3, #153	; 0x99
 8001444:	dd0c      	ble.n	8001460 <__aeabi_i2f+0x5c>
 8001446:	2205      	movs	r2, #5
 8001448:	0031      	movs	r1, r6
 800144a:	1a12      	subs	r2, r2, r0
 800144c:	40d1      	lsrs	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	0001      	movs	r1, r0
 8001452:	0030      	movs	r0, r6
 8001454:	311b      	adds	r1, #27
 8001456:	4088      	lsls	r0, r1
 8001458:	1e41      	subs	r1, r0, #1
 800145a:	4188      	sbcs	r0, r1
 800145c:	4302      	orrs	r2, r0
 800145e:	0016      	movs	r6, r2
 8001460:	2d05      	cmp	r5, #5
 8001462:	dc12      	bgt.n	800148a <__aeabi_i2f+0x86>
 8001464:	0031      	movs	r1, r6
 8001466:	4f0d      	ldr	r7, [pc, #52]	; (800149c <__aeabi_i2f+0x98>)
 8001468:	4039      	ands	r1, r7
 800146a:	0772      	lsls	r2, r6, #29
 800146c:	d009      	beq.n	8001482 <__aeabi_i2f+0x7e>
 800146e:	200f      	movs	r0, #15
 8001470:	4030      	ands	r0, r6
 8001472:	2804      	cmp	r0, #4
 8001474:	d005      	beq.n	8001482 <__aeabi_i2f+0x7e>
 8001476:	3104      	adds	r1, #4
 8001478:	014a      	lsls	r2, r1, #5
 800147a:	d502      	bpl.n	8001482 <__aeabi_i2f+0x7e>
 800147c:	239f      	movs	r3, #159	; 0x9f
 800147e:	4039      	ands	r1, r7
 8001480:	1b5b      	subs	r3, r3, r5
 8001482:	0189      	lsls	r1, r1, #6
 8001484:	0a4e      	lsrs	r6, r1, #9
 8001486:	b2d8      	uxtb	r0, r3
 8001488:	e7d6      	b.n	8001438 <__aeabi_i2f+0x34>
 800148a:	1f6a      	subs	r2, r5, #5
 800148c:	4096      	lsls	r6, r2
 800148e:	0031      	movs	r1, r6
 8001490:	4f02      	ldr	r7, [pc, #8]	; (800149c <__aeabi_i2f+0x98>)
 8001492:	4039      	ands	r1, r7
 8001494:	0772      	lsls	r2, r6, #29
 8001496:	d0f4      	beq.n	8001482 <__aeabi_i2f+0x7e>
 8001498:	e7e9      	b.n	800146e <__aeabi_i2f+0x6a>
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	fbffffff 	.word	0xfbffffff

080014a0 <__aeabi_dadd>:
 80014a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014a2:	464f      	mov	r7, r9
 80014a4:	4646      	mov	r6, r8
 80014a6:	46d6      	mov	lr, sl
 80014a8:	000d      	movs	r5, r1
 80014aa:	0004      	movs	r4, r0
 80014ac:	b5c0      	push	{r6, r7, lr}
 80014ae:	001f      	movs	r7, r3
 80014b0:	0011      	movs	r1, r2
 80014b2:	0328      	lsls	r0, r5, #12
 80014b4:	0f62      	lsrs	r2, r4, #29
 80014b6:	0a40      	lsrs	r0, r0, #9
 80014b8:	4310      	orrs	r0, r2
 80014ba:	007a      	lsls	r2, r7, #1
 80014bc:	0d52      	lsrs	r2, r2, #21
 80014be:	00e3      	lsls	r3, r4, #3
 80014c0:	033c      	lsls	r4, r7, #12
 80014c2:	4691      	mov	r9, r2
 80014c4:	0a64      	lsrs	r4, r4, #9
 80014c6:	0ffa      	lsrs	r2, r7, #31
 80014c8:	0f4f      	lsrs	r7, r1, #29
 80014ca:	006e      	lsls	r6, r5, #1
 80014cc:	4327      	orrs	r7, r4
 80014ce:	4692      	mov	sl, r2
 80014d0:	46b8      	mov	r8, r7
 80014d2:	0d76      	lsrs	r6, r6, #21
 80014d4:	0fed      	lsrs	r5, r5, #31
 80014d6:	00c9      	lsls	r1, r1, #3
 80014d8:	4295      	cmp	r5, r2
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x3e>
 80014dc:	e099      	b.n	8001612 <__aeabi_dadd+0x172>
 80014de:	464c      	mov	r4, r9
 80014e0:	1b34      	subs	r4, r6, r4
 80014e2:	46a4      	mov	ip, r4
 80014e4:	2c00      	cmp	r4, #0
 80014e6:	dc00      	bgt.n	80014ea <__aeabi_dadd+0x4a>
 80014e8:	e07c      	b.n	80015e4 <__aeabi_dadd+0x144>
 80014ea:	464a      	mov	r2, r9
 80014ec:	2a00      	cmp	r2, #0
 80014ee:	d100      	bne.n	80014f2 <__aeabi_dadd+0x52>
 80014f0:	e0b8      	b.n	8001664 <__aeabi_dadd+0x1c4>
 80014f2:	4ac5      	ldr	r2, [pc, #788]	; (8001808 <__aeabi_dadd+0x368>)
 80014f4:	4296      	cmp	r6, r2
 80014f6:	d100      	bne.n	80014fa <__aeabi_dadd+0x5a>
 80014f8:	e11c      	b.n	8001734 <__aeabi_dadd+0x294>
 80014fa:	2280      	movs	r2, #128	; 0x80
 80014fc:	003c      	movs	r4, r7
 80014fe:	0412      	lsls	r2, r2, #16
 8001500:	4314      	orrs	r4, r2
 8001502:	46a0      	mov	r8, r4
 8001504:	4662      	mov	r2, ip
 8001506:	2a38      	cmp	r2, #56	; 0x38
 8001508:	dd00      	ble.n	800150c <__aeabi_dadd+0x6c>
 800150a:	e161      	b.n	80017d0 <__aeabi_dadd+0x330>
 800150c:	2a1f      	cmp	r2, #31
 800150e:	dd00      	ble.n	8001512 <__aeabi_dadd+0x72>
 8001510:	e1cc      	b.n	80018ac <__aeabi_dadd+0x40c>
 8001512:	4664      	mov	r4, ip
 8001514:	2220      	movs	r2, #32
 8001516:	1b12      	subs	r2, r2, r4
 8001518:	4644      	mov	r4, r8
 800151a:	4094      	lsls	r4, r2
 800151c:	000f      	movs	r7, r1
 800151e:	46a1      	mov	r9, r4
 8001520:	4664      	mov	r4, ip
 8001522:	4091      	lsls	r1, r2
 8001524:	40e7      	lsrs	r7, r4
 8001526:	464c      	mov	r4, r9
 8001528:	1e4a      	subs	r2, r1, #1
 800152a:	4191      	sbcs	r1, r2
 800152c:	433c      	orrs	r4, r7
 800152e:	4642      	mov	r2, r8
 8001530:	4321      	orrs	r1, r4
 8001532:	4664      	mov	r4, ip
 8001534:	40e2      	lsrs	r2, r4
 8001536:	1a80      	subs	r0, r0, r2
 8001538:	1a5c      	subs	r4, r3, r1
 800153a:	42a3      	cmp	r3, r4
 800153c:	419b      	sbcs	r3, r3
 800153e:	425f      	negs	r7, r3
 8001540:	1bc7      	subs	r7, r0, r7
 8001542:	023b      	lsls	r3, r7, #8
 8001544:	d400      	bmi.n	8001548 <__aeabi_dadd+0xa8>
 8001546:	e0d0      	b.n	80016ea <__aeabi_dadd+0x24a>
 8001548:	027f      	lsls	r7, r7, #9
 800154a:	0a7f      	lsrs	r7, r7, #9
 800154c:	2f00      	cmp	r7, #0
 800154e:	d100      	bne.n	8001552 <__aeabi_dadd+0xb2>
 8001550:	e0ff      	b.n	8001752 <__aeabi_dadd+0x2b2>
 8001552:	0038      	movs	r0, r7
 8001554:	f001 fdd2 	bl	80030fc <__clzsi2>
 8001558:	0001      	movs	r1, r0
 800155a:	3908      	subs	r1, #8
 800155c:	2320      	movs	r3, #32
 800155e:	0022      	movs	r2, r4
 8001560:	1a5b      	subs	r3, r3, r1
 8001562:	408f      	lsls	r7, r1
 8001564:	40da      	lsrs	r2, r3
 8001566:	408c      	lsls	r4, r1
 8001568:	4317      	orrs	r7, r2
 800156a:	42b1      	cmp	r1, r6
 800156c:	da00      	bge.n	8001570 <__aeabi_dadd+0xd0>
 800156e:	e0ff      	b.n	8001770 <__aeabi_dadd+0x2d0>
 8001570:	1b89      	subs	r1, r1, r6
 8001572:	1c4b      	adds	r3, r1, #1
 8001574:	2b1f      	cmp	r3, #31
 8001576:	dd00      	ble.n	800157a <__aeabi_dadd+0xda>
 8001578:	e0a8      	b.n	80016cc <__aeabi_dadd+0x22c>
 800157a:	2220      	movs	r2, #32
 800157c:	0039      	movs	r1, r7
 800157e:	1ad2      	subs	r2, r2, r3
 8001580:	0020      	movs	r0, r4
 8001582:	4094      	lsls	r4, r2
 8001584:	4091      	lsls	r1, r2
 8001586:	40d8      	lsrs	r0, r3
 8001588:	1e62      	subs	r2, r4, #1
 800158a:	4194      	sbcs	r4, r2
 800158c:	40df      	lsrs	r7, r3
 800158e:	2600      	movs	r6, #0
 8001590:	4301      	orrs	r1, r0
 8001592:	430c      	orrs	r4, r1
 8001594:	0763      	lsls	r3, r4, #29
 8001596:	d009      	beq.n	80015ac <__aeabi_dadd+0x10c>
 8001598:	230f      	movs	r3, #15
 800159a:	4023      	ands	r3, r4
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <__aeabi_dadd+0x10c>
 80015a0:	1d23      	adds	r3, r4, #4
 80015a2:	42a3      	cmp	r3, r4
 80015a4:	41a4      	sbcs	r4, r4
 80015a6:	4264      	negs	r4, r4
 80015a8:	193f      	adds	r7, r7, r4
 80015aa:	001c      	movs	r4, r3
 80015ac:	023b      	lsls	r3, r7, #8
 80015ae:	d400      	bmi.n	80015b2 <__aeabi_dadd+0x112>
 80015b0:	e09e      	b.n	80016f0 <__aeabi_dadd+0x250>
 80015b2:	4b95      	ldr	r3, [pc, #596]	; (8001808 <__aeabi_dadd+0x368>)
 80015b4:	3601      	adds	r6, #1
 80015b6:	429e      	cmp	r6, r3
 80015b8:	d100      	bne.n	80015bc <__aeabi_dadd+0x11c>
 80015ba:	e0b7      	b.n	800172c <__aeabi_dadd+0x28c>
 80015bc:	4a93      	ldr	r2, [pc, #588]	; (800180c <__aeabi_dadd+0x36c>)
 80015be:	08e4      	lsrs	r4, r4, #3
 80015c0:	4017      	ands	r7, r2
 80015c2:	077b      	lsls	r3, r7, #29
 80015c4:	0571      	lsls	r1, r6, #21
 80015c6:	027f      	lsls	r7, r7, #9
 80015c8:	4323      	orrs	r3, r4
 80015ca:	0b3f      	lsrs	r7, r7, #12
 80015cc:	0d4a      	lsrs	r2, r1, #21
 80015ce:	0512      	lsls	r2, r2, #20
 80015d0:	433a      	orrs	r2, r7
 80015d2:	07ed      	lsls	r5, r5, #31
 80015d4:	432a      	orrs	r2, r5
 80015d6:	0018      	movs	r0, r3
 80015d8:	0011      	movs	r1, r2
 80015da:	bce0      	pop	{r5, r6, r7}
 80015dc:	46ba      	mov	sl, r7
 80015de:	46b1      	mov	r9, r6
 80015e0:	46a8      	mov	r8, r5
 80015e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015e4:	2c00      	cmp	r4, #0
 80015e6:	d04b      	beq.n	8001680 <__aeabi_dadd+0x1e0>
 80015e8:	464c      	mov	r4, r9
 80015ea:	1ba4      	subs	r4, r4, r6
 80015ec:	46a4      	mov	ip, r4
 80015ee:	2e00      	cmp	r6, #0
 80015f0:	d000      	beq.n	80015f4 <__aeabi_dadd+0x154>
 80015f2:	e123      	b.n	800183c <__aeabi_dadd+0x39c>
 80015f4:	0004      	movs	r4, r0
 80015f6:	431c      	orrs	r4, r3
 80015f8:	d100      	bne.n	80015fc <__aeabi_dadd+0x15c>
 80015fa:	e1af      	b.n	800195c <__aeabi_dadd+0x4bc>
 80015fc:	4662      	mov	r2, ip
 80015fe:	1e54      	subs	r4, r2, #1
 8001600:	2a01      	cmp	r2, #1
 8001602:	d100      	bne.n	8001606 <__aeabi_dadd+0x166>
 8001604:	e215      	b.n	8001a32 <__aeabi_dadd+0x592>
 8001606:	4d80      	ldr	r5, [pc, #512]	; (8001808 <__aeabi_dadd+0x368>)
 8001608:	45ac      	cmp	ip, r5
 800160a:	d100      	bne.n	800160e <__aeabi_dadd+0x16e>
 800160c:	e1c8      	b.n	80019a0 <__aeabi_dadd+0x500>
 800160e:	46a4      	mov	ip, r4
 8001610:	e11b      	b.n	800184a <__aeabi_dadd+0x3aa>
 8001612:	464a      	mov	r2, r9
 8001614:	1ab2      	subs	r2, r6, r2
 8001616:	4694      	mov	ip, r2
 8001618:	2a00      	cmp	r2, #0
 800161a:	dc00      	bgt.n	800161e <__aeabi_dadd+0x17e>
 800161c:	e0ac      	b.n	8001778 <__aeabi_dadd+0x2d8>
 800161e:	464a      	mov	r2, r9
 8001620:	2a00      	cmp	r2, #0
 8001622:	d043      	beq.n	80016ac <__aeabi_dadd+0x20c>
 8001624:	4a78      	ldr	r2, [pc, #480]	; (8001808 <__aeabi_dadd+0x368>)
 8001626:	4296      	cmp	r6, r2
 8001628:	d100      	bne.n	800162c <__aeabi_dadd+0x18c>
 800162a:	e1af      	b.n	800198c <__aeabi_dadd+0x4ec>
 800162c:	2280      	movs	r2, #128	; 0x80
 800162e:	003c      	movs	r4, r7
 8001630:	0412      	lsls	r2, r2, #16
 8001632:	4314      	orrs	r4, r2
 8001634:	46a0      	mov	r8, r4
 8001636:	4662      	mov	r2, ip
 8001638:	2a38      	cmp	r2, #56	; 0x38
 800163a:	dc67      	bgt.n	800170c <__aeabi_dadd+0x26c>
 800163c:	2a1f      	cmp	r2, #31
 800163e:	dc00      	bgt.n	8001642 <__aeabi_dadd+0x1a2>
 8001640:	e15f      	b.n	8001902 <__aeabi_dadd+0x462>
 8001642:	4647      	mov	r7, r8
 8001644:	3a20      	subs	r2, #32
 8001646:	40d7      	lsrs	r7, r2
 8001648:	4662      	mov	r2, ip
 800164a:	2a20      	cmp	r2, #32
 800164c:	d005      	beq.n	800165a <__aeabi_dadd+0x1ba>
 800164e:	4664      	mov	r4, ip
 8001650:	2240      	movs	r2, #64	; 0x40
 8001652:	1b12      	subs	r2, r2, r4
 8001654:	4644      	mov	r4, r8
 8001656:	4094      	lsls	r4, r2
 8001658:	4321      	orrs	r1, r4
 800165a:	1e4a      	subs	r2, r1, #1
 800165c:	4191      	sbcs	r1, r2
 800165e:	000c      	movs	r4, r1
 8001660:	433c      	orrs	r4, r7
 8001662:	e057      	b.n	8001714 <__aeabi_dadd+0x274>
 8001664:	003a      	movs	r2, r7
 8001666:	430a      	orrs	r2, r1
 8001668:	d100      	bne.n	800166c <__aeabi_dadd+0x1cc>
 800166a:	e105      	b.n	8001878 <__aeabi_dadd+0x3d8>
 800166c:	0022      	movs	r2, r4
 800166e:	3a01      	subs	r2, #1
 8001670:	2c01      	cmp	r4, #1
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x1d6>
 8001674:	e182      	b.n	800197c <__aeabi_dadd+0x4dc>
 8001676:	4c64      	ldr	r4, [pc, #400]	; (8001808 <__aeabi_dadd+0x368>)
 8001678:	45a4      	cmp	ip, r4
 800167a:	d05b      	beq.n	8001734 <__aeabi_dadd+0x294>
 800167c:	4694      	mov	ip, r2
 800167e:	e741      	b.n	8001504 <__aeabi_dadd+0x64>
 8001680:	4c63      	ldr	r4, [pc, #396]	; (8001810 <__aeabi_dadd+0x370>)
 8001682:	1c77      	adds	r7, r6, #1
 8001684:	4227      	tst	r7, r4
 8001686:	d000      	beq.n	800168a <__aeabi_dadd+0x1ea>
 8001688:	e0c4      	b.n	8001814 <__aeabi_dadd+0x374>
 800168a:	0004      	movs	r4, r0
 800168c:	431c      	orrs	r4, r3
 800168e:	2e00      	cmp	r6, #0
 8001690:	d000      	beq.n	8001694 <__aeabi_dadd+0x1f4>
 8001692:	e169      	b.n	8001968 <__aeabi_dadd+0x4c8>
 8001694:	2c00      	cmp	r4, #0
 8001696:	d100      	bne.n	800169a <__aeabi_dadd+0x1fa>
 8001698:	e1bf      	b.n	8001a1a <__aeabi_dadd+0x57a>
 800169a:	4644      	mov	r4, r8
 800169c:	430c      	orrs	r4, r1
 800169e:	d000      	beq.n	80016a2 <__aeabi_dadd+0x202>
 80016a0:	e1d0      	b.n	8001a44 <__aeabi_dadd+0x5a4>
 80016a2:	0742      	lsls	r2, r0, #29
 80016a4:	08db      	lsrs	r3, r3, #3
 80016a6:	4313      	orrs	r3, r2
 80016a8:	08c0      	lsrs	r0, r0, #3
 80016aa:	e029      	b.n	8001700 <__aeabi_dadd+0x260>
 80016ac:	003a      	movs	r2, r7
 80016ae:	430a      	orrs	r2, r1
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dadd+0x214>
 80016b2:	e170      	b.n	8001996 <__aeabi_dadd+0x4f6>
 80016b4:	4662      	mov	r2, ip
 80016b6:	4664      	mov	r4, ip
 80016b8:	3a01      	subs	r2, #1
 80016ba:	2c01      	cmp	r4, #1
 80016bc:	d100      	bne.n	80016c0 <__aeabi_dadd+0x220>
 80016be:	e0e0      	b.n	8001882 <__aeabi_dadd+0x3e2>
 80016c0:	4c51      	ldr	r4, [pc, #324]	; (8001808 <__aeabi_dadd+0x368>)
 80016c2:	45a4      	cmp	ip, r4
 80016c4:	d100      	bne.n	80016c8 <__aeabi_dadd+0x228>
 80016c6:	e161      	b.n	800198c <__aeabi_dadd+0x4ec>
 80016c8:	4694      	mov	ip, r2
 80016ca:	e7b4      	b.n	8001636 <__aeabi_dadd+0x196>
 80016cc:	003a      	movs	r2, r7
 80016ce:	391f      	subs	r1, #31
 80016d0:	40ca      	lsrs	r2, r1
 80016d2:	0011      	movs	r1, r2
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d003      	beq.n	80016e0 <__aeabi_dadd+0x240>
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	409f      	lsls	r7, r3
 80016de:	433c      	orrs	r4, r7
 80016e0:	1e63      	subs	r3, r4, #1
 80016e2:	419c      	sbcs	r4, r3
 80016e4:	2700      	movs	r7, #0
 80016e6:	2600      	movs	r6, #0
 80016e8:	430c      	orrs	r4, r1
 80016ea:	0763      	lsls	r3, r4, #29
 80016ec:	d000      	beq.n	80016f0 <__aeabi_dadd+0x250>
 80016ee:	e753      	b.n	8001598 <__aeabi_dadd+0xf8>
 80016f0:	46b4      	mov	ip, r6
 80016f2:	08e4      	lsrs	r4, r4, #3
 80016f4:	077b      	lsls	r3, r7, #29
 80016f6:	4323      	orrs	r3, r4
 80016f8:	08f8      	lsrs	r0, r7, #3
 80016fa:	4a43      	ldr	r2, [pc, #268]	; (8001808 <__aeabi_dadd+0x368>)
 80016fc:	4594      	cmp	ip, r2
 80016fe:	d01d      	beq.n	800173c <__aeabi_dadd+0x29c>
 8001700:	4662      	mov	r2, ip
 8001702:	0307      	lsls	r7, r0, #12
 8001704:	0552      	lsls	r2, r2, #21
 8001706:	0b3f      	lsrs	r7, r7, #12
 8001708:	0d52      	lsrs	r2, r2, #21
 800170a:	e760      	b.n	80015ce <__aeabi_dadd+0x12e>
 800170c:	4644      	mov	r4, r8
 800170e:	430c      	orrs	r4, r1
 8001710:	1e62      	subs	r2, r4, #1
 8001712:	4194      	sbcs	r4, r2
 8001714:	18e4      	adds	r4, r4, r3
 8001716:	429c      	cmp	r4, r3
 8001718:	419b      	sbcs	r3, r3
 800171a:	425f      	negs	r7, r3
 800171c:	183f      	adds	r7, r7, r0
 800171e:	023b      	lsls	r3, r7, #8
 8001720:	d5e3      	bpl.n	80016ea <__aeabi_dadd+0x24a>
 8001722:	4b39      	ldr	r3, [pc, #228]	; (8001808 <__aeabi_dadd+0x368>)
 8001724:	3601      	adds	r6, #1
 8001726:	429e      	cmp	r6, r3
 8001728:	d000      	beq.n	800172c <__aeabi_dadd+0x28c>
 800172a:	e0b5      	b.n	8001898 <__aeabi_dadd+0x3f8>
 800172c:	0032      	movs	r2, r6
 800172e:	2700      	movs	r7, #0
 8001730:	2300      	movs	r3, #0
 8001732:	e74c      	b.n	80015ce <__aeabi_dadd+0x12e>
 8001734:	0742      	lsls	r2, r0, #29
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	4313      	orrs	r3, r2
 800173a:	08c0      	lsrs	r0, r0, #3
 800173c:	001a      	movs	r2, r3
 800173e:	4302      	orrs	r2, r0
 8001740:	d100      	bne.n	8001744 <__aeabi_dadd+0x2a4>
 8001742:	e1e1      	b.n	8001b08 <__aeabi_dadd+0x668>
 8001744:	2780      	movs	r7, #128	; 0x80
 8001746:	033f      	lsls	r7, r7, #12
 8001748:	4307      	orrs	r7, r0
 800174a:	033f      	lsls	r7, r7, #12
 800174c:	4a2e      	ldr	r2, [pc, #184]	; (8001808 <__aeabi_dadd+0x368>)
 800174e:	0b3f      	lsrs	r7, r7, #12
 8001750:	e73d      	b.n	80015ce <__aeabi_dadd+0x12e>
 8001752:	0020      	movs	r0, r4
 8001754:	f001 fcd2 	bl	80030fc <__clzsi2>
 8001758:	0001      	movs	r1, r0
 800175a:	3118      	adds	r1, #24
 800175c:	291f      	cmp	r1, #31
 800175e:	dc00      	bgt.n	8001762 <__aeabi_dadd+0x2c2>
 8001760:	e6fc      	b.n	800155c <__aeabi_dadd+0xbc>
 8001762:	3808      	subs	r0, #8
 8001764:	4084      	lsls	r4, r0
 8001766:	0027      	movs	r7, r4
 8001768:	2400      	movs	r4, #0
 800176a:	42b1      	cmp	r1, r6
 800176c:	db00      	blt.n	8001770 <__aeabi_dadd+0x2d0>
 800176e:	e6ff      	b.n	8001570 <__aeabi_dadd+0xd0>
 8001770:	4a26      	ldr	r2, [pc, #152]	; (800180c <__aeabi_dadd+0x36c>)
 8001772:	1a76      	subs	r6, r6, r1
 8001774:	4017      	ands	r7, r2
 8001776:	e70d      	b.n	8001594 <__aeabi_dadd+0xf4>
 8001778:	2a00      	cmp	r2, #0
 800177a:	d02f      	beq.n	80017dc <__aeabi_dadd+0x33c>
 800177c:	464a      	mov	r2, r9
 800177e:	1b92      	subs	r2, r2, r6
 8001780:	4694      	mov	ip, r2
 8001782:	2e00      	cmp	r6, #0
 8001784:	d100      	bne.n	8001788 <__aeabi_dadd+0x2e8>
 8001786:	e0ad      	b.n	80018e4 <__aeabi_dadd+0x444>
 8001788:	4a1f      	ldr	r2, [pc, #124]	; (8001808 <__aeabi_dadd+0x368>)
 800178a:	4591      	cmp	r9, r2
 800178c:	d100      	bne.n	8001790 <__aeabi_dadd+0x2f0>
 800178e:	e10f      	b.n	80019b0 <__aeabi_dadd+0x510>
 8001790:	2280      	movs	r2, #128	; 0x80
 8001792:	0412      	lsls	r2, r2, #16
 8001794:	4310      	orrs	r0, r2
 8001796:	4662      	mov	r2, ip
 8001798:	2a38      	cmp	r2, #56	; 0x38
 800179a:	dd00      	ble.n	800179e <__aeabi_dadd+0x2fe>
 800179c:	e10f      	b.n	80019be <__aeabi_dadd+0x51e>
 800179e:	2a1f      	cmp	r2, #31
 80017a0:	dd00      	ble.n	80017a4 <__aeabi_dadd+0x304>
 80017a2:	e180      	b.n	8001aa6 <__aeabi_dadd+0x606>
 80017a4:	4664      	mov	r4, ip
 80017a6:	2220      	movs	r2, #32
 80017a8:	001e      	movs	r6, r3
 80017aa:	1b12      	subs	r2, r2, r4
 80017ac:	4667      	mov	r7, ip
 80017ae:	0004      	movs	r4, r0
 80017b0:	4093      	lsls	r3, r2
 80017b2:	4094      	lsls	r4, r2
 80017b4:	40fe      	lsrs	r6, r7
 80017b6:	1e5a      	subs	r2, r3, #1
 80017b8:	4193      	sbcs	r3, r2
 80017ba:	40f8      	lsrs	r0, r7
 80017bc:	4334      	orrs	r4, r6
 80017be:	431c      	orrs	r4, r3
 80017c0:	4480      	add	r8, r0
 80017c2:	1864      	adds	r4, r4, r1
 80017c4:	428c      	cmp	r4, r1
 80017c6:	41bf      	sbcs	r7, r7
 80017c8:	427f      	negs	r7, r7
 80017ca:	464e      	mov	r6, r9
 80017cc:	4447      	add	r7, r8
 80017ce:	e7a6      	b.n	800171e <__aeabi_dadd+0x27e>
 80017d0:	4642      	mov	r2, r8
 80017d2:	430a      	orrs	r2, r1
 80017d4:	0011      	movs	r1, r2
 80017d6:	1e4a      	subs	r2, r1, #1
 80017d8:	4191      	sbcs	r1, r2
 80017da:	e6ad      	b.n	8001538 <__aeabi_dadd+0x98>
 80017dc:	4c0c      	ldr	r4, [pc, #48]	; (8001810 <__aeabi_dadd+0x370>)
 80017de:	1c72      	adds	r2, r6, #1
 80017e0:	4222      	tst	r2, r4
 80017e2:	d000      	beq.n	80017e6 <__aeabi_dadd+0x346>
 80017e4:	e0a1      	b.n	800192a <__aeabi_dadd+0x48a>
 80017e6:	0002      	movs	r2, r0
 80017e8:	431a      	orrs	r2, r3
 80017ea:	2e00      	cmp	r6, #0
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dadd+0x350>
 80017ee:	e0fa      	b.n	80019e6 <__aeabi_dadd+0x546>
 80017f0:	2a00      	cmp	r2, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x356>
 80017f4:	e145      	b.n	8001a82 <__aeabi_dadd+0x5e2>
 80017f6:	003a      	movs	r2, r7
 80017f8:	430a      	orrs	r2, r1
 80017fa:	d000      	beq.n	80017fe <__aeabi_dadd+0x35e>
 80017fc:	e146      	b.n	8001a8c <__aeabi_dadd+0x5ec>
 80017fe:	0742      	lsls	r2, r0, #29
 8001800:	08db      	lsrs	r3, r3, #3
 8001802:	4313      	orrs	r3, r2
 8001804:	08c0      	lsrs	r0, r0, #3
 8001806:	e77b      	b.n	8001700 <__aeabi_dadd+0x260>
 8001808:	000007ff 	.word	0x000007ff
 800180c:	ff7fffff 	.word	0xff7fffff
 8001810:	000007fe 	.word	0x000007fe
 8001814:	4647      	mov	r7, r8
 8001816:	1a5c      	subs	r4, r3, r1
 8001818:	1bc2      	subs	r2, r0, r7
 800181a:	42a3      	cmp	r3, r4
 800181c:	41bf      	sbcs	r7, r7
 800181e:	427f      	negs	r7, r7
 8001820:	46b9      	mov	r9, r7
 8001822:	0017      	movs	r7, r2
 8001824:	464a      	mov	r2, r9
 8001826:	1abf      	subs	r7, r7, r2
 8001828:	023a      	lsls	r2, r7, #8
 800182a:	d500      	bpl.n	800182e <__aeabi_dadd+0x38e>
 800182c:	e08d      	b.n	800194a <__aeabi_dadd+0x4aa>
 800182e:	0023      	movs	r3, r4
 8001830:	433b      	orrs	r3, r7
 8001832:	d000      	beq.n	8001836 <__aeabi_dadd+0x396>
 8001834:	e68a      	b.n	800154c <__aeabi_dadd+0xac>
 8001836:	2000      	movs	r0, #0
 8001838:	2500      	movs	r5, #0
 800183a:	e761      	b.n	8001700 <__aeabi_dadd+0x260>
 800183c:	4cb4      	ldr	r4, [pc, #720]	; (8001b10 <__aeabi_dadd+0x670>)
 800183e:	45a1      	cmp	r9, r4
 8001840:	d100      	bne.n	8001844 <__aeabi_dadd+0x3a4>
 8001842:	e0ad      	b.n	80019a0 <__aeabi_dadd+0x500>
 8001844:	2480      	movs	r4, #128	; 0x80
 8001846:	0424      	lsls	r4, r4, #16
 8001848:	4320      	orrs	r0, r4
 800184a:	4664      	mov	r4, ip
 800184c:	2c38      	cmp	r4, #56	; 0x38
 800184e:	dc3d      	bgt.n	80018cc <__aeabi_dadd+0x42c>
 8001850:	4662      	mov	r2, ip
 8001852:	2c1f      	cmp	r4, #31
 8001854:	dd00      	ble.n	8001858 <__aeabi_dadd+0x3b8>
 8001856:	e0b7      	b.n	80019c8 <__aeabi_dadd+0x528>
 8001858:	2520      	movs	r5, #32
 800185a:	001e      	movs	r6, r3
 800185c:	1b2d      	subs	r5, r5, r4
 800185e:	0004      	movs	r4, r0
 8001860:	40ab      	lsls	r3, r5
 8001862:	40ac      	lsls	r4, r5
 8001864:	40d6      	lsrs	r6, r2
 8001866:	40d0      	lsrs	r0, r2
 8001868:	4642      	mov	r2, r8
 800186a:	1e5d      	subs	r5, r3, #1
 800186c:	41ab      	sbcs	r3, r5
 800186e:	4334      	orrs	r4, r6
 8001870:	1a12      	subs	r2, r2, r0
 8001872:	4690      	mov	r8, r2
 8001874:	4323      	orrs	r3, r4
 8001876:	e02c      	b.n	80018d2 <__aeabi_dadd+0x432>
 8001878:	0742      	lsls	r2, r0, #29
 800187a:	08db      	lsrs	r3, r3, #3
 800187c:	4313      	orrs	r3, r2
 800187e:	08c0      	lsrs	r0, r0, #3
 8001880:	e73b      	b.n	80016fa <__aeabi_dadd+0x25a>
 8001882:	185c      	adds	r4, r3, r1
 8001884:	429c      	cmp	r4, r3
 8001886:	419b      	sbcs	r3, r3
 8001888:	4440      	add	r0, r8
 800188a:	425b      	negs	r3, r3
 800188c:	18c7      	adds	r7, r0, r3
 800188e:	2601      	movs	r6, #1
 8001890:	023b      	lsls	r3, r7, #8
 8001892:	d400      	bmi.n	8001896 <__aeabi_dadd+0x3f6>
 8001894:	e729      	b.n	80016ea <__aeabi_dadd+0x24a>
 8001896:	2602      	movs	r6, #2
 8001898:	4a9e      	ldr	r2, [pc, #632]	; (8001b14 <__aeabi_dadd+0x674>)
 800189a:	0863      	lsrs	r3, r4, #1
 800189c:	4017      	ands	r7, r2
 800189e:	2201      	movs	r2, #1
 80018a0:	4014      	ands	r4, r2
 80018a2:	431c      	orrs	r4, r3
 80018a4:	07fb      	lsls	r3, r7, #31
 80018a6:	431c      	orrs	r4, r3
 80018a8:	087f      	lsrs	r7, r7, #1
 80018aa:	e673      	b.n	8001594 <__aeabi_dadd+0xf4>
 80018ac:	4644      	mov	r4, r8
 80018ae:	3a20      	subs	r2, #32
 80018b0:	40d4      	lsrs	r4, r2
 80018b2:	4662      	mov	r2, ip
 80018b4:	2a20      	cmp	r2, #32
 80018b6:	d005      	beq.n	80018c4 <__aeabi_dadd+0x424>
 80018b8:	4667      	mov	r7, ip
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	1bd2      	subs	r2, r2, r7
 80018be:	4647      	mov	r7, r8
 80018c0:	4097      	lsls	r7, r2
 80018c2:	4339      	orrs	r1, r7
 80018c4:	1e4a      	subs	r2, r1, #1
 80018c6:	4191      	sbcs	r1, r2
 80018c8:	4321      	orrs	r1, r4
 80018ca:	e635      	b.n	8001538 <__aeabi_dadd+0x98>
 80018cc:	4303      	orrs	r3, r0
 80018ce:	1e58      	subs	r0, r3, #1
 80018d0:	4183      	sbcs	r3, r0
 80018d2:	1acc      	subs	r4, r1, r3
 80018d4:	42a1      	cmp	r1, r4
 80018d6:	41bf      	sbcs	r7, r7
 80018d8:	4643      	mov	r3, r8
 80018da:	427f      	negs	r7, r7
 80018dc:	4655      	mov	r5, sl
 80018de:	464e      	mov	r6, r9
 80018e0:	1bdf      	subs	r7, r3, r7
 80018e2:	e62e      	b.n	8001542 <__aeabi_dadd+0xa2>
 80018e4:	0002      	movs	r2, r0
 80018e6:	431a      	orrs	r2, r3
 80018e8:	d100      	bne.n	80018ec <__aeabi_dadd+0x44c>
 80018ea:	e0bd      	b.n	8001a68 <__aeabi_dadd+0x5c8>
 80018ec:	4662      	mov	r2, ip
 80018ee:	4664      	mov	r4, ip
 80018f0:	3a01      	subs	r2, #1
 80018f2:	2c01      	cmp	r4, #1
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dadd+0x458>
 80018f6:	e0e5      	b.n	8001ac4 <__aeabi_dadd+0x624>
 80018f8:	4c85      	ldr	r4, [pc, #532]	; (8001b10 <__aeabi_dadd+0x670>)
 80018fa:	45a4      	cmp	ip, r4
 80018fc:	d058      	beq.n	80019b0 <__aeabi_dadd+0x510>
 80018fe:	4694      	mov	ip, r2
 8001900:	e749      	b.n	8001796 <__aeabi_dadd+0x2f6>
 8001902:	4664      	mov	r4, ip
 8001904:	2220      	movs	r2, #32
 8001906:	1b12      	subs	r2, r2, r4
 8001908:	4644      	mov	r4, r8
 800190a:	4094      	lsls	r4, r2
 800190c:	000f      	movs	r7, r1
 800190e:	46a1      	mov	r9, r4
 8001910:	4664      	mov	r4, ip
 8001912:	4091      	lsls	r1, r2
 8001914:	40e7      	lsrs	r7, r4
 8001916:	464c      	mov	r4, r9
 8001918:	1e4a      	subs	r2, r1, #1
 800191a:	4191      	sbcs	r1, r2
 800191c:	433c      	orrs	r4, r7
 800191e:	4642      	mov	r2, r8
 8001920:	430c      	orrs	r4, r1
 8001922:	4661      	mov	r1, ip
 8001924:	40ca      	lsrs	r2, r1
 8001926:	1880      	adds	r0, r0, r2
 8001928:	e6f4      	b.n	8001714 <__aeabi_dadd+0x274>
 800192a:	4c79      	ldr	r4, [pc, #484]	; (8001b10 <__aeabi_dadd+0x670>)
 800192c:	42a2      	cmp	r2, r4
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x492>
 8001930:	e6fd      	b.n	800172e <__aeabi_dadd+0x28e>
 8001932:	1859      	adds	r1, r3, r1
 8001934:	4299      	cmp	r1, r3
 8001936:	419b      	sbcs	r3, r3
 8001938:	4440      	add	r0, r8
 800193a:	425f      	negs	r7, r3
 800193c:	19c7      	adds	r7, r0, r7
 800193e:	07fc      	lsls	r4, r7, #31
 8001940:	0849      	lsrs	r1, r1, #1
 8001942:	0016      	movs	r6, r2
 8001944:	430c      	orrs	r4, r1
 8001946:	087f      	lsrs	r7, r7, #1
 8001948:	e6cf      	b.n	80016ea <__aeabi_dadd+0x24a>
 800194a:	1acc      	subs	r4, r1, r3
 800194c:	42a1      	cmp	r1, r4
 800194e:	41bf      	sbcs	r7, r7
 8001950:	4643      	mov	r3, r8
 8001952:	427f      	negs	r7, r7
 8001954:	1a18      	subs	r0, r3, r0
 8001956:	4655      	mov	r5, sl
 8001958:	1bc7      	subs	r7, r0, r7
 800195a:	e5f7      	b.n	800154c <__aeabi_dadd+0xac>
 800195c:	08c9      	lsrs	r1, r1, #3
 800195e:	077b      	lsls	r3, r7, #29
 8001960:	4655      	mov	r5, sl
 8001962:	430b      	orrs	r3, r1
 8001964:	08f8      	lsrs	r0, r7, #3
 8001966:	e6c8      	b.n	80016fa <__aeabi_dadd+0x25a>
 8001968:	2c00      	cmp	r4, #0
 800196a:	d000      	beq.n	800196e <__aeabi_dadd+0x4ce>
 800196c:	e081      	b.n	8001a72 <__aeabi_dadd+0x5d2>
 800196e:	4643      	mov	r3, r8
 8001970:	430b      	orrs	r3, r1
 8001972:	d115      	bne.n	80019a0 <__aeabi_dadd+0x500>
 8001974:	2080      	movs	r0, #128	; 0x80
 8001976:	2500      	movs	r5, #0
 8001978:	0300      	lsls	r0, r0, #12
 800197a:	e6e3      	b.n	8001744 <__aeabi_dadd+0x2a4>
 800197c:	1a5c      	subs	r4, r3, r1
 800197e:	42a3      	cmp	r3, r4
 8001980:	419b      	sbcs	r3, r3
 8001982:	1bc7      	subs	r7, r0, r7
 8001984:	425b      	negs	r3, r3
 8001986:	2601      	movs	r6, #1
 8001988:	1aff      	subs	r7, r7, r3
 800198a:	e5da      	b.n	8001542 <__aeabi_dadd+0xa2>
 800198c:	0742      	lsls	r2, r0, #29
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	4313      	orrs	r3, r2
 8001992:	08c0      	lsrs	r0, r0, #3
 8001994:	e6d2      	b.n	800173c <__aeabi_dadd+0x29c>
 8001996:	0742      	lsls	r2, r0, #29
 8001998:	08db      	lsrs	r3, r3, #3
 800199a:	4313      	orrs	r3, r2
 800199c:	08c0      	lsrs	r0, r0, #3
 800199e:	e6ac      	b.n	80016fa <__aeabi_dadd+0x25a>
 80019a0:	4643      	mov	r3, r8
 80019a2:	4642      	mov	r2, r8
 80019a4:	08c9      	lsrs	r1, r1, #3
 80019a6:	075b      	lsls	r3, r3, #29
 80019a8:	4655      	mov	r5, sl
 80019aa:	430b      	orrs	r3, r1
 80019ac:	08d0      	lsrs	r0, r2, #3
 80019ae:	e6c5      	b.n	800173c <__aeabi_dadd+0x29c>
 80019b0:	4643      	mov	r3, r8
 80019b2:	4642      	mov	r2, r8
 80019b4:	075b      	lsls	r3, r3, #29
 80019b6:	08c9      	lsrs	r1, r1, #3
 80019b8:	430b      	orrs	r3, r1
 80019ba:	08d0      	lsrs	r0, r2, #3
 80019bc:	e6be      	b.n	800173c <__aeabi_dadd+0x29c>
 80019be:	4303      	orrs	r3, r0
 80019c0:	001c      	movs	r4, r3
 80019c2:	1e63      	subs	r3, r4, #1
 80019c4:	419c      	sbcs	r4, r3
 80019c6:	e6fc      	b.n	80017c2 <__aeabi_dadd+0x322>
 80019c8:	0002      	movs	r2, r0
 80019ca:	3c20      	subs	r4, #32
 80019cc:	40e2      	lsrs	r2, r4
 80019ce:	0014      	movs	r4, r2
 80019d0:	4662      	mov	r2, ip
 80019d2:	2a20      	cmp	r2, #32
 80019d4:	d003      	beq.n	80019de <__aeabi_dadd+0x53e>
 80019d6:	2540      	movs	r5, #64	; 0x40
 80019d8:	1aad      	subs	r5, r5, r2
 80019da:	40a8      	lsls	r0, r5
 80019dc:	4303      	orrs	r3, r0
 80019de:	1e58      	subs	r0, r3, #1
 80019e0:	4183      	sbcs	r3, r0
 80019e2:	4323      	orrs	r3, r4
 80019e4:	e775      	b.n	80018d2 <__aeabi_dadd+0x432>
 80019e6:	2a00      	cmp	r2, #0
 80019e8:	d0e2      	beq.n	80019b0 <__aeabi_dadd+0x510>
 80019ea:	003a      	movs	r2, r7
 80019ec:	430a      	orrs	r2, r1
 80019ee:	d0cd      	beq.n	800198c <__aeabi_dadd+0x4ec>
 80019f0:	0742      	lsls	r2, r0, #29
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	4313      	orrs	r3, r2
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	08c0      	lsrs	r0, r0, #3
 80019fa:	0312      	lsls	r2, r2, #12
 80019fc:	4210      	tst	r0, r2
 80019fe:	d006      	beq.n	8001a0e <__aeabi_dadd+0x56e>
 8001a00:	08fc      	lsrs	r4, r7, #3
 8001a02:	4214      	tst	r4, r2
 8001a04:	d103      	bne.n	8001a0e <__aeabi_dadd+0x56e>
 8001a06:	0020      	movs	r0, r4
 8001a08:	08cb      	lsrs	r3, r1, #3
 8001a0a:	077a      	lsls	r2, r7, #29
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	0f5a      	lsrs	r2, r3, #29
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	0752      	lsls	r2, r2, #29
 8001a14:	08db      	lsrs	r3, r3, #3
 8001a16:	4313      	orrs	r3, r2
 8001a18:	e690      	b.n	800173c <__aeabi_dadd+0x29c>
 8001a1a:	4643      	mov	r3, r8
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dadd+0x582>
 8001a20:	e709      	b.n	8001836 <__aeabi_dadd+0x396>
 8001a22:	4643      	mov	r3, r8
 8001a24:	4642      	mov	r2, r8
 8001a26:	08c9      	lsrs	r1, r1, #3
 8001a28:	075b      	lsls	r3, r3, #29
 8001a2a:	4655      	mov	r5, sl
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	08d0      	lsrs	r0, r2, #3
 8001a30:	e666      	b.n	8001700 <__aeabi_dadd+0x260>
 8001a32:	1acc      	subs	r4, r1, r3
 8001a34:	42a1      	cmp	r1, r4
 8001a36:	4189      	sbcs	r1, r1
 8001a38:	1a3f      	subs	r7, r7, r0
 8001a3a:	4249      	negs	r1, r1
 8001a3c:	4655      	mov	r5, sl
 8001a3e:	2601      	movs	r6, #1
 8001a40:	1a7f      	subs	r7, r7, r1
 8001a42:	e57e      	b.n	8001542 <__aeabi_dadd+0xa2>
 8001a44:	4642      	mov	r2, r8
 8001a46:	1a5c      	subs	r4, r3, r1
 8001a48:	1a87      	subs	r7, r0, r2
 8001a4a:	42a3      	cmp	r3, r4
 8001a4c:	4192      	sbcs	r2, r2
 8001a4e:	4252      	negs	r2, r2
 8001a50:	1abf      	subs	r7, r7, r2
 8001a52:	023a      	lsls	r2, r7, #8
 8001a54:	d53d      	bpl.n	8001ad2 <__aeabi_dadd+0x632>
 8001a56:	1acc      	subs	r4, r1, r3
 8001a58:	42a1      	cmp	r1, r4
 8001a5a:	4189      	sbcs	r1, r1
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	4249      	negs	r1, r1
 8001a60:	1a1f      	subs	r7, r3, r0
 8001a62:	4655      	mov	r5, sl
 8001a64:	1a7f      	subs	r7, r7, r1
 8001a66:	e595      	b.n	8001594 <__aeabi_dadd+0xf4>
 8001a68:	077b      	lsls	r3, r7, #29
 8001a6a:	08c9      	lsrs	r1, r1, #3
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	08f8      	lsrs	r0, r7, #3
 8001a70:	e643      	b.n	80016fa <__aeabi_dadd+0x25a>
 8001a72:	4644      	mov	r4, r8
 8001a74:	08db      	lsrs	r3, r3, #3
 8001a76:	430c      	orrs	r4, r1
 8001a78:	d130      	bne.n	8001adc <__aeabi_dadd+0x63c>
 8001a7a:	0742      	lsls	r2, r0, #29
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	08c0      	lsrs	r0, r0, #3
 8001a80:	e65c      	b.n	800173c <__aeabi_dadd+0x29c>
 8001a82:	077b      	lsls	r3, r7, #29
 8001a84:	08c9      	lsrs	r1, r1, #3
 8001a86:	430b      	orrs	r3, r1
 8001a88:	08f8      	lsrs	r0, r7, #3
 8001a8a:	e639      	b.n	8001700 <__aeabi_dadd+0x260>
 8001a8c:	185c      	adds	r4, r3, r1
 8001a8e:	429c      	cmp	r4, r3
 8001a90:	419b      	sbcs	r3, r3
 8001a92:	4440      	add	r0, r8
 8001a94:	425b      	negs	r3, r3
 8001a96:	18c7      	adds	r7, r0, r3
 8001a98:	023b      	lsls	r3, r7, #8
 8001a9a:	d400      	bmi.n	8001a9e <__aeabi_dadd+0x5fe>
 8001a9c:	e625      	b.n	80016ea <__aeabi_dadd+0x24a>
 8001a9e:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <__aeabi_dadd+0x674>)
 8001aa0:	2601      	movs	r6, #1
 8001aa2:	401f      	ands	r7, r3
 8001aa4:	e621      	b.n	80016ea <__aeabi_dadd+0x24a>
 8001aa6:	0004      	movs	r4, r0
 8001aa8:	3a20      	subs	r2, #32
 8001aaa:	40d4      	lsrs	r4, r2
 8001aac:	4662      	mov	r2, ip
 8001aae:	2a20      	cmp	r2, #32
 8001ab0:	d004      	beq.n	8001abc <__aeabi_dadd+0x61c>
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	4666      	mov	r6, ip
 8001ab6:	1b92      	subs	r2, r2, r6
 8001ab8:	4090      	lsls	r0, r2
 8001aba:	4303      	orrs	r3, r0
 8001abc:	1e5a      	subs	r2, r3, #1
 8001abe:	4193      	sbcs	r3, r2
 8001ac0:	431c      	orrs	r4, r3
 8001ac2:	e67e      	b.n	80017c2 <__aeabi_dadd+0x322>
 8001ac4:	185c      	adds	r4, r3, r1
 8001ac6:	428c      	cmp	r4, r1
 8001ac8:	4189      	sbcs	r1, r1
 8001aca:	4440      	add	r0, r8
 8001acc:	4249      	negs	r1, r1
 8001ace:	1847      	adds	r7, r0, r1
 8001ad0:	e6dd      	b.n	800188e <__aeabi_dadd+0x3ee>
 8001ad2:	0023      	movs	r3, r4
 8001ad4:	433b      	orrs	r3, r7
 8001ad6:	d100      	bne.n	8001ada <__aeabi_dadd+0x63a>
 8001ad8:	e6ad      	b.n	8001836 <__aeabi_dadd+0x396>
 8001ada:	e606      	b.n	80016ea <__aeabi_dadd+0x24a>
 8001adc:	0744      	lsls	r4, r0, #29
 8001ade:	4323      	orrs	r3, r4
 8001ae0:	2480      	movs	r4, #128	; 0x80
 8001ae2:	08c0      	lsrs	r0, r0, #3
 8001ae4:	0324      	lsls	r4, r4, #12
 8001ae6:	4220      	tst	r0, r4
 8001ae8:	d008      	beq.n	8001afc <__aeabi_dadd+0x65c>
 8001aea:	4642      	mov	r2, r8
 8001aec:	08d6      	lsrs	r6, r2, #3
 8001aee:	4226      	tst	r6, r4
 8001af0:	d104      	bne.n	8001afc <__aeabi_dadd+0x65c>
 8001af2:	4655      	mov	r5, sl
 8001af4:	0030      	movs	r0, r6
 8001af6:	08cb      	lsrs	r3, r1, #3
 8001af8:	0751      	lsls	r1, r2, #29
 8001afa:	430b      	orrs	r3, r1
 8001afc:	0f5a      	lsrs	r2, r3, #29
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	08db      	lsrs	r3, r3, #3
 8001b02:	0752      	lsls	r2, r2, #29
 8001b04:	4313      	orrs	r3, r2
 8001b06:	e619      	b.n	800173c <__aeabi_dadd+0x29c>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	4a01      	ldr	r2, [pc, #4]	; (8001b10 <__aeabi_dadd+0x670>)
 8001b0c:	001f      	movs	r7, r3
 8001b0e:	e55e      	b.n	80015ce <__aeabi_dadd+0x12e>
 8001b10:	000007ff 	.word	0x000007ff
 8001b14:	ff7fffff 	.word	0xff7fffff

08001b18 <__aeabi_ddiv>:
 8001b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b1a:	4657      	mov	r7, sl
 8001b1c:	464e      	mov	r6, r9
 8001b1e:	4645      	mov	r5, r8
 8001b20:	46de      	mov	lr, fp
 8001b22:	b5e0      	push	{r5, r6, r7, lr}
 8001b24:	4681      	mov	r9, r0
 8001b26:	0005      	movs	r5, r0
 8001b28:	030c      	lsls	r4, r1, #12
 8001b2a:	0048      	lsls	r0, r1, #1
 8001b2c:	4692      	mov	sl, r2
 8001b2e:	001f      	movs	r7, r3
 8001b30:	b085      	sub	sp, #20
 8001b32:	0b24      	lsrs	r4, r4, #12
 8001b34:	0d40      	lsrs	r0, r0, #21
 8001b36:	0fce      	lsrs	r6, r1, #31
 8001b38:	2800      	cmp	r0, #0
 8001b3a:	d100      	bne.n	8001b3e <__aeabi_ddiv+0x26>
 8001b3c:	e156      	b.n	8001dec <__aeabi_ddiv+0x2d4>
 8001b3e:	4bd4      	ldr	r3, [pc, #848]	; (8001e90 <__aeabi_ddiv+0x378>)
 8001b40:	4298      	cmp	r0, r3
 8001b42:	d100      	bne.n	8001b46 <__aeabi_ddiv+0x2e>
 8001b44:	e172      	b.n	8001e2c <__aeabi_ddiv+0x314>
 8001b46:	0f6b      	lsrs	r3, r5, #29
 8001b48:	00e4      	lsls	r4, r4, #3
 8001b4a:	431c      	orrs	r4, r3
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	041b      	lsls	r3, r3, #16
 8001b50:	4323      	orrs	r3, r4
 8001b52:	4698      	mov	r8, r3
 8001b54:	4bcf      	ldr	r3, [pc, #828]	; (8001e94 <__aeabi_ddiv+0x37c>)
 8001b56:	00ed      	lsls	r5, r5, #3
 8001b58:	469b      	mov	fp, r3
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4699      	mov	r9, r3
 8001b5e:	4483      	add	fp, r0
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	033c      	lsls	r4, r7, #12
 8001b64:	007b      	lsls	r3, r7, #1
 8001b66:	4650      	mov	r0, sl
 8001b68:	0b24      	lsrs	r4, r4, #12
 8001b6a:	0d5b      	lsrs	r3, r3, #21
 8001b6c:	0fff      	lsrs	r7, r7, #31
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_ddiv+0x5c>
 8001b72:	e11f      	b.n	8001db4 <__aeabi_ddiv+0x29c>
 8001b74:	4ac6      	ldr	r2, [pc, #792]	; (8001e90 <__aeabi_ddiv+0x378>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d100      	bne.n	8001b7c <__aeabi_ddiv+0x64>
 8001b7a:	e162      	b.n	8001e42 <__aeabi_ddiv+0x32a>
 8001b7c:	49c5      	ldr	r1, [pc, #788]	; (8001e94 <__aeabi_ddiv+0x37c>)
 8001b7e:	0f42      	lsrs	r2, r0, #29
 8001b80:	468c      	mov	ip, r1
 8001b82:	00e4      	lsls	r4, r4, #3
 8001b84:	4659      	mov	r1, fp
 8001b86:	4314      	orrs	r4, r2
 8001b88:	2280      	movs	r2, #128	; 0x80
 8001b8a:	4463      	add	r3, ip
 8001b8c:	0412      	lsls	r2, r2, #16
 8001b8e:	1acb      	subs	r3, r1, r3
 8001b90:	4314      	orrs	r4, r2
 8001b92:	469b      	mov	fp, r3
 8001b94:	00c2      	lsls	r2, r0, #3
 8001b96:	2000      	movs	r0, #0
 8001b98:	0033      	movs	r3, r6
 8001b9a:	407b      	eors	r3, r7
 8001b9c:	469a      	mov	sl, r3
 8001b9e:	464b      	mov	r3, r9
 8001ba0:	2b0f      	cmp	r3, #15
 8001ba2:	d827      	bhi.n	8001bf4 <__aeabi_ddiv+0xdc>
 8001ba4:	49bc      	ldr	r1, [pc, #752]	; (8001e98 <__aeabi_ddiv+0x380>)
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	58cb      	ldr	r3, [r1, r3]
 8001baa:	469f      	mov	pc, r3
 8001bac:	46b2      	mov	sl, r6
 8001bae:	9b00      	ldr	r3, [sp, #0]
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d016      	beq.n	8001be2 <__aeabi_ddiv+0xca>
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d100      	bne.n	8001bba <__aeabi_ddiv+0xa2>
 8001bb8:	e28e      	b.n	80020d8 <__aeabi_ddiv+0x5c0>
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d000      	beq.n	8001bc0 <__aeabi_ddiv+0xa8>
 8001bbe:	e0d9      	b.n	8001d74 <__aeabi_ddiv+0x25c>
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2400      	movs	r4, #0
 8001bc4:	2500      	movs	r5, #0
 8001bc6:	4652      	mov	r2, sl
 8001bc8:	051b      	lsls	r3, r3, #20
 8001bca:	4323      	orrs	r3, r4
 8001bcc:	07d2      	lsls	r2, r2, #31
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	0028      	movs	r0, r5
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	b005      	add	sp, #20
 8001bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8001bd8:	46bb      	mov	fp, r7
 8001bda:	46b2      	mov	sl, r6
 8001bdc:	46a9      	mov	r9, r5
 8001bde:	46a0      	mov	r8, r4
 8001be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001be2:	2400      	movs	r4, #0
 8001be4:	2500      	movs	r5, #0
 8001be6:	4baa      	ldr	r3, [pc, #680]	; (8001e90 <__aeabi_ddiv+0x378>)
 8001be8:	e7ed      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 8001bea:	46ba      	mov	sl, r7
 8001bec:	46a0      	mov	r8, r4
 8001bee:	0015      	movs	r5, r2
 8001bf0:	9000      	str	r0, [sp, #0]
 8001bf2:	e7dc      	b.n	8001bae <__aeabi_ddiv+0x96>
 8001bf4:	4544      	cmp	r4, r8
 8001bf6:	d200      	bcs.n	8001bfa <__aeabi_ddiv+0xe2>
 8001bf8:	e1c7      	b.n	8001f8a <__aeabi_ddiv+0x472>
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_ddiv+0xe6>
 8001bfc:	e1c2      	b.n	8001f84 <__aeabi_ddiv+0x46c>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	469c      	mov	ip, r3
 8001c04:	002e      	movs	r6, r5
 8001c06:	4640      	mov	r0, r8
 8001c08:	2500      	movs	r5, #0
 8001c0a:	44e3      	add	fp, ip
 8001c0c:	0223      	lsls	r3, r4, #8
 8001c0e:	0e14      	lsrs	r4, r2, #24
 8001c10:	431c      	orrs	r4, r3
 8001c12:	0c1b      	lsrs	r3, r3, #16
 8001c14:	4699      	mov	r9, r3
 8001c16:	0423      	lsls	r3, r4, #16
 8001c18:	0c1f      	lsrs	r7, r3, #16
 8001c1a:	0212      	lsls	r2, r2, #8
 8001c1c:	4649      	mov	r1, r9
 8001c1e:	9200      	str	r2, [sp, #0]
 8001c20:	9701      	str	r7, [sp, #4]
 8001c22:	f7fe fb13 	bl	800024c <__aeabi_uidivmod>
 8001c26:	0002      	movs	r2, r0
 8001c28:	437a      	muls	r2, r7
 8001c2a:	040b      	lsls	r3, r1, #16
 8001c2c:	0c31      	lsrs	r1, r6, #16
 8001c2e:	4680      	mov	r8, r0
 8001c30:	4319      	orrs	r1, r3
 8001c32:	428a      	cmp	r2, r1
 8001c34:	d907      	bls.n	8001c46 <__aeabi_ddiv+0x12e>
 8001c36:	2301      	movs	r3, #1
 8001c38:	425b      	negs	r3, r3
 8001c3a:	469c      	mov	ip, r3
 8001c3c:	1909      	adds	r1, r1, r4
 8001c3e:	44e0      	add	r8, ip
 8001c40:	428c      	cmp	r4, r1
 8001c42:	d800      	bhi.n	8001c46 <__aeabi_ddiv+0x12e>
 8001c44:	e207      	b.n	8002056 <__aeabi_ddiv+0x53e>
 8001c46:	1a88      	subs	r0, r1, r2
 8001c48:	4649      	mov	r1, r9
 8001c4a:	f7fe faff 	bl	800024c <__aeabi_uidivmod>
 8001c4e:	0409      	lsls	r1, r1, #16
 8001c50:	468c      	mov	ip, r1
 8001c52:	0431      	lsls	r1, r6, #16
 8001c54:	4666      	mov	r6, ip
 8001c56:	9a01      	ldr	r2, [sp, #4]
 8001c58:	0c09      	lsrs	r1, r1, #16
 8001c5a:	4342      	muls	r2, r0
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	4331      	orrs	r1, r6
 8001c60:	428a      	cmp	r2, r1
 8001c62:	d904      	bls.n	8001c6e <__aeabi_ddiv+0x156>
 8001c64:	1909      	adds	r1, r1, r4
 8001c66:	3b01      	subs	r3, #1
 8001c68:	428c      	cmp	r4, r1
 8001c6a:	d800      	bhi.n	8001c6e <__aeabi_ddiv+0x156>
 8001c6c:	e1ed      	b.n	800204a <__aeabi_ddiv+0x532>
 8001c6e:	1a88      	subs	r0, r1, r2
 8001c70:	4642      	mov	r2, r8
 8001c72:	0412      	lsls	r2, r2, #16
 8001c74:	431a      	orrs	r2, r3
 8001c76:	4690      	mov	r8, r2
 8001c78:	4641      	mov	r1, r8
 8001c7a:	9b00      	ldr	r3, [sp, #0]
 8001c7c:	040e      	lsls	r6, r1, #16
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	001f      	movs	r7, r3
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	9b00      	ldr	r3, [sp, #0]
 8001c86:	0c36      	lsrs	r6, r6, #16
 8001c88:	041b      	lsls	r3, r3, #16
 8001c8a:	0c19      	lsrs	r1, r3, #16
 8001c8c:	000b      	movs	r3, r1
 8001c8e:	4373      	muls	r3, r6
 8001c90:	0c12      	lsrs	r2, r2, #16
 8001c92:	437e      	muls	r6, r7
 8001c94:	9103      	str	r1, [sp, #12]
 8001c96:	4351      	muls	r1, r2
 8001c98:	437a      	muls	r2, r7
 8001c9a:	0c1f      	lsrs	r7, r3, #16
 8001c9c:	46bc      	mov	ip, r7
 8001c9e:	1876      	adds	r6, r6, r1
 8001ca0:	4466      	add	r6, ip
 8001ca2:	42b1      	cmp	r1, r6
 8001ca4:	d903      	bls.n	8001cae <__aeabi_ddiv+0x196>
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0249      	lsls	r1, r1, #9
 8001caa:	468c      	mov	ip, r1
 8001cac:	4462      	add	r2, ip
 8001cae:	0c31      	lsrs	r1, r6, #16
 8001cb0:	188a      	adds	r2, r1, r2
 8001cb2:	0431      	lsls	r1, r6, #16
 8001cb4:	041e      	lsls	r6, r3, #16
 8001cb6:	0c36      	lsrs	r6, r6, #16
 8001cb8:	198e      	adds	r6, r1, r6
 8001cba:	4290      	cmp	r0, r2
 8001cbc:	d302      	bcc.n	8001cc4 <__aeabi_ddiv+0x1ac>
 8001cbe:	d112      	bne.n	8001ce6 <__aeabi_ddiv+0x1ce>
 8001cc0:	42b5      	cmp	r5, r6
 8001cc2:	d210      	bcs.n	8001ce6 <__aeabi_ddiv+0x1ce>
 8001cc4:	4643      	mov	r3, r8
 8001cc6:	1e59      	subs	r1, r3, #1
 8001cc8:	9b00      	ldr	r3, [sp, #0]
 8001cca:	469c      	mov	ip, r3
 8001ccc:	4465      	add	r5, ip
 8001cce:	001f      	movs	r7, r3
 8001cd0:	429d      	cmp	r5, r3
 8001cd2:	419b      	sbcs	r3, r3
 8001cd4:	425b      	negs	r3, r3
 8001cd6:	191b      	adds	r3, r3, r4
 8001cd8:	18c0      	adds	r0, r0, r3
 8001cda:	4284      	cmp	r4, r0
 8001cdc:	d200      	bcs.n	8001ce0 <__aeabi_ddiv+0x1c8>
 8001cde:	e1a0      	b.n	8002022 <__aeabi_ddiv+0x50a>
 8001ce0:	d100      	bne.n	8001ce4 <__aeabi_ddiv+0x1cc>
 8001ce2:	e19b      	b.n	800201c <__aeabi_ddiv+0x504>
 8001ce4:	4688      	mov	r8, r1
 8001ce6:	1bae      	subs	r6, r5, r6
 8001ce8:	42b5      	cmp	r5, r6
 8001cea:	41ad      	sbcs	r5, r5
 8001cec:	1a80      	subs	r0, r0, r2
 8001cee:	426d      	negs	r5, r5
 8001cf0:	1b40      	subs	r0, r0, r5
 8001cf2:	4284      	cmp	r4, r0
 8001cf4:	d100      	bne.n	8001cf8 <__aeabi_ddiv+0x1e0>
 8001cf6:	e1d5      	b.n	80020a4 <__aeabi_ddiv+0x58c>
 8001cf8:	4649      	mov	r1, r9
 8001cfa:	f7fe faa7 	bl	800024c <__aeabi_uidivmod>
 8001cfe:	9a01      	ldr	r2, [sp, #4]
 8001d00:	040b      	lsls	r3, r1, #16
 8001d02:	4342      	muls	r2, r0
 8001d04:	0c31      	lsrs	r1, r6, #16
 8001d06:	0005      	movs	r5, r0
 8001d08:	4319      	orrs	r1, r3
 8001d0a:	428a      	cmp	r2, r1
 8001d0c:	d900      	bls.n	8001d10 <__aeabi_ddiv+0x1f8>
 8001d0e:	e16c      	b.n	8001fea <__aeabi_ddiv+0x4d2>
 8001d10:	1a88      	subs	r0, r1, r2
 8001d12:	4649      	mov	r1, r9
 8001d14:	f7fe fa9a 	bl	800024c <__aeabi_uidivmod>
 8001d18:	9a01      	ldr	r2, [sp, #4]
 8001d1a:	0436      	lsls	r6, r6, #16
 8001d1c:	4342      	muls	r2, r0
 8001d1e:	0409      	lsls	r1, r1, #16
 8001d20:	0c36      	lsrs	r6, r6, #16
 8001d22:	0003      	movs	r3, r0
 8001d24:	430e      	orrs	r6, r1
 8001d26:	42b2      	cmp	r2, r6
 8001d28:	d900      	bls.n	8001d2c <__aeabi_ddiv+0x214>
 8001d2a:	e153      	b.n	8001fd4 <__aeabi_ddiv+0x4bc>
 8001d2c:	9803      	ldr	r0, [sp, #12]
 8001d2e:	1ab6      	subs	r6, r6, r2
 8001d30:	0002      	movs	r2, r0
 8001d32:	042d      	lsls	r5, r5, #16
 8001d34:	431d      	orrs	r5, r3
 8001d36:	9f02      	ldr	r7, [sp, #8]
 8001d38:	042b      	lsls	r3, r5, #16
 8001d3a:	0c1b      	lsrs	r3, r3, #16
 8001d3c:	435a      	muls	r2, r3
 8001d3e:	437b      	muls	r3, r7
 8001d40:	469c      	mov	ip, r3
 8001d42:	0c29      	lsrs	r1, r5, #16
 8001d44:	4348      	muls	r0, r1
 8001d46:	0c13      	lsrs	r3, r2, #16
 8001d48:	4484      	add	ip, r0
 8001d4a:	4463      	add	r3, ip
 8001d4c:	4379      	muls	r1, r7
 8001d4e:	4298      	cmp	r0, r3
 8001d50:	d903      	bls.n	8001d5a <__aeabi_ddiv+0x242>
 8001d52:	2080      	movs	r0, #128	; 0x80
 8001d54:	0240      	lsls	r0, r0, #9
 8001d56:	4684      	mov	ip, r0
 8001d58:	4461      	add	r1, ip
 8001d5a:	0c18      	lsrs	r0, r3, #16
 8001d5c:	0412      	lsls	r2, r2, #16
 8001d5e:	041b      	lsls	r3, r3, #16
 8001d60:	0c12      	lsrs	r2, r2, #16
 8001d62:	1841      	adds	r1, r0, r1
 8001d64:	189b      	adds	r3, r3, r2
 8001d66:	428e      	cmp	r6, r1
 8001d68:	d200      	bcs.n	8001d6c <__aeabi_ddiv+0x254>
 8001d6a:	e0ff      	b.n	8001f6c <__aeabi_ddiv+0x454>
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_ddiv+0x258>
 8001d6e:	e0fa      	b.n	8001f66 <__aeabi_ddiv+0x44e>
 8001d70:	2301      	movs	r3, #1
 8001d72:	431d      	orrs	r5, r3
 8001d74:	4a49      	ldr	r2, [pc, #292]	; (8001e9c <__aeabi_ddiv+0x384>)
 8001d76:	445a      	add	r2, fp
 8001d78:	2a00      	cmp	r2, #0
 8001d7a:	dc00      	bgt.n	8001d7e <__aeabi_ddiv+0x266>
 8001d7c:	e0aa      	b.n	8001ed4 <__aeabi_ddiv+0x3bc>
 8001d7e:	076b      	lsls	r3, r5, #29
 8001d80:	d000      	beq.n	8001d84 <__aeabi_ddiv+0x26c>
 8001d82:	e13d      	b.n	8002000 <__aeabi_ddiv+0x4e8>
 8001d84:	08ed      	lsrs	r5, r5, #3
 8001d86:	4643      	mov	r3, r8
 8001d88:	01db      	lsls	r3, r3, #7
 8001d8a:	d506      	bpl.n	8001d9a <__aeabi_ddiv+0x282>
 8001d8c:	4642      	mov	r2, r8
 8001d8e:	4b44      	ldr	r3, [pc, #272]	; (8001ea0 <__aeabi_ddiv+0x388>)
 8001d90:	401a      	ands	r2, r3
 8001d92:	4690      	mov	r8, r2
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	00d2      	lsls	r2, r2, #3
 8001d98:	445a      	add	r2, fp
 8001d9a:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <__aeabi_ddiv+0x38c>)
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	dd00      	ble.n	8001da2 <__aeabi_ddiv+0x28a>
 8001da0:	e71f      	b.n	8001be2 <__aeabi_ddiv+0xca>
 8001da2:	4643      	mov	r3, r8
 8001da4:	075b      	lsls	r3, r3, #29
 8001da6:	431d      	orrs	r5, r3
 8001da8:	4643      	mov	r3, r8
 8001daa:	0552      	lsls	r2, r2, #21
 8001dac:	025c      	lsls	r4, r3, #9
 8001dae:	0b24      	lsrs	r4, r4, #12
 8001db0:	0d53      	lsrs	r3, r2, #21
 8001db2:	e708      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 8001db4:	4652      	mov	r2, sl
 8001db6:	4322      	orrs	r2, r4
 8001db8:	d100      	bne.n	8001dbc <__aeabi_ddiv+0x2a4>
 8001dba:	e07b      	b.n	8001eb4 <__aeabi_ddiv+0x39c>
 8001dbc:	2c00      	cmp	r4, #0
 8001dbe:	d100      	bne.n	8001dc2 <__aeabi_ddiv+0x2aa>
 8001dc0:	e0fa      	b.n	8001fb8 <__aeabi_ddiv+0x4a0>
 8001dc2:	0020      	movs	r0, r4
 8001dc4:	f001 f99a 	bl	80030fc <__clzsi2>
 8001dc8:	0002      	movs	r2, r0
 8001dca:	3a0b      	subs	r2, #11
 8001dcc:	231d      	movs	r3, #29
 8001dce:	0001      	movs	r1, r0
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	3908      	subs	r1, #8
 8001dd6:	40da      	lsrs	r2, r3
 8001dd8:	408c      	lsls	r4, r1
 8001dda:	4314      	orrs	r4, r2
 8001ddc:	4652      	mov	r2, sl
 8001dde:	408a      	lsls	r2, r1
 8001de0:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <__aeabi_ddiv+0x390>)
 8001de2:	4458      	add	r0, fp
 8001de4:	469b      	mov	fp, r3
 8001de6:	4483      	add	fp, r0
 8001de8:	2000      	movs	r0, #0
 8001dea:	e6d5      	b.n	8001b98 <__aeabi_ddiv+0x80>
 8001dec:	464b      	mov	r3, r9
 8001dee:	4323      	orrs	r3, r4
 8001df0:	4698      	mov	r8, r3
 8001df2:	d044      	beq.n	8001e7e <__aeabi_ddiv+0x366>
 8001df4:	2c00      	cmp	r4, #0
 8001df6:	d100      	bne.n	8001dfa <__aeabi_ddiv+0x2e2>
 8001df8:	e0ce      	b.n	8001f98 <__aeabi_ddiv+0x480>
 8001dfa:	0020      	movs	r0, r4
 8001dfc:	f001 f97e 	bl	80030fc <__clzsi2>
 8001e00:	0001      	movs	r1, r0
 8001e02:	0002      	movs	r2, r0
 8001e04:	390b      	subs	r1, #11
 8001e06:	231d      	movs	r3, #29
 8001e08:	1a5b      	subs	r3, r3, r1
 8001e0a:	4649      	mov	r1, r9
 8001e0c:	0010      	movs	r0, r2
 8001e0e:	40d9      	lsrs	r1, r3
 8001e10:	3808      	subs	r0, #8
 8001e12:	4084      	lsls	r4, r0
 8001e14:	000b      	movs	r3, r1
 8001e16:	464d      	mov	r5, r9
 8001e18:	4323      	orrs	r3, r4
 8001e1a:	4698      	mov	r8, r3
 8001e1c:	4085      	lsls	r5, r0
 8001e1e:	4823      	ldr	r0, [pc, #140]	; (8001eac <__aeabi_ddiv+0x394>)
 8001e20:	1a83      	subs	r3, r0, r2
 8001e22:	469b      	mov	fp, r3
 8001e24:	2300      	movs	r3, #0
 8001e26:	4699      	mov	r9, r3
 8001e28:	9300      	str	r3, [sp, #0]
 8001e2a:	e69a      	b.n	8001b62 <__aeabi_ddiv+0x4a>
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	4323      	orrs	r3, r4
 8001e30:	4698      	mov	r8, r3
 8001e32:	d11d      	bne.n	8001e70 <__aeabi_ddiv+0x358>
 8001e34:	2308      	movs	r3, #8
 8001e36:	4699      	mov	r9, r3
 8001e38:	3b06      	subs	r3, #6
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	4683      	mov	fp, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	e68f      	b.n	8001b62 <__aeabi_ddiv+0x4a>
 8001e42:	4652      	mov	r2, sl
 8001e44:	4322      	orrs	r2, r4
 8001e46:	d109      	bne.n	8001e5c <__aeabi_ddiv+0x344>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	4649      	mov	r1, r9
 8001e4c:	4319      	orrs	r1, r3
 8001e4e:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <__aeabi_ddiv+0x398>)
 8001e50:	4689      	mov	r9, r1
 8001e52:	469c      	mov	ip, r3
 8001e54:	2400      	movs	r4, #0
 8001e56:	2002      	movs	r0, #2
 8001e58:	44e3      	add	fp, ip
 8001e5a:	e69d      	b.n	8001b98 <__aeabi_ddiv+0x80>
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	464a      	mov	r2, r9
 8001e60:	431a      	orrs	r2, r3
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <__aeabi_ddiv+0x398>)
 8001e64:	4691      	mov	r9, r2
 8001e66:	469c      	mov	ip, r3
 8001e68:	4652      	mov	r2, sl
 8001e6a:	2003      	movs	r0, #3
 8001e6c:	44e3      	add	fp, ip
 8001e6e:	e693      	b.n	8001b98 <__aeabi_ddiv+0x80>
 8001e70:	230c      	movs	r3, #12
 8001e72:	4699      	mov	r9, r3
 8001e74:	3b09      	subs	r3, #9
 8001e76:	46a0      	mov	r8, r4
 8001e78:	4683      	mov	fp, r0
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	e671      	b.n	8001b62 <__aeabi_ddiv+0x4a>
 8001e7e:	2304      	movs	r3, #4
 8001e80:	4699      	mov	r9, r3
 8001e82:	2300      	movs	r3, #0
 8001e84:	469b      	mov	fp, r3
 8001e86:	3301      	adds	r3, #1
 8001e88:	2500      	movs	r5, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	e669      	b.n	8001b62 <__aeabi_ddiv+0x4a>
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	000007ff 	.word	0x000007ff
 8001e94:	fffffc01 	.word	0xfffffc01
 8001e98:	08009b34 	.word	0x08009b34
 8001e9c:	000003ff 	.word	0x000003ff
 8001ea0:	feffffff 	.word	0xfeffffff
 8001ea4:	000007fe 	.word	0x000007fe
 8001ea8:	000003f3 	.word	0x000003f3
 8001eac:	fffffc0d 	.word	0xfffffc0d
 8001eb0:	fffff801 	.word	0xfffff801
 8001eb4:	4649      	mov	r1, r9
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4319      	orrs	r1, r3
 8001eba:	4689      	mov	r9, r1
 8001ebc:	2400      	movs	r4, #0
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	e66a      	b.n	8001b98 <__aeabi_ddiv+0x80>
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	2480      	movs	r4, #128	; 0x80
 8001ec6:	469a      	mov	sl, r3
 8001ec8:	2500      	movs	r5, #0
 8001eca:	4b8a      	ldr	r3, [pc, #552]	; (80020f4 <__aeabi_ddiv+0x5dc>)
 8001ecc:	0324      	lsls	r4, r4, #12
 8001ece:	e67a      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 8001ed0:	2501      	movs	r5, #1
 8001ed2:	426d      	negs	r5, r5
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	1a9b      	subs	r3, r3, r2
 8001ed8:	2b38      	cmp	r3, #56	; 0x38
 8001eda:	dd00      	ble.n	8001ede <__aeabi_ddiv+0x3c6>
 8001edc:	e670      	b.n	8001bc0 <__aeabi_ddiv+0xa8>
 8001ede:	2b1f      	cmp	r3, #31
 8001ee0:	dc00      	bgt.n	8001ee4 <__aeabi_ddiv+0x3cc>
 8001ee2:	e0bf      	b.n	8002064 <__aeabi_ddiv+0x54c>
 8001ee4:	211f      	movs	r1, #31
 8001ee6:	4249      	negs	r1, r1
 8001ee8:	1a8a      	subs	r2, r1, r2
 8001eea:	4641      	mov	r1, r8
 8001eec:	40d1      	lsrs	r1, r2
 8001eee:	000a      	movs	r2, r1
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d004      	beq.n	8001efe <__aeabi_ddiv+0x3e6>
 8001ef4:	4641      	mov	r1, r8
 8001ef6:	4b80      	ldr	r3, [pc, #512]	; (80020f8 <__aeabi_ddiv+0x5e0>)
 8001ef8:	445b      	add	r3, fp
 8001efa:	4099      	lsls	r1, r3
 8001efc:	430d      	orrs	r5, r1
 8001efe:	1e6b      	subs	r3, r5, #1
 8001f00:	419d      	sbcs	r5, r3
 8001f02:	2307      	movs	r3, #7
 8001f04:	432a      	orrs	r2, r5
 8001f06:	001d      	movs	r5, r3
 8001f08:	2400      	movs	r4, #0
 8001f0a:	4015      	ands	r5, r2
 8001f0c:	4213      	tst	r3, r2
 8001f0e:	d100      	bne.n	8001f12 <__aeabi_ddiv+0x3fa>
 8001f10:	e0d4      	b.n	80020bc <__aeabi_ddiv+0x5a4>
 8001f12:	210f      	movs	r1, #15
 8001f14:	2300      	movs	r3, #0
 8001f16:	4011      	ands	r1, r2
 8001f18:	2904      	cmp	r1, #4
 8001f1a:	d100      	bne.n	8001f1e <__aeabi_ddiv+0x406>
 8001f1c:	e0cb      	b.n	80020b6 <__aeabi_ddiv+0x59e>
 8001f1e:	1d11      	adds	r1, r2, #4
 8001f20:	4291      	cmp	r1, r2
 8001f22:	4192      	sbcs	r2, r2
 8001f24:	4252      	negs	r2, r2
 8001f26:	189b      	adds	r3, r3, r2
 8001f28:	000a      	movs	r2, r1
 8001f2a:	0219      	lsls	r1, r3, #8
 8001f2c:	d400      	bmi.n	8001f30 <__aeabi_ddiv+0x418>
 8001f2e:	e0c2      	b.n	80020b6 <__aeabi_ddiv+0x59e>
 8001f30:	2301      	movs	r3, #1
 8001f32:	2400      	movs	r4, #0
 8001f34:	2500      	movs	r5, #0
 8001f36:	e646      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	4641      	mov	r1, r8
 8001f3c:	031b      	lsls	r3, r3, #12
 8001f3e:	4219      	tst	r1, r3
 8001f40:	d008      	beq.n	8001f54 <__aeabi_ddiv+0x43c>
 8001f42:	421c      	tst	r4, r3
 8001f44:	d106      	bne.n	8001f54 <__aeabi_ddiv+0x43c>
 8001f46:	431c      	orrs	r4, r3
 8001f48:	0324      	lsls	r4, r4, #12
 8001f4a:	46ba      	mov	sl, r7
 8001f4c:	0015      	movs	r5, r2
 8001f4e:	4b69      	ldr	r3, [pc, #420]	; (80020f4 <__aeabi_ddiv+0x5dc>)
 8001f50:	0b24      	lsrs	r4, r4, #12
 8001f52:	e638      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 8001f54:	2480      	movs	r4, #128	; 0x80
 8001f56:	4643      	mov	r3, r8
 8001f58:	0324      	lsls	r4, r4, #12
 8001f5a:	431c      	orrs	r4, r3
 8001f5c:	0324      	lsls	r4, r4, #12
 8001f5e:	46b2      	mov	sl, r6
 8001f60:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <__aeabi_ddiv+0x5dc>)
 8001f62:	0b24      	lsrs	r4, r4, #12
 8001f64:	e62f      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d100      	bne.n	8001f6c <__aeabi_ddiv+0x454>
 8001f6a:	e703      	b.n	8001d74 <__aeabi_ddiv+0x25c>
 8001f6c:	19a6      	adds	r6, r4, r6
 8001f6e:	1e68      	subs	r0, r5, #1
 8001f70:	42a6      	cmp	r6, r4
 8001f72:	d200      	bcs.n	8001f76 <__aeabi_ddiv+0x45e>
 8001f74:	e08d      	b.n	8002092 <__aeabi_ddiv+0x57a>
 8001f76:	428e      	cmp	r6, r1
 8001f78:	d200      	bcs.n	8001f7c <__aeabi_ddiv+0x464>
 8001f7a:	e0a3      	b.n	80020c4 <__aeabi_ddiv+0x5ac>
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_ddiv+0x468>
 8001f7e:	e0b3      	b.n	80020e8 <__aeabi_ddiv+0x5d0>
 8001f80:	0005      	movs	r5, r0
 8001f82:	e6f5      	b.n	8001d70 <__aeabi_ddiv+0x258>
 8001f84:	42aa      	cmp	r2, r5
 8001f86:	d900      	bls.n	8001f8a <__aeabi_ddiv+0x472>
 8001f88:	e639      	b.n	8001bfe <__aeabi_ddiv+0xe6>
 8001f8a:	4643      	mov	r3, r8
 8001f8c:	07de      	lsls	r6, r3, #31
 8001f8e:	0858      	lsrs	r0, r3, #1
 8001f90:	086b      	lsrs	r3, r5, #1
 8001f92:	431e      	orrs	r6, r3
 8001f94:	07ed      	lsls	r5, r5, #31
 8001f96:	e639      	b.n	8001c0c <__aeabi_ddiv+0xf4>
 8001f98:	4648      	mov	r0, r9
 8001f9a:	f001 f8af 	bl	80030fc <__clzsi2>
 8001f9e:	0001      	movs	r1, r0
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	3115      	adds	r1, #21
 8001fa4:	3220      	adds	r2, #32
 8001fa6:	291c      	cmp	r1, #28
 8001fa8:	dc00      	bgt.n	8001fac <__aeabi_ddiv+0x494>
 8001faa:	e72c      	b.n	8001e06 <__aeabi_ddiv+0x2ee>
 8001fac:	464b      	mov	r3, r9
 8001fae:	3808      	subs	r0, #8
 8001fb0:	4083      	lsls	r3, r0
 8001fb2:	2500      	movs	r5, #0
 8001fb4:	4698      	mov	r8, r3
 8001fb6:	e732      	b.n	8001e1e <__aeabi_ddiv+0x306>
 8001fb8:	f001 f8a0 	bl	80030fc <__clzsi2>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	001a      	movs	r2, r3
 8001fc0:	3215      	adds	r2, #21
 8001fc2:	3020      	adds	r0, #32
 8001fc4:	2a1c      	cmp	r2, #28
 8001fc6:	dc00      	bgt.n	8001fca <__aeabi_ddiv+0x4b2>
 8001fc8:	e700      	b.n	8001dcc <__aeabi_ddiv+0x2b4>
 8001fca:	4654      	mov	r4, sl
 8001fcc:	3b08      	subs	r3, #8
 8001fce:	2200      	movs	r2, #0
 8001fd0:	409c      	lsls	r4, r3
 8001fd2:	e705      	b.n	8001de0 <__aeabi_ddiv+0x2c8>
 8001fd4:	1936      	adds	r6, r6, r4
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	42b4      	cmp	r4, r6
 8001fda:	d900      	bls.n	8001fde <__aeabi_ddiv+0x4c6>
 8001fdc:	e6a6      	b.n	8001d2c <__aeabi_ddiv+0x214>
 8001fde:	42b2      	cmp	r2, r6
 8001fe0:	d800      	bhi.n	8001fe4 <__aeabi_ddiv+0x4cc>
 8001fe2:	e6a3      	b.n	8001d2c <__aeabi_ddiv+0x214>
 8001fe4:	1e83      	subs	r3, r0, #2
 8001fe6:	1936      	adds	r6, r6, r4
 8001fe8:	e6a0      	b.n	8001d2c <__aeabi_ddiv+0x214>
 8001fea:	1909      	adds	r1, r1, r4
 8001fec:	3d01      	subs	r5, #1
 8001fee:	428c      	cmp	r4, r1
 8001ff0:	d900      	bls.n	8001ff4 <__aeabi_ddiv+0x4dc>
 8001ff2:	e68d      	b.n	8001d10 <__aeabi_ddiv+0x1f8>
 8001ff4:	428a      	cmp	r2, r1
 8001ff6:	d800      	bhi.n	8001ffa <__aeabi_ddiv+0x4e2>
 8001ff8:	e68a      	b.n	8001d10 <__aeabi_ddiv+0x1f8>
 8001ffa:	1e85      	subs	r5, r0, #2
 8001ffc:	1909      	adds	r1, r1, r4
 8001ffe:	e687      	b.n	8001d10 <__aeabi_ddiv+0x1f8>
 8002000:	230f      	movs	r3, #15
 8002002:	402b      	ands	r3, r5
 8002004:	2b04      	cmp	r3, #4
 8002006:	d100      	bne.n	800200a <__aeabi_ddiv+0x4f2>
 8002008:	e6bc      	b.n	8001d84 <__aeabi_ddiv+0x26c>
 800200a:	2305      	movs	r3, #5
 800200c:	425b      	negs	r3, r3
 800200e:	42ab      	cmp	r3, r5
 8002010:	419b      	sbcs	r3, r3
 8002012:	3504      	adds	r5, #4
 8002014:	425b      	negs	r3, r3
 8002016:	08ed      	lsrs	r5, r5, #3
 8002018:	4498      	add	r8, r3
 800201a:	e6b4      	b.n	8001d86 <__aeabi_ddiv+0x26e>
 800201c:	42af      	cmp	r7, r5
 800201e:	d900      	bls.n	8002022 <__aeabi_ddiv+0x50a>
 8002020:	e660      	b.n	8001ce4 <__aeabi_ddiv+0x1cc>
 8002022:	4282      	cmp	r2, r0
 8002024:	d804      	bhi.n	8002030 <__aeabi_ddiv+0x518>
 8002026:	d000      	beq.n	800202a <__aeabi_ddiv+0x512>
 8002028:	e65c      	b.n	8001ce4 <__aeabi_ddiv+0x1cc>
 800202a:	42ae      	cmp	r6, r5
 800202c:	d800      	bhi.n	8002030 <__aeabi_ddiv+0x518>
 800202e:	e659      	b.n	8001ce4 <__aeabi_ddiv+0x1cc>
 8002030:	2302      	movs	r3, #2
 8002032:	425b      	negs	r3, r3
 8002034:	469c      	mov	ip, r3
 8002036:	9b00      	ldr	r3, [sp, #0]
 8002038:	44e0      	add	r8, ip
 800203a:	469c      	mov	ip, r3
 800203c:	4465      	add	r5, ip
 800203e:	429d      	cmp	r5, r3
 8002040:	419b      	sbcs	r3, r3
 8002042:	425b      	negs	r3, r3
 8002044:	191b      	adds	r3, r3, r4
 8002046:	18c0      	adds	r0, r0, r3
 8002048:	e64d      	b.n	8001ce6 <__aeabi_ddiv+0x1ce>
 800204a:	428a      	cmp	r2, r1
 800204c:	d800      	bhi.n	8002050 <__aeabi_ddiv+0x538>
 800204e:	e60e      	b.n	8001c6e <__aeabi_ddiv+0x156>
 8002050:	1e83      	subs	r3, r0, #2
 8002052:	1909      	adds	r1, r1, r4
 8002054:	e60b      	b.n	8001c6e <__aeabi_ddiv+0x156>
 8002056:	428a      	cmp	r2, r1
 8002058:	d800      	bhi.n	800205c <__aeabi_ddiv+0x544>
 800205a:	e5f4      	b.n	8001c46 <__aeabi_ddiv+0x12e>
 800205c:	1e83      	subs	r3, r0, #2
 800205e:	4698      	mov	r8, r3
 8002060:	1909      	adds	r1, r1, r4
 8002062:	e5f0      	b.n	8001c46 <__aeabi_ddiv+0x12e>
 8002064:	4925      	ldr	r1, [pc, #148]	; (80020fc <__aeabi_ddiv+0x5e4>)
 8002066:	0028      	movs	r0, r5
 8002068:	4459      	add	r1, fp
 800206a:	408d      	lsls	r5, r1
 800206c:	4642      	mov	r2, r8
 800206e:	408a      	lsls	r2, r1
 8002070:	1e69      	subs	r1, r5, #1
 8002072:	418d      	sbcs	r5, r1
 8002074:	4641      	mov	r1, r8
 8002076:	40d8      	lsrs	r0, r3
 8002078:	40d9      	lsrs	r1, r3
 800207a:	4302      	orrs	r2, r0
 800207c:	432a      	orrs	r2, r5
 800207e:	000b      	movs	r3, r1
 8002080:	0751      	lsls	r1, r2, #29
 8002082:	d100      	bne.n	8002086 <__aeabi_ddiv+0x56e>
 8002084:	e751      	b.n	8001f2a <__aeabi_ddiv+0x412>
 8002086:	210f      	movs	r1, #15
 8002088:	4011      	ands	r1, r2
 800208a:	2904      	cmp	r1, #4
 800208c:	d000      	beq.n	8002090 <__aeabi_ddiv+0x578>
 800208e:	e746      	b.n	8001f1e <__aeabi_ddiv+0x406>
 8002090:	e74b      	b.n	8001f2a <__aeabi_ddiv+0x412>
 8002092:	0005      	movs	r5, r0
 8002094:	428e      	cmp	r6, r1
 8002096:	d000      	beq.n	800209a <__aeabi_ddiv+0x582>
 8002098:	e66a      	b.n	8001d70 <__aeabi_ddiv+0x258>
 800209a:	9a00      	ldr	r2, [sp, #0]
 800209c:	4293      	cmp	r3, r2
 800209e:	d000      	beq.n	80020a2 <__aeabi_ddiv+0x58a>
 80020a0:	e666      	b.n	8001d70 <__aeabi_ddiv+0x258>
 80020a2:	e667      	b.n	8001d74 <__aeabi_ddiv+0x25c>
 80020a4:	4a16      	ldr	r2, [pc, #88]	; (8002100 <__aeabi_ddiv+0x5e8>)
 80020a6:	445a      	add	r2, fp
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	dc00      	bgt.n	80020ae <__aeabi_ddiv+0x596>
 80020ac:	e710      	b.n	8001ed0 <__aeabi_ddiv+0x3b8>
 80020ae:	2301      	movs	r3, #1
 80020b0:	2500      	movs	r5, #0
 80020b2:	4498      	add	r8, r3
 80020b4:	e667      	b.n	8001d86 <__aeabi_ddiv+0x26e>
 80020b6:	075d      	lsls	r5, r3, #29
 80020b8:	025b      	lsls	r3, r3, #9
 80020ba:	0b1c      	lsrs	r4, r3, #12
 80020bc:	08d2      	lsrs	r2, r2, #3
 80020be:	2300      	movs	r3, #0
 80020c0:	4315      	orrs	r5, r2
 80020c2:	e580      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 80020c4:	9800      	ldr	r0, [sp, #0]
 80020c6:	3d02      	subs	r5, #2
 80020c8:	0042      	lsls	r2, r0, #1
 80020ca:	4282      	cmp	r2, r0
 80020cc:	41bf      	sbcs	r7, r7
 80020ce:	427f      	negs	r7, r7
 80020d0:	193c      	adds	r4, r7, r4
 80020d2:	1936      	adds	r6, r6, r4
 80020d4:	9200      	str	r2, [sp, #0]
 80020d6:	e7dd      	b.n	8002094 <__aeabi_ddiv+0x57c>
 80020d8:	2480      	movs	r4, #128	; 0x80
 80020da:	4643      	mov	r3, r8
 80020dc:	0324      	lsls	r4, r4, #12
 80020de:	431c      	orrs	r4, r3
 80020e0:	0324      	lsls	r4, r4, #12
 80020e2:	4b04      	ldr	r3, [pc, #16]	; (80020f4 <__aeabi_ddiv+0x5dc>)
 80020e4:	0b24      	lsrs	r4, r4, #12
 80020e6:	e56e      	b.n	8001bc6 <__aeabi_ddiv+0xae>
 80020e8:	9a00      	ldr	r2, [sp, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d3ea      	bcc.n	80020c4 <__aeabi_ddiv+0x5ac>
 80020ee:	0005      	movs	r5, r0
 80020f0:	e7d3      	b.n	800209a <__aeabi_ddiv+0x582>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	000007ff 	.word	0x000007ff
 80020f8:	0000043e 	.word	0x0000043e
 80020fc:	0000041e 	.word	0x0000041e
 8002100:	000003ff 	.word	0x000003ff

08002104 <__eqdf2>:
 8002104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002106:	464e      	mov	r6, r9
 8002108:	4645      	mov	r5, r8
 800210a:	46de      	mov	lr, fp
 800210c:	4657      	mov	r7, sl
 800210e:	4690      	mov	r8, r2
 8002110:	b5e0      	push	{r5, r6, r7, lr}
 8002112:	0017      	movs	r7, r2
 8002114:	031a      	lsls	r2, r3, #12
 8002116:	0b12      	lsrs	r2, r2, #12
 8002118:	0005      	movs	r5, r0
 800211a:	4684      	mov	ip, r0
 800211c:	4819      	ldr	r0, [pc, #100]	; (8002184 <__eqdf2+0x80>)
 800211e:	030e      	lsls	r6, r1, #12
 8002120:	004c      	lsls	r4, r1, #1
 8002122:	4691      	mov	r9, r2
 8002124:	005a      	lsls	r2, r3, #1
 8002126:	0fdb      	lsrs	r3, r3, #31
 8002128:	469b      	mov	fp, r3
 800212a:	0b36      	lsrs	r6, r6, #12
 800212c:	0d64      	lsrs	r4, r4, #21
 800212e:	0fc9      	lsrs	r1, r1, #31
 8002130:	0d52      	lsrs	r2, r2, #21
 8002132:	4284      	cmp	r4, r0
 8002134:	d019      	beq.n	800216a <__eqdf2+0x66>
 8002136:	4282      	cmp	r2, r0
 8002138:	d010      	beq.n	800215c <__eqdf2+0x58>
 800213a:	2001      	movs	r0, #1
 800213c:	4294      	cmp	r4, r2
 800213e:	d10e      	bne.n	800215e <__eqdf2+0x5a>
 8002140:	454e      	cmp	r6, r9
 8002142:	d10c      	bne.n	800215e <__eqdf2+0x5a>
 8002144:	2001      	movs	r0, #1
 8002146:	45c4      	cmp	ip, r8
 8002148:	d109      	bne.n	800215e <__eqdf2+0x5a>
 800214a:	4559      	cmp	r1, fp
 800214c:	d017      	beq.n	800217e <__eqdf2+0x7a>
 800214e:	2c00      	cmp	r4, #0
 8002150:	d105      	bne.n	800215e <__eqdf2+0x5a>
 8002152:	0030      	movs	r0, r6
 8002154:	4328      	orrs	r0, r5
 8002156:	1e43      	subs	r3, r0, #1
 8002158:	4198      	sbcs	r0, r3
 800215a:	e000      	b.n	800215e <__eqdf2+0x5a>
 800215c:	2001      	movs	r0, #1
 800215e:	bcf0      	pop	{r4, r5, r6, r7}
 8002160:	46bb      	mov	fp, r7
 8002162:	46b2      	mov	sl, r6
 8002164:	46a9      	mov	r9, r5
 8002166:	46a0      	mov	r8, r4
 8002168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800216a:	0033      	movs	r3, r6
 800216c:	2001      	movs	r0, #1
 800216e:	432b      	orrs	r3, r5
 8002170:	d1f5      	bne.n	800215e <__eqdf2+0x5a>
 8002172:	42a2      	cmp	r2, r4
 8002174:	d1f3      	bne.n	800215e <__eqdf2+0x5a>
 8002176:	464b      	mov	r3, r9
 8002178:	433b      	orrs	r3, r7
 800217a:	d1f0      	bne.n	800215e <__eqdf2+0x5a>
 800217c:	e7e2      	b.n	8002144 <__eqdf2+0x40>
 800217e:	2000      	movs	r0, #0
 8002180:	e7ed      	b.n	800215e <__eqdf2+0x5a>
 8002182:	46c0      	nop			; (mov r8, r8)
 8002184:	000007ff 	.word	0x000007ff

08002188 <__gedf2>:
 8002188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800218a:	4647      	mov	r7, r8
 800218c:	46ce      	mov	lr, r9
 800218e:	0004      	movs	r4, r0
 8002190:	0018      	movs	r0, r3
 8002192:	0016      	movs	r6, r2
 8002194:	031b      	lsls	r3, r3, #12
 8002196:	0b1b      	lsrs	r3, r3, #12
 8002198:	4d2d      	ldr	r5, [pc, #180]	; (8002250 <__gedf2+0xc8>)
 800219a:	004a      	lsls	r2, r1, #1
 800219c:	4699      	mov	r9, r3
 800219e:	b580      	push	{r7, lr}
 80021a0:	0043      	lsls	r3, r0, #1
 80021a2:	030f      	lsls	r7, r1, #12
 80021a4:	46a4      	mov	ip, r4
 80021a6:	46b0      	mov	r8, r6
 80021a8:	0b3f      	lsrs	r7, r7, #12
 80021aa:	0d52      	lsrs	r2, r2, #21
 80021ac:	0fc9      	lsrs	r1, r1, #31
 80021ae:	0d5b      	lsrs	r3, r3, #21
 80021b0:	0fc0      	lsrs	r0, r0, #31
 80021b2:	42aa      	cmp	r2, r5
 80021b4:	d021      	beq.n	80021fa <__gedf2+0x72>
 80021b6:	42ab      	cmp	r3, r5
 80021b8:	d013      	beq.n	80021e2 <__gedf2+0x5a>
 80021ba:	2a00      	cmp	r2, #0
 80021bc:	d122      	bne.n	8002204 <__gedf2+0x7c>
 80021be:	433c      	orrs	r4, r7
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d102      	bne.n	80021ca <__gedf2+0x42>
 80021c4:	464d      	mov	r5, r9
 80021c6:	432e      	orrs	r6, r5
 80021c8:	d022      	beq.n	8002210 <__gedf2+0x88>
 80021ca:	2c00      	cmp	r4, #0
 80021cc:	d010      	beq.n	80021f0 <__gedf2+0x68>
 80021ce:	4281      	cmp	r1, r0
 80021d0:	d022      	beq.n	8002218 <__gedf2+0x90>
 80021d2:	2002      	movs	r0, #2
 80021d4:	3901      	subs	r1, #1
 80021d6:	4008      	ands	r0, r1
 80021d8:	3801      	subs	r0, #1
 80021da:	bcc0      	pop	{r6, r7}
 80021dc:	46b9      	mov	r9, r7
 80021de:	46b0      	mov	r8, r6
 80021e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e2:	464d      	mov	r5, r9
 80021e4:	432e      	orrs	r6, r5
 80021e6:	d129      	bne.n	800223c <__gedf2+0xb4>
 80021e8:	2a00      	cmp	r2, #0
 80021ea:	d1f0      	bne.n	80021ce <__gedf2+0x46>
 80021ec:	433c      	orrs	r4, r7
 80021ee:	d1ee      	bne.n	80021ce <__gedf2+0x46>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d1f2      	bne.n	80021da <__gedf2+0x52>
 80021f4:	2001      	movs	r0, #1
 80021f6:	4240      	negs	r0, r0
 80021f8:	e7ef      	b.n	80021da <__gedf2+0x52>
 80021fa:	003d      	movs	r5, r7
 80021fc:	4325      	orrs	r5, r4
 80021fe:	d11d      	bne.n	800223c <__gedf2+0xb4>
 8002200:	4293      	cmp	r3, r2
 8002202:	d0ee      	beq.n	80021e2 <__gedf2+0x5a>
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1e2      	bne.n	80021ce <__gedf2+0x46>
 8002208:	464c      	mov	r4, r9
 800220a:	4326      	orrs	r6, r4
 800220c:	d1df      	bne.n	80021ce <__gedf2+0x46>
 800220e:	e7e0      	b.n	80021d2 <__gedf2+0x4a>
 8002210:	2000      	movs	r0, #0
 8002212:	2c00      	cmp	r4, #0
 8002214:	d0e1      	beq.n	80021da <__gedf2+0x52>
 8002216:	e7dc      	b.n	80021d2 <__gedf2+0x4a>
 8002218:	429a      	cmp	r2, r3
 800221a:	dc0a      	bgt.n	8002232 <__gedf2+0xaa>
 800221c:	dbe8      	blt.n	80021f0 <__gedf2+0x68>
 800221e:	454f      	cmp	r7, r9
 8002220:	d8d7      	bhi.n	80021d2 <__gedf2+0x4a>
 8002222:	d00e      	beq.n	8002242 <__gedf2+0xba>
 8002224:	2000      	movs	r0, #0
 8002226:	454f      	cmp	r7, r9
 8002228:	d2d7      	bcs.n	80021da <__gedf2+0x52>
 800222a:	2900      	cmp	r1, #0
 800222c:	d0e2      	beq.n	80021f4 <__gedf2+0x6c>
 800222e:	0008      	movs	r0, r1
 8002230:	e7d3      	b.n	80021da <__gedf2+0x52>
 8002232:	4243      	negs	r3, r0
 8002234:	4158      	adcs	r0, r3
 8002236:	0040      	lsls	r0, r0, #1
 8002238:	3801      	subs	r0, #1
 800223a:	e7ce      	b.n	80021da <__gedf2+0x52>
 800223c:	2002      	movs	r0, #2
 800223e:	4240      	negs	r0, r0
 8002240:	e7cb      	b.n	80021da <__gedf2+0x52>
 8002242:	45c4      	cmp	ip, r8
 8002244:	d8c5      	bhi.n	80021d2 <__gedf2+0x4a>
 8002246:	2000      	movs	r0, #0
 8002248:	45c4      	cmp	ip, r8
 800224a:	d2c6      	bcs.n	80021da <__gedf2+0x52>
 800224c:	e7ed      	b.n	800222a <__gedf2+0xa2>
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	000007ff 	.word	0x000007ff

08002254 <__ledf2>:
 8002254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002256:	4647      	mov	r7, r8
 8002258:	46ce      	mov	lr, r9
 800225a:	0004      	movs	r4, r0
 800225c:	0018      	movs	r0, r3
 800225e:	0016      	movs	r6, r2
 8002260:	031b      	lsls	r3, r3, #12
 8002262:	0b1b      	lsrs	r3, r3, #12
 8002264:	4d2c      	ldr	r5, [pc, #176]	; (8002318 <__ledf2+0xc4>)
 8002266:	004a      	lsls	r2, r1, #1
 8002268:	4699      	mov	r9, r3
 800226a:	b580      	push	{r7, lr}
 800226c:	0043      	lsls	r3, r0, #1
 800226e:	030f      	lsls	r7, r1, #12
 8002270:	46a4      	mov	ip, r4
 8002272:	46b0      	mov	r8, r6
 8002274:	0b3f      	lsrs	r7, r7, #12
 8002276:	0d52      	lsrs	r2, r2, #21
 8002278:	0fc9      	lsrs	r1, r1, #31
 800227a:	0d5b      	lsrs	r3, r3, #21
 800227c:	0fc0      	lsrs	r0, r0, #31
 800227e:	42aa      	cmp	r2, r5
 8002280:	d00d      	beq.n	800229e <__ledf2+0x4a>
 8002282:	42ab      	cmp	r3, r5
 8002284:	d010      	beq.n	80022a8 <__ledf2+0x54>
 8002286:	2a00      	cmp	r2, #0
 8002288:	d127      	bne.n	80022da <__ledf2+0x86>
 800228a:	433c      	orrs	r4, r7
 800228c:	2b00      	cmp	r3, #0
 800228e:	d111      	bne.n	80022b4 <__ledf2+0x60>
 8002290:	464d      	mov	r5, r9
 8002292:	432e      	orrs	r6, r5
 8002294:	d10e      	bne.n	80022b4 <__ledf2+0x60>
 8002296:	2000      	movs	r0, #0
 8002298:	2c00      	cmp	r4, #0
 800229a:	d015      	beq.n	80022c8 <__ledf2+0x74>
 800229c:	e00e      	b.n	80022bc <__ledf2+0x68>
 800229e:	003d      	movs	r5, r7
 80022a0:	4325      	orrs	r5, r4
 80022a2:	d110      	bne.n	80022c6 <__ledf2+0x72>
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d118      	bne.n	80022da <__ledf2+0x86>
 80022a8:	464d      	mov	r5, r9
 80022aa:	432e      	orrs	r6, r5
 80022ac:	d10b      	bne.n	80022c6 <__ledf2+0x72>
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d102      	bne.n	80022b8 <__ledf2+0x64>
 80022b2:	433c      	orrs	r4, r7
 80022b4:	2c00      	cmp	r4, #0
 80022b6:	d00b      	beq.n	80022d0 <__ledf2+0x7c>
 80022b8:	4281      	cmp	r1, r0
 80022ba:	d014      	beq.n	80022e6 <__ledf2+0x92>
 80022bc:	2002      	movs	r0, #2
 80022be:	3901      	subs	r1, #1
 80022c0:	4008      	ands	r0, r1
 80022c2:	3801      	subs	r0, #1
 80022c4:	e000      	b.n	80022c8 <__ledf2+0x74>
 80022c6:	2002      	movs	r0, #2
 80022c8:	bcc0      	pop	{r6, r7}
 80022ca:	46b9      	mov	r9, r7
 80022cc:	46b0      	mov	r8, r6
 80022ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d1f9      	bne.n	80022c8 <__ledf2+0x74>
 80022d4:	2001      	movs	r0, #1
 80022d6:	4240      	negs	r0, r0
 80022d8:	e7f6      	b.n	80022c8 <__ledf2+0x74>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1ec      	bne.n	80022b8 <__ledf2+0x64>
 80022de:	464c      	mov	r4, r9
 80022e0:	4326      	orrs	r6, r4
 80022e2:	d1e9      	bne.n	80022b8 <__ledf2+0x64>
 80022e4:	e7ea      	b.n	80022bc <__ledf2+0x68>
 80022e6:	429a      	cmp	r2, r3
 80022e8:	dd04      	ble.n	80022f4 <__ledf2+0xa0>
 80022ea:	4243      	negs	r3, r0
 80022ec:	4158      	adcs	r0, r3
 80022ee:	0040      	lsls	r0, r0, #1
 80022f0:	3801      	subs	r0, #1
 80022f2:	e7e9      	b.n	80022c8 <__ledf2+0x74>
 80022f4:	429a      	cmp	r2, r3
 80022f6:	dbeb      	blt.n	80022d0 <__ledf2+0x7c>
 80022f8:	454f      	cmp	r7, r9
 80022fa:	d8df      	bhi.n	80022bc <__ledf2+0x68>
 80022fc:	d006      	beq.n	800230c <__ledf2+0xb8>
 80022fe:	2000      	movs	r0, #0
 8002300:	454f      	cmp	r7, r9
 8002302:	d2e1      	bcs.n	80022c8 <__ledf2+0x74>
 8002304:	2900      	cmp	r1, #0
 8002306:	d0e5      	beq.n	80022d4 <__ledf2+0x80>
 8002308:	0008      	movs	r0, r1
 800230a:	e7dd      	b.n	80022c8 <__ledf2+0x74>
 800230c:	45c4      	cmp	ip, r8
 800230e:	d8d5      	bhi.n	80022bc <__ledf2+0x68>
 8002310:	2000      	movs	r0, #0
 8002312:	45c4      	cmp	ip, r8
 8002314:	d2d8      	bcs.n	80022c8 <__ledf2+0x74>
 8002316:	e7f5      	b.n	8002304 <__ledf2+0xb0>
 8002318:	000007ff 	.word	0x000007ff

0800231c <__aeabi_dmul>:
 800231c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800231e:	4657      	mov	r7, sl
 8002320:	464e      	mov	r6, r9
 8002322:	4645      	mov	r5, r8
 8002324:	46de      	mov	lr, fp
 8002326:	b5e0      	push	{r5, r6, r7, lr}
 8002328:	4698      	mov	r8, r3
 800232a:	030c      	lsls	r4, r1, #12
 800232c:	004b      	lsls	r3, r1, #1
 800232e:	0006      	movs	r6, r0
 8002330:	4692      	mov	sl, r2
 8002332:	b087      	sub	sp, #28
 8002334:	0b24      	lsrs	r4, r4, #12
 8002336:	0d5b      	lsrs	r3, r3, #21
 8002338:	0fcf      	lsrs	r7, r1, #31
 800233a:	2b00      	cmp	r3, #0
 800233c:	d100      	bne.n	8002340 <__aeabi_dmul+0x24>
 800233e:	e15c      	b.n	80025fa <__aeabi_dmul+0x2de>
 8002340:	4ad9      	ldr	r2, [pc, #868]	; (80026a8 <__aeabi_dmul+0x38c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d100      	bne.n	8002348 <__aeabi_dmul+0x2c>
 8002346:	e175      	b.n	8002634 <__aeabi_dmul+0x318>
 8002348:	0f42      	lsrs	r2, r0, #29
 800234a:	00e4      	lsls	r4, r4, #3
 800234c:	4314      	orrs	r4, r2
 800234e:	2280      	movs	r2, #128	; 0x80
 8002350:	0412      	lsls	r2, r2, #16
 8002352:	4314      	orrs	r4, r2
 8002354:	4ad5      	ldr	r2, [pc, #852]	; (80026ac <__aeabi_dmul+0x390>)
 8002356:	00c5      	lsls	r5, r0, #3
 8002358:	4694      	mov	ip, r2
 800235a:	4463      	add	r3, ip
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2300      	movs	r3, #0
 8002360:	4699      	mov	r9, r3
 8002362:	469b      	mov	fp, r3
 8002364:	4643      	mov	r3, r8
 8002366:	4642      	mov	r2, r8
 8002368:	031e      	lsls	r6, r3, #12
 800236a:	0fd2      	lsrs	r2, r2, #31
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4650      	mov	r0, sl
 8002370:	4690      	mov	r8, r2
 8002372:	0b36      	lsrs	r6, r6, #12
 8002374:	0d5b      	lsrs	r3, r3, #21
 8002376:	d100      	bne.n	800237a <__aeabi_dmul+0x5e>
 8002378:	e120      	b.n	80025bc <__aeabi_dmul+0x2a0>
 800237a:	4acb      	ldr	r2, [pc, #812]	; (80026a8 <__aeabi_dmul+0x38c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <__aeabi_dmul+0x66>
 8002380:	e162      	b.n	8002648 <__aeabi_dmul+0x32c>
 8002382:	49ca      	ldr	r1, [pc, #808]	; (80026ac <__aeabi_dmul+0x390>)
 8002384:	0f42      	lsrs	r2, r0, #29
 8002386:	468c      	mov	ip, r1
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	4463      	add	r3, ip
 800238c:	00f6      	lsls	r6, r6, #3
 800238e:	468c      	mov	ip, r1
 8002390:	4316      	orrs	r6, r2
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	449c      	add	ip, r3
 8002396:	0412      	lsls	r2, r2, #16
 8002398:	4663      	mov	r3, ip
 800239a:	4316      	orrs	r6, r2
 800239c:	00c2      	lsls	r2, r0, #3
 800239e:	2000      	movs	r0, #0
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	9900      	ldr	r1, [sp, #0]
 80023a4:	4643      	mov	r3, r8
 80023a6:	3101      	adds	r1, #1
 80023a8:	468c      	mov	ip, r1
 80023aa:	4649      	mov	r1, r9
 80023ac:	407b      	eors	r3, r7
 80023ae:	9301      	str	r3, [sp, #4]
 80023b0:	290f      	cmp	r1, #15
 80023b2:	d826      	bhi.n	8002402 <__aeabi_dmul+0xe6>
 80023b4:	4bbe      	ldr	r3, [pc, #760]	; (80026b0 <__aeabi_dmul+0x394>)
 80023b6:	0089      	lsls	r1, r1, #2
 80023b8:	5859      	ldr	r1, [r3, r1]
 80023ba:	468f      	mov	pc, r1
 80023bc:	4643      	mov	r3, r8
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	0034      	movs	r4, r6
 80023c2:	0015      	movs	r5, r2
 80023c4:	4683      	mov	fp, r0
 80023c6:	465b      	mov	r3, fp
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d016      	beq.n	80023fa <__aeabi_dmul+0xde>
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dmul+0xb6>
 80023d0:	e203      	b.n	80027da <__aeabi_dmul+0x4be>
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d000      	beq.n	80023d8 <__aeabi_dmul+0xbc>
 80023d6:	e0cd      	b.n	8002574 <__aeabi_dmul+0x258>
 80023d8:	2200      	movs	r2, #0
 80023da:	2400      	movs	r4, #0
 80023dc:	2500      	movs	r5, #0
 80023de:	9b01      	ldr	r3, [sp, #4]
 80023e0:	0512      	lsls	r2, r2, #20
 80023e2:	4322      	orrs	r2, r4
 80023e4:	07db      	lsls	r3, r3, #31
 80023e6:	431a      	orrs	r2, r3
 80023e8:	0028      	movs	r0, r5
 80023ea:	0011      	movs	r1, r2
 80023ec:	b007      	add	sp, #28
 80023ee:	bcf0      	pop	{r4, r5, r6, r7}
 80023f0:	46bb      	mov	fp, r7
 80023f2:	46b2      	mov	sl, r6
 80023f4:	46a9      	mov	r9, r5
 80023f6:	46a0      	mov	r8, r4
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023fa:	2400      	movs	r4, #0
 80023fc:	2500      	movs	r5, #0
 80023fe:	4aaa      	ldr	r2, [pc, #680]	; (80026a8 <__aeabi_dmul+0x38c>)
 8002400:	e7ed      	b.n	80023de <__aeabi_dmul+0xc2>
 8002402:	0c28      	lsrs	r0, r5, #16
 8002404:	042d      	lsls	r5, r5, #16
 8002406:	0c2d      	lsrs	r5, r5, #16
 8002408:	002b      	movs	r3, r5
 800240a:	0c11      	lsrs	r1, r2, #16
 800240c:	0412      	lsls	r2, r2, #16
 800240e:	0c12      	lsrs	r2, r2, #16
 8002410:	4353      	muls	r3, r2
 8002412:	4698      	mov	r8, r3
 8002414:	0013      	movs	r3, r2
 8002416:	002f      	movs	r7, r5
 8002418:	4343      	muls	r3, r0
 800241a:	4699      	mov	r9, r3
 800241c:	434f      	muls	r7, r1
 800241e:	444f      	add	r7, r9
 8002420:	46bb      	mov	fp, r7
 8002422:	4647      	mov	r7, r8
 8002424:	000b      	movs	r3, r1
 8002426:	0c3f      	lsrs	r7, r7, #16
 8002428:	46ba      	mov	sl, r7
 800242a:	4343      	muls	r3, r0
 800242c:	44da      	add	sl, fp
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	45d1      	cmp	r9, sl
 8002432:	d904      	bls.n	800243e <__aeabi_dmul+0x122>
 8002434:	2780      	movs	r7, #128	; 0x80
 8002436:	027f      	lsls	r7, r7, #9
 8002438:	46b9      	mov	r9, r7
 800243a:	444b      	add	r3, r9
 800243c:	9302      	str	r3, [sp, #8]
 800243e:	4653      	mov	r3, sl
 8002440:	0c1b      	lsrs	r3, r3, #16
 8002442:	469b      	mov	fp, r3
 8002444:	4653      	mov	r3, sl
 8002446:	041f      	lsls	r7, r3, #16
 8002448:	4643      	mov	r3, r8
 800244a:	041b      	lsls	r3, r3, #16
 800244c:	0c1b      	lsrs	r3, r3, #16
 800244e:	4698      	mov	r8, r3
 8002450:	003b      	movs	r3, r7
 8002452:	4443      	add	r3, r8
 8002454:	9304      	str	r3, [sp, #16]
 8002456:	0c33      	lsrs	r3, r6, #16
 8002458:	0436      	lsls	r6, r6, #16
 800245a:	0c36      	lsrs	r6, r6, #16
 800245c:	4698      	mov	r8, r3
 800245e:	0033      	movs	r3, r6
 8002460:	4343      	muls	r3, r0
 8002462:	4699      	mov	r9, r3
 8002464:	4643      	mov	r3, r8
 8002466:	4343      	muls	r3, r0
 8002468:	002f      	movs	r7, r5
 800246a:	469a      	mov	sl, r3
 800246c:	4643      	mov	r3, r8
 800246e:	4377      	muls	r7, r6
 8002470:	435d      	muls	r5, r3
 8002472:	0c38      	lsrs	r0, r7, #16
 8002474:	444d      	add	r5, r9
 8002476:	1945      	adds	r5, r0, r5
 8002478:	45a9      	cmp	r9, r5
 800247a:	d903      	bls.n	8002484 <__aeabi_dmul+0x168>
 800247c:	2380      	movs	r3, #128	; 0x80
 800247e:	025b      	lsls	r3, r3, #9
 8002480:	4699      	mov	r9, r3
 8002482:	44ca      	add	sl, r9
 8002484:	043f      	lsls	r7, r7, #16
 8002486:	0c28      	lsrs	r0, r5, #16
 8002488:	0c3f      	lsrs	r7, r7, #16
 800248a:	042d      	lsls	r5, r5, #16
 800248c:	19ed      	adds	r5, r5, r7
 800248e:	0c27      	lsrs	r7, r4, #16
 8002490:	0424      	lsls	r4, r4, #16
 8002492:	0c24      	lsrs	r4, r4, #16
 8002494:	0003      	movs	r3, r0
 8002496:	0020      	movs	r0, r4
 8002498:	4350      	muls	r0, r2
 800249a:	437a      	muls	r2, r7
 800249c:	4691      	mov	r9, r2
 800249e:	003a      	movs	r2, r7
 80024a0:	4453      	add	r3, sl
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	0c03      	lsrs	r3, r0, #16
 80024a6:	469a      	mov	sl, r3
 80024a8:	434a      	muls	r2, r1
 80024aa:	4361      	muls	r1, r4
 80024ac:	4449      	add	r1, r9
 80024ae:	4451      	add	r1, sl
 80024b0:	44ab      	add	fp, r5
 80024b2:	4589      	cmp	r9, r1
 80024b4:	d903      	bls.n	80024be <__aeabi_dmul+0x1a2>
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	025b      	lsls	r3, r3, #9
 80024ba:	4699      	mov	r9, r3
 80024bc:	444a      	add	r2, r9
 80024be:	0400      	lsls	r0, r0, #16
 80024c0:	0c0b      	lsrs	r3, r1, #16
 80024c2:	0c00      	lsrs	r0, r0, #16
 80024c4:	0409      	lsls	r1, r1, #16
 80024c6:	1809      	adds	r1, r1, r0
 80024c8:	0020      	movs	r0, r4
 80024ca:	4699      	mov	r9, r3
 80024cc:	4643      	mov	r3, r8
 80024ce:	4370      	muls	r0, r6
 80024d0:	435c      	muls	r4, r3
 80024d2:	437e      	muls	r6, r7
 80024d4:	435f      	muls	r7, r3
 80024d6:	0c03      	lsrs	r3, r0, #16
 80024d8:	4698      	mov	r8, r3
 80024da:	19a4      	adds	r4, r4, r6
 80024dc:	4444      	add	r4, r8
 80024de:	444a      	add	r2, r9
 80024e0:	9703      	str	r7, [sp, #12]
 80024e2:	42a6      	cmp	r6, r4
 80024e4:	d904      	bls.n	80024f0 <__aeabi_dmul+0x1d4>
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	025b      	lsls	r3, r3, #9
 80024ea:	4698      	mov	r8, r3
 80024ec:	4447      	add	r7, r8
 80024ee:	9703      	str	r7, [sp, #12]
 80024f0:	0423      	lsls	r3, r4, #16
 80024f2:	9e02      	ldr	r6, [sp, #8]
 80024f4:	469a      	mov	sl, r3
 80024f6:	9b05      	ldr	r3, [sp, #20]
 80024f8:	445e      	add	r6, fp
 80024fa:	4698      	mov	r8, r3
 80024fc:	42ae      	cmp	r6, r5
 80024fe:	41ad      	sbcs	r5, r5
 8002500:	1876      	adds	r6, r6, r1
 8002502:	428e      	cmp	r6, r1
 8002504:	4189      	sbcs	r1, r1
 8002506:	0400      	lsls	r0, r0, #16
 8002508:	0c00      	lsrs	r0, r0, #16
 800250a:	4450      	add	r0, sl
 800250c:	4440      	add	r0, r8
 800250e:	426d      	negs	r5, r5
 8002510:	1947      	adds	r7, r0, r5
 8002512:	46b8      	mov	r8, r7
 8002514:	4693      	mov	fp, r2
 8002516:	4249      	negs	r1, r1
 8002518:	4689      	mov	r9, r1
 800251a:	44c3      	add	fp, r8
 800251c:	44d9      	add	r9, fp
 800251e:	4298      	cmp	r0, r3
 8002520:	4180      	sbcs	r0, r0
 8002522:	45a8      	cmp	r8, r5
 8002524:	41ad      	sbcs	r5, r5
 8002526:	4593      	cmp	fp, r2
 8002528:	4192      	sbcs	r2, r2
 800252a:	4589      	cmp	r9, r1
 800252c:	4189      	sbcs	r1, r1
 800252e:	426d      	negs	r5, r5
 8002530:	4240      	negs	r0, r0
 8002532:	4328      	orrs	r0, r5
 8002534:	0c24      	lsrs	r4, r4, #16
 8002536:	4252      	negs	r2, r2
 8002538:	4249      	negs	r1, r1
 800253a:	430a      	orrs	r2, r1
 800253c:	9b03      	ldr	r3, [sp, #12]
 800253e:	1900      	adds	r0, r0, r4
 8002540:	1880      	adds	r0, r0, r2
 8002542:	18c7      	adds	r7, r0, r3
 8002544:	464b      	mov	r3, r9
 8002546:	0ddc      	lsrs	r4, r3, #23
 8002548:	9b04      	ldr	r3, [sp, #16]
 800254a:	0275      	lsls	r5, r6, #9
 800254c:	431d      	orrs	r5, r3
 800254e:	1e6a      	subs	r2, r5, #1
 8002550:	4195      	sbcs	r5, r2
 8002552:	464b      	mov	r3, r9
 8002554:	0df6      	lsrs	r6, r6, #23
 8002556:	027f      	lsls	r7, r7, #9
 8002558:	4335      	orrs	r5, r6
 800255a:	025a      	lsls	r2, r3, #9
 800255c:	433c      	orrs	r4, r7
 800255e:	4315      	orrs	r5, r2
 8002560:	01fb      	lsls	r3, r7, #7
 8002562:	d400      	bmi.n	8002566 <__aeabi_dmul+0x24a>
 8002564:	e11c      	b.n	80027a0 <__aeabi_dmul+0x484>
 8002566:	2101      	movs	r1, #1
 8002568:	086a      	lsrs	r2, r5, #1
 800256a:	400d      	ands	r5, r1
 800256c:	4315      	orrs	r5, r2
 800256e:	07e2      	lsls	r2, r4, #31
 8002570:	4315      	orrs	r5, r2
 8002572:	0864      	lsrs	r4, r4, #1
 8002574:	494f      	ldr	r1, [pc, #316]	; (80026b4 <__aeabi_dmul+0x398>)
 8002576:	4461      	add	r1, ip
 8002578:	2900      	cmp	r1, #0
 800257a:	dc00      	bgt.n	800257e <__aeabi_dmul+0x262>
 800257c:	e0b0      	b.n	80026e0 <__aeabi_dmul+0x3c4>
 800257e:	076b      	lsls	r3, r5, #29
 8002580:	d009      	beq.n	8002596 <__aeabi_dmul+0x27a>
 8002582:	220f      	movs	r2, #15
 8002584:	402a      	ands	r2, r5
 8002586:	2a04      	cmp	r2, #4
 8002588:	d005      	beq.n	8002596 <__aeabi_dmul+0x27a>
 800258a:	1d2a      	adds	r2, r5, #4
 800258c:	42aa      	cmp	r2, r5
 800258e:	41ad      	sbcs	r5, r5
 8002590:	426d      	negs	r5, r5
 8002592:	1964      	adds	r4, r4, r5
 8002594:	0015      	movs	r5, r2
 8002596:	01e3      	lsls	r3, r4, #7
 8002598:	d504      	bpl.n	80025a4 <__aeabi_dmul+0x288>
 800259a:	2180      	movs	r1, #128	; 0x80
 800259c:	4a46      	ldr	r2, [pc, #280]	; (80026b8 <__aeabi_dmul+0x39c>)
 800259e:	00c9      	lsls	r1, r1, #3
 80025a0:	4014      	ands	r4, r2
 80025a2:	4461      	add	r1, ip
 80025a4:	4a45      	ldr	r2, [pc, #276]	; (80026bc <__aeabi_dmul+0x3a0>)
 80025a6:	4291      	cmp	r1, r2
 80025a8:	dd00      	ble.n	80025ac <__aeabi_dmul+0x290>
 80025aa:	e726      	b.n	80023fa <__aeabi_dmul+0xde>
 80025ac:	0762      	lsls	r2, r4, #29
 80025ae:	08ed      	lsrs	r5, r5, #3
 80025b0:	0264      	lsls	r4, r4, #9
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	4315      	orrs	r5, r2
 80025b6:	0b24      	lsrs	r4, r4, #12
 80025b8:	0d4a      	lsrs	r2, r1, #21
 80025ba:	e710      	b.n	80023de <__aeabi_dmul+0xc2>
 80025bc:	4652      	mov	r2, sl
 80025be:	4332      	orrs	r2, r6
 80025c0:	d100      	bne.n	80025c4 <__aeabi_dmul+0x2a8>
 80025c2:	e07f      	b.n	80026c4 <__aeabi_dmul+0x3a8>
 80025c4:	2e00      	cmp	r6, #0
 80025c6:	d100      	bne.n	80025ca <__aeabi_dmul+0x2ae>
 80025c8:	e0dc      	b.n	8002784 <__aeabi_dmul+0x468>
 80025ca:	0030      	movs	r0, r6
 80025cc:	f000 fd96 	bl	80030fc <__clzsi2>
 80025d0:	0002      	movs	r2, r0
 80025d2:	3a0b      	subs	r2, #11
 80025d4:	231d      	movs	r3, #29
 80025d6:	0001      	movs	r1, r0
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	4652      	mov	r2, sl
 80025dc:	3908      	subs	r1, #8
 80025de:	40da      	lsrs	r2, r3
 80025e0:	408e      	lsls	r6, r1
 80025e2:	4316      	orrs	r6, r2
 80025e4:	4652      	mov	r2, sl
 80025e6:	408a      	lsls	r2, r1
 80025e8:	9b00      	ldr	r3, [sp, #0]
 80025ea:	4935      	ldr	r1, [pc, #212]	; (80026c0 <__aeabi_dmul+0x3a4>)
 80025ec:	1a18      	subs	r0, r3, r0
 80025ee:	0003      	movs	r3, r0
 80025f0:	468c      	mov	ip, r1
 80025f2:	4463      	add	r3, ip
 80025f4:	2000      	movs	r0, #0
 80025f6:	9300      	str	r3, [sp, #0]
 80025f8:	e6d3      	b.n	80023a2 <__aeabi_dmul+0x86>
 80025fa:	0025      	movs	r5, r4
 80025fc:	4305      	orrs	r5, r0
 80025fe:	d04a      	beq.n	8002696 <__aeabi_dmul+0x37a>
 8002600:	2c00      	cmp	r4, #0
 8002602:	d100      	bne.n	8002606 <__aeabi_dmul+0x2ea>
 8002604:	e0b0      	b.n	8002768 <__aeabi_dmul+0x44c>
 8002606:	0020      	movs	r0, r4
 8002608:	f000 fd78 	bl	80030fc <__clzsi2>
 800260c:	0001      	movs	r1, r0
 800260e:	0002      	movs	r2, r0
 8002610:	390b      	subs	r1, #11
 8002612:	231d      	movs	r3, #29
 8002614:	0010      	movs	r0, r2
 8002616:	1a5b      	subs	r3, r3, r1
 8002618:	0031      	movs	r1, r6
 800261a:	0035      	movs	r5, r6
 800261c:	3808      	subs	r0, #8
 800261e:	4084      	lsls	r4, r0
 8002620:	40d9      	lsrs	r1, r3
 8002622:	4085      	lsls	r5, r0
 8002624:	430c      	orrs	r4, r1
 8002626:	4826      	ldr	r0, [pc, #152]	; (80026c0 <__aeabi_dmul+0x3a4>)
 8002628:	1a83      	subs	r3, r0, r2
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2300      	movs	r3, #0
 800262e:	4699      	mov	r9, r3
 8002630:	469b      	mov	fp, r3
 8002632:	e697      	b.n	8002364 <__aeabi_dmul+0x48>
 8002634:	0005      	movs	r5, r0
 8002636:	4325      	orrs	r5, r4
 8002638:	d126      	bne.n	8002688 <__aeabi_dmul+0x36c>
 800263a:	2208      	movs	r2, #8
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	2302      	movs	r3, #2
 8002640:	2400      	movs	r4, #0
 8002642:	4691      	mov	r9, r2
 8002644:	469b      	mov	fp, r3
 8002646:	e68d      	b.n	8002364 <__aeabi_dmul+0x48>
 8002648:	4652      	mov	r2, sl
 800264a:	9b00      	ldr	r3, [sp, #0]
 800264c:	4332      	orrs	r2, r6
 800264e:	d110      	bne.n	8002672 <__aeabi_dmul+0x356>
 8002650:	4915      	ldr	r1, [pc, #84]	; (80026a8 <__aeabi_dmul+0x38c>)
 8002652:	2600      	movs	r6, #0
 8002654:	468c      	mov	ip, r1
 8002656:	4463      	add	r3, ip
 8002658:	4649      	mov	r1, r9
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	2302      	movs	r3, #2
 800265e:	4319      	orrs	r1, r3
 8002660:	4689      	mov	r9, r1
 8002662:	2002      	movs	r0, #2
 8002664:	e69d      	b.n	80023a2 <__aeabi_dmul+0x86>
 8002666:	465b      	mov	r3, fp
 8002668:	9701      	str	r7, [sp, #4]
 800266a:	2b02      	cmp	r3, #2
 800266c:	d000      	beq.n	8002670 <__aeabi_dmul+0x354>
 800266e:	e6ad      	b.n	80023cc <__aeabi_dmul+0xb0>
 8002670:	e6c3      	b.n	80023fa <__aeabi_dmul+0xde>
 8002672:	4a0d      	ldr	r2, [pc, #52]	; (80026a8 <__aeabi_dmul+0x38c>)
 8002674:	2003      	movs	r0, #3
 8002676:	4694      	mov	ip, r2
 8002678:	4463      	add	r3, ip
 800267a:	464a      	mov	r2, r9
 800267c:	9300      	str	r3, [sp, #0]
 800267e:	2303      	movs	r3, #3
 8002680:	431a      	orrs	r2, r3
 8002682:	4691      	mov	r9, r2
 8002684:	4652      	mov	r2, sl
 8002686:	e68c      	b.n	80023a2 <__aeabi_dmul+0x86>
 8002688:	220c      	movs	r2, #12
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2303      	movs	r3, #3
 800268e:	0005      	movs	r5, r0
 8002690:	4691      	mov	r9, r2
 8002692:	469b      	mov	fp, r3
 8002694:	e666      	b.n	8002364 <__aeabi_dmul+0x48>
 8002696:	2304      	movs	r3, #4
 8002698:	4699      	mov	r9, r3
 800269a:	2300      	movs	r3, #0
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	3301      	adds	r3, #1
 80026a0:	2400      	movs	r4, #0
 80026a2:	469b      	mov	fp, r3
 80026a4:	e65e      	b.n	8002364 <__aeabi_dmul+0x48>
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	000007ff 	.word	0x000007ff
 80026ac:	fffffc01 	.word	0xfffffc01
 80026b0:	08009b74 	.word	0x08009b74
 80026b4:	000003ff 	.word	0x000003ff
 80026b8:	feffffff 	.word	0xfeffffff
 80026bc:	000007fe 	.word	0x000007fe
 80026c0:	fffffc0d 	.word	0xfffffc0d
 80026c4:	4649      	mov	r1, r9
 80026c6:	2301      	movs	r3, #1
 80026c8:	4319      	orrs	r1, r3
 80026ca:	4689      	mov	r9, r1
 80026cc:	2600      	movs	r6, #0
 80026ce:	2001      	movs	r0, #1
 80026d0:	e667      	b.n	80023a2 <__aeabi_dmul+0x86>
 80026d2:	2300      	movs	r3, #0
 80026d4:	2480      	movs	r4, #128	; 0x80
 80026d6:	2500      	movs	r5, #0
 80026d8:	4a43      	ldr	r2, [pc, #268]	; (80027e8 <__aeabi_dmul+0x4cc>)
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	0324      	lsls	r4, r4, #12
 80026de:	e67e      	b.n	80023de <__aeabi_dmul+0xc2>
 80026e0:	2001      	movs	r0, #1
 80026e2:	1a40      	subs	r0, r0, r1
 80026e4:	2838      	cmp	r0, #56	; 0x38
 80026e6:	dd00      	ble.n	80026ea <__aeabi_dmul+0x3ce>
 80026e8:	e676      	b.n	80023d8 <__aeabi_dmul+0xbc>
 80026ea:	281f      	cmp	r0, #31
 80026ec:	dd5b      	ble.n	80027a6 <__aeabi_dmul+0x48a>
 80026ee:	221f      	movs	r2, #31
 80026f0:	0023      	movs	r3, r4
 80026f2:	4252      	negs	r2, r2
 80026f4:	1a51      	subs	r1, r2, r1
 80026f6:	40cb      	lsrs	r3, r1
 80026f8:	0019      	movs	r1, r3
 80026fa:	2820      	cmp	r0, #32
 80026fc:	d003      	beq.n	8002706 <__aeabi_dmul+0x3ea>
 80026fe:	4a3b      	ldr	r2, [pc, #236]	; (80027ec <__aeabi_dmul+0x4d0>)
 8002700:	4462      	add	r2, ip
 8002702:	4094      	lsls	r4, r2
 8002704:	4325      	orrs	r5, r4
 8002706:	1e6a      	subs	r2, r5, #1
 8002708:	4195      	sbcs	r5, r2
 800270a:	002a      	movs	r2, r5
 800270c:	430a      	orrs	r2, r1
 800270e:	2107      	movs	r1, #7
 8002710:	000d      	movs	r5, r1
 8002712:	2400      	movs	r4, #0
 8002714:	4015      	ands	r5, r2
 8002716:	4211      	tst	r1, r2
 8002718:	d05b      	beq.n	80027d2 <__aeabi_dmul+0x4b6>
 800271a:	210f      	movs	r1, #15
 800271c:	2400      	movs	r4, #0
 800271e:	4011      	ands	r1, r2
 8002720:	2904      	cmp	r1, #4
 8002722:	d053      	beq.n	80027cc <__aeabi_dmul+0x4b0>
 8002724:	1d11      	adds	r1, r2, #4
 8002726:	4291      	cmp	r1, r2
 8002728:	4192      	sbcs	r2, r2
 800272a:	4252      	negs	r2, r2
 800272c:	18a4      	adds	r4, r4, r2
 800272e:	000a      	movs	r2, r1
 8002730:	0223      	lsls	r3, r4, #8
 8002732:	d54b      	bpl.n	80027cc <__aeabi_dmul+0x4b0>
 8002734:	2201      	movs	r2, #1
 8002736:	2400      	movs	r4, #0
 8002738:	2500      	movs	r5, #0
 800273a:	e650      	b.n	80023de <__aeabi_dmul+0xc2>
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	031b      	lsls	r3, r3, #12
 8002740:	421c      	tst	r4, r3
 8002742:	d009      	beq.n	8002758 <__aeabi_dmul+0x43c>
 8002744:	421e      	tst	r6, r3
 8002746:	d107      	bne.n	8002758 <__aeabi_dmul+0x43c>
 8002748:	4333      	orrs	r3, r6
 800274a:	031c      	lsls	r4, r3, #12
 800274c:	4643      	mov	r3, r8
 800274e:	0015      	movs	r5, r2
 8002750:	0b24      	lsrs	r4, r4, #12
 8002752:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <__aeabi_dmul+0x4cc>)
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	e642      	b.n	80023de <__aeabi_dmul+0xc2>
 8002758:	2280      	movs	r2, #128	; 0x80
 800275a:	0312      	lsls	r2, r2, #12
 800275c:	4314      	orrs	r4, r2
 800275e:	0324      	lsls	r4, r4, #12
 8002760:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <__aeabi_dmul+0x4cc>)
 8002762:	0b24      	lsrs	r4, r4, #12
 8002764:	9701      	str	r7, [sp, #4]
 8002766:	e63a      	b.n	80023de <__aeabi_dmul+0xc2>
 8002768:	f000 fcc8 	bl	80030fc <__clzsi2>
 800276c:	0001      	movs	r1, r0
 800276e:	0002      	movs	r2, r0
 8002770:	3115      	adds	r1, #21
 8002772:	3220      	adds	r2, #32
 8002774:	291c      	cmp	r1, #28
 8002776:	dc00      	bgt.n	800277a <__aeabi_dmul+0x45e>
 8002778:	e74b      	b.n	8002612 <__aeabi_dmul+0x2f6>
 800277a:	0034      	movs	r4, r6
 800277c:	3808      	subs	r0, #8
 800277e:	2500      	movs	r5, #0
 8002780:	4084      	lsls	r4, r0
 8002782:	e750      	b.n	8002626 <__aeabi_dmul+0x30a>
 8002784:	f000 fcba 	bl	80030fc <__clzsi2>
 8002788:	0003      	movs	r3, r0
 800278a:	001a      	movs	r2, r3
 800278c:	3215      	adds	r2, #21
 800278e:	3020      	adds	r0, #32
 8002790:	2a1c      	cmp	r2, #28
 8002792:	dc00      	bgt.n	8002796 <__aeabi_dmul+0x47a>
 8002794:	e71e      	b.n	80025d4 <__aeabi_dmul+0x2b8>
 8002796:	4656      	mov	r6, sl
 8002798:	3b08      	subs	r3, #8
 800279a:	2200      	movs	r2, #0
 800279c:	409e      	lsls	r6, r3
 800279e:	e723      	b.n	80025e8 <__aeabi_dmul+0x2cc>
 80027a0:	9b00      	ldr	r3, [sp, #0]
 80027a2:	469c      	mov	ip, r3
 80027a4:	e6e6      	b.n	8002574 <__aeabi_dmul+0x258>
 80027a6:	4912      	ldr	r1, [pc, #72]	; (80027f0 <__aeabi_dmul+0x4d4>)
 80027a8:	0022      	movs	r2, r4
 80027aa:	4461      	add	r1, ip
 80027ac:	002e      	movs	r6, r5
 80027ae:	408d      	lsls	r5, r1
 80027b0:	408a      	lsls	r2, r1
 80027b2:	40c6      	lsrs	r6, r0
 80027b4:	1e69      	subs	r1, r5, #1
 80027b6:	418d      	sbcs	r5, r1
 80027b8:	4332      	orrs	r2, r6
 80027ba:	432a      	orrs	r2, r5
 80027bc:	40c4      	lsrs	r4, r0
 80027be:	0753      	lsls	r3, r2, #29
 80027c0:	d0b6      	beq.n	8002730 <__aeabi_dmul+0x414>
 80027c2:	210f      	movs	r1, #15
 80027c4:	4011      	ands	r1, r2
 80027c6:	2904      	cmp	r1, #4
 80027c8:	d1ac      	bne.n	8002724 <__aeabi_dmul+0x408>
 80027ca:	e7b1      	b.n	8002730 <__aeabi_dmul+0x414>
 80027cc:	0765      	lsls	r5, r4, #29
 80027ce:	0264      	lsls	r4, r4, #9
 80027d0:	0b24      	lsrs	r4, r4, #12
 80027d2:	08d2      	lsrs	r2, r2, #3
 80027d4:	4315      	orrs	r5, r2
 80027d6:	2200      	movs	r2, #0
 80027d8:	e601      	b.n	80023de <__aeabi_dmul+0xc2>
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	0312      	lsls	r2, r2, #12
 80027de:	4314      	orrs	r4, r2
 80027e0:	0324      	lsls	r4, r4, #12
 80027e2:	4a01      	ldr	r2, [pc, #4]	; (80027e8 <__aeabi_dmul+0x4cc>)
 80027e4:	0b24      	lsrs	r4, r4, #12
 80027e6:	e5fa      	b.n	80023de <__aeabi_dmul+0xc2>
 80027e8:	000007ff 	.word	0x000007ff
 80027ec:	0000043e 	.word	0x0000043e
 80027f0:	0000041e 	.word	0x0000041e

080027f4 <__aeabi_dsub>:
 80027f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027f6:	4657      	mov	r7, sl
 80027f8:	464e      	mov	r6, r9
 80027fa:	4645      	mov	r5, r8
 80027fc:	46de      	mov	lr, fp
 80027fe:	b5e0      	push	{r5, r6, r7, lr}
 8002800:	001e      	movs	r6, r3
 8002802:	0017      	movs	r7, r2
 8002804:	004a      	lsls	r2, r1, #1
 8002806:	030b      	lsls	r3, r1, #12
 8002808:	0d52      	lsrs	r2, r2, #21
 800280a:	0a5b      	lsrs	r3, r3, #9
 800280c:	4690      	mov	r8, r2
 800280e:	0f42      	lsrs	r2, r0, #29
 8002810:	431a      	orrs	r2, r3
 8002812:	0fcd      	lsrs	r5, r1, #31
 8002814:	4ccd      	ldr	r4, [pc, #820]	; (8002b4c <__aeabi_dsub+0x358>)
 8002816:	0331      	lsls	r1, r6, #12
 8002818:	00c3      	lsls	r3, r0, #3
 800281a:	4694      	mov	ip, r2
 800281c:	0070      	lsls	r0, r6, #1
 800281e:	0f7a      	lsrs	r2, r7, #29
 8002820:	0a49      	lsrs	r1, r1, #9
 8002822:	00ff      	lsls	r7, r7, #3
 8002824:	469a      	mov	sl, r3
 8002826:	46b9      	mov	r9, r7
 8002828:	0d40      	lsrs	r0, r0, #21
 800282a:	0ff6      	lsrs	r6, r6, #31
 800282c:	4311      	orrs	r1, r2
 800282e:	42a0      	cmp	r0, r4
 8002830:	d100      	bne.n	8002834 <__aeabi_dsub+0x40>
 8002832:	e0b1      	b.n	8002998 <__aeabi_dsub+0x1a4>
 8002834:	2201      	movs	r2, #1
 8002836:	4056      	eors	r6, r2
 8002838:	46b3      	mov	fp, r6
 800283a:	42b5      	cmp	r5, r6
 800283c:	d100      	bne.n	8002840 <__aeabi_dsub+0x4c>
 800283e:	e088      	b.n	8002952 <__aeabi_dsub+0x15e>
 8002840:	4642      	mov	r2, r8
 8002842:	1a12      	subs	r2, r2, r0
 8002844:	2a00      	cmp	r2, #0
 8002846:	dc00      	bgt.n	800284a <__aeabi_dsub+0x56>
 8002848:	e0ae      	b.n	80029a8 <__aeabi_dsub+0x1b4>
 800284a:	2800      	cmp	r0, #0
 800284c:	d100      	bne.n	8002850 <__aeabi_dsub+0x5c>
 800284e:	e0c1      	b.n	80029d4 <__aeabi_dsub+0x1e0>
 8002850:	48be      	ldr	r0, [pc, #760]	; (8002b4c <__aeabi_dsub+0x358>)
 8002852:	4580      	cmp	r8, r0
 8002854:	d100      	bne.n	8002858 <__aeabi_dsub+0x64>
 8002856:	e151      	b.n	8002afc <__aeabi_dsub+0x308>
 8002858:	2080      	movs	r0, #128	; 0x80
 800285a:	0400      	lsls	r0, r0, #16
 800285c:	4301      	orrs	r1, r0
 800285e:	2a38      	cmp	r2, #56	; 0x38
 8002860:	dd00      	ble.n	8002864 <__aeabi_dsub+0x70>
 8002862:	e17b      	b.n	8002b5c <__aeabi_dsub+0x368>
 8002864:	2a1f      	cmp	r2, #31
 8002866:	dd00      	ble.n	800286a <__aeabi_dsub+0x76>
 8002868:	e1ee      	b.n	8002c48 <__aeabi_dsub+0x454>
 800286a:	2020      	movs	r0, #32
 800286c:	003e      	movs	r6, r7
 800286e:	1a80      	subs	r0, r0, r2
 8002870:	000c      	movs	r4, r1
 8002872:	40d6      	lsrs	r6, r2
 8002874:	40d1      	lsrs	r1, r2
 8002876:	4087      	lsls	r7, r0
 8002878:	4662      	mov	r2, ip
 800287a:	4084      	lsls	r4, r0
 800287c:	1a52      	subs	r2, r2, r1
 800287e:	1e78      	subs	r0, r7, #1
 8002880:	4187      	sbcs	r7, r0
 8002882:	4694      	mov	ip, r2
 8002884:	4334      	orrs	r4, r6
 8002886:	4327      	orrs	r7, r4
 8002888:	1bdc      	subs	r4, r3, r7
 800288a:	42a3      	cmp	r3, r4
 800288c:	419b      	sbcs	r3, r3
 800288e:	4662      	mov	r2, ip
 8002890:	425b      	negs	r3, r3
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	4699      	mov	r9, r3
 8002896:	464b      	mov	r3, r9
 8002898:	021b      	lsls	r3, r3, #8
 800289a:	d400      	bmi.n	800289e <__aeabi_dsub+0xaa>
 800289c:	e118      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 800289e:	464b      	mov	r3, r9
 80028a0:	0258      	lsls	r0, r3, #9
 80028a2:	0a43      	lsrs	r3, r0, #9
 80028a4:	4699      	mov	r9, r3
 80028a6:	464b      	mov	r3, r9
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d100      	bne.n	80028ae <__aeabi_dsub+0xba>
 80028ac:	e137      	b.n	8002b1e <__aeabi_dsub+0x32a>
 80028ae:	4648      	mov	r0, r9
 80028b0:	f000 fc24 	bl	80030fc <__clzsi2>
 80028b4:	0001      	movs	r1, r0
 80028b6:	3908      	subs	r1, #8
 80028b8:	2320      	movs	r3, #32
 80028ba:	0022      	movs	r2, r4
 80028bc:	4648      	mov	r0, r9
 80028be:	1a5b      	subs	r3, r3, r1
 80028c0:	40da      	lsrs	r2, r3
 80028c2:	4088      	lsls	r0, r1
 80028c4:	408c      	lsls	r4, r1
 80028c6:	4643      	mov	r3, r8
 80028c8:	4310      	orrs	r0, r2
 80028ca:	4588      	cmp	r8, r1
 80028cc:	dd00      	ble.n	80028d0 <__aeabi_dsub+0xdc>
 80028ce:	e136      	b.n	8002b3e <__aeabi_dsub+0x34a>
 80028d0:	1ac9      	subs	r1, r1, r3
 80028d2:	1c4b      	adds	r3, r1, #1
 80028d4:	2b1f      	cmp	r3, #31
 80028d6:	dd00      	ble.n	80028da <__aeabi_dsub+0xe6>
 80028d8:	e0ea      	b.n	8002ab0 <__aeabi_dsub+0x2bc>
 80028da:	2220      	movs	r2, #32
 80028dc:	0026      	movs	r6, r4
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	0001      	movs	r1, r0
 80028e2:	4094      	lsls	r4, r2
 80028e4:	40de      	lsrs	r6, r3
 80028e6:	40d8      	lsrs	r0, r3
 80028e8:	2300      	movs	r3, #0
 80028ea:	4091      	lsls	r1, r2
 80028ec:	1e62      	subs	r2, r4, #1
 80028ee:	4194      	sbcs	r4, r2
 80028f0:	4681      	mov	r9, r0
 80028f2:	4698      	mov	r8, r3
 80028f4:	4331      	orrs	r1, r6
 80028f6:	430c      	orrs	r4, r1
 80028f8:	0763      	lsls	r3, r4, #29
 80028fa:	d009      	beq.n	8002910 <__aeabi_dsub+0x11c>
 80028fc:	230f      	movs	r3, #15
 80028fe:	4023      	ands	r3, r4
 8002900:	2b04      	cmp	r3, #4
 8002902:	d005      	beq.n	8002910 <__aeabi_dsub+0x11c>
 8002904:	1d23      	adds	r3, r4, #4
 8002906:	42a3      	cmp	r3, r4
 8002908:	41a4      	sbcs	r4, r4
 800290a:	4264      	negs	r4, r4
 800290c:	44a1      	add	r9, r4
 800290e:	001c      	movs	r4, r3
 8002910:	464b      	mov	r3, r9
 8002912:	021b      	lsls	r3, r3, #8
 8002914:	d400      	bmi.n	8002918 <__aeabi_dsub+0x124>
 8002916:	e0de      	b.n	8002ad6 <__aeabi_dsub+0x2e2>
 8002918:	4641      	mov	r1, r8
 800291a:	4b8c      	ldr	r3, [pc, #560]	; (8002b4c <__aeabi_dsub+0x358>)
 800291c:	3101      	adds	r1, #1
 800291e:	4299      	cmp	r1, r3
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x130>
 8002922:	e0e7      	b.n	8002af4 <__aeabi_dsub+0x300>
 8002924:	464b      	mov	r3, r9
 8002926:	488a      	ldr	r0, [pc, #552]	; (8002b50 <__aeabi_dsub+0x35c>)
 8002928:	08e4      	lsrs	r4, r4, #3
 800292a:	4003      	ands	r3, r0
 800292c:	0018      	movs	r0, r3
 800292e:	0549      	lsls	r1, r1, #21
 8002930:	075b      	lsls	r3, r3, #29
 8002932:	0240      	lsls	r0, r0, #9
 8002934:	4323      	orrs	r3, r4
 8002936:	0d4a      	lsrs	r2, r1, #21
 8002938:	0b04      	lsrs	r4, r0, #12
 800293a:	0512      	lsls	r2, r2, #20
 800293c:	07ed      	lsls	r5, r5, #31
 800293e:	4322      	orrs	r2, r4
 8002940:	432a      	orrs	r2, r5
 8002942:	0018      	movs	r0, r3
 8002944:	0011      	movs	r1, r2
 8002946:	bcf0      	pop	{r4, r5, r6, r7}
 8002948:	46bb      	mov	fp, r7
 800294a:	46b2      	mov	sl, r6
 800294c:	46a9      	mov	r9, r5
 800294e:	46a0      	mov	r8, r4
 8002950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002952:	4642      	mov	r2, r8
 8002954:	1a12      	subs	r2, r2, r0
 8002956:	2a00      	cmp	r2, #0
 8002958:	dd52      	ble.n	8002a00 <__aeabi_dsub+0x20c>
 800295a:	2800      	cmp	r0, #0
 800295c:	d100      	bne.n	8002960 <__aeabi_dsub+0x16c>
 800295e:	e09c      	b.n	8002a9a <__aeabi_dsub+0x2a6>
 8002960:	45a0      	cmp	r8, r4
 8002962:	d100      	bne.n	8002966 <__aeabi_dsub+0x172>
 8002964:	e0ca      	b.n	8002afc <__aeabi_dsub+0x308>
 8002966:	2080      	movs	r0, #128	; 0x80
 8002968:	0400      	lsls	r0, r0, #16
 800296a:	4301      	orrs	r1, r0
 800296c:	2a38      	cmp	r2, #56	; 0x38
 800296e:	dd00      	ble.n	8002972 <__aeabi_dsub+0x17e>
 8002970:	e149      	b.n	8002c06 <__aeabi_dsub+0x412>
 8002972:	2a1f      	cmp	r2, #31
 8002974:	dc00      	bgt.n	8002978 <__aeabi_dsub+0x184>
 8002976:	e197      	b.n	8002ca8 <__aeabi_dsub+0x4b4>
 8002978:	0010      	movs	r0, r2
 800297a:	000e      	movs	r6, r1
 800297c:	3820      	subs	r0, #32
 800297e:	40c6      	lsrs	r6, r0
 8002980:	2a20      	cmp	r2, #32
 8002982:	d004      	beq.n	800298e <__aeabi_dsub+0x19a>
 8002984:	2040      	movs	r0, #64	; 0x40
 8002986:	1a82      	subs	r2, r0, r2
 8002988:	4091      	lsls	r1, r2
 800298a:	430f      	orrs	r7, r1
 800298c:	46b9      	mov	r9, r7
 800298e:	464c      	mov	r4, r9
 8002990:	1e62      	subs	r2, r4, #1
 8002992:	4194      	sbcs	r4, r2
 8002994:	4334      	orrs	r4, r6
 8002996:	e13a      	b.n	8002c0e <__aeabi_dsub+0x41a>
 8002998:	000a      	movs	r2, r1
 800299a:	433a      	orrs	r2, r7
 800299c:	d028      	beq.n	80029f0 <__aeabi_dsub+0x1fc>
 800299e:	46b3      	mov	fp, r6
 80029a0:	42b5      	cmp	r5, r6
 80029a2:	d02b      	beq.n	80029fc <__aeabi_dsub+0x208>
 80029a4:	4a6b      	ldr	r2, [pc, #428]	; (8002b54 <__aeabi_dsub+0x360>)
 80029a6:	4442      	add	r2, r8
 80029a8:	2a00      	cmp	r2, #0
 80029aa:	d05d      	beq.n	8002a68 <__aeabi_dsub+0x274>
 80029ac:	4642      	mov	r2, r8
 80029ae:	4644      	mov	r4, r8
 80029b0:	1a82      	subs	r2, r0, r2
 80029b2:	2c00      	cmp	r4, #0
 80029b4:	d000      	beq.n	80029b8 <__aeabi_dsub+0x1c4>
 80029b6:	e0f5      	b.n	8002ba4 <__aeabi_dsub+0x3b0>
 80029b8:	4665      	mov	r5, ip
 80029ba:	431d      	orrs	r5, r3
 80029bc:	d100      	bne.n	80029c0 <__aeabi_dsub+0x1cc>
 80029be:	e19c      	b.n	8002cfa <__aeabi_dsub+0x506>
 80029c0:	1e55      	subs	r5, r2, #1
 80029c2:	2a01      	cmp	r2, #1
 80029c4:	d100      	bne.n	80029c8 <__aeabi_dsub+0x1d4>
 80029c6:	e1fb      	b.n	8002dc0 <__aeabi_dsub+0x5cc>
 80029c8:	4c60      	ldr	r4, [pc, #384]	; (8002b4c <__aeabi_dsub+0x358>)
 80029ca:	42a2      	cmp	r2, r4
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x1dc>
 80029ce:	e1bd      	b.n	8002d4c <__aeabi_dsub+0x558>
 80029d0:	002a      	movs	r2, r5
 80029d2:	e0f0      	b.n	8002bb6 <__aeabi_dsub+0x3c2>
 80029d4:	0008      	movs	r0, r1
 80029d6:	4338      	orrs	r0, r7
 80029d8:	d100      	bne.n	80029dc <__aeabi_dsub+0x1e8>
 80029da:	e0c3      	b.n	8002b64 <__aeabi_dsub+0x370>
 80029dc:	1e50      	subs	r0, r2, #1
 80029de:	2a01      	cmp	r2, #1
 80029e0:	d100      	bne.n	80029e4 <__aeabi_dsub+0x1f0>
 80029e2:	e1a8      	b.n	8002d36 <__aeabi_dsub+0x542>
 80029e4:	4c59      	ldr	r4, [pc, #356]	; (8002b4c <__aeabi_dsub+0x358>)
 80029e6:	42a2      	cmp	r2, r4
 80029e8:	d100      	bne.n	80029ec <__aeabi_dsub+0x1f8>
 80029ea:	e087      	b.n	8002afc <__aeabi_dsub+0x308>
 80029ec:	0002      	movs	r2, r0
 80029ee:	e736      	b.n	800285e <__aeabi_dsub+0x6a>
 80029f0:	2201      	movs	r2, #1
 80029f2:	4056      	eors	r6, r2
 80029f4:	46b3      	mov	fp, r6
 80029f6:	42b5      	cmp	r5, r6
 80029f8:	d000      	beq.n	80029fc <__aeabi_dsub+0x208>
 80029fa:	e721      	b.n	8002840 <__aeabi_dsub+0x4c>
 80029fc:	4a55      	ldr	r2, [pc, #340]	; (8002b54 <__aeabi_dsub+0x360>)
 80029fe:	4442      	add	r2, r8
 8002a00:	2a00      	cmp	r2, #0
 8002a02:	d100      	bne.n	8002a06 <__aeabi_dsub+0x212>
 8002a04:	e0b5      	b.n	8002b72 <__aeabi_dsub+0x37e>
 8002a06:	4642      	mov	r2, r8
 8002a08:	4644      	mov	r4, r8
 8002a0a:	1a82      	subs	r2, r0, r2
 8002a0c:	2c00      	cmp	r4, #0
 8002a0e:	d100      	bne.n	8002a12 <__aeabi_dsub+0x21e>
 8002a10:	e138      	b.n	8002c84 <__aeabi_dsub+0x490>
 8002a12:	4e4e      	ldr	r6, [pc, #312]	; (8002b4c <__aeabi_dsub+0x358>)
 8002a14:	42b0      	cmp	r0, r6
 8002a16:	d100      	bne.n	8002a1a <__aeabi_dsub+0x226>
 8002a18:	e1de      	b.n	8002dd8 <__aeabi_dsub+0x5e4>
 8002a1a:	2680      	movs	r6, #128	; 0x80
 8002a1c:	4664      	mov	r4, ip
 8002a1e:	0436      	lsls	r6, r6, #16
 8002a20:	4334      	orrs	r4, r6
 8002a22:	46a4      	mov	ip, r4
 8002a24:	2a38      	cmp	r2, #56	; 0x38
 8002a26:	dd00      	ble.n	8002a2a <__aeabi_dsub+0x236>
 8002a28:	e196      	b.n	8002d58 <__aeabi_dsub+0x564>
 8002a2a:	2a1f      	cmp	r2, #31
 8002a2c:	dd00      	ble.n	8002a30 <__aeabi_dsub+0x23c>
 8002a2e:	e224      	b.n	8002e7a <__aeabi_dsub+0x686>
 8002a30:	2620      	movs	r6, #32
 8002a32:	1ab4      	subs	r4, r6, r2
 8002a34:	46a2      	mov	sl, r4
 8002a36:	4664      	mov	r4, ip
 8002a38:	4656      	mov	r6, sl
 8002a3a:	40b4      	lsls	r4, r6
 8002a3c:	46a1      	mov	r9, r4
 8002a3e:	001c      	movs	r4, r3
 8002a40:	464e      	mov	r6, r9
 8002a42:	40d4      	lsrs	r4, r2
 8002a44:	4326      	orrs	r6, r4
 8002a46:	0034      	movs	r4, r6
 8002a48:	4656      	mov	r6, sl
 8002a4a:	40b3      	lsls	r3, r6
 8002a4c:	1e5e      	subs	r6, r3, #1
 8002a4e:	41b3      	sbcs	r3, r6
 8002a50:	431c      	orrs	r4, r3
 8002a52:	4663      	mov	r3, ip
 8002a54:	40d3      	lsrs	r3, r2
 8002a56:	18c9      	adds	r1, r1, r3
 8002a58:	19e4      	adds	r4, r4, r7
 8002a5a:	42bc      	cmp	r4, r7
 8002a5c:	41bf      	sbcs	r7, r7
 8002a5e:	427f      	negs	r7, r7
 8002a60:	46b9      	mov	r9, r7
 8002a62:	4680      	mov	r8, r0
 8002a64:	4489      	add	r9, r1
 8002a66:	e0d8      	b.n	8002c1a <__aeabi_dsub+0x426>
 8002a68:	4640      	mov	r0, r8
 8002a6a:	4c3b      	ldr	r4, [pc, #236]	; (8002b58 <__aeabi_dsub+0x364>)
 8002a6c:	3001      	adds	r0, #1
 8002a6e:	4220      	tst	r0, r4
 8002a70:	d000      	beq.n	8002a74 <__aeabi_dsub+0x280>
 8002a72:	e0b4      	b.n	8002bde <__aeabi_dsub+0x3ea>
 8002a74:	4640      	mov	r0, r8
 8002a76:	2800      	cmp	r0, #0
 8002a78:	d000      	beq.n	8002a7c <__aeabi_dsub+0x288>
 8002a7a:	e144      	b.n	8002d06 <__aeabi_dsub+0x512>
 8002a7c:	4660      	mov	r0, ip
 8002a7e:	4318      	orrs	r0, r3
 8002a80:	d100      	bne.n	8002a84 <__aeabi_dsub+0x290>
 8002a82:	e190      	b.n	8002da6 <__aeabi_dsub+0x5b2>
 8002a84:	0008      	movs	r0, r1
 8002a86:	4338      	orrs	r0, r7
 8002a88:	d000      	beq.n	8002a8c <__aeabi_dsub+0x298>
 8002a8a:	e1aa      	b.n	8002de2 <__aeabi_dsub+0x5ee>
 8002a8c:	4661      	mov	r1, ip
 8002a8e:	08db      	lsrs	r3, r3, #3
 8002a90:	0749      	lsls	r1, r1, #29
 8002a92:	430b      	orrs	r3, r1
 8002a94:	4661      	mov	r1, ip
 8002a96:	08cc      	lsrs	r4, r1, #3
 8002a98:	e027      	b.n	8002aea <__aeabi_dsub+0x2f6>
 8002a9a:	0008      	movs	r0, r1
 8002a9c:	4338      	orrs	r0, r7
 8002a9e:	d061      	beq.n	8002b64 <__aeabi_dsub+0x370>
 8002aa0:	1e50      	subs	r0, r2, #1
 8002aa2:	2a01      	cmp	r2, #1
 8002aa4:	d100      	bne.n	8002aa8 <__aeabi_dsub+0x2b4>
 8002aa6:	e139      	b.n	8002d1c <__aeabi_dsub+0x528>
 8002aa8:	42a2      	cmp	r2, r4
 8002aaa:	d027      	beq.n	8002afc <__aeabi_dsub+0x308>
 8002aac:	0002      	movs	r2, r0
 8002aae:	e75d      	b.n	800296c <__aeabi_dsub+0x178>
 8002ab0:	0002      	movs	r2, r0
 8002ab2:	391f      	subs	r1, #31
 8002ab4:	40ca      	lsrs	r2, r1
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	2b20      	cmp	r3, #32
 8002aba:	d003      	beq.n	8002ac4 <__aeabi_dsub+0x2d0>
 8002abc:	2240      	movs	r2, #64	; 0x40
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	4098      	lsls	r0, r3
 8002ac2:	4304      	orrs	r4, r0
 8002ac4:	1e63      	subs	r3, r4, #1
 8002ac6:	419c      	sbcs	r4, r3
 8002ac8:	2300      	movs	r3, #0
 8002aca:	4699      	mov	r9, r3
 8002acc:	4698      	mov	r8, r3
 8002ace:	430c      	orrs	r4, r1
 8002ad0:	0763      	lsls	r3, r4, #29
 8002ad2:	d000      	beq.n	8002ad6 <__aeabi_dsub+0x2e2>
 8002ad4:	e712      	b.n	80028fc <__aeabi_dsub+0x108>
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	464a      	mov	r2, r9
 8002ada:	08e4      	lsrs	r4, r4, #3
 8002adc:	075b      	lsls	r3, r3, #29
 8002ade:	4323      	orrs	r3, r4
 8002ae0:	08d4      	lsrs	r4, r2, #3
 8002ae2:	4642      	mov	r2, r8
 8002ae4:	4919      	ldr	r1, [pc, #100]	; (8002b4c <__aeabi_dsub+0x358>)
 8002ae6:	428a      	cmp	r2, r1
 8002ae8:	d00e      	beq.n	8002b08 <__aeabi_dsub+0x314>
 8002aea:	0324      	lsls	r4, r4, #12
 8002aec:	0552      	lsls	r2, r2, #21
 8002aee:	0b24      	lsrs	r4, r4, #12
 8002af0:	0d52      	lsrs	r2, r2, #21
 8002af2:	e722      	b.n	800293a <__aeabi_dsub+0x146>
 8002af4:	000a      	movs	r2, r1
 8002af6:	2400      	movs	r4, #0
 8002af8:	2300      	movs	r3, #0
 8002afa:	e71e      	b.n	800293a <__aeabi_dsub+0x146>
 8002afc:	08db      	lsrs	r3, r3, #3
 8002afe:	4662      	mov	r2, ip
 8002b00:	0752      	lsls	r2, r2, #29
 8002b02:	4313      	orrs	r3, r2
 8002b04:	4662      	mov	r2, ip
 8002b06:	08d4      	lsrs	r4, r2, #3
 8002b08:	001a      	movs	r2, r3
 8002b0a:	4322      	orrs	r2, r4
 8002b0c:	d100      	bne.n	8002b10 <__aeabi_dsub+0x31c>
 8002b0e:	e1fc      	b.n	8002f0a <__aeabi_dsub+0x716>
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	0312      	lsls	r2, r2, #12
 8002b14:	4314      	orrs	r4, r2
 8002b16:	0324      	lsls	r4, r4, #12
 8002b18:	4a0c      	ldr	r2, [pc, #48]	; (8002b4c <__aeabi_dsub+0x358>)
 8002b1a:	0b24      	lsrs	r4, r4, #12
 8002b1c:	e70d      	b.n	800293a <__aeabi_dsub+0x146>
 8002b1e:	0020      	movs	r0, r4
 8002b20:	f000 faec 	bl	80030fc <__clzsi2>
 8002b24:	0001      	movs	r1, r0
 8002b26:	3118      	adds	r1, #24
 8002b28:	291f      	cmp	r1, #31
 8002b2a:	dc00      	bgt.n	8002b2e <__aeabi_dsub+0x33a>
 8002b2c:	e6c4      	b.n	80028b8 <__aeabi_dsub+0xc4>
 8002b2e:	3808      	subs	r0, #8
 8002b30:	4084      	lsls	r4, r0
 8002b32:	4643      	mov	r3, r8
 8002b34:	0020      	movs	r0, r4
 8002b36:	2400      	movs	r4, #0
 8002b38:	4588      	cmp	r8, r1
 8002b3a:	dc00      	bgt.n	8002b3e <__aeabi_dsub+0x34a>
 8002b3c:	e6c8      	b.n	80028d0 <__aeabi_dsub+0xdc>
 8002b3e:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <__aeabi_dsub+0x35c>)
 8002b40:	1a5b      	subs	r3, r3, r1
 8002b42:	4010      	ands	r0, r2
 8002b44:	4698      	mov	r8, r3
 8002b46:	4681      	mov	r9, r0
 8002b48:	e6d6      	b.n	80028f8 <__aeabi_dsub+0x104>
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	000007ff 	.word	0x000007ff
 8002b50:	ff7fffff 	.word	0xff7fffff
 8002b54:	fffff801 	.word	0xfffff801
 8002b58:	000007fe 	.word	0x000007fe
 8002b5c:	430f      	orrs	r7, r1
 8002b5e:	1e7a      	subs	r2, r7, #1
 8002b60:	4197      	sbcs	r7, r2
 8002b62:	e691      	b.n	8002888 <__aeabi_dsub+0x94>
 8002b64:	4661      	mov	r1, ip
 8002b66:	08db      	lsrs	r3, r3, #3
 8002b68:	0749      	lsls	r1, r1, #29
 8002b6a:	430b      	orrs	r3, r1
 8002b6c:	4661      	mov	r1, ip
 8002b6e:	08cc      	lsrs	r4, r1, #3
 8002b70:	e7b8      	b.n	8002ae4 <__aeabi_dsub+0x2f0>
 8002b72:	4640      	mov	r0, r8
 8002b74:	4cd3      	ldr	r4, [pc, #844]	; (8002ec4 <__aeabi_dsub+0x6d0>)
 8002b76:	3001      	adds	r0, #1
 8002b78:	4220      	tst	r0, r4
 8002b7a:	d000      	beq.n	8002b7e <__aeabi_dsub+0x38a>
 8002b7c:	e0a2      	b.n	8002cc4 <__aeabi_dsub+0x4d0>
 8002b7e:	4640      	mov	r0, r8
 8002b80:	2800      	cmp	r0, #0
 8002b82:	d000      	beq.n	8002b86 <__aeabi_dsub+0x392>
 8002b84:	e101      	b.n	8002d8a <__aeabi_dsub+0x596>
 8002b86:	4660      	mov	r0, ip
 8002b88:	4318      	orrs	r0, r3
 8002b8a:	d100      	bne.n	8002b8e <__aeabi_dsub+0x39a>
 8002b8c:	e15e      	b.n	8002e4c <__aeabi_dsub+0x658>
 8002b8e:	0008      	movs	r0, r1
 8002b90:	4338      	orrs	r0, r7
 8002b92:	d000      	beq.n	8002b96 <__aeabi_dsub+0x3a2>
 8002b94:	e15f      	b.n	8002e56 <__aeabi_dsub+0x662>
 8002b96:	4661      	mov	r1, ip
 8002b98:	08db      	lsrs	r3, r3, #3
 8002b9a:	0749      	lsls	r1, r1, #29
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	4661      	mov	r1, ip
 8002ba0:	08cc      	lsrs	r4, r1, #3
 8002ba2:	e7a2      	b.n	8002aea <__aeabi_dsub+0x2f6>
 8002ba4:	4dc8      	ldr	r5, [pc, #800]	; (8002ec8 <__aeabi_dsub+0x6d4>)
 8002ba6:	42a8      	cmp	r0, r5
 8002ba8:	d100      	bne.n	8002bac <__aeabi_dsub+0x3b8>
 8002baa:	e0cf      	b.n	8002d4c <__aeabi_dsub+0x558>
 8002bac:	2580      	movs	r5, #128	; 0x80
 8002bae:	4664      	mov	r4, ip
 8002bb0:	042d      	lsls	r5, r5, #16
 8002bb2:	432c      	orrs	r4, r5
 8002bb4:	46a4      	mov	ip, r4
 8002bb6:	2a38      	cmp	r2, #56	; 0x38
 8002bb8:	dc56      	bgt.n	8002c68 <__aeabi_dsub+0x474>
 8002bba:	2a1f      	cmp	r2, #31
 8002bbc:	dd00      	ble.n	8002bc0 <__aeabi_dsub+0x3cc>
 8002bbe:	e0d1      	b.n	8002d64 <__aeabi_dsub+0x570>
 8002bc0:	2520      	movs	r5, #32
 8002bc2:	001e      	movs	r6, r3
 8002bc4:	1aad      	subs	r5, r5, r2
 8002bc6:	4664      	mov	r4, ip
 8002bc8:	40ab      	lsls	r3, r5
 8002bca:	40ac      	lsls	r4, r5
 8002bcc:	40d6      	lsrs	r6, r2
 8002bce:	1e5d      	subs	r5, r3, #1
 8002bd0:	41ab      	sbcs	r3, r5
 8002bd2:	4334      	orrs	r4, r6
 8002bd4:	4323      	orrs	r3, r4
 8002bd6:	4664      	mov	r4, ip
 8002bd8:	40d4      	lsrs	r4, r2
 8002bda:	1b09      	subs	r1, r1, r4
 8002bdc:	e049      	b.n	8002c72 <__aeabi_dsub+0x47e>
 8002bde:	4660      	mov	r0, ip
 8002be0:	1bdc      	subs	r4, r3, r7
 8002be2:	1a46      	subs	r6, r0, r1
 8002be4:	42a3      	cmp	r3, r4
 8002be6:	4180      	sbcs	r0, r0
 8002be8:	4240      	negs	r0, r0
 8002bea:	4681      	mov	r9, r0
 8002bec:	0030      	movs	r0, r6
 8002bee:	464e      	mov	r6, r9
 8002bf0:	1b80      	subs	r0, r0, r6
 8002bf2:	4681      	mov	r9, r0
 8002bf4:	0200      	lsls	r0, r0, #8
 8002bf6:	d476      	bmi.n	8002ce6 <__aeabi_dsub+0x4f2>
 8002bf8:	464b      	mov	r3, r9
 8002bfa:	4323      	orrs	r3, r4
 8002bfc:	d000      	beq.n	8002c00 <__aeabi_dsub+0x40c>
 8002bfe:	e652      	b.n	80028a6 <__aeabi_dsub+0xb2>
 8002c00:	2400      	movs	r4, #0
 8002c02:	2500      	movs	r5, #0
 8002c04:	e771      	b.n	8002aea <__aeabi_dsub+0x2f6>
 8002c06:	4339      	orrs	r1, r7
 8002c08:	000c      	movs	r4, r1
 8002c0a:	1e62      	subs	r2, r4, #1
 8002c0c:	4194      	sbcs	r4, r2
 8002c0e:	18e4      	adds	r4, r4, r3
 8002c10:	429c      	cmp	r4, r3
 8002c12:	419b      	sbcs	r3, r3
 8002c14:	425b      	negs	r3, r3
 8002c16:	4463      	add	r3, ip
 8002c18:	4699      	mov	r9, r3
 8002c1a:	464b      	mov	r3, r9
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	d400      	bmi.n	8002c22 <__aeabi_dsub+0x42e>
 8002c20:	e756      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 8002c22:	2301      	movs	r3, #1
 8002c24:	469c      	mov	ip, r3
 8002c26:	4ba8      	ldr	r3, [pc, #672]	; (8002ec8 <__aeabi_dsub+0x6d4>)
 8002c28:	44e0      	add	r8, ip
 8002c2a:	4598      	cmp	r8, r3
 8002c2c:	d038      	beq.n	8002ca0 <__aeabi_dsub+0x4ac>
 8002c2e:	464b      	mov	r3, r9
 8002c30:	48a6      	ldr	r0, [pc, #664]	; (8002ecc <__aeabi_dsub+0x6d8>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	4003      	ands	r3, r0
 8002c36:	0018      	movs	r0, r3
 8002c38:	0863      	lsrs	r3, r4, #1
 8002c3a:	4014      	ands	r4, r2
 8002c3c:	431c      	orrs	r4, r3
 8002c3e:	07c3      	lsls	r3, r0, #31
 8002c40:	431c      	orrs	r4, r3
 8002c42:	0843      	lsrs	r3, r0, #1
 8002c44:	4699      	mov	r9, r3
 8002c46:	e657      	b.n	80028f8 <__aeabi_dsub+0x104>
 8002c48:	0010      	movs	r0, r2
 8002c4a:	000e      	movs	r6, r1
 8002c4c:	3820      	subs	r0, #32
 8002c4e:	40c6      	lsrs	r6, r0
 8002c50:	2a20      	cmp	r2, #32
 8002c52:	d004      	beq.n	8002c5e <__aeabi_dsub+0x46a>
 8002c54:	2040      	movs	r0, #64	; 0x40
 8002c56:	1a82      	subs	r2, r0, r2
 8002c58:	4091      	lsls	r1, r2
 8002c5a:	430f      	orrs	r7, r1
 8002c5c:	46b9      	mov	r9, r7
 8002c5e:	464f      	mov	r7, r9
 8002c60:	1e7a      	subs	r2, r7, #1
 8002c62:	4197      	sbcs	r7, r2
 8002c64:	4337      	orrs	r7, r6
 8002c66:	e60f      	b.n	8002888 <__aeabi_dsub+0x94>
 8002c68:	4662      	mov	r2, ip
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	1e5a      	subs	r2, r3, #1
 8002c70:	4193      	sbcs	r3, r2
 8002c72:	1afc      	subs	r4, r7, r3
 8002c74:	42a7      	cmp	r7, r4
 8002c76:	41bf      	sbcs	r7, r7
 8002c78:	427f      	negs	r7, r7
 8002c7a:	1bcb      	subs	r3, r1, r7
 8002c7c:	4699      	mov	r9, r3
 8002c7e:	465d      	mov	r5, fp
 8002c80:	4680      	mov	r8, r0
 8002c82:	e608      	b.n	8002896 <__aeabi_dsub+0xa2>
 8002c84:	4666      	mov	r6, ip
 8002c86:	431e      	orrs	r6, r3
 8002c88:	d100      	bne.n	8002c8c <__aeabi_dsub+0x498>
 8002c8a:	e0be      	b.n	8002e0a <__aeabi_dsub+0x616>
 8002c8c:	1e56      	subs	r6, r2, #1
 8002c8e:	2a01      	cmp	r2, #1
 8002c90:	d100      	bne.n	8002c94 <__aeabi_dsub+0x4a0>
 8002c92:	e109      	b.n	8002ea8 <__aeabi_dsub+0x6b4>
 8002c94:	4c8c      	ldr	r4, [pc, #560]	; (8002ec8 <__aeabi_dsub+0x6d4>)
 8002c96:	42a2      	cmp	r2, r4
 8002c98:	d100      	bne.n	8002c9c <__aeabi_dsub+0x4a8>
 8002c9a:	e119      	b.n	8002ed0 <__aeabi_dsub+0x6dc>
 8002c9c:	0032      	movs	r2, r6
 8002c9e:	e6c1      	b.n	8002a24 <__aeabi_dsub+0x230>
 8002ca0:	4642      	mov	r2, r8
 8002ca2:	2400      	movs	r4, #0
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	e648      	b.n	800293a <__aeabi_dsub+0x146>
 8002ca8:	2020      	movs	r0, #32
 8002caa:	000c      	movs	r4, r1
 8002cac:	1a80      	subs	r0, r0, r2
 8002cae:	003e      	movs	r6, r7
 8002cb0:	4087      	lsls	r7, r0
 8002cb2:	4084      	lsls	r4, r0
 8002cb4:	40d6      	lsrs	r6, r2
 8002cb6:	1e78      	subs	r0, r7, #1
 8002cb8:	4187      	sbcs	r7, r0
 8002cba:	40d1      	lsrs	r1, r2
 8002cbc:	4334      	orrs	r4, r6
 8002cbe:	433c      	orrs	r4, r7
 8002cc0:	448c      	add	ip, r1
 8002cc2:	e7a4      	b.n	8002c0e <__aeabi_dsub+0x41a>
 8002cc4:	4a80      	ldr	r2, [pc, #512]	; (8002ec8 <__aeabi_dsub+0x6d4>)
 8002cc6:	4290      	cmp	r0, r2
 8002cc8:	d100      	bne.n	8002ccc <__aeabi_dsub+0x4d8>
 8002cca:	e0e9      	b.n	8002ea0 <__aeabi_dsub+0x6ac>
 8002ccc:	19df      	adds	r7, r3, r7
 8002cce:	429f      	cmp	r7, r3
 8002cd0:	419b      	sbcs	r3, r3
 8002cd2:	4461      	add	r1, ip
 8002cd4:	425b      	negs	r3, r3
 8002cd6:	18c9      	adds	r1, r1, r3
 8002cd8:	07cc      	lsls	r4, r1, #31
 8002cda:	087f      	lsrs	r7, r7, #1
 8002cdc:	084b      	lsrs	r3, r1, #1
 8002cde:	4699      	mov	r9, r3
 8002ce0:	4680      	mov	r8, r0
 8002ce2:	433c      	orrs	r4, r7
 8002ce4:	e6f4      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 8002ce6:	1afc      	subs	r4, r7, r3
 8002ce8:	42a7      	cmp	r7, r4
 8002cea:	41bf      	sbcs	r7, r7
 8002cec:	4663      	mov	r3, ip
 8002cee:	427f      	negs	r7, r7
 8002cf0:	1ac9      	subs	r1, r1, r3
 8002cf2:	1bcb      	subs	r3, r1, r7
 8002cf4:	4699      	mov	r9, r3
 8002cf6:	465d      	mov	r5, fp
 8002cf8:	e5d5      	b.n	80028a6 <__aeabi_dsub+0xb2>
 8002cfa:	08ff      	lsrs	r7, r7, #3
 8002cfc:	074b      	lsls	r3, r1, #29
 8002cfe:	465d      	mov	r5, fp
 8002d00:	433b      	orrs	r3, r7
 8002d02:	08cc      	lsrs	r4, r1, #3
 8002d04:	e6ee      	b.n	8002ae4 <__aeabi_dsub+0x2f0>
 8002d06:	4662      	mov	r2, ip
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	d000      	beq.n	8002d0e <__aeabi_dsub+0x51a>
 8002d0c:	e082      	b.n	8002e14 <__aeabi_dsub+0x620>
 8002d0e:	000b      	movs	r3, r1
 8002d10:	433b      	orrs	r3, r7
 8002d12:	d11b      	bne.n	8002d4c <__aeabi_dsub+0x558>
 8002d14:	2480      	movs	r4, #128	; 0x80
 8002d16:	2500      	movs	r5, #0
 8002d18:	0324      	lsls	r4, r4, #12
 8002d1a:	e6f9      	b.n	8002b10 <__aeabi_dsub+0x31c>
 8002d1c:	19dc      	adds	r4, r3, r7
 8002d1e:	429c      	cmp	r4, r3
 8002d20:	419b      	sbcs	r3, r3
 8002d22:	4461      	add	r1, ip
 8002d24:	4689      	mov	r9, r1
 8002d26:	425b      	negs	r3, r3
 8002d28:	4499      	add	r9, r3
 8002d2a:	464b      	mov	r3, r9
 8002d2c:	021b      	lsls	r3, r3, #8
 8002d2e:	d444      	bmi.n	8002dba <__aeabi_dsub+0x5c6>
 8002d30:	2301      	movs	r3, #1
 8002d32:	4698      	mov	r8, r3
 8002d34:	e6cc      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 8002d36:	1bdc      	subs	r4, r3, r7
 8002d38:	4662      	mov	r2, ip
 8002d3a:	42a3      	cmp	r3, r4
 8002d3c:	419b      	sbcs	r3, r3
 8002d3e:	1a51      	subs	r1, r2, r1
 8002d40:	425b      	negs	r3, r3
 8002d42:	1acb      	subs	r3, r1, r3
 8002d44:	4699      	mov	r9, r3
 8002d46:	2301      	movs	r3, #1
 8002d48:	4698      	mov	r8, r3
 8002d4a:	e5a4      	b.n	8002896 <__aeabi_dsub+0xa2>
 8002d4c:	08ff      	lsrs	r7, r7, #3
 8002d4e:	074b      	lsls	r3, r1, #29
 8002d50:	465d      	mov	r5, fp
 8002d52:	433b      	orrs	r3, r7
 8002d54:	08cc      	lsrs	r4, r1, #3
 8002d56:	e6d7      	b.n	8002b08 <__aeabi_dsub+0x314>
 8002d58:	4662      	mov	r2, ip
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	0014      	movs	r4, r2
 8002d5e:	1e63      	subs	r3, r4, #1
 8002d60:	419c      	sbcs	r4, r3
 8002d62:	e679      	b.n	8002a58 <__aeabi_dsub+0x264>
 8002d64:	0015      	movs	r5, r2
 8002d66:	4664      	mov	r4, ip
 8002d68:	3d20      	subs	r5, #32
 8002d6a:	40ec      	lsrs	r4, r5
 8002d6c:	46a0      	mov	r8, r4
 8002d6e:	2a20      	cmp	r2, #32
 8002d70:	d005      	beq.n	8002d7e <__aeabi_dsub+0x58a>
 8002d72:	2540      	movs	r5, #64	; 0x40
 8002d74:	4664      	mov	r4, ip
 8002d76:	1aaa      	subs	r2, r5, r2
 8002d78:	4094      	lsls	r4, r2
 8002d7a:	4323      	orrs	r3, r4
 8002d7c:	469a      	mov	sl, r3
 8002d7e:	4654      	mov	r4, sl
 8002d80:	1e63      	subs	r3, r4, #1
 8002d82:	419c      	sbcs	r4, r3
 8002d84:	4643      	mov	r3, r8
 8002d86:	4323      	orrs	r3, r4
 8002d88:	e773      	b.n	8002c72 <__aeabi_dsub+0x47e>
 8002d8a:	4662      	mov	r2, ip
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	d023      	beq.n	8002dd8 <__aeabi_dsub+0x5e4>
 8002d90:	000a      	movs	r2, r1
 8002d92:	433a      	orrs	r2, r7
 8002d94:	d000      	beq.n	8002d98 <__aeabi_dsub+0x5a4>
 8002d96:	e0a0      	b.n	8002eda <__aeabi_dsub+0x6e6>
 8002d98:	4662      	mov	r2, ip
 8002d9a:	08db      	lsrs	r3, r3, #3
 8002d9c:	0752      	lsls	r2, r2, #29
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	4662      	mov	r2, ip
 8002da2:	08d4      	lsrs	r4, r2, #3
 8002da4:	e6b0      	b.n	8002b08 <__aeabi_dsub+0x314>
 8002da6:	000b      	movs	r3, r1
 8002da8:	433b      	orrs	r3, r7
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x5ba>
 8002dac:	e728      	b.n	8002c00 <__aeabi_dsub+0x40c>
 8002dae:	08ff      	lsrs	r7, r7, #3
 8002db0:	074b      	lsls	r3, r1, #29
 8002db2:	465d      	mov	r5, fp
 8002db4:	433b      	orrs	r3, r7
 8002db6:	08cc      	lsrs	r4, r1, #3
 8002db8:	e697      	b.n	8002aea <__aeabi_dsub+0x2f6>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	4698      	mov	r8, r3
 8002dbe:	e736      	b.n	8002c2e <__aeabi_dsub+0x43a>
 8002dc0:	1afc      	subs	r4, r7, r3
 8002dc2:	42a7      	cmp	r7, r4
 8002dc4:	41bf      	sbcs	r7, r7
 8002dc6:	4663      	mov	r3, ip
 8002dc8:	427f      	negs	r7, r7
 8002dca:	1ac9      	subs	r1, r1, r3
 8002dcc:	1bcb      	subs	r3, r1, r7
 8002dce:	4699      	mov	r9, r3
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	465d      	mov	r5, fp
 8002dd4:	4698      	mov	r8, r3
 8002dd6:	e55e      	b.n	8002896 <__aeabi_dsub+0xa2>
 8002dd8:	074b      	lsls	r3, r1, #29
 8002dda:	08ff      	lsrs	r7, r7, #3
 8002ddc:	433b      	orrs	r3, r7
 8002dde:	08cc      	lsrs	r4, r1, #3
 8002de0:	e692      	b.n	8002b08 <__aeabi_dsub+0x314>
 8002de2:	1bdc      	subs	r4, r3, r7
 8002de4:	4660      	mov	r0, ip
 8002de6:	42a3      	cmp	r3, r4
 8002de8:	41b6      	sbcs	r6, r6
 8002dea:	1a40      	subs	r0, r0, r1
 8002dec:	4276      	negs	r6, r6
 8002dee:	1b80      	subs	r0, r0, r6
 8002df0:	4681      	mov	r9, r0
 8002df2:	0200      	lsls	r0, r0, #8
 8002df4:	d560      	bpl.n	8002eb8 <__aeabi_dsub+0x6c4>
 8002df6:	1afc      	subs	r4, r7, r3
 8002df8:	42a7      	cmp	r7, r4
 8002dfa:	41bf      	sbcs	r7, r7
 8002dfc:	4663      	mov	r3, ip
 8002dfe:	427f      	negs	r7, r7
 8002e00:	1ac9      	subs	r1, r1, r3
 8002e02:	1bcb      	subs	r3, r1, r7
 8002e04:	4699      	mov	r9, r3
 8002e06:	465d      	mov	r5, fp
 8002e08:	e576      	b.n	80028f8 <__aeabi_dsub+0x104>
 8002e0a:	08ff      	lsrs	r7, r7, #3
 8002e0c:	074b      	lsls	r3, r1, #29
 8002e0e:	433b      	orrs	r3, r7
 8002e10:	08cc      	lsrs	r4, r1, #3
 8002e12:	e667      	b.n	8002ae4 <__aeabi_dsub+0x2f0>
 8002e14:	000a      	movs	r2, r1
 8002e16:	08db      	lsrs	r3, r3, #3
 8002e18:	433a      	orrs	r2, r7
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x62a>
 8002e1c:	e66f      	b.n	8002afe <__aeabi_dsub+0x30a>
 8002e1e:	4662      	mov	r2, ip
 8002e20:	0752      	lsls	r2, r2, #29
 8002e22:	4313      	orrs	r3, r2
 8002e24:	4662      	mov	r2, ip
 8002e26:	08d4      	lsrs	r4, r2, #3
 8002e28:	2280      	movs	r2, #128	; 0x80
 8002e2a:	0312      	lsls	r2, r2, #12
 8002e2c:	4214      	tst	r4, r2
 8002e2e:	d007      	beq.n	8002e40 <__aeabi_dsub+0x64c>
 8002e30:	08c8      	lsrs	r0, r1, #3
 8002e32:	4210      	tst	r0, r2
 8002e34:	d104      	bne.n	8002e40 <__aeabi_dsub+0x64c>
 8002e36:	465d      	mov	r5, fp
 8002e38:	0004      	movs	r4, r0
 8002e3a:	08fb      	lsrs	r3, r7, #3
 8002e3c:	0749      	lsls	r1, r1, #29
 8002e3e:	430b      	orrs	r3, r1
 8002e40:	0f5a      	lsrs	r2, r3, #29
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	08db      	lsrs	r3, r3, #3
 8002e46:	0752      	lsls	r2, r2, #29
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	e65d      	b.n	8002b08 <__aeabi_dsub+0x314>
 8002e4c:	074b      	lsls	r3, r1, #29
 8002e4e:	08ff      	lsrs	r7, r7, #3
 8002e50:	433b      	orrs	r3, r7
 8002e52:	08cc      	lsrs	r4, r1, #3
 8002e54:	e649      	b.n	8002aea <__aeabi_dsub+0x2f6>
 8002e56:	19dc      	adds	r4, r3, r7
 8002e58:	429c      	cmp	r4, r3
 8002e5a:	419b      	sbcs	r3, r3
 8002e5c:	4461      	add	r1, ip
 8002e5e:	4689      	mov	r9, r1
 8002e60:	425b      	negs	r3, r3
 8002e62:	4499      	add	r9, r3
 8002e64:	464b      	mov	r3, r9
 8002e66:	021b      	lsls	r3, r3, #8
 8002e68:	d400      	bmi.n	8002e6c <__aeabi_dsub+0x678>
 8002e6a:	e631      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 8002e6c:	464a      	mov	r2, r9
 8002e6e:	4b17      	ldr	r3, [pc, #92]	; (8002ecc <__aeabi_dsub+0x6d8>)
 8002e70:	401a      	ands	r2, r3
 8002e72:	2301      	movs	r3, #1
 8002e74:	4691      	mov	r9, r2
 8002e76:	4698      	mov	r8, r3
 8002e78:	e62a      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 8002e7a:	0016      	movs	r6, r2
 8002e7c:	4664      	mov	r4, ip
 8002e7e:	3e20      	subs	r6, #32
 8002e80:	40f4      	lsrs	r4, r6
 8002e82:	46a0      	mov	r8, r4
 8002e84:	2a20      	cmp	r2, #32
 8002e86:	d005      	beq.n	8002e94 <__aeabi_dsub+0x6a0>
 8002e88:	2640      	movs	r6, #64	; 0x40
 8002e8a:	4664      	mov	r4, ip
 8002e8c:	1ab2      	subs	r2, r6, r2
 8002e8e:	4094      	lsls	r4, r2
 8002e90:	4323      	orrs	r3, r4
 8002e92:	469a      	mov	sl, r3
 8002e94:	4654      	mov	r4, sl
 8002e96:	1e63      	subs	r3, r4, #1
 8002e98:	419c      	sbcs	r4, r3
 8002e9a:	4643      	mov	r3, r8
 8002e9c:	431c      	orrs	r4, r3
 8002e9e:	e5db      	b.n	8002a58 <__aeabi_dsub+0x264>
 8002ea0:	0002      	movs	r2, r0
 8002ea2:	2400      	movs	r4, #0
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	e548      	b.n	800293a <__aeabi_dsub+0x146>
 8002ea8:	19dc      	adds	r4, r3, r7
 8002eaa:	42bc      	cmp	r4, r7
 8002eac:	41bf      	sbcs	r7, r7
 8002eae:	4461      	add	r1, ip
 8002eb0:	4689      	mov	r9, r1
 8002eb2:	427f      	negs	r7, r7
 8002eb4:	44b9      	add	r9, r7
 8002eb6:	e738      	b.n	8002d2a <__aeabi_dsub+0x536>
 8002eb8:	464b      	mov	r3, r9
 8002eba:	4323      	orrs	r3, r4
 8002ebc:	d100      	bne.n	8002ec0 <__aeabi_dsub+0x6cc>
 8002ebe:	e69f      	b.n	8002c00 <__aeabi_dsub+0x40c>
 8002ec0:	e606      	b.n	8002ad0 <__aeabi_dsub+0x2dc>
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	000007fe 	.word	0x000007fe
 8002ec8:	000007ff 	.word	0x000007ff
 8002ecc:	ff7fffff 	.word	0xff7fffff
 8002ed0:	08ff      	lsrs	r7, r7, #3
 8002ed2:	074b      	lsls	r3, r1, #29
 8002ed4:	433b      	orrs	r3, r7
 8002ed6:	08cc      	lsrs	r4, r1, #3
 8002ed8:	e616      	b.n	8002b08 <__aeabi_dsub+0x314>
 8002eda:	4662      	mov	r2, ip
 8002edc:	08db      	lsrs	r3, r3, #3
 8002ede:	0752      	lsls	r2, r2, #29
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	4662      	mov	r2, ip
 8002ee4:	08d4      	lsrs	r4, r2, #3
 8002ee6:	2280      	movs	r2, #128	; 0x80
 8002ee8:	0312      	lsls	r2, r2, #12
 8002eea:	4214      	tst	r4, r2
 8002eec:	d007      	beq.n	8002efe <__aeabi_dsub+0x70a>
 8002eee:	08c8      	lsrs	r0, r1, #3
 8002ef0:	4210      	tst	r0, r2
 8002ef2:	d104      	bne.n	8002efe <__aeabi_dsub+0x70a>
 8002ef4:	465d      	mov	r5, fp
 8002ef6:	0004      	movs	r4, r0
 8002ef8:	08fb      	lsrs	r3, r7, #3
 8002efa:	0749      	lsls	r1, r1, #29
 8002efc:	430b      	orrs	r3, r1
 8002efe:	0f5a      	lsrs	r2, r3, #29
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	0752      	lsls	r2, r2, #29
 8002f04:	08db      	lsrs	r3, r3, #3
 8002f06:	4313      	orrs	r3, r2
 8002f08:	e5fe      	b.n	8002b08 <__aeabi_dsub+0x314>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	4a01      	ldr	r2, [pc, #4]	; (8002f14 <__aeabi_dsub+0x720>)
 8002f0e:	001c      	movs	r4, r3
 8002f10:	e513      	b.n	800293a <__aeabi_dsub+0x146>
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	000007ff 	.word	0x000007ff

08002f18 <__aeabi_dcmpun>:
 8002f18:	b570      	push	{r4, r5, r6, lr}
 8002f1a:	0005      	movs	r5, r0
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <__aeabi_dcmpun+0x38>)
 8002f1e:	031c      	lsls	r4, r3, #12
 8002f20:	0016      	movs	r6, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	030a      	lsls	r2, r1, #12
 8002f26:	0049      	lsls	r1, r1, #1
 8002f28:	0b12      	lsrs	r2, r2, #12
 8002f2a:	0d49      	lsrs	r1, r1, #21
 8002f2c:	0b24      	lsrs	r4, r4, #12
 8002f2e:	0d5b      	lsrs	r3, r3, #21
 8002f30:	4281      	cmp	r1, r0
 8002f32:	d008      	beq.n	8002f46 <__aeabi_dcmpun+0x2e>
 8002f34:	4a06      	ldr	r2, [pc, #24]	; (8002f50 <__aeabi_dcmpun+0x38>)
 8002f36:	2000      	movs	r0, #0
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d103      	bne.n	8002f44 <__aeabi_dcmpun+0x2c>
 8002f3c:	0020      	movs	r0, r4
 8002f3e:	4330      	orrs	r0, r6
 8002f40:	1e43      	subs	r3, r0, #1
 8002f42:	4198      	sbcs	r0, r3
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
 8002f46:	2001      	movs	r0, #1
 8002f48:	432a      	orrs	r2, r5
 8002f4a:	d1fb      	bne.n	8002f44 <__aeabi_dcmpun+0x2c>
 8002f4c:	e7f2      	b.n	8002f34 <__aeabi_dcmpun+0x1c>
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	000007ff 	.word	0x000007ff

08002f54 <__aeabi_d2iz>:
 8002f54:	000a      	movs	r2, r1
 8002f56:	b530      	push	{r4, r5, lr}
 8002f58:	4c13      	ldr	r4, [pc, #76]	; (8002fa8 <__aeabi_d2iz+0x54>)
 8002f5a:	0053      	lsls	r3, r2, #1
 8002f5c:	0309      	lsls	r1, r1, #12
 8002f5e:	0005      	movs	r5, r0
 8002f60:	0b09      	lsrs	r1, r1, #12
 8002f62:	2000      	movs	r0, #0
 8002f64:	0d5b      	lsrs	r3, r3, #21
 8002f66:	0fd2      	lsrs	r2, r2, #31
 8002f68:	42a3      	cmp	r3, r4
 8002f6a:	dd04      	ble.n	8002f76 <__aeabi_d2iz+0x22>
 8002f6c:	480f      	ldr	r0, [pc, #60]	; (8002fac <__aeabi_d2iz+0x58>)
 8002f6e:	4283      	cmp	r3, r0
 8002f70:	dd02      	ble.n	8002f78 <__aeabi_d2iz+0x24>
 8002f72:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <__aeabi_d2iz+0x5c>)
 8002f74:	18d0      	adds	r0, r2, r3
 8002f76:	bd30      	pop	{r4, r5, pc}
 8002f78:	2080      	movs	r0, #128	; 0x80
 8002f7a:	0340      	lsls	r0, r0, #13
 8002f7c:	4301      	orrs	r1, r0
 8002f7e:	480d      	ldr	r0, [pc, #52]	; (8002fb4 <__aeabi_d2iz+0x60>)
 8002f80:	1ac0      	subs	r0, r0, r3
 8002f82:	281f      	cmp	r0, #31
 8002f84:	dd08      	ble.n	8002f98 <__aeabi_d2iz+0x44>
 8002f86:	480c      	ldr	r0, [pc, #48]	; (8002fb8 <__aeabi_d2iz+0x64>)
 8002f88:	1ac3      	subs	r3, r0, r3
 8002f8a:	40d9      	lsrs	r1, r3
 8002f8c:	000b      	movs	r3, r1
 8002f8e:	4258      	negs	r0, r3
 8002f90:	2a00      	cmp	r2, #0
 8002f92:	d1f0      	bne.n	8002f76 <__aeabi_d2iz+0x22>
 8002f94:	0018      	movs	r0, r3
 8002f96:	e7ee      	b.n	8002f76 <__aeabi_d2iz+0x22>
 8002f98:	4c08      	ldr	r4, [pc, #32]	; (8002fbc <__aeabi_d2iz+0x68>)
 8002f9a:	40c5      	lsrs	r5, r0
 8002f9c:	46a4      	mov	ip, r4
 8002f9e:	4463      	add	r3, ip
 8002fa0:	4099      	lsls	r1, r3
 8002fa2:	000b      	movs	r3, r1
 8002fa4:	432b      	orrs	r3, r5
 8002fa6:	e7f2      	b.n	8002f8e <__aeabi_d2iz+0x3a>
 8002fa8:	000003fe 	.word	0x000003fe
 8002fac:	0000041d 	.word	0x0000041d
 8002fb0:	7fffffff 	.word	0x7fffffff
 8002fb4:	00000433 	.word	0x00000433
 8002fb8:	00000413 	.word	0x00000413
 8002fbc:	fffffbed 	.word	0xfffffbed

08002fc0 <__aeabi_i2d>:
 8002fc0:	b570      	push	{r4, r5, r6, lr}
 8002fc2:	2800      	cmp	r0, #0
 8002fc4:	d016      	beq.n	8002ff4 <__aeabi_i2d+0x34>
 8002fc6:	17c3      	asrs	r3, r0, #31
 8002fc8:	18c5      	adds	r5, r0, r3
 8002fca:	405d      	eors	r5, r3
 8002fcc:	0fc4      	lsrs	r4, r0, #31
 8002fce:	0028      	movs	r0, r5
 8002fd0:	f000 f894 	bl	80030fc <__clzsi2>
 8002fd4:	4a11      	ldr	r2, [pc, #68]	; (800301c <__aeabi_i2d+0x5c>)
 8002fd6:	1a12      	subs	r2, r2, r0
 8002fd8:	280a      	cmp	r0, #10
 8002fda:	dc16      	bgt.n	800300a <__aeabi_i2d+0x4a>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	002e      	movs	r6, r5
 8002fe0:	3315      	adds	r3, #21
 8002fe2:	409e      	lsls	r6, r3
 8002fe4:	230b      	movs	r3, #11
 8002fe6:	1a18      	subs	r0, r3, r0
 8002fe8:	40c5      	lsrs	r5, r0
 8002fea:	0552      	lsls	r2, r2, #21
 8002fec:	032d      	lsls	r5, r5, #12
 8002fee:	0b2d      	lsrs	r5, r5, #12
 8002ff0:	0d53      	lsrs	r3, r2, #21
 8002ff2:	e003      	b.n	8002ffc <__aeabi_i2d+0x3c>
 8002ff4:	2400      	movs	r4, #0
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	2500      	movs	r5, #0
 8002ffa:	2600      	movs	r6, #0
 8002ffc:	051b      	lsls	r3, r3, #20
 8002ffe:	432b      	orrs	r3, r5
 8003000:	07e4      	lsls	r4, r4, #31
 8003002:	4323      	orrs	r3, r4
 8003004:	0030      	movs	r0, r6
 8003006:	0019      	movs	r1, r3
 8003008:	bd70      	pop	{r4, r5, r6, pc}
 800300a:	380b      	subs	r0, #11
 800300c:	4085      	lsls	r5, r0
 800300e:	0552      	lsls	r2, r2, #21
 8003010:	032d      	lsls	r5, r5, #12
 8003012:	2600      	movs	r6, #0
 8003014:	0b2d      	lsrs	r5, r5, #12
 8003016:	0d53      	lsrs	r3, r2, #21
 8003018:	e7f0      	b.n	8002ffc <__aeabi_i2d+0x3c>
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	0000041e 	.word	0x0000041e

08003020 <__aeabi_ui2d>:
 8003020:	b510      	push	{r4, lr}
 8003022:	1e04      	subs	r4, r0, #0
 8003024:	d010      	beq.n	8003048 <__aeabi_ui2d+0x28>
 8003026:	f000 f869 	bl	80030fc <__clzsi2>
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <__aeabi_ui2d+0x48>)
 800302c:	1a1b      	subs	r3, r3, r0
 800302e:	280a      	cmp	r0, #10
 8003030:	dc11      	bgt.n	8003056 <__aeabi_ui2d+0x36>
 8003032:	220b      	movs	r2, #11
 8003034:	0021      	movs	r1, r4
 8003036:	1a12      	subs	r2, r2, r0
 8003038:	40d1      	lsrs	r1, r2
 800303a:	3015      	adds	r0, #21
 800303c:	030a      	lsls	r2, r1, #12
 800303e:	055b      	lsls	r3, r3, #21
 8003040:	4084      	lsls	r4, r0
 8003042:	0b12      	lsrs	r2, r2, #12
 8003044:	0d5b      	lsrs	r3, r3, #21
 8003046:	e001      	b.n	800304c <__aeabi_ui2d+0x2c>
 8003048:	2300      	movs	r3, #0
 800304a:	2200      	movs	r2, #0
 800304c:	051b      	lsls	r3, r3, #20
 800304e:	4313      	orrs	r3, r2
 8003050:	0020      	movs	r0, r4
 8003052:	0019      	movs	r1, r3
 8003054:	bd10      	pop	{r4, pc}
 8003056:	0022      	movs	r2, r4
 8003058:	380b      	subs	r0, #11
 800305a:	4082      	lsls	r2, r0
 800305c:	055b      	lsls	r3, r3, #21
 800305e:	0312      	lsls	r2, r2, #12
 8003060:	2400      	movs	r4, #0
 8003062:	0b12      	lsrs	r2, r2, #12
 8003064:	0d5b      	lsrs	r3, r3, #21
 8003066:	e7f1      	b.n	800304c <__aeabi_ui2d+0x2c>
 8003068:	0000041e 	.word	0x0000041e

0800306c <__aeabi_f2d>:
 800306c:	b570      	push	{r4, r5, r6, lr}
 800306e:	0043      	lsls	r3, r0, #1
 8003070:	0246      	lsls	r6, r0, #9
 8003072:	0fc4      	lsrs	r4, r0, #31
 8003074:	20fe      	movs	r0, #254	; 0xfe
 8003076:	0e1b      	lsrs	r3, r3, #24
 8003078:	1c59      	adds	r1, r3, #1
 800307a:	0a75      	lsrs	r5, r6, #9
 800307c:	4208      	tst	r0, r1
 800307e:	d00c      	beq.n	800309a <__aeabi_f2d+0x2e>
 8003080:	22e0      	movs	r2, #224	; 0xe0
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4694      	mov	ip, r2
 8003086:	076d      	lsls	r5, r5, #29
 8003088:	0b36      	lsrs	r6, r6, #12
 800308a:	4463      	add	r3, ip
 800308c:	051b      	lsls	r3, r3, #20
 800308e:	4333      	orrs	r3, r6
 8003090:	07e4      	lsls	r4, r4, #31
 8003092:	4323      	orrs	r3, r4
 8003094:	0028      	movs	r0, r5
 8003096:	0019      	movs	r1, r3
 8003098:	bd70      	pop	{r4, r5, r6, pc}
 800309a:	2b00      	cmp	r3, #0
 800309c:	d114      	bne.n	80030c8 <__aeabi_f2d+0x5c>
 800309e:	2d00      	cmp	r5, #0
 80030a0:	d01b      	beq.n	80030da <__aeabi_f2d+0x6e>
 80030a2:	0028      	movs	r0, r5
 80030a4:	f000 f82a 	bl	80030fc <__clzsi2>
 80030a8:	280a      	cmp	r0, #10
 80030aa:	dc1c      	bgt.n	80030e6 <__aeabi_f2d+0x7a>
 80030ac:	230b      	movs	r3, #11
 80030ae:	002e      	movs	r6, r5
 80030b0:	1a1b      	subs	r3, r3, r0
 80030b2:	40de      	lsrs	r6, r3
 80030b4:	0003      	movs	r3, r0
 80030b6:	3315      	adds	r3, #21
 80030b8:	409d      	lsls	r5, r3
 80030ba:	4a0e      	ldr	r2, [pc, #56]	; (80030f4 <__aeabi_f2d+0x88>)
 80030bc:	0336      	lsls	r6, r6, #12
 80030be:	1a12      	subs	r2, r2, r0
 80030c0:	0552      	lsls	r2, r2, #21
 80030c2:	0b36      	lsrs	r6, r6, #12
 80030c4:	0d53      	lsrs	r3, r2, #21
 80030c6:	e7e1      	b.n	800308c <__aeabi_f2d+0x20>
 80030c8:	2d00      	cmp	r5, #0
 80030ca:	d009      	beq.n	80030e0 <__aeabi_f2d+0x74>
 80030cc:	2280      	movs	r2, #128	; 0x80
 80030ce:	0b36      	lsrs	r6, r6, #12
 80030d0:	0312      	lsls	r2, r2, #12
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <__aeabi_f2d+0x8c>)
 80030d4:	076d      	lsls	r5, r5, #29
 80030d6:	4316      	orrs	r6, r2
 80030d8:	e7d8      	b.n	800308c <__aeabi_f2d+0x20>
 80030da:	2300      	movs	r3, #0
 80030dc:	2600      	movs	r6, #0
 80030de:	e7d5      	b.n	800308c <__aeabi_f2d+0x20>
 80030e0:	2600      	movs	r6, #0
 80030e2:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <__aeabi_f2d+0x8c>)
 80030e4:	e7d2      	b.n	800308c <__aeabi_f2d+0x20>
 80030e6:	0003      	movs	r3, r0
 80030e8:	3b0b      	subs	r3, #11
 80030ea:	409d      	lsls	r5, r3
 80030ec:	002e      	movs	r6, r5
 80030ee:	2500      	movs	r5, #0
 80030f0:	e7e3      	b.n	80030ba <__aeabi_f2d+0x4e>
 80030f2:	46c0      	nop			; (mov r8, r8)
 80030f4:	00000389 	.word	0x00000389
 80030f8:	000007ff 	.word	0x000007ff

080030fc <__clzsi2>:
 80030fc:	211c      	movs	r1, #28
 80030fe:	2301      	movs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	4298      	cmp	r0, r3
 8003104:	d301      	bcc.n	800310a <__clzsi2+0xe>
 8003106:	0c00      	lsrs	r0, r0, #16
 8003108:	3910      	subs	r1, #16
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	4298      	cmp	r0, r3
 800310e:	d301      	bcc.n	8003114 <__clzsi2+0x18>
 8003110:	0a00      	lsrs	r0, r0, #8
 8003112:	3908      	subs	r1, #8
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	4298      	cmp	r0, r3
 8003118:	d301      	bcc.n	800311e <__clzsi2+0x22>
 800311a:	0900      	lsrs	r0, r0, #4
 800311c:	3904      	subs	r1, #4
 800311e:	a202      	add	r2, pc, #8	; (adr r2, 8003128 <__clzsi2+0x2c>)
 8003120:	5c10      	ldrb	r0, [r2, r0]
 8003122:	1840      	adds	r0, r0, r1
 8003124:	4770      	bx	lr
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	02020304 	.word	0x02020304
 800312c:	01010101 	.word	0x01010101
	...

08003138 <__clzdi2>:
 8003138:	b510      	push	{r4, lr}
 800313a:	2900      	cmp	r1, #0
 800313c:	d103      	bne.n	8003146 <__clzdi2+0xe>
 800313e:	f7ff ffdd 	bl	80030fc <__clzsi2>
 8003142:	3020      	adds	r0, #32
 8003144:	e002      	b.n	800314c <__clzdi2+0x14>
 8003146:	0008      	movs	r0, r1
 8003148:	f7ff ffd8 	bl	80030fc <__clzsi2>
 800314c:	bd10      	pop	{r4, pc}
 800314e:	46c0      	nop			; (mov r8, r8)

08003150 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	b089      	sub	sp, #36	; 0x24
 8003154:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003156:	f000 fe79 	bl	8003e4c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800315a:	f000 f931 	bl	80033c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800315e:	f000 fa0d 	bl	800357c <MX_GPIO_Init>
	MX_I2C1_Init();
 8003162:	f000 f99b 	bl	800349c <MX_I2C1_Init>
	MX_USART2_UART_Init();
 8003166:	f000 f9d9 	bl	800351c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t rslt;
	rslt = bmx160_if_init(&bmx160dev, &hi2c1);
 800316a:	251f      	movs	r5, #31
 800316c:	197c      	adds	r4, r7, r5
 800316e:	4a88      	ldr	r2, [pc, #544]	; (8003390 <main+0x240>)
 8003170:	4b88      	ldr	r3, [pc, #544]	; (8003394 <main+0x244>)
 8003172:	0011      	movs	r1, r2
 8003174:	0018      	movs	r0, r3
 8003176:	f000 fc9d 	bl	8003ab4 <bmx160_if_init>
 800317a:	0003      	movs	r3, r0
 800317c:	7023      	strb	r3, [r4, #0]
	if (rslt == BMX160_OK) {
 800317e:	197b      	adds	r3, r7, r5
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <main+0x4e>
		printf("\nBMX160 IF Init succesful\r");
 8003186:	4b84      	ldr	r3, [pc, #528]	; (8003398 <main+0x248>)
 8003188:	0018      	movs	r0, r3
 800318a:	f004 f82b 	bl	80071e4 <iprintf>
		printf("\nDevice ID: 0x%02X\r", bmx160dev.chip_id);
 800318e:	4b81      	ldr	r3, [pc, #516]	; (8003394 <main+0x244>)
 8003190:	791b      	ldrb	r3, [r3, #4]
 8003192:	001a      	movs	r2, r3
 8003194:	4b81      	ldr	r3, [pc, #516]	; (800339c <main+0x24c>)
 8003196:	0011      	movs	r1, r2
 8003198:	0018      	movs	r0, r3
 800319a:	f004 f823 	bl	80071e4 <iprintf>
	}
	rslt = bmx160_mag_init(&bmx160dev);
 800319e:	251f      	movs	r5, #31
 80031a0:	197c      	adds	r4, r7, r5
 80031a2:	4b7c      	ldr	r3, [pc, #496]	; (8003394 <main+0x244>)
 80031a4:	0018      	movs	r0, r3
 80031a6:	f000 fcde 	bl	8003b66 <bmx160_mag_init>
 80031aa:	0003      	movs	r3, r0
 80031ac:	7023      	strb	r3, [r4, #0]
	if (rslt == BMX160_OK) {
 80031ae:	197b      	adds	r3, r7, r5
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d103      	bne.n	80031be <main+0x6e>
		printf("\nBMX160 Mag Init succesful\r");
 80031b6:	4b7a      	ldr	r3, [pc, #488]	; (80033a0 <main+0x250>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f004 f813 	bl	80071e4 <iprintf>
	}

	uint16_t mag_data_x_raw;
	uint16_t mag_data_y_raw;
	uint16_t mag_data_z_raw;
	int16_t mag_data_x = 0;
 80031be:	231c      	movs	r3, #28
 80031c0:	18fb      	adds	r3, r7, r3
 80031c2:	2200      	movs	r2, #0
 80031c4:	801a      	strh	r2, [r3, #0]
	int16_t mag_data_y = 0;
 80031c6:	231a      	movs	r3, #26
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	2200      	movs	r2, #0
 80031cc:	801a      	strh	r2, [r3, #0]
	int16_t mag_data_z = 0;
 80031ce:	2318      	movs	r3, #24
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2200      	movs	r2, #0
 80031d4:	801a      	strh	r2, [r3, #0]
	int16_t mag_tot;
	int16_t angle;
	float_t xy_factor = 0.035;
 80031d6:	4b73      	ldr	r3, [pc, #460]	; (80033a4 <main+0x254>)
 80031d8:	617b      	str	r3, [r7, #20]
	float_t z_factor = 0.076;
 80031da:	4b73      	ldr	r3, [pc, #460]	; (80033a8 <main+0x258>)
 80031dc:	613b      	str	r3, [r7, #16]
	int8_t mag_offset_x = 20;
 80031de:	230f      	movs	r3, #15
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	2214      	movs	r2, #20
 80031e4:	701a      	strb	r2, [r3, #0]
	int8_t mag_offset_y = -20;
 80031e6:	230e      	movs	r3, #14
 80031e8:	18fb      	adds	r3, r7, r3
 80031ea:	22ec      	movs	r2, #236	; 0xec
 80031ec:	701a      	strb	r2, [r3, #0]
		 angle_test_deg = angle_test * 180.0 / M_PI;
		 printf("\nAngle (rad): %f rad\r", angle_test);
		 printf("\nAngle (deg): %f rad\r", angle_test_deg);
		 */
		// read magnetometer data:
		bmx160_mag_read_data(&bmx160dev, &mag_data_x_raw, &mag_data_y_raw,
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	1dba      	adds	r2, r7, #6
 80031f2:	2408      	movs	r4, #8
 80031f4:	1939      	adds	r1, r7, r4
 80031f6:	4867      	ldr	r0, [pc, #412]	; (8003394 <main+0x244>)
 80031f8:	f000 fd77 	bl	8003cea <bmx160_mag_read_data>
				&mag_data_z_raw);
		mag_data_x = (int16_t) (((int16_t) mag_data_x_raw * xy_factor)
 80031fc:	193b      	adds	r3, r7, r4
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	b21b      	sxth	r3, r3
 8003202:	0018      	movs	r0, r3
 8003204:	f7fe f8fe 	bl	8001404 <__aeabi_i2f>
 8003208:	1c03      	adds	r3, r0, #0
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	1c18      	adds	r0, r3, #0
 800320e:	f7fd fe05 	bl	8000e1c <__aeabi_fmul>
 8003212:	1c03      	adds	r3, r0, #0
 8003214:	1c1c      	adds	r4, r3, #0
				+ mag_offset_x);
 8003216:	230f      	movs	r3, #15
 8003218:	18fb      	adds	r3, r7, r3
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	b25b      	sxtb	r3, r3
 800321e:	0018      	movs	r0, r3
 8003220:	f7fe f8f0 	bl	8001404 <__aeabi_i2f>
 8003224:	1c03      	adds	r3, r0, #0
 8003226:	1c19      	adds	r1, r3, #0
 8003228:	1c20      	adds	r0, r4, #0
 800322a:	f7fd fa91 	bl	8000750 <__aeabi_fadd>
 800322e:	1c03      	adds	r3, r0, #0
		mag_data_x = (int16_t) (((int16_t) mag_data_x_raw * xy_factor)
 8003230:	251c      	movs	r5, #28
 8003232:	197c      	adds	r4, r7, r5
 8003234:	1c18      	adds	r0, r3, #0
 8003236:	f7fe f8c5 	bl	80013c4 <__aeabi_f2iz>
 800323a:	0003      	movs	r3, r0
 800323c:	8023      	strh	r3, [r4, #0]
		mag_data_y = (int16_t) (((int16_t) mag_data_y_raw * xy_factor)
 800323e:	1dbb      	adds	r3, r7, #6
 8003240:	881b      	ldrh	r3, [r3, #0]
 8003242:	b21b      	sxth	r3, r3
 8003244:	0018      	movs	r0, r3
 8003246:	f7fe f8dd 	bl	8001404 <__aeabi_i2f>
 800324a:	1c03      	adds	r3, r0, #0
 800324c:	6979      	ldr	r1, [r7, #20]
 800324e:	1c18      	adds	r0, r3, #0
 8003250:	f7fd fde4 	bl	8000e1c <__aeabi_fmul>
 8003254:	1c03      	adds	r3, r0, #0
 8003256:	1c1c      	adds	r4, r3, #0
				+ mag_offset_y);
 8003258:	230e      	movs	r3, #14
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	b25b      	sxtb	r3, r3
 8003260:	0018      	movs	r0, r3
 8003262:	f7fe f8cf 	bl	8001404 <__aeabi_i2f>
 8003266:	1c03      	adds	r3, r0, #0
 8003268:	1c19      	adds	r1, r3, #0
 800326a:	1c20      	adds	r0, r4, #0
 800326c:	f7fd fa70 	bl	8000750 <__aeabi_fadd>
 8003270:	1c03      	adds	r3, r0, #0
		mag_data_y = (int16_t) (((int16_t) mag_data_y_raw * xy_factor)
 8003272:	261a      	movs	r6, #26
 8003274:	19bc      	adds	r4, r7, r6
 8003276:	1c18      	adds	r0, r3, #0
 8003278:	f7fe f8a4 	bl	80013c4 <__aeabi_f2iz>
 800327c:	0003      	movs	r3, r0
 800327e:	8023      	strh	r3, [r4, #0]
		mag_data_z = (int16_t) ((int16_t) mag_data_z_raw * z_factor);
 8003280:	1d3b      	adds	r3, r7, #4
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b21b      	sxth	r3, r3
 8003286:	0018      	movs	r0, r3
 8003288:	f7fe f8bc 	bl	8001404 <__aeabi_i2f>
 800328c:	1c03      	adds	r3, r0, #0
 800328e:	6939      	ldr	r1, [r7, #16]
 8003290:	1c18      	adds	r0, r3, #0
 8003292:	f7fd fdc3 	bl	8000e1c <__aeabi_fmul>
 8003296:	1c03      	adds	r3, r0, #0
 8003298:	2118      	movs	r1, #24
 800329a:	187c      	adds	r4, r7, r1
 800329c:	1c18      	adds	r0, r3, #0
 800329e:	f7fe f891 	bl	80013c4 <__aeabi_f2iz>
 80032a2:	0003      	movs	r3, r0
 80032a4:	8023      	strh	r3, [r4, #0]

		mag_tot = sqrt(
				(mag_data_x * mag_data_x) + (mag_data_y * mag_data_y)
 80032a6:	197b      	adds	r3, r7, r5
 80032a8:	2200      	movs	r2, #0
 80032aa:	5e9b      	ldrsh	r3, [r3, r2]
 80032ac:	197a      	adds	r2, r7, r5
 80032ae:	2000      	movs	r0, #0
 80032b0:	5e12      	ldrsh	r2, [r2, r0]
 80032b2:	435a      	muls	r2, r3
 80032b4:	19bb      	adds	r3, r7, r6
 80032b6:	2000      	movs	r0, #0
 80032b8:	5e1b      	ldrsh	r3, [r3, r0]
 80032ba:	19b9      	adds	r1, r7, r6
 80032bc:	2000      	movs	r0, #0
 80032be:	5e09      	ldrsh	r1, [r1, r0]
 80032c0:	434b      	muls	r3, r1
 80032c2:	18d2      	adds	r2, r2, r3
						+ (mag_data_z * mag_data_z));
 80032c4:	2118      	movs	r1, #24
 80032c6:	187b      	adds	r3, r7, r1
 80032c8:	2000      	movs	r0, #0
 80032ca:	5e1b      	ldrsh	r3, [r3, r0]
 80032cc:	1879      	adds	r1, r7, r1
 80032ce:	2000      	movs	r0, #0
 80032d0:	5e09      	ldrsh	r1, [r1, r0]
 80032d2:	434b      	muls	r3, r1
 80032d4:	18d3      	adds	r3, r2, r3
		mag_tot = sqrt(
 80032d6:	0018      	movs	r0, r3
 80032d8:	f7ff fe72 	bl	8002fc0 <__aeabi_i2d>
 80032dc:	0002      	movs	r2, r0
 80032de:	000b      	movs	r3, r1
 80032e0:	0010      	movs	r0, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	f006 f8f6 	bl	80094d4 <sqrt>
 80032e8:	0002      	movs	r2, r0
 80032ea:	000b      	movs	r3, r1
 80032ec:	200c      	movs	r0, #12
 80032ee:	183c      	adds	r4, r7, r0
 80032f0:	0010      	movs	r0, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	f7ff fe2e 	bl	8002f54 <__aeabi_d2iz>
 80032f8:	0003      	movs	r3, r0
 80032fa:	8023      	strh	r3, [r4, #0]

		angle = atan2f(mag_data_x, mag_data_y) * (180.0 / M_PI);
 80032fc:	197b      	adds	r3, r7, r5
 80032fe:	2200      	movs	r2, #0
 8003300:	5e9b      	ldrsh	r3, [r3, r2]
 8003302:	0018      	movs	r0, r3
 8003304:	f7fe f87e 	bl	8001404 <__aeabi_i2f>
 8003308:	1c04      	adds	r4, r0, #0
 800330a:	19bb      	adds	r3, r7, r6
 800330c:	2200      	movs	r2, #0
 800330e:	5e9b      	ldrsh	r3, [r3, r2]
 8003310:	0018      	movs	r0, r3
 8003312:	f7fe f877 	bl	8001404 <__aeabi_i2f>
 8003316:	1c03      	adds	r3, r0, #0
 8003318:	1c19      	adds	r1, r3, #0
 800331a:	1c20      	adds	r0, r4, #0
 800331c:	f006 f900 	bl	8009520 <atan2f>
 8003320:	1c03      	adds	r3, r0, #0
 8003322:	1c18      	adds	r0, r3, #0
 8003324:	f7ff fea2 	bl	800306c <__aeabi_f2d>
 8003328:	4a20      	ldr	r2, [pc, #128]	; (80033ac <main+0x25c>)
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <main+0x260>)
 800332c:	f7fe fff6 	bl	800231c <__aeabi_dmul>
 8003330:	0002      	movs	r2, r0
 8003332:	000b      	movs	r3, r1
 8003334:	240a      	movs	r4, #10
 8003336:	193c      	adds	r4, r7, r4
 8003338:	0010      	movs	r0, r2
 800333a:	0019      	movs	r1, r3
 800333c:	f7ff fe0a 	bl	8002f54 <__aeabi_d2iz>
 8003340:	0003      	movs	r3, r0
 8003342:	8023      	strh	r3, [r4, #0]
		printf("\nMagnetometer (X,Y,Z): %d, %d, %d\r", mag_data_x, mag_data_y,
 8003344:	197b      	adds	r3, r7, r5
 8003346:	2200      	movs	r2, #0
 8003348:	5e99      	ldrsh	r1, [r3, r2]
 800334a:	19bb      	adds	r3, r7, r6
 800334c:	2500      	movs	r5, #0
 800334e:	5f5a      	ldrsh	r2, [r3, r5]
 8003350:	2318      	movs	r3, #24
 8003352:	18fb      	adds	r3, r7, r3
 8003354:	2500      	movs	r5, #0
 8003356:	5f5b      	ldrsh	r3, [r3, r5]
 8003358:	4816      	ldr	r0, [pc, #88]	; (80033b4 <main+0x264>)
 800335a:	f003 ff43 	bl	80071e4 <iprintf>
				mag_data_z);
		printf("\nTotal B-field: %d uT\r", mag_tot);
 800335e:	200c      	movs	r0, #12
 8003360:	183b      	adds	r3, r7, r0
 8003362:	2200      	movs	r2, #0
 8003364:	5e9a      	ldrsh	r2, [r3, r2]
 8003366:	4b14      	ldr	r3, [pc, #80]	; (80033b8 <main+0x268>)
 8003368:	0011      	movs	r1, r2
 800336a:	0018      	movs	r0, r3
 800336c:	f003 ff3a 	bl	80071e4 <iprintf>
		printf("\nAngle: %d°\r", angle);
 8003370:	240a      	movs	r4, #10
 8003372:	193b      	adds	r3, r7, r4
 8003374:	2200      	movs	r2, #0
 8003376:	5e9a      	ldrsh	r2, [r3, r2]
 8003378:	4b10      	ldr	r3, [pc, #64]	; (80033bc <main+0x26c>)
 800337a:	0011      	movs	r1, r2
 800337c:	0018      	movs	r0, r3
 800337e:	f003 ff31 	bl	80071e4 <iprintf>
		// weiter mit Aufruf acc_read_data
		// rf, 11.05.2022 17:24

		// Magnetometer hat wahrscheinlich einen Offset, gem. DS bis zu +/-40uT
		//-> Kalibrierung notwendig
		HAL_Delay(1000);
 8003382:	23fa      	movs	r3, #250	; 0xfa
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	0018      	movs	r0, r3
 8003388:	f000 fdd0 	bl	8003f2c <HAL_Delay>
		bmx160_mag_read_data(&bmx160dev, &mag_data_x_raw, &mag_data_y_raw,
 800338c:	e72f      	b.n	80031ee <main+0x9e>
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	200001f8 	.word	0x200001f8
 8003394:	200002c8 	.word	0x200002c8
 8003398:	080099d0 	.word	0x080099d0
 800339c:	080099ec 	.word	0x080099ec
 80033a0:	08009a00 	.word	0x08009a00
 80033a4:	3d0f5c29 	.word	0x3d0f5c29
 80033a8:	3d9ba5e3 	.word	0x3d9ba5e3
 80033ac:	1a63c1f8 	.word	0x1a63c1f8
 80033b0:	404ca5dc 	.word	0x404ca5dc
 80033b4:	08009a1c 	.word	0x08009a1c
 80033b8:	08009a40 	.word	0x08009a40
 80033bc:	08009a58 	.word	0x08009a58

080033c0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b09d      	sub	sp, #116	; 0x74
 80033c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80033c6:	2438      	movs	r4, #56	; 0x38
 80033c8:	193b      	adds	r3, r7, r4
 80033ca:	0018      	movs	r0, r3
 80033cc:	2338      	movs	r3, #56	; 0x38
 80033ce:	001a      	movs	r2, r3
 80033d0:	2100      	movs	r1, #0
 80033d2:	f003 fa91 	bl	80068f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80033d6:	2324      	movs	r3, #36	; 0x24
 80033d8:	18fb      	adds	r3, r7, r3
 80033da:	0018      	movs	r0, r3
 80033dc:	2314      	movs	r3, #20
 80033de:	001a      	movs	r2, r3
 80033e0:	2100      	movs	r1, #0
 80033e2:	f003 fa89 	bl	80068f8 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80033e6:	003b      	movs	r3, r7
 80033e8:	0018      	movs	r0, r3
 80033ea:	2324      	movs	r3, #36	; 0x24
 80033ec:	001a      	movs	r2, r3
 80033ee:	2100      	movs	r1, #0
 80033f0:	f003 fa82 	bl	80068f8 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f4:	4b27      	ldr	r3, [pc, #156]	; (8003494 <SystemClock_Config+0xd4>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a27      	ldr	r2, [pc, #156]	; (8003498 <SystemClock_Config+0xd8>)
 80033fa:	401a      	ands	r2, r3
 80033fc:	4b25      	ldr	r3, [pc, #148]	; (8003494 <SystemClock_Config+0xd4>)
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	0109      	lsls	r1, r1, #4
 8003402:	430a      	orrs	r2, r1
 8003404:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003406:	0021      	movs	r1, r4
 8003408:	187b      	adds	r3, r7, r1
 800340a:	2210      	movs	r2, #16
 800340c:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2201      	movs	r2, #1
 8003412:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8003414:	187b      	adds	r3, r7, r1
 8003416:	2200      	movs	r2, #0
 8003418:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800341a:	187b      	adds	r3, r7, r1
 800341c:	22a0      	movs	r2, #160	; 0xa0
 800341e:	0212      	lsls	r2, r2, #8
 8003420:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003422:	187b      	adds	r3, r7, r1
 8003424:	2200      	movs	r2, #0
 8003426:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003428:	187b      	adds	r3, r7, r1
 800342a:	0018      	movs	r0, r3
 800342c:	f001 fdae 	bl	8004f8c <HAL_RCC_OscConfig>
 8003430:	1e03      	subs	r3, r0, #0
 8003432:	d001      	beq.n	8003438 <SystemClock_Config+0x78>
		Error_Handler();
 8003434:	f000 f8d8 	bl	80035e8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003438:	2124      	movs	r1, #36	; 0x24
 800343a:	187b      	adds	r3, r7, r1
 800343c:	220f      	movs	r2, #15
 800343e:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8003440:	187b      	adds	r3, r7, r1
 8003442:	2200      	movs	r2, #0
 8003444:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003446:	187b      	adds	r3, r7, r1
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800344c:	187b      	adds	r3, r7, r1
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003452:	187b      	adds	r3, r7, r1
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2100      	movs	r1, #0
 800345c:	0018      	movs	r0, r3
 800345e:	f002 f959 	bl	8005714 <HAL_RCC_ClockConfig>
 8003462:	1e03      	subs	r3, r0, #0
 8003464:	d001      	beq.n	800346a <SystemClock_Config+0xaa>
		Error_Handler();
 8003466:	f000 f8bf 	bl	80035e8 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 800346a:	003b      	movs	r3, r7
 800346c:	220a      	movs	r2, #10
 800346e:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003470:	003b      	movs	r3, r7
 8003472:	2200      	movs	r2, #0
 8003474:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003476:	003b      	movs	r3, r7
 8003478:	2200      	movs	r2, #0
 800347a:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800347c:	003b      	movs	r3, r7
 800347e:	0018      	movs	r0, r3
 8003480:	f002 fb6c 	bl	8005b5c <HAL_RCCEx_PeriphCLKConfig>
 8003484:	1e03      	subs	r3, r0, #0
 8003486:	d001      	beq.n	800348c <SystemClock_Config+0xcc>
		Error_Handler();
 8003488:	f000 f8ae 	bl	80035e8 <Error_Handler>
	}
}
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	46bd      	mov	sp, r7
 8003490:	b01d      	add	sp, #116	; 0x74
 8003492:	bd90      	pop	{r4, r7, pc}
 8003494:	40007000 	.word	0x40007000
 8003498:	ffffe7ff 	.word	0xffffe7ff

0800349c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80034a0:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <MX_I2C1_Init+0x78>)
 80034a2:	4a1d      	ldr	r2, [pc, #116]	; (8003518 <MX_I2C1_Init+0x7c>)
 80034a4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000708;
 80034a6:	4b1b      	ldr	r3, [pc, #108]	; (8003514 <MX_I2C1_Init+0x78>)
 80034a8:	22e1      	movs	r2, #225	; 0xe1
 80034aa:	00d2      	lsls	r2, r2, #3
 80034ac:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 80034ae:	4b19      	ldr	r3, [pc, #100]	; (8003514 <MX_I2C1_Init+0x78>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034b4:	4b17      	ldr	r3, [pc, #92]	; (8003514 <MX_I2C1_Init+0x78>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034ba:	4b16      	ldr	r3, [pc, #88]	; (8003514 <MX_I2C1_Init+0x78>)
 80034bc:	2200      	movs	r2, #0
 80034be:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 80034c0:	4b14      	ldr	r3, [pc, #80]	; (8003514 <MX_I2C1_Init+0x78>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80034c6:	4b13      	ldr	r3, [pc, #76]	; (8003514 <MX_I2C1_Init+0x78>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034cc:	4b11      	ldr	r3, [pc, #68]	; (8003514 <MX_I2C1_Init+0x78>)
 80034ce:	2200      	movs	r2, #0
 80034d0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <MX_I2C1_Init+0x78>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <MX_I2C1_Init+0x78>)
 80034da:	0018      	movs	r0, r3
 80034dc:	f000 ff74 	bl	80043c8 <HAL_I2C_Init>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80034e4:	f000 f880 	bl	80035e8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80034e8:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <MX_I2C1_Init+0x78>)
 80034ea:	2100      	movs	r1, #0
 80034ec:	0018      	movs	r0, r3
 80034ee:	f001 fcb5 	bl	8004e5c <HAL_I2CEx_ConfigAnalogFilter>
 80034f2:	1e03      	subs	r3, r0, #0
 80034f4:	d001      	beq.n	80034fa <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80034f6:	f000 f877 	bl	80035e8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <MX_I2C1_Init+0x78>)
 80034fc:	2100      	movs	r1, #0
 80034fe:	0018      	movs	r0, r3
 8003500:	f001 fcf8 	bl	8004ef4 <HAL_I2CEx_ConfigDigitalFilter>
 8003504:	1e03      	subs	r3, r0, #0
 8003506:	d001      	beq.n	800350c <MX_I2C1_Init+0x70>
		Error_Handler();
 8003508:	f000 f86e 	bl	80035e8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800350c:	46c0      	nop			; (mov r8, r8)
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	200001f8 	.word	0x200001f8
 8003518:	40005400 	.word	0x40005400

0800351c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003520:	4b14      	ldr	r3, [pc, #80]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <MX_USART2_UART_Init+0x5c>)
 8003524:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003528:	22e1      	movs	r2, #225	; 0xe1
 800352a:	0252      	lsls	r2, r2, #9
 800352c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800352e:	4b11      	ldr	r3, [pc, #68]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003530:	2200      	movs	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003534:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003536:	2200      	movs	r2, #0
 8003538:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800353a:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <MX_USART2_UART_Init+0x58>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003542:	220c      	movs	r2, #12
 8003544:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <MX_USART2_UART_Init+0x58>)
 800354e:	2200      	movs	r2, #0
 8003550:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003552:	4b08      	ldr	r3, [pc, #32]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <MX_USART2_UART_Init+0x58>)
 800355a:	2200      	movs	r2, #0
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <MX_USART2_UART_Init+0x58>)
 8003560:	0018      	movs	r0, r3
 8003562:	f002 fc5f 	bl	8005e24 <HAL_UART_Init>
 8003566:	1e03      	subs	r3, r0, #0
 8003568:	d001      	beq.n	800356e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800356a:	f000 f83d 	bl	80035e8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	20000244 	.word	0x20000244
 8003578:	40004400 	.word	0x40004400

0800357c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003582:	4b0e      	ldr	r3, [pc, #56]	; (80035bc <MX_GPIO_Init+0x40>)
 8003584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003586:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <MX_GPIO_Init+0x40>)
 8003588:	2101      	movs	r1, #1
 800358a:	430a      	orrs	r2, r1
 800358c:	62da      	str	r2, [r3, #44]	; 0x2c
 800358e:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <MX_GPIO_Init+0x40>)
 8003590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003592:	2201      	movs	r2, #1
 8003594:	4013      	ands	r3, r2
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800359a:	4b08      	ldr	r3, [pc, #32]	; (80035bc <MX_GPIO_Init+0x40>)
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <MX_GPIO_Init+0x40>)
 80035a0:	2102      	movs	r1, #2
 80035a2:	430a      	orrs	r2, r1
 80035a4:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a6:	4b05      	ldr	r3, [pc, #20]	; (80035bc <MX_GPIO_Init+0x40>)
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	2202      	movs	r2, #2
 80035ac:	4013      	ands	r3, r2
 80035ae:	603b      	str	r3, [r7, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]

}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	46c0      	nop			; (mov r8, r8)
 80035bc:	40021000 	.word	0x40021000

080035c0 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80035c8:	4b05      	ldr	r3, [pc, #20]	; (80035e0 <__io_putchar+0x20>)
 80035ca:	1d39      	adds	r1, r7, #4
 80035cc:	4805      	ldr	r0, [pc, #20]	; (80035e4 <__io_putchar+0x24>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	f002 fc7c 	bl	8005ecc <HAL_UART_Transmit>

	return ch;
 80035d4:	687b      	ldr	r3, [r7, #4]
}
 80035d6:	0018      	movs	r0, r3
 80035d8:	46bd      	mov	sp, r7
 80035da:	b002      	add	sp, #8
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	46c0      	nop			; (mov r8, r8)
 80035e0:	0000ffff 	.word	0x0000ffff
 80035e4:	20000244 	.word	0x20000244

080035e8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035ec:	b672      	cpsid	i
}
 80035ee:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80035f0:	e7fe      	b.n	80035f0 <Error_Handler+0x8>
	...

080035f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f8:	4b07      	ldr	r3, [pc, #28]	; (8003618 <HAL_MspInit+0x24>)
 80035fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035fc:	4b06      	ldr	r3, [pc, #24]	; (8003618 <HAL_MspInit+0x24>)
 80035fe:	2101      	movs	r1, #1
 8003600:	430a      	orrs	r2, r1
 8003602:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <HAL_MspInit+0x24>)
 8003606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003608:	4b03      	ldr	r3, [pc, #12]	; (8003618 <HAL_MspInit+0x24>)
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	0549      	lsls	r1, r1, #21
 800360e:	430a      	orrs	r2, r1
 8003610:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40021000 	.word	0x40021000

0800361c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003624:	240c      	movs	r4, #12
 8003626:	193b      	adds	r3, r7, r4
 8003628:	0018      	movs	r0, r3
 800362a:	2314      	movs	r3, #20
 800362c:	001a      	movs	r2, r3
 800362e:	2100      	movs	r1, #0
 8003630:	f003 f962 	bl	80068f8 <memset>
  if(hi2c->Instance==I2C1)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a17      	ldr	r2, [pc, #92]	; (8003698 <HAL_I2C_MspInit+0x7c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d128      	bne.n	8003690 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800363e:	4b17      	ldr	r3, [pc, #92]	; (800369c <HAL_I2C_MspInit+0x80>)
 8003640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <HAL_I2C_MspInit+0x80>)
 8003644:	2102      	movs	r1, #2
 8003646:	430a      	orrs	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <HAL_I2C_MspInit+0x80>)
 800364c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364e:	2202      	movs	r2, #2
 8003650:	4013      	ands	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]
 8003654:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003656:	0021      	movs	r1, r4
 8003658:	187b      	adds	r3, r7, r1
 800365a:	22c0      	movs	r2, #192	; 0xc0
 800365c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2212      	movs	r2, #18
 8003662:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2200      	movs	r2, #0
 8003668:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366a:	187b      	adds	r3, r7, r1
 800366c:	2203      	movs	r2, #3
 800366e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2201      	movs	r2, #1
 8003674:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	187b      	adds	r3, r7, r1
 8003678:	4a09      	ldr	r2, [pc, #36]	; (80036a0 <HAL_I2C_MspInit+0x84>)
 800367a:	0019      	movs	r1, r3
 800367c:	0010      	movs	r0, r2
 800367e:	f000 fd2d 	bl	80040dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <HAL_I2C_MspInit+0x80>)
 8003684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003686:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_I2C_MspInit+0x80>)
 8003688:	2180      	movs	r1, #128	; 0x80
 800368a:	0389      	lsls	r1, r1, #14
 800368c:	430a      	orrs	r2, r1
 800368e:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003690:	46c0      	nop			; (mov r8, r8)
 8003692:	46bd      	mov	sp, r7
 8003694:	b009      	add	sp, #36	; 0x24
 8003696:	bd90      	pop	{r4, r7, pc}
 8003698:	40005400 	.word	0x40005400
 800369c:	40021000 	.word	0x40021000
 80036a0:	50000400 	.word	0x50000400

080036a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036a4:	b590      	push	{r4, r7, lr}
 80036a6:	b089      	sub	sp, #36	; 0x24
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036ac:	240c      	movs	r4, #12
 80036ae:	193b      	adds	r3, r7, r4
 80036b0:	0018      	movs	r0, r3
 80036b2:	2314      	movs	r3, #20
 80036b4:	001a      	movs	r2, r3
 80036b6:	2100      	movs	r1, #0
 80036b8:	f003 f91e 	bl	80068f8 <memset>
  if(huart->Instance==USART2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a18      	ldr	r2, [pc, #96]	; (8003724 <HAL_UART_MspInit+0x80>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d129      	bne.n	800371a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036c6:	4b18      	ldr	r3, [pc, #96]	; (8003728 <HAL_UART_MspInit+0x84>)
 80036c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ca:	4b17      	ldr	r3, [pc, #92]	; (8003728 <HAL_UART_MspInit+0x84>)
 80036cc:	2180      	movs	r1, #128	; 0x80
 80036ce:	0289      	lsls	r1, r1, #10
 80036d0:	430a      	orrs	r2, r1
 80036d2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	4b14      	ldr	r3, [pc, #80]	; (8003728 <HAL_UART_MspInit+0x84>)
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	4b13      	ldr	r3, [pc, #76]	; (8003728 <HAL_UART_MspInit+0x84>)
 80036da:	2101      	movs	r1, #1
 80036dc:	430a      	orrs	r2, r1
 80036de:	62da      	str	r2, [r3, #44]	; 0x2c
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <HAL_UART_MspInit+0x84>)
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2201      	movs	r2, #1
 80036e6:	4013      	ands	r3, r2
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036ec:	0021      	movs	r1, r4
 80036ee:	187b      	adds	r3, r7, r1
 80036f0:	220c      	movs	r2, #12
 80036f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	187b      	adds	r3, r7, r1
 80036f6:	2202      	movs	r2, #2
 80036f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fa:	187b      	adds	r3, r7, r1
 80036fc:	2200      	movs	r2, #0
 80036fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003700:	187b      	adds	r3, r7, r1
 8003702:	2203      	movs	r2, #3
 8003704:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8003706:	187b      	adds	r3, r7, r1
 8003708:	2204      	movs	r2, #4
 800370a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370c:	187a      	adds	r2, r7, r1
 800370e:	23a0      	movs	r3, #160	; 0xa0
 8003710:	05db      	lsls	r3, r3, #23
 8003712:	0011      	movs	r1, r2
 8003714:	0018      	movs	r0, r3
 8003716:	f000 fce1 	bl	80040dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800371a:	46c0      	nop			; (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b009      	add	sp, #36	; 0x24
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	40004400 	.word	0x40004400
 8003728:	40021000 	.word	0x40021000

0800372c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003730:	e7fe      	b.n	8003730 <NMI_Handler+0x4>

08003732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003736:	e7fe      	b.n	8003736 <HardFault_Handler+0x4>

08003738 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800373c:	46c0      	nop			; (mov r8, r8)
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003750:	f000 fbd0 	bl	8003ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003754:	46c0      	nop			; (mov r8, r8)
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	af00      	add	r7, sp, #0
	return 1;
 800375e:	2301      	movs	r3, #1
}
 8003760:	0018      	movs	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <_kill>:

int _kill(int pid, int sig)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
 800376e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003770:	f003 f898 	bl	80068a4 <__errno>
 8003774:	0003      	movs	r3, r0
 8003776:	2216      	movs	r2, #22
 8003778:	601a      	str	r2, [r3, #0]
	return -1;
 800377a:	2301      	movs	r3, #1
 800377c:	425b      	negs	r3, r3
}
 800377e:	0018      	movs	r0, r3
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}

08003786 <_exit>:

void _exit (int status)
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b082      	sub	sp, #8
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800378e:	2301      	movs	r3, #1
 8003790:	425a      	negs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f7ff ffe5 	bl	8003766 <_kill>
	while (1) {}		/* Make sure we hang here */
 800379c:	e7fe      	b.n	800379c <_exit+0x16>

0800379e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	e00a      	b.n	80037c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80037b0:	e000      	b.n	80037b4 <_read+0x16>
 80037b2:	bf00      	nop
 80037b4:	0001      	movs	r1, r0
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	1c5a      	adds	r2, r3, #1
 80037ba:	60ba      	str	r2, [r7, #8]
 80037bc:	b2ca      	uxtb	r2, r1
 80037be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3301      	adds	r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697a      	ldr	r2, [r7, #20]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	dbf0      	blt.n	80037b0 <_read+0x12>
	}

return len;
 80037ce:	687b      	ldr	r3, [r7, #4]
}
 80037d0:	0018      	movs	r0, r3
 80037d2:	46bd      	mov	sp, r7
 80037d4:	b006      	add	sp, #24
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e4:	2300      	movs	r3, #0
 80037e6:	617b      	str	r3, [r7, #20]
 80037e8:	e009      	b.n	80037fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	60ba      	str	r2, [r7, #8]
 80037f0:	781b      	ldrb	r3, [r3, #0]
 80037f2:	0018      	movs	r0, r3
 80037f4:	f7ff fee4 	bl	80035c0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	3301      	adds	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	429a      	cmp	r2, r3
 8003804:	dbf1      	blt.n	80037ea <_write+0x12>
	}
	return len;
 8003806:	687b      	ldr	r3, [r7, #4]
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b006      	add	sp, #24
 800380e:	bd80      	pop	{r7, pc}

08003810 <_close>:

int _close(int file)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	return -1;
 8003818:	2301      	movs	r3, #1
 800381a:	425b      	negs	r3, r3
}
 800381c:	0018      	movs	r0, r3
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}

08003824 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2280      	movs	r2, #128	; 0x80
 8003832:	0192      	lsls	r2, r2, #6
 8003834:	605a      	str	r2, [r3, #4]
	return 0;
 8003836:	2300      	movs	r3, #0
}
 8003838:	0018      	movs	r0, r3
 800383a:	46bd      	mov	sp, r7
 800383c:	b002      	add	sp, #8
 800383e:	bd80      	pop	{r7, pc}

08003840 <_isatty>:

int _isatty(int file)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
	return 1;
 8003848:	2301      	movs	r3, #1
}
 800384a:	0018      	movs	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	b002      	add	sp, #8
 8003850:	bd80      	pop	{r7, pc}

08003852 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
	return 0;
 800385e:	2300      	movs	r3, #0
}
 8003860:	0018      	movs	r0, r3
 8003862:	46bd      	mov	sp, r7
 8003864:	b004      	add	sp, #16
 8003866:	bd80      	pop	{r7, pc}

08003868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003870:	4a14      	ldr	r2, [pc, #80]	; (80038c4 <_sbrk+0x5c>)
 8003872:	4b15      	ldr	r3, [pc, #84]	; (80038c8 <_sbrk+0x60>)
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800387c:	4b13      	ldr	r3, [pc, #76]	; (80038cc <_sbrk+0x64>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d102      	bne.n	800388a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003884:	4b11      	ldr	r3, [pc, #68]	; (80038cc <_sbrk+0x64>)
 8003886:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <_sbrk+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800388a:	4b10      	ldr	r3, [pc, #64]	; (80038cc <_sbrk+0x64>)
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	18d3      	adds	r3, r2, r3
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	429a      	cmp	r2, r3
 8003896:	d207      	bcs.n	80038a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003898:	f003 f804 	bl	80068a4 <__errno>
 800389c:	0003      	movs	r3, r0
 800389e:	220c      	movs	r2, #12
 80038a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038a2:	2301      	movs	r3, #1
 80038a4:	425b      	negs	r3, r3
 80038a6:	e009      	b.n	80038bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <_sbrk+0x64>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038ae:	4b07      	ldr	r3, [pc, #28]	; (80038cc <_sbrk+0x64>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	18d2      	adds	r2, r2, r3
 80038b6:	4b05      	ldr	r3, [pc, #20]	; (80038cc <_sbrk+0x64>)
 80038b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80038ba:	68fb      	ldr	r3, [r7, #12]
}
 80038bc:	0018      	movs	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	b006      	add	sp, #24
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	20002000 	.word	0x20002000
 80038c8:	00000400 	.word	0x00000400
 80038cc:	200002d0 	.word	0x200002d0
 80038d0:	200002e8 	.word	0x200002e8

080038d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038d8:	46c0      	nop			; (mov r8, r8)
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 80038e0:	480d      	ldr	r0, [pc, #52]	; (8003918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e4:	480d      	ldr	r0, [pc, #52]	; (800391c <LoopForever+0x6>)
  ldr r1, =_edata
 80038e6:	490e      	ldr	r1, [pc, #56]	; (8003920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038e8:	4a0e      	ldr	r2, [pc, #56]	; (8003924 <LoopForever+0xe>)
  movs r3, #0
 80038ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038ec:	e002      	b.n	80038f4 <LoopCopyDataInit>

080038ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038f2:	3304      	adds	r3, #4

080038f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038f8:	d3f9      	bcc.n	80038ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038fa:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038fc:	4c0b      	ldr	r4, [pc, #44]	; (800392c <LoopForever+0x16>)
  movs r3, #0
 80038fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003900:	e001      	b.n	8003906 <LoopFillZerobss>

08003902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003904:	3204      	adds	r2, #4

08003906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003908:	d3fb      	bcc.n	8003902 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800390a:	f7ff ffe3 	bl	80038d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800390e:	f002 ffcf 	bl	80068b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003912:	f7ff fc1d 	bl	8003150 <main>

08003916 <LoopForever>:

LoopForever:
    b LoopForever
 8003916:	e7fe      	b.n	8003916 <LoopForever>
  ldr   r0, =_estack
 8003918:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800391c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003920:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003924:	0800a044 	.word	0x0800a044
  ldr r2, =_sbss
 8003928:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800392c:	200002e8 	.word	0x200002e8

08003930 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003930:	e7fe      	b.n	8003930 <ADC1_COMP_IRQHandler>

08003932 <BMX160_write_byte>:
 return:     result of API execution status
 retval Zero Success
 retval other than Zero Error
 Info:
 ******************************************************************************/
static uint8_t BMX160_write_byte(bmx160_dev *dev, uint8_t reg, uint8_t value) {
 8003932:	b590      	push	{r4, r7, lr}
 8003934:	b089      	sub	sp, #36	; 0x24
 8003936:	af04      	add	r7, sp, #16
 8003938:	6078      	str	r0, [r7, #4]
 800393a:	0008      	movs	r0, r1
 800393c:	0011      	movs	r1, r2
 800393e:	1cfb      	adds	r3, r7, #3
 8003940:	1c02      	adds	r2, r0, #0
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	1cbb      	adds	r3, r7, #2
 8003946:	1c0a      	adds	r2, r1, #0
 8003948:	701a      	strb	r2, [r3, #0]
	uint8_t buf = value;
 800394a:	240f      	movs	r4, #15
 800394c:	193b      	adds	r3, r7, r4
 800394e:	1cba      	adds	r2, r7, #2
 8003950:	7812      	ldrb	r2, [r2, #0]
 8003952:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Mem_Write(dev->i2cHandle, (dev->address << 1), reg,
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	795b      	ldrb	r3, [r3, #5]
 800395c:	b29b      	uxth	r3, r3
 800395e:	18db      	adds	r3, r3, r3
 8003960:	b299      	uxth	r1, r3
 8003962:	1cfb      	adds	r3, r7, #3
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b29a      	uxth	r2, r3
 8003968:	2320      	movs	r3, #32
 800396a:	9302      	str	r3, [sp, #8]
 800396c:	2301      	movs	r3, #1
 800396e:	9301      	str	r3, [sp, #4]
 8003970:	193b      	adds	r3, r7, r4
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	2301      	movs	r3, #1
 8003976:	f000 fdbd 	bl	80044f4 <HAL_I2C_Mem_Write>
 800397a:	0003      	movs	r3, r0
	MEMADDSIZE8, &buf, 1, BMX160_I2C_TIMEOUT_DURATION);
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	b005      	add	sp, #20
 8003982:	bd90      	pop	{r4, r7, pc}

08003984 <BMX160_read_byte>:
 return:     result of API execution status
 retval Zero Success
 retval other than zero Error
 Info:		This API reads the data from the register, stores it in the data pointer passed by the user
 ******************************************************************************/
static uint8_t BMX160_read_byte(bmx160_dev *dev, uint8_t reg, uint8_t *data) {
 8003984:	b590      	push	{r4, r7, lr}
 8003986:	b08b      	sub	sp, #44	; 0x2c
 8003988:	af04      	add	r7, sp, #16
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	240b      	movs	r4, #11
 8003990:	193b      	adds	r3, r7, r4
 8003992:	1c0a      	adds	r2, r1, #0
 8003994:	701a      	strb	r2, [r3, #0]
	uint8_t *buf = data;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	617b      	str	r3, [r7, #20]
	return HAL_I2C_Mem_Read(dev->i2cHandle, (dev->address << 1), reg,
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6818      	ldr	r0, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	795b      	ldrb	r3, [r3, #5]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	18db      	adds	r3, r3, r3
 80039a6:	b299      	uxth	r1, r3
 80039a8:	193b      	adds	r3, r7, r4
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	2320      	movs	r3, #32
 80039b0:	9302      	str	r3, [sp, #8]
 80039b2:	2301      	movs	r3, #1
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	9300      	str	r3, [sp, #0]
 80039ba:	2301      	movs	r3, #1
 80039bc:	f000 fec8 	bl	8004750 <HAL_I2C_Mem_Read>
 80039c0:	0003      	movs	r3, r0
	MEMADDSIZE8, buf, 1, BMX160_I2C_TIMEOUT_DURATION);
}
 80039c2:	0018      	movs	r0, r3
 80039c4:	46bd      	mov	sp, r7
 80039c6:	b007      	add	sp, #28
 80039c8:	bd90      	pop	{r4, r7, pc}

080039ca <bmx160_wait_conf>:
 retval other than zero Error
 Info:		This API waits for the bit number given in bit_number in the register reg to become 0.
 After the number of loops in try has been reached, the API is quit with a timeout.
 ******************************************************************************/
static uint8_t bmx160_wait_conf(bmx160_dev *dev, uint8_t reg,
		uint8_t bit_number, uint8_t try) {
 80039ca:	b590      	push	{r4, r7, lr}
 80039cc:	b085      	sub	sp, #20
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	000c      	movs	r4, r1
 80039d4:	0010      	movs	r0, r2
 80039d6:	0019      	movs	r1, r3
 80039d8:	1cfb      	adds	r3, r7, #3
 80039da:	1c22      	adds	r2, r4, #0
 80039dc:	701a      	strb	r2, [r3, #0]
 80039de:	1cbb      	adds	r3, r7, #2
 80039e0:	1c02      	adds	r2, r0, #0
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	1c7b      	adds	r3, r7, #1
 80039e6:	1c0a      	adds	r2, r1, #0
 80039e8:	701a      	strb	r2, [r3, #0]
	uint8_t rslt;
	uint8_t read_data;
	while (try--) {
 80039ea:	e00b      	b.n	8003a04 <bmx160_wait_conf+0x3a>
		rslt = BMX160_read_byte(dev, reg, &read_data);
 80039ec:	230f      	movs	r3, #15
 80039ee:	18fc      	adds	r4, r7, r3
 80039f0:	230e      	movs	r3, #14
 80039f2:	18fa      	adds	r2, r7, r3
 80039f4:	1cfb      	adds	r3, r7, #3
 80039f6:	7819      	ldrb	r1, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	0018      	movs	r0, r3
 80039fc:	f7ff ffc2 	bl	8003984 <BMX160_read_byte>
 8003a00:	0003      	movs	r3, r0
 8003a02:	7023      	strb	r3, [r4, #0]
	while (try--) {
 8003a04:	1c7b      	adds	r3, r7, #1
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	1c7a      	adds	r2, r7, #1
 8003a0a:	1e59      	subs	r1, r3, #1
 8003a0c:	7011      	strb	r1, [r2, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ec      	bne.n	80039ec <bmx160_wait_conf+0x22>
		if ((rslt == BMX160_OK) && (read_data & (0 << bit_number))) {
			return rslt;
		}
	}
	if (try == 0) {
 8003a12:	1c7b      	adds	r3, r7, #1
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d101      	bne.n	8003a1e <bmx160_wait_conf+0x54>
		return BMX160_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e002      	b.n	8003a24 <bmx160_wait_conf+0x5a>
	} else {
		return rslt;
 8003a1e:	230f      	movs	r3, #15
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	781b      	ldrb	r3, [r3, #0]
	}
}
 8003a24:	0018      	movs	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	b005      	add	sp, #20
 8003a2a:	bd90      	pop	{r4, r7, pc}

08003a2c <bmx160_indirect_write_byte>:
 retval other than zero Error
 Info:		This API performs an indirect write operation.
 The data to be written is written into register 0x4F MAG_IF[3]
 ******************************************************************************/
static uint8_t bmx160_indirect_write_byte(bmx160_dev *dev, uint8_t reg,
		uint8_t value) {
 8003a2c:	b5b0      	push	{r4, r5, r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	0008      	movs	r0, r1
 8003a36:	0011      	movs	r1, r2
 8003a38:	1cfb      	adds	r3, r7, #3
 8003a3a:	1c02      	adds	r2, r0, #0
 8003a3c:	701a      	strb	r2, [r3, #0]
 8003a3e:	1cbb      	adds	r3, r7, #2
 8003a40:	1c0a      	adds	r2, r1, #0
 8003a42:	701a      	strb	r2, [r3, #0]
	uint8_t rslt;
	rslt = BMX160_write_byte(dev, BMX160_MAG_IF3_WRITE_DATA_ADDR, value);
 8003a44:	250f      	movs	r5, #15
 8003a46:	197c      	adds	r4, r7, r5
 8003a48:	1cbb      	adds	r3, r7, #2
 8003a4a:	781a      	ldrb	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	214f      	movs	r1, #79	; 0x4f
 8003a50:	0018      	movs	r0, r3
 8003a52:	f7ff ff6e 	bl	8003932 <BMX160_write_byte>
 8003a56:	0003      	movs	r3, r0
 8003a58:	7023      	strb	r3, [r4, #0]
	if (rslt == BMX160_OK) {
 8003a5a:	197b      	adds	r3, r7, r5
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <bmx160_indirect_write_byte+0x4a>
		rslt = BMX160_write_byte(dev, BMX160_MAG_IF2_WRITE_ADDR_ADDR, reg);
 8003a62:	197c      	adds	r4, r7, r5
 8003a64:	1cfb      	adds	r3, r7, #3
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	214e      	movs	r1, #78	; 0x4e
 8003a6c:	0018      	movs	r0, r3
 8003a6e:	f7ff ff60 	bl	8003932 <BMX160_write_byte>
 8003a72:	0003      	movs	r3, r0
 8003a74:	7023      	strb	r3, [r4, #0]
	}
	if (rslt == BMX160_OK) {
 8003a76:	250f      	movs	r5, #15
 8003a78:	197b      	adds	r3, r7, r5
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10f      	bne.n	8003aa0 <bmx160_indirect_write_byte+0x74>
		rslt = bmx160_wait_conf(dev, BMX160_STATUS_ADDR,
 8003a80:	197c      	adds	r4, r7, r5
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	2364      	movs	r3, #100	; 0x64
 8003a86:	2202      	movs	r2, #2
 8003a88:	211b      	movs	r1, #27
 8003a8a:	f7ff ff9e 	bl	80039ca <bmx160_wait_conf>
 8003a8e:	0003      	movs	r3, r0
 8003a90:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_MAN_OP_BIT_NUMBER, BMX160_MAG_WAIT_STATUS);
		printf("\nrslt: %d\r", rslt);
 8003a92:	197b      	adds	r3, r7, r5
 8003a94:	781a      	ldrb	r2, [r3, #0]
 8003a96:	4b06      	ldr	r3, [pc, #24]	; (8003ab0 <bmx160_indirect_write_byte+0x84>)
 8003a98:	0011      	movs	r1, r2
 8003a9a:	0018      	movs	r0, r3
 8003a9c:	f003 fba2 	bl	80071e4 <iprintf>
	}
	return rslt;
 8003aa0:	230f      	movs	r3, #15
 8003aa2:	18fb      	adds	r3, r7, r3
 8003aa4:	781b      	ldrb	r3, [r3, #0]
}
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	b004      	add	sp, #16
 8003aac:	bdb0      	pop	{r4, r5, r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	08009a68 	.word	0x08009a68

08003ab4 <bmx160_if_init>:
 return:     Result of API execution status
 retval Zero Success
 retval other than zero Error
 Info:		-
 ******************************************************************************/
uint8_t bmx160_if_init(bmx160_dev *dev, I2C_HandleTypeDef *i2c_handle) {
 8003ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
	uint8_t rslt;
	uint8_t chip_id;
	uint8_t try = 3;
 8003abe:	230f      	movs	r3, #15
 8003ac0:	18fb      	adds	r3, r7, r3
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	701a      	strb	r2, [r3, #0]
	dev->address = BMX160_ADDR_I2C;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2268      	movs	r2, #104	; 0x68
 8003aca:	715a      	strb	r2, [r3, #5]
	dev->i2cHandle = i2c_handle;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	601a      	str	r2, [r3, #0]
	while ((try--) && (dev->chip_id != BMX160_CHIP_ID)) {
 8003ad2:	e017      	b.n	8003b04 <bmx160_if_init+0x50>
		rslt = BMX160_read_byte(dev, BMX160_CHIP_ID_ADDR, &chip_id);
 8003ad4:	260e      	movs	r6, #14
 8003ad6:	19bc      	adds	r4, r7, r6
 8003ad8:	250d      	movs	r5, #13
 8003ada:	197a      	adds	r2, r7, r5
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7ff ff4f 	bl	8003984 <BMX160_read_byte>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	7023      	strb	r3, [r4, #0]

		if ((rslt == BMX160_OK) && (chip_id == BMX160_CHIP_ID)) {
 8003aea:	19bb      	adds	r3, r7, r6
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d108      	bne.n	8003b04 <bmx160_if_init+0x50>
 8003af2:	197b      	adds	r3, r7, r5
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2bd8      	cmp	r3, #216	; 0xd8
 8003af8:	d104      	bne.n	8003b04 <bmx160_if_init+0x50>
			dev->chip_id = chip_id;
 8003afa:	197b      	adds	r3, r7, r5
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	711a      	strb	r2, [r3, #4]
			break;
 8003b02:	e00b      	b.n	8003b1c <bmx160_if_init+0x68>
	while ((try--) && (dev->chip_id != BMX160_CHIP_ID)) {
 8003b04:	220f      	movs	r2, #15
 8003b06:	18bb      	adds	r3, r7, r2
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	18ba      	adds	r2, r7, r2
 8003b0c:	1e59      	subs	r1, r3, #1
 8003b0e:	7011      	strb	r1, [r2, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <bmx160_if_init+0x68>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	791b      	ldrb	r3, [r3, #4]
 8003b18:	2bd8      	cmp	r3, #216	; 0xd8
 8003b1a:	d1db      	bne.n	8003ad4 <bmx160_if_init+0x20>
		}
	}
	rslt = bmx160_soft_reset(dev);
 8003b1c:	250e      	movs	r5, #14
 8003b1e:	197c      	adds	r4, r7, r5
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 f808 	bl	8003b38 <bmx160_soft_reset>
 8003b28:	0003      	movs	r3, r0
 8003b2a:	7023      	strb	r3, [r4, #0]
	return rslt;
 8003b2c:	197b      	adds	r3, r7, r5
 8003b2e:	781b      	ldrb	r3, [r3, #0]
}
 8003b30:	0018      	movs	r0, r3
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b005      	add	sp, #20
 8003b36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b38 <bmx160_soft_reset>:
 retval other than zero Error
 Info:		 It triggers a reset including a reboot. Other values are ignored.
 Following a delay, all user configuration settings are overwritten with their
 default state or the setting stored in the NVM, wherever applicable.
 ******************************************************************************/
uint8_t bmx160_soft_reset(bmx160_dev *dev) {
 8003b38:	b5b0      	push	{r4, r5, r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
	uint8_t rslt;
	rslt = BMX160_write_byte(dev, BMX160_COMMAND_REG_ADDR,
 8003b40:	250f      	movs	r5, #15
 8003b42:	197c      	adds	r4, r7, r5
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	22b6      	movs	r2, #182	; 0xb6
 8003b48:	217e      	movs	r1, #126	; 0x7e
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	f7ff fef1 	bl	8003932 <BMX160_write_byte>
 8003b50:	0003      	movs	r3, r0
 8003b52:	7023      	strb	r3, [r4, #0]
	BMX160_SOFT_RESET_CMD);
	HAL_Delay(BMX160_SOFT_RESET_DELAY_MS);
 8003b54:	2005      	movs	r0, #5
 8003b56:	f000 f9e9 	bl	8003f2c <HAL_Delay>
	return rslt;
 8003b5a:	197b      	adds	r3, r7, r5
 8003b5c:	781b      	ldrb	r3, [r3, #0]
}
 8003b5e:	0018      	movs	r0, r3
 8003b60:	46bd      	mov	sp, r7
 8003b62:	b004      	add	sp, #16
 8003b64:	bdb0      	pop	{r4, r5, r7, pc}

08003b66 <bmx160_mag_init>:
 retval Zero Success
 retval other than zero Error
 Info:		This API initializes the sensor acc. to datasheet p.25
 initialize magnetometer to low power preset at 12.5Hz and enable magnetometer interface data mode
 ******************************************************************************/
uint8_t bmx160_mag_init(bmx160_dev *dev) {
 8003b66:	b5b0      	push	{r4, r5, r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
	uint8_t rslt;
// mag if to normal mode
	rslt = BMX160_write_byte(dev, BMX160_COMMAND_REG_ADDR,
 8003b6e:	250f      	movs	r5, #15
 8003b70:	197c      	adds	r4, r7, r5
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2219      	movs	r2, #25
 8003b76:	217e      	movs	r1, #126	; 0x7e
 8003b78:	0018      	movs	r0, r3
 8003b7a:	f7ff feda 	bl	8003932 <BMX160_write_byte>
 8003b7e:	0003      	movs	r3, r0
 8003b80:	7023      	strb	r3, [r4, #0]
	BMX160_MAG_NORMAL_MODE);

	if (rslt == BMX160_OK) {
 8003b82:	197b      	adds	r3, r7, r5
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <bmx160_mag_init+0x2a>
		HAL_Delay(BMX160_WAIT_ONE_MS);
 8003b8a:	2001      	movs	r0, #1
 8003b8c:	f000 f9ce 	bl	8003f2c <HAL_Delay>
	}
// mag if to setup mode and mag-offset to maximum offset
	if (rslt == BMX160_OK) {
 8003b90:	220f      	movs	r2, #15
 8003b92:	18bb      	adds	r3, r7, r2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d108      	bne.n	8003bac <bmx160_mag_init+0x46>
		rslt = BMX160_write_byte(dev, BMX160_MAG_IF0_ADDR,
 8003b9a:	18bc      	adds	r4, r7, r2
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	214c      	movs	r1, #76	; 0x4c
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	f7ff fec5 	bl	8003932 <BMX160_write_byte>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_SETUP_MODE_EN_MSK);
	}
// indirect write 0x01 to mag register 0x4B, put mag into sleep mode
	if (rslt == BMX160_OK) {
 8003bac:	220f      	movs	r2, #15
 8003bae:	18bb      	adds	r3, r7, r2
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d108      	bne.n	8003bc8 <bmx160_mag_init+0x62>
		rslt = bmx160_indirect_write_byte(dev, 0x4B, 0x01);
 8003bb6:	18bc      	adds	r4, r7, r2
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	214b      	movs	r1, #75	; 0x4b
 8003bbe:	0018      	movs	r0, r3
 8003bc0:	f7ff ff34 	bl	8003a2c <bmx160_indirect_write_byte>
 8003bc4:	0003      	movs	r3, r0
 8003bc6:	7023      	strb	r3, [r4, #0]
	}
// indirect set of low power preset for repxy, temp. on high accuracy *WATCH OUT*
	if (rslt == BMX160_OK) {
 8003bc8:	220f      	movs	r2, #15
 8003bca:	18bb      	adds	r3, r7, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d108      	bne.n	8003be4 <bmx160_mag_init+0x7e>
		rslt = bmx160_indirect_write_byte(dev, BMX160_INT_ENABLE_1_ADDR,
 8003bd2:	18bc      	adds	r4, r7, r2
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2217      	movs	r2, #23
 8003bd8:	2151      	movs	r1, #81	; 0x51
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f7ff ff26 	bl	8003a2c <bmx160_indirect_write_byte>
 8003be0:	0003      	movs	r3, r0
 8003be2:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_REPXY_HIGH_ACCURACY_PRESET);
	}
// indirect set of regular preset for repz, temp. on high accuracy *WATCH OUT*
	if (rslt == BMX160_OK) {
 8003be4:	220f      	movs	r2, #15
 8003be6:	18bb      	adds	r3, r7, r2
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <bmx160_mag_init+0x9a>
		rslt = bmx160_indirect_write_byte(dev, BMX160_INT_ENABLE_2_ADDR,
 8003bee:	18bc      	adds	r4, r7, r2
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2252      	movs	r2, #82	; 0x52
 8003bf4:	2152      	movs	r1, #82	; 0x52
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff ff18 	bl	8003a2c <bmx160_indirect_write_byte>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_REPZ_HIGH_ACCURACY_PRESET);
	}
// prepare MAG_IF[1-3] for mag_if data mode
	if (rslt == BMX160_OK) {
 8003c00:	220f      	movs	r2, #15
 8003c02:	18bb      	adds	r3, r7, r2
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d106      	bne.n	8003c18 <bmx160_mag_init+0xb2>
		rslt = bmx160_mag_setup2datamode(dev);
 8003c0a:	18bc      	adds	r4, r7, r2
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	0018      	movs	r0, r3
 8003c10:	f000 f83b 	bl	8003c8a <bmx160_mag_setup2datamode>
 8003c14:	0003      	movs	r3, r0
 8003c16:	7023      	strb	r3, [r4, #0]
	}
// set output data rate ODR to 12.5 Hz
	if (rslt == BMX160_OK) {
 8003c18:	220f      	movs	r2, #15
 8003c1a:	18bb      	adds	r3, r7, r2
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d108      	bne.n	8003c34 <bmx160_mag_init+0xce>
		rslt = BMX160_write_byte(dev, BMX160_MAG_CONF_ADDR,
 8003c22:	18bc      	adds	r4, r7, r2
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2205      	movs	r2, #5
 8003c28:	2144      	movs	r1, #68	; 0x44
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff fe81 	bl	8003932 <BMX160_write_byte>
 8003c30:	0003      	movs	r3, r0
 8003c32:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_ODR_12_5HZ);
	}
// mag_if data mode and maximum offset
	if (rslt == BMX160_OK) {
 8003c34:	220f      	movs	r2, #15
 8003c36:	18bb      	adds	r3, r7, r2
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d108      	bne.n	8003c50 <bmx160_mag_init+0xea>
		rslt = BMX160_write_byte(dev, BMX160_MAG_IF0_ADDR,
 8003c3e:	18bc      	adds	r4, r7, r2
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	214c      	movs	r1, #76	; 0x4c
 8003c46:	0018      	movs	r0, r3
 8003c48:	f7ff fe73 	bl	8003932 <BMX160_write_byte>
 8003c4c:	0003      	movs	r3, r0
 8003c4e:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_DATA_MODE_EN_MSK);
	}
// put mag_if to low power mode
	if (rslt == BMX160_OK) {
 8003c50:	220f      	movs	r2, #15
 8003c52:	18bb      	adds	r3, r7, r2
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d108      	bne.n	8003c6c <bmx160_mag_init+0x106>
		rslt = BMX160_write_byte(dev, BMX160_COMMAND_REG_ADDR,
 8003c5a:	18bc      	adds	r4, r7, r2
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	221a      	movs	r2, #26
 8003c60:	217e      	movs	r1, #126	; 0x7e
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7ff fe65 	bl	8003932 <BMX160_write_byte>
 8003c68:	0003      	movs	r3, r0
 8003c6a:	7023      	strb	r3, [r4, #0]
		BMX160_MAG_LOWPOWER_MODE);
	}
// delay to make sure all the settings are stored
	if (rslt == BMX160_OK) {
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d102      	bne.n	8003c7c <bmx160_mag_init+0x116>
		HAL_Delay(BMX160_WAIT_ONE_MS);
 8003c76:	2001      	movs	r0, #1
 8003c78:	f000 f958 	bl	8003f2c <HAL_Delay>
	}
	return rslt;
 8003c7c:	230f      	movs	r3, #15
 8003c7e:	18fb      	adds	r3, r7, r3
 8003c80:	781b      	ldrb	r3, [r3, #0]
}
 8003c82:	0018      	movs	r0, r3
 8003c84:	46bd      	mov	sp, r7
 8003c86:	b004      	add	sp, #16
 8003c88:	bdb0      	pop	{r4, r5, r7, pc}

08003c8a <bmx160_mag_setup2datamode>:
 return:     Result of API execution status
 retval Zero Success
 retval other than zero Error
 Info:		 see also datasheet p.24
 ******************************************************************************/
uint8_t bmx160_mag_setup2datamode(bmx160_dev *dev) {
 8003c8a:	b5b0      	push	{r4, r5, r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
	uint8_t rslt;
	rslt = BMX160_write_byte(dev, BMX160_MAG_IF3_WRITE_DATA_ADDR, 0x02);
 8003c92:	250f      	movs	r5, #15
 8003c94:	197c      	adds	r4, r7, r5
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2202      	movs	r2, #2
 8003c9a:	214f      	movs	r1, #79	; 0x4f
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff fe48 	bl	8003932 <BMX160_write_byte>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	7023      	strb	r3, [r4, #0]
	if (rslt == BMX160_OK) {
 8003ca6:	197b      	adds	r3, r7, r5
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d108      	bne.n	8003cc0 <bmx160_mag_setup2datamode+0x36>
		rslt = BMX160_write_byte(dev, BMX160_MAG_IF2_WRITE_ADDR_ADDR, 0x4C);
 8003cae:	197c      	adds	r4, r7, r5
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	224c      	movs	r2, #76	; 0x4c
 8003cb4:	214e      	movs	r1, #78	; 0x4e
 8003cb6:	0018      	movs	r0, r3
 8003cb8:	f7ff fe3b 	bl	8003932 <BMX160_write_byte>
 8003cbc:	0003      	movs	r3, r0
 8003cbe:	7023      	strb	r3, [r4, #0]
	}
	if (rslt == BMX160_OK) {
 8003cc0:	220f      	movs	r2, #15
 8003cc2:	18bb      	adds	r3, r7, r2
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d108      	bne.n	8003cdc <bmx160_mag_setup2datamode+0x52>
		rslt = BMX160_write_byte(dev, BMX160_MAG_IF1_READ_ADDR_ADDR, 0x42);
 8003cca:	18bc      	adds	r4, r7, r2
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2242      	movs	r2, #66	; 0x42
 8003cd0:	214d      	movs	r1, #77	; 0x4d
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	f7ff fe2d 	bl	8003932 <BMX160_write_byte>
 8003cd8:	0003      	movs	r3, r0
 8003cda:	7023      	strb	r3, [r4, #0]
	}
	return rslt;
 8003cdc:	230f      	movs	r3, #15
 8003cde:	18fb      	adds	r3, r7, r3
 8003ce0:	781b      	ldrb	r3, [r3, #0]
}
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b004      	add	sp, #16
 8003ce8:	bdb0      	pop	{r4, r5, r7, pc}

08003cea <bmx160_mag_read_data>:
 retval Zero Success
 retval other than zero Error
 Info:		 see also datasheet p.24
 ******************************************************************************/
uint8_t bmx160_mag_read_data(bmx160_dev *dev, uint16_t *data_x,
		uint16_t *data_y, uint16_t *data_z) {
 8003cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cec:	b089      	sub	sp, #36	; 0x24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
	uint8_t rslt;
	uint8_t reg_status;
	uint8_t mag_x[2] = { 0, 0 };
 8003cf8:	261c      	movs	r6, #28
 8003cfa:	19bb      	adds	r3, r7, r6
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	801a      	strh	r2, [r3, #0]
	uint8_t mag_y[2] = { 0, 0 };
 8003d00:	2318      	movs	r3, #24
 8003d02:	18fb      	adds	r3, r7, r3
 8003d04:	2200      	movs	r2, #0
 8003d06:	801a      	strh	r2, [r3, #0]
	uint8_t mag_z[2] = { 0, 0 };
 8003d08:	2314      	movs	r3, #20
 8003d0a:	18fb      	adds	r3, r7, r3
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	801a      	strh	r2, [r3, #0]
// check if data is ready
	rslt = BMX160_read_byte(dev, BMX160_STATUS_ADDR, &reg_status);
 8003d10:	251f      	movs	r5, #31
 8003d12:	197c      	adds	r4, r7, r5
 8003d14:	231e      	movs	r3, #30
 8003d16:	18fa      	adds	r2, r7, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	211b      	movs	r1, #27
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	f7ff fe31 	bl	8003984 <BMX160_read_byte>
 8003d22:	0003      	movs	r3, r0
 8003d24:	7023      	strb	r3, [r4, #0]
	if ((rslt == BMX160_OK) && (reg_status & BMX160_MAG_DATA_RDY_MSK)) {
 8003d26:	0029      	movs	r1, r5
 8003d28:	187b      	adds	r3, r7, r1
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d000      	beq.n	8003d32 <bmx160_mag_read_data+0x48>
 8003d30:	e084      	b.n	8003e3c <bmx160_mag_read_data+0x152>
 8003d32:	231e      	movs	r3, #30
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	001a      	movs	r2, r3
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d100      	bne.n	8003d42 <bmx160_mag_read_data+0x58>
 8003d40:	e07c      	b.n	8003e3c <bmx160_mag_read_data+0x152>
		// read each magnetometer register (2 per channel)
		rslt = BMX160_read_byte(dev, BMX160_MAG_X_DATA_LSB_ADDR, &mag_x[0]);
 8003d42:	000d      	movs	r5, r1
 8003d44:	187c      	adds	r4, r7, r1
 8003d46:	19ba      	adds	r2, r7, r6
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff fe19 	bl	8003984 <BMX160_read_byte>
 8003d52:	0003      	movs	r3, r0
 8003d54:	7023      	strb	r3, [r4, #0]
		if (rslt == BMX160_OK) {
 8003d56:	197b      	adds	r3, r7, r5
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <bmx160_mag_read_data+0x88>
			rslt = BMX160_read_byte(dev, BMX160_MAG_X_DATA_MSB_ADDR, &mag_x[1]);
 8003d5e:	197c      	adds	r4, r7, r5
 8003d60:	19bb      	adds	r3, r7, r6
 8003d62:	1c5a      	adds	r2, r3, #1
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2105      	movs	r1, #5
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7ff fe0b 	bl	8003984 <BMX160_read_byte>
 8003d6e:	0003      	movs	r3, r0
 8003d70:	7023      	strb	r3, [r4, #0]
		}
		if (rslt == BMX160_OK) {
 8003d72:	221f      	movs	r2, #31
 8003d74:	18bb      	adds	r3, r7, r2
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <bmx160_mag_read_data+0xa6>
			rslt = BMX160_read_byte(dev, BMX160_MAG_Y_DATA_LSB_ADDR, &mag_y[0]);
 8003d7c:	18bc      	adds	r4, r7, r2
 8003d7e:	2318      	movs	r3, #24
 8003d80:	18fa      	adds	r2, r7, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2106      	movs	r1, #6
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fdfc 	bl	8003984 <BMX160_read_byte>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	7023      	strb	r3, [r4, #0]
		}
		if (rslt == BMX160_OK) {
 8003d90:	221f      	movs	r2, #31
 8003d92:	18bb      	adds	r3, r7, r2
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <bmx160_mag_read_data+0xc6>
			rslt = BMX160_read_byte(dev, BMX160_MAG_Y_DATA_MSB_ADDR, &mag_y[1]);
 8003d9a:	18bc      	adds	r4, r7, r2
 8003d9c:	2318      	movs	r3, #24
 8003d9e:	18fb      	adds	r3, r7, r3
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2107      	movs	r1, #7
 8003da6:	0018      	movs	r0, r3
 8003da8:	f7ff fdec 	bl	8003984 <BMX160_read_byte>
 8003dac:	0003      	movs	r3, r0
 8003dae:	7023      	strb	r3, [r4, #0]
		}
		if (rslt == BMX160_OK) {
 8003db0:	221f      	movs	r2, #31
 8003db2:	18bb      	adds	r3, r7, r2
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d109      	bne.n	8003dce <bmx160_mag_read_data+0xe4>
			rslt = BMX160_read_byte(dev, BMX160_MAG_Z_DATA_LSB_ADDR, &mag_z[0]);
 8003dba:	18bc      	adds	r4, r7, r2
 8003dbc:	2314      	movs	r3, #20
 8003dbe:	18fa      	adds	r2, r7, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2108      	movs	r1, #8
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7ff fddd 	bl	8003984 <BMX160_read_byte>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	7023      	strb	r3, [r4, #0]
		}
		if (rslt == BMX160_OK) {
 8003dce:	221f      	movs	r2, #31
 8003dd0:	18bb      	adds	r3, r7, r2
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <bmx160_mag_read_data+0x104>
			rslt = BMX160_read_byte(dev, BMX160_MAG_Z_DATA_MSB_ADDR, &mag_z[1]);
 8003dd8:	18bc      	adds	r4, r7, r2
 8003dda:	2314      	movs	r3, #20
 8003ddc:	18fb      	adds	r3, r7, r3
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2109      	movs	r1, #9
 8003de4:	0018      	movs	r0, r3
 8003de6:	f7ff fdcd 	bl	8003984 <BMX160_read_byte>
 8003dea:	0003      	movs	r3, r0
 8003dec:	7023      	strb	r3, [r4, #0]
		}
		*data_x = (int16_t) ((mag_x[1] << 8) | (mag_x[0]));
 8003dee:	211c      	movs	r1, #28
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	021b      	lsls	r3, r3, #8
 8003df6:	b21a      	sxth	r2, r3
 8003df8:	187b      	adds	r3, r7, r1
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	b21b      	sxth	r3, r3
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	b21b      	sxth	r3, r3
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	801a      	strh	r2, [r3, #0]
		*data_y = (int16_t) ((mag_y[1] << 8) | (mag_y[0]));
 8003e08:	2118      	movs	r1, #24
 8003e0a:	187b      	adds	r3, r7, r1
 8003e0c:	785b      	ldrb	r3, [r3, #1]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	b21a      	sxth	r2, r3
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	b21b      	sxth	r3, r3
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	b21b      	sxth	r3, r3
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	801a      	strh	r2, [r3, #0]
		*data_z = (int16_t) ((mag_z[1] << 8) | (mag_z[0]));
 8003e22:	2114      	movs	r1, #20
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	785b      	ldrb	r3, [r3, #1]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	b21a      	sxth	r2, r3
 8003e2c:	187b      	adds	r3, r7, r1
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b21b      	sxth	r3, r3
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	801a      	strh	r2, [r3, #0]
	}

	return rslt;
 8003e3c:	231f      	movs	r3, #31
 8003e3e:	18fb      	adds	r3, r7, r3
 8003e40:	781b      	ldrb	r3, [r3, #0]
}
 8003e42:	0018      	movs	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	b009      	add	sp, #36	; 0x24
 8003e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003e4c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003e52:	1dfb      	adds	r3, r7, #7
 8003e54:	2200      	movs	r2, #0
 8003e56:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8003e58:	4b0b      	ldr	r3, [pc, #44]	; (8003e88 <HAL_Init+0x3c>)
 8003e5a:	681a      	ldr	r2, [r3, #0]
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <HAL_Init+0x3c>)
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e64:	2003      	movs	r0, #3
 8003e66:	f000 f811 	bl	8003e8c <HAL_InitTick>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8003e6e:	1dfb      	adds	r3, r7, #7
 8003e70:	2201      	movs	r2, #1
 8003e72:	701a      	strb	r2, [r3, #0]
 8003e74:	e001      	b.n	8003e7a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003e76:	f7ff fbbd 	bl	80035f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003e7a:	1dfb      	adds	r3, r7, #7
 8003e7c:	781b      	ldrb	r3, [r3, #0]
}
 8003e7e:	0018      	movs	r0, r3
 8003e80:	46bd      	mov	sp, r7
 8003e82:	b002      	add	sp, #8
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	40022000 	.word	0x40022000

08003e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e8c:	b590      	push	{r4, r7, lr}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e94:	4b14      	ldr	r3, [pc, #80]	; (8003ee8 <HAL_InitTick+0x5c>)
 8003e96:	681c      	ldr	r4, [r3, #0]
 8003e98:	4b14      	ldr	r3, [pc, #80]	; (8003eec <HAL_InitTick+0x60>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	0019      	movs	r1, r3
 8003e9e:	23fa      	movs	r3, #250	; 0xfa
 8003ea0:	0098      	lsls	r0, r3, #2
 8003ea2:	f7fc f94d 	bl	8000140 <__udivsi3>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	0019      	movs	r1, r3
 8003eaa:	0020      	movs	r0, r4
 8003eac:	f7fc f948 	bl	8000140 <__udivsi3>
 8003eb0:	0003      	movs	r3, r0
 8003eb2:	0018      	movs	r0, r3
 8003eb4:	f000 f905 	bl	80040c2 <HAL_SYSTICK_Config>
 8003eb8:	1e03      	subs	r3, r0, #0
 8003eba:	d001      	beq.n	8003ec0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e00f      	b.n	8003ee0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d80b      	bhi.n	8003ede <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	2301      	movs	r3, #1
 8003eca:	425b      	negs	r3, r3
 8003ecc:	2200      	movs	r2, #0
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f000 f8e2 	bl	8004098 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_InitTick+0x64>)
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
 8003edc:	e000      	b.n	8003ee0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
}
 8003ee0:	0018      	movs	r0, r3
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b003      	add	sp, #12
 8003ee6:	bd90      	pop	{r4, r7, pc}
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	20000008 	.word	0x20000008
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <HAL_IncTick+0x1c>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	001a      	movs	r2, r3
 8003efe:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <HAL_IncTick+0x20>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	18d2      	adds	r2, r2, r3
 8003f04:	4b03      	ldr	r3, [pc, #12]	; (8003f14 <HAL_IncTick+0x20>)
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	46c0      	nop			; (mov r8, r8)
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	46c0      	nop			; (mov r8, r8)
 8003f10:	20000008 	.word	0x20000008
 8003f14:	200002d4 	.word	0x200002d4

08003f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f1c:	4b02      	ldr	r3, [pc, #8]	; (8003f28 <HAL_GetTick+0x10>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	200002d4 	.word	0x200002d4

08003f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f34:	f7ff fff0 	bl	8003f18 <HAL_GetTick>
 8003f38:	0003      	movs	r3, r0
 8003f3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	3301      	adds	r3, #1
 8003f44:	d005      	beq.n	8003f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f46:	4b0a      	ldr	r3, [pc, #40]	; (8003f70 <HAL_Delay+0x44>)
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003f52:	46c0      	nop			; (mov r8, r8)
 8003f54:	f7ff ffe0 	bl	8003f18 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d8f7      	bhi.n	8003f54 <HAL_Delay+0x28>
  {
  }
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	46c0      	nop			; (mov r8, r8)
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	b004      	add	sp, #16
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	46c0      	nop			; (mov r8, r8)
 8003f70:	20000008 	.word	0x20000008

08003f74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f74:	b590      	push	{r4, r7, lr}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	0002      	movs	r2, r0
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	1dfb      	adds	r3, r7, #7
 8003f80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003f82:	1dfb      	adds	r3, r7, #7
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	2b7f      	cmp	r3, #127	; 0x7f
 8003f88:	d828      	bhi.n	8003fdc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <__NVIC_SetPriority+0xd4>)
 8003f8c:	1dfb      	adds	r3, r7, #7
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	b25b      	sxtb	r3, r3
 8003f92:	089b      	lsrs	r3, r3, #2
 8003f94:	33c0      	adds	r3, #192	; 0xc0
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	589b      	ldr	r3, [r3, r2]
 8003f9a:	1dfa      	adds	r2, r7, #7
 8003f9c:	7812      	ldrb	r2, [r2, #0]
 8003f9e:	0011      	movs	r1, r2
 8003fa0:	2203      	movs	r2, #3
 8003fa2:	400a      	ands	r2, r1
 8003fa4:	00d2      	lsls	r2, r2, #3
 8003fa6:	21ff      	movs	r1, #255	; 0xff
 8003fa8:	4091      	lsls	r1, r2
 8003faa:	000a      	movs	r2, r1
 8003fac:	43d2      	mvns	r2, r2
 8003fae:	401a      	ands	r2, r3
 8003fb0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	22ff      	movs	r2, #255	; 0xff
 8003fb8:	401a      	ands	r2, r3
 8003fba:	1dfb      	adds	r3, r7, #7
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	4003      	ands	r3, r0
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fc8:	481f      	ldr	r0, [pc, #124]	; (8004048 <__NVIC_SetPriority+0xd4>)
 8003fca:	1dfb      	adds	r3, r7, #7
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	089b      	lsrs	r3, r3, #2
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	33c0      	adds	r3, #192	; 0xc0
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003fda:	e031      	b.n	8004040 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <__NVIC_SetPriority+0xd8>)
 8003fde:	1dfb      	adds	r3, r7, #7
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	230f      	movs	r3, #15
 8003fe6:	400b      	ands	r3, r1
 8003fe8:	3b08      	subs	r3, #8
 8003fea:	089b      	lsrs	r3, r3, #2
 8003fec:	3306      	adds	r3, #6
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	18d3      	adds	r3, r2, r3
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	1dfa      	adds	r2, r7, #7
 8003ff8:	7812      	ldrb	r2, [r2, #0]
 8003ffa:	0011      	movs	r1, r2
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	400a      	ands	r2, r1
 8004000:	00d2      	lsls	r2, r2, #3
 8004002:	21ff      	movs	r1, #255	; 0xff
 8004004:	4091      	lsls	r1, r2
 8004006:	000a      	movs	r2, r1
 8004008:	43d2      	mvns	r2, r2
 800400a:	401a      	ands	r2, r3
 800400c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	019b      	lsls	r3, r3, #6
 8004012:	22ff      	movs	r2, #255	; 0xff
 8004014:	401a      	ands	r2, r3
 8004016:	1dfb      	adds	r3, r7, #7
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	0018      	movs	r0, r3
 800401c:	2303      	movs	r3, #3
 800401e:	4003      	ands	r3, r0
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004024:	4809      	ldr	r0, [pc, #36]	; (800404c <__NVIC_SetPriority+0xd8>)
 8004026:	1dfb      	adds	r3, r7, #7
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	001c      	movs	r4, r3
 800402c:	230f      	movs	r3, #15
 800402e:	4023      	ands	r3, r4
 8004030:	3b08      	subs	r3, #8
 8004032:	089b      	lsrs	r3, r3, #2
 8004034:	430a      	orrs	r2, r1
 8004036:	3306      	adds	r3, #6
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	18c3      	adds	r3, r0, r3
 800403c:	3304      	adds	r3, #4
 800403e:	601a      	str	r2, [r3, #0]
}
 8004040:	46c0      	nop			; (mov r8, r8)
 8004042:	46bd      	mov	sp, r7
 8004044:	b003      	add	sp, #12
 8004046:	bd90      	pop	{r4, r7, pc}
 8004048:	e000e100 	.word	0xe000e100
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1e5a      	subs	r2, r3, #1
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	045b      	lsls	r3, r3, #17
 8004060:	429a      	cmp	r2, r3
 8004062:	d301      	bcc.n	8004068 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004064:	2301      	movs	r3, #1
 8004066:	e010      	b.n	800408a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <SysTick_Config+0x44>)
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	3a01      	subs	r2, #1
 800406e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004070:	2301      	movs	r3, #1
 8004072:	425b      	negs	r3, r3
 8004074:	2103      	movs	r1, #3
 8004076:	0018      	movs	r0, r3
 8004078:	f7ff ff7c 	bl	8003f74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <SysTick_Config+0x44>)
 800407e:	2200      	movs	r2, #0
 8004080:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004082:	4b04      	ldr	r3, [pc, #16]	; (8004094 <SysTick_Config+0x44>)
 8004084:	2207      	movs	r2, #7
 8004086:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004088:	2300      	movs	r3, #0
}
 800408a:	0018      	movs	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	b002      	add	sp, #8
 8004090:	bd80      	pop	{r7, pc}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	e000e010 	.word	0xe000e010

08004098 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	210f      	movs	r1, #15
 80040a4:	187b      	adds	r3, r7, r1
 80040a6:	1c02      	adds	r2, r0, #0
 80040a8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	b25b      	sxtb	r3, r3
 80040b2:	0011      	movs	r1, r2
 80040b4:	0018      	movs	r0, r3
 80040b6:	f7ff ff5d 	bl	8003f74 <__NVIC_SetPriority>
}
 80040ba:	46c0      	nop			; (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b082      	sub	sp, #8
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f7ff ffbf 	bl	8004050 <SysTick_Config>
 80040d2:	0003      	movs	r3, r0
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	b002      	add	sp, #8
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80040f2:	e14f      	b.n	8004394 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	2101      	movs	r1, #1
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	4091      	lsls	r1, r2
 80040fe:	000a      	movs	r2, r1
 8004100:	4013      	ands	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d100      	bne.n	800410c <HAL_GPIO_Init+0x30>
 800410a:	e140      	b.n	800438e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	2203      	movs	r2, #3
 8004112:	4013      	ands	r3, r2
 8004114:	2b01      	cmp	r3, #1
 8004116:	d005      	beq.n	8004124 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004120:	2b02      	cmp	r3, #2
 8004122:	d130      	bne.n	8004186 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	2203      	movs	r2, #3
 8004130:	409a      	lsls	r2, r3
 8004132:	0013      	movs	r3, r2
 8004134:	43da      	mvns	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	4013      	ands	r3, r2
 800413a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68da      	ldr	r2, [r3, #12]
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	409a      	lsls	r2, r3
 8004146:	0013      	movs	r3, r2
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800415a:	2201      	movs	r2, #1
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	409a      	lsls	r2, r3
 8004160:	0013      	movs	r3, r2
 8004162:	43da      	mvns	r2, r3
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	091b      	lsrs	r3, r3, #4
 8004170:	2201      	movs	r2, #1
 8004172:	401a      	ands	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	409a      	lsls	r2, r3
 8004178:	0013      	movs	r3, r2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	2203      	movs	r2, #3
 800418c:	4013      	ands	r3, r2
 800418e:	2b03      	cmp	r3, #3
 8004190:	d017      	beq.n	80041c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	2203      	movs	r2, #3
 800419e:	409a      	lsls	r2, r3
 80041a0:	0013      	movs	r3, r2
 80041a2:	43da      	mvns	r2, r3
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	4013      	ands	r3, r2
 80041a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	409a      	lsls	r2, r3
 80041b4:	0013      	movs	r3, r2
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	693a      	ldr	r2, [r7, #16]
 80041c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2203      	movs	r2, #3
 80041c8:	4013      	ands	r3, r2
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d123      	bne.n	8004216 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	08da      	lsrs	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	0092      	lsls	r2, r2, #2
 80041d8:	58d3      	ldr	r3, [r2, r3]
 80041da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2207      	movs	r2, #7
 80041e0:	4013      	ands	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	220f      	movs	r2, #15
 80041e6:	409a      	lsls	r2, r3
 80041e8:	0013      	movs	r3, r2
 80041ea:	43da      	mvns	r2, r3
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	4013      	ands	r3, r2
 80041f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	691a      	ldr	r2, [r3, #16]
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	2107      	movs	r1, #7
 80041fa:	400b      	ands	r3, r1
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	409a      	lsls	r2, r3
 8004200:	0013      	movs	r3, r2
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	08da      	lsrs	r2, r3, #3
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	3208      	adds	r2, #8
 8004210:	0092      	lsls	r2, r2, #2
 8004212:	6939      	ldr	r1, [r7, #16]
 8004214:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2203      	movs	r2, #3
 8004222:	409a      	lsls	r2, r3
 8004224:	0013      	movs	r3, r2
 8004226:	43da      	mvns	r2, r3
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	4013      	ands	r3, r2
 800422c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	2203      	movs	r2, #3
 8004234:	401a      	ands	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	005b      	lsls	r3, r3, #1
 800423a:	409a      	lsls	r2, r3
 800423c:	0013      	movs	r3, r2
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	4313      	orrs	r3, r2
 8004242:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	23c0      	movs	r3, #192	; 0xc0
 8004250:	029b      	lsls	r3, r3, #10
 8004252:	4013      	ands	r3, r2
 8004254:	d100      	bne.n	8004258 <HAL_GPIO_Init+0x17c>
 8004256:	e09a      	b.n	800438e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004258:	4b54      	ldr	r3, [pc, #336]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 800425a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800425c:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_GPIO_Init+0x2d0>)
 800425e:	2101      	movs	r1, #1
 8004260:	430a      	orrs	r2, r1
 8004262:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004264:	4a52      	ldr	r2, [pc, #328]	; (80043b0 <HAL_GPIO_Init+0x2d4>)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	3302      	adds	r3, #2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	589b      	ldr	r3, [r3, r2]
 8004270:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2203      	movs	r2, #3
 8004276:	4013      	ands	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	220f      	movs	r2, #15
 800427c:	409a      	lsls	r2, r3
 800427e:	0013      	movs	r3, r2
 8004280:	43da      	mvns	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	4013      	ands	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	23a0      	movs	r3, #160	; 0xa0
 800428c:	05db      	lsls	r3, r3, #23
 800428e:	429a      	cmp	r2, r3
 8004290:	d019      	beq.n	80042c6 <HAL_GPIO_Init+0x1ea>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a47      	ldr	r2, [pc, #284]	; (80043b4 <HAL_GPIO_Init+0x2d8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d013      	beq.n	80042c2 <HAL_GPIO_Init+0x1e6>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a46      	ldr	r2, [pc, #280]	; (80043b8 <HAL_GPIO_Init+0x2dc>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d00d      	beq.n	80042be <HAL_GPIO_Init+0x1e2>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4a45      	ldr	r2, [pc, #276]	; (80043bc <HAL_GPIO_Init+0x2e0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d007      	beq.n	80042ba <HAL_GPIO_Init+0x1de>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a44      	ldr	r2, [pc, #272]	; (80043c0 <HAL_GPIO_Init+0x2e4>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d101      	bne.n	80042b6 <HAL_GPIO_Init+0x1da>
 80042b2:	2305      	movs	r3, #5
 80042b4:	e008      	b.n	80042c8 <HAL_GPIO_Init+0x1ec>
 80042b6:	2306      	movs	r3, #6
 80042b8:	e006      	b.n	80042c8 <HAL_GPIO_Init+0x1ec>
 80042ba:	2303      	movs	r3, #3
 80042bc:	e004      	b.n	80042c8 <HAL_GPIO_Init+0x1ec>
 80042be:	2302      	movs	r3, #2
 80042c0:	e002      	b.n	80042c8 <HAL_GPIO_Init+0x1ec>
 80042c2:	2301      	movs	r3, #1
 80042c4:	e000      	b.n	80042c8 <HAL_GPIO_Init+0x1ec>
 80042c6:	2300      	movs	r3, #0
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	2103      	movs	r1, #3
 80042cc:	400a      	ands	r2, r1
 80042ce:	0092      	lsls	r2, r2, #2
 80042d0:	4093      	lsls	r3, r2
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d8:	4935      	ldr	r1, [pc, #212]	; (80043b0 <HAL_GPIO_Init+0x2d4>)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	3302      	adds	r3, #2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80042e6:	4b37      	ldr	r3, [pc, #220]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	43da      	mvns	r2, r3
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4013      	ands	r3, r2
 80042f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685a      	ldr	r2, [r3, #4]
 80042fa:	2380      	movs	r3, #128	; 0x80
 80042fc:	025b      	lsls	r3, r3, #9
 80042fe:	4013      	ands	r3, r2
 8004300:	d003      	beq.n	800430a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800430a:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004310:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	43da      	mvns	r2, r3
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	4013      	ands	r3, r2
 800431e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685a      	ldr	r2, [r3, #4]
 8004324:	2380      	movs	r3, #128	; 0x80
 8004326:	029b      	lsls	r3, r3, #10
 8004328:	4013      	ands	r3, r2
 800432a:	d003      	beq.n	8004334 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43da      	mvns	r2, r3
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	4013      	ands	r3, r2
 8004348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	035b      	lsls	r3, r3, #13
 8004352:	4013      	ands	r3, r2
 8004354:	d003      	beq.n	800435e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004356:	693a      	ldr	r2, [r7, #16]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43da      	mvns	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4013      	ands	r3, r2
 8004372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685a      	ldr	r2, [r3, #4]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	039b      	lsls	r3, r3, #14
 800437c:	4013      	ands	r3, r2
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <HAL_GPIO_Init+0x2e8>)
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	3301      	adds	r3, #1
 8004392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	40da      	lsrs	r2, r3
 800439c:	1e13      	subs	r3, r2, #0
 800439e:	d000      	beq.n	80043a2 <HAL_GPIO_Init+0x2c6>
 80043a0:	e6a8      	b.n	80040f4 <HAL_GPIO_Init+0x18>
  }
}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	46bd      	mov	sp, r7
 80043a8:	b006      	add	sp, #24
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000
 80043b0:	40010000 	.word	0x40010000
 80043b4:	50000400 	.word	0x50000400
 80043b8:	50000800 	.word	0x50000800
 80043bc:	50000c00 	.word	0x50000c00
 80043c0:	50001c00 	.word	0x50001c00
 80043c4:	40010400 	.word	0x40010400

080043c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e082      	b.n	80044e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2241      	movs	r2, #65	; 0x41
 80043de:	5c9b      	ldrb	r3, [r3, r2]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d107      	bne.n	80043f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2240      	movs	r2, #64	; 0x40
 80043ea:	2100      	movs	r1, #0
 80043ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff f913 	bl	800361c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2241      	movs	r2, #65	; 0x41
 80043fa:	2124      	movs	r1, #36	; 0x24
 80043fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2101      	movs	r1, #1
 800440a:	438a      	bics	r2, r1
 800440c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4934      	ldr	r1, [pc, #208]	; (80044e8 <HAL_I2C_Init+0x120>)
 8004418:	400a      	ands	r2, r1
 800441a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4931      	ldr	r1, [pc, #196]	; (80044ec <HAL_I2C_Init+0x124>)
 8004428:	400a      	ands	r2, r1
 800442a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d108      	bne.n	8004446 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2180      	movs	r1, #128	; 0x80
 800443e:	0209      	lsls	r1, r1, #8
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]
 8004444:	e007      	b.n	8004456 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2184      	movs	r1, #132	; 0x84
 8004450:	0209      	lsls	r1, r1, #8
 8004452:	430a      	orrs	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b02      	cmp	r3, #2
 800445c:	d104      	bne.n	8004468 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2280      	movs	r2, #128	; 0x80
 8004464:	0112      	lsls	r2, r2, #4
 8004466:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	491f      	ldr	r1, [pc, #124]	; (80044f0 <HAL_I2C_Init+0x128>)
 8004474:	430a      	orrs	r2, r1
 8004476:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	491a      	ldr	r1, [pc, #104]	; (80044ec <HAL_I2C_Init+0x124>)
 8004484:	400a      	ands	r2, r1
 8004486:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	695b      	ldr	r3, [r3, #20]
 8004490:	431a      	orrs	r2, r3
 8004492:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69d9      	ldr	r1, [r3, #28]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2101      	movs	r1, #1
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2241      	movs	r2, #65	; 0x41
 80044cc:	2120      	movs	r1, #32
 80044ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2242      	movs	r2, #66	; 0x42
 80044da:	2100      	movs	r1, #0
 80044dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	0018      	movs	r0, r3
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	f0ffffff 	.word	0xf0ffffff
 80044ec:	ffff7fff 	.word	0xffff7fff
 80044f0:	02008000 	.word	0x02008000

080044f4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b089      	sub	sp, #36	; 0x24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	000c      	movs	r4, r1
 80044fe:	0010      	movs	r0, r2
 8004500:	0019      	movs	r1, r3
 8004502:	230a      	movs	r3, #10
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	1c22      	adds	r2, r4, #0
 8004508:	801a      	strh	r2, [r3, #0]
 800450a:	2308      	movs	r3, #8
 800450c:	18fb      	adds	r3, r7, r3
 800450e:	1c02      	adds	r2, r0, #0
 8004510:	801a      	strh	r2, [r3, #0]
 8004512:	1dbb      	adds	r3, r7, #6
 8004514:	1c0a      	adds	r2, r1, #0
 8004516:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2241      	movs	r2, #65	; 0x41
 800451c:	5c9b      	ldrb	r3, [r3, r2]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b20      	cmp	r3, #32
 8004522:	d000      	beq.n	8004526 <HAL_I2C_Mem_Write+0x32>
 8004524:	e10c      	b.n	8004740 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_I2C_Mem_Write+0x42>
 800452c:	232c      	movs	r3, #44	; 0x2c
 800452e:	18fb      	adds	r3, r7, r3
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d105      	bne.n	8004542 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2280      	movs	r2, #128	; 0x80
 800453a:	0092      	lsls	r2, r2, #2
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0ff      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2240      	movs	r2, #64	; 0x40
 8004546:	5c9b      	ldrb	r3, [r3, r2]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d101      	bne.n	8004550 <HAL_I2C_Mem_Write+0x5c>
 800454c:	2302      	movs	r3, #2
 800454e:	e0f8      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	2101      	movs	r1, #1
 8004556:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004558:	f7ff fcde 	bl	8003f18 <HAL_GetTick>
 800455c:	0003      	movs	r3, r0
 800455e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004560:	2380      	movs	r3, #128	; 0x80
 8004562:	0219      	lsls	r1, r3, #8
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2319      	movs	r3, #25
 800456c:	2201      	movs	r2, #1
 800456e:	f000 fb0b 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004572:	1e03      	subs	r3, r0, #0
 8004574:	d001      	beq.n	800457a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e0e3      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2241      	movs	r2, #65	; 0x41
 800457e:	2121      	movs	r1, #33	; 0x21
 8004580:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2242      	movs	r2, #66	; 0x42
 8004586:	2140      	movs	r1, #64	; 0x40
 8004588:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	222c      	movs	r2, #44	; 0x2c
 800459a:	18ba      	adds	r2, r7, r2
 800459c:	8812      	ldrh	r2, [r2, #0]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045a6:	1dbb      	adds	r3, r7, #6
 80045a8:	881c      	ldrh	r4, [r3, #0]
 80045aa:	2308      	movs	r3, #8
 80045ac:	18fb      	adds	r3, r7, r3
 80045ae:	881a      	ldrh	r2, [r3, #0]
 80045b0:	230a      	movs	r3, #10
 80045b2:	18fb      	adds	r3, r7, r3
 80045b4:	8819      	ldrh	r1, [r3, #0]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9301      	str	r3, [sp, #4]
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	0023      	movs	r3, r4
 80045c2:	f000 f9f9 	bl	80049b8 <I2C_RequestMemoryWrite>
 80045c6:	1e03      	subs	r3, r0, #0
 80045c8:	d005      	beq.n	80045d6 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2240      	movs	r2, #64	; 0x40
 80045ce:	2100      	movs	r1, #0
 80045d0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e0b5      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2bff      	cmp	r3, #255	; 0xff
 80045de:	d911      	bls.n	8004604 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	22ff      	movs	r2, #255	; 0xff
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	045c      	lsls	r4, r3, #17
 80045f0:	230a      	movs	r3, #10
 80045f2:	18fb      	adds	r3, r7, r3
 80045f4:	8819      	ldrh	r1, [r3, #0]
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	0023      	movs	r3, r4
 80045fe:	f000 fbf7 	bl	8004df0 <I2C_TransferConfig>
 8004602:	e012      	b.n	800462a <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	b2da      	uxtb	r2, r3
 8004614:	2380      	movs	r3, #128	; 0x80
 8004616:	049c      	lsls	r4, r3, #18
 8004618:	230a      	movs	r3, #10
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	8819      	ldrh	r1, [r3, #0]
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	2300      	movs	r3, #0
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	0023      	movs	r3, r4
 8004626:	f000 fbe3 	bl	8004df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	0018      	movs	r0, r3
 8004632:	f000 fae8 	bl	8004c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e081      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03a      	beq.n	80046ee <HAL_I2C_Mem_Write+0x1fa>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800467c:	2b00      	cmp	r3, #0
 800467e:	d136      	bne.n	80046ee <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	0013      	movs	r3, r2
 800468a:	2200      	movs	r2, #0
 800468c:	2180      	movs	r1, #128	; 0x80
 800468e:	f000 fa7b 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004692:	1e03      	subs	r3, r0, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e053      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	2bff      	cmp	r3, #255	; 0xff
 80046a2:	d911      	bls.n	80046c8 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	22ff      	movs	r2, #255	; 0xff
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	2380      	movs	r3, #128	; 0x80
 80046b2:	045c      	lsls	r4, r3, #17
 80046b4:	230a      	movs	r3, #10
 80046b6:	18fb      	adds	r3, r7, r3
 80046b8:	8819      	ldrh	r1, [r3, #0]
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	2300      	movs	r3, #0
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	0023      	movs	r3, r4
 80046c2:	f000 fb95 	bl	8004df0 <I2C_TransferConfig>
 80046c6:	e012      	b.n	80046ee <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	049c      	lsls	r4, r3, #18
 80046dc:	230a      	movs	r3, #10
 80046de:	18fb      	adds	r3, r7, r3
 80046e0:	8819      	ldrh	r1, [r3, #0]
 80046e2:	68f8      	ldr	r0, [r7, #12]
 80046e4:	2300      	movs	r3, #0
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	0023      	movs	r3, r4
 80046ea:	f000 fb81 	bl	8004df0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d198      	bne.n	800462a <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	0018      	movs	r0, r3
 8004700:	f000 fac0 	bl	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d001      	beq.n	800470c <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e01a      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2220      	movs	r2, #32
 8004712:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	490b      	ldr	r1, [pc, #44]	; (800474c <HAL_I2C_Mem_Write+0x258>)
 8004720:	400a      	ands	r2, r1
 8004722:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2241      	movs	r2, #65	; 0x41
 8004728:	2120      	movs	r1, #32
 800472a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2242      	movs	r2, #66	; 0x42
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2240      	movs	r2, #64	; 0x40
 8004738:	2100      	movs	r1, #0
 800473a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800473c:	2300      	movs	r3, #0
 800473e:	e000      	b.n	8004742 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8004740:	2302      	movs	r3, #2
  }
}
 8004742:	0018      	movs	r0, r3
 8004744:	46bd      	mov	sp, r7
 8004746:	b007      	add	sp, #28
 8004748:	bd90      	pop	{r4, r7, pc}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	fe00e800 	.word	0xfe00e800

08004750 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b590      	push	{r4, r7, lr}
 8004752:	b089      	sub	sp, #36	; 0x24
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	000c      	movs	r4, r1
 800475a:	0010      	movs	r0, r2
 800475c:	0019      	movs	r1, r3
 800475e:	230a      	movs	r3, #10
 8004760:	18fb      	adds	r3, r7, r3
 8004762:	1c22      	adds	r2, r4, #0
 8004764:	801a      	strh	r2, [r3, #0]
 8004766:	2308      	movs	r3, #8
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	1c02      	adds	r2, r0, #0
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	1dbb      	adds	r3, r7, #6
 8004770:	1c0a      	adds	r2, r1, #0
 8004772:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2241      	movs	r2, #65	; 0x41
 8004778:	5c9b      	ldrb	r3, [r3, r2]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	2b20      	cmp	r3, #32
 800477e:	d000      	beq.n	8004782 <HAL_I2C_Mem_Read+0x32>
 8004780:	e110      	b.n	80049a4 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d004      	beq.n	8004792 <HAL_I2C_Mem_Read+0x42>
 8004788:	232c      	movs	r3, #44	; 0x2c
 800478a:	18fb      	adds	r3, r7, r3
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d105      	bne.n	800479e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2280      	movs	r2, #128	; 0x80
 8004796:	0092      	lsls	r2, r2, #2
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e103      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2240      	movs	r2, #64	; 0x40
 80047a2:	5c9b      	ldrb	r3, [r3, r2]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_I2C_Mem_Read+0x5c>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e0fc      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2240      	movs	r2, #64	; 0x40
 80047b0:	2101      	movs	r1, #1
 80047b2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047b4:	f7ff fbb0 	bl	8003f18 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047bc:	2380      	movs	r3, #128	; 0x80
 80047be:	0219      	lsls	r1, r3, #8
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	9300      	str	r3, [sp, #0]
 80047c6:	2319      	movs	r3, #25
 80047c8:	2201      	movs	r2, #1
 80047ca:	f000 f9dd 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80047ce:	1e03      	subs	r3, r0, #0
 80047d0:	d001      	beq.n	80047d6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e0e7      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2241      	movs	r2, #65	; 0x41
 80047da:	2122      	movs	r1, #34	; 0x22
 80047dc:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2242      	movs	r2, #66	; 0x42
 80047e2:	2140      	movs	r1, #64	; 0x40
 80047e4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	222c      	movs	r2, #44	; 0x2c
 80047f6:	18ba      	adds	r2, r7, r2
 80047f8:	8812      	ldrh	r2, [r2, #0]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004802:	1dbb      	adds	r3, r7, #6
 8004804:	881c      	ldrh	r4, [r3, #0]
 8004806:	2308      	movs	r3, #8
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	881a      	ldrh	r2, [r3, #0]
 800480c:	230a      	movs	r3, #10
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	8819      	ldrh	r1, [r3, #0]
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	0023      	movs	r3, r4
 800481e:	f000 f92f 	bl	8004a80 <I2C_RequestMemoryRead>
 8004822:	1e03      	subs	r3, r0, #0
 8004824:	d005      	beq.n	8004832 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2240      	movs	r2, #64	; 0x40
 800482a:	2100      	movs	r1, #0
 800482c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0b9      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	2bff      	cmp	r3, #255	; 0xff
 800483a:	d911      	bls.n	8004860 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	22ff      	movs	r2, #255	; 0xff
 8004840:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004846:	b2da      	uxtb	r2, r3
 8004848:	2380      	movs	r3, #128	; 0x80
 800484a:	045c      	lsls	r4, r3, #17
 800484c:	230a      	movs	r3, #10
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	8819      	ldrh	r1, [r3, #0]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	4b56      	ldr	r3, [pc, #344]	; (80049b0 <HAL_I2C_Mem_Read+0x260>)
 8004856:	9300      	str	r3, [sp, #0]
 8004858:	0023      	movs	r3, r4
 800485a:	f000 fac9 	bl	8004df0 <I2C_TransferConfig>
 800485e:	e012      	b.n	8004886 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486e:	b2da      	uxtb	r2, r3
 8004870:	2380      	movs	r3, #128	; 0x80
 8004872:	049c      	lsls	r4, r3, #18
 8004874:	230a      	movs	r3, #10
 8004876:	18fb      	adds	r3, r7, r3
 8004878:	8819      	ldrh	r1, [r3, #0]
 800487a:	68f8      	ldr	r0, [r7, #12]
 800487c:	4b4c      	ldr	r3, [pc, #304]	; (80049b0 <HAL_I2C_Mem_Read+0x260>)
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	0023      	movs	r3, r4
 8004882:	f000 fab5 	bl	8004df0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004886:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	0013      	movs	r3, r2
 8004890:	2200      	movs	r2, #0
 8004892:	2104      	movs	r1, #4
 8004894:	f000 f978 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004898:	1e03      	subs	r3, r0, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e082      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d03a      	beq.n	8004952 <HAL_I2C_Mem_Read+0x202>
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d136      	bne.n	8004952 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	0013      	movs	r3, r2
 80048ee:	2200      	movs	r2, #0
 80048f0:	2180      	movs	r1, #128	; 0x80
 80048f2:	f000 f949 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 80048f6:	1e03      	subs	r3, r0, #0
 80048f8:	d001      	beq.n	80048fe <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e053      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004902:	b29b      	uxth	r3, r3
 8004904:	2bff      	cmp	r3, #255	; 0xff
 8004906:	d911      	bls.n	800492c <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	22ff      	movs	r2, #255	; 0xff
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004912:	b2da      	uxtb	r2, r3
 8004914:	2380      	movs	r3, #128	; 0x80
 8004916:	045c      	lsls	r4, r3, #17
 8004918:	230a      	movs	r3, #10
 800491a:	18fb      	adds	r3, r7, r3
 800491c:	8819      	ldrh	r1, [r3, #0]
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	2300      	movs	r3, #0
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	0023      	movs	r3, r4
 8004926:	f000 fa63 	bl	8004df0 <I2C_TransferConfig>
 800492a:	e012      	b.n	8004952 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004930:	b29a      	uxth	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800493a:	b2da      	uxtb	r2, r3
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	049c      	lsls	r4, r3, #18
 8004940:	230a      	movs	r3, #10
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	8819      	ldrh	r1, [r3, #0]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	2300      	movs	r3, #0
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	0023      	movs	r3, r4
 800494e:	f000 fa4f 	bl	8004df0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d194      	bne.n	8004886 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	0018      	movs	r0, r3
 8004964:	f000 f98e 	bl	8004c84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004968:	1e03      	subs	r3, r0, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e01a      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685a      	ldr	r2, [r3, #4]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	490c      	ldr	r1, [pc, #48]	; (80049b4 <HAL_I2C_Mem_Read+0x264>)
 8004984:	400a      	ands	r2, r1
 8004986:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2241      	movs	r2, #65	; 0x41
 800498c:	2120      	movs	r1, #32
 800498e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2242      	movs	r2, #66	; 0x42
 8004994:	2100      	movs	r1, #0
 8004996:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2240      	movs	r2, #64	; 0x40
 800499c:	2100      	movs	r1, #0
 800499e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80049a4:	2302      	movs	r3, #2
  }
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b007      	add	sp, #28
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	46c0      	nop			; (mov r8, r8)
 80049b0:	80002400 	.word	0x80002400
 80049b4:	fe00e800 	.word	0xfe00e800

080049b8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80049b8:	b5b0      	push	{r4, r5, r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af02      	add	r7, sp, #8
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	000c      	movs	r4, r1
 80049c2:	0010      	movs	r0, r2
 80049c4:	0019      	movs	r1, r3
 80049c6:	250a      	movs	r5, #10
 80049c8:	197b      	adds	r3, r7, r5
 80049ca:	1c22      	adds	r2, r4, #0
 80049cc:	801a      	strh	r2, [r3, #0]
 80049ce:	2308      	movs	r3, #8
 80049d0:	18fb      	adds	r3, r7, r3
 80049d2:	1c02      	adds	r2, r0, #0
 80049d4:	801a      	strh	r2, [r3, #0]
 80049d6:	1dbb      	adds	r3, r7, #6
 80049d8:	1c0a      	adds	r2, r1, #0
 80049da:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80049dc:	1dbb      	adds	r3, r7, #6
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	045c      	lsls	r4, r3, #17
 80049e6:	197b      	adds	r3, r7, r5
 80049e8:	8819      	ldrh	r1, [r3, #0]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	4b23      	ldr	r3, [pc, #140]	; (8004a7c <I2C_RequestMemoryWrite+0xc4>)
 80049ee:	9300      	str	r3, [sp, #0]
 80049f0:	0023      	movs	r3, r4
 80049f2:	f000 f9fd 	bl	8004df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	6a39      	ldr	r1, [r7, #32]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	0018      	movs	r0, r3
 80049fe:	f000 f902 	bl	8004c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a02:	1e03      	subs	r3, r0, #0
 8004a04:	d001      	beq.n	8004a0a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e033      	b.n	8004a72 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004a0a:	1dbb      	adds	r3, r7, #6
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d107      	bne.n	8004a22 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a12:	2308      	movs	r3, #8
 8004a14:	18fb      	adds	r3, r7, r3
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a20:	e019      	b.n	8004a56 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004a22:	2308      	movs	r3, #8
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	881b      	ldrh	r3, [r3, #0]
 8004a28:	0a1b      	lsrs	r3, r3, #8
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	b2da      	uxtb	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a36:	6a39      	ldr	r1, [r7, #32]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f000 f8e3 	bl	8004c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d001      	beq.n	8004a48 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e014      	b.n	8004a72 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004a48:	2308      	movs	r3, #8
 8004a4a:	18fb      	adds	r3, r7, r3
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	b2da      	uxtb	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	0013      	movs	r3, r2
 8004a60:	2200      	movs	r2, #0
 8004a62:	2180      	movs	r1, #128	; 0x80
 8004a64:	f000 f890 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	1e03      	subs	r3, r0, #0
 8004a6a:	d001      	beq.n	8004a70 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	0018      	movs	r0, r3
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bdb0      	pop	{r4, r5, r7, pc}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	80002000 	.word	0x80002000

08004a80 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004a80:	b5b0      	push	{r4, r5, r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	000c      	movs	r4, r1
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	0019      	movs	r1, r3
 8004a8e:	250a      	movs	r5, #10
 8004a90:	197b      	adds	r3, r7, r5
 8004a92:	1c22      	adds	r2, r4, #0
 8004a94:	801a      	strh	r2, [r3, #0]
 8004a96:	2308      	movs	r3, #8
 8004a98:	18fb      	adds	r3, r7, r3
 8004a9a:	1c02      	adds	r2, r0, #0
 8004a9c:	801a      	strh	r2, [r3, #0]
 8004a9e:	1dbb      	adds	r3, r7, #6
 8004aa0:	1c0a      	adds	r2, r1, #0
 8004aa2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004aa4:	1dbb      	adds	r3, r7, #6
 8004aa6:	881b      	ldrh	r3, [r3, #0]
 8004aa8:	b2da      	uxtb	r2, r3
 8004aaa:	197b      	adds	r3, r7, r5
 8004aac:	8819      	ldrh	r1, [r3, #0]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	4b23      	ldr	r3, [pc, #140]	; (8004b40 <I2C_RequestMemoryRead+0xc0>)
 8004ab2:	9300      	str	r3, [sp, #0]
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f000 f99b 	bl	8004df0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	6a39      	ldr	r1, [r7, #32]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f8a0 	bl	8004c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ac6:	1e03      	subs	r3, r0, #0
 8004ac8:	d001      	beq.n	8004ace <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e033      	b.n	8004b36 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ace:	1dbb      	adds	r3, r7, #6
 8004ad0:	881b      	ldrh	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d107      	bne.n	8004ae6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ad6:	2308      	movs	r3, #8
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	881b      	ldrh	r3, [r3, #0]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ae4:	e019      	b.n	8004b1a <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004ae6:	2308      	movs	r3, #8
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	b2da      	uxtb	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	6a39      	ldr	r1, [r7, #32]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f000 f881 	bl	8004c06 <I2C_WaitOnTXISFlagUntilTimeout>
 8004b04:	1e03      	subs	r3, r0, #0
 8004b06:	d001      	beq.n	8004b0c <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e014      	b.n	8004b36 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004b0c:	2308      	movs	r3, #8
 8004b0e:	18fb      	adds	r3, r7, r3
 8004b10:	881b      	ldrh	r3, [r3, #0]
 8004b12:	b2da      	uxtb	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004b1a:	6a3a      	ldr	r2, [r7, #32]
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	0013      	movs	r3, r2
 8004b24:	2200      	movs	r2, #0
 8004b26:	2140      	movs	r1, #64	; 0x40
 8004b28:	f000 f82e 	bl	8004b88 <I2C_WaitOnFlagUntilTimeout>
 8004b2c:	1e03      	subs	r3, r0, #0
 8004b2e:	d001      	beq.n	8004b34 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e000      	b.n	8004b36 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	0018      	movs	r0, r3
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	80002000 	.word	0x80002000

08004b44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	2202      	movs	r2, #2
 8004b54:	4013      	ands	r3, r2
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d103      	bne.n	8004b62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d007      	beq.n	8004b80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	619a      	str	r2, [r3, #24]
  }
}
 8004b80:	46c0      	nop			; (mov r8, r8)
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b002      	add	sp, #8
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	1dfb      	adds	r3, r7, #7
 8004b96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b98:	e021      	b.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	d01e      	beq.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba0:	f7ff f9ba 	bl	8003f18 <HAL_GetTick>
 8004ba4:	0002      	movs	r2, r0
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d302      	bcc.n	8004bb6 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d113      	bne.n	8004bde <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	2220      	movs	r2, #32
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2241      	movs	r2, #65	; 0x41
 8004bc6:	2120      	movs	r1, #32
 8004bc8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2242      	movs	r2, #66	; 0x42
 8004bce:	2100      	movs	r1, #0
 8004bd0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2240      	movs	r2, #64	; 0x40
 8004bd6:	2100      	movs	r1, #0
 8004bd8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00f      	b.n	8004bfe <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	68ba      	ldr	r2, [r7, #8]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	425a      	negs	r2, r3
 8004bee:	4153      	adcs	r3, r2
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	1dfb      	adds	r3, r7, #7
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d0ce      	beq.n	8004b9a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	0018      	movs	r0, r3
 8004c00:	46bd      	mov	sp, r7
 8004c02:	b004      	add	sp, #16
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c12:	e02b      	b.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	0018      	movs	r0, r3
 8004c1c:	f000 f86e 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004c20:	1e03      	subs	r3, r0, #0
 8004c22:	d001      	beq.n	8004c28 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e029      	b.n	8004c7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	d01e      	beq.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c2e:	f7ff f973 	bl	8003f18 <HAL_GetTick>
 8004c32:	0002      	movs	r2, r0
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d302      	bcc.n	8004c44 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d113      	bne.n	8004c6c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	2220      	movs	r2, #32
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2241      	movs	r2, #65	; 0x41
 8004c54:	2120      	movs	r1, #32
 8004c56:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2242      	movs	r2, #66	; 0x42
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	2100      	movs	r1, #0
 8004c66:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e007      	b.n	8004c7c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2202      	movs	r2, #2
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d1cc      	bne.n	8004c14 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	b004      	add	sp, #16
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c90:	e028      	b.n	8004ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f000 f82f 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004c9e:	1e03      	subs	r3, r0, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e026      	b.n	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca6:	f7ff f937 	bl	8003f18 <HAL_GetTick>
 8004caa:	0002      	movs	r2, r0
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d302      	bcc.n	8004cbc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d113      	bne.n	8004ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2241      	movs	r2, #65	; 0x41
 8004ccc:	2120      	movs	r1, #32
 8004cce:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2242      	movs	r2, #66	; 0x42
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2240      	movs	r2, #64	; 0x40
 8004cdc:	2100      	movs	r1, #0
 8004cde:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2220      	movs	r2, #32
 8004cec:	4013      	ands	r3, r2
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d1cf      	bne.n	8004c92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b004      	add	sp, #16
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2210      	movs	r2, #16
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d164      	bne.n	8004de0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	2380      	movs	r3, #128	; 0x80
 8004d1e:	049b      	lsls	r3, r3, #18
 8004d20:	401a      	ands	r2, r3
 8004d22:	2380      	movs	r3, #128	; 0x80
 8004d24:	049b      	lsls	r3, r3, #18
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d02b      	beq.n	8004d82 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2180      	movs	r1, #128	; 0x80
 8004d36:	01c9      	lsls	r1, r1, #7
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d3c:	e021      	b.n	8004d82 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	3301      	adds	r3, #1
 8004d42:	d01e      	beq.n	8004d82 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d44:	f7ff f8e8 	bl	8003f18 <HAL_GetTick>
 8004d48:	0002      	movs	r2, r0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	1ad3      	subs	r3, r2, r3
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d302      	bcc.n	8004d5a <I2C_IsAcknowledgeFailed+0x5e>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d113      	bne.n	8004d82 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	2220      	movs	r2, #32
 8004d60:	431a      	orrs	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2241      	movs	r2, #65	; 0x41
 8004d6a:	2120      	movs	r1, #32
 8004d6c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2242      	movs	r2, #66	; 0x42
 8004d72:	2100      	movs	r1, #0
 8004d74:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2240      	movs	r2, #64	; 0x40
 8004d7a:	2100      	movs	r1, #0
 8004d7c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e02f      	b.n	8004de2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b20      	cmp	r3, #32
 8004d8e:	d1d6      	bne.n	8004d3e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2210      	movs	r2, #16
 8004d96:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	0018      	movs	r0, r3
 8004da4:	f7ff fece 	bl	8004b44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	490e      	ldr	r1, [pc, #56]	; (8004dec <I2C_IsAcknowledgeFailed+0xf0>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2241      	movs	r2, #65	; 0x41
 8004dc8:	2120      	movs	r1, #32
 8004dca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2242      	movs	r2, #66	; 0x42
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2240      	movs	r2, #64	; 0x40
 8004dd8:	2100      	movs	r1, #0
 8004dda:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e000      	b.n	8004de2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b004      	add	sp, #16
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	fe00e800 	.word	0xfe00e800

08004df0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	0008      	movs	r0, r1
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	607b      	str	r3, [r7, #4]
 8004dfe:	240a      	movs	r4, #10
 8004e00:	193b      	adds	r3, r7, r4
 8004e02:	1c02      	adds	r2, r0, #0
 8004e04:	801a      	strh	r2, [r3, #0]
 8004e06:	2009      	movs	r0, #9
 8004e08:	183b      	adds	r3, r7, r0
 8004e0a:	1c0a      	adds	r2, r1, #0
 8004e0c:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	6a3a      	ldr	r2, [r7, #32]
 8004e16:	0d51      	lsrs	r1, r2, #21
 8004e18:	2280      	movs	r2, #128	; 0x80
 8004e1a:	00d2      	lsls	r2, r2, #3
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	490e      	ldr	r1, [pc, #56]	; (8004e58 <I2C_TransferConfig+0x68>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	43d2      	mvns	r2, r2
 8004e24:	401a      	ands	r2, r3
 8004e26:	0011      	movs	r1, r2
 8004e28:	193b      	adds	r3, r7, r4
 8004e2a:	881b      	ldrh	r3, [r3, #0]
 8004e2c:	059b      	lsls	r3, r3, #22
 8004e2e:	0d9a      	lsrs	r2, r3, #22
 8004e30:	183b      	adds	r3, r7, r0
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	0418      	lsls	r0, r3, #16
 8004e36:	23ff      	movs	r3, #255	; 0xff
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	4003      	ands	r3, r0
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	431a      	orrs	r2, r3
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	46bd      	mov	sp, r7
 8004e52:	b005      	add	sp, #20
 8004e54:	bd90      	pop	{r4, r7, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	03ff63ff 	.word	0x03ff63ff

08004e5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2241      	movs	r2, #65	; 0x41
 8004e6a:	5c9b      	ldrb	r3, [r3, r2]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b20      	cmp	r3, #32
 8004e70:	d138      	bne.n	8004ee4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2240      	movs	r2, #64	; 0x40
 8004e76:	5c9b      	ldrb	r3, [r3, r2]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d101      	bne.n	8004e80 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	e032      	b.n	8004ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2240      	movs	r2, #64	; 0x40
 8004e84:	2101      	movs	r1, #1
 8004e86:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2241      	movs	r2, #65	; 0x41
 8004e8c:	2124      	movs	r1, #36	; 0x24
 8004e8e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	438a      	bics	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681a      	ldr	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4911      	ldr	r1, [pc, #68]	; (8004ef0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004eac:	400a      	ands	r2, r1
 8004eae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6819      	ldr	r1, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2101      	movs	r1, #1
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2241      	movs	r2, #65	; 0x41
 8004ed4:	2120      	movs	r1, #32
 8004ed6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	2100      	movs	r1, #0
 8004ede:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	0018      	movs	r0, r3
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	b002      	add	sp, #8
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	46c0      	nop			; (mov r8, r8)
 8004ef0:	ffffefff 	.word	0xffffefff

08004ef4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2241      	movs	r2, #65	; 0x41
 8004f02:	5c9b      	ldrb	r3, [r3, r2]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b20      	cmp	r3, #32
 8004f08:	d139      	bne.n	8004f7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2240      	movs	r2, #64	; 0x40
 8004f0e:	5c9b      	ldrb	r3, [r3, r2]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e033      	b.n	8004f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2240      	movs	r2, #64	; 0x40
 8004f1c:	2101      	movs	r1, #1
 8004f1e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2241      	movs	r2, #65	; 0x41
 8004f24:	2124      	movs	r1, #36	; 0x24
 8004f26:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2101      	movs	r1, #1
 8004f34:	438a      	bics	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4a11      	ldr	r2, [pc, #68]	; (8004f88 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	021b      	lsls	r3, r3, #8
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	2101      	movs	r1, #1
 8004f66:	430a      	orrs	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2241      	movs	r2, #65	; 0x41
 8004f6e:	2120      	movs	r1, #32
 8004f70:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2240      	movs	r2, #64	; 0x40
 8004f76:	2100      	movs	r1, #0
 8004f78:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004f7e:	2302      	movs	r3, #2
  }
}
 8004f80:	0018      	movs	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	b004      	add	sp, #16
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	fffff0ff 	.word	0xfffff0ff

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b5b0      	push	{r4, r5, r7, lr}
 8004f8e:	b08a      	sub	sp, #40	; 0x28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	f000 fbaf 	bl	80056fe <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa0:	4bcf      	ldr	r3, [pc, #828]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	220c      	movs	r2, #12
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004faa:	4bcd      	ldr	r3, [pc, #820]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8004fac:	68da      	ldr	r2, [r3, #12]
 8004fae:	2380      	movs	r3, #128	; 0x80
 8004fb0:	025b      	lsls	r3, r3, #9
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d100      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x36>
 8004fc0:	e07e      	b.n	80050c0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	2b08      	cmp	r3, #8
 8004fc6:	d007      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	2b0c      	cmp	r3, #12
 8004fcc:	d112      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x68>
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	2380      	movs	r3, #128	; 0x80
 8004fd2:	025b      	lsls	r3, r3, #9
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d10d      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd8:	4bc1      	ldr	r3, [pc, #772]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	029b      	lsls	r3, r3, #10
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d100      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x5a>
 8004fe4:	e06b      	b.n	80050be <HAL_RCC_OscConfig+0x132>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d167      	bne.n	80050be <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f000 fb85 	bl	80056fe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	025b      	lsls	r3, r3, #9
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d107      	bne.n	8005010 <HAL_RCC_OscConfig+0x84>
 8005000:	4bb7      	ldr	r3, [pc, #732]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	4bb6      	ldr	r3, [pc, #728]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005006:	2180      	movs	r1, #128	; 0x80
 8005008:	0249      	lsls	r1, r1, #9
 800500a:	430a      	orrs	r2, r1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	e027      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	23a0      	movs	r3, #160	; 0xa0
 8005016:	02db      	lsls	r3, r3, #11
 8005018:	429a      	cmp	r2, r3
 800501a:	d10e      	bne.n	800503a <HAL_RCC_OscConfig+0xae>
 800501c:	4bb0      	ldr	r3, [pc, #704]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4baf      	ldr	r3, [pc, #700]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005022:	2180      	movs	r1, #128	; 0x80
 8005024:	02c9      	lsls	r1, r1, #11
 8005026:	430a      	orrs	r2, r1
 8005028:	601a      	str	r2, [r3, #0]
 800502a:	4bad      	ldr	r3, [pc, #692]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	4bac      	ldr	r3, [pc, #688]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005030:	2180      	movs	r1, #128	; 0x80
 8005032:	0249      	lsls	r1, r1, #9
 8005034:	430a      	orrs	r2, r1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e012      	b.n	8005060 <HAL_RCC_OscConfig+0xd4>
 800503a:	4ba9      	ldr	r3, [pc, #676]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4ba8      	ldr	r3, [pc, #672]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005040:	49a8      	ldr	r1, [pc, #672]	; (80052e4 <HAL_RCC_OscConfig+0x358>)
 8005042:	400a      	ands	r2, r1
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	4ba6      	ldr	r3, [pc, #664]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	2380      	movs	r3, #128	; 0x80
 800504c:	025b      	lsls	r3, r3, #9
 800504e:	4013      	ands	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4ba2      	ldr	r3, [pc, #648]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4ba1      	ldr	r3, [pc, #644]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800505a:	49a3      	ldr	r1, [pc, #652]	; (80052e8 <HAL_RCC_OscConfig+0x35c>)
 800505c:	400a      	ands	r2, r1
 800505e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d015      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005068:	f7fe ff56 	bl	8003f18 <HAL_GetTick>
 800506c:	0003      	movs	r3, r0
 800506e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005070:	e009      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005072:	f7fe ff51 	bl	8003f18 <HAL_GetTick>
 8005076:	0002      	movs	r2, r0
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	2b64      	cmp	r3, #100	; 0x64
 800507e:	d902      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	f000 fb3c 	bl	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005086:	4b96      	ldr	r3, [pc, #600]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	2380      	movs	r3, #128	; 0x80
 800508c:	029b      	lsls	r3, r3, #10
 800508e:	4013      	ands	r3, r2
 8005090:	d0ef      	beq.n	8005072 <HAL_RCC_OscConfig+0xe6>
 8005092:	e015      	b.n	80050c0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005094:	f7fe ff40 	bl	8003f18 <HAL_GetTick>
 8005098:	0003      	movs	r3, r0
 800509a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800509e:	f7fe ff3b 	bl	8003f18 <HAL_GetTick>
 80050a2:	0002      	movs	r2, r0
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b64      	cmp	r3, #100	; 0x64
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e326      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80050b0:	4b8b      	ldr	r3, [pc, #556]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	2380      	movs	r3, #128	; 0x80
 80050b6:	029b      	lsls	r3, r3, #10
 80050b8:	4013      	ands	r3, r2
 80050ba:	d1f0      	bne.n	800509e <HAL_RCC_OscConfig+0x112>
 80050bc:	e000      	b.n	80050c0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2202      	movs	r2, #2
 80050c6:	4013      	ands	r3, r2
 80050c8:	d100      	bne.n	80050cc <HAL_RCC_OscConfig+0x140>
 80050ca:	e08b      	b.n	80051e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d005      	beq.n	80050e4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	2b0c      	cmp	r3, #12
 80050dc:	d13e      	bne.n	800515c <HAL_RCC_OscConfig+0x1d0>
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d13b      	bne.n	800515c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80050e4:	4b7e      	ldr	r3, [pc, #504]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2204      	movs	r2, #4
 80050ea:	4013      	ands	r3, r2
 80050ec:	d004      	beq.n	80050f8 <HAL_RCC_OscConfig+0x16c>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e302      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f8:	4b79      	ldr	r3, [pc, #484]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4a7b      	ldr	r2, [pc, #492]	; (80052ec <HAL_RCC_OscConfig+0x360>)
 80050fe:	4013      	ands	r3, r2
 8005100:	0019      	movs	r1, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	021a      	lsls	r2, r3, #8
 8005108:	4b75      	ldr	r3, [pc, #468]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800510a:	430a      	orrs	r2, r1
 800510c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800510e:	4b74      	ldr	r3, [pc, #464]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2209      	movs	r2, #9
 8005114:	4393      	bics	r3, r2
 8005116:	0019      	movs	r1, r3
 8005118:	4b71      	ldr	r3, [pc, #452]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005120:	f000 fc40 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8005124:	0001      	movs	r1, r0
 8005126:	4b6e      	ldr	r3, [pc, #440]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	220f      	movs	r2, #15
 800512e:	4013      	ands	r3, r2
 8005130:	4a6f      	ldr	r2, [pc, #444]	; (80052f0 <HAL_RCC_OscConfig+0x364>)
 8005132:	5cd3      	ldrb	r3, [r2, r3]
 8005134:	000a      	movs	r2, r1
 8005136:	40da      	lsrs	r2, r3
 8005138:	4b6e      	ldr	r3, [pc, #440]	; (80052f4 <HAL_RCC_OscConfig+0x368>)
 800513a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800513c:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <HAL_RCC_OscConfig+0x36c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2513      	movs	r5, #19
 8005142:	197c      	adds	r4, r7, r5
 8005144:	0018      	movs	r0, r3
 8005146:	f7fe fea1 	bl	8003e8c <HAL_InitTick>
 800514a:	0003      	movs	r3, r0
 800514c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800514e:	197b      	adds	r3, r7, r5
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d046      	beq.n	80051e4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8005156:	197b      	adds	r3, r7, r5
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	e2d0      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d027      	beq.n	80051b2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005162:	4b5f      	ldr	r3, [pc, #380]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2209      	movs	r2, #9
 8005168:	4393      	bics	r3, r2
 800516a:	0019      	movs	r1, r3
 800516c:	4b5c      	ldr	r3, [pc, #368]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	430a      	orrs	r2, r1
 8005172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fe fed0 	bl	8003f18 <HAL_GetTick>
 8005178:	0003      	movs	r3, r0
 800517a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800517e:	f7fe fecb 	bl	8003f18 <HAL_GetTick>
 8005182:	0002      	movs	r2, r0
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e2b6      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005190:	4b53      	ldr	r3, [pc, #332]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2204      	movs	r2, #4
 8005196:	4013      	ands	r3, r2
 8005198:	d0f1      	beq.n	800517e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519a:	4b51      	ldr	r3, [pc, #324]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	4a53      	ldr	r2, [pc, #332]	; (80052ec <HAL_RCC_OscConfig+0x360>)
 80051a0:	4013      	ands	r3, r2
 80051a2:	0019      	movs	r1, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	021a      	lsls	r2, r3, #8
 80051aa:	4b4d      	ldr	r3, [pc, #308]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80051ac:	430a      	orrs	r2, r1
 80051ae:	605a      	str	r2, [r3, #4]
 80051b0:	e018      	b.n	80051e4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b4b      	ldr	r3, [pc, #300]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	4b4a      	ldr	r3, [pc, #296]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80051b8:	2101      	movs	r1, #1
 80051ba:	438a      	bics	r2, r1
 80051bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051be:	f7fe feab 	bl	8003f18 <HAL_GetTick>
 80051c2:	0003      	movs	r3, r0
 80051c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051c8:	f7fe fea6 	bl	8003f18 <HAL_GetTick>
 80051cc:	0002      	movs	r2, r0
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e291      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80051da:	4b41      	ldr	r3, [pc, #260]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2204      	movs	r2, #4
 80051e0:	4013      	ands	r3, r2
 80051e2:	d1f1      	bne.n	80051c8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2210      	movs	r2, #16
 80051ea:	4013      	ands	r3, r2
 80051ec:	d100      	bne.n	80051f0 <HAL_RCC_OscConfig+0x264>
 80051ee:	e0a1      	b.n	8005334 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d140      	bne.n	8005278 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051f6:	4b3a      	ldr	r3, [pc, #232]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	2380      	movs	r3, #128	; 0x80
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4013      	ands	r3, r2
 8005200:	d005      	beq.n	800520e <HAL_RCC_OscConfig+0x282>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e277      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800520e:	4b34      	ldr	r3, [pc, #208]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4a3a      	ldr	r2, [pc, #232]	; (80052fc <HAL_RCC_OscConfig+0x370>)
 8005214:	4013      	ands	r3, r2
 8005216:	0019      	movs	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800521c:	4b30      	ldr	r3, [pc, #192]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 800521e:	430a      	orrs	r2, r1
 8005220:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005222:	4b2f      	ldr	r3, [pc, #188]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	0a19      	lsrs	r1, r3, #8
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	061a      	lsls	r2, r3, #24
 8005230:	4b2b      	ldr	r3, [pc, #172]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	0b5b      	lsrs	r3, r3, #13
 800523c:	3301      	adds	r3, #1
 800523e:	2280      	movs	r2, #128	; 0x80
 8005240:	0212      	lsls	r2, r2, #8
 8005242:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005244:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	091b      	lsrs	r3, r3, #4
 800524a:	210f      	movs	r1, #15
 800524c:	400b      	ands	r3, r1
 800524e:	4928      	ldr	r1, [pc, #160]	; (80052f0 <HAL_RCC_OscConfig+0x364>)
 8005250:	5ccb      	ldrb	r3, [r1, r3]
 8005252:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005254:	4b27      	ldr	r3, [pc, #156]	; (80052f4 <HAL_RCC_OscConfig+0x368>)
 8005256:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005258:	4b27      	ldr	r3, [pc, #156]	; (80052f8 <HAL_RCC_OscConfig+0x36c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2513      	movs	r5, #19
 800525e:	197c      	adds	r4, r7, r5
 8005260:	0018      	movs	r0, r3
 8005262:	f7fe fe13 	bl	8003e8c <HAL_InitTick>
 8005266:	0003      	movs	r3, r0
 8005268:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800526a:	197b      	adds	r3, r7, r5
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d060      	beq.n	8005334 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8005272:	197b      	adds	r3, r7, r5
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	e242      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03f      	beq.n	8005300 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	4b16      	ldr	r3, [pc, #88]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 8005286:	2180      	movs	r1, #128	; 0x80
 8005288:	0049      	lsls	r1, r1, #1
 800528a:	430a      	orrs	r2, r1
 800528c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7fe fe43 	bl	8003f18 <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005298:	f7fe fe3e 	bl	8003f18 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e229      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80052aa:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	2380      	movs	r3, #128	; 0x80
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4013      	ands	r3, r2
 80052b4:	d0f0      	beq.n	8005298 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052b6:	4b0a      	ldr	r3, [pc, #40]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	4a10      	ldr	r2, [pc, #64]	; (80052fc <HAL_RCC_OscConfig+0x370>)
 80052bc:	4013      	ands	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052c4:	4b06      	ldr	r3, [pc, #24]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80052c6:	430a      	orrs	r2, r1
 80052c8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	0a19      	lsrs	r1, r3, #8
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	061a      	lsls	r2, r3, #24
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <HAL_RCC_OscConfig+0x354>)
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	e029      	b.n	8005334 <HAL_RCC_OscConfig+0x3a8>
 80052e0:	40021000 	.word	0x40021000
 80052e4:	fffeffff 	.word	0xfffeffff
 80052e8:	fffbffff 	.word	0xfffbffff
 80052ec:	ffffe0ff 	.word	0xffffe0ff
 80052f0:	08009bb4 	.word	0x08009bb4
 80052f4:	20000000 	.word	0x20000000
 80052f8:	20000004 	.word	0x20000004
 80052fc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005300:	4bbd      	ldr	r3, [pc, #756]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4bbc      	ldr	r3, [pc, #752]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005306:	49bd      	ldr	r1, [pc, #756]	; (80055fc <HAL_RCC_OscConfig+0x670>)
 8005308:	400a      	ands	r2, r1
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fe fe04 	bl	8003f18 <HAL_GetTick>
 8005310:	0003      	movs	r3, r0
 8005312:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005316:	f7fe fdff 	bl	8003f18 <HAL_GetTick>
 800531a:	0002      	movs	r2, r0
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e1ea      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005328:	4bb3      	ldr	r3, [pc, #716]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	2380      	movs	r3, #128	; 0x80
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4013      	ands	r3, r2
 8005332:	d1f0      	bne.n	8005316 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2208      	movs	r2, #8
 800533a:	4013      	ands	r3, r2
 800533c:	d036      	beq.n	80053ac <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d019      	beq.n	800537a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	4bac      	ldr	r3, [pc, #688]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800534a:	4bab      	ldr	r3, [pc, #684]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800534c:	2101      	movs	r1, #1
 800534e:	430a      	orrs	r2, r1
 8005350:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005352:	f7fe fde1 	bl	8003f18 <HAL_GetTick>
 8005356:	0003      	movs	r3, r0
 8005358:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800535a:	e008      	b.n	800536e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800535c:	f7fe fddc 	bl	8003f18 <HAL_GetTick>
 8005360:	0002      	movs	r2, r0
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b02      	cmp	r3, #2
 8005368:	d901      	bls.n	800536e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e1c7      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800536e:	4ba2      	ldr	r3, [pc, #648]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005372:	2202      	movs	r2, #2
 8005374:	4013      	ands	r3, r2
 8005376:	d0f1      	beq.n	800535c <HAL_RCC_OscConfig+0x3d0>
 8005378:	e018      	b.n	80053ac <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800537a:	4b9f      	ldr	r3, [pc, #636]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800537c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800537e:	4b9e      	ldr	r3, [pc, #632]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005380:	2101      	movs	r1, #1
 8005382:	438a      	bics	r2, r1
 8005384:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005386:	f7fe fdc7 	bl	8003f18 <HAL_GetTick>
 800538a:	0003      	movs	r3, r0
 800538c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800538e:	e008      	b.n	80053a2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005390:	f7fe fdc2 	bl	8003f18 <HAL_GetTick>
 8005394:	0002      	movs	r2, r0
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b02      	cmp	r3, #2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e1ad      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80053a2:	4b95      	ldr	r3, [pc, #596]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	2202      	movs	r2, #2
 80053a8:	4013      	ands	r3, r2
 80053aa:	d1f1      	bne.n	8005390 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	2204      	movs	r2, #4
 80053b2:	4013      	ands	r3, r2
 80053b4:	d100      	bne.n	80053b8 <HAL_RCC_OscConfig+0x42c>
 80053b6:	e0ae      	b.n	8005516 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053b8:	2027      	movs	r0, #39	; 0x27
 80053ba:	183b      	adds	r3, r7, r0
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053c0:	4b8d      	ldr	r3, [pc, #564]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80053c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	055b      	lsls	r3, r3, #21
 80053c8:	4013      	ands	r3, r2
 80053ca:	d109      	bne.n	80053e0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053cc:	4b8a      	ldr	r3, [pc, #552]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80053ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d0:	4b89      	ldr	r3, [pc, #548]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80053d2:	2180      	movs	r1, #128	; 0x80
 80053d4:	0549      	lsls	r1, r1, #21
 80053d6:	430a      	orrs	r2, r1
 80053d8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80053da:	183b      	adds	r3, r7, r0
 80053dc:	2201      	movs	r2, #1
 80053de:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e0:	4b87      	ldr	r3, [pc, #540]	; (8005600 <HAL_RCC_OscConfig+0x674>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	2380      	movs	r3, #128	; 0x80
 80053e6:	005b      	lsls	r3, r3, #1
 80053e8:	4013      	ands	r3, r2
 80053ea:	d11a      	bne.n	8005422 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053ec:	4b84      	ldr	r3, [pc, #528]	; (8005600 <HAL_RCC_OscConfig+0x674>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	4b83      	ldr	r3, [pc, #524]	; (8005600 <HAL_RCC_OscConfig+0x674>)
 80053f2:	2180      	movs	r1, #128	; 0x80
 80053f4:	0049      	lsls	r1, r1, #1
 80053f6:	430a      	orrs	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053fa:	f7fe fd8d 	bl	8003f18 <HAL_GetTick>
 80053fe:	0003      	movs	r3, r0
 8005400:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005402:	e008      	b.n	8005416 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005404:	f7fe fd88 	bl	8003f18 <HAL_GetTick>
 8005408:	0002      	movs	r2, r0
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e173      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005416:	4b7a      	ldr	r3, [pc, #488]	; (8005600 <HAL_RCC_OscConfig+0x674>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	005b      	lsls	r3, r3, #1
 800541e:	4013      	ands	r3, r2
 8005420:	d0f0      	beq.n	8005404 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	005b      	lsls	r3, r3, #1
 800542a:	429a      	cmp	r2, r3
 800542c:	d107      	bne.n	800543e <HAL_RCC_OscConfig+0x4b2>
 800542e:	4b72      	ldr	r3, [pc, #456]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005430:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005432:	4b71      	ldr	r3, [pc, #452]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005434:	2180      	movs	r1, #128	; 0x80
 8005436:	0049      	lsls	r1, r1, #1
 8005438:	430a      	orrs	r2, r1
 800543a:	651a      	str	r2, [r3, #80]	; 0x50
 800543c:	e031      	b.n	80054a2 <HAL_RCC_OscConfig+0x516>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x4d4>
 8005446:	4b6c      	ldr	r3, [pc, #432]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800544a:	4b6b      	ldr	r3, [pc, #428]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800544c:	496b      	ldr	r1, [pc, #428]	; (80055fc <HAL_RCC_OscConfig+0x670>)
 800544e:	400a      	ands	r2, r1
 8005450:	651a      	str	r2, [r3, #80]	; 0x50
 8005452:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005456:	4b68      	ldr	r3, [pc, #416]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005458:	496a      	ldr	r1, [pc, #424]	; (8005604 <HAL_RCC_OscConfig+0x678>)
 800545a:	400a      	ands	r2, r1
 800545c:	651a      	str	r2, [r3, #80]	; 0x50
 800545e:	e020      	b.n	80054a2 <HAL_RCC_OscConfig+0x516>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	23a0      	movs	r3, #160	; 0xa0
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	429a      	cmp	r2, r3
 800546a:	d10e      	bne.n	800548a <HAL_RCC_OscConfig+0x4fe>
 800546c:	4b62      	ldr	r3, [pc, #392]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800546e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005470:	4b61      	ldr	r3, [pc, #388]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005472:	2180      	movs	r1, #128	; 0x80
 8005474:	00c9      	lsls	r1, r1, #3
 8005476:	430a      	orrs	r2, r1
 8005478:	651a      	str	r2, [r3, #80]	; 0x50
 800547a:	4b5f      	ldr	r3, [pc, #380]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800547c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800547e:	4b5e      	ldr	r3, [pc, #376]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	0049      	lsls	r1, r1, #1
 8005484:	430a      	orrs	r2, r1
 8005486:	651a      	str	r2, [r3, #80]	; 0x50
 8005488:	e00b      	b.n	80054a2 <HAL_RCC_OscConfig+0x516>
 800548a:	4b5b      	ldr	r3, [pc, #364]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800548c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548e:	4b5a      	ldr	r3, [pc, #360]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005490:	495a      	ldr	r1, [pc, #360]	; (80055fc <HAL_RCC_OscConfig+0x670>)
 8005492:	400a      	ands	r2, r1
 8005494:	651a      	str	r2, [r3, #80]	; 0x50
 8005496:	4b58      	ldr	r3, [pc, #352]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800549a:	4b57      	ldr	r3, [pc, #348]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800549c:	4959      	ldr	r1, [pc, #356]	; (8005604 <HAL_RCC_OscConfig+0x678>)
 800549e:	400a      	ands	r2, r1
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d015      	beq.n	80054d6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054aa:	f7fe fd35 	bl	8003f18 <HAL_GetTick>
 80054ae:	0003      	movs	r3, r0
 80054b0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b2:	e009      	b.n	80054c8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fe fd30 	bl	8003f18 <HAL_GetTick>
 80054b8:	0002      	movs	r2, r0
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	4a52      	ldr	r2, [pc, #328]	; (8005608 <HAL_RCC_OscConfig+0x67c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e11a      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054c8:	4b4b      	ldr	r3, [pc, #300]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80054ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4013      	ands	r3, r2
 80054d2:	d0ef      	beq.n	80054b4 <HAL_RCC_OscConfig+0x528>
 80054d4:	e014      	b.n	8005500 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d6:	f7fe fd1f 	bl	8003f18 <HAL_GetTick>
 80054da:	0003      	movs	r3, r0
 80054dc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054de:	e009      	b.n	80054f4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054e0:	f7fe fd1a 	bl	8003f18 <HAL_GetTick>
 80054e4:	0002      	movs	r2, r0
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	4a47      	ldr	r2, [pc, #284]	; (8005608 <HAL_RCC_OscConfig+0x67c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e104      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80054f4:	4b40      	ldr	r3, [pc, #256]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80054f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054f8:	2380      	movs	r3, #128	; 0x80
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4013      	ands	r3, r2
 80054fe:	d1ef      	bne.n	80054e0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005500:	2327      	movs	r3, #39	; 0x27
 8005502:	18fb      	adds	r3, r7, r3
 8005504:	781b      	ldrb	r3, [r3, #0]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d105      	bne.n	8005516 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800550a:	4b3b      	ldr	r3, [pc, #236]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800550c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550e:	4b3a      	ldr	r3, [pc, #232]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005510:	493e      	ldr	r1, [pc, #248]	; (800560c <HAL_RCC_OscConfig+0x680>)
 8005512:	400a      	ands	r2, r1
 8005514:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2220      	movs	r2, #32
 800551c:	4013      	ands	r3, r2
 800551e:	d049      	beq.n	80055b4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d026      	beq.n	8005576 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8005528:	4b33      	ldr	r3, [pc, #204]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800552a:	689a      	ldr	r2, [r3, #8]
 800552c:	4b32      	ldr	r3, [pc, #200]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800552e:	2101      	movs	r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	4b30      	ldr	r3, [pc, #192]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005538:	4b2f      	ldr	r3, [pc, #188]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800553a:	2101      	movs	r1, #1
 800553c:	430a      	orrs	r2, r1
 800553e:	635a      	str	r2, [r3, #52]	; 0x34
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <HAL_RCC_OscConfig+0x684>)
 8005542:	6a1a      	ldr	r2, [r3, #32]
 8005544:	4b32      	ldr	r3, [pc, #200]	; (8005610 <HAL_RCC_OscConfig+0x684>)
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	0189      	lsls	r1, r1, #6
 800554a:	430a      	orrs	r2, r1
 800554c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554e:	f7fe fce3 	bl	8003f18 <HAL_GetTick>
 8005552:	0003      	movs	r3, r0
 8005554:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005556:	e008      	b.n	800556a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005558:	f7fe fcde 	bl	8003f18 <HAL_GetTick>
 800555c:	0002      	movs	r2, r0
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0c9      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	2202      	movs	r2, #2
 8005570:	4013      	ands	r3, r2
 8005572:	d0f1      	beq.n	8005558 <HAL_RCC_OscConfig+0x5cc>
 8005574:	e01e      	b.n	80055b4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 8005578:	689a      	ldr	r2, [r3, #8]
 800557a:	4b1f      	ldr	r3, [pc, #124]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 800557c:	2101      	movs	r1, #1
 800557e:	438a      	bics	r2, r1
 8005580:	609a      	str	r2, [r3, #8]
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <HAL_RCC_OscConfig+0x684>)
 8005584:	6a1a      	ldr	r2, [r3, #32]
 8005586:	4b22      	ldr	r3, [pc, #136]	; (8005610 <HAL_RCC_OscConfig+0x684>)
 8005588:	4922      	ldr	r1, [pc, #136]	; (8005614 <HAL_RCC_OscConfig+0x688>)
 800558a:	400a      	ands	r2, r1
 800558c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558e:	f7fe fcc3 	bl	8003f18 <HAL_GetTick>
 8005592:	0003      	movs	r3, r0
 8005594:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005598:	f7fe fcbe 	bl	8003f18 <HAL_GetTick>
 800559c:	0002      	movs	r2, r0
 800559e:	69bb      	ldr	r3, [r7, #24]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e0a9      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055aa:	4b13      	ldr	r3, [pc, #76]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2202      	movs	r2, #2
 80055b0:	4013      	ands	r3, r2
 80055b2:	d1f1      	bne.n	8005598 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d100      	bne.n	80055be <HAL_RCC_OscConfig+0x632>
 80055bc:	e09e      	b.n	80056fc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055be:	6a3b      	ldr	r3, [r7, #32]
 80055c0:	2b0c      	cmp	r3, #12
 80055c2:	d100      	bne.n	80055c6 <HAL_RCC_OscConfig+0x63a>
 80055c4:	e077      	b.n	80056b6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d158      	bne.n	8005680 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055ce:	4b0a      	ldr	r3, [pc, #40]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_RCC_OscConfig+0x66c>)
 80055d4:	4910      	ldr	r1, [pc, #64]	; (8005618 <HAL_RCC_OscConfig+0x68c>)
 80055d6:	400a      	ands	r2, r1
 80055d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055da:	f7fe fc9d 	bl	8003f18 <HAL_GetTick>
 80055de:	0003      	movs	r3, r0
 80055e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80055e2:	e01b      	b.n	800561c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055e4:	f7fe fc98 	bl	8003f18 <HAL_GetTick>
 80055e8:	0002      	movs	r2, r0
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d914      	bls.n	800561c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80055f2:	2303      	movs	r3, #3
 80055f4:	e083      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
 80055f6:	46c0      	nop			; (mov r8, r8)
 80055f8:	40021000 	.word	0x40021000
 80055fc:	fffffeff 	.word	0xfffffeff
 8005600:	40007000 	.word	0x40007000
 8005604:	fffffbff 	.word	0xfffffbff
 8005608:	00001388 	.word	0x00001388
 800560c:	efffffff 	.word	0xefffffff
 8005610:	40010000 	.word	0x40010000
 8005614:	ffffdfff 	.word	0xffffdfff
 8005618:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800561c:	4b3a      	ldr	r3, [pc, #232]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	2380      	movs	r3, #128	; 0x80
 8005622:	049b      	lsls	r3, r3, #18
 8005624:	4013      	ands	r3, r2
 8005626:	d1dd      	bne.n	80055e4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005628:	4b37      	ldr	r3, [pc, #220]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	4a37      	ldr	r2, [pc, #220]	; (800570c <HAL_RCC_OscConfig+0x780>)
 800562e:	4013      	ands	r3, r2
 8005630:	0019      	movs	r1, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005640:	431a      	orrs	r2, r3
 8005642:	4b31      	ldr	r3, [pc, #196]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 8005644:	430a      	orrs	r2, r1
 8005646:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005648:	4b2f      	ldr	r3, [pc, #188]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b2e      	ldr	r3, [pc, #184]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 800564e:	2180      	movs	r1, #128	; 0x80
 8005650:	0449      	lsls	r1, r1, #17
 8005652:	430a      	orrs	r2, r1
 8005654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005656:	f7fe fc5f 	bl	8003f18 <HAL_GetTick>
 800565a:	0003      	movs	r3, r0
 800565c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800565e:	e008      	b.n	8005672 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005660:	f7fe fc5a 	bl	8003f18 <HAL_GetTick>
 8005664:	0002      	movs	r2, r0
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	2b02      	cmp	r3, #2
 800566c:	d901      	bls.n	8005672 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e045      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005672:	4b25      	ldr	r3, [pc, #148]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	2380      	movs	r3, #128	; 0x80
 8005678:	049b      	lsls	r3, r3, #18
 800567a:	4013      	ands	r3, r2
 800567c:	d0f0      	beq.n	8005660 <HAL_RCC_OscConfig+0x6d4>
 800567e:	e03d      	b.n	80056fc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005680:	4b21      	ldr	r3, [pc, #132]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4b20      	ldr	r3, [pc, #128]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 8005686:	4922      	ldr	r1, [pc, #136]	; (8005710 <HAL_RCC_OscConfig+0x784>)
 8005688:	400a      	ands	r2, r1
 800568a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800568c:	f7fe fc44 	bl	8003f18 <HAL_GetTick>
 8005690:	0003      	movs	r3, r0
 8005692:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005696:	f7fe fc3f 	bl	8003f18 <HAL_GetTick>
 800569a:	0002      	movs	r2, r0
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e02a      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80056a8:	4b17      	ldr	r3, [pc, #92]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	049b      	lsls	r3, r3, #18
 80056b0:	4013      	ands	r3, r2
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCC_OscConfig+0x70a>
 80056b4:	e022      	b.n	80056fc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d101      	bne.n	80056c2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e01d      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056c2:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_RCC_OscConfig+0x77c>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056c8:	69fa      	ldr	r2, [r7, #28]
 80056ca:	2380      	movs	r3, #128	; 0x80
 80056cc:	025b      	lsls	r3, r3, #9
 80056ce:	401a      	ands	r2, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d10f      	bne.n	80056f8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056d8:	69fa      	ldr	r2, [r7, #28]
 80056da:	23f0      	movs	r3, #240	; 0xf0
 80056dc:	039b      	lsls	r3, r3, #14
 80056de:	401a      	ands	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d107      	bne.n	80056f8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80056e8:	69fa      	ldr	r2, [r7, #28]
 80056ea:	23c0      	movs	r3, #192	; 0xc0
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	401a      	ands	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d001      	beq.n	80056fc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	0018      	movs	r0, r3
 8005700:	46bd      	mov	sp, r7
 8005702:	b00a      	add	sp, #40	; 0x28
 8005704:	bdb0      	pop	{r4, r5, r7, pc}
 8005706:	46c0      	nop			; (mov r8, r8)
 8005708:	40021000 	.word	0x40021000
 800570c:	ff02ffff 	.word	0xff02ffff
 8005710:	feffffff 	.word	0xfeffffff

08005714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005714:	b5b0      	push	{r4, r5, r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e128      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005728:	4b96      	ldr	r3, [pc, #600]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2201      	movs	r2, #1
 800572e:	4013      	ands	r3, r2
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d91e      	bls.n	8005774 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005736:	4b93      	ldr	r3, [pc, #588]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2201      	movs	r2, #1
 800573c:	4393      	bics	r3, r2
 800573e:	0019      	movs	r1, r3
 8005740:	4b90      	ldr	r3, [pc, #576]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005748:	f7fe fbe6 	bl	8003f18 <HAL_GetTick>
 800574c:	0003      	movs	r3, r0
 800574e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005750:	e009      	b.n	8005766 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005752:	f7fe fbe1 	bl	8003f18 <HAL_GetTick>
 8005756:	0002      	movs	r2, r0
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	4a8a      	ldr	r2, [pc, #552]	; (8005988 <HAL_RCC_ClockConfig+0x274>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e109      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005766:	4b87      	ldr	r3, [pc, #540]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2201      	movs	r2, #1
 800576c:	4013      	ands	r3, r2
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	429a      	cmp	r2, r3
 8005772:	d1ee      	bne.n	8005752 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2202      	movs	r2, #2
 800577a:	4013      	ands	r3, r2
 800577c:	d009      	beq.n	8005792 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800577e:	4b83      	ldr	r3, [pc, #524]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	22f0      	movs	r2, #240	; 0xf0
 8005784:	4393      	bics	r3, r2
 8005786:	0019      	movs	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	4b7f      	ldr	r3, [pc, #508]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 800578e:	430a      	orrs	r2, r1
 8005790:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2201      	movs	r2, #1
 8005798:	4013      	ands	r3, r2
 800579a:	d100      	bne.n	800579e <HAL_RCC_ClockConfig+0x8a>
 800579c:	e089      	b.n	80058b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d107      	bne.n	80057b6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80057a6:	4b79      	ldr	r3, [pc, #484]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 80057a8:	681a      	ldr	r2, [r3, #0]
 80057aa:	2380      	movs	r3, #128	; 0x80
 80057ac:	029b      	lsls	r3, r3, #10
 80057ae:	4013      	ands	r3, r2
 80057b0:	d120      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e0e1      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d107      	bne.n	80057ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057be:	4b73      	ldr	r3, [pc, #460]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	2380      	movs	r3, #128	; 0x80
 80057c4:	049b      	lsls	r3, r3, #18
 80057c6:	4013      	ands	r3, r2
 80057c8:	d114      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0d5      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d106      	bne.n	80057e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057d6:	4b6d      	ldr	r3, [pc, #436]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2204      	movs	r2, #4
 80057dc:	4013      	ands	r3, r2
 80057de:	d109      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e0ca      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80057e4:	4b69      	ldr	r3, [pc, #420]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	2380      	movs	r3, #128	; 0x80
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	4013      	ands	r3, r2
 80057ee:	d101      	bne.n	80057f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	e0c2      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057f4:	4b65      	ldr	r3, [pc, #404]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	2203      	movs	r2, #3
 80057fa:	4393      	bics	r3, r2
 80057fc:	0019      	movs	r1, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	4b62      	ldr	r3, [pc, #392]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005804:	430a      	orrs	r2, r1
 8005806:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005808:	f7fe fb86 	bl	8003f18 <HAL_GetTick>
 800580c:	0003      	movs	r3, r0
 800580e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b02      	cmp	r3, #2
 8005816:	d111      	bne.n	800583c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005818:	e009      	b.n	800582e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800581a:	f7fe fb7d 	bl	8003f18 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	4a58      	ldr	r2, [pc, #352]	; (8005988 <HAL_RCC_ClockConfig+0x274>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d901      	bls.n	800582e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e0a5      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800582e:	4b57      	ldr	r3, [pc, #348]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005830:	68db      	ldr	r3, [r3, #12]
 8005832:	220c      	movs	r2, #12
 8005834:	4013      	ands	r3, r2
 8005836:	2b08      	cmp	r3, #8
 8005838:	d1ef      	bne.n	800581a <HAL_RCC_ClockConfig+0x106>
 800583a:	e03a      	b.n	80058b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b03      	cmp	r3, #3
 8005842:	d111      	bne.n	8005868 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005844:	e009      	b.n	800585a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005846:	f7fe fb67 	bl	8003f18 <HAL_GetTick>
 800584a:	0002      	movs	r2, r0
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	4a4d      	ldr	r2, [pc, #308]	; (8005988 <HAL_RCC_ClockConfig+0x274>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d901      	bls.n	800585a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e08f      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800585a:	4b4c      	ldr	r3, [pc, #304]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	220c      	movs	r2, #12
 8005860:	4013      	ands	r3, r2
 8005862:	2b0c      	cmp	r3, #12
 8005864:	d1ef      	bne.n	8005846 <HAL_RCC_ClockConfig+0x132>
 8005866:	e024      	b.n	80058b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d11b      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005870:	e009      	b.n	8005886 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005872:	f7fe fb51 	bl	8003f18 <HAL_GetTick>
 8005876:	0002      	movs	r2, r0
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	4a42      	ldr	r2, [pc, #264]	; (8005988 <HAL_RCC_ClockConfig+0x274>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d901      	bls.n	8005886 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e079      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005886:	4b41      	ldr	r3, [pc, #260]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	220c      	movs	r2, #12
 800588c:	4013      	ands	r3, r2
 800588e:	2b04      	cmp	r3, #4
 8005890:	d1ef      	bne.n	8005872 <HAL_RCC_ClockConfig+0x15e>
 8005892:	e00e      	b.n	80058b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005894:	f7fe fb40 	bl	8003f18 <HAL_GetTick>
 8005898:	0002      	movs	r2, r0
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	4a3a      	ldr	r2, [pc, #232]	; (8005988 <HAL_RCC_ClockConfig+0x274>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e068      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80058a8:	4b38      	ldr	r3, [pc, #224]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	220c      	movs	r2, #12
 80058ae:	4013      	ands	r3, r2
 80058b0:	d1f0      	bne.n	8005894 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80058b2:	4b34      	ldr	r3, [pc, #208]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2201      	movs	r2, #1
 80058b8:	4013      	ands	r3, r2
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d21e      	bcs.n	80058fe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c0:	4b30      	ldr	r3, [pc, #192]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2201      	movs	r2, #1
 80058c6:	4393      	bics	r3, r2
 80058c8:	0019      	movs	r1, r3
 80058ca:	4b2e      	ldr	r3, [pc, #184]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 80058cc:	683a      	ldr	r2, [r7, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80058d2:	f7fe fb21 	bl	8003f18 <HAL_GetTick>
 80058d6:	0003      	movs	r3, r0
 80058d8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058da:	e009      	b.n	80058f0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058dc:	f7fe fb1c 	bl	8003f18 <HAL_GetTick>
 80058e0:	0002      	movs	r2, r0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	4a28      	ldr	r2, [pc, #160]	; (8005988 <HAL_RCC_ClockConfig+0x274>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e044      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f0:	4b24      	ldr	r3, [pc, #144]	; (8005984 <HAL_RCC_ClockConfig+0x270>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2201      	movs	r2, #1
 80058f6:	4013      	ands	r3, r2
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d1ee      	bne.n	80058dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2204      	movs	r2, #4
 8005904:	4013      	ands	r3, r2
 8005906:	d009      	beq.n	800591c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005908:	4b20      	ldr	r3, [pc, #128]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a20      	ldr	r2, [pc, #128]	; (8005990 <HAL_RCC_ClockConfig+0x27c>)
 800590e:	4013      	ands	r3, r2
 8005910:	0019      	movs	r1, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	4b1d      	ldr	r3, [pc, #116]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005918:	430a      	orrs	r2, r1
 800591a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2208      	movs	r2, #8
 8005922:	4013      	ands	r3, r2
 8005924:	d00a      	beq.n	800593c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005926:	4b19      	ldr	r3, [pc, #100]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <HAL_RCC_ClockConfig+0x280>)
 800592c:	4013      	ands	r3, r2
 800592e:	0019      	movs	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	00da      	lsls	r2, r3, #3
 8005936:	4b15      	ldr	r3, [pc, #84]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005938:	430a      	orrs	r2, r1
 800593a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800593c:	f000 f832 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8005940:	0001      	movs	r1, r0
 8005942:	4b12      	ldr	r3, [pc, #72]	; (800598c <HAL_RCC_ClockConfig+0x278>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	091b      	lsrs	r3, r3, #4
 8005948:	220f      	movs	r2, #15
 800594a:	4013      	ands	r3, r2
 800594c:	4a12      	ldr	r2, [pc, #72]	; (8005998 <HAL_RCC_ClockConfig+0x284>)
 800594e:	5cd3      	ldrb	r3, [r2, r3]
 8005950:	000a      	movs	r2, r1
 8005952:	40da      	lsrs	r2, r3
 8005954:	4b11      	ldr	r3, [pc, #68]	; (800599c <HAL_RCC_ClockConfig+0x288>)
 8005956:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005958:	4b11      	ldr	r3, [pc, #68]	; (80059a0 <HAL_RCC_ClockConfig+0x28c>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	250b      	movs	r5, #11
 800595e:	197c      	adds	r4, r7, r5
 8005960:	0018      	movs	r0, r3
 8005962:	f7fe fa93 	bl	8003e8c <HAL_InitTick>
 8005966:	0003      	movs	r3, r0
 8005968:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800596a:	197b      	adds	r3, r7, r5
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8005972:	197b      	adds	r3, r7, r5
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	e000      	b.n	800597a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	0018      	movs	r0, r3
 800597c:	46bd      	mov	sp, r7
 800597e:	b004      	add	sp, #16
 8005980:	bdb0      	pop	{r4, r5, r7, pc}
 8005982:	46c0      	nop			; (mov r8, r8)
 8005984:	40022000 	.word	0x40022000
 8005988:	00001388 	.word	0x00001388
 800598c:	40021000 	.word	0x40021000
 8005990:	fffff8ff 	.word	0xfffff8ff
 8005994:	ffffc7ff 	.word	0xffffc7ff
 8005998:	08009bb4 	.word	0x08009bb4
 800599c:	20000000 	.word	0x20000000
 80059a0:	20000004 	.word	0x20000004

080059a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059a4:	b5b0      	push	{r4, r5, r7, lr}
 80059a6:	b08e      	sub	sp, #56	; 0x38
 80059a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80059aa:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <HAL_RCC_GetSysClockFreq+0x138>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059b2:	230c      	movs	r3, #12
 80059b4:	4013      	ands	r3, r2
 80059b6:	2b0c      	cmp	r3, #12
 80059b8:	d014      	beq.n	80059e4 <HAL_RCC_GetSysClockFreq+0x40>
 80059ba:	d900      	bls.n	80059be <HAL_RCC_GetSysClockFreq+0x1a>
 80059bc:	e07b      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x112>
 80059be:	2b04      	cmp	r3, #4
 80059c0:	d002      	beq.n	80059c8 <HAL_RCC_GetSysClockFreq+0x24>
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d00b      	beq.n	80059de <HAL_RCC_GetSysClockFreq+0x3a>
 80059c6:	e076      	b.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80059c8:	4b44      	ldr	r3, [pc, #272]	; (8005adc <HAL_RCC_GetSysClockFreq+0x138>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2210      	movs	r2, #16
 80059ce:	4013      	ands	r3, r2
 80059d0:	d002      	beq.n	80059d8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80059d2:	4b43      	ldr	r3, [pc, #268]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80059d4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80059d6:	e07c      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80059d8:	4b42      	ldr	r3, [pc, #264]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0x140>)
 80059da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059dc:	e079      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80059de:	4b42      	ldr	r3, [pc, #264]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x144>)
 80059e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80059e2:	e076      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80059e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e6:	0c9a      	lsrs	r2, r3, #18
 80059e8:	230f      	movs	r3, #15
 80059ea:	401a      	ands	r2, r3
 80059ec:	4b3f      	ldr	r3, [pc, #252]	; (8005aec <HAL_RCC_GetSysClockFreq+0x148>)
 80059ee:	5c9b      	ldrb	r3, [r3, r2]
 80059f0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	0d9a      	lsrs	r2, r3, #22
 80059f6:	2303      	movs	r3, #3
 80059f8:	4013      	ands	r3, r2
 80059fa:	3301      	adds	r3, #1
 80059fc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80059fe:	4b37      	ldr	r3, [pc, #220]	; (8005adc <HAL_RCC_GetSysClockFreq+0x138>)
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	025b      	lsls	r3, r3, #9
 8005a06:	4013      	ands	r3, r2
 8005a08:	d01a      	beq.n	8005a40 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a0c:	61bb      	str	r3, [r7, #24]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	4a35      	ldr	r2, [pc, #212]	; (8005ae8 <HAL_RCC_GetSysClockFreq+0x144>)
 8005a14:	2300      	movs	r3, #0
 8005a16:	69b8      	ldr	r0, [r7, #24]
 8005a18:	69f9      	ldr	r1, [r7, #28]
 8005a1a:	f7fa fd9f 	bl	800055c <__aeabi_lmul>
 8005a1e:	0002      	movs	r2, r0
 8005a20:	000b      	movs	r3, r1
 8005a22:	0010      	movs	r0, r2
 8005a24:	0019      	movs	r1, r3
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	613b      	str	r3, [r7, #16]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f7fa fd73 	bl	800051c <__aeabi_uldivmod>
 8005a36:	0002      	movs	r2, r0
 8005a38:	000b      	movs	r3, r1
 8005a3a:	0013      	movs	r3, r2
 8005a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a3e:	e037      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a40:	4b26      	ldr	r3, [pc, #152]	; (8005adc <HAL_RCC_GetSysClockFreq+0x138>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2210      	movs	r2, #16
 8005a46:	4013      	ands	r3, r2
 8005a48:	d01a      	beq.n	8005a80 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4c:	60bb      	str	r3, [r7, #8]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	4a23      	ldr	r2, [pc, #140]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005a54:	2300      	movs	r3, #0
 8005a56:	68b8      	ldr	r0, [r7, #8]
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	f7fa fd7f 	bl	800055c <__aeabi_lmul>
 8005a5e:	0002      	movs	r2, r0
 8005a60:	000b      	movs	r3, r1
 8005a62:	0010      	movs	r0, r2
 8005a64:	0019      	movs	r1, r3
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	603b      	str	r3, [r7, #0]
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	607b      	str	r3, [r7, #4]
 8005a6e:	683a      	ldr	r2, [r7, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f7fa fd53 	bl	800051c <__aeabi_uldivmod>
 8005a76:	0002      	movs	r2, r0
 8005a78:	000b      	movs	r3, r1
 8005a7a:	0013      	movs	r3, r2
 8005a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a7e:	e017      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	0018      	movs	r0, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	0019      	movs	r1, r3
 8005a88:	4a16      	ldr	r2, [pc, #88]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0x140>)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f7fa fd66 	bl	800055c <__aeabi_lmul>
 8005a90:	0002      	movs	r2, r0
 8005a92:	000b      	movs	r3, r1
 8005a94:	0010      	movs	r0, r2
 8005a96:	0019      	movs	r1, r3
 8005a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9a:	001c      	movs	r4, r3
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	001d      	movs	r5, r3
 8005aa0:	0022      	movs	r2, r4
 8005aa2:	002b      	movs	r3, r5
 8005aa4:	f7fa fd3a 	bl	800051c <__aeabi_uldivmod>
 8005aa8:	0002      	movs	r2, r0
 8005aaa:	000b      	movs	r3, r1
 8005aac:	0013      	movs	r3, r2
 8005aae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8005ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ab4:	e00d      	b.n	8005ad2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <HAL_RCC_GetSysClockFreq+0x138>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	0b5b      	lsrs	r3, r3, #13
 8005abc:	2207      	movs	r2, #7
 8005abe:	4013      	ands	r3, r2
 8005ac0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	2280      	movs	r2, #128	; 0x80
 8005ac8:	0212      	lsls	r2, r2, #8
 8005aca:	409a      	lsls	r2, r3
 8005acc:	0013      	movs	r3, r2
 8005ace:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ad0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005ad4:	0018      	movs	r0, r3
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	b00e      	add	sp, #56	; 0x38
 8005ada:	bdb0      	pop	{r4, r5, r7, pc}
 8005adc:	40021000 	.word	0x40021000
 8005ae0:	003d0900 	.word	0x003d0900
 8005ae4:	00f42400 	.word	0x00f42400
 8005ae8:	007a1200 	.word	0x007a1200
 8005aec:	08009bcc 	.word	0x08009bcc

08005af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005af4:	4b02      	ldr	r3, [pc, #8]	; (8005b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8005af6:	681b      	ldr	r3, [r3, #0]
}
 8005af8:	0018      	movs	r0, r3
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	20000000 	.word	0x20000000

08005b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b08:	f7ff fff2 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8005b0c:	0001      	movs	r1, r0
 8005b0e:	4b06      	ldr	r3, [pc, #24]	; (8005b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	0a1b      	lsrs	r3, r3, #8
 8005b14:	2207      	movs	r2, #7
 8005b16:	4013      	ands	r3, r2
 8005b18:	4a04      	ldr	r2, [pc, #16]	; (8005b2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b1a:	5cd3      	ldrb	r3, [r2, r3]
 8005b1c:	40d9      	lsrs	r1, r3
 8005b1e:	000b      	movs	r3, r1
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	46c0      	nop			; (mov r8, r8)
 8005b28:	40021000 	.word	0x40021000
 8005b2c:	08009bc4 	.word	0x08009bc4

08005b30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b34:	f7ff ffdc 	bl	8005af0 <HAL_RCC_GetHCLKFreq>
 8005b38:	0001      	movs	r1, r0
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	0adb      	lsrs	r3, r3, #11
 8005b40:	2207      	movs	r2, #7
 8005b42:	4013      	ands	r3, r2
 8005b44:	4a04      	ldr	r2, [pc, #16]	; (8005b58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b46:	5cd3      	ldrb	r3, [r2, r3]
 8005b48:	40d9      	lsrs	r1, r3
 8005b4a:	000b      	movs	r3, r1
}
 8005b4c:	0018      	movs	r0, r3
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	40021000 	.word	0x40021000
 8005b58:	08009bc4 	.word	0x08009bc4

08005b5c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8005b64:	2317      	movs	r3, #23
 8005b66:	18fb      	adds	r3, r7, r3
 8005b68:	2200      	movs	r2, #0
 8005b6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2220      	movs	r2, #32
 8005b72:	4013      	ands	r3, r2
 8005b74:	d106      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2380      	movs	r3, #128	; 0x80
 8005b7c:	011b      	lsls	r3, r3, #4
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d100      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8005b82:	e0d9      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b84:	4b9c      	ldr	r3, [pc, #624]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b88:	2380      	movs	r3, #128	; 0x80
 8005b8a:	055b      	lsls	r3, r3, #21
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d10a      	bne.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b90:	4b99      	ldr	r3, [pc, #612]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b94:	4b98      	ldr	r3, [pc, #608]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005b96:	2180      	movs	r1, #128	; 0x80
 8005b98:	0549      	lsls	r1, r1, #21
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005b9e:	2317      	movs	r3, #23
 8005ba0:	18fb      	adds	r3, r7, r3
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ba6:	4b95      	ldr	r3, [pc, #596]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	2380      	movs	r3, #128	; 0x80
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	4013      	ands	r3, r2
 8005bb0:	d11a      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bb2:	4b92      	ldr	r3, [pc, #584]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	4b91      	ldr	r3, [pc, #580]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005bb8:	2180      	movs	r1, #128	; 0x80
 8005bba:	0049      	lsls	r1, r1, #1
 8005bbc:	430a      	orrs	r2, r1
 8005bbe:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bc0:	f7fe f9aa 	bl	8003f18 <HAL_GetTick>
 8005bc4:	0003      	movs	r3, r0
 8005bc6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc8:	e008      	b.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bca:	f7fe f9a5 	bl	8003f18 <HAL_GetTick>
 8005bce:	0002      	movs	r2, r0
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	2b64      	cmp	r3, #100	; 0x64
 8005bd6:	d901      	bls.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005bd8:	2303      	movs	r3, #3
 8005bda:	e108      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bdc:	4b87      	ldr	r3, [pc, #540]	; (8005dfc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4013      	ands	r3, r2
 8005be6:	d0f0      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8005be8:	4b83      	ldr	r3, [pc, #524]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	23c0      	movs	r3, #192	; 0xc0
 8005bee:	039b      	lsls	r3, r3, #14
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	23c0      	movs	r3, #192	; 0xc0
 8005bfa:	039b      	lsls	r3, r3, #14
 8005bfc:	4013      	ands	r3, r2
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d107      	bne.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	23c0      	movs	r3, #192	; 0xc0
 8005c0a:	039b      	lsls	r3, r3, #14
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d013      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	23c0      	movs	r3, #192	; 0xc0
 8005c1a:	029b      	lsls	r3, r3, #10
 8005c1c:	401a      	ands	r2, r3
 8005c1e:	23c0      	movs	r3, #192	; 0xc0
 8005c20:	029b      	lsls	r3, r3, #10
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d10a      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c26:	4b74      	ldr	r3, [pc, #464]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	2380      	movs	r3, #128	; 0x80
 8005c2c:	029b      	lsls	r3, r3, #10
 8005c2e:	401a      	ands	r2, r3
 8005c30:	2380      	movs	r3, #128	; 0x80
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d101      	bne.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0d8      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8005c3c:	4b6e      	ldr	r3, [pc, #440]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c40:	23c0      	movs	r3, #192	; 0xc0
 8005c42:	029b      	lsls	r3, r3, #10
 8005c44:	4013      	ands	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d049      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	23c0      	movs	r3, #192	; 0xc0
 8005c54:	029b      	lsls	r3, r3, #10
 8005c56:	4013      	ands	r3, r2
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d004      	beq.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2220      	movs	r2, #32
 8005c64:	4013      	ands	r3, r2
 8005c66:	d10d      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	23c0      	movs	r3, #192	; 0xc0
 8005c6e:	029b      	lsls	r3, r3, #10
 8005c70:	4013      	ands	r3, r2
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d034      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	4013      	ands	r3, r2
 8005c82:	d02e      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8005c84:	4b5c      	ldr	r3, [pc, #368]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c88:	4a5d      	ldr	r2, [pc, #372]	; (8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c8e:	4b5a      	ldr	r3, [pc, #360]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c92:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	0309      	lsls	r1, r1, #12
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c9c:	4b56      	ldr	r3, [pc, #344]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005c9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ca0:	4b55      	ldr	r3, [pc, #340]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005ca2:	4958      	ldr	r1, [pc, #352]	; (8005e04 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8005ca4:	400a      	ands	r2, r1
 8005ca6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8005ca8:	4b53      	ldr	r3, [pc, #332]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	2380      	movs	r3, #128	; 0x80
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d014      	beq.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cb8:	f7fe f92e 	bl	8003f18 <HAL_GetTick>
 8005cbc:	0003      	movs	r3, r0
 8005cbe:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cc0:	e009      	b.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005cc2:	f7fe f929 	bl	8003f18 <HAL_GetTick>
 8005cc6:	0002      	movs	r2, r0
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	4a4e      	ldr	r2, [pc, #312]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d901      	bls.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8005cd2:	2303      	movs	r3, #3
 8005cd4:	e08b      	b.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cd6:	4b48      	ldr	r3, [pc, #288]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005cd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cda:	2380      	movs	r3, #128	; 0x80
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d0ef      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685a      	ldr	r2, [r3, #4]
 8005ce6:	23c0      	movs	r3, #192	; 0xc0
 8005ce8:	029b      	lsls	r3, r3, #10
 8005cea:	401a      	ands	r2, r3
 8005cec:	23c0      	movs	r3, #192	; 0xc0
 8005cee:	029b      	lsls	r3, r3, #10
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d10c      	bne.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8005cf4:	4b40      	ldr	r3, [pc, #256]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a44      	ldr	r2, [pc, #272]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8005cfa:	4013      	ands	r3, r2
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	23c0      	movs	r3, #192	; 0xc0
 8005d04:	039b      	lsls	r3, r3, #14
 8005d06:	401a      	ands	r2, r3
 8005d08:	4b3b      	ldr	r3, [pc, #236]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	4b3a      	ldr	r3, [pc, #232]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	23c0      	movs	r3, #192	; 0xc0
 8005d18:	029b      	lsls	r3, r3, #10
 8005d1a:	401a      	ands	r2, r3
 8005d1c:	4b36      	ldr	r3, [pc, #216]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005d22:	2317      	movs	r3, #23
 8005d24:	18fb      	adds	r3, r7, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d105      	bne.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d2c:	4b32      	ldr	r3, [pc, #200]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d30:	4b31      	ldr	r3, [pc, #196]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d32:	4937      	ldr	r1, [pc, #220]	; (8005e10 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8005d34:	400a      	ands	r2, r1
 8005d36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d009      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d42:	4b2d      	ldr	r3, [pc, #180]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d46:	2203      	movs	r2, #3
 8005d48:	4393      	bics	r3, r2
 8005d4a:	0019      	movs	r1, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	4b29      	ldr	r3, [pc, #164]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d52:	430a      	orrs	r2, r1
 8005d54:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d60:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d64:	220c      	movs	r2, #12
 8005d66:	4393      	bics	r3, r2
 8005d68:	0019      	movs	r1, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d70:	430a      	orrs	r2, r1
 8005d72:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2204      	movs	r2, #4
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	d009      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d7e:	4b1e      	ldr	r3, [pc, #120]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d82:	4a24      	ldr	r2, [pc, #144]	; (8005e14 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	0019      	movs	r1, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	695a      	ldr	r2, [r3, #20]
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2208      	movs	r2, #8
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d009      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d9c:	4b16      	ldr	r3, [pc, #88]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005da0:	4a1d      	ldr	r2, [pc, #116]	; (8005e18 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	0019      	movs	r1, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	699a      	ldr	r2, [r3, #24]
 8005daa:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dac:	430a      	orrs	r2, r1
 8005dae:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2240      	movs	r2, #64	; 0x40
 8005db6:	4013      	ands	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005dba:	4b0f      	ldr	r3, [pc, #60]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	0019      	movs	r1, r3
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a1a      	ldr	r2, [r3, #32]
 8005dc8:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2280      	movs	r2, #128	; 0x80
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d009      	beq.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8005dd8:	4b07      	ldr	r3, [pc, #28]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ddc:	4a10      	ldr	r2, [pc, #64]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8005dde:	4013      	ands	r3, r2
 8005de0:	0019      	movs	r1, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8005de8:	430a      	orrs	r2, r1
 8005dea:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	0018      	movs	r0, r3
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b006      	add	sp, #24
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	40021000 	.word	0x40021000
 8005dfc:	40007000 	.word	0x40007000
 8005e00:	fffcffff 	.word	0xfffcffff
 8005e04:	fff7ffff 	.word	0xfff7ffff
 8005e08:	00001388 	.word	0x00001388
 8005e0c:	ffcfffff 	.word	0xffcfffff
 8005e10:	efffffff 	.word	0xefffffff
 8005e14:	fffff3ff 	.word	0xfffff3ff
 8005e18:	ffffcfff 	.word	0xffffcfff
 8005e1c:	fbffffff 	.word	0xfbffffff
 8005e20:	fff3ffff 	.word	0xfff3ffff

08005e24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d101      	bne.n	8005e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	e044      	b.n	8005ec0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d107      	bne.n	8005e4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2274      	movs	r2, #116	; 0x74
 8005e42:	2100      	movs	r1, #0
 8005e44:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	0018      	movs	r0, r3
 8005e4a:	f7fd fc2b 	bl	80036a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2224      	movs	r2, #36	; 0x24
 8005e52:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2101      	movs	r1, #1
 8005e60:	438a      	bics	r2, r1
 8005e62:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	0018      	movs	r0, r3
 8005e68:	f000 f8d8 	bl	800601c <UART_SetConfig>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e024      	b.n	8005ec0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	0018      	movs	r0, r3
 8005e82:	f000 fb4f 	bl	8006524 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	490d      	ldr	r1, [pc, #52]	; (8005ec8 <HAL_UART_Init+0xa4>)
 8005e92:	400a      	ands	r2, r1
 8005e94:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	689a      	ldr	r2, [r3, #8]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	212a      	movs	r1, #42	; 0x2a
 8005ea2:	438a      	bics	r2, r1
 8005ea4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	0018      	movs	r0, r3
 8005eba:	f000 fbe7 	bl	800668c <UART_CheckIdleState>
 8005ebe:	0003      	movs	r3, r0
}
 8005ec0:	0018      	movs	r0, r3
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	b002      	add	sp, #8
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	ffffb7ff 	.word	0xffffb7ff

08005ecc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	; 0x28
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	1dbb      	adds	r3, r7, #6
 8005eda:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ee0:	2b20      	cmp	r3, #32
 8005ee2:	d000      	beq.n	8005ee6 <HAL_UART_Transmit+0x1a>
 8005ee4:	e095      	b.n	8006012 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d003      	beq.n	8005ef4 <HAL_UART_Transmit+0x28>
 8005eec:	1dbb      	adds	r3, r7, #6
 8005eee:	881b      	ldrh	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d101      	bne.n	8005ef8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e08d      	b.n	8006014 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689a      	ldr	r2, [r3, #8]
 8005efc:	2380      	movs	r3, #128	; 0x80
 8005efe:	015b      	lsls	r3, r3, #5
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d109      	bne.n	8005f18 <HAL_UART_Transmit+0x4c>
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	4013      	ands	r3, r2
 8005f12:	d001      	beq.n	8005f18 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e07d      	b.n	8006014 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2274      	movs	r2, #116	; 0x74
 8005f1c:	5c9b      	ldrb	r3, [r3, r2]
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_UART_Transmit+0x5a>
 8005f22:	2302      	movs	r3, #2
 8005f24:	e076      	b.n	8006014 <HAL_UART_Transmit+0x148>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2274      	movs	r2, #116	; 0x74
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2280      	movs	r2, #128	; 0x80
 8005f32:	2100      	movs	r1, #0
 8005f34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2221      	movs	r2, #33	; 0x21
 8005f3a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f3c:	f7fd ffec 	bl	8003f18 <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
 8005f42:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	1dba      	adds	r2, r7, #6
 8005f48:	2150      	movs	r1, #80	; 0x50
 8005f4a:	8812      	ldrh	r2, [r2, #0]
 8005f4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1dba      	adds	r2, r7, #6
 8005f52:	2152      	movs	r1, #82	; 0x52
 8005f54:	8812      	ldrh	r2, [r2, #0]
 8005f56:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	2380      	movs	r3, #128	; 0x80
 8005f5e:	015b      	lsls	r3, r3, #5
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d108      	bne.n	8005f76 <HAL_UART_Transmit+0xaa>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d104      	bne.n	8005f76 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	e003      	b.n	8005f7e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2274      	movs	r2, #116	; 0x74
 8005f82:	2100      	movs	r1, #0
 8005f84:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005f86:	e02c      	b.n	8005fe2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	0013      	movs	r3, r2
 8005f92:	2200      	movs	r2, #0
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	f000 fbc1 	bl	800671c <UART_WaitOnFlagUntilTimeout>
 8005f9a:	1e03      	subs	r3, r0, #0
 8005f9c:	d001      	beq.n	8005fa2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e038      	b.n	8006014 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10b      	bne.n	8005fc0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005fa8:	69bb      	ldr	r3, [r7, #24]
 8005faa:	881b      	ldrh	r3, [r3, #0]
 8005fac:	001a      	movs	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	05d2      	lsls	r2, r2, #23
 8005fb4:	0dd2      	lsrs	r2, r2, #23
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	3302      	adds	r3, #2
 8005fbc:	61bb      	str	r3, [r7, #24]
 8005fbe:	e007      	b.n	8005fd0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	781a      	ldrb	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2252      	movs	r2, #82	; 0x52
 8005fd4:	5a9b      	ldrh	r3, [r3, r2]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	3b01      	subs	r3, #1
 8005fda:	b299      	uxth	r1, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2252      	movs	r2, #82	; 0x52
 8005fe0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2252      	movs	r2, #82	; 0x52
 8005fe6:	5a9b      	ldrh	r3, [r3, r2]
 8005fe8:	b29b      	uxth	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1cc      	bne.n	8005f88 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	0013      	movs	r3, r2
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	2140      	movs	r1, #64	; 0x40
 8005ffc:	f000 fb8e 	bl	800671c <UART_WaitOnFlagUntilTimeout>
 8006000:	1e03      	subs	r3, r0, #0
 8006002:	d001      	beq.n	8006008 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e005      	b.n	8006014 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800600e:	2300      	movs	r3, #0
 8006010:	e000      	b.n	8006014 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006012:	2302      	movs	r3, #2
  }
}
 8006014:	0018      	movs	r0, r3
 8006016:	46bd      	mov	sp, r7
 8006018:	b008      	add	sp, #32
 800601a:	bd80      	pop	{r7, pc}

0800601c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800601c:	b5b0      	push	{r4, r5, r7, lr}
 800601e:	b08e      	sub	sp, #56	; 0x38
 8006020:	af00      	add	r7, sp, #0
 8006022:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006024:	231a      	movs	r3, #26
 8006026:	2218      	movs	r2, #24
 8006028:	189b      	adds	r3, r3, r2
 800602a:	19db      	adds	r3, r3, r7
 800602c:	2200      	movs	r2, #0
 800602e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	431a      	orrs	r2, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	431a      	orrs	r2, r3
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	4313      	orrs	r3, r2
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4ac6      	ldr	r2, [pc, #792]	; (8006368 <UART_SetConfig+0x34c>)
 8006050:	4013      	ands	r3, r2
 8006052:	0019      	movs	r1, r3
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800605a:	430a      	orrs	r2, r1
 800605c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	4ac1      	ldr	r2, [pc, #772]	; (800636c <UART_SetConfig+0x350>)
 8006066:	4013      	ands	r3, r2
 8006068:	0019      	movs	r1, r3
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	430a      	orrs	r2, r1
 8006074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4abb      	ldr	r2, [pc, #748]	; (8006370 <UART_SetConfig+0x354>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d004      	beq.n	8006090 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	6a1b      	ldr	r3, [r3, #32]
 800608a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800608c:	4313      	orrs	r3, r2
 800608e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4ab7      	ldr	r2, [pc, #732]	; (8006374 <UART_SetConfig+0x358>)
 8006098:	4013      	ands	r3, r2
 800609a:	0019      	movs	r1, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4ab3      	ldr	r2, [pc, #716]	; (8006378 <UART_SetConfig+0x35c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d131      	bne.n	8006114 <UART_SetConfig+0xf8>
 80060b0:	4bb2      	ldr	r3, [pc, #712]	; (800637c <UART_SetConfig+0x360>)
 80060b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b4:	2203      	movs	r2, #3
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d01d      	beq.n	80060f8 <UART_SetConfig+0xdc>
 80060bc:	d823      	bhi.n	8006106 <UART_SetConfig+0xea>
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d00c      	beq.n	80060dc <UART_SetConfig+0xc0>
 80060c2:	d820      	bhi.n	8006106 <UART_SetConfig+0xea>
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d002      	beq.n	80060ce <UART_SetConfig+0xb2>
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d00e      	beq.n	80060ea <UART_SetConfig+0xce>
 80060cc:	e01b      	b.n	8006106 <UART_SetConfig+0xea>
 80060ce:	231b      	movs	r3, #27
 80060d0:	2218      	movs	r2, #24
 80060d2:	189b      	adds	r3, r3, r2
 80060d4:	19db      	adds	r3, r3, r7
 80060d6:	2201      	movs	r2, #1
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	e09c      	b.n	8006216 <UART_SetConfig+0x1fa>
 80060dc:	231b      	movs	r3, #27
 80060de:	2218      	movs	r2, #24
 80060e0:	189b      	adds	r3, r3, r2
 80060e2:	19db      	adds	r3, r3, r7
 80060e4:	2202      	movs	r2, #2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e095      	b.n	8006216 <UART_SetConfig+0x1fa>
 80060ea:	231b      	movs	r3, #27
 80060ec:	2218      	movs	r2, #24
 80060ee:	189b      	adds	r3, r3, r2
 80060f0:	19db      	adds	r3, r3, r7
 80060f2:	2204      	movs	r2, #4
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e08e      	b.n	8006216 <UART_SetConfig+0x1fa>
 80060f8:	231b      	movs	r3, #27
 80060fa:	2218      	movs	r2, #24
 80060fc:	189b      	adds	r3, r3, r2
 80060fe:	19db      	adds	r3, r3, r7
 8006100:	2208      	movs	r2, #8
 8006102:	701a      	strb	r2, [r3, #0]
 8006104:	e087      	b.n	8006216 <UART_SetConfig+0x1fa>
 8006106:	231b      	movs	r3, #27
 8006108:	2218      	movs	r2, #24
 800610a:	189b      	adds	r3, r3, r2
 800610c:	19db      	adds	r3, r3, r7
 800610e:	2210      	movs	r2, #16
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	e080      	b.n	8006216 <UART_SetConfig+0x1fa>
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a99      	ldr	r2, [pc, #612]	; (8006380 <UART_SetConfig+0x364>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d131      	bne.n	8006182 <UART_SetConfig+0x166>
 800611e:	4b97      	ldr	r3, [pc, #604]	; (800637c <UART_SetConfig+0x360>)
 8006120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006122:	220c      	movs	r2, #12
 8006124:	4013      	ands	r3, r2
 8006126:	2b0c      	cmp	r3, #12
 8006128:	d01d      	beq.n	8006166 <UART_SetConfig+0x14a>
 800612a:	d823      	bhi.n	8006174 <UART_SetConfig+0x158>
 800612c:	2b08      	cmp	r3, #8
 800612e:	d00c      	beq.n	800614a <UART_SetConfig+0x12e>
 8006130:	d820      	bhi.n	8006174 <UART_SetConfig+0x158>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d002      	beq.n	800613c <UART_SetConfig+0x120>
 8006136:	2b04      	cmp	r3, #4
 8006138:	d00e      	beq.n	8006158 <UART_SetConfig+0x13c>
 800613a:	e01b      	b.n	8006174 <UART_SetConfig+0x158>
 800613c:	231b      	movs	r3, #27
 800613e:	2218      	movs	r2, #24
 8006140:	189b      	adds	r3, r3, r2
 8006142:	19db      	adds	r3, r3, r7
 8006144:	2200      	movs	r2, #0
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e065      	b.n	8006216 <UART_SetConfig+0x1fa>
 800614a:	231b      	movs	r3, #27
 800614c:	2218      	movs	r2, #24
 800614e:	189b      	adds	r3, r3, r2
 8006150:	19db      	adds	r3, r3, r7
 8006152:	2202      	movs	r2, #2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	e05e      	b.n	8006216 <UART_SetConfig+0x1fa>
 8006158:	231b      	movs	r3, #27
 800615a:	2218      	movs	r2, #24
 800615c:	189b      	adds	r3, r3, r2
 800615e:	19db      	adds	r3, r3, r7
 8006160:	2204      	movs	r2, #4
 8006162:	701a      	strb	r2, [r3, #0]
 8006164:	e057      	b.n	8006216 <UART_SetConfig+0x1fa>
 8006166:	231b      	movs	r3, #27
 8006168:	2218      	movs	r2, #24
 800616a:	189b      	adds	r3, r3, r2
 800616c:	19db      	adds	r3, r3, r7
 800616e:	2208      	movs	r2, #8
 8006170:	701a      	strb	r2, [r3, #0]
 8006172:	e050      	b.n	8006216 <UART_SetConfig+0x1fa>
 8006174:	231b      	movs	r3, #27
 8006176:	2218      	movs	r2, #24
 8006178:	189b      	adds	r3, r3, r2
 800617a:	19db      	adds	r3, r3, r7
 800617c:	2210      	movs	r2, #16
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	e049      	b.n	8006216 <UART_SetConfig+0x1fa>
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a7a      	ldr	r2, [pc, #488]	; (8006370 <UART_SetConfig+0x354>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d13e      	bne.n	800620a <UART_SetConfig+0x1ee>
 800618c:	4b7b      	ldr	r3, [pc, #492]	; (800637c <UART_SetConfig+0x360>)
 800618e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006190:	23c0      	movs	r3, #192	; 0xc0
 8006192:	011b      	lsls	r3, r3, #4
 8006194:	4013      	ands	r3, r2
 8006196:	22c0      	movs	r2, #192	; 0xc0
 8006198:	0112      	lsls	r2, r2, #4
 800619a:	4293      	cmp	r3, r2
 800619c:	d027      	beq.n	80061ee <UART_SetConfig+0x1d2>
 800619e:	22c0      	movs	r2, #192	; 0xc0
 80061a0:	0112      	lsls	r2, r2, #4
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d82a      	bhi.n	80061fc <UART_SetConfig+0x1e0>
 80061a6:	2280      	movs	r2, #128	; 0x80
 80061a8:	0112      	lsls	r2, r2, #4
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d011      	beq.n	80061d2 <UART_SetConfig+0x1b6>
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	0112      	lsls	r2, r2, #4
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d822      	bhi.n	80061fc <UART_SetConfig+0x1e0>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d004      	beq.n	80061c4 <UART_SetConfig+0x1a8>
 80061ba:	2280      	movs	r2, #128	; 0x80
 80061bc:	00d2      	lsls	r2, r2, #3
 80061be:	4293      	cmp	r3, r2
 80061c0:	d00e      	beq.n	80061e0 <UART_SetConfig+0x1c4>
 80061c2:	e01b      	b.n	80061fc <UART_SetConfig+0x1e0>
 80061c4:	231b      	movs	r3, #27
 80061c6:	2218      	movs	r2, #24
 80061c8:	189b      	adds	r3, r3, r2
 80061ca:	19db      	adds	r3, r3, r7
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
 80061d0:	e021      	b.n	8006216 <UART_SetConfig+0x1fa>
 80061d2:	231b      	movs	r3, #27
 80061d4:	2218      	movs	r2, #24
 80061d6:	189b      	adds	r3, r3, r2
 80061d8:	19db      	adds	r3, r3, r7
 80061da:	2202      	movs	r2, #2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	e01a      	b.n	8006216 <UART_SetConfig+0x1fa>
 80061e0:	231b      	movs	r3, #27
 80061e2:	2218      	movs	r2, #24
 80061e4:	189b      	adds	r3, r3, r2
 80061e6:	19db      	adds	r3, r3, r7
 80061e8:	2204      	movs	r2, #4
 80061ea:	701a      	strb	r2, [r3, #0]
 80061ec:	e013      	b.n	8006216 <UART_SetConfig+0x1fa>
 80061ee:	231b      	movs	r3, #27
 80061f0:	2218      	movs	r2, #24
 80061f2:	189b      	adds	r3, r3, r2
 80061f4:	19db      	adds	r3, r3, r7
 80061f6:	2208      	movs	r2, #8
 80061f8:	701a      	strb	r2, [r3, #0]
 80061fa:	e00c      	b.n	8006216 <UART_SetConfig+0x1fa>
 80061fc:	231b      	movs	r3, #27
 80061fe:	2218      	movs	r2, #24
 8006200:	189b      	adds	r3, r3, r2
 8006202:	19db      	adds	r3, r3, r7
 8006204:	2210      	movs	r2, #16
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e005      	b.n	8006216 <UART_SetConfig+0x1fa>
 800620a:	231b      	movs	r3, #27
 800620c:	2218      	movs	r2, #24
 800620e:	189b      	adds	r3, r3, r2
 8006210:	19db      	adds	r3, r3, r7
 8006212:	2210      	movs	r2, #16
 8006214:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a55      	ldr	r2, [pc, #340]	; (8006370 <UART_SetConfig+0x354>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d000      	beq.n	8006222 <UART_SetConfig+0x206>
 8006220:	e084      	b.n	800632c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006222:	231b      	movs	r3, #27
 8006224:	2218      	movs	r2, #24
 8006226:	189b      	adds	r3, r3, r2
 8006228:	19db      	adds	r3, r3, r7
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b08      	cmp	r3, #8
 800622e:	d01d      	beq.n	800626c <UART_SetConfig+0x250>
 8006230:	dc20      	bgt.n	8006274 <UART_SetConfig+0x258>
 8006232:	2b04      	cmp	r3, #4
 8006234:	d015      	beq.n	8006262 <UART_SetConfig+0x246>
 8006236:	dc1d      	bgt.n	8006274 <UART_SetConfig+0x258>
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <UART_SetConfig+0x226>
 800623c:	2b02      	cmp	r3, #2
 800623e:	d005      	beq.n	800624c <UART_SetConfig+0x230>
 8006240:	e018      	b.n	8006274 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006242:	f7ff fc5f 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 8006246:	0003      	movs	r3, r0
 8006248:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800624a:	e01c      	b.n	8006286 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800624c:	4b4b      	ldr	r3, [pc, #300]	; (800637c <UART_SetConfig+0x360>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2210      	movs	r2, #16
 8006252:	4013      	ands	r3, r2
 8006254:	d002      	beq.n	800625c <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006256:	4b4b      	ldr	r3, [pc, #300]	; (8006384 <UART_SetConfig+0x368>)
 8006258:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800625a:	e014      	b.n	8006286 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 800625c:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <UART_SetConfig+0x36c>)
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006260:	e011      	b.n	8006286 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006262:	f7ff fb9f 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 8006266:	0003      	movs	r3, r0
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800626a:	e00c      	b.n	8006286 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800626c:	2380      	movs	r3, #128	; 0x80
 800626e:	021b      	lsls	r3, r3, #8
 8006270:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006272:	e008      	b.n	8006286 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8006274:	2300      	movs	r3, #0
 8006276:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006278:	231a      	movs	r3, #26
 800627a:	2218      	movs	r2, #24
 800627c:	189b      	adds	r3, r3, r2
 800627e:	19db      	adds	r3, r3, r7
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
        break;
 8006284:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006288:	2b00      	cmp	r3, #0
 800628a:	d100      	bne.n	800628e <UART_SetConfig+0x272>
 800628c:	e133      	b.n	80064f6 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	0013      	movs	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	189b      	adds	r3, r3, r2
 8006298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800629a:	429a      	cmp	r2, r3
 800629c:	d305      	bcc.n	80062aa <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80062a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d906      	bls.n	80062b8 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 80062aa:	231a      	movs	r3, #26
 80062ac:	2218      	movs	r2, #24
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	19db      	adds	r3, r3, r7
 80062b2:	2201      	movs	r2, #1
 80062b4:	701a      	strb	r2, [r3, #0]
 80062b6:	e11e      	b.n	80064f6 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	2300      	movs	r3, #0
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	6939      	ldr	r1, [r7, #16]
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	000b      	movs	r3, r1
 80062c6:	0e1b      	lsrs	r3, r3, #24
 80062c8:	0010      	movs	r0, r2
 80062ca:	0205      	lsls	r5, r0, #8
 80062cc:	431d      	orrs	r5, r3
 80062ce:	000b      	movs	r3, r1
 80062d0:	021c      	lsls	r4, r3, #8
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	085b      	lsrs	r3, r3, #1
 80062d8:	60bb      	str	r3, [r7, #8]
 80062da:	2300      	movs	r3, #0
 80062dc:	60fb      	str	r3, [r7, #12]
 80062de:	68b8      	ldr	r0, [r7, #8]
 80062e0:	68f9      	ldr	r1, [r7, #12]
 80062e2:	1900      	adds	r0, r0, r4
 80062e4:	4169      	adcs	r1, r5
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	2300      	movs	r3, #0
 80062ee:	607b      	str	r3, [r7, #4]
 80062f0:	683a      	ldr	r2, [r7, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f7fa f912 	bl	800051c <__aeabi_uldivmod>
 80062f8:	0002      	movs	r2, r0
 80062fa:	000b      	movs	r3, r1
 80062fc:	0013      	movs	r3, r2
 80062fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006302:	23c0      	movs	r3, #192	; 0xc0
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	429a      	cmp	r2, r3
 8006308:	d309      	bcc.n	800631e <UART_SetConfig+0x302>
 800630a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	035b      	lsls	r3, r3, #13
 8006310:	429a      	cmp	r2, r3
 8006312:	d204      	bcs.n	800631e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800631a:	60da      	str	r2, [r3, #12]
 800631c:	e0eb      	b.n	80064f6 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 800631e:	231a      	movs	r3, #26
 8006320:	2218      	movs	r2, #24
 8006322:	189b      	adds	r3, r3, r2
 8006324:	19db      	adds	r3, r3, r7
 8006326:	2201      	movs	r2, #1
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	e0e4      	b.n	80064f6 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	69da      	ldr	r2, [r3, #28]
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	021b      	lsls	r3, r3, #8
 8006334:	429a      	cmp	r2, r3
 8006336:	d000      	beq.n	800633a <UART_SetConfig+0x31e>
 8006338:	e086      	b.n	8006448 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 800633a:	231b      	movs	r3, #27
 800633c:	2218      	movs	r2, #24
 800633e:	189b      	adds	r3, r3, r2
 8006340:	19db      	adds	r3, r3, r7
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b08      	cmp	r3, #8
 8006346:	d837      	bhi.n	80063b8 <UART_SetConfig+0x39c>
 8006348:	009a      	lsls	r2, r3, #2
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <UART_SetConfig+0x370>)
 800634c:	18d3      	adds	r3, r2, r3
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006352:	f7ff fbd7 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 8006356:	0003      	movs	r3, r0
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800635a:	e036      	b.n	80063ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800635c:	f7ff fbe8 	bl	8005b30 <HAL_RCC_GetPCLK2Freq>
 8006360:	0003      	movs	r3, r0
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006364:	e031      	b.n	80063ca <UART_SetConfig+0x3ae>
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	efff69f3 	.word	0xefff69f3
 800636c:	ffffcfff 	.word	0xffffcfff
 8006370:	40004800 	.word	0x40004800
 8006374:	fffff4ff 	.word	0xfffff4ff
 8006378:	40013800 	.word	0x40013800
 800637c:	40021000 	.word	0x40021000
 8006380:	40004400 	.word	0x40004400
 8006384:	003d0900 	.word	0x003d0900
 8006388:	00f42400 	.word	0x00f42400
 800638c:	08009bd8 	.word	0x08009bd8
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006390:	4b60      	ldr	r3, [pc, #384]	; (8006514 <UART_SetConfig+0x4f8>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2210      	movs	r2, #16
 8006396:	4013      	ands	r3, r2
 8006398:	d002      	beq.n	80063a0 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800639a:	4b5f      	ldr	r3, [pc, #380]	; (8006518 <UART_SetConfig+0x4fc>)
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800639e:	e014      	b.n	80063ca <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 80063a0:	4b5e      	ldr	r3, [pc, #376]	; (800651c <UART_SetConfig+0x500>)
 80063a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063a4:	e011      	b.n	80063ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a6:	f7ff fafd 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 80063aa:	0003      	movs	r3, r0
 80063ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ae:	e00c      	b.n	80063ca <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b0:	2380      	movs	r3, #128	; 0x80
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063b6:	e008      	b.n	80063ca <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063bc:	231a      	movs	r3, #26
 80063be:	2218      	movs	r2, #24
 80063c0:	189b      	adds	r3, r3, r2
 80063c2:	19db      	adds	r3, r3, r7
 80063c4:	2201      	movs	r2, #1
 80063c6:	701a      	strb	r2, [r3, #0]
        break;
 80063c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d100      	bne.n	80063d2 <UART_SetConfig+0x3b6>
 80063d0:	e091      	b.n	80064f6 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	005a      	lsls	r2, r3, #1
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	085b      	lsrs	r3, r3, #1
 80063dc:	18d2      	adds	r2, r2, r3
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	0019      	movs	r1, r3
 80063e4:	0010      	movs	r0, r2
 80063e6:	f7f9 feab 	bl	8000140 <__udivsi3>
 80063ea:	0003      	movs	r3, r0
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f2:	2b0f      	cmp	r3, #15
 80063f4:	d921      	bls.n	800643a <UART_SetConfig+0x41e>
 80063f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	025b      	lsls	r3, r3, #9
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d21c      	bcs.n	800643a <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006402:	b29a      	uxth	r2, r3
 8006404:	200e      	movs	r0, #14
 8006406:	2418      	movs	r4, #24
 8006408:	1903      	adds	r3, r0, r4
 800640a:	19db      	adds	r3, r3, r7
 800640c:	210f      	movs	r1, #15
 800640e:	438a      	bics	r2, r1
 8006410:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006414:	085b      	lsrs	r3, r3, #1
 8006416:	b29b      	uxth	r3, r3
 8006418:	2207      	movs	r2, #7
 800641a:	4013      	ands	r3, r2
 800641c:	b299      	uxth	r1, r3
 800641e:	1903      	adds	r3, r0, r4
 8006420:	19db      	adds	r3, r3, r7
 8006422:	1902      	adds	r2, r0, r4
 8006424:	19d2      	adds	r2, r2, r7
 8006426:	8812      	ldrh	r2, [r2, #0]
 8006428:	430a      	orrs	r2, r1
 800642a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	1902      	adds	r2, r0, r4
 8006432:	19d2      	adds	r2, r2, r7
 8006434:	8812      	ldrh	r2, [r2, #0]
 8006436:	60da      	str	r2, [r3, #12]
 8006438:	e05d      	b.n	80064f6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 800643a:	231a      	movs	r3, #26
 800643c:	2218      	movs	r2, #24
 800643e:	189b      	adds	r3, r3, r2
 8006440:	19db      	adds	r3, r3, r7
 8006442:	2201      	movs	r2, #1
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	e056      	b.n	80064f6 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006448:	231b      	movs	r3, #27
 800644a:	2218      	movs	r2, #24
 800644c:	189b      	adds	r3, r3, r2
 800644e:	19db      	adds	r3, r3, r7
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b08      	cmp	r3, #8
 8006454:	d822      	bhi.n	800649c <UART_SetConfig+0x480>
 8006456:	009a      	lsls	r2, r3, #2
 8006458:	4b31      	ldr	r3, [pc, #196]	; (8006520 <UART_SetConfig+0x504>)
 800645a:	18d3      	adds	r3, r2, r3
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7ff fb50 	bl	8005b04 <HAL_RCC_GetPCLK1Freq>
 8006464:	0003      	movs	r3, r0
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006468:	e021      	b.n	80064ae <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800646a:	f7ff fb61 	bl	8005b30 <HAL_RCC_GetPCLK2Freq>
 800646e:	0003      	movs	r3, r0
 8006470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006472:	e01c      	b.n	80064ae <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006474:	4b27      	ldr	r3, [pc, #156]	; (8006514 <UART_SetConfig+0x4f8>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2210      	movs	r2, #16
 800647a:	4013      	ands	r3, r2
 800647c:	d002      	beq.n	8006484 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800647e:	4b26      	ldr	r3, [pc, #152]	; (8006518 <UART_SetConfig+0x4fc>)
 8006480:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006482:	e014      	b.n	80064ae <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8006484:	4b25      	ldr	r3, [pc, #148]	; (800651c <UART_SetConfig+0x500>)
 8006486:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006488:	e011      	b.n	80064ae <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800648a:	f7ff fa8b 	bl	80059a4 <HAL_RCC_GetSysClockFreq>
 800648e:	0003      	movs	r3, r0
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006492:	e00c      	b.n	80064ae <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006494:	2380      	movs	r3, #128	; 0x80
 8006496:	021b      	lsls	r3, r3, #8
 8006498:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800649a:	e008      	b.n	80064ae <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 800649c:	2300      	movs	r3, #0
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80064a0:	231a      	movs	r3, #26
 80064a2:	2218      	movs	r2, #24
 80064a4:	189b      	adds	r3, r3, r2
 80064a6:	19db      	adds	r3, r3, r7
 80064a8:	2201      	movs	r2, #1
 80064aa:	701a      	strb	r2, [r3, #0]
        break;
 80064ac:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d020      	beq.n	80064f6 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	085a      	lsrs	r2, r3, #1
 80064ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064bc:	18d2      	adds	r2, r2, r3
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	0019      	movs	r1, r3
 80064c4:	0010      	movs	r0, r2
 80064c6:	f7f9 fe3b 	bl	8000140 <__udivsi3>
 80064ca:	0003      	movs	r3, r0
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	2b0f      	cmp	r3, #15
 80064d4:	d909      	bls.n	80064ea <UART_SetConfig+0x4ce>
 80064d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064d8:	2380      	movs	r3, #128	; 0x80
 80064da:	025b      	lsls	r3, r3, #9
 80064dc:	429a      	cmp	r2, r3
 80064de:	d204      	bcs.n	80064ea <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 80064e0:	69fb      	ldr	r3, [r7, #28]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064e6:	60da      	str	r2, [r3, #12]
 80064e8:	e005      	b.n	80064f6 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 80064ea:	231a      	movs	r3, #26
 80064ec:	2218      	movs	r2, #24
 80064ee:	189b      	adds	r3, r3, r2
 80064f0:	19db      	adds	r3, r3, r7
 80064f2:	2201      	movs	r2, #1
 80064f4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	2200      	movs	r2, #0
 80064fa:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2200      	movs	r2, #0
 8006500:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006502:	231a      	movs	r3, #26
 8006504:	2218      	movs	r2, #24
 8006506:	189b      	adds	r3, r3, r2
 8006508:	19db      	adds	r3, r3, r7
 800650a:	781b      	ldrb	r3, [r3, #0]
}
 800650c:	0018      	movs	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	b00e      	add	sp, #56	; 0x38
 8006512:	bdb0      	pop	{r4, r5, r7, pc}
 8006514:	40021000 	.word	0x40021000
 8006518:	003d0900 	.word	0x003d0900
 800651c:	00f42400 	.word	0x00f42400
 8006520:	08009bfc 	.word	0x08009bfc

08006524 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006530:	2201      	movs	r2, #1
 8006532:	4013      	ands	r3, r2
 8006534:	d00b      	beq.n	800654e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	4a4a      	ldr	r2, [pc, #296]	; (8006668 <UART_AdvFeatureConfig+0x144>)
 800653e:	4013      	ands	r3, r2
 8006540:	0019      	movs	r1, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	2202      	movs	r2, #2
 8006554:	4013      	ands	r3, r2
 8006556:	d00b      	beq.n	8006570 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	4a43      	ldr	r2, [pc, #268]	; (800666c <UART_AdvFeatureConfig+0x148>)
 8006560:	4013      	ands	r3, r2
 8006562:	0019      	movs	r1, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006574:	2204      	movs	r2, #4
 8006576:	4013      	ands	r3, r2
 8006578:	d00b      	beq.n	8006592 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a3b      	ldr	r2, [pc, #236]	; (8006670 <UART_AdvFeatureConfig+0x14c>)
 8006582:	4013      	ands	r3, r2
 8006584:	0019      	movs	r1, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	430a      	orrs	r2, r1
 8006590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006596:	2208      	movs	r2, #8
 8006598:	4013      	ands	r3, r2
 800659a:	d00b      	beq.n	80065b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	4a34      	ldr	r2, [pc, #208]	; (8006674 <UART_AdvFeatureConfig+0x150>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	0019      	movs	r1, r3
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b8:	2210      	movs	r2, #16
 80065ba:	4013      	ands	r3, r2
 80065bc:	d00b      	beq.n	80065d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	4a2c      	ldr	r2, [pc, #176]	; (8006678 <UART_AdvFeatureConfig+0x154>)
 80065c6:	4013      	ands	r3, r2
 80065c8:	0019      	movs	r1, r3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	430a      	orrs	r2, r1
 80065d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	2220      	movs	r2, #32
 80065dc:	4013      	ands	r3, r2
 80065de:	d00b      	beq.n	80065f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4a25      	ldr	r2, [pc, #148]	; (800667c <UART_AdvFeatureConfig+0x158>)
 80065e8:	4013      	ands	r3, r2
 80065ea:	0019      	movs	r1, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2240      	movs	r2, #64	; 0x40
 80065fe:	4013      	ands	r3, r2
 8006600:	d01d      	beq.n	800663e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4a1d      	ldr	r2, [pc, #116]	; (8006680 <UART_AdvFeatureConfig+0x15c>)
 800660a:	4013      	ands	r3, r2
 800660c:	0019      	movs	r1, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800661e:	2380      	movs	r3, #128	; 0x80
 8006620:	035b      	lsls	r3, r3, #13
 8006622:	429a      	cmp	r2, r3
 8006624:	d10b      	bne.n	800663e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	4a15      	ldr	r2, [pc, #84]	; (8006684 <UART_AdvFeatureConfig+0x160>)
 800662e:	4013      	ands	r3, r2
 8006630:	0019      	movs	r1, r3
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	2280      	movs	r2, #128	; 0x80
 8006644:	4013      	ands	r3, r2
 8006646:	d00b      	beq.n	8006660 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	4a0e      	ldr	r2, [pc, #56]	; (8006688 <UART_AdvFeatureConfig+0x164>)
 8006650:	4013      	ands	r3, r2
 8006652:	0019      	movs	r1, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	430a      	orrs	r2, r1
 800665e:	605a      	str	r2, [r3, #4]
  }
}
 8006660:	46c0      	nop			; (mov r8, r8)
 8006662:	46bd      	mov	sp, r7
 8006664:	b002      	add	sp, #8
 8006666:	bd80      	pop	{r7, pc}
 8006668:	fffdffff 	.word	0xfffdffff
 800666c:	fffeffff 	.word	0xfffeffff
 8006670:	fffbffff 	.word	0xfffbffff
 8006674:	ffff7fff 	.word	0xffff7fff
 8006678:	ffffefff 	.word	0xffffefff
 800667c:	ffffdfff 	.word	0xffffdfff
 8006680:	ffefffff 	.word	0xffefffff
 8006684:	ff9fffff 	.word	0xff9fffff
 8006688:	fff7ffff 	.word	0xfff7ffff

0800668c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af02      	add	r7, sp, #8
 8006692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2280      	movs	r2, #128	; 0x80
 8006698:	2100      	movs	r1, #0
 800669a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800669c:	f7fd fc3c 	bl	8003f18 <HAL_GetTick>
 80066a0:	0003      	movs	r3, r0
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2208      	movs	r2, #8
 80066ac:	4013      	ands	r3, r2
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d10c      	bne.n	80066cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2280      	movs	r2, #128	; 0x80
 80066b6:	0391      	lsls	r1, r2, #14
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4a17      	ldr	r2, [pc, #92]	; (8006718 <UART_CheckIdleState+0x8c>)
 80066bc:	9200      	str	r2, [sp, #0]
 80066be:	2200      	movs	r2, #0
 80066c0:	f000 f82c 	bl	800671c <UART_WaitOnFlagUntilTimeout>
 80066c4:	1e03      	subs	r3, r0, #0
 80066c6:	d001      	beq.n	80066cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066c8:	2303      	movs	r3, #3
 80066ca:	e021      	b.n	8006710 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2204      	movs	r2, #4
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	d10c      	bne.n	80066f4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2280      	movs	r2, #128	; 0x80
 80066de:	03d1      	lsls	r1, r2, #15
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4a0d      	ldr	r2, [pc, #52]	; (8006718 <UART_CheckIdleState+0x8c>)
 80066e4:	9200      	str	r2, [sp, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f000 f818 	bl	800671c <UART_WaitOnFlagUntilTimeout>
 80066ec:	1e03      	subs	r3, r0, #0
 80066ee:	d001      	beq.n	80066f4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e00d      	b.n	8006710 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2220      	movs	r2, #32
 80066f8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2220      	movs	r2, #32
 80066fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2274      	movs	r2, #116	; 0x74
 800670a:	2100      	movs	r1, #0
 800670c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}
 8006718:	01ffffff 	.word	0x01ffffff

0800671c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b094      	sub	sp, #80	; 0x50
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	603b      	str	r3, [r7, #0]
 8006728:	1dfb      	adds	r3, r7, #7
 800672a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800672c:	e0a3      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006730:	3301      	adds	r3, #1
 8006732:	d100      	bne.n	8006736 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006734:	e09f      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006736:	f7fd fbef 	bl	8003f18 <HAL_GetTick>
 800673a:	0002      	movs	r2, r0
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006742:	429a      	cmp	r2, r3
 8006744:	d302      	bcc.n	800674c <UART_WaitOnFlagUntilTimeout+0x30>
 8006746:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006748:	2b00      	cmp	r3, #0
 800674a:	d13d      	bne.n	80067c8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006754:	647b      	str	r3, [r7, #68]	; 0x44
 8006756:	2301      	movs	r3, #1
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	494c      	ldr	r1, [pc, #304]	; (80068a0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800676e:	400a      	ands	r2, r1
 8006770:	601a      	str	r2, [r3, #0]
 8006772:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006774:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006778:	f383 8810 	msr	PRIMASK, r3
}
 800677c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800677e:	f3ef 8310 	mrs	r3, PRIMASK
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006786:	643b      	str	r3, [r7, #64]	; 0x40
 8006788:	2301      	movs	r3, #1
 800678a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800678e:	f383 8810 	msr	PRIMASK, r3
}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2101      	movs	r1, #1
 80067a0:	438a      	bics	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067aa:	f383 8810 	msr	PRIMASK, r3
}
 80067ae:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2220      	movs	r2, #32
 80067b4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2220      	movs	r2, #32
 80067ba:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2274      	movs	r2, #116	; 0x74
 80067c0:	2100      	movs	r1, #0
 80067c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e067      	b.n	8006898 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2204      	movs	r2, #4
 80067d0:	4013      	ands	r3, r2
 80067d2:	d050      	beq.n	8006876 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	69da      	ldr	r2, [r3, #28]
 80067da:	2380      	movs	r3, #128	; 0x80
 80067dc:	011b      	lsls	r3, r3, #4
 80067de:	401a      	ands	r2, r3
 80067e0:	2380      	movs	r3, #128	; 0x80
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d146      	bne.n	8006876 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2280      	movs	r2, #128	; 0x80
 80067ee:	0112      	lsls	r2, r2, #4
 80067f0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f2:	f3ef 8310 	mrs	r3, PRIMASK
 80067f6:	613b      	str	r3, [r7, #16]
  return(result);
 80067f8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067fc:	2301      	movs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f383 8810 	msr	PRIMASK, r3
}
 8006806:	46c0      	nop			; (mov r8, r8)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4923      	ldr	r1, [pc, #140]	; (80068a0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006814:	400a      	ands	r2, r1
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800681a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f383 8810 	msr	PRIMASK, r3
}
 8006822:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006824:	f3ef 8310 	mrs	r3, PRIMASK
 8006828:	61fb      	str	r3, [r7, #28]
  return(result);
 800682a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682c:	64bb      	str	r3, [r7, #72]	; 0x48
 800682e:	2301      	movs	r3, #1
 8006830:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006832:	6a3b      	ldr	r3, [r7, #32]
 8006834:	f383 8810 	msr	PRIMASK, r3
}
 8006838:	46c0      	nop			; (mov r8, r8)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	689a      	ldr	r2, [r3, #8]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2101      	movs	r1, #1
 8006846:	438a      	bics	r2, r1
 8006848:	609a      	str	r2, [r3, #8]
 800684a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	f383 8810 	msr	PRIMASK, r3
}
 8006854:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2220      	movs	r2, #32
 8006860:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2280      	movs	r2, #128	; 0x80
 8006866:	2120      	movs	r1, #32
 8006868:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2274      	movs	r2, #116	; 0x74
 800686e:	2100      	movs	r1, #0
 8006870:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e010      	b.n	8006898 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69db      	ldr	r3, [r3, #28]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	4013      	ands	r3, r2
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	425a      	negs	r2, r3
 8006886:	4153      	adcs	r3, r2
 8006888:	b2db      	uxtb	r3, r3
 800688a:	001a      	movs	r2, r3
 800688c:	1dfb      	adds	r3, r7, #7
 800688e:	781b      	ldrb	r3, [r3, #0]
 8006890:	429a      	cmp	r2, r3
 8006892:	d100      	bne.n	8006896 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006894:	e74b      	b.n	800672e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	0018      	movs	r0, r3
 800689a:	46bd      	mov	sp, r7
 800689c:	b014      	add	sp, #80	; 0x50
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	fffffe5f 	.word	0xfffffe5f

080068a4 <__errno>:
 80068a4:	4b01      	ldr	r3, [pc, #4]	; (80068ac <__errno+0x8>)
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	4770      	bx	lr
 80068aa:	46c0      	nop			; (mov r8, r8)
 80068ac:	2000000c 	.word	0x2000000c

080068b0 <__libc_init_array>:
 80068b0:	b570      	push	{r4, r5, r6, lr}
 80068b2:	2600      	movs	r6, #0
 80068b4:	4d0c      	ldr	r5, [pc, #48]	; (80068e8 <__libc_init_array+0x38>)
 80068b6:	4c0d      	ldr	r4, [pc, #52]	; (80068ec <__libc_init_array+0x3c>)
 80068b8:	1b64      	subs	r4, r4, r5
 80068ba:	10a4      	asrs	r4, r4, #2
 80068bc:	42a6      	cmp	r6, r4
 80068be:	d109      	bne.n	80068d4 <__libc_init_array+0x24>
 80068c0:	2600      	movs	r6, #0
 80068c2:	f003 f877 	bl	80099b4 <_init>
 80068c6:	4d0a      	ldr	r5, [pc, #40]	; (80068f0 <__libc_init_array+0x40>)
 80068c8:	4c0a      	ldr	r4, [pc, #40]	; (80068f4 <__libc_init_array+0x44>)
 80068ca:	1b64      	subs	r4, r4, r5
 80068cc:	10a4      	asrs	r4, r4, #2
 80068ce:	42a6      	cmp	r6, r4
 80068d0:	d105      	bne.n	80068de <__libc_init_array+0x2e>
 80068d2:	bd70      	pop	{r4, r5, r6, pc}
 80068d4:	00b3      	lsls	r3, r6, #2
 80068d6:	58eb      	ldr	r3, [r5, r3]
 80068d8:	4798      	blx	r3
 80068da:	3601      	adds	r6, #1
 80068dc:	e7ee      	b.n	80068bc <__libc_init_array+0xc>
 80068de:	00b3      	lsls	r3, r6, #2
 80068e0:	58eb      	ldr	r3, [r5, r3]
 80068e2:	4798      	blx	r3
 80068e4:	3601      	adds	r6, #1
 80068e6:	e7f2      	b.n	80068ce <__libc_init_array+0x1e>
 80068e8:	0800a03c 	.word	0x0800a03c
 80068ec:	0800a03c 	.word	0x0800a03c
 80068f0:	0800a03c 	.word	0x0800a03c
 80068f4:	0800a040 	.word	0x0800a040

080068f8 <memset>:
 80068f8:	0003      	movs	r3, r0
 80068fa:	1882      	adds	r2, r0, r2
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d100      	bne.n	8006902 <memset+0xa>
 8006900:	4770      	bx	lr
 8006902:	7019      	strb	r1, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	e7f9      	b.n	80068fc <memset+0x4>

08006908 <__cvt>:
 8006908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800690a:	001e      	movs	r6, r3
 800690c:	2300      	movs	r3, #0
 800690e:	0014      	movs	r4, r2
 8006910:	b08b      	sub	sp, #44	; 0x2c
 8006912:	429e      	cmp	r6, r3
 8006914:	da04      	bge.n	8006920 <__cvt+0x18>
 8006916:	2180      	movs	r1, #128	; 0x80
 8006918:	0609      	lsls	r1, r1, #24
 800691a:	1873      	adds	r3, r6, r1
 800691c:	001e      	movs	r6, r3
 800691e:	232d      	movs	r3, #45	; 0x2d
 8006920:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006922:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006924:	7013      	strb	r3, [r2, #0]
 8006926:	2320      	movs	r3, #32
 8006928:	2203      	movs	r2, #3
 800692a:	439f      	bics	r7, r3
 800692c:	2f46      	cmp	r7, #70	; 0x46
 800692e:	d007      	beq.n	8006940 <__cvt+0x38>
 8006930:	003b      	movs	r3, r7
 8006932:	3b45      	subs	r3, #69	; 0x45
 8006934:	4259      	negs	r1, r3
 8006936:	414b      	adcs	r3, r1
 8006938:	9910      	ldr	r1, [sp, #64]	; 0x40
 800693a:	3a01      	subs	r2, #1
 800693c:	18cb      	adds	r3, r1, r3
 800693e:	9310      	str	r3, [sp, #64]	; 0x40
 8006940:	ab09      	add	r3, sp, #36	; 0x24
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	ab08      	add	r3, sp, #32
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800694a:	9200      	str	r2, [sp, #0]
 800694c:	9302      	str	r3, [sp, #8]
 800694e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006950:	0022      	movs	r2, r4
 8006952:	9301      	str	r3, [sp, #4]
 8006954:	0033      	movs	r3, r6
 8006956:	f000 fceb 	bl	8007330 <_dtoa_r>
 800695a:	0005      	movs	r5, r0
 800695c:	2f47      	cmp	r7, #71	; 0x47
 800695e:	d102      	bne.n	8006966 <__cvt+0x5e>
 8006960:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006962:	07db      	lsls	r3, r3, #31
 8006964:	d528      	bpl.n	80069b8 <__cvt+0xb0>
 8006966:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006968:	18eb      	adds	r3, r5, r3
 800696a:	9307      	str	r3, [sp, #28]
 800696c:	2f46      	cmp	r7, #70	; 0x46
 800696e:	d114      	bne.n	800699a <__cvt+0x92>
 8006970:	782b      	ldrb	r3, [r5, #0]
 8006972:	2b30      	cmp	r3, #48	; 0x30
 8006974:	d10c      	bne.n	8006990 <__cvt+0x88>
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	0020      	movs	r0, r4
 800697c:	0031      	movs	r1, r6
 800697e:	f7f9 fd65 	bl	800044c <__aeabi_dcmpeq>
 8006982:	2800      	cmp	r0, #0
 8006984:	d104      	bne.n	8006990 <__cvt+0x88>
 8006986:	2301      	movs	r3, #1
 8006988:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800698a:	1a9b      	subs	r3, r3, r2
 800698c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006992:	9a07      	ldr	r2, [sp, #28]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	18d3      	adds	r3, r2, r3
 8006998:	9307      	str	r3, [sp, #28]
 800699a:	2200      	movs	r2, #0
 800699c:	2300      	movs	r3, #0
 800699e:	0020      	movs	r0, r4
 80069a0:	0031      	movs	r1, r6
 80069a2:	f7f9 fd53 	bl	800044c <__aeabi_dcmpeq>
 80069a6:	2800      	cmp	r0, #0
 80069a8:	d001      	beq.n	80069ae <__cvt+0xa6>
 80069aa:	9b07      	ldr	r3, [sp, #28]
 80069ac:	9309      	str	r3, [sp, #36]	; 0x24
 80069ae:	2230      	movs	r2, #48	; 0x30
 80069b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b2:	9907      	ldr	r1, [sp, #28]
 80069b4:	428b      	cmp	r3, r1
 80069b6:	d306      	bcc.n	80069c6 <__cvt+0xbe>
 80069b8:	0028      	movs	r0, r5
 80069ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069bc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069be:	1b5b      	subs	r3, r3, r5
 80069c0:	6013      	str	r3, [r2, #0]
 80069c2:	b00b      	add	sp, #44	; 0x2c
 80069c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c6:	1c59      	adds	r1, r3, #1
 80069c8:	9109      	str	r1, [sp, #36]	; 0x24
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e7f0      	b.n	80069b0 <__cvt+0xa8>

080069ce <__exponent>:
 80069ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069d0:	1c83      	adds	r3, r0, #2
 80069d2:	b087      	sub	sp, #28
 80069d4:	9303      	str	r3, [sp, #12]
 80069d6:	0005      	movs	r5, r0
 80069d8:	000c      	movs	r4, r1
 80069da:	232b      	movs	r3, #43	; 0x2b
 80069dc:	7002      	strb	r2, [r0, #0]
 80069de:	2900      	cmp	r1, #0
 80069e0:	da01      	bge.n	80069e6 <__exponent+0x18>
 80069e2:	424c      	negs	r4, r1
 80069e4:	3302      	adds	r3, #2
 80069e6:	706b      	strb	r3, [r5, #1]
 80069e8:	2c09      	cmp	r4, #9
 80069ea:	dd31      	ble.n	8006a50 <__exponent+0x82>
 80069ec:	270a      	movs	r7, #10
 80069ee:	ab04      	add	r3, sp, #16
 80069f0:	1dde      	adds	r6, r3, #7
 80069f2:	0020      	movs	r0, r4
 80069f4:	0039      	movs	r1, r7
 80069f6:	9601      	str	r6, [sp, #4]
 80069f8:	f7f9 fd12 	bl	8000420 <__aeabi_idivmod>
 80069fc:	3e01      	subs	r6, #1
 80069fe:	3130      	adds	r1, #48	; 0x30
 8006a00:	0020      	movs	r0, r4
 8006a02:	7031      	strb	r1, [r6, #0]
 8006a04:	0039      	movs	r1, r7
 8006a06:	9402      	str	r4, [sp, #8]
 8006a08:	f7f9 fc24 	bl	8000254 <__divsi3>
 8006a0c:	9b02      	ldr	r3, [sp, #8]
 8006a0e:	0004      	movs	r4, r0
 8006a10:	2b63      	cmp	r3, #99	; 0x63
 8006a12:	dcee      	bgt.n	80069f2 <__exponent+0x24>
 8006a14:	9b01      	ldr	r3, [sp, #4]
 8006a16:	3430      	adds	r4, #48	; 0x30
 8006a18:	1e9a      	subs	r2, r3, #2
 8006a1a:	0013      	movs	r3, r2
 8006a1c:	9903      	ldr	r1, [sp, #12]
 8006a1e:	7014      	strb	r4, [r2, #0]
 8006a20:	a804      	add	r0, sp, #16
 8006a22:	3007      	adds	r0, #7
 8006a24:	4298      	cmp	r0, r3
 8006a26:	d80e      	bhi.n	8006a46 <__exponent+0x78>
 8006a28:	ab04      	add	r3, sp, #16
 8006a2a:	3307      	adds	r3, #7
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d804      	bhi.n	8006a3c <__exponent+0x6e>
 8006a32:	ab04      	add	r3, sp, #16
 8006a34:	3009      	adds	r0, #9
 8006a36:	18c0      	adds	r0, r0, r3
 8006a38:	9b01      	ldr	r3, [sp, #4]
 8006a3a:	1ac0      	subs	r0, r0, r3
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	1818      	adds	r0, r3, r0
 8006a40:	1b40      	subs	r0, r0, r5
 8006a42:	b007      	add	sp, #28
 8006a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a46:	7818      	ldrb	r0, [r3, #0]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	7008      	strb	r0, [r1, #0]
 8006a4c:	3101      	adds	r1, #1
 8006a4e:	e7e7      	b.n	8006a20 <__exponent+0x52>
 8006a50:	2330      	movs	r3, #48	; 0x30
 8006a52:	18e4      	adds	r4, r4, r3
 8006a54:	70ab      	strb	r3, [r5, #2]
 8006a56:	1d28      	adds	r0, r5, #4
 8006a58:	70ec      	strb	r4, [r5, #3]
 8006a5a:	e7f1      	b.n	8006a40 <__exponent+0x72>

08006a5c <_printf_float>:
 8006a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5e:	b095      	sub	sp, #84	; 0x54
 8006a60:	000c      	movs	r4, r1
 8006a62:	9209      	str	r2, [sp, #36]	; 0x24
 8006a64:	001e      	movs	r6, r3
 8006a66:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8006a68:	0007      	movs	r7, r0
 8006a6a:	f001 fb7d 	bl	8008168 <_localeconv_r>
 8006a6e:	6803      	ldr	r3, [r0, #0]
 8006a70:	0018      	movs	r0, r3
 8006a72:	930c      	str	r3, [sp, #48]	; 0x30
 8006a74:	f7f9 fb48 	bl	8000108 <strlen>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	9312      	str	r3, [sp, #72]	; 0x48
 8006a7c:	7e23      	ldrb	r3, [r4, #24]
 8006a7e:	2207      	movs	r2, #7
 8006a80:	930a      	str	r3, [sp, #40]	; 0x28
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	900e      	str	r0, [sp, #56]	; 0x38
 8006a86:	930d      	str	r3, [sp, #52]	; 0x34
 8006a88:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006a8a:	682b      	ldr	r3, [r5, #0]
 8006a8c:	05c9      	lsls	r1, r1, #23
 8006a8e:	d547      	bpl.n	8006b20 <_printf_float+0xc4>
 8006a90:	189b      	adds	r3, r3, r2
 8006a92:	4393      	bics	r3, r2
 8006a94:	001a      	movs	r2, r3
 8006a96:	3208      	adds	r2, #8
 8006a98:	602a      	str	r2, [r5, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	64a2      	str	r2, [r4, #72]	; 0x48
 8006aa0:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006aa6:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006aa8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006aaa:	006b      	lsls	r3, r5, #1
 8006aac:	085b      	lsrs	r3, r3, #1
 8006aae:	930f      	str	r3, [sp, #60]	; 0x3c
 8006ab0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ab2:	4ba7      	ldr	r3, [pc, #668]	; (8006d50 <_printf_float+0x2f4>)
 8006ab4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ab6:	4252      	negs	r2, r2
 8006ab8:	f7fc fa2e 	bl	8002f18 <__aeabi_dcmpun>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	d131      	bne.n	8006b24 <_printf_float+0xc8>
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4ba3      	ldr	r3, [pc, #652]	; (8006d50 <_printf_float+0x2f4>)
 8006ac4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ac6:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ac8:	4252      	negs	r2, r2
 8006aca:	f7f9 fccf 	bl	800046c <__aeabi_dcmple>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d128      	bne.n	8006b24 <_printf_float+0xc8>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	0029      	movs	r1, r5
 8006ad8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006ada:	f7f9 fcbd 	bl	8000458 <__aeabi_dcmplt>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d003      	beq.n	8006aea <_printf_float+0x8e>
 8006ae2:	0023      	movs	r3, r4
 8006ae4:	222d      	movs	r2, #45	; 0x2d
 8006ae6:	3343      	adds	r3, #67	; 0x43
 8006ae8:	701a      	strb	r2, [r3, #0]
 8006aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006aec:	4d99      	ldr	r5, [pc, #612]	; (8006d54 <_printf_float+0x2f8>)
 8006aee:	2b47      	cmp	r3, #71	; 0x47
 8006af0:	d900      	bls.n	8006af4 <_printf_float+0x98>
 8006af2:	4d99      	ldr	r5, [pc, #612]	; (8006d58 <_printf_float+0x2fc>)
 8006af4:	2303      	movs	r3, #3
 8006af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006af8:	6123      	str	r3, [r4, #16]
 8006afa:	3301      	adds	r3, #1
 8006afc:	439a      	bics	r2, r3
 8006afe:	2300      	movs	r3, #0
 8006b00:	6022      	str	r2, [r4, #0]
 8006b02:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b06:	0021      	movs	r1, r4
 8006b08:	0038      	movs	r0, r7
 8006b0a:	9600      	str	r6, [sp, #0]
 8006b0c:	aa13      	add	r2, sp, #76	; 0x4c
 8006b0e:	f000 f9e7 	bl	8006ee0 <_printf_common>
 8006b12:	1c43      	adds	r3, r0, #1
 8006b14:	d000      	beq.n	8006b18 <_printf_float+0xbc>
 8006b16:	e0a2      	b.n	8006c5e <_printf_float+0x202>
 8006b18:	2001      	movs	r0, #1
 8006b1a:	4240      	negs	r0, r0
 8006b1c:	b015      	add	sp, #84	; 0x54
 8006b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b20:	3307      	adds	r3, #7
 8006b22:	e7b6      	b.n	8006a92 <_printf_float+0x36>
 8006b24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b26:	002b      	movs	r3, r5
 8006b28:	0010      	movs	r0, r2
 8006b2a:	0029      	movs	r1, r5
 8006b2c:	f7fc f9f4 	bl	8002f18 <__aeabi_dcmpun>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	d00b      	beq.n	8006b4c <_printf_float+0xf0>
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	da03      	bge.n	8006b40 <_printf_float+0xe4>
 8006b38:	0023      	movs	r3, r4
 8006b3a:	222d      	movs	r2, #45	; 0x2d
 8006b3c:	3343      	adds	r3, #67	; 0x43
 8006b3e:	701a      	strb	r2, [r3, #0]
 8006b40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b42:	4d86      	ldr	r5, [pc, #536]	; (8006d5c <_printf_float+0x300>)
 8006b44:	2b47      	cmp	r3, #71	; 0x47
 8006b46:	d9d5      	bls.n	8006af4 <_printf_float+0x98>
 8006b48:	4d85      	ldr	r5, [pc, #532]	; (8006d60 <_printf_float+0x304>)
 8006b4a:	e7d3      	b.n	8006af4 <_printf_float+0x98>
 8006b4c:	2220      	movs	r2, #32
 8006b4e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006b50:	6863      	ldr	r3, [r4, #4]
 8006b52:	4391      	bics	r1, r2
 8006b54:	910f      	str	r1, [sp, #60]	; 0x3c
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	d149      	bne.n	8006bee <_printf_float+0x192>
 8006b5a:	3307      	adds	r3, #7
 8006b5c:	6063      	str	r3, [r4, #4]
 8006b5e:	2380      	movs	r3, #128	; 0x80
 8006b60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4313      	orrs	r3, r2
 8006b66:	2200      	movs	r2, #0
 8006b68:	9206      	str	r2, [sp, #24]
 8006b6a:	aa12      	add	r2, sp, #72	; 0x48
 8006b6c:	9205      	str	r2, [sp, #20]
 8006b6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b70:	a908      	add	r1, sp, #32
 8006b72:	9204      	str	r2, [sp, #16]
 8006b74:	aa11      	add	r2, sp, #68	; 0x44
 8006b76:	9203      	str	r2, [sp, #12]
 8006b78:	2223      	movs	r2, #35	; 0x23
 8006b7a:	6023      	str	r3, [r4, #0]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	6863      	ldr	r3, [r4, #4]
 8006b80:	1852      	adds	r2, r2, r1
 8006b82:	9202      	str	r2, [sp, #8]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	0038      	movs	r0, r7
 8006b88:	002b      	movs	r3, r5
 8006b8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006b8c:	f7ff febc 	bl	8006908 <__cvt>
 8006b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b92:	0005      	movs	r5, r0
 8006b94:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006b96:	2b47      	cmp	r3, #71	; 0x47
 8006b98:	d108      	bne.n	8006bac <_printf_float+0x150>
 8006b9a:	1ccb      	adds	r3, r1, #3
 8006b9c:	db02      	blt.n	8006ba4 <_printf_float+0x148>
 8006b9e:	6863      	ldr	r3, [r4, #4]
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	dd48      	ble.n	8006c36 <_printf_float+0x1da>
 8006ba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ba6:	3b02      	subs	r3, #2
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	930a      	str	r3, [sp, #40]	; 0x28
 8006bac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bae:	2b65      	cmp	r3, #101	; 0x65
 8006bb0:	d824      	bhi.n	8006bfc <_printf_float+0x1a0>
 8006bb2:	0020      	movs	r0, r4
 8006bb4:	001a      	movs	r2, r3
 8006bb6:	3901      	subs	r1, #1
 8006bb8:	3050      	adds	r0, #80	; 0x50
 8006bba:	9111      	str	r1, [sp, #68]	; 0x44
 8006bbc:	f7ff ff07 	bl	80069ce <__exponent>
 8006bc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006bc2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006bc4:	1813      	adds	r3, r2, r0
 8006bc6:	6123      	str	r3, [r4, #16]
 8006bc8:	2a01      	cmp	r2, #1
 8006bca:	dc02      	bgt.n	8006bd2 <_printf_float+0x176>
 8006bcc:	6822      	ldr	r2, [r4, #0]
 8006bce:	07d2      	lsls	r2, r2, #31
 8006bd0:	d501      	bpl.n	8006bd6 <_printf_float+0x17a>
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	6123      	str	r3, [r4, #16]
 8006bd6:	2323      	movs	r3, #35	; 0x23
 8006bd8:	aa08      	add	r2, sp, #32
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d100      	bne.n	8006be4 <_printf_float+0x188>
 8006be2:	e78f      	b.n	8006b04 <_printf_float+0xa8>
 8006be4:	0023      	movs	r3, r4
 8006be6:	222d      	movs	r2, #45	; 0x2d
 8006be8:	3343      	adds	r3, #67	; 0x43
 8006bea:	701a      	strb	r2, [r3, #0]
 8006bec:	e78a      	b.n	8006b04 <_printf_float+0xa8>
 8006bee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bf0:	2a47      	cmp	r2, #71	; 0x47
 8006bf2:	d1b4      	bne.n	8006b5e <_printf_float+0x102>
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1b2      	bne.n	8006b5e <_printf_float+0x102>
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	e7af      	b.n	8006b5c <_printf_float+0x100>
 8006bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bfe:	2b66      	cmp	r3, #102	; 0x66
 8006c00:	d11b      	bne.n	8006c3a <_printf_float+0x1de>
 8006c02:	6863      	ldr	r3, [r4, #4]
 8006c04:	2900      	cmp	r1, #0
 8006c06:	dd0d      	ble.n	8006c24 <_printf_float+0x1c8>
 8006c08:	6121      	str	r1, [r4, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <_printf_float+0x1b8>
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	07d2      	lsls	r2, r2, #31
 8006c12:	d502      	bpl.n	8006c1a <_printf_float+0x1be>
 8006c14:	3301      	adds	r3, #1
 8006c16:	1859      	adds	r1, r3, r1
 8006c18:	6121      	str	r1, [r4, #16]
 8006c1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c1c:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c1e:	2300      	movs	r3, #0
 8006c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c22:	e7d8      	b.n	8006bd6 <_printf_float+0x17a>
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d103      	bne.n	8006c30 <_printf_float+0x1d4>
 8006c28:	2201      	movs	r2, #1
 8006c2a:	6821      	ldr	r1, [r4, #0]
 8006c2c:	4211      	tst	r1, r2
 8006c2e:	d000      	beq.n	8006c32 <_printf_float+0x1d6>
 8006c30:	1c9a      	adds	r2, r3, #2
 8006c32:	6122      	str	r2, [r4, #16]
 8006c34:	e7f1      	b.n	8006c1a <_printf_float+0x1be>
 8006c36:	2367      	movs	r3, #103	; 0x67
 8006c38:	930a      	str	r3, [sp, #40]	; 0x28
 8006c3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	db06      	blt.n	8006c50 <_printf_float+0x1f4>
 8006c42:	6822      	ldr	r2, [r4, #0]
 8006c44:	6123      	str	r3, [r4, #16]
 8006c46:	07d2      	lsls	r2, r2, #31
 8006c48:	d5e7      	bpl.n	8006c1a <_printf_float+0x1be>
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	e7e4      	b.n	8006c1a <_printf_float+0x1be>
 8006c50:	2101      	movs	r1, #1
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	dc01      	bgt.n	8006c5a <_printf_float+0x1fe>
 8006c56:	1849      	adds	r1, r1, r1
 8006c58:	1ac9      	subs	r1, r1, r3
 8006c5a:	1852      	adds	r2, r2, r1
 8006c5c:	e7e9      	b.n	8006c32 <_printf_float+0x1d6>
 8006c5e:	6822      	ldr	r2, [r4, #0]
 8006c60:	0553      	lsls	r3, r2, #21
 8006c62:	d407      	bmi.n	8006c74 <_printf_float+0x218>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	002a      	movs	r2, r5
 8006c68:	0038      	movs	r0, r7
 8006c6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c6c:	47b0      	blx	r6
 8006c6e:	1c43      	adds	r3, r0, #1
 8006c70:	d128      	bne.n	8006cc4 <_printf_float+0x268>
 8006c72:	e751      	b.n	8006b18 <_printf_float+0xbc>
 8006c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c76:	2b65      	cmp	r3, #101	; 0x65
 8006c78:	d800      	bhi.n	8006c7c <_printf_float+0x220>
 8006c7a:	e0e1      	b.n	8006e40 <_printf_float+0x3e4>
 8006c7c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006c7e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006c80:	2200      	movs	r2, #0
 8006c82:	2300      	movs	r3, #0
 8006c84:	f7f9 fbe2 	bl	800044c <__aeabi_dcmpeq>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d031      	beq.n	8006cf0 <_printf_float+0x294>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	0038      	movs	r0, r7
 8006c90:	4a34      	ldr	r2, [pc, #208]	; (8006d64 <_printf_float+0x308>)
 8006c92:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c94:	47b0      	blx	r6
 8006c96:	1c43      	adds	r3, r0, #1
 8006c98:	d100      	bne.n	8006c9c <_printf_float+0x240>
 8006c9a:	e73d      	b.n	8006b18 <_printf_float+0xbc>
 8006c9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	db02      	blt.n	8006caa <_printf_float+0x24e>
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	07db      	lsls	r3, r3, #31
 8006ca8:	d50c      	bpl.n	8006cc4 <_printf_float+0x268>
 8006caa:	0038      	movs	r0, r7
 8006cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006cae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cb2:	47b0      	blx	r6
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	1c43      	adds	r3, r0, #1
 8006cb8:	d100      	bne.n	8006cbc <_printf_float+0x260>
 8006cba:	e72d      	b.n	8006b18 <_printf_float+0xbc>
 8006cbc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	42ab      	cmp	r3, r5
 8006cc2:	dc0a      	bgt.n	8006cda <_printf_float+0x27e>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	079b      	lsls	r3, r3, #30
 8006cc8:	d500      	bpl.n	8006ccc <_printf_float+0x270>
 8006cca:	e106      	b.n	8006eda <_printf_float+0x47e>
 8006ccc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006cce:	68e0      	ldr	r0, [r4, #12]
 8006cd0:	4298      	cmp	r0, r3
 8006cd2:	db00      	blt.n	8006cd6 <_printf_float+0x27a>
 8006cd4:	e722      	b.n	8006b1c <_printf_float+0xc0>
 8006cd6:	0018      	movs	r0, r3
 8006cd8:	e720      	b.n	8006b1c <_printf_float+0xc0>
 8006cda:	0022      	movs	r2, r4
 8006cdc:	2301      	movs	r3, #1
 8006cde:	0038      	movs	r0, r7
 8006ce0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ce2:	321a      	adds	r2, #26
 8006ce4:	47b0      	blx	r6
 8006ce6:	1c43      	adds	r3, r0, #1
 8006ce8:	d100      	bne.n	8006cec <_printf_float+0x290>
 8006cea:	e715      	b.n	8006b18 <_printf_float+0xbc>
 8006cec:	3501      	adds	r5, #1
 8006cee:	e7e5      	b.n	8006cbc <_printf_float+0x260>
 8006cf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	dc38      	bgt.n	8006d68 <_printf_float+0x30c>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	0038      	movs	r0, r7
 8006cfa:	4a1a      	ldr	r2, [pc, #104]	; (8006d64 <_printf_float+0x308>)
 8006cfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006cfe:	47b0      	blx	r6
 8006d00:	1c43      	adds	r3, r0, #1
 8006d02:	d100      	bne.n	8006d06 <_printf_float+0x2aa>
 8006d04:	e708      	b.n	8006b18 <_printf_float+0xbc>
 8006d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	d102      	bne.n	8006d14 <_printf_float+0x2b8>
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	07db      	lsls	r3, r3, #31
 8006d12:	d5d7      	bpl.n	8006cc4 <_printf_float+0x268>
 8006d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d16:	0038      	movs	r0, r7
 8006d18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d1c:	47b0      	blx	r6
 8006d1e:	1c43      	adds	r3, r0, #1
 8006d20:	d100      	bne.n	8006d24 <_printf_float+0x2c8>
 8006d22:	e6f9      	b.n	8006b18 <_printf_float+0xbc>
 8006d24:	2300      	movs	r3, #0
 8006d26:	930a      	str	r3, [sp, #40]	; 0x28
 8006d28:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d2c:	425b      	negs	r3, r3
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	dc01      	bgt.n	8006d36 <_printf_float+0x2da>
 8006d32:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d34:	e797      	b.n	8006c66 <_printf_float+0x20a>
 8006d36:	0022      	movs	r2, r4
 8006d38:	2301      	movs	r3, #1
 8006d3a:	0038      	movs	r0, r7
 8006d3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006d3e:	321a      	adds	r2, #26
 8006d40:	47b0      	blx	r6
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	d100      	bne.n	8006d48 <_printf_float+0x2ec>
 8006d46:	e6e7      	b.n	8006b18 <_printf_float+0xbc>
 8006d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	e7eb      	b.n	8006d26 <_printf_float+0x2ca>
 8006d4e:	46c0      	nop			; (mov r8, r8)
 8006d50:	7fefffff 	.word	0x7fefffff
 8006d54:	08009c24 	.word	0x08009c24
 8006d58:	08009c28 	.word	0x08009c28
 8006d5c:	08009c2c 	.word	0x08009c2c
 8006d60:	08009c30 	.word	0x08009c30
 8006d64:	08009c34 	.word	0x08009c34
 8006d68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d6c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	dd00      	ble.n	8006d74 <_printf_float+0x318>
 8006d72:	930a      	str	r3, [sp, #40]	; 0x28
 8006d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	dc3c      	bgt.n	8006df4 <_printf_float+0x398>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	930d      	str	r3, [sp, #52]	; 0x34
 8006d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d80:	43db      	mvns	r3, r3
 8006d82:	17db      	asrs	r3, r3, #31
 8006d84:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006d88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006d8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d8e:	4013      	ands	r3, r2
 8006d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d92:	1ad3      	subs	r3, r2, r3
 8006d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d96:	4293      	cmp	r3, r2
 8006d98:	dc34      	bgt.n	8006e04 <_printf_float+0x3a8>
 8006d9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	db3d      	blt.n	8006e1e <_printf_float+0x3c2>
 8006da2:	6823      	ldr	r3, [r4, #0]
 8006da4:	07db      	lsls	r3, r3, #31
 8006da6:	d43a      	bmi.n	8006e1e <_printf_float+0x3c2>
 8006da8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dac:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006dae:	1ad3      	subs	r3, r2, r3
 8006db0:	1a52      	subs	r2, r2, r1
 8006db2:	920a      	str	r2, [sp, #40]	; 0x28
 8006db4:	429a      	cmp	r2, r3
 8006db6:	dd00      	ble.n	8006dba <_printf_float+0x35e>
 8006db8:	930a      	str	r3, [sp, #40]	; 0x28
 8006dba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	dc36      	bgt.n	8006e2e <_printf_float+0x3d2>
 8006dc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dc2:	2500      	movs	r5, #0
 8006dc4:	43db      	mvns	r3, r3
 8006dc6:	17db      	asrs	r3, r3, #31
 8006dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006dca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dcc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dd0:	1a9b      	subs	r3, r3, r2
 8006dd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006dd4:	400a      	ands	r2, r1
 8006dd6:	1a9b      	subs	r3, r3, r2
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dc00      	bgt.n	8006dde <_printf_float+0x382>
 8006ddc:	e772      	b.n	8006cc4 <_printf_float+0x268>
 8006dde:	0022      	movs	r2, r4
 8006de0:	2301      	movs	r3, #1
 8006de2:	0038      	movs	r0, r7
 8006de4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006de6:	321a      	adds	r2, #26
 8006de8:	47b0      	blx	r6
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d100      	bne.n	8006df0 <_printf_float+0x394>
 8006dee:	e693      	b.n	8006b18 <_printf_float+0xbc>
 8006df0:	3501      	adds	r5, #1
 8006df2:	e7ea      	b.n	8006dca <_printf_float+0x36e>
 8006df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006df6:	002a      	movs	r2, r5
 8006df8:	0038      	movs	r0, r7
 8006dfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006dfc:	47b0      	blx	r6
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d1bb      	bne.n	8006d7a <_printf_float+0x31e>
 8006e02:	e689      	b.n	8006b18 <_printf_float+0xbc>
 8006e04:	0022      	movs	r2, r4
 8006e06:	2301      	movs	r3, #1
 8006e08:	0038      	movs	r0, r7
 8006e0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e0c:	321a      	adds	r2, #26
 8006e0e:	47b0      	blx	r6
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d100      	bne.n	8006e16 <_printf_float+0x3ba>
 8006e14:	e680      	b.n	8006b18 <_printf_float+0xbc>
 8006e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e18:	3301      	adds	r3, #1
 8006e1a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e1c:	e7b3      	b.n	8006d86 <_printf_float+0x32a>
 8006e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e20:	0038      	movs	r0, r7
 8006e22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e24:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e26:	47b0      	blx	r6
 8006e28:	1c43      	adds	r3, r0, #1
 8006e2a:	d1bd      	bne.n	8006da8 <_printf_float+0x34c>
 8006e2c:	e674      	b.n	8006b18 <_printf_float+0xbc>
 8006e2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006e30:	0038      	movs	r0, r7
 8006e32:	18ea      	adds	r2, r5, r3
 8006e34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e38:	47b0      	blx	r6
 8006e3a:	1c43      	adds	r3, r0, #1
 8006e3c:	d1c0      	bne.n	8006dc0 <_printf_float+0x364>
 8006e3e:	e66b      	b.n	8006b18 <_printf_float+0xbc>
 8006e40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e42:	2b01      	cmp	r3, #1
 8006e44:	dc02      	bgt.n	8006e4c <_printf_float+0x3f0>
 8006e46:	2301      	movs	r3, #1
 8006e48:	421a      	tst	r2, r3
 8006e4a:	d034      	beq.n	8006eb6 <_printf_float+0x45a>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	002a      	movs	r2, r5
 8006e50:	0038      	movs	r0, r7
 8006e52:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e54:	47b0      	blx	r6
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	d100      	bne.n	8006e5c <_printf_float+0x400>
 8006e5a:	e65d      	b.n	8006b18 <_printf_float+0xbc>
 8006e5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e5e:	0038      	movs	r0, r7
 8006e60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e62:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e64:	47b0      	blx	r6
 8006e66:	1c43      	adds	r3, r0, #1
 8006e68:	d100      	bne.n	8006e6c <_printf_float+0x410>
 8006e6a:	e655      	b.n	8006b18 <_printf_float+0xbc>
 8006e6c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006e6e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006e70:	2200      	movs	r2, #0
 8006e72:	2300      	movs	r3, #0
 8006e74:	f7f9 faea 	bl	800044c <__aeabi_dcmpeq>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d11a      	bne.n	8006eb2 <_printf_float+0x456>
 8006e7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006e7e:	1c6a      	adds	r2, r5, #1
 8006e80:	3b01      	subs	r3, #1
 8006e82:	0038      	movs	r0, r7
 8006e84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e86:	47b0      	blx	r6
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d10e      	bne.n	8006eaa <_printf_float+0x44e>
 8006e8c:	e644      	b.n	8006b18 <_printf_float+0xbc>
 8006e8e:	0022      	movs	r2, r4
 8006e90:	2301      	movs	r3, #1
 8006e92:	0038      	movs	r0, r7
 8006e94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e96:	321a      	adds	r2, #26
 8006e98:	47b0      	blx	r6
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	d100      	bne.n	8006ea0 <_printf_float+0x444>
 8006e9e:	e63b      	b.n	8006b18 <_printf_float+0xbc>
 8006ea0:	3501      	adds	r5, #1
 8006ea2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	42ab      	cmp	r3, r5
 8006ea8:	dcf1      	bgt.n	8006e8e <_printf_float+0x432>
 8006eaa:	0022      	movs	r2, r4
 8006eac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006eae:	3250      	adds	r2, #80	; 0x50
 8006eb0:	e6da      	b.n	8006c68 <_printf_float+0x20c>
 8006eb2:	2500      	movs	r5, #0
 8006eb4:	e7f5      	b.n	8006ea2 <_printf_float+0x446>
 8006eb6:	002a      	movs	r2, r5
 8006eb8:	e7e3      	b.n	8006e82 <_printf_float+0x426>
 8006eba:	0022      	movs	r2, r4
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	0038      	movs	r0, r7
 8006ec0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ec2:	3219      	adds	r2, #25
 8006ec4:	47b0      	blx	r6
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	d100      	bne.n	8006ecc <_printf_float+0x470>
 8006eca:	e625      	b.n	8006b18 <_printf_float+0xbc>
 8006ecc:	3501      	adds	r5, #1
 8006ece:	68e3      	ldr	r3, [r4, #12]
 8006ed0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006ed2:	1a9b      	subs	r3, r3, r2
 8006ed4:	42ab      	cmp	r3, r5
 8006ed6:	dcf0      	bgt.n	8006eba <_printf_float+0x45e>
 8006ed8:	e6f8      	b.n	8006ccc <_printf_float+0x270>
 8006eda:	2500      	movs	r5, #0
 8006edc:	e7f7      	b.n	8006ece <_printf_float+0x472>
 8006ede:	46c0      	nop			; (mov r8, r8)

08006ee0 <_printf_common>:
 8006ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee2:	0015      	movs	r5, r2
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	688a      	ldr	r2, [r1, #8]
 8006ee8:	690b      	ldr	r3, [r1, #16]
 8006eea:	000c      	movs	r4, r1
 8006eec:	9000      	str	r0, [sp, #0]
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	da00      	bge.n	8006ef4 <_printf_common+0x14>
 8006ef2:	0013      	movs	r3, r2
 8006ef4:	0022      	movs	r2, r4
 8006ef6:	602b      	str	r3, [r5, #0]
 8006ef8:	3243      	adds	r2, #67	; 0x43
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	2a00      	cmp	r2, #0
 8006efe:	d001      	beq.n	8006f04 <_printf_common+0x24>
 8006f00:	3301      	adds	r3, #1
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	069b      	lsls	r3, r3, #26
 8006f08:	d502      	bpl.n	8006f10 <_printf_common+0x30>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	3302      	adds	r3, #2
 8006f0e:	602b      	str	r3, [r5, #0]
 8006f10:	6822      	ldr	r2, [r4, #0]
 8006f12:	2306      	movs	r3, #6
 8006f14:	0017      	movs	r7, r2
 8006f16:	401f      	ands	r7, r3
 8006f18:	421a      	tst	r2, r3
 8006f1a:	d027      	beq.n	8006f6c <_printf_common+0x8c>
 8006f1c:	0023      	movs	r3, r4
 8006f1e:	3343      	adds	r3, #67	; 0x43
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	1e5a      	subs	r2, r3, #1
 8006f24:	4193      	sbcs	r3, r2
 8006f26:	6822      	ldr	r2, [r4, #0]
 8006f28:	0692      	lsls	r2, r2, #26
 8006f2a:	d430      	bmi.n	8006f8e <_printf_common+0xae>
 8006f2c:	0022      	movs	r2, r4
 8006f2e:	9901      	ldr	r1, [sp, #4]
 8006f30:	9800      	ldr	r0, [sp, #0]
 8006f32:	9e08      	ldr	r6, [sp, #32]
 8006f34:	3243      	adds	r2, #67	; 0x43
 8006f36:	47b0      	blx	r6
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	d025      	beq.n	8006f88 <_printf_common+0xa8>
 8006f3c:	2306      	movs	r3, #6
 8006f3e:	6820      	ldr	r0, [r4, #0]
 8006f40:	682a      	ldr	r2, [r5, #0]
 8006f42:	68e1      	ldr	r1, [r4, #12]
 8006f44:	2500      	movs	r5, #0
 8006f46:	4003      	ands	r3, r0
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d103      	bne.n	8006f54 <_printf_common+0x74>
 8006f4c:	1a8d      	subs	r5, r1, r2
 8006f4e:	43eb      	mvns	r3, r5
 8006f50:	17db      	asrs	r3, r3, #31
 8006f52:	401d      	ands	r5, r3
 8006f54:	68a3      	ldr	r3, [r4, #8]
 8006f56:	6922      	ldr	r2, [r4, #16]
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	dd01      	ble.n	8006f60 <_printf_common+0x80>
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	18ed      	adds	r5, r5, r3
 8006f60:	2700      	movs	r7, #0
 8006f62:	42bd      	cmp	r5, r7
 8006f64:	d120      	bne.n	8006fa8 <_printf_common+0xc8>
 8006f66:	2000      	movs	r0, #0
 8006f68:	e010      	b.n	8006f8c <_printf_common+0xac>
 8006f6a:	3701      	adds	r7, #1
 8006f6c:	68e3      	ldr	r3, [r4, #12]
 8006f6e:	682a      	ldr	r2, [r5, #0]
 8006f70:	1a9b      	subs	r3, r3, r2
 8006f72:	42bb      	cmp	r3, r7
 8006f74:	ddd2      	ble.n	8006f1c <_printf_common+0x3c>
 8006f76:	0022      	movs	r2, r4
 8006f78:	2301      	movs	r3, #1
 8006f7a:	9901      	ldr	r1, [sp, #4]
 8006f7c:	9800      	ldr	r0, [sp, #0]
 8006f7e:	9e08      	ldr	r6, [sp, #32]
 8006f80:	3219      	adds	r2, #25
 8006f82:	47b0      	blx	r6
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d1f0      	bne.n	8006f6a <_printf_common+0x8a>
 8006f88:	2001      	movs	r0, #1
 8006f8a:	4240      	negs	r0, r0
 8006f8c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f8e:	2030      	movs	r0, #48	; 0x30
 8006f90:	18e1      	adds	r1, r4, r3
 8006f92:	3143      	adds	r1, #67	; 0x43
 8006f94:	7008      	strb	r0, [r1, #0]
 8006f96:	0021      	movs	r1, r4
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	3145      	adds	r1, #69	; 0x45
 8006f9c:	7809      	ldrb	r1, [r1, #0]
 8006f9e:	18a2      	adds	r2, r4, r2
 8006fa0:	3243      	adds	r2, #67	; 0x43
 8006fa2:	3302      	adds	r3, #2
 8006fa4:	7011      	strb	r1, [r2, #0]
 8006fa6:	e7c1      	b.n	8006f2c <_printf_common+0x4c>
 8006fa8:	0022      	movs	r2, r4
 8006faa:	2301      	movs	r3, #1
 8006fac:	9901      	ldr	r1, [sp, #4]
 8006fae:	9800      	ldr	r0, [sp, #0]
 8006fb0:	9e08      	ldr	r6, [sp, #32]
 8006fb2:	321a      	adds	r2, #26
 8006fb4:	47b0      	blx	r6
 8006fb6:	1c43      	adds	r3, r0, #1
 8006fb8:	d0e6      	beq.n	8006f88 <_printf_common+0xa8>
 8006fba:	3701      	adds	r7, #1
 8006fbc:	e7d1      	b.n	8006f62 <_printf_common+0x82>
	...

08006fc0 <_printf_i>:
 8006fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc2:	b08b      	sub	sp, #44	; 0x2c
 8006fc4:	9206      	str	r2, [sp, #24]
 8006fc6:	000a      	movs	r2, r1
 8006fc8:	3243      	adds	r2, #67	; 0x43
 8006fca:	9307      	str	r3, [sp, #28]
 8006fcc:	9005      	str	r0, [sp, #20]
 8006fce:	9204      	str	r2, [sp, #16]
 8006fd0:	7e0a      	ldrb	r2, [r1, #24]
 8006fd2:	000c      	movs	r4, r1
 8006fd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006fd6:	2a78      	cmp	r2, #120	; 0x78
 8006fd8:	d807      	bhi.n	8006fea <_printf_i+0x2a>
 8006fda:	2a62      	cmp	r2, #98	; 0x62
 8006fdc:	d809      	bhi.n	8006ff2 <_printf_i+0x32>
 8006fde:	2a00      	cmp	r2, #0
 8006fe0:	d100      	bne.n	8006fe4 <_printf_i+0x24>
 8006fe2:	e0c1      	b.n	8007168 <_printf_i+0x1a8>
 8006fe4:	2a58      	cmp	r2, #88	; 0x58
 8006fe6:	d100      	bne.n	8006fea <_printf_i+0x2a>
 8006fe8:	e08c      	b.n	8007104 <_printf_i+0x144>
 8006fea:	0026      	movs	r6, r4
 8006fec:	3642      	adds	r6, #66	; 0x42
 8006fee:	7032      	strb	r2, [r6, #0]
 8006ff0:	e022      	b.n	8007038 <_printf_i+0x78>
 8006ff2:	0010      	movs	r0, r2
 8006ff4:	3863      	subs	r0, #99	; 0x63
 8006ff6:	2815      	cmp	r0, #21
 8006ff8:	d8f7      	bhi.n	8006fea <_printf_i+0x2a>
 8006ffa:	f7f9 f897 	bl	800012c <__gnu_thumb1_case_shi>
 8006ffe:	0016      	.short	0x0016
 8007000:	fff6001f 	.word	0xfff6001f
 8007004:	fff6fff6 	.word	0xfff6fff6
 8007008:	001ffff6 	.word	0x001ffff6
 800700c:	fff6fff6 	.word	0xfff6fff6
 8007010:	fff6fff6 	.word	0xfff6fff6
 8007014:	003600a8 	.word	0x003600a8
 8007018:	fff6009a 	.word	0xfff6009a
 800701c:	00b9fff6 	.word	0x00b9fff6
 8007020:	0036fff6 	.word	0x0036fff6
 8007024:	fff6fff6 	.word	0xfff6fff6
 8007028:	009e      	.short	0x009e
 800702a:	0026      	movs	r6, r4
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	3642      	adds	r6, #66	; 0x42
 8007030:	1d11      	adds	r1, r2, #4
 8007032:	6019      	str	r1, [r3, #0]
 8007034:	6813      	ldr	r3, [r2, #0]
 8007036:	7033      	strb	r3, [r6, #0]
 8007038:	2301      	movs	r3, #1
 800703a:	e0a7      	b.n	800718c <_printf_i+0x1cc>
 800703c:	6808      	ldr	r0, [r1, #0]
 800703e:	6819      	ldr	r1, [r3, #0]
 8007040:	1d0a      	adds	r2, r1, #4
 8007042:	0605      	lsls	r5, r0, #24
 8007044:	d50b      	bpl.n	800705e <_printf_i+0x9e>
 8007046:	680d      	ldr	r5, [r1, #0]
 8007048:	601a      	str	r2, [r3, #0]
 800704a:	2d00      	cmp	r5, #0
 800704c:	da03      	bge.n	8007056 <_printf_i+0x96>
 800704e:	232d      	movs	r3, #45	; 0x2d
 8007050:	9a04      	ldr	r2, [sp, #16]
 8007052:	426d      	negs	r5, r5
 8007054:	7013      	strb	r3, [r2, #0]
 8007056:	4b61      	ldr	r3, [pc, #388]	; (80071dc <_printf_i+0x21c>)
 8007058:	270a      	movs	r7, #10
 800705a:	9303      	str	r3, [sp, #12]
 800705c:	e01b      	b.n	8007096 <_printf_i+0xd6>
 800705e:	680d      	ldr	r5, [r1, #0]
 8007060:	601a      	str	r2, [r3, #0]
 8007062:	0641      	lsls	r1, r0, #25
 8007064:	d5f1      	bpl.n	800704a <_printf_i+0x8a>
 8007066:	b22d      	sxth	r5, r5
 8007068:	e7ef      	b.n	800704a <_printf_i+0x8a>
 800706a:	680d      	ldr	r5, [r1, #0]
 800706c:	6819      	ldr	r1, [r3, #0]
 800706e:	1d08      	adds	r0, r1, #4
 8007070:	6018      	str	r0, [r3, #0]
 8007072:	062e      	lsls	r6, r5, #24
 8007074:	d501      	bpl.n	800707a <_printf_i+0xba>
 8007076:	680d      	ldr	r5, [r1, #0]
 8007078:	e003      	b.n	8007082 <_printf_i+0xc2>
 800707a:	066d      	lsls	r5, r5, #25
 800707c:	d5fb      	bpl.n	8007076 <_printf_i+0xb6>
 800707e:	680d      	ldr	r5, [r1, #0]
 8007080:	b2ad      	uxth	r5, r5
 8007082:	4b56      	ldr	r3, [pc, #344]	; (80071dc <_printf_i+0x21c>)
 8007084:	2708      	movs	r7, #8
 8007086:	9303      	str	r3, [sp, #12]
 8007088:	2a6f      	cmp	r2, #111	; 0x6f
 800708a:	d000      	beq.n	800708e <_printf_i+0xce>
 800708c:	3702      	adds	r7, #2
 800708e:	0023      	movs	r3, r4
 8007090:	2200      	movs	r2, #0
 8007092:	3343      	adds	r3, #67	; 0x43
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	6863      	ldr	r3, [r4, #4]
 8007098:	60a3      	str	r3, [r4, #8]
 800709a:	2b00      	cmp	r3, #0
 800709c:	db03      	blt.n	80070a6 <_printf_i+0xe6>
 800709e:	2204      	movs	r2, #4
 80070a0:	6821      	ldr	r1, [r4, #0]
 80070a2:	4391      	bics	r1, r2
 80070a4:	6021      	str	r1, [r4, #0]
 80070a6:	2d00      	cmp	r5, #0
 80070a8:	d102      	bne.n	80070b0 <_printf_i+0xf0>
 80070aa:	9e04      	ldr	r6, [sp, #16]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d00c      	beq.n	80070ca <_printf_i+0x10a>
 80070b0:	9e04      	ldr	r6, [sp, #16]
 80070b2:	0028      	movs	r0, r5
 80070b4:	0039      	movs	r1, r7
 80070b6:	f7f9 f8c9 	bl	800024c <__aeabi_uidivmod>
 80070ba:	9b03      	ldr	r3, [sp, #12]
 80070bc:	3e01      	subs	r6, #1
 80070be:	5c5b      	ldrb	r3, [r3, r1]
 80070c0:	7033      	strb	r3, [r6, #0]
 80070c2:	002b      	movs	r3, r5
 80070c4:	0005      	movs	r5, r0
 80070c6:	429f      	cmp	r7, r3
 80070c8:	d9f3      	bls.n	80070b2 <_printf_i+0xf2>
 80070ca:	2f08      	cmp	r7, #8
 80070cc:	d109      	bne.n	80070e2 <_printf_i+0x122>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	07db      	lsls	r3, r3, #31
 80070d2:	d506      	bpl.n	80070e2 <_printf_i+0x122>
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	6922      	ldr	r2, [r4, #16]
 80070d8:	4293      	cmp	r3, r2
 80070da:	dc02      	bgt.n	80070e2 <_printf_i+0x122>
 80070dc:	2330      	movs	r3, #48	; 0x30
 80070de:	3e01      	subs	r6, #1
 80070e0:	7033      	strb	r3, [r6, #0]
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	1b9b      	subs	r3, r3, r6
 80070e6:	6123      	str	r3, [r4, #16]
 80070e8:	9b07      	ldr	r3, [sp, #28]
 80070ea:	0021      	movs	r1, r4
 80070ec:	9300      	str	r3, [sp, #0]
 80070ee:	9805      	ldr	r0, [sp, #20]
 80070f0:	9b06      	ldr	r3, [sp, #24]
 80070f2:	aa09      	add	r2, sp, #36	; 0x24
 80070f4:	f7ff fef4 	bl	8006ee0 <_printf_common>
 80070f8:	1c43      	adds	r3, r0, #1
 80070fa:	d14c      	bne.n	8007196 <_printf_i+0x1d6>
 80070fc:	2001      	movs	r0, #1
 80070fe:	4240      	negs	r0, r0
 8007100:	b00b      	add	sp, #44	; 0x2c
 8007102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007104:	3145      	adds	r1, #69	; 0x45
 8007106:	700a      	strb	r2, [r1, #0]
 8007108:	4a34      	ldr	r2, [pc, #208]	; (80071dc <_printf_i+0x21c>)
 800710a:	9203      	str	r2, [sp, #12]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	6821      	ldr	r1, [r4, #0]
 8007110:	ca20      	ldmia	r2!, {r5}
 8007112:	601a      	str	r2, [r3, #0]
 8007114:	0608      	lsls	r0, r1, #24
 8007116:	d516      	bpl.n	8007146 <_printf_i+0x186>
 8007118:	07cb      	lsls	r3, r1, #31
 800711a:	d502      	bpl.n	8007122 <_printf_i+0x162>
 800711c:	2320      	movs	r3, #32
 800711e:	4319      	orrs	r1, r3
 8007120:	6021      	str	r1, [r4, #0]
 8007122:	2710      	movs	r7, #16
 8007124:	2d00      	cmp	r5, #0
 8007126:	d1b2      	bne.n	800708e <_printf_i+0xce>
 8007128:	2320      	movs	r3, #32
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	439a      	bics	r2, r3
 800712e:	6022      	str	r2, [r4, #0]
 8007130:	e7ad      	b.n	800708e <_printf_i+0xce>
 8007132:	2220      	movs	r2, #32
 8007134:	6809      	ldr	r1, [r1, #0]
 8007136:	430a      	orrs	r2, r1
 8007138:	6022      	str	r2, [r4, #0]
 800713a:	0022      	movs	r2, r4
 800713c:	2178      	movs	r1, #120	; 0x78
 800713e:	3245      	adds	r2, #69	; 0x45
 8007140:	7011      	strb	r1, [r2, #0]
 8007142:	4a27      	ldr	r2, [pc, #156]	; (80071e0 <_printf_i+0x220>)
 8007144:	e7e1      	b.n	800710a <_printf_i+0x14a>
 8007146:	0648      	lsls	r0, r1, #25
 8007148:	d5e6      	bpl.n	8007118 <_printf_i+0x158>
 800714a:	b2ad      	uxth	r5, r5
 800714c:	e7e4      	b.n	8007118 <_printf_i+0x158>
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	680d      	ldr	r5, [r1, #0]
 8007152:	1d10      	adds	r0, r2, #4
 8007154:	6949      	ldr	r1, [r1, #20]
 8007156:	6018      	str	r0, [r3, #0]
 8007158:	6813      	ldr	r3, [r2, #0]
 800715a:	062e      	lsls	r6, r5, #24
 800715c:	d501      	bpl.n	8007162 <_printf_i+0x1a2>
 800715e:	6019      	str	r1, [r3, #0]
 8007160:	e002      	b.n	8007168 <_printf_i+0x1a8>
 8007162:	066d      	lsls	r5, r5, #25
 8007164:	d5fb      	bpl.n	800715e <_printf_i+0x19e>
 8007166:	8019      	strh	r1, [r3, #0]
 8007168:	2300      	movs	r3, #0
 800716a:	9e04      	ldr	r6, [sp, #16]
 800716c:	6123      	str	r3, [r4, #16]
 800716e:	e7bb      	b.n	80070e8 <_printf_i+0x128>
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	1d11      	adds	r1, r2, #4
 8007174:	6019      	str	r1, [r3, #0]
 8007176:	6816      	ldr	r6, [r2, #0]
 8007178:	2100      	movs	r1, #0
 800717a:	0030      	movs	r0, r6
 800717c:	6862      	ldr	r2, [r4, #4]
 800717e:	f001 f805 	bl	800818c <memchr>
 8007182:	2800      	cmp	r0, #0
 8007184:	d001      	beq.n	800718a <_printf_i+0x1ca>
 8007186:	1b80      	subs	r0, r0, r6
 8007188:	6060      	str	r0, [r4, #4]
 800718a:	6863      	ldr	r3, [r4, #4]
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	2300      	movs	r3, #0
 8007190:	9a04      	ldr	r2, [sp, #16]
 8007192:	7013      	strb	r3, [r2, #0]
 8007194:	e7a8      	b.n	80070e8 <_printf_i+0x128>
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	0032      	movs	r2, r6
 800719a:	9906      	ldr	r1, [sp, #24]
 800719c:	9805      	ldr	r0, [sp, #20]
 800719e:	9d07      	ldr	r5, [sp, #28]
 80071a0:	47a8      	blx	r5
 80071a2:	1c43      	adds	r3, r0, #1
 80071a4:	d0aa      	beq.n	80070fc <_printf_i+0x13c>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	079b      	lsls	r3, r3, #30
 80071aa:	d415      	bmi.n	80071d8 <_printf_i+0x218>
 80071ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071ae:	68e0      	ldr	r0, [r4, #12]
 80071b0:	4298      	cmp	r0, r3
 80071b2:	daa5      	bge.n	8007100 <_printf_i+0x140>
 80071b4:	0018      	movs	r0, r3
 80071b6:	e7a3      	b.n	8007100 <_printf_i+0x140>
 80071b8:	0022      	movs	r2, r4
 80071ba:	2301      	movs	r3, #1
 80071bc:	9906      	ldr	r1, [sp, #24]
 80071be:	9805      	ldr	r0, [sp, #20]
 80071c0:	9e07      	ldr	r6, [sp, #28]
 80071c2:	3219      	adds	r2, #25
 80071c4:	47b0      	blx	r6
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	d098      	beq.n	80070fc <_printf_i+0x13c>
 80071ca:	3501      	adds	r5, #1
 80071cc:	68e3      	ldr	r3, [r4, #12]
 80071ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071d0:	1a9b      	subs	r3, r3, r2
 80071d2:	42ab      	cmp	r3, r5
 80071d4:	dcf0      	bgt.n	80071b8 <_printf_i+0x1f8>
 80071d6:	e7e9      	b.n	80071ac <_printf_i+0x1ec>
 80071d8:	2500      	movs	r5, #0
 80071da:	e7f7      	b.n	80071cc <_printf_i+0x20c>
 80071dc:	08009c36 	.word	0x08009c36
 80071e0:	08009c47 	.word	0x08009c47

080071e4 <iprintf>:
 80071e4:	b40f      	push	{r0, r1, r2, r3}
 80071e6:	4b0b      	ldr	r3, [pc, #44]	; (8007214 <iprintf+0x30>)
 80071e8:	b513      	push	{r0, r1, r4, lr}
 80071ea:	681c      	ldr	r4, [r3, #0]
 80071ec:	2c00      	cmp	r4, #0
 80071ee:	d005      	beq.n	80071fc <iprintf+0x18>
 80071f0:	69a3      	ldr	r3, [r4, #24]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d102      	bne.n	80071fc <iprintf+0x18>
 80071f6:	0020      	movs	r0, r4
 80071f8:	f000 ff16 	bl	8008028 <__sinit>
 80071fc:	ab05      	add	r3, sp, #20
 80071fe:	0020      	movs	r0, r4
 8007200:	9a04      	ldr	r2, [sp, #16]
 8007202:	68a1      	ldr	r1, [r4, #8]
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	f001 fca7 	bl	8008b58 <_vfiprintf_r>
 800720a:	bc16      	pop	{r1, r2, r4}
 800720c:	bc08      	pop	{r3}
 800720e:	b004      	add	sp, #16
 8007210:	4718      	bx	r3
 8007212:	46c0      	nop			; (mov r8, r8)
 8007214:	2000000c 	.word	0x2000000c

08007218 <quorem>:
 8007218:	b5f0      	push	{r4, r5, r6, r7, lr}
 800721a:	0006      	movs	r6, r0
 800721c:	690b      	ldr	r3, [r1, #16]
 800721e:	6932      	ldr	r2, [r6, #16]
 8007220:	b087      	sub	sp, #28
 8007222:	2000      	movs	r0, #0
 8007224:	9103      	str	r1, [sp, #12]
 8007226:	429a      	cmp	r2, r3
 8007228:	db65      	blt.n	80072f6 <quorem+0xde>
 800722a:	3b01      	subs	r3, #1
 800722c:	009c      	lsls	r4, r3, #2
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	000b      	movs	r3, r1
 8007232:	3314      	adds	r3, #20
 8007234:	9305      	str	r3, [sp, #20]
 8007236:	191b      	adds	r3, r3, r4
 8007238:	9304      	str	r3, [sp, #16]
 800723a:	0033      	movs	r3, r6
 800723c:	3314      	adds	r3, #20
 800723e:	9302      	str	r3, [sp, #8]
 8007240:	191c      	adds	r4, r3, r4
 8007242:	9b04      	ldr	r3, [sp, #16]
 8007244:	6827      	ldr	r7, [r4, #0]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	0038      	movs	r0, r7
 800724a:	1c5d      	adds	r5, r3, #1
 800724c:	0029      	movs	r1, r5
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	f7f8 ff76 	bl	8000140 <__udivsi3>
 8007254:	9001      	str	r0, [sp, #4]
 8007256:	42af      	cmp	r7, r5
 8007258:	d324      	bcc.n	80072a4 <quorem+0x8c>
 800725a:	2500      	movs	r5, #0
 800725c:	46ac      	mov	ip, r5
 800725e:	9802      	ldr	r0, [sp, #8]
 8007260:	9f05      	ldr	r7, [sp, #20]
 8007262:	cf08      	ldmia	r7!, {r3}
 8007264:	9a01      	ldr	r2, [sp, #4]
 8007266:	b299      	uxth	r1, r3
 8007268:	4351      	muls	r1, r2
 800726a:	0c1b      	lsrs	r3, r3, #16
 800726c:	4353      	muls	r3, r2
 800726e:	1949      	adds	r1, r1, r5
 8007270:	0c0a      	lsrs	r2, r1, #16
 8007272:	189b      	adds	r3, r3, r2
 8007274:	6802      	ldr	r2, [r0, #0]
 8007276:	b289      	uxth	r1, r1
 8007278:	b292      	uxth	r2, r2
 800727a:	4462      	add	r2, ip
 800727c:	1a52      	subs	r2, r2, r1
 800727e:	6801      	ldr	r1, [r0, #0]
 8007280:	0c1d      	lsrs	r5, r3, #16
 8007282:	0c09      	lsrs	r1, r1, #16
 8007284:	b29b      	uxth	r3, r3
 8007286:	1acb      	subs	r3, r1, r3
 8007288:	1411      	asrs	r1, r2, #16
 800728a:	185b      	adds	r3, r3, r1
 800728c:	1419      	asrs	r1, r3, #16
 800728e:	b292      	uxth	r2, r2
 8007290:	041b      	lsls	r3, r3, #16
 8007292:	431a      	orrs	r2, r3
 8007294:	9b04      	ldr	r3, [sp, #16]
 8007296:	468c      	mov	ip, r1
 8007298:	c004      	stmia	r0!, {r2}
 800729a:	42bb      	cmp	r3, r7
 800729c:	d2e1      	bcs.n	8007262 <quorem+0x4a>
 800729e:	6823      	ldr	r3, [r4, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d030      	beq.n	8007306 <quorem+0xee>
 80072a4:	0030      	movs	r0, r6
 80072a6:	9903      	ldr	r1, [sp, #12]
 80072a8:	f001 fa08 	bl	80086bc <__mcmp>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	db21      	blt.n	80072f4 <quorem+0xdc>
 80072b0:	0030      	movs	r0, r6
 80072b2:	2400      	movs	r4, #0
 80072b4:	9b01      	ldr	r3, [sp, #4]
 80072b6:	9903      	ldr	r1, [sp, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	3014      	adds	r0, #20
 80072be:	3114      	adds	r1, #20
 80072c0:	6803      	ldr	r3, [r0, #0]
 80072c2:	c920      	ldmia	r1!, {r5}
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	1914      	adds	r4, r2, r4
 80072c8:	b2aa      	uxth	r2, r5
 80072ca:	1aa2      	subs	r2, r4, r2
 80072cc:	0c1b      	lsrs	r3, r3, #16
 80072ce:	0c2d      	lsrs	r5, r5, #16
 80072d0:	1414      	asrs	r4, r2, #16
 80072d2:	1b5b      	subs	r3, r3, r5
 80072d4:	191b      	adds	r3, r3, r4
 80072d6:	141c      	asrs	r4, r3, #16
 80072d8:	b292      	uxth	r2, r2
 80072da:	041b      	lsls	r3, r3, #16
 80072dc:	4313      	orrs	r3, r2
 80072de:	c008      	stmia	r0!, {r3}
 80072e0:	9b04      	ldr	r3, [sp, #16]
 80072e2:	428b      	cmp	r3, r1
 80072e4:	d2ec      	bcs.n	80072c0 <quorem+0xa8>
 80072e6:	9b00      	ldr	r3, [sp, #0]
 80072e8:	9a02      	ldr	r2, [sp, #8]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	18d3      	adds	r3, r2, r3
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	2a00      	cmp	r2, #0
 80072f2:	d015      	beq.n	8007320 <quorem+0x108>
 80072f4:	9801      	ldr	r0, [sp, #4]
 80072f6:	b007      	add	sp, #28
 80072f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <quorem+0xf6>
 8007300:	9b00      	ldr	r3, [sp, #0]
 8007302:	3b01      	subs	r3, #1
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	9b02      	ldr	r3, [sp, #8]
 8007308:	3c04      	subs	r4, #4
 800730a:	42a3      	cmp	r3, r4
 800730c:	d3f5      	bcc.n	80072fa <quorem+0xe2>
 800730e:	9b00      	ldr	r3, [sp, #0]
 8007310:	6133      	str	r3, [r6, #16]
 8007312:	e7c7      	b.n	80072a4 <quorem+0x8c>
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	2a00      	cmp	r2, #0
 8007318:	d106      	bne.n	8007328 <quorem+0x110>
 800731a:	9a00      	ldr	r2, [sp, #0]
 800731c:	3a01      	subs	r2, #1
 800731e:	9200      	str	r2, [sp, #0]
 8007320:	9a02      	ldr	r2, [sp, #8]
 8007322:	3b04      	subs	r3, #4
 8007324:	429a      	cmp	r2, r3
 8007326:	d3f5      	bcc.n	8007314 <quorem+0xfc>
 8007328:	9b00      	ldr	r3, [sp, #0]
 800732a:	6133      	str	r3, [r6, #16]
 800732c:	e7e2      	b.n	80072f4 <quorem+0xdc>
	...

08007330 <_dtoa_r>:
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	b09d      	sub	sp, #116	; 0x74
 8007334:	9202      	str	r2, [sp, #8]
 8007336:	9303      	str	r3, [sp, #12]
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	9c03      	ldr	r4, [sp, #12]
 800733c:	9308      	str	r3, [sp, #32]
 800733e:	9409      	str	r4, [sp, #36]	; 0x24
 8007340:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007342:	0007      	movs	r7, r0
 8007344:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8007346:	2c00      	cmp	r4, #0
 8007348:	d10e      	bne.n	8007368 <_dtoa_r+0x38>
 800734a:	2010      	movs	r0, #16
 800734c:	f000 ff14 	bl	8008178 <malloc>
 8007350:	1e02      	subs	r2, r0, #0
 8007352:	6278      	str	r0, [r7, #36]	; 0x24
 8007354:	d104      	bne.n	8007360 <_dtoa_r+0x30>
 8007356:	21ea      	movs	r1, #234	; 0xea
 8007358:	4bc7      	ldr	r3, [pc, #796]	; (8007678 <_dtoa_r+0x348>)
 800735a:	48c8      	ldr	r0, [pc, #800]	; (800767c <_dtoa_r+0x34c>)
 800735c:	f001 fe76 	bl	800904c <__assert_func>
 8007360:	6044      	str	r4, [r0, #4]
 8007362:	6084      	str	r4, [r0, #8]
 8007364:	6004      	str	r4, [r0, #0]
 8007366:	60c4      	str	r4, [r0, #12]
 8007368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736a:	6819      	ldr	r1, [r3, #0]
 800736c:	2900      	cmp	r1, #0
 800736e:	d00a      	beq.n	8007386 <_dtoa_r+0x56>
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	2301      	movs	r3, #1
 8007374:	4093      	lsls	r3, r2
 8007376:	604a      	str	r2, [r1, #4]
 8007378:	608b      	str	r3, [r1, #8]
 800737a:	0038      	movs	r0, r7
 800737c:	f000 ff5e 	bl	800823c <_Bfree>
 8007380:	2200      	movs	r2, #0
 8007382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	da20      	bge.n	80073ce <_dtoa_r+0x9e>
 800738c:	2301      	movs	r3, #1
 800738e:	602b      	str	r3, [r5, #0]
 8007390:	9b03      	ldr	r3, [sp, #12]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	085b      	lsrs	r3, r3, #1
 8007396:	9309      	str	r3, [sp, #36]	; 0x24
 8007398:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800739a:	4bb9      	ldr	r3, [pc, #740]	; (8007680 <_dtoa_r+0x350>)
 800739c:	4ab8      	ldr	r2, [pc, #736]	; (8007680 <_dtoa_r+0x350>)
 800739e:	402b      	ands	r3, r5
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d117      	bne.n	80073d4 <_dtoa_r+0xa4>
 80073a4:	4bb7      	ldr	r3, [pc, #732]	; (8007684 <_dtoa_r+0x354>)
 80073a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073a8:	0328      	lsls	r0, r5, #12
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	9b02      	ldr	r3, [sp, #8]
 80073ae:	0b00      	lsrs	r0, r0, #12
 80073b0:	4318      	orrs	r0, r3
 80073b2:	d101      	bne.n	80073b8 <_dtoa_r+0x88>
 80073b4:	f000 fdbf 	bl	8007f36 <_dtoa_r+0xc06>
 80073b8:	48b3      	ldr	r0, [pc, #716]	; (8007688 <_dtoa_r+0x358>)
 80073ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073bc:	9006      	str	r0, [sp, #24]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d002      	beq.n	80073c8 <_dtoa_r+0x98>
 80073c2:	4bb2      	ldr	r3, [pc, #712]	; (800768c <_dtoa_r+0x35c>)
 80073c4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	9806      	ldr	r0, [sp, #24]
 80073ca:	b01d      	add	sp, #116	; 0x74
 80073cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073ce:	2300      	movs	r3, #0
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	e7e1      	b.n	8007398 <_dtoa_r+0x68>
 80073d4:	9b08      	ldr	r3, [sp, #32]
 80073d6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80073d8:	9312      	str	r3, [sp, #72]	; 0x48
 80073da:	9413      	str	r4, [sp, #76]	; 0x4c
 80073dc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80073de:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80073e0:	2200      	movs	r2, #0
 80073e2:	2300      	movs	r3, #0
 80073e4:	f7f9 f832 	bl	800044c <__aeabi_dcmpeq>
 80073e8:	1e04      	subs	r4, r0, #0
 80073ea:	d009      	beq.n	8007400 <_dtoa_r+0xd0>
 80073ec:	2301      	movs	r3, #1
 80073ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	4ba7      	ldr	r3, [pc, #668]	; (8007690 <_dtoa_r+0x360>)
 80073f4:	9306      	str	r3, [sp, #24]
 80073f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0e5      	beq.n	80073c8 <_dtoa_r+0x98>
 80073fc:	4ba5      	ldr	r3, [pc, #660]	; (8007694 <_dtoa_r+0x364>)
 80073fe:	e7e1      	b.n	80073c4 <_dtoa_r+0x94>
 8007400:	ab1a      	add	r3, sp, #104	; 0x68
 8007402:	9301      	str	r3, [sp, #4]
 8007404:	ab1b      	add	r3, sp, #108	; 0x6c
 8007406:	9300      	str	r3, [sp, #0]
 8007408:	0038      	movs	r0, r7
 800740a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800740c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800740e:	f001 fa09 	bl	8008824 <__d2b>
 8007412:	006e      	lsls	r6, r5, #1
 8007414:	9005      	str	r0, [sp, #20]
 8007416:	0d76      	lsrs	r6, r6, #21
 8007418:	d100      	bne.n	800741c <_dtoa_r+0xec>
 800741a:	e07c      	b.n	8007516 <_dtoa_r+0x1e6>
 800741c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800741e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007420:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007422:	4a9d      	ldr	r2, [pc, #628]	; (8007698 <_dtoa_r+0x368>)
 8007424:	031b      	lsls	r3, r3, #12
 8007426:	0b1b      	lsrs	r3, r3, #12
 8007428:	431a      	orrs	r2, r3
 800742a:	0011      	movs	r1, r2
 800742c:	4b9b      	ldr	r3, [pc, #620]	; (800769c <_dtoa_r+0x36c>)
 800742e:	9418      	str	r4, [sp, #96]	; 0x60
 8007430:	18f6      	adds	r6, r6, r3
 8007432:	2200      	movs	r2, #0
 8007434:	4b9a      	ldr	r3, [pc, #616]	; (80076a0 <_dtoa_r+0x370>)
 8007436:	f7fb f9dd 	bl	80027f4 <__aeabi_dsub>
 800743a:	4a9a      	ldr	r2, [pc, #616]	; (80076a4 <_dtoa_r+0x374>)
 800743c:	4b9a      	ldr	r3, [pc, #616]	; (80076a8 <_dtoa_r+0x378>)
 800743e:	f7fa ff6d 	bl	800231c <__aeabi_dmul>
 8007442:	4a9a      	ldr	r2, [pc, #616]	; (80076ac <_dtoa_r+0x37c>)
 8007444:	4b9a      	ldr	r3, [pc, #616]	; (80076b0 <_dtoa_r+0x380>)
 8007446:	f7fa f82b 	bl	80014a0 <__aeabi_dadd>
 800744a:	0004      	movs	r4, r0
 800744c:	0030      	movs	r0, r6
 800744e:	000d      	movs	r5, r1
 8007450:	f7fb fdb6 	bl	8002fc0 <__aeabi_i2d>
 8007454:	4a97      	ldr	r2, [pc, #604]	; (80076b4 <_dtoa_r+0x384>)
 8007456:	4b98      	ldr	r3, [pc, #608]	; (80076b8 <_dtoa_r+0x388>)
 8007458:	f7fa ff60 	bl	800231c <__aeabi_dmul>
 800745c:	0002      	movs	r2, r0
 800745e:	000b      	movs	r3, r1
 8007460:	0020      	movs	r0, r4
 8007462:	0029      	movs	r1, r5
 8007464:	f7fa f81c 	bl	80014a0 <__aeabi_dadd>
 8007468:	0004      	movs	r4, r0
 800746a:	000d      	movs	r5, r1
 800746c:	f7fb fd72 	bl	8002f54 <__aeabi_d2iz>
 8007470:	2200      	movs	r2, #0
 8007472:	9002      	str	r0, [sp, #8]
 8007474:	2300      	movs	r3, #0
 8007476:	0020      	movs	r0, r4
 8007478:	0029      	movs	r1, r5
 800747a:	f7f8 ffed 	bl	8000458 <__aeabi_dcmplt>
 800747e:	2800      	cmp	r0, #0
 8007480:	d00b      	beq.n	800749a <_dtoa_r+0x16a>
 8007482:	9802      	ldr	r0, [sp, #8]
 8007484:	f7fb fd9c 	bl	8002fc0 <__aeabi_i2d>
 8007488:	002b      	movs	r3, r5
 800748a:	0022      	movs	r2, r4
 800748c:	f7f8 ffde 	bl	800044c <__aeabi_dcmpeq>
 8007490:	4243      	negs	r3, r0
 8007492:	4158      	adcs	r0, r3
 8007494:	9b02      	ldr	r3, [sp, #8]
 8007496:	1a1b      	subs	r3, r3, r0
 8007498:	9302      	str	r3, [sp, #8]
 800749a:	2301      	movs	r3, #1
 800749c:	9316      	str	r3, [sp, #88]	; 0x58
 800749e:	9b02      	ldr	r3, [sp, #8]
 80074a0:	2b16      	cmp	r3, #22
 80074a2:	d80f      	bhi.n	80074c4 <_dtoa_r+0x194>
 80074a4:	9812      	ldr	r0, [sp, #72]	; 0x48
 80074a6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80074a8:	00da      	lsls	r2, r3, #3
 80074aa:	4b84      	ldr	r3, [pc, #528]	; (80076bc <_dtoa_r+0x38c>)
 80074ac:	189b      	adds	r3, r3, r2
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f7f8 ffd1 	bl	8000458 <__aeabi_dcmplt>
 80074b6:	2800      	cmp	r0, #0
 80074b8:	d049      	beq.n	800754e <_dtoa_r+0x21e>
 80074ba:	9b02      	ldr	r3, [sp, #8]
 80074bc:	3b01      	subs	r3, #1
 80074be:	9302      	str	r3, [sp, #8]
 80074c0:	2300      	movs	r3, #0
 80074c2:	9316      	str	r3, [sp, #88]	; 0x58
 80074c4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80074c6:	1b9e      	subs	r6, r3, r6
 80074c8:	2300      	movs	r3, #0
 80074ca:	930a      	str	r3, [sp, #40]	; 0x28
 80074cc:	0033      	movs	r3, r6
 80074ce:	3b01      	subs	r3, #1
 80074d0:	930d      	str	r3, [sp, #52]	; 0x34
 80074d2:	d504      	bpl.n	80074de <_dtoa_r+0x1ae>
 80074d4:	2301      	movs	r3, #1
 80074d6:	1b9b      	subs	r3, r3, r6
 80074d8:	930a      	str	r3, [sp, #40]	; 0x28
 80074da:	2300      	movs	r3, #0
 80074dc:	930d      	str	r3, [sp, #52]	; 0x34
 80074de:	9b02      	ldr	r3, [sp, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	db36      	blt.n	8007552 <_dtoa_r+0x222>
 80074e4:	9a02      	ldr	r2, [sp, #8]
 80074e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80074e8:	4694      	mov	ip, r2
 80074ea:	4463      	add	r3, ip
 80074ec:	930d      	str	r3, [sp, #52]	; 0x34
 80074ee:	2300      	movs	r3, #0
 80074f0:	9215      	str	r2, [sp, #84]	; 0x54
 80074f2:	930e      	str	r3, [sp, #56]	; 0x38
 80074f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074f6:	2401      	movs	r4, #1
 80074f8:	2b09      	cmp	r3, #9
 80074fa:	d864      	bhi.n	80075c6 <_dtoa_r+0x296>
 80074fc:	2b05      	cmp	r3, #5
 80074fe:	dd02      	ble.n	8007506 <_dtoa_r+0x1d6>
 8007500:	2400      	movs	r4, #0
 8007502:	3b04      	subs	r3, #4
 8007504:	9322      	str	r3, [sp, #136]	; 0x88
 8007506:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007508:	1e98      	subs	r0, r3, #2
 800750a:	2803      	cmp	r0, #3
 800750c:	d864      	bhi.n	80075d8 <_dtoa_r+0x2a8>
 800750e:	f7f8 fe03 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007512:	3829      	.short	0x3829
 8007514:	5836      	.short	0x5836
 8007516:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007518:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800751a:	189e      	adds	r6, r3, r2
 800751c:	4b68      	ldr	r3, [pc, #416]	; (80076c0 <_dtoa_r+0x390>)
 800751e:	18f2      	adds	r2, r6, r3
 8007520:	2a20      	cmp	r2, #32
 8007522:	dd0f      	ble.n	8007544 <_dtoa_r+0x214>
 8007524:	2340      	movs	r3, #64	; 0x40
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	409d      	lsls	r5, r3
 800752a:	4b66      	ldr	r3, [pc, #408]	; (80076c4 <_dtoa_r+0x394>)
 800752c:	9802      	ldr	r0, [sp, #8]
 800752e:	18f3      	adds	r3, r6, r3
 8007530:	40d8      	lsrs	r0, r3
 8007532:	4328      	orrs	r0, r5
 8007534:	f7fb fd74 	bl	8003020 <__aeabi_ui2d>
 8007538:	2301      	movs	r3, #1
 800753a:	4c63      	ldr	r4, [pc, #396]	; (80076c8 <_dtoa_r+0x398>)
 800753c:	3e01      	subs	r6, #1
 800753e:	1909      	adds	r1, r1, r4
 8007540:	9318      	str	r3, [sp, #96]	; 0x60
 8007542:	e776      	b.n	8007432 <_dtoa_r+0x102>
 8007544:	2320      	movs	r3, #32
 8007546:	9802      	ldr	r0, [sp, #8]
 8007548:	1a9b      	subs	r3, r3, r2
 800754a:	4098      	lsls	r0, r3
 800754c:	e7f2      	b.n	8007534 <_dtoa_r+0x204>
 800754e:	9016      	str	r0, [sp, #88]	; 0x58
 8007550:	e7b8      	b.n	80074c4 <_dtoa_r+0x194>
 8007552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007554:	9a02      	ldr	r2, [sp, #8]
 8007556:	1a9b      	subs	r3, r3, r2
 8007558:	930a      	str	r3, [sp, #40]	; 0x28
 800755a:	4253      	negs	r3, r2
 800755c:	930e      	str	r3, [sp, #56]	; 0x38
 800755e:	2300      	movs	r3, #0
 8007560:	9315      	str	r3, [sp, #84]	; 0x54
 8007562:	e7c7      	b.n	80074f4 <_dtoa_r+0x1c4>
 8007564:	2300      	movs	r3, #0
 8007566:	930f      	str	r3, [sp, #60]	; 0x3c
 8007568:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800756a:	930c      	str	r3, [sp, #48]	; 0x30
 800756c:	9307      	str	r3, [sp, #28]
 800756e:	2b00      	cmp	r3, #0
 8007570:	dc13      	bgt.n	800759a <_dtoa_r+0x26a>
 8007572:	2301      	movs	r3, #1
 8007574:	001a      	movs	r2, r3
 8007576:	930c      	str	r3, [sp, #48]	; 0x30
 8007578:	9307      	str	r3, [sp, #28]
 800757a:	9223      	str	r2, [sp, #140]	; 0x8c
 800757c:	e00d      	b.n	800759a <_dtoa_r+0x26a>
 800757e:	2301      	movs	r3, #1
 8007580:	e7f1      	b.n	8007566 <_dtoa_r+0x236>
 8007582:	2300      	movs	r3, #0
 8007584:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007586:	930f      	str	r3, [sp, #60]	; 0x3c
 8007588:	4694      	mov	ip, r2
 800758a:	9b02      	ldr	r3, [sp, #8]
 800758c:	4463      	add	r3, ip
 800758e:	930c      	str	r3, [sp, #48]	; 0x30
 8007590:	3301      	adds	r3, #1
 8007592:	9307      	str	r3, [sp, #28]
 8007594:	2b00      	cmp	r3, #0
 8007596:	dc00      	bgt.n	800759a <_dtoa_r+0x26a>
 8007598:	2301      	movs	r3, #1
 800759a:	2200      	movs	r2, #0
 800759c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800759e:	6042      	str	r2, [r0, #4]
 80075a0:	3204      	adds	r2, #4
 80075a2:	0015      	movs	r5, r2
 80075a4:	3514      	adds	r5, #20
 80075a6:	6841      	ldr	r1, [r0, #4]
 80075a8:	429d      	cmp	r5, r3
 80075aa:	d919      	bls.n	80075e0 <_dtoa_r+0x2b0>
 80075ac:	0038      	movs	r0, r7
 80075ae:	f000 fe01 	bl	80081b4 <_Balloc>
 80075b2:	9006      	str	r0, [sp, #24]
 80075b4:	2800      	cmp	r0, #0
 80075b6:	d117      	bne.n	80075e8 <_dtoa_r+0x2b8>
 80075b8:	21d5      	movs	r1, #213	; 0xd5
 80075ba:	0002      	movs	r2, r0
 80075bc:	4b43      	ldr	r3, [pc, #268]	; (80076cc <_dtoa_r+0x39c>)
 80075be:	0049      	lsls	r1, r1, #1
 80075c0:	e6cb      	b.n	800735a <_dtoa_r+0x2a>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e7de      	b.n	8007584 <_dtoa_r+0x254>
 80075c6:	2300      	movs	r3, #0
 80075c8:	940f      	str	r4, [sp, #60]	; 0x3c
 80075ca:	9322      	str	r3, [sp, #136]	; 0x88
 80075cc:	3b01      	subs	r3, #1
 80075ce:	930c      	str	r3, [sp, #48]	; 0x30
 80075d0:	9307      	str	r3, [sp, #28]
 80075d2:	2200      	movs	r2, #0
 80075d4:	3313      	adds	r3, #19
 80075d6:	e7d0      	b.n	800757a <_dtoa_r+0x24a>
 80075d8:	2301      	movs	r3, #1
 80075da:	930f      	str	r3, [sp, #60]	; 0x3c
 80075dc:	3b02      	subs	r3, #2
 80075de:	e7f6      	b.n	80075ce <_dtoa_r+0x29e>
 80075e0:	3101      	adds	r1, #1
 80075e2:	6041      	str	r1, [r0, #4]
 80075e4:	0052      	lsls	r2, r2, #1
 80075e6:	e7dc      	b.n	80075a2 <_dtoa_r+0x272>
 80075e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ea:	9a06      	ldr	r2, [sp, #24]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	9b07      	ldr	r3, [sp, #28]
 80075f0:	2b0e      	cmp	r3, #14
 80075f2:	d900      	bls.n	80075f6 <_dtoa_r+0x2c6>
 80075f4:	e0eb      	b.n	80077ce <_dtoa_r+0x49e>
 80075f6:	2c00      	cmp	r4, #0
 80075f8:	d100      	bne.n	80075fc <_dtoa_r+0x2cc>
 80075fa:	e0e8      	b.n	80077ce <_dtoa_r+0x49e>
 80075fc:	9b02      	ldr	r3, [sp, #8]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	dd68      	ble.n	80076d4 <_dtoa_r+0x3a4>
 8007602:	001a      	movs	r2, r3
 8007604:	210f      	movs	r1, #15
 8007606:	4b2d      	ldr	r3, [pc, #180]	; (80076bc <_dtoa_r+0x38c>)
 8007608:	400a      	ands	r2, r1
 800760a:	00d2      	lsls	r2, r2, #3
 800760c:	189b      	adds	r3, r3, r2
 800760e:	681d      	ldr	r5, [r3, #0]
 8007610:	685e      	ldr	r6, [r3, #4]
 8007612:	9b02      	ldr	r3, [sp, #8]
 8007614:	111c      	asrs	r4, r3, #4
 8007616:	2302      	movs	r3, #2
 8007618:	9310      	str	r3, [sp, #64]	; 0x40
 800761a:	9b02      	ldr	r3, [sp, #8]
 800761c:	05db      	lsls	r3, r3, #23
 800761e:	d50b      	bpl.n	8007638 <_dtoa_r+0x308>
 8007620:	4b2b      	ldr	r3, [pc, #172]	; (80076d0 <_dtoa_r+0x3a0>)
 8007622:	400c      	ands	r4, r1
 8007624:	6a1a      	ldr	r2, [r3, #32]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	9812      	ldr	r0, [sp, #72]	; 0x48
 800762a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800762c:	f7fa fa74 	bl	8001b18 <__aeabi_ddiv>
 8007630:	2303      	movs	r3, #3
 8007632:	9008      	str	r0, [sp, #32]
 8007634:	9109      	str	r1, [sp, #36]	; 0x24
 8007636:	9310      	str	r3, [sp, #64]	; 0x40
 8007638:	4b25      	ldr	r3, [pc, #148]	; (80076d0 <_dtoa_r+0x3a0>)
 800763a:	9314      	str	r3, [sp, #80]	; 0x50
 800763c:	2c00      	cmp	r4, #0
 800763e:	d108      	bne.n	8007652 <_dtoa_r+0x322>
 8007640:	9808      	ldr	r0, [sp, #32]
 8007642:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007644:	002a      	movs	r2, r5
 8007646:	0033      	movs	r3, r6
 8007648:	f7fa fa66 	bl	8001b18 <__aeabi_ddiv>
 800764c:	9008      	str	r0, [sp, #32]
 800764e:	9109      	str	r1, [sp, #36]	; 0x24
 8007650:	e05c      	b.n	800770c <_dtoa_r+0x3dc>
 8007652:	2301      	movs	r3, #1
 8007654:	421c      	tst	r4, r3
 8007656:	d00b      	beq.n	8007670 <_dtoa_r+0x340>
 8007658:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800765a:	0028      	movs	r0, r5
 800765c:	3301      	adds	r3, #1
 800765e:	9310      	str	r3, [sp, #64]	; 0x40
 8007660:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007662:	0031      	movs	r1, r6
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	f7fa fe58 	bl	800231c <__aeabi_dmul>
 800766c:	0005      	movs	r5, r0
 800766e:	000e      	movs	r6, r1
 8007670:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007672:	1064      	asrs	r4, r4, #1
 8007674:	3308      	adds	r3, #8
 8007676:	e7e0      	b.n	800763a <_dtoa_r+0x30a>
 8007678:	08009c65 	.word	0x08009c65
 800767c:	08009c7c 	.word	0x08009c7c
 8007680:	7ff00000 	.word	0x7ff00000
 8007684:	0000270f 	.word	0x0000270f
 8007688:	08009c61 	.word	0x08009c61
 800768c:	08009c64 	.word	0x08009c64
 8007690:	08009c34 	.word	0x08009c34
 8007694:	08009c35 	.word	0x08009c35
 8007698:	3ff00000 	.word	0x3ff00000
 800769c:	fffffc01 	.word	0xfffffc01
 80076a0:	3ff80000 	.word	0x3ff80000
 80076a4:	636f4361 	.word	0x636f4361
 80076a8:	3fd287a7 	.word	0x3fd287a7
 80076ac:	8b60c8b3 	.word	0x8b60c8b3
 80076b0:	3fc68a28 	.word	0x3fc68a28
 80076b4:	509f79fb 	.word	0x509f79fb
 80076b8:	3fd34413 	.word	0x3fd34413
 80076bc:	08009dd0 	.word	0x08009dd0
 80076c0:	00000432 	.word	0x00000432
 80076c4:	00000412 	.word	0x00000412
 80076c8:	fe100000 	.word	0xfe100000
 80076cc:	08009cd7 	.word	0x08009cd7
 80076d0:	08009da8 	.word	0x08009da8
 80076d4:	2302      	movs	r3, #2
 80076d6:	9310      	str	r3, [sp, #64]	; 0x40
 80076d8:	9b02      	ldr	r3, [sp, #8]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d016      	beq.n	800770c <_dtoa_r+0x3dc>
 80076de:	9812      	ldr	r0, [sp, #72]	; 0x48
 80076e0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076e2:	425c      	negs	r4, r3
 80076e4:	230f      	movs	r3, #15
 80076e6:	4ab6      	ldr	r2, [pc, #728]	; (80079c0 <_dtoa_r+0x690>)
 80076e8:	4023      	ands	r3, r4
 80076ea:	00db      	lsls	r3, r3, #3
 80076ec:	18d3      	adds	r3, r2, r3
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f7fa fe13 	bl	800231c <__aeabi_dmul>
 80076f6:	2601      	movs	r6, #1
 80076f8:	2300      	movs	r3, #0
 80076fa:	9008      	str	r0, [sp, #32]
 80076fc:	9109      	str	r1, [sp, #36]	; 0x24
 80076fe:	4db1      	ldr	r5, [pc, #708]	; (80079c4 <_dtoa_r+0x694>)
 8007700:	1124      	asrs	r4, r4, #4
 8007702:	2c00      	cmp	r4, #0
 8007704:	d000      	beq.n	8007708 <_dtoa_r+0x3d8>
 8007706:	e094      	b.n	8007832 <_dtoa_r+0x502>
 8007708:	2b00      	cmp	r3, #0
 800770a:	d19f      	bne.n	800764c <_dtoa_r+0x31c>
 800770c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800770e:	2b00      	cmp	r3, #0
 8007710:	d100      	bne.n	8007714 <_dtoa_r+0x3e4>
 8007712:	e09b      	b.n	800784c <_dtoa_r+0x51c>
 8007714:	9c08      	ldr	r4, [sp, #32]
 8007716:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007718:	2200      	movs	r2, #0
 800771a:	0020      	movs	r0, r4
 800771c:	0029      	movs	r1, r5
 800771e:	4baa      	ldr	r3, [pc, #680]	; (80079c8 <_dtoa_r+0x698>)
 8007720:	f7f8 fe9a 	bl	8000458 <__aeabi_dcmplt>
 8007724:	2800      	cmp	r0, #0
 8007726:	d100      	bne.n	800772a <_dtoa_r+0x3fa>
 8007728:	e090      	b.n	800784c <_dtoa_r+0x51c>
 800772a:	9b07      	ldr	r3, [sp, #28]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d100      	bne.n	8007732 <_dtoa_r+0x402>
 8007730:	e08c      	b.n	800784c <_dtoa_r+0x51c>
 8007732:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007734:	2b00      	cmp	r3, #0
 8007736:	dd46      	ble.n	80077c6 <_dtoa_r+0x496>
 8007738:	9b02      	ldr	r3, [sp, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	0020      	movs	r0, r4
 800773e:	0029      	movs	r1, r5
 8007740:	1e5e      	subs	r6, r3, #1
 8007742:	4ba2      	ldr	r3, [pc, #648]	; (80079cc <_dtoa_r+0x69c>)
 8007744:	f7fa fdea 	bl	800231c <__aeabi_dmul>
 8007748:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800774a:	9008      	str	r0, [sp, #32]
 800774c:	9109      	str	r1, [sp, #36]	; 0x24
 800774e:	3301      	adds	r3, #1
 8007750:	9310      	str	r3, [sp, #64]	; 0x40
 8007752:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007754:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007756:	9c08      	ldr	r4, [sp, #32]
 8007758:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800775a:	9314      	str	r3, [sp, #80]	; 0x50
 800775c:	f7fb fc30 	bl	8002fc0 <__aeabi_i2d>
 8007760:	0022      	movs	r2, r4
 8007762:	002b      	movs	r3, r5
 8007764:	f7fa fdda 	bl	800231c <__aeabi_dmul>
 8007768:	2200      	movs	r2, #0
 800776a:	4b99      	ldr	r3, [pc, #612]	; (80079d0 <_dtoa_r+0x6a0>)
 800776c:	f7f9 fe98 	bl	80014a0 <__aeabi_dadd>
 8007770:	9010      	str	r0, [sp, #64]	; 0x40
 8007772:	9111      	str	r1, [sp, #68]	; 0x44
 8007774:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007776:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007778:	9208      	str	r2, [sp, #32]
 800777a:	9309      	str	r3, [sp, #36]	; 0x24
 800777c:	4a95      	ldr	r2, [pc, #596]	; (80079d4 <_dtoa_r+0x6a4>)
 800777e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007780:	4694      	mov	ip, r2
 8007782:	4463      	add	r3, ip
 8007784:	9317      	str	r3, [sp, #92]	; 0x5c
 8007786:	9309      	str	r3, [sp, #36]	; 0x24
 8007788:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800778a:	2b00      	cmp	r3, #0
 800778c:	d161      	bne.n	8007852 <_dtoa_r+0x522>
 800778e:	2200      	movs	r2, #0
 8007790:	0020      	movs	r0, r4
 8007792:	0029      	movs	r1, r5
 8007794:	4b90      	ldr	r3, [pc, #576]	; (80079d8 <_dtoa_r+0x6a8>)
 8007796:	f7fb f82d 	bl	80027f4 <__aeabi_dsub>
 800779a:	9a08      	ldr	r2, [sp, #32]
 800779c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800779e:	0004      	movs	r4, r0
 80077a0:	000d      	movs	r5, r1
 80077a2:	f7f8 fe6d 	bl	8000480 <__aeabi_dcmpgt>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d000      	beq.n	80077ac <_dtoa_r+0x47c>
 80077aa:	e2af      	b.n	8007d0c <_dtoa_r+0x9dc>
 80077ac:	488b      	ldr	r0, [pc, #556]	; (80079dc <_dtoa_r+0x6ac>)
 80077ae:	9911      	ldr	r1, [sp, #68]	; 0x44
 80077b0:	4684      	mov	ip, r0
 80077b2:	4461      	add	r1, ip
 80077b4:	000b      	movs	r3, r1
 80077b6:	0020      	movs	r0, r4
 80077b8:	0029      	movs	r1, r5
 80077ba:	9a08      	ldr	r2, [sp, #32]
 80077bc:	f7f8 fe4c 	bl	8000458 <__aeabi_dcmplt>
 80077c0:	2800      	cmp	r0, #0
 80077c2:	d000      	beq.n	80077c6 <_dtoa_r+0x496>
 80077c4:	e29f      	b.n	8007d06 <_dtoa_r+0x9d6>
 80077c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80077c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80077ca:	9308      	str	r3, [sp, #32]
 80077cc:	9409      	str	r4, [sp, #36]	; 0x24
 80077ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da00      	bge.n	80077d6 <_dtoa_r+0x4a6>
 80077d4:	e172      	b.n	8007abc <_dtoa_r+0x78c>
 80077d6:	9a02      	ldr	r2, [sp, #8]
 80077d8:	2a0e      	cmp	r2, #14
 80077da:	dd00      	ble.n	80077de <_dtoa_r+0x4ae>
 80077dc:	e16e      	b.n	8007abc <_dtoa_r+0x78c>
 80077de:	4b78      	ldr	r3, [pc, #480]	; (80079c0 <_dtoa_r+0x690>)
 80077e0:	00d2      	lsls	r2, r2, #3
 80077e2:	189b      	adds	r3, r3, r2
 80077e4:	685c      	ldr	r4, [r3, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	930a      	str	r3, [sp, #40]	; 0x28
 80077ea:	940b      	str	r4, [sp, #44]	; 0x2c
 80077ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	db00      	blt.n	80077f4 <_dtoa_r+0x4c4>
 80077f2:	e0f7      	b.n	80079e4 <_dtoa_r+0x6b4>
 80077f4:	9b07      	ldr	r3, [sp, #28]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dd00      	ble.n	80077fc <_dtoa_r+0x4cc>
 80077fa:	e0f3      	b.n	80079e4 <_dtoa_r+0x6b4>
 80077fc:	d000      	beq.n	8007800 <_dtoa_r+0x4d0>
 80077fe:	e282      	b.n	8007d06 <_dtoa_r+0x9d6>
 8007800:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007804:	2200      	movs	r2, #0
 8007806:	4b74      	ldr	r3, [pc, #464]	; (80079d8 <_dtoa_r+0x6a8>)
 8007808:	f7fa fd88 	bl	800231c <__aeabi_dmul>
 800780c:	9a08      	ldr	r2, [sp, #32]
 800780e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007810:	f7f8 fe40 	bl	8000494 <__aeabi_dcmpge>
 8007814:	9e07      	ldr	r6, [sp, #28]
 8007816:	0035      	movs	r5, r6
 8007818:	2800      	cmp	r0, #0
 800781a:	d000      	beq.n	800781e <_dtoa_r+0x4ee>
 800781c:	e259      	b.n	8007cd2 <_dtoa_r+0x9a2>
 800781e:	9b06      	ldr	r3, [sp, #24]
 8007820:	9a06      	ldr	r2, [sp, #24]
 8007822:	3301      	adds	r3, #1
 8007824:	9308      	str	r3, [sp, #32]
 8007826:	2331      	movs	r3, #49	; 0x31
 8007828:	7013      	strb	r3, [r2, #0]
 800782a:	9b02      	ldr	r3, [sp, #8]
 800782c:	3301      	adds	r3, #1
 800782e:	9302      	str	r3, [sp, #8]
 8007830:	e254      	b.n	8007cdc <_dtoa_r+0x9ac>
 8007832:	4234      	tst	r4, r6
 8007834:	d007      	beq.n	8007846 <_dtoa_r+0x516>
 8007836:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007838:	3301      	adds	r3, #1
 800783a:	9310      	str	r3, [sp, #64]	; 0x40
 800783c:	682a      	ldr	r2, [r5, #0]
 800783e:	686b      	ldr	r3, [r5, #4]
 8007840:	f7fa fd6c 	bl	800231c <__aeabi_dmul>
 8007844:	0033      	movs	r3, r6
 8007846:	1064      	asrs	r4, r4, #1
 8007848:	3508      	adds	r5, #8
 800784a:	e75a      	b.n	8007702 <_dtoa_r+0x3d2>
 800784c:	9e02      	ldr	r6, [sp, #8]
 800784e:	9b07      	ldr	r3, [sp, #28]
 8007850:	e780      	b.n	8007754 <_dtoa_r+0x424>
 8007852:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007854:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007856:	1e5a      	subs	r2, r3, #1
 8007858:	4b59      	ldr	r3, [pc, #356]	; (80079c0 <_dtoa_r+0x690>)
 800785a:	00d2      	lsls	r2, r2, #3
 800785c:	189b      	adds	r3, r3, r2
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2900      	cmp	r1, #0
 8007864:	d051      	beq.n	800790a <_dtoa_r+0x5da>
 8007866:	2000      	movs	r0, #0
 8007868:	495d      	ldr	r1, [pc, #372]	; (80079e0 <_dtoa_r+0x6b0>)
 800786a:	f7fa f955 	bl	8001b18 <__aeabi_ddiv>
 800786e:	9a08      	ldr	r2, [sp, #32]
 8007870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007872:	f7fa ffbf 	bl	80027f4 <__aeabi_dsub>
 8007876:	9a06      	ldr	r2, [sp, #24]
 8007878:	9b06      	ldr	r3, [sp, #24]
 800787a:	4694      	mov	ip, r2
 800787c:	9317      	str	r3, [sp, #92]	; 0x5c
 800787e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007880:	9010      	str	r0, [sp, #64]	; 0x40
 8007882:	9111      	str	r1, [sp, #68]	; 0x44
 8007884:	4463      	add	r3, ip
 8007886:	9319      	str	r3, [sp, #100]	; 0x64
 8007888:	0029      	movs	r1, r5
 800788a:	0020      	movs	r0, r4
 800788c:	f7fb fb62 	bl	8002f54 <__aeabi_d2iz>
 8007890:	9014      	str	r0, [sp, #80]	; 0x50
 8007892:	f7fb fb95 	bl	8002fc0 <__aeabi_i2d>
 8007896:	0002      	movs	r2, r0
 8007898:	000b      	movs	r3, r1
 800789a:	0020      	movs	r0, r4
 800789c:	0029      	movs	r1, r5
 800789e:	f7fa ffa9 	bl	80027f4 <__aeabi_dsub>
 80078a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80078a4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80078a6:	3301      	adds	r3, #1
 80078a8:	9308      	str	r3, [sp, #32]
 80078aa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80078ac:	0004      	movs	r4, r0
 80078ae:	3330      	adds	r3, #48	; 0x30
 80078b0:	7013      	strb	r3, [r2, #0]
 80078b2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078b6:	000d      	movs	r5, r1
 80078b8:	f7f8 fdce 	bl	8000458 <__aeabi_dcmplt>
 80078bc:	2800      	cmp	r0, #0
 80078be:	d175      	bne.n	80079ac <_dtoa_r+0x67c>
 80078c0:	0022      	movs	r2, r4
 80078c2:	002b      	movs	r3, r5
 80078c4:	2000      	movs	r0, #0
 80078c6:	4940      	ldr	r1, [pc, #256]	; (80079c8 <_dtoa_r+0x698>)
 80078c8:	f7fa ff94 	bl	80027f4 <__aeabi_dsub>
 80078cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80078ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078d0:	f7f8 fdc2 	bl	8000458 <__aeabi_dcmplt>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d000      	beq.n	80078da <_dtoa_r+0x5aa>
 80078d8:	e0d2      	b.n	8007a80 <_dtoa_r+0x750>
 80078da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80078dc:	9a08      	ldr	r2, [sp, #32]
 80078de:	4293      	cmp	r3, r2
 80078e0:	d100      	bne.n	80078e4 <_dtoa_r+0x5b4>
 80078e2:	e770      	b.n	80077c6 <_dtoa_r+0x496>
 80078e4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80078e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 80078e8:	2200      	movs	r2, #0
 80078ea:	4b38      	ldr	r3, [pc, #224]	; (80079cc <_dtoa_r+0x69c>)
 80078ec:	f7fa fd16 	bl	800231c <__aeabi_dmul>
 80078f0:	4b36      	ldr	r3, [pc, #216]	; (80079cc <_dtoa_r+0x69c>)
 80078f2:	9010      	str	r0, [sp, #64]	; 0x40
 80078f4:	9111      	str	r1, [sp, #68]	; 0x44
 80078f6:	2200      	movs	r2, #0
 80078f8:	0020      	movs	r0, r4
 80078fa:	0029      	movs	r1, r5
 80078fc:	f7fa fd0e 	bl	800231c <__aeabi_dmul>
 8007900:	9b08      	ldr	r3, [sp, #32]
 8007902:	0004      	movs	r4, r0
 8007904:	000d      	movs	r5, r1
 8007906:	9317      	str	r3, [sp, #92]	; 0x5c
 8007908:	e7be      	b.n	8007888 <_dtoa_r+0x558>
 800790a:	9808      	ldr	r0, [sp, #32]
 800790c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800790e:	f7fa fd05 	bl	800231c <__aeabi_dmul>
 8007912:	9a06      	ldr	r2, [sp, #24]
 8007914:	9b06      	ldr	r3, [sp, #24]
 8007916:	4694      	mov	ip, r2
 8007918:	9308      	str	r3, [sp, #32]
 800791a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800791c:	9010      	str	r0, [sp, #64]	; 0x40
 800791e:	9111      	str	r1, [sp, #68]	; 0x44
 8007920:	4463      	add	r3, ip
 8007922:	9319      	str	r3, [sp, #100]	; 0x64
 8007924:	0029      	movs	r1, r5
 8007926:	0020      	movs	r0, r4
 8007928:	f7fb fb14 	bl	8002f54 <__aeabi_d2iz>
 800792c:	9017      	str	r0, [sp, #92]	; 0x5c
 800792e:	f7fb fb47 	bl	8002fc0 <__aeabi_i2d>
 8007932:	0002      	movs	r2, r0
 8007934:	000b      	movs	r3, r1
 8007936:	0020      	movs	r0, r4
 8007938:	0029      	movs	r1, r5
 800793a:	f7fa ff5b 	bl	80027f4 <__aeabi_dsub>
 800793e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007940:	9a08      	ldr	r2, [sp, #32]
 8007942:	3330      	adds	r3, #48	; 0x30
 8007944:	7013      	strb	r3, [r2, #0]
 8007946:	0013      	movs	r3, r2
 8007948:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800794a:	3301      	adds	r3, #1
 800794c:	0004      	movs	r4, r0
 800794e:	000d      	movs	r5, r1
 8007950:	9308      	str	r3, [sp, #32]
 8007952:	4293      	cmp	r3, r2
 8007954:	d12c      	bne.n	80079b0 <_dtoa_r+0x680>
 8007956:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007958:	9911      	ldr	r1, [sp, #68]	; 0x44
 800795a:	9a06      	ldr	r2, [sp, #24]
 800795c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800795e:	4694      	mov	ip, r2
 8007960:	4463      	add	r3, ip
 8007962:	2200      	movs	r2, #0
 8007964:	9308      	str	r3, [sp, #32]
 8007966:	4b1e      	ldr	r3, [pc, #120]	; (80079e0 <_dtoa_r+0x6b0>)
 8007968:	f7f9 fd9a 	bl	80014a0 <__aeabi_dadd>
 800796c:	0002      	movs	r2, r0
 800796e:	000b      	movs	r3, r1
 8007970:	0020      	movs	r0, r4
 8007972:	0029      	movs	r1, r5
 8007974:	f7f8 fd84 	bl	8000480 <__aeabi_dcmpgt>
 8007978:	2800      	cmp	r0, #0
 800797a:	d000      	beq.n	800797e <_dtoa_r+0x64e>
 800797c:	e080      	b.n	8007a80 <_dtoa_r+0x750>
 800797e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007980:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007982:	2000      	movs	r0, #0
 8007984:	4916      	ldr	r1, [pc, #88]	; (80079e0 <_dtoa_r+0x6b0>)
 8007986:	f7fa ff35 	bl	80027f4 <__aeabi_dsub>
 800798a:	0002      	movs	r2, r0
 800798c:	000b      	movs	r3, r1
 800798e:	0020      	movs	r0, r4
 8007990:	0029      	movs	r1, r5
 8007992:	f7f8 fd61 	bl	8000458 <__aeabi_dcmplt>
 8007996:	2800      	cmp	r0, #0
 8007998:	d100      	bne.n	800799c <_dtoa_r+0x66c>
 800799a:	e714      	b.n	80077c6 <_dtoa_r+0x496>
 800799c:	9b08      	ldr	r3, [sp, #32]
 800799e:	001a      	movs	r2, r3
 80079a0:	3a01      	subs	r2, #1
 80079a2:	9208      	str	r2, [sp, #32]
 80079a4:	7812      	ldrb	r2, [r2, #0]
 80079a6:	2a30      	cmp	r2, #48	; 0x30
 80079a8:	d0f8      	beq.n	800799c <_dtoa_r+0x66c>
 80079aa:	9308      	str	r3, [sp, #32]
 80079ac:	9602      	str	r6, [sp, #8]
 80079ae:	e055      	b.n	8007a5c <_dtoa_r+0x72c>
 80079b0:	2200      	movs	r2, #0
 80079b2:	4b06      	ldr	r3, [pc, #24]	; (80079cc <_dtoa_r+0x69c>)
 80079b4:	f7fa fcb2 	bl	800231c <__aeabi_dmul>
 80079b8:	0004      	movs	r4, r0
 80079ba:	000d      	movs	r5, r1
 80079bc:	e7b2      	b.n	8007924 <_dtoa_r+0x5f4>
 80079be:	46c0      	nop			; (mov r8, r8)
 80079c0:	08009dd0 	.word	0x08009dd0
 80079c4:	08009da8 	.word	0x08009da8
 80079c8:	3ff00000 	.word	0x3ff00000
 80079cc:	40240000 	.word	0x40240000
 80079d0:	401c0000 	.word	0x401c0000
 80079d4:	fcc00000 	.word	0xfcc00000
 80079d8:	40140000 	.word	0x40140000
 80079dc:	7cc00000 	.word	0x7cc00000
 80079e0:	3fe00000 	.word	0x3fe00000
 80079e4:	9b07      	ldr	r3, [sp, #28]
 80079e6:	9e06      	ldr	r6, [sp, #24]
 80079e8:	3b01      	subs	r3, #1
 80079ea:	199b      	adds	r3, r3, r6
 80079ec:	930c      	str	r3, [sp, #48]	; 0x30
 80079ee:	9c08      	ldr	r4, [sp, #32]
 80079f0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80079f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f6:	0020      	movs	r0, r4
 80079f8:	0029      	movs	r1, r5
 80079fa:	f7fa f88d 	bl	8001b18 <__aeabi_ddiv>
 80079fe:	f7fb faa9 	bl	8002f54 <__aeabi_d2iz>
 8007a02:	9007      	str	r0, [sp, #28]
 8007a04:	f7fb fadc 	bl	8002fc0 <__aeabi_i2d>
 8007a08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a0c:	f7fa fc86 	bl	800231c <__aeabi_dmul>
 8007a10:	0002      	movs	r2, r0
 8007a12:	000b      	movs	r3, r1
 8007a14:	0020      	movs	r0, r4
 8007a16:	0029      	movs	r1, r5
 8007a18:	f7fa feec 	bl	80027f4 <__aeabi_dsub>
 8007a1c:	0033      	movs	r3, r6
 8007a1e:	9a07      	ldr	r2, [sp, #28]
 8007a20:	3601      	adds	r6, #1
 8007a22:	3230      	adds	r2, #48	; 0x30
 8007a24:	701a      	strb	r2, [r3, #0]
 8007a26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a28:	9608      	str	r6, [sp, #32]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d139      	bne.n	8007aa2 <_dtoa_r+0x772>
 8007a2e:	0002      	movs	r2, r0
 8007a30:	000b      	movs	r3, r1
 8007a32:	f7f9 fd35 	bl	80014a0 <__aeabi_dadd>
 8007a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a3a:	0004      	movs	r4, r0
 8007a3c:	000d      	movs	r5, r1
 8007a3e:	f7f8 fd1f 	bl	8000480 <__aeabi_dcmpgt>
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d11b      	bne.n	8007a7e <_dtoa_r+0x74e>
 8007a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a4a:	0020      	movs	r0, r4
 8007a4c:	0029      	movs	r1, r5
 8007a4e:	f7f8 fcfd 	bl	800044c <__aeabi_dcmpeq>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d002      	beq.n	8007a5c <_dtoa_r+0x72c>
 8007a56:	9b07      	ldr	r3, [sp, #28]
 8007a58:	07db      	lsls	r3, r3, #31
 8007a5a:	d410      	bmi.n	8007a7e <_dtoa_r+0x74e>
 8007a5c:	0038      	movs	r0, r7
 8007a5e:	9905      	ldr	r1, [sp, #20]
 8007a60:	f000 fbec 	bl	800823c <_Bfree>
 8007a64:	2300      	movs	r3, #0
 8007a66:	9a08      	ldr	r2, [sp, #32]
 8007a68:	9802      	ldr	r0, [sp, #8]
 8007a6a:	7013      	strb	r3, [r2, #0]
 8007a6c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007a6e:	3001      	adds	r0, #1
 8007a70:	6018      	str	r0, [r3, #0]
 8007a72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d100      	bne.n	8007a7a <_dtoa_r+0x74a>
 8007a78:	e4a6      	b.n	80073c8 <_dtoa_r+0x98>
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	e4a4      	b.n	80073c8 <_dtoa_r+0x98>
 8007a7e:	9e02      	ldr	r6, [sp, #8]
 8007a80:	9b08      	ldr	r3, [sp, #32]
 8007a82:	9308      	str	r3, [sp, #32]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	781a      	ldrb	r2, [r3, #0]
 8007a88:	2a39      	cmp	r2, #57	; 0x39
 8007a8a:	d106      	bne.n	8007a9a <_dtoa_r+0x76a>
 8007a8c:	9a06      	ldr	r2, [sp, #24]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d1f7      	bne.n	8007a82 <_dtoa_r+0x752>
 8007a92:	2230      	movs	r2, #48	; 0x30
 8007a94:	9906      	ldr	r1, [sp, #24]
 8007a96:	3601      	adds	r6, #1
 8007a98:	700a      	strb	r2, [r1, #0]
 8007a9a:	781a      	ldrb	r2, [r3, #0]
 8007a9c:	3201      	adds	r2, #1
 8007a9e:	701a      	strb	r2, [r3, #0]
 8007aa0:	e784      	b.n	80079ac <_dtoa_r+0x67c>
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	4baa      	ldr	r3, [pc, #680]	; (8007d50 <_dtoa_r+0xa20>)
 8007aa6:	f7fa fc39 	bl	800231c <__aeabi_dmul>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2300      	movs	r3, #0
 8007aae:	0004      	movs	r4, r0
 8007ab0:	000d      	movs	r5, r1
 8007ab2:	f7f8 fccb 	bl	800044c <__aeabi_dcmpeq>
 8007ab6:	2800      	cmp	r0, #0
 8007ab8:	d09b      	beq.n	80079f2 <_dtoa_r+0x6c2>
 8007aba:	e7cf      	b.n	8007a5c <_dtoa_r+0x72c>
 8007abc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007abe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007ac0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	d012      	beq.n	8007aec <_dtoa_r+0x7bc>
 8007ac6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007ac8:	2a01      	cmp	r2, #1
 8007aca:	dc66      	bgt.n	8007b9a <_dtoa_r+0x86a>
 8007acc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	d05d      	beq.n	8007b8e <_dtoa_r+0x85e>
 8007ad2:	4aa0      	ldr	r2, [pc, #640]	; (8007d54 <_dtoa_r+0xa24>)
 8007ad4:	189b      	adds	r3, r3, r2
 8007ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ad8:	2101      	movs	r1, #1
 8007ada:	18d2      	adds	r2, r2, r3
 8007adc:	920a      	str	r2, [sp, #40]	; 0x28
 8007ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ae0:	0038      	movs	r0, r7
 8007ae2:	18d3      	adds	r3, r2, r3
 8007ae4:	930d      	str	r3, [sp, #52]	; 0x34
 8007ae6:	f000 fc59 	bl	800839c <__i2b>
 8007aea:	0005      	movs	r5, r0
 8007aec:	2c00      	cmp	r4, #0
 8007aee:	dd0e      	ble.n	8007b0e <_dtoa_r+0x7de>
 8007af0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	dd0b      	ble.n	8007b0e <_dtoa_r+0x7de>
 8007af6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007af8:	0023      	movs	r3, r4
 8007afa:	4294      	cmp	r4, r2
 8007afc:	dd00      	ble.n	8007b00 <_dtoa_r+0x7d0>
 8007afe:	0013      	movs	r3, r2
 8007b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b02:	1ae4      	subs	r4, r4, r3
 8007b04:	1ad2      	subs	r2, r2, r3
 8007b06:	920a      	str	r2, [sp, #40]	; 0x28
 8007b08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	930d      	str	r3, [sp, #52]	; 0x34
 8007b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d01f      	beq.n	8007b54 <_dtoa_r+0x824>
 8007b14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d054      	beq.n	8007bc4 <_dtoa_r+0x894>
 8007b1a:	2e00      	cmp	r6, #0
 8007b1c:	dd11      	ble.n	8007b42 <_dtoa_r+0x812>
 8007b1e:	0029      	movs	r1, r5
 8007b20:	0032      	movs	r2, r6
 8007b22:	0038      	movs	r0, r7
 8007b24:	f000 fd00 	bl	8008528 <__pow5mult>
 8007b28:	9a05      	ldr	r2, [sp, #20]
 8007b2a:	0001      	movs	r1, r0
 8007b2c:	0005      	movs	r5, r0
 8007b2e:	0038      	movs	r0, r7
 8007b30:	f000 fc4a 	bl	80083c8 <__multiply>
 8007b34:	9905      	ldr	r1, [sp, #20]
 8007b36:	9014      	str	r0, [sp, #80]	; 0x50
 8007b38:	0038      	movs	r0, r7
 8007b3a:	f000 fb7f 	bl	800823c <_Bfree>
 8007b3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b40:	9305      	str	r3, [sp, #20]
 8007b42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b44:	1b9a      	subs	r2, r3, r6
 8007b46:	42b3      	cmp	r3, r6
 8007b48:	d004      	beq.n	8007b54 <_dtoa_r+0x824>
 8007b4a:	0038      	movs	r0, r7
 8007b4c:	9905      	ldr	r1, [sp, #20]
 8007b4e:	f000 fceb 	bl	8008528 <__pow5mult>
 8007b52:	9005      	str	r0, [sp, #20]
 8007b54:	2101      	movs	r1, #1
 8007b56:	0038      	movs	r0, r7
 8007b58:	f000 fc20 	bl	800839c <__i2b>
 8007b5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b5e:	0006      	movs	r6, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	dd31      	ble.n	8007bc8 <_dtoa_r+0x898>
 8007b64:	001a      	movs	r2, r3
 8007b66:	0001      	movs	r1, r0
 8007b68:	0038      	movs	r0, r7
 8007b6a:	f000 fcdd 	bl	8008528 <__pow5mult>
 8007b6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007b70:	0006      	movs	r6, r0
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	dd2d      	ble.n	8007bd2 <_dtoa_r+0x8a2>
 8007b76:	2300      	movs	r3, #0
 8007b78:	930e      	str	r3, [sp, #56]	; 0x38
 8007b7a:	6933      	ldr	r3, [r6, #16]
 8007b7c:	3303      	adds	r3, #3
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	18f3      	adds	r3, r6, r3
 8007b82:	6858      	ldr	r0, [r3, #4]
 8007b84:	f000 fbc2 	bl	800830c <__hi0bits>
 8007b88:	2320      	movs	r3, #32
 8007b8a:	1a18      	subs	r0, r3, r0
 8007b8c:	e039      	b.n	8007c02 <_dtoa_r+0x8d2>
 8007b8e:	2336      	movs	r3, #54	; 0x36
 8007b90:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007b92:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007b94:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	e79d      	b.n	8007ad6 <_dtoa_r+0x7a6>
 8007b9a:	9b07      	ldr	r3, [sp, #28]
 8007b9c:	1e5e      	subs	r6, r3, #1
 8007b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ba0:	42b3      	cmp	r3, r6
 8007ba2:	db07      	blt.n	8007bb4 <_dtoa_r+0x884>
 8007ba4:	1b9e      	subs	r6, r3, r6
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	da93      	bge.n	8007ad6 <_dtoa_r+0x7a6>
 8007bae:	1ae4      	subs	r4, r4, r3
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e790      	b.n	8007ad6 <_dtoa_r+0x7a6>
 8007bb4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007bb6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007bb8:	1af3      	subs	r3, r6, r3
 8007bba:	18d3      	adds	r3, r2, r3
 8007bbc:	960e      	str	r6, [sp, #56]	; 0x38
 8007bbe:	9315      	str	r3, [sp, #84]	; 0x54
 8007bc0:	2600      	movs	r6, #0
 8007bc2:	e7f0      	b.n	8007ba6 <_dtoa_r+0x876>
 8007bc4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bc6:	e7c0      	b.n	8007b4a <_dtoa_r+0x81a>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	930e      	str	r3, [sp, #56]	; 0x38
 8007bcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	dc13      	bgt.n	8007bfa <_dtoa_r+0x8ca>
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	930e      	str	r3, [sp, #56]	; 0x38
 8007bd6:	9b08      	ldr	r3, [sp, #32]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10e      	bne.n	8007bfa <_dtoa_r+0x8ca>
 8007bdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bde:	031b      	lsls	r3, r3, #12
 8007be0:	d10b      	bne.n	8007bfa <_dtoa_r+0x8ca>
 8007be2:	4b5d      	ldr	r3, [pc, #372]	; (8007d58 <_dtoa_r+0xa28>)
 8007be4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007be6:	4213      	tst	r3, r2
 8007be8:	d007      	beq.n	8007bfa <_dtoa_r+0x8ca>
 8007bea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bec:	3301      	adds	r3, #1
 8007bee:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	930d      	str	r3, [sp, #52]	; 0x34
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	930e      	str	r3, [sp, #56]	; 0x38
 8007bfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bfc:	2001      	movs	r0, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1bb      	bne.n	8007b7a <_dtoa_r+0x84a>
 8007c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c04:	221f      	movs	r2, #31
 8007c06:	1818      	adds	r0, r3, r0
 8007c08:	0003      	movs	r3, r0
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	4210      	tst	r0, r2
 8007c0e:	d046      	beq.n	8007c9e <_dtoa_r+0x96e>
 8007c10:	3201      	adds	r2, #1
 8007c12:	1ad2      	subs	r2, r2, r3
 8007c14:	2a04      	cmp	r2, #4
 8007c16:	dd3f      	ble.n	8007c98 <_dtoa_r+0x968>
 8007c18:	221c      	movs	r2, #28
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c1e:	18e4      	adds	r4, r4, r3
 8007c20:	18d2      	adds	r2, r2, r3
 8007c22:	920a      	str	r2, [sp, #40]	; 0x28
 8007c24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c26:	18d3      	adds	r3, r2, r3
 8007c28:	930d      	str	r3, [sp, #52]	; 0x34
 8007c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	dd05      	ble.n	8007c3c <_dtoa_r+0x90c>
 8007c30:	001a      	movs	r2, r3
 8007c32:	0038      	movs	r0, r7
 8007c34:	9905      	ldr	r1, [sp, #20]
 8007c36:	f000 fcd3 	bl	80085e0 <__lshift>
 8007c3a:	9005      	str	r0, [sp, #20]
 8007c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	dd05      	ble.n	8007c4e <_dtoa_r+0x91e>
 8007c42:	0031      	movs	r1, r6
 8007c44:	001a      	movs	r2, r3
 8007c46:	0038      	movs	r0, r7
 8007c48:	f000 fcca 	bl	80085e0 <__lshift>
 8007c4c:	0006      	movs	r6, r0
 8007c4e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d026      	beq.n	8007ca2 <_dtoa_r+0x972>
 8007c54:	0031      	movs	r1, r6
 8007c56:	9805      	ldr	r0, [sp, #20]
 8007c58:	f000 fd30 	bl	80086bc <__mcmp>
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	da20      	bge.n	8007ca2 <_dtoa_r+0x972>
 8007c60:	9b02      	ldr	r3, [sp, #8]
 8007c62:	220a      	movs	r2, #10
 8007c64:	3b01      	subs	r3, #1
 8007c66:	9302      	str	r3, [sp, #8]
 8007c68:	0038      	movs	r0, r7
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	9905      	ldr	r1, [sp, #20]
 8007c6e:	f000 fb09 	bl	8008284 <__multadd>
 8007c72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c74:	9005      	str	r0, [sp, #20]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d100      	bne.n	8007c7c <_dtoa_r+0x94c>
 8007c7a:	e166      	b.n	8007f4a <_dtoa_r+0xc1a>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	0029      	movs	r1, r5
 8007c80:	220a      	movs	r2, #10
 8007c82:	0038      	movs	r0, r7
 8007c84:	f000 fafe 	bl	8008284 <__multadd>
 8007c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007c8a:	0005      	movs	r5, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	dc47      	bgt.n	8007d20 <_dtoa_r+0x9f0>
 8007c90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	dc0d      	bgt.n	8007cb2 <_dtoa_r+0x982>
 8007c96:	e043      	b.n	8007d20 <_dtoa_r+0x9f0>
 8007c98:	2a04      	cmp	r2, #4
 8007c9a:	d0c6      	beq.n	8007c2a <_dtoa_r+0x8fa>
 8007c9c:	0013      	movs	r3, r2
 8007c9e:	331c      	adds	r3, #28
 8007ca0:	e7bc      	b.n	8007c1c <_dtoa_r+0x8ec>
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	dc35      	bgt.n	8007d14 <_dtoa_r+0x9e4>
 8007ca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	dd32      	ble.n	8007d14 <_dtoa_r+0x9e4>
 8007cae:	9b07      	ldr	r3, [sp, #28]
 8007cb0:	930c      	str	r3, [sp, #48]	; 0x30
 8007cb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10c      	bne.n	8007cd2 <_dtoa_r+0x9a2>
 8007cb8:	0031      	movs	r1, r6
 8007cba:	2205      	movs	r2, #5
 8007cbc:	0038      	movs	r0, r7
 8007cbe:	f000 fae1 	bl	8008284 <__multadd>
 8007cc2:	0006      	movs	r6, r0
 8007cc4:	0001      	movs	r1, r0
 8007cc6:	9805      	ldr	r0, [sp, #20]
 8007cc8:	f000 fcf8 	bl	80086bc <__mcmp>
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dd00      	ble.n	8007cd2 <_dtoa_r+0x9a2>
 8007cd0:	e5a5      	b.n	800781e <_dtoa_r+0x4ee>
 8007cd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007cd4:	43db      	mvns	r3, r3
 8007cd6:	9302      	str	r3, [sp, #8]
 8007cd8:	9b06      	ldr	r3, [sp, #24]
 8007cda:	9308      	str	r3, [sp, #32]
 8007cdc:	2400      	movs	r4, #0
 8007cde:	0031      	movs	r1, r6
 8007ce0:	0038      	movs	r0, r7
 8007ce2:	f000 faab 	bl	800823c <_Bfree>
 8007ce6:	2d00      	cmp	r5, #0
 8007ce8:	d100      	bne.n	8007cec <_dtoa_r+0x9bc>
 8007cea:	e6b7      	b.n	8007a5c <_dtoa_r+0x72c>
 8007cec:	2c00      	cmp	r4, #0
 8007cee:	d005      	beq.n	8007cfc <_dtoa_r+0x9cc>
 8007cf0:	42ac      	cmp	r4, r5
 8007cf2:	d003      	beq.n	8007cfc <_dtoa_r+0x9cc>
 8007cf4:	0021      	movs	r1, r4
 8007cf6:	0038      	movs	r0, r7
 8007cf8:	f000 faa0 	bl	800823c <_Bfree>
 8007cfc:	0029      	movs	r1, r5
 8007cfe:	0038      	movs	r0, r7
 8007d00:	f000 fa9c 	bl	800823c <_Bfree>
 8007d04:	e6aa      	b.n	8007a5c <_dtoa_r+0x72c>
 8007d06:	2600      	movs	r6, #0
 8007d08:	0035      	movs	r5, r6
 8007d0a:	e7e2      	b.n	8007cd2 <_dtoa_r+0x9a2>
 8007d0c:	9602      	str	r6, [sp, #8]
 8007d0e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8007d10:	0035      	movs	r5, r6
 8007d12:	e584      	b.n	800781e <_dtoa_r+0x4ee>
 8007d14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d100      	bne.n	8007d1c <_dtoa_r+0x9ec>
 8007d1a:	e0ce      	b.n	8007eba <_dtoa_r+0xb8a>
 8007d1c:	9b07      	ldr	r3, [sp, #28]
 8007d1e:	930c      	str	r3, [sp, #48]	; 0x30
 8007d20:	2c00      	cmp	r4, #0
 8007d22:	dd05      	ble.n	8007d30 <_dtoa_r+0xa00>
 8007d24:	0029      	movs	r1, r5
 8007d26:	0022      	movs	r2, r4
 8007d28:	0038      	movs	r0, r7
 8007d2a:	f000 fc59 	bl	80085e0 <__lshift>
 8007d2e:	0005      	movs	r5, r0
 8007d30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d32:	0028      	movs	r0, r5
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d022      	beq.n	8007d7e <_dtoa_r+0xa4e>
 8007d38:	0038      	movs	r0, r7
 8007d3a:	6869      	ldr	r1, [r5, #4]
 8007d3c:	f000 fa3a 	bl	80081b4 <_Balloc>
 8007d40:	1e04      	subs	r4, r0, #0
 8007d42:	d10f      	bne.n	8007d64 <_dtoa_r+0xa34>
 8007d44:	0002      	movs	r2, r0
 8007d46:	4b05      	ldr	r3, [pc, #20]	; (8007d5c <_dtoa_r+0xa2c>)
 8007d48:	4905      	ldr	r1, [pc, #20]	; (8007d60 <_dtoa_r+0xa30>)
 8007d4a:	f7ff fb06 	bl	800735a <_dtoa_r+0x2a>
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	40240000 	.word	0x40240000
 8007d54:	00000433 	.word	0x00000433
 8007d58:	7ff00000 	.word	0x7ff00000
 8007d5c:	08009cd7 	.word	0x08009cd7
 8007d60:	000002ea 	.word	0x000002ea
 8007d64:	0029      	movs	r1, r5
 8007d66:	692b      	ldr	r3, [r5, #16]
 8007d68:	310c      	adds	r1, #12
 8007d6a:	1c9a      	adds	r2, r3, #2
 8007d6c:	0092      	lsls	r2, r2, #2
 8007d6e:	300c      	adds	r0, #12
 8007d70:	f000 fa17 	bl	80081a2 <memcpy>
 8007d74:	2201      	movs	r2, #1
 8007d76:	0021      	movs	r1, r4
 8007d78:	0038      	movs	r0, r7
 8007d7a:	f000 fc31 	bl	80085e0 <__lshift>
 8007d7e:	9b06      	ldr	r3, [sp, #24]
 8007d80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d82:	930a      	str	r3, [sp, #40]	; 0x28
 8007d84:	3b01      	subs	r3, #1
 8007d86:	189b      	adds	r3, r3, r2
 8007d88:	2201      	movs	r2, #1
 8007d8a:	002c      	movs	r4, r5
 8007d8c:	0005      	movs	r5, r0
 8007d8e:	9314      	str	r3, [sp, #80]	; 0x50
 8007d90:	9b08      	ldr	r3, [sp, #32]
 8007d92:	4013      	ands	r3, r2
 8007d94:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d96:	0031      	movs	r1, r6
 8007d98:	9805      	ldr	r0, [sp, #20]
 8007d9a:	f7ff fa3d 	bl	8007218 <quorem>
 8007d9e:	0003      	movs	r3, r0
 8007da0:	0021      	movs	r1, r4
 8007da2:	3330      	adds	r3, #48	; 0x30
 8007da4:	900d      	str	r0, [sp, #52]	; 0x34
 8007da6:	9805      	ldr	r0, [sp, #20]
 8007da8:	9307      	str	r3, [sp, #28]
 8007daa:	f000 fc87 	bl	80086bc <__mcmp>
 8007dae:	002a      	movs	r2, r5
 8007db0:	900e      	str	r0, [sp, #56]	; 0x38
 8007db2:	0031      	movs	r1, r6
 8007db4:	0038      	movs	r0, r7
 8007db6:	f000 fc9d 	bl	80086f4 <__mdiff>
 8007dba:	68c3      	ldr	r3, [r0, #12]
 8007dbc:	9008      	str	r0, [sp, #32]
 8007dbe:	9310      	str	r3, [sp, #64]	; 0x40
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	930c      	str	r3, [sp, #48]	; 0x30
 8007dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <_dtoa_r+0xaa4>
 8007dca:	0001      	movs	r1, r0
 8007dcc:	9805      	ldr	r0, [sp, #20]
 8007dce:	f000 fc75 	bl	80086bc <__mcmp>
 8007dd2:	900c      	str	r0, [sp, #48]	; 0x30
 8007dd4:	0038      	movs	r0, r7
 8007dd6:	9908      	ldr	r1, [sp, #32]
 8007dd8:	f000 fa30 	bl	800823c <_Bfree>
 8007ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007de0:	3301      	adds	r3, #1
 8007de2:	9308      	str	r3, [sp, #32]
 8007de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007de6:	4313      	orrs	r3, r2
 8007de8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007dea:	4313      	orrs	r3, r2
 8007dec:	d10c      	bne.n	8007e08 <_dtoa_r+0xad8>
 8007dee:	9b07      	ldr	r3, [sp, #28]
 8007df0:	2b39      	cmp	r3, #57	; 0x39
 8007df2:	d026      	beq.n	8007e42 <_dtoa_r+0xb12>
 8007df4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	dd02      	ble.n	8007e00 <_dtoa_r+0xad0>
 8007dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007dfc:	3331      	adds	r3, #49	; 0x31
 8007dfe:	9307      	str	r3, [sp, #28]
 8007e00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e02:	9a07      	ldr	r2, [sp, #28]
 8007e04:	701a      	strb	r2, [r3, #0]
 8007e06:	e76a      	b.n	8007cde <_dtoa_r+0x9ae>
 8007e08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	db04      	blt.n	8007e18 <_dtoa_r+0xae8>
 8007e0e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007e10:	4313      	orrs	r3, r2
 8007e12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d11f      	bne.n	8007e58 <_dtoa_r+0xb28>
 8007e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	ddf0      	ble.n	8007e00 <_dtoa_r+0xad0>
 8007e1e:	9905      	ldr	r1, [sp, #20]
 8007e20:	2201      	movs	r2, #1
 8007e22:	0038      	movs	r0, r7
 8007e24:	f000 fbdc 	bl	80085e0 <__lshift>
 8007e28:	0031      	movs	r1, r6
 8007e2a:	9005      	str	r0, [sp, #20]
 8007e2c:	f000 fc46 	bl	80086bc <__mcmp>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	dc03      	bgt.n	8007e3c <_dtoa_r+0xb0c>
 8007e34:	d1e4      	bne.n	8007e00 <_dtoa_r+0xad0>
 8007e36:	9b07      	ldr	r3, [sp, #28]
 8007e38:	07db      	lsls	r3, r3, #31
 8007e3a:	d5e1      	bpl.n	8007e00 <_dtoa_r+0xad0>
 8007e3c:	9b07      	ldr	r3, [sp, #28]
 8007e3e:	2b39      	cmp	r3, #57	; 0x39
 8007e40:	d1db      	bne.n	8007dfa <_dtoa_r+0xaca>
 8007e42:	2339      	movs	r3, #57	; 0x39
 8007e44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e46:	7013      	strb	r3, [r2, #0]
 8007e48:	9b08      	ldr	r3, [sp, #32]
 8007e4a:	9308      	str	r3, [sp, #32]
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	781a      	ldrb	r2, [r3, #0]
 8007e50:	2a39      	cmp	r2, #57	; 0x39
 8007e52:	d068      	beq.n	8007f26 <_dtoa_r+0xbf6>
 8007e54:	3201      	adds	r2, #1
 8007e56:	e7d5      	b.n	8007e04 <_dtoa_r+0xad4>
 8007e58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dd07      	ble.n	8007e6e <_dtoa_r+0xb3e>
 8007e5e:	9b07      	ldr	r3, [sp, #28]
 8007e60:	2b39      	cmp	r3, #57	; 0x39
 8007e62:	d0ee      	beq.n	8007e42 <_dtoa_r+0xb12>
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e68:	3301      	adds	r3, #1
 8007e6a:	7013      	strb	r3, [r2, #0]
 8007e6c:	e737      	b.n	8007cde <_dtoa_r+0x9ae>
 8007e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e70:	9a07      	ldr	r2, [sp, #28]
 8007e72:	701a      	strb	r2, [r3, #0]
 8007e74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d03e      	beq.n	8007efa <_dtoa_r+0xbca>
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	220a      	movs	r2, #10
 8007e80:	9905      	ldr	r1, [sp, #20]
 8007e82:	0038      	movs	r0, r7
 8007e84:	f000 f9fe 	bl	8008284 <__multadd>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	9005      	str	r0, [sp, #20]
 8007e8c:	220a      	movs	r2, #10
 8007e8e:	0021      	movs	r1, r4
 8007e90:	0038      	movs	r0, r7
 8007e92:	42ac      	cmp	r4, r5
 8007e94:	d106      	bne.n	8007ea4 <_dtoa_r+0xb74>
 8007e96:	f000 f9f5 	bl	8008284 <__multadd>
 8007e9a:	0004      	movs	r4, r0
 8007e9c:	0005      	movs	r5, r0
 8007e9e:	9b08      	ldr	r3, [sp, #32]
 8007ea0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ea2:	e778      	b.n	8007d96 <_dtoa_r+0xa66>
 8007ea4:	f000 f9ee 	bl	8008284 <__multadd>
 8007ea8:	0029      	movs	r1, r5
 8007eaa:	0004      	movs	r4, r0
 8007eac:	2300      	movs	r3, #0
 8007eae:	220a      	movs	r2, #10
 8007eb0:	0038      	movs	r0, r7
 8007eb2:	f000 f9e7 	bl	8008284 <__multadd>
 8007eb6:	0005      	movs	r5, r0
 8007eb8:	e7f1      	b.n	8007e9e <_dtoa_r+0xb6e>
 8007eba:	9b07      	ldr	r3, [sp, #28]
 8007ebc:	930c      	str	r3, [sp, #48]	; 0x30
 8007ebe:	2400      	movs	r4, #0
 8007ec0:	0031      	movs	r1, r6
 8007ec2:	9805      	ldr	r0, [sp, #20]
 8007ec4:	f7ff f9a8 	bl	8007218 <quorem>
 8007ec8:	9b06      	ldr	r3, [sp, #24]
 8007eca:	3030      	adds	r0, #48	; 0x30
 8007ecc:	5518      	strb	r0, [r3, r4]
 8007ece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ed0:	3401      	adds	r4, #1
 8007ed2:	9007      	str	r0, [sp, #28]
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	dd07      	ble.n	8007ee8 <_dtoa_r+0xbb8>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	220a      	movs	r2, #10
 8007edc:	0038      	movs	r0, r7
 8007ede:	9905      	ldr	r1, [sp, #20]
 8007ee0:	f000 f9d0 	bl	8008284 <__multadd>
 8007ee4:	9005      	str	r0, [sp, #20]
 8007ee6:	e7eb      	b.n	8007ec0 <_dtoa_r+0xb90>
 8007ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007eea:	2001      	movs	r0, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	dd00      	ble.n	8007ef2 <_dtoa_r+0xbc2>
 8007ef0:	0018      	movs	r0, r3
 8007ef2:	2400      	movs	r4, #0
 8007ef4:	9b06      	ldr	r3, [sp, #24]
 8007ef6:	181b      	adds	r3, r3, r0
 8007ef8:	9308      	str	r3, [sp, #32]
 8007efa:	9905      	ldr	r1, [sp, #20]
 8007efc:	2201      	movs	r2, #1
 8007efe:	0038      	movs	r0, r7
 8007f00:	f000 fb6e 	bl	80085e0 <__lshift>
 8007f04:	0031      	movs	r1, r6
 8007f06:	9005      	str	r0, [sp, #20]
 8007f08:	f000 fbd8 	bl	80086bc <__mcmp>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	dc9b      	bgt.n	8007e48 <_dtoa_r+0xb18>
 8007f10:	d102      	bne.n	8007f18 <_dtoa_r+0xbe8>
 8007f12:	9b07      	ldr	r3, [sp, #28]
 8007f14:	07db      	lsls	r3, r3, #31
 8007f16:	d497      	bmi.n	8007e48 <_dtoa_r+0xb18>
 8007f18:	9b08      	ldr	r3, [sp, #32]
 8007f1a:	9308      	str	r3, [sp, #32]
 8007f1c:	3b01      	subs	r3, #1
 8007f1e:	781a      	ldrb	r2, [r3, #0]
 8007f20:	2a30      	cmp	r2, #48	; 0x30
 8007f22:	d0fa      	beq.n	8007f1a <_dtoa_r+0xbea>
 8007f24:	e6db      	b.n	8007cde <_dtoa_r+0x9ae>
 8007f26:	9a06      	ldr	r2, [sp, #24]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d18e      	bne.n	8007e4a <_dtoa_r+0xb1a>
 8007f2c:	9b02      	ldr	r3, [sp, #8]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	9302      	str	r3, [sp, #8]
 8007f32:	2331      	movs	r3, #49	; 0x31
 8007f34:	e799      	b.n	8007e6a <_dtoa_r+0xb3a>
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <_dtoa_r+0xc2c>)
 8007f38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f3a:	9306      	str	r3, [sp, #24]
 8007f3c:	4b08      	ldr	r3, [pc, #32]	; (8007f60 <_dtoa_r+0xc30>)
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d001      	beq.n	8007f46 <_dtoa_r+0xc16>
 8007f42:	f7ff fa3f 	bl	80073c4 <_dtoa_r+0x94>
 8007f46:	f7ff fa3f 	bl	80073c8 <_dtoa_r+0x98>
 8007f4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	dcb6      	bgt.n	8007ebe <_dtoa_r+0xb8e>
 8007f50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	dd00      	ble.n	8007f58 <_dtoa_r+0xc28>
 8007f56:	e6ac      	b.n	8007cb2 <_dtoa_r+0x982>
 8007f58:	e7b1      	b.n	8007ebe <_dtoa_r+0xb8e>
 8007f5a:	46c0      	nop			; (mov r8, r8)
 8007f5c:	08009c58 	.word	0x08009c58
 8007f60:	08009c60 	.word	0x08009c60

08007f64 <std>:
 8007f64:	2300      	movs	r3, #0
 8007f66:	b510      	push	{r4, lr}
 8007f68:	0004      	movs	r4, r0
 8007f6a:	6003      	str	r3, [r0, #0]
 8007f6c:	6043      	str	r3, [r0, #4]
 8007f6e:	6083      	str	r3, [r0, #8]
 8007f70:	8181      	strh	r1, [r0, #12]
 8007f72:	6643      	str	r3, [r0, #100]	; 0x64
 8007f74:	0019      	movs	r1, r3
 8007f76:	81c2      	strh	r2, [r0, #14]
 8007f78:	6103      	str	r3, [r0, #16]
 8007f7a:	6143      	str	r3, [r0, #20]
 8007f7c:	6183      	str	r3, [r0, #24]
 8007f7e:	2208      	movs	r2, #8
 8007f80:	305c      	adds	r0, #92	; 0x5c
 8007f82:	f7fe fcb9 	bl	80068f8 <memset>
 8007f86:	4b05      	ldr	r3, [pc, #20]	; (8007f9c <std+0x38>)
 8007f88:	6224      	str	r4, [r4, #32]
 8007f8a:	6263      	str	r3, [r4, #36]	; 0x24
 8007f8c:	4b04      	ldr	r3, [pc, #16]	; (8007fa0 <std+0x3c>)
 8007f8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f90:	4b04      	ldr	r3, [pc, #16]	; (8007fa4 <std+0x40>)
 8007f92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f94:	4b04      	ldr	r3, [pc, #16]	; (8007fa8 <std+0x44>)
 8007f96:	6323      	str	r3, [r4, #48]	; 0x30
 8007f98:	bd10      	pop	{r4, pc}
 8007f9a:	46c0      	nop			; (mov r8, r8)
 8007f9c:	08008df1 	.word	0x08008df1
 8007fa0:	08008e19 	.word	0x08008e19
 8007fa4:	08008e51 	.word	0x08008e51
 8007fa8:	08008e7d 	.word	0x08008e7d

08007fac <_cleanup_r>:
 8007fac:	b510      	push	{r4, lr}
 8007fae:	4902      	ldr	r1, [pc, #8]	; (8007fb8 <_cleanup_r+0xc>)
 8007fb0:	f000 f8ba 	bl	8008128 <_fwalk_reent>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	080091c5 	.word	0x080091c5

08007fbc <__sfmoreglue>:
 8007fbc:	b570      	push	{r4, r5, r6, lr}
 8007fbe:	2568      	movs	r5, #104	; 0x68
 8007fc0:	1e4a      	subs	r2, r1, #1
 8007fc2:	4355      	muls	r5, r2
 8007fc4:	000e      	movs	r6, r1
 8007fc6:	0029      	movs	r1, r5
 8007fc8:	3174      	adds	r1, #116	; 0x74
 8007fca:	f000 fd27 	bl	8008a1c <_malloc_r>
 8007fce:	1e04      	subs	r4, r0, #0
 8007fd0:	d008      	beq.n	8007fe4 <__sfmoreglue+0x28>
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	002a      	movs	r2, r5
 8007fd6:	6001      	str	r1, [r0, #0]
 8007fd8:	6046      	str	r6, [r0, #4]
 8007fda:	300c      	adds	r0, #12
 8007fdc:	60a0      	str	r0, [r4, #8]
 8007fde:	3268      	adds	r2, #104	; 0x68
 8007fe0:	f7fe fc8a 	bl	80068f8 <memset>
 8007fe4:	0020      	movs	r0, r4
 8007fe6:	bd70      	pop	{r4, r5, r6, pc}

08007fe8 <__sfp_lock_acquire>:
 8007fe8:	b510      	push	{r4, lr}
 8007fea:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <__sfp_lock_acquire+0xc>)
 8007fec:	f000 f8c1 	bl	8008172 <__retarget_lock_acquire_recursive>
 8007ff0:	bd10      	pop	{r4, pc}
 8007ff2:	46c0      	nop			; (mov r8, r8)
 8007ff4:	200002d9 	.word	0x200002d9

08007ff8 <__sfp_lock_release>:
 8007ff8:	b510      	push	{r4, lr}
 8007ffa:	4802      	ldr	r0, [pc, #8]	; (8008004 <__sfp_lock_release+0xc>)
 8007ffc:	f000 f8ba 	bl	8008174 <__retarget_lock_release_recursive>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	46c0      	nop			; (mov r8, r8)
 8008004:	200002d9 	.word	0x200002d9

08008008 <__sinit_lock_acquire>:
 8008008:	b510      	push	{r4, lr}
 800800a:	4802      	ldr	r0, [pc, #8]	; (8008014 <__sinit_lock_acquire+0xc>)
 800800c:	f000 f8b1 	bl	8008172 <__retarget_lock_acquire_recursive>
 8008010:	bd10      	pop	{r4, pc}
 8008012:	46c0      	nop			; (mov r8, r8)
 8008014:	200002da 	.word	0x200002da

08008018 <__sinit_lock_release>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4802      	ldr	r0, [pc, #8]	; (8008024 <__sinit_lock_release+0xc>)
 800801c:	f000 f8aa 	bl	8008174 <__retarget_lock_release_recursive>
 8008020:	bd10      	pop	{r4, pc}
 8008022:	46c0      	nop			; (mov r8, r8)
 8008024:	200002da 	.word	0x200002da

08008028 <__sinit>:
 8008028:	b513      	push	{r0, r1, r4, lr}
 800802a:	0004      	movs	r4, r0
 800802c:	f7ff ffec 	bl	8008008 <__sinit_lock_acquire>
 8008030:	69a3      	ldr	r3, [r4, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <__sinit+0x14>
 8008036:	f7ff ffef 	bl	8008018 <__sinit_lock_release>
 800803a:	bd13      	pop	{r0, r1, r4, pc}
 800803c:	64a3      	str	r3, [r4, #72]	; 0x48
 800803e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008040:	6523      	str	r3, [r4, #80]	; 0x50
 8008042:	4b13      	ldr	r3, [pc, #76]	; (8008090 <__sinit+0x68>)
 8008044:	4a13      	ldr	r2, [pc, #76]	; (8008094 <__sinit+0x6c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	62a2      	str	r2, [r4, #40]	; 0x28
 800804a:	9301      	str	r3, [sp, #4]
 800804c:	42a3      	cmp	r3, r4
 800804e:	d101      	bne.n	8008054 <__sinit+0x2c>
 8008050:	2301      	movs	r3, #1
 8008052:	61a3      	str	r3, [r4, #24]
 8008054:	0020      	movs	r0, r4
 8008056:	f000 f81f 	bl	8008098 <__sfp>
 800805a:	6060      	str	r0, [r4, #4]
 800805c:	0020      	movs	r0, r4
 800805e:	f000 f81b 	bl	8008098 <__sfp>
 8008062:	60a0      	str	r0, [r4, #8]
 8008064:	0020      	movs	r0, r4
 8008066:	f000 f817 	bl	8008098 <__sfp>
 800806a:	2200      	movs	r2, #0
 800806c:	2104      	movs	r1, #4
 800806e:	60e0      	str	r0, [r4, #12]
 8008070:	6860      	ldr	r0, [r4, #4]
 8008072:	f7ff ff77 	bl	8007f64 <std>
 8008076:	2201      	movs	r2, #1
 8008078:	2109      	movs	r1, #9
 800807a:	68a0      	ldr	r0, [r4, #8]
 800807c:	f7ff ff72 	bl	8007f64 <std>
 8008080:	2202      	movs	r2, #2
 8008082:	2112      	movs	r1, #18
 8008084:	68e0      	ldr	r0, [r4, #12]
 8008086:	f7ff ff6d 	bl	8007f64 <std>
 800808a:	2301      	movs	r3, #1
 800808c:	61a3      	str	r3, [r4, #24]
 800808e:	e7d2      	b.n	8008036 <__sinit+0xe>
 8008090:	08009c20 	.word	0x08009c20
 8008094:	08007fad 	.word	0x08007fad

08008098 <__sfp>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	0007      	movs	r7, r0
 800809c:	f7ff ffa4 	bl	8007fe8 <__sfp_lock_acquire>
 80080a0:	4b1f      	ldr	r3, [pc, #124]	; (8008120 <__sfp+0x88>)
 80080a2:	681e      	ldr	r6, [r3, #0]
 80080a4:	69b3      	ldr	r3, [r6, #24]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <__sfp+0x18>
 80080aa:	0030      	movs	r0, r6
 80080ac:	f7ff ffbc 	bl	8008028 <__sinit>
 80080b0:	3648      	adds	r6, #72	; 0x48
 80080b2:	68b4      	ldr	r4, [r6, #8]
 80080b4:	6873      	ldr	r3, [r6, #4]
 80080b6:	3b01      	subs	r3, #1
 80080b8:	d504      	bpl.n	80080c4 <__sfp+0x2c>
 80080ba:	6833      	ldr	r3, [r6, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d022      	beq.n	8008106 <__sfp+0x6e>
 80080c0:	6836      	ldr	r6, [r6, #0]
 80080c2:	e7f6      	b.n	80080b2 <__sfp+0x1a>
 80080c4:	220c      	movs	r2, #12
 80080c6:	5ea5      	ldrsh	r5, [r4, r2]
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	d11a      	bne.n	8008102 <__sfp+0x6a>
 80080cc:	0020      	movs	r0, r4
 80080ce:	4b15      	ldr	r3, [pc, #84]	; (8008124 <__sfp+0x8c>)
 80080d0:	3058      	adds	r0, #88	; 0x58
 80080d2:	60e3      	str	r3, [r4, #12]
 80080d4:	6665      	str	r5, [r4, #100]	; 0x64
 80080d6:	f000 f84b 	bl	8008170 <__retarget_lock_init_recursive>
 80080da:	f7ff ff8d 	bl	8007ff8 <__sfp_lock_release>
 80080de:	0020      	movs	r0, r4
 80080e0:	2208      	movs	r2, #8
 80080e2:	0029      	movs	r1, r5
 80080e4:	6025      	str	r5, [r4, #0]
 80080e6:	60a5      	str	r5, [r4, #8]
 80080e8:	6065      	str	r5, [r4, #4]
 80080ea:	6125      	str	r5, [r4, #16]
 80080ec:	6165      	str	r5, [r4, #20]
 80080ee:	61a5      	str	r5, [r4, #24]
 80080f0:	305c      	adds	r0, #92	; 0x5c
 80080f2:	f7fe fc01 	bl	80068f8 <memset>
 80080f6:	6365      	str	r5, [r4, #52]	; 0x34
 80080f8:	63a5      	str	r5, [r4, #56]	; 0x38
 80080fa:	64a5      	str	r5, [r4, #72]	; 0x48
 80080fc:	64e5      	str	r5, [r4, #76]	; 0x4c
 80080fe:	0020      	movs	r0, r4
 8008100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008102:	3468      	adds	r4, #104	; 0x68
 8008104:	e7d7      	b.n	80080b6 <__sfp+0x1e>
 8008106:	2104      	movs	r1, #4
 8008108:	0038      	movs	r0, r7
 800810a:	f7ff ff57 	bl	8007fbc <__sfmoreglue>
 800810e:	1e04      	subs	r4, r0, #0
 8008110:	6030      	str	r0, [r6, #0]
 8008112:	d1d5      	bne.n	80080c0 <__sfp+0x28>
 8008114:	f7ff ff70 	bl	8007ff8 <__sfp_lock_release>
 8008118:	230c      	movs	r3, #12
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	e7ef      	b.n	80080fe <__sfp+0x66>
 800811e:	46c0      	nop			; (mov r8, r8)
 8008120:	08009c20 	.word	0x08009c20
 8008124:	ffff0001 	.word	0xffff0001

08008128 <_fwalk_reent>:
 8008128:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800812a:	0004      	movs	r4, r0
 800812c:	0006      	movs	r6, r0
 800812e:	2700      	movs	r7, #0
 8008130:	9101      	str	r1, [sp, #4]
 8008132:	3448      	adds	r4, #72	; 0x48
 8008134:	6863      	ldr	r3, [r4, #4]
 8008136:	68a5      	ldr	r5, [r4, #8]
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	9b00      	ldr	r3, [sp, #0]
 800813c:	3b01      	subs	r3, #1
 800813e:	9300      	str	r3, [sp, #0]
 8008140:	d504      	bpl.n	800814c <_fwalk_reent+0x24>
 8008142:	6824      	ldr	r4, [r4, #0]
 8008144:	2c00      	cmp	r4, #0
 8008146:	d1f5      	bne.n	8008134 <_fwalk_reent+0xc>
 8008148:	0038      	movs	r0, r7
 800814a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800814c:	89ab      	ldrh	r3, [r5, #12]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d908      	bls.n	8008164 <_fwalk_reent+0x3c>
 8008152:	220e      	movs	r2, #14
 8008154:	5eab      	ldrsh	r3, [r5, r2]
 8008156:	3301      	adds	r3, #1
 8008158:	d004      	beq.n	8008164 <_fwalk_reent+0x3c>
 800815a:	0029      	movs	r1, r5
 800815c:	0030      	movs	r0, r6
 800815e:	9b01      	ldr	r3, [sp, #4]
 8008160:	4798      	blx	r3
 8008162:	4307      	orrs	r7, r0
 8008164:	3568      	adds	r5, #104	; 0x68
 8008166:	e7e8      	b.n	800813a <_fwalk_reent+0x12>

08008168 <_localeconv_r>:
 8008168:	4800      	ldr	r0, [pc, #0]	; (800816c <_localeconv_r+0x4>)
 800816a:	4770      	bx	lr
 800816c:	20000160 	.word	0x20000160

08008170 <__retarget_lock_init_recursive>:
 8008170:	4770      	bx	lr

08008172 <__retarget_lock_acquire_recursive>:
 8008172:	4770      	bx	lr

08008174 <__retarget_lock_release_recursive>:
 8008174:	4770      	bx	lr
	...

08008178 <malloc>:
 8008178:	b510      	push	{r4, lr}
 800817a:	4b03      	ldr	r3, [pc, #12]	; (8008188 <malloc+0x10>)
 800817c:	0001      	movs	r1, r0
 800817e:	6818      	ldr	r0, [r3, #0]
 8008180:	f000 fc4c 	bl	8008a1c <_malloc_r>
 8008184:	bd10      	pop	{r4, pc}
 8008186:	46c0      	nop			; (mov r8, r8)
 8008188:	2000000c 	.word	0x2000000c

0800818c <memchr>:
 800818c:	b2c9      	uxtb	r1, r1
 800818e:	1882      	adds	r2, r0, r2
 8008190:	4290      	cmp	r0, r2
 8008192:	d101      	bne.n	8008198 <memchr+0xc>
 8008194:	2000      	movs	r0, #0
 8008196:	4770      	bx	lr
 8008198:	7803      	ldrb	r3, [r0, #0]
 800819a:	428b      	cmp	r3, r1
 800819c:	d0fb      	beq.n	8008196 <memchr+0xa>
 800819e:	3001      	adds	r0, #1
 80081a0:	e7f6      	b.n	8008190 <memchr+0x4>

080081a2 <memcpy>:
 80081a2:	2300      	movs	r3, #0
 80081a4:	b510      	push	{r4, lr}
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d100      	bne.n	80081ac <memcpy+0xa>
 80081aa:	bd10      	pop	{r4, pc}
 80081ac:	5ccc      	ldrb	r4, [r1, r3]
 80081ae:	54c4      	strb	r4, [r0, r3]
 80081b0:	3301      	adds	r3, #1
 80081b2:	e7f8      	b.n	80081a6 <memcpy+0x4>

080081b4 <_Balloc>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081b8:	0006      	movs	r6, r0
 80081ba:	000c      	movs	r4, r1
 80081bc:	2d00      	cmp	r5, #0
 80081be:	d10e      	bne.n	80081de <_Balloc+0x2a>
 80081c0:	2010      	movs	r0, #16
 80081c2:	f7ff ffd9 	bl	8008178 <malloc>
 80081c6:	1e02      	subs	r2, r0, #0
 80081c8:	6270      	str	r0, [r6, #36]	; 0x24
 80081ca:	d104      	bne.n	80081d6 <_Balloc+0x22>
 80081cc:	2166      	movs	r1, #102	; 0x66
 80081ce:	4b19      	ldr	r3, [pc, #100]	; (8008234 <_Balloc+0x80>)
 80081d0:	4819      	ldr	r0, [pc, #100]	; (8008238 <_Balloc+0x84>)
 80081d2:	f000 ff3b 	bl	800904c <__assert_func>
 80081d6:	6045      	str	r5, [r0, #4]
 80081d8:	6085      	str	r5, [r0, #8]
 80081da:	6005      	str	r5, [r0, #0]
 80081dc:	60c5      	str	r5, [r0, #12]
 80081de:	6a75      	ldr	r5, [r6, #36]	; 0x24
 80081e0:	68eb      	ldr	r3, [r5, #12]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d013      	beq.n	800820e <_Balloc+0x5a>
 80081e6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80081e8:	00a2      	lsls	r2, r4, #2
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	189b      	adds	r3, r3, r2
 80081ee:	6818      	ldr	r0, [r3, #0]
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d118      	bne.n	8008226 <_Balloc+0x72>
 80081f4:	2101      	movs	r1, #1
 80081f6:	000d      	movs	r5, r1
 80081f8:	40a5      	lsls	r5, r4
 80081fa:	1d6a      	adds	r2, r5, #5
 80081fc:	0030      	movs	r0, r6
 80081fe:	0092      	lsls	r2, r2, #2
 8008200:	f000 fb74 	bl	80088ec <_calloc_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	d00c      	beq.n	8008222 <_Balloc+0x6e>
 8008208:	6044      	str	r4, [r0, #4]
 800820a:	6085      	str	r5, [r0, #8]
 800820c:	e00d      	b.n	800822a <_Balloc+0x76>
 800820e:	2221      	movs	r2, #33	; 0x21
 8008210:	2104      	movs	r1, #4
 8008212:	0030      	movs	r0, r6
 8008214:	f000 fb6a 	bl	80088ec <_calloc_r>
 8008218:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800821a:	60e8      	str	r0, [r5, #12]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1e1      	bne.n	80081e6 <_Balloc+0x32>
 8008222:	2000      	movs	r0, #0
 8008224:	bd70      	pop	{r4, r5, r6, pc}
 8008226:	6802      	ldr	r2, [r0, #0]
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	2300      	movs	r3, #0
 800822c:	6103      	str	r3, [r0, #16]
 800822e:	60c3      	str	r3, [r0, #12]
 8008230:	e7f8      	b.n	8008224 <_Balloc+0x70>
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	08009c65 	.word	0x08009c65
 8008238:	08009d48 	.word	0x08009d48

0800823c <_Bfree>:
 800823c:	b570      	push	{r4, r5, r6, lr}
 800823e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008240:	0005      	movs	r5, r0
 8008242:	000c      	movs	r4, r1
 8008244:	2e00      	cmp	r6, #0
 8008246:	d10e      	bne.n	8008266 <_Bfree+0x2a>
 8008248:	2010      	movs	r0, #16
 800824a:	f7ff ff95 	bl	8008178 <malloc>
 800824e:	1e02      	subs	r2, r0, #0
 8008250:	6268      	str	r0, [r5, #36]	; 0x24
 8008252:	d104      	bne.n	800825e <_Bfree+0x22>
 8008254:	218a      	movs	r1, #138	; 0x8a
 8008256:	4b09      	ldr	r3, [pc, #36]	; (800827c <_Bfree+0x40>)
 8008258:	4809      	ldr	r0, [pc, #36]	; (8008280 <_Bfree+0x44>)
 800825a:	f000 fef7 	bl	800904c <__assert_func>
 800825e:	6046      	str	r6, [r0, #4]
 8008260:	6086      	str	r6, [r0, #8]
 8008262:	6006      	str	r6, [r0, #0]
 8008264:	60c6      	str	r6, [r0, #12]
 8008266:	2c00      	cmp	r4, #0
 8008268:	d007      	beq.n	800827a <_Bfree+0x3e>
 800826a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800826c:	6862      	ldr	r2, [r4, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	0092      	lsls	r2, r2, #2
 8008272:	189b      	adds	r3, r3, r2
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	6022      	str	r2, [r4, #0]
 8008278:	601c      	str	r4, [r3, #0]
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	08009c65 	.word	0x08009c65
 8008280:	08009d48 	.word	0x08009d48

08008284 <__multadd>:
 8008284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008286:	000e      	movs	r6, r1
 8008288:	9001      	str	r0, [sp, #4]
 800828a:	000c      	movs	r4, r1
 800828c:	001d      	movs	r5, r3
 800828e:	2000      	movs	r0, #0
 8008290:	690f      	ldr	r7, [r1, #16]
 8008292:	3614      	adds	r6, #20
 8008294:	6833      	ldr	r3, [r6, #0]
 8008296:	3001      	adds	r0, #1
 8008298:	b299      	uxth	r1, r3
 800829a:	4351      	muls	r1, r2
 800829c:	0c1b      	lsrs	r3, r3, #16
 800829e:	4353      	muls	r3, r2
 80082a0:	1949      	adds	r1, r1, r5
 80082a2:	0c0d      	lsrs	r5, r1, #16
 80082a4:	195b      	adds	r3, r3, r5
 80082a6:	0c1d      	lsrs	r5, r3, #16
 80082a8:	b289      	uxth	r1, r1
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	185b      	adds	r3, r3, r1
 80082ae:	c608      	stmia	r6!, {r3}
 80082b0:	4287      	cmp	r7, r0
 80082b2:	dcef      	bgt.n	8008294 <__multadd+0x10>
 80082b4:	2d00      	cmp	r5, #0
 80082b6:	d022      	beq.n	80082fe <__multadd+0x7a>
 80082b8:	68a3      	ldr	r3, [r4, #8]
 80082ba:	42bb      	cmp	r3, r7
 80082bc:	dc19      	bgt.n	80082f2 <__multadd+0x6e>
 80082be:	6863      	ldr	r3, [r4, #4]
 80082c0:	9801      	ldr	r0, [sp, #4]
 80082c2:	1c59      	adds	r1, r3, #1
 80082c4:	f7ff ff76 	bl	80081b4 <_Balloc>
 80082c8:	1e06      	subs	r6, r0, #0
 80082ca:	d105      	bne.n	80082d8 <__multadd+0x54>
 80082cc:	0002      	movs	r2, r0
 80082ce:	21b5      	movs	r1, #181	; 0xb5
 80082d0:	4b0c      	ldr	r3, [pc, #48]	; (8008304 <__multadd+0x80>)
 80082d2:	480d      	ldr	r0, [pc, #52]	; (8008308 <__multadd+0x84>)
 80082d4:	f000 feba 	bl	800904c <__assert_func>
 80082d8:	0021      	movs	r1, r4
 80082da:	6923      	ldr	r3, [r4, #16]
 80082dc:	310c      	adds	r1, #12
 80082de:	1c9a      	adds	r2, r3, #2
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	300c      	adds	r0, #12
 80082e4:	f7ff ff5d 	bl	80081a2 <memcpy>
 80082e8:	0021      	movs	r1, r4
 80082ea:	9801      	ldr	r0, [sp, #4]
 80082ec:	f7ff ffa6 	bl	800823c <_Bfree>
 80082f0:	0034      	movs	r4, r6
 80082f2:	1d3b      	adds	r3, r7, #4
 80082f4:	009b      	lsls	r3, r3, #2
 80082f6:	18e3      	adds	r3, r4, r3
 80082f8:	605d      	str	r5, [r3, #4]
 80082fa:	1c7b      	adds	r3, r7, #1
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	0020      	movs	r0, r4
 8008300:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008302:	46c0      	nop			; (mov r8, r8)
 8008304:	08009cd7 	.word	0x08009cd7
 8008308:	08009d48 	.word	0x08009d48

0800830c <__hi0bits>:
 800830c:	0003      	movs	r3, r0
 800830e:	0c02      	lsrs	r2, r0, #16
 8008310:	2000      	movs	r0, #0
 8008312:	4282      	cmp	r2, r0
 8008314:	d101      	bne.n	800831a <__hi0bits+0xe>
 8008316:	041b      	lsls	r3, r3, #16
 8008318:	3010      	adds	r0, #16
 800831a:	0e1a      	lsrs	r2, r3, #24
 800831c:	d101      	bne.n	8008322 <__hi0bits+0x16>
 800831e:	3008      	adds	r0, #8
 8008320:	021b      	lsls	r3, r3, #8
 8008322:	0f1a      	lsrs	r2, r3, #28
 8008324:	d101      	bne.n	800832a <__hi0bits+0x1e>
 8008326:	3004      	adds	r0, #4
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	0f9a      	lsrs	r2, r3, #30
 800832c:	d101      	bne.n	8008332 <__hi0bits+0x26>
 800832e:	3002      	adds	r0, #2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	2b00      	cmp	r3, #0
 8008334:	db03      	blt.n	800833e <__hi0bits+0x32>
 8008336:	3001      	adds	r0, #1
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	d400      	bmi.n	800833e <__hi0bits+0x32>
 800833c:	2020      	movs	r0, #32
 800833e:	4770      	bx	lr

08008340 <__lo0bits>:
 8008340:	6803      	ldr	r3, [r0, #0]
 8008342:	0002      	movs	r2, r0
 8008344:	2107      	movs	r1, #7
 8008346:	0018      	movs	r0, r3
 8008348:	4008      	ands	r0, r1
 800834a:	420b      	tst	r3, r1
 800834c:	d00d      	beq.n	800836a <__lo0bits+0x2a>
 800834e:	3906      	subs	r1, #6
 8008350:	2000      	movs	r0, #0
 8008352:	420b      	tst	r3, r1
 8008354:	d105      	bne.n	8008362 <__lo0bits+0x22>
 8008356:	3002      	adds	r0, #2
 8008358:	4203      	tst	r3, r0
 800835a:	d003      	beq.n	8008364 <__lo0bits+0x24>
 800835c:	40cb      	lsrs	r3, r1
 800835e:	0008      	movs	r0, r1
 8008360:	6013      	str	r3, [r2, #0]
 8008362:	4770      	bx	lr
 8008364:	089b      	lsrs	r3, r3, #2
 8008366:	6013      	str	r3, [r2, #0]
 8008368:	e7fb      	b.n	8008362 <__lo0bits+0x22>
 800836a:	b299      	uxth	r1, r3
 800836c:	2900      	cmp	r1, #0
 800836e:	d101      	bne.n	8008374 <__lo0bits+0x34>
 8008370:	2010      	movs	r0, #16
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	b2d9      	uxtb	r1, r3
 8008376:	2900      	cmp	r1, #0
 8008378:	d101      	bne.n	800837e <__lo0bits+0x3e>
 800837a:	3008      	adds	r0, #8
 800837c:	0a1b      	lsrs	r3, r3, #8
 800837e:	0719      	lsls	r1, r3, #28
 8008380:	d101      	bne.n	8008386 <__lo0bits+0x46>
 8008382:	3004      	adds	r0, #4
 8008384:	091b      	lsrs	r3, r3, #4
 8008386:	0799      	lsls	r1, r3, #30
 8008388:	d101      	bne.n	800838e <__lo0bits+0x4e>
 800838a:	3002      	adds	r0, #2
 800838c:	089b      	lsrs	r3, r3, #2
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d4e9      	bmi.n	8008366 <__lo0bits+0x26>
 8008392:	3001      	adds	r0, #1
 8008394:	085b      	lsrs	r3, r3, #1
 8008396:	d1e6      	bne.n	8008366 <__lo0bits+0x26>
 8008398:	2020      	movs	r0, #32
 800839a:	e7e2      	b.n	8008362 <__lo0bits+0x22>

0800839c <__i2b>:
 800839c:	b510      	push	{r4, lr}
 800839e:	000c      	movs	r4, r1
 80083a0:	2101      	movs	r1, #1
 80083a2:	f7ff ff07 	bl	80081b4 <_Balloc>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d106      	bne.n	80083b8 <__i2b+0x1c>
 80083aa:	21a0      	movs	r1, #160	; 0xa0
 80083ac:	0002      	movs	r2, r0
 80083ae:	4b04      	ldr	r3, [pc, #16]	; (80083c0 <__i2b+0x24>)
 80083b0:	4804      	ldr	r0, [pc, #16]	; (80083c4 <__i2b+0x28>)
 80083b2:	0049      	lsls	r1, r1, #1
 80083b4:	f000 fe4a 	bl	800904c <__assert_func>
 80083b8:	2301      	movs	r3, #1
 80083ba:	6144      	str	r4, [r0, #20]
 80083bc:	6103      	str	r3, [r0, #16]
 80083be:	bd10      	pop	{r4, pc}
 80083c0:	08009cd7 	.word	0x08009cd7
 80083c4:	08009d48 	.word	0x08009d48

080083c8 <__multiply>:
 80083c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083ca:	690b      	ldr	r3, [r1, #16]
 80083cc:	0014      	movs	r4, r2
 80083ce:	6912      	ldr	r2, [r2, #16]
 80083d0:	000d      	movs	r5, r1
 80083d2:	b089      	sub	sp, #36	; 0x24
 80083d4:	4293      	cmp	r3, r2
 80083d6:	da01      	bge.n	80083dc <__multiply+0x14>
 80083d8:	0025      	movs	r5, r4
 80083da:	000c      	movs	r4, r1
 80083dc:	692f      	ldr	r7, [r5, #16]
 80083de:	6926      	ldr	r6, [r4, #16]
 80083e0:	6869      	ldr	r1, [r5, #4]
 80083e2:	19bb      	adds	r3, r7, r6
 80083e4:	9302      	str	r3, [sp, #8]
 80083e6:	68ab      	ldr	r3, [r5, #8]
 80083e8:	19ba      	adds	r2, r7, r6
 80083ea:	4293      	cmp	r3, r2
 80083ec:	da00      	bge.n	80083f0 <__multiply+0x28>
 80083ee:	3101      	adds	r1, #1
 80083f0:	f7ff fee0 	bl	80081b4 <_Balloc>
 80083f4:	9001      	str	r0, [sp, #4]
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d106      	bne.n	8008408 <__multiply+0x40>
 80083fa:	215e      	movs	r1, #94	; 0x5e
 80083fc:	0002      	movs	r2, r0
 80083fe:	4b48      	ldr	r3, [pc, #288]	; (8008520 <__multiply+0x158>)
 8008400:	4848      	ldr	r0, [pc, #288]	; (8008524 <__multiply+0x15c>)
 8008402:	31ff      	adds	r1, #255	; 0xff
 8008404:	f000 fe22 	bl	800904c <__assert_func>
 8008408:	9b01      	ldr	r3, [sp, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	3314      	adds	r3, #20
 800840e:	469c      	mov	ip, r3
 8008410:	19bb      	adds	r3, r7, r6
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4463      	add	r3, ip
 8008416:	9303      	str	r3, [sp, #12]
 8008418:	4663      	mov	r3, ip
 800841a:	9903      	ldr	r1, [sp, #12]
 800841c:	428b      	cmp	r3, r1
 800841e:	d32c      	bcc.n	800847a <__multiply+0xb2>
 8008420:	002b      	movs	r3, r5
 8008422:	0022      	movs	r2, r4
 8008424:	3314      	adds	r3, #20
 8008426:	00bf      	lsls	r7, r7, #2
 8008428:	3214      	adds	r2, #20
 800842a:	9306      	str	r3, [sp, #24]
 800842c:	00b6      	lsls	r6, r6, #2
 800842e:	19db      	adds	r3, r3, r7
 8008430:	9304      	str	r3, [sp, #16]
 8008432:	1993      	adds	r3, r2, r6
 8008434:	9307      	str	r3, [sp, #28]
 8008436:	2304      	movs	r3, #4
 8008438:	9305      	str	r3, [sp, #20]
 800843a:	002b      	movs	r3, r5
 800843c:	9904      	ldr	r1, [sp, #16]
 800843e:	3315      	adds	r3, #21
 8008440:	9200      	str	r2, [sp, #0]
 8008442:	4299      	cmp	r1, r3
 8008444:	d305      	bcc.n	8008452 <__multiply+0x8a>
 8008446:	1b4b      	subs	r3, r1, r5
 8008448:	3b15      	subs	r3, #21
 800844a:	089b      	lsrs	r3, r3, #2
 800844c:	3301      	adds	r3, #1
 800844e:	009b      	lsls	r3, r3, #2
 8008450:	9305      	str	r3, [sp, #20]
 8008452:	9b07      	ldr	r3, [sp, #28]
 8008454:	9a00      	ldr	r2, [sp, #0]
 8008456:	429a      	cmp	r2, r3
 8008458:	d311      	bcc.n	800847e <__multiply+0xb6>
 800845a:	9b02      	ldr	r3, [sp, #8]
 800845c:	2b00      	cmp	r3, #0
 800845e:	dd06      	ble.n	800846e <__multiply+0xa6>
 8008460:	9b03      	ldr	r3, [sp, #12]
 8008462:	3b04      	subs	r3, #4
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d053      	beq.n	8008516 <__multiply+0x14e>
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	9a02      	ldr	r2, [sp, #8]
 8008472:	0018      	movs	r0, r3
 8008474:	611a      	str	r2, [r3, #16]
 8008476:	b009      	add	sp, #36	; 0x24
 8008478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847a:	c304      	stmia	r3!, {r2}
 800847c:	e7cd      	b.n	800841a <__multiply+0x52>
 800847e:	9b00      	ldr	r3, [sp, #0]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	b298      	uxth	r0, r3
 8008484:	2800      	cmp	r0, #0
 8008486:	d01b      	beq.n	80084c0 <__multiply+0xf8>
 8008488:	4667      	mov	r7, ip
 800848a:	2400      	movs	r4, #0
 800848c:	9e06      	ldr	r6, [sp, #24]
 800848e:	ce02      	ldmia	r6!, {r1}
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	b28b      	uxth	r3, r1
 8008494:	4343      	muls	r3, r0
 8008496:	b292      	uxth	r2, r2
 8008498:	189b      	adds	r3, r3, r2
 800849a:	191b      	adds	r3, r3, r4
 800849c:	0c0c      	lsrs	r4, r1, #16
 800849e:	4344      	muls	r4, r0
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	0c11      	lsrs	r1, r2, #16
 80084a4:	1861      	adds	r1, r4, r1
 80084a6:	0c1c      	lsrs	r4, r3, #16
 80084a8:	1909      	adds	r1, r1, r4
 80084aa:	0c0c      	lsrs	r4, r1, #16
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	0409      	lsls	r1, r1, #16
 80084b0:	430b      	orrs	r3, r1
 80084b2:	c708      	stmia	r7!, {r3}
 80084b4:	9b04      	ldr	r3, [sp, #16]
 80084b6:	42b3      	cmp	r3, r6
 80084b8:	d8e9      	bhi.n	800848e <__multiply+0xc6>
 80084ba:	4663      	mov	r3, ip
 80084bc:	9a05      	ldr	r2, [sp, #20]
 80084be:	509c      	str	r4, [r3, r2]
 80084c0:	9b00      	ldr	r3, [sp, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	0c1e      	lsrs	r6, r3, #16
 80084c6:	d020      	beq.n	800850a <__multiply+0x142>
 80084c8:	4663      	mov	r3, ip
 80084ca:	002c      	movs	r4, r5
 80084cc:	4660      	mov	r0, ip
 80084ce:	2700      	movs	r7, #0
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3414      	adds	r4, #20
 80084d4:	6822      	ldr	r2, [r4, #0]
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	b291      	uxth	r1, r2
 80084da:	4371      	muls	r1, r6
 80084dc:	6802      	ldr	r2, [r0, #0]
 80084de:	0c12      	lsrs	r2, r2, #16
 80084e0:	1889      	adds	r1, r1, r2
 80084e2:	19cf      	adds	r7, r1, r7
 80084e4:	0439      	lsls	r1, r7, #16
 80084e6:	430b      	orrs	r3, r1
 80084e8:	6003      	str	r3, [r0, #0]
 80084ea:	cc02      	ldmia	r4!, {r1}
 80084ec:	6843      	ldr	r3, [r0, #4]
 80084ee:	0c09      	lsrs	r1, r1, #16
 80084f0:	4371      	muls	r1, r6
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	0c3f      	lsrs	r7, r7, #16
 80084f6:	18cb      	adds	r3, r1, r3
 80084f8:	9a04      	ldr	r2, [sp, #16]
 80084fa:	19db      	adds	r3, r3, r7
 80084fc:	0c1f      	lsrs	r7, r3, #16
 80084fe:	3004      	adds	r0, #4
 8008500:	42a2      	cmp	r2, r4
 8008502:	d8e7      	bhi.n	80084d4 <__multiply+0x10c>
 8008504:	4662      	mov	r2, ip
 8008506:	9905      	ldr	r1, [sp, #20]
 8008508:	5053      	str	r3, [r2, r1]
 800850a:	9b00      	ldr	r3, [sp, #0]
 800850c:	3304      	adds	r3, #4
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	2304      	movs	r3, #4
 8008512:	449c      	add	ip, r3
 8008514:	e79d      	b.n	8008452 <__multiply+0x8a>
 8008516:	9b02      	ldr	r3, [sp, #8]
 8008518:	3b01      	subs	r3, #1
 800851a:	9302      	str	r3, [sp, #8]
 800851c:	e79d      	b.n	800845a <__multiply+0x92>
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	08009cd7 	.word	0x08009cd7
 8008524:	08009d48 	.word	0x08009d48

08008528 <__pow5mult>:
 8008528:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800852a:	2303      	movs	r3, #3
 800852c:	0015      	movs	r5, r2
 800852e:	0007      	movs	r7, r0
 8008530:	000e      	movs	r6, r1
 8008532:	401a      	ands	r2, r3
 8008534:	421d      	tst	r5, r3
 8008536:	d008      	beq.n	800854a <__pow5mult+0x22>
 8008538:	4925      	ldr	r1, [pc, #148]	; (80085d0 <__pow5mult+0xa8>)
 800853a:	3a01      	subs	r2, #1
 800853c:	0092      	lsls	r2, r2, #2
 800853e:	5852      	ldr	r2, [r2, r1]
 8008540:	2300      	movs	r3, #0
 8008542:	0031      	movs	r1, r6
 8008544:	f7ff fe9e 	bl	8008284 <__multadd>
 8008548:	0006      	movs	r6, r0
 800854a:	10ad      	asrs	r5, r5, #2
 800854c:	d03d      	beq.n	80085ca <__pow5mult+0xa2>
 800854e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8008550:	2c00      	cmp	r4, #0
 8008552:	d10f      	bne.n	8008574 <__pow5mult+0x4c>
 8008554:	2010      	movs	r0, #16
 8008556:	f7ff fe0f 	bl	8008178 <malloc>
 800855a:	1e02      	subs	r2, r0, #0
 800855c:	6278      	str	r0, [r7, #36]	; 0x24
 800855e:	d105      	bne.n	800856c <__pow5mult+0x44>
 8008560:	21d7      	movs	r1, #215	; 0xd7
 8008562:	4b1c      	ldr	r3, [pc, #112]	; (80085d4 <__pow5mult+0xac>)
 8008564:	481c      	ldr	r0, [pc, #112]	; (80085d8 <__pow5mult+0xb0>)
 8008566:	0049      	lsls	r1, r1, #1
 8008568:	f000 fd70 	bl	800904c <__assert_func>
 800856c:	6044      	str	r4, [r0, #4]
 800856e:	6084      	str	r4, [r0, #8]
 8008570:	6004      	str	r4, [r0, #0]
 8008572:	60c4      	str	r4, [r0, #12]
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	689c      	ldr	r4, [r3, #8]
 8008578:	9301      	str	r3, [sp, #4]
 800857a:	2c00      	cmp	r4, #0
 800857c:	d108      	bne.n	8008590 <__pow5mult+0x68>
 800857e:	0038      	movs	r0, r7
 8008580:	4916      	ldr	r1, [pc, #88]	; (80085dc <__pow5mult+0xb4>)
 8008582:	f7ff ff0b 	bl	800839c <__i2b>
 8008586:	9b01      	ldr	r3, [sp, #4]
 8008588:	0004      	movs	r4, r0
 800858a:	6098      	str	r0, [r3, #8]
 800858c:	2300      	movs	r3, #0
 800858e:	6003      	str	r3, [r0, #0]
 8008590:	2301      	movs	r3, #1
 8008592:	421d      	tst	r5, r3
 8008594:	d00a      	beq.n	80085ac <__pow5mult+0x84>
 8008596:	0031      	movs	r1, r6
 8008598:	0022      	movs	r2, r4
 800859a:	0038      	movs	r0, r7
 800859c:	f7ff ff14 	bl	80083c8 <__multiply>
 80085a0:	0031      	movs	r1, r6
 80085a2:	9001      	str	r0, [sp, #4]
 80085a4:	0038      	movs	r0, r7
 80085a6:	f7ff fe49 	bl	800823c <_Bfree>
 80085aa:	9e01      	ldr	r6, [sp, #4]
 80085ac:	106d      	asrs	r5, r5, #1
 80085ae:	d00c      	beq.n	80085ca <__pow5mult+0xa2>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	2800      	cmp	r0, #0
 80085b4:	d107      	bne.n	80085c6 <__pow5mult+0x9e>
 80085b6:	0022      	movs	r2, r4
 80085b8:	0021      	movs	r1, r4
 80085ba:	0038      	movs	r0, r7
 80085bc:	f7ff ff04 	bl	80083c8 <__multiply>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6020      	str	r0, [r4, #0]
 80085c4:	6003      	str	r3, [r0, #0]
 80085c6:	0004      	movs	r4, r0
 80085c8:	e7e2      	b.n	8008590 <__pow5mult+0x68>
 80085ca:	0030      	movs	r0, r6
 80085cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	08009e98 	.word	0x08009e98
 80085d4:	08009c65 	.word	0x08009c65
 80085d8:	08009d48 	.word	0x08009d48
 80085dc:	00000271 	.word	0x00000271

080085e0 <__lshift>:
 80085e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085e2:	000c      	movs	r4, r1
 80085e4:	0017      	movs	r7, r2
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	1155      	asrs	r5, r2, #5
 80085ea:	b087      	sub	sp, #28
 80085ec:	18eb      	adds	r3, r5, r3
 80085ee:	9302      	str	r3, [sp, #8]
 80085f0:	3301      	adds	r3, #1
 80085f2:	9301      	str	r3, [sp, #4]
 80085f4:	6849      	ldr	r1, [r1, #4]
 80085f6:	68a3      	ldr	r3, [r4, #8]
 80085f8:	9004      	str	r0, [sp, #16]
 80085fa:	9a01      	ldr	r2, [sp, #4]
 80085fc:	4293      	cmp	r3, r2
 80085fe:	db10      	blt.n	8008622 <__lshift+0x42>
 8008600:	9804      	ldr	r0, [sp, #16]
 8008602:	f7ff fdd7 	bl	80081b4 <_Balloc>
 8008606:	2300      	movs	r3, #0
 8008608:	0002      	movs	r2, r0
 800860a:	0006      	movs	r6, r0
 800860c:	0019      	movs	r1, r3
 800860e:	3214      	adds	r2, #20
 8008610:	4298      	cmp	r0, r3
 8008612:	d10c      	bne.n	800862e <__lshift+0x4e>
 8008614:	21da      	movs	r1, #218	; 0xda
 8008616:	0002      	movs	r2, r0
 8008618:	4b26      	ldr	r3, [pc, #152]	; (80086b4 <__lshift+0xd4>)
 800861a:	4827      	ldr	r0, [pc, #156]	; (80086b8 <__lshift+0xd8>)
 800861c:	31ff      	adds	r1, #255	; 0xff
 800861e:	f000 fd15 	bl	800904c <__assert_func>
 8008622:	3101      	adds	r1, #1
 8008624:	005b      	lsls	r3, r3, #1
 8008626:	e7e8      	b.n	80085fa <__lshift+0x1a>
 8008628:	0098      	lsls	r0, r3, #2
 800862a:	5011      	str	r1, [r2, r0]
 800862c:	3301      	adds	r3, #1
 800862e:	42ab      	cmp	r3, r5
 8008630:	dbfa      	blt.n	8008628 <__lshift+0x48>
 8008632:	43eb      	mvns	r3, r5
 8008634:	17db      	asrs	r3, r3, #31
 8008636:	401d      	ands	r5, r3
 8008638:	211f      	movs	r1, #31
 800863a:	0023      	movs	r3, r4
 800863c:	0038      	movs	r0, r7
 800863e:	00ad      	lsls	r5, r5, #2
 8008640:	1955      	adds	r5, r2, r5
 8008642:	6922      	ldr	r2, [r4, #16]
 8008644:	3314      	adds	r3, #20
 8008646:	0092      	lsls	r2, r2, #2
 8008648:	4008      	ands	r0, r1
 800864a:	4684      	mov	ip, r0
 800864c:	189a      	adds	r2, r3, r2
 800864e:	420f      	tst	r7, r1
 8008650:	d02a      	beq.n	80086a8 <__lshift+0xc8>
 8008652:	3101      	adds	r1, #1
 8008654:	1a09      	subs	r1, r1, r0
 8008656:	9105      	str	r1, [sp, #20]
 8008658:	2100      	movs	r1, #0
 800865a:	9503      	str	r5, [sp, #12]
 800865c:	4667      	mov	r7, ip
 800865e:	6818      	ldr	r0, [r3, #0]
 8008660:	40b8      	lsls	r0, r7
 8008662:	4301      	orrs	r1, r0
 8008664:	9803      	ldr	r0, [sp, #12]
 8008666:	c002      	stmia	r0!, {r1}
 8008668:	cb02      	ldmia	r3!, {r1}
 800866a:	9003      	str	r0, [sp, #12]
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	40c1      	lsrs	r1, r0
 8008670:	429a      	cmp	r2, r3
 8008672:	d8f3      	bhi.n	800865c <__lshift+0x7c>
 8008674:	0020      	movs	r0, r4
 8008676:	3015      	adds	r0, #21
 8008678:	2304      	movs	r3, #4
 800867a:	4282      	cmp	r2, r0
 800867c:	d304      	bcc.n	8008688 <__lshift+0xa8>
 800867e:	1b13      	subs	r3, r2, r4
 8008680:	3b15      	subs	r3, #21
 8008682:	089b      	lsrs	r3, r3, #2
 8008684:	3301      	adds	r3, #1
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	50e9      	str	r1, [r5, r3]
 800868a:	2900      	cmp	r1, #0
 800868c:	d002      	beq.n	8008694 <__lshift+0xb4>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	3302      	adds	r3, #2
 8008692:	9301      	str	r3, [sp, #4]
 8008694:	9b01      	ldr	r3, [sp, #4]
 8008696:	9804      	ldr	r0, [sp, #16]
 8008698:	3b01      	subs	r3, #1
 800869a:	0021      	movs	r1, r4
 800869c:	6133      	str	r3, [r6, #16]
 800869e:	f7ff fdcd 	bl	800823c <_Bfree>
 80086a2:	0030      	movs	r0, r6
 80086a4:	b007      	add	sp, #28
 80086a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086a8:	cb02      	ldmia	r3!, {r1}
 80086aa:	c502      	stmia	r5!, {r1}
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d8fb      	bhi.n	80086a8 <__lshift+0xc8>
 80086b0:	e7f0      	b.n	8008694 <__lshift+0xb4>
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	08009cd7 	.word	0x08009cd7
 80086b8:	08009d48 	.word	0x08009d48

080086bc <__mcmp>:
 80086bc:	6902      	ldr	r2, [r0, #16]
 80086be:	690b      	ldr	r3, [r1, #16]
 80086c0:	b530      	push	{r4, r5, lr}
 80086c2:	0004      	movs	r4, r0
 80086c4:	1ad0      	subs	r0, r2, r3
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d10d      	bne.n	80086e6 <__mcmp+0x2a>
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	3414      	adds	r4, #20
 80086ce:	3114      	adds	r1, #20
 80086d0:	18e2      	adds	r2, r4, r3
 80086d2:	18c9      	adds	r1, r1, r3
 80086d4:	3a04      	subs	r2, #4
 80086d6:	3904      	subs	r1, #4
 80086d8:	6815      	ldr	r5, [r2, #0]
 80086da:	680b      	ldr	r3, [r1, #0]
 80086dc:	429d      	cmp	r5, r3
 80086de:	d003      	beq.n	80086e8 <__mcmp+0x2c>
 80086e0:	2001      	movs	r0, #1
 80086e2:	429d      	cmp	r5, r3
 80086e4:	d303      	bcc.n	80086ee <__mcmp+0x32>
 80086e6:	bd30      	pop	{r4, r5, pc}
 80086e8:	4294      	cmp	r4, r2
 80086ea:	d3f3      	bcc.n	80086d4 <__mcmp+0x18>
 80086ec:	e7fb      	b.n	80086e6 <__mcmp+0x2a>
 80086ee:	4240      	negs	r0, r0
 80086f0:	e7f9      	b.n	80086e6 <__mcmp+0x2a>
	...

080086f4 <__mdiff>:
 80086f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086f6:	000e      	movs	r6, r1
 80086f8:	0007      	movs	r7, r0
 80086fa:	0011      	movs	r1, r2
 80086fc:	0030      	movs	r0, r6
 80086fe:	b087      	sub	sp, #28
 8008700:	0014      	movs	r4, r2
 8008702:	f7ff ffdb 	bl	80086bc <__mcmp>
 8008706:	1e05      	subs	r5, r0, #0
 8008708:	d110      	bne.n	800872c <__mdiff+0x38>
 800870a:	0001      	movs	r1, r0
 800870c:	0038      	movs	r0, r7
 800870e:	f7ff fd51 	bl	80081b4 <_Balloc>
 8008712:	1e02      	subs	r2, r0, #0
 8008714:	d104      	bne.n	8008720 <__mdiff+0x2c>
 8008716:	4b40      	ldr	r3, [pc, #256]	; (8008818 <__mdiff+0x124>)
 8008718:	4940      	ldr	r1, [pc, #256]	; (800881c <__mdiff+0x128>)
 800871a:	4841      	ldr	r0, [pc, #260]	; (8008820 <__mdiff+0x12c>)
 800871c:	f000 fc96 	bl	800904c <__assert_func>
 8008720:	2301      	movs	r3, #1
 8008722:	6145      	str	r5, [r0, #20]
 8008724:	6103      	str	r3, [r0, #16]
 8008726:	0010      	movs	r0, r2
 8008728:	b007      	add	sp, #28
 800872a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800872c:	2301      	movs	r3, #1
 800872e:	9301      	str	r3, [sp, #4]
 8008730:	2800      	cmp	r0, #0
 8008732:	db04      	blt.n	800873e <__mdiff+0x4a>
 8008734:	0023      	movs	r3, r4
 8008736:	0034      	movs	r4, r6
 8008738:	001e      	movs	r6, r3
 800873a:	2300      	movs	r3, #0
 800873c:	9301      	str	r3, [sp, #4]
 800873e:	0038      	movs	r0, r7
 8008740:	6861      	ldr	r1, [r4, #4]
 8008742:	f7ff fd37 	bl	80081b4 <_Balloc>
 8008746:	1e02      	subs	r2, r0, #0
 8008748:	d103      	bne.n	8008752 <__mdiff+0x5e>
 800874a:	2190      	movs	r1, #144	; 0x90
 800874c:	4b32      	ldr	r3, [pc, #200]	; (8008818 <__mdiff+0x124>)
 800874e:	0089      	lsls	r1, r1, #2
 8008750:	e7e3      	b.n	800871a <__mdiff+0x26>
 8008752:	9b01      	ldr	r3, [sp, #4]
 8008754:	2700      	movs	r7, #0
 8008756:	60c3      	str	r3, [r0, #12]
 8008758:	6920      	ldr	r0, [r4, #16]
 800875a:	3414      	adds	r4, #20
 800875c:	9401      	str	r4, [sp, #4]
 800875e:	9b01      	ldr	r3, [sp, #4]
 8008760:	0084      	lsls	r4, r0, #2
 8008762:	191b      	adds	r3, r3, r4
 8008764:	0034      	movs	r4, r6
 8008766:	9302      	str	r3, [sp, #8]
 8008768:	6933      	ldr	r3, [r6, #16]
 800876a:	3414      	adds	r4, #20
 800876c:	0099      	lsls	r1, r3, #2
 800876e:	1863      	adds	r3, r4, r1
 8008770:	9303      	str	r3, [sp, #12]
 8008772:	0013      	movs	r3, r2
 8008774:	3314      	adds	r3, #20
 8008776:	469c      	mov	ip, r3
 8008778:	9305      	str	r3, [sp, #20]
 800877a:	9b01      	ldr	r3, [sp, #4]
 800877c:	9304      	str	r3, [sp, #16]
 800877e:	9b04      	ldr	r3, [sp, #16]
 8008780:	cc02      	ldmia	r4!, {r1}
 8008782:	cb20      	ldmia	r3!, {r5}
 8008784:	9304      	str	r3, [sp, #16]
 8008786:	b2ab      	uxth	r3, r5
 8008788:	19df      	adds	r7, r3, r7
 800878a:	b28b      	uxth	r3, r1
 800878c:	1afb      	subs	r3, r7, r3
 800878e:	0c09      	lsrs	r1, r1, #16
 8008790:	0c2d      	lsrs	r5, r5, #16
 8008792:	1a6d      	subs	r5, r5, r1
 8008794:	1419      	asrs	r1, r3, #16
 8008796:	186d      	adds	r5, r5, r1
 8008798:	4661      	mov	r1, ip
 800879a:	142f      	asrs	r7, r5, #16
 800879c:	b29b      	uxth	r3, r3
 800879e:	042d      	lsls	r5, r5, #16
 80087a0:	432b      	orrs	r3, r5
 80087a2:	c108      	stmia	r1!, {r3}
 80087a4:	9b03      	ldr	r3, [sp, #12]
 80087a6:	468c      	mov	ip, r1
 80087a8:	42a3      	cmp	r3, r4
 80087aa:	d8e8      	bhi.n	800877e <__mdiff+0x8a>
 80087ac:	0031      	movs	r1, r6
 80087ae:	9c03      	ldr	r4, [sp, #12]
 80087b0:	3115      	adds	r1, #21
 80087b2:	2304      	movs	r3, #4
 80087b4:	428c      	cmp	r4, r1
 80087b6:	d304      	bcc.n	80087c2 <__mdiff+0xce>
 80087b8:	1ba3      	subs	r3, r4, r6
 80087ba:	3b15      	subs	r3, #21
 80087bc:	089b      	lsrs	r3, r3, #2
 80087be:	3301      	adds	r3, #1
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	9901      	ldr	r1, [sp, #4]
 80087c4:	18cc      	adds	r4, r1, r3
 80087c6:	9905      	ldr	r1, [sp, #20]
 80087c8:	0026      	movs	r6, r4
 80087ca:	18cb      	adds	r3, r1, r3
 80087cc:	469c      	mov	ip, r3
 80087ce:	9902      	ldr	r1, [sp, #8]
 80087d0:	428e      	cmp	r6, r1
 80087d2:	d310      	bcc.n	80087f6 <__mdiff+0x102>
 80087d4:	9e02      	ldr	r6, [sp, #8]
 80087d6:	1ee1      	subs	r1, r4, #3
 80087d8:	2500      	movs	r5, #0
 80087da:	428e      	cmp	r6, r1
 80087dc:	d304      	bcc.n	80087e8 <__mdiff+0xf4>
 80087de:	0031      	movs	r1, r6
 80087e0:	3103      	adds	r1, #3
 80087e2:	1b0c      	subs	r4, r1, r4
 80087e4:	08a4      	lsrs	r4, r4, #2
 80087e6:	00a5      	lsls	r5, r4, #2
 80087e8:	195b      	adds	r3, r3, r5
 80087ea:	3b04      	subs	r3, #4
 80087ec:	6819      	ldr	r1, [r3, #0]
 80087ee:	2900      	cmp	r1, #0
 80087f0:	d00f      	beq.n	8008812 <__mdiff+0x11e>
 80087f2:	6110      	str	r0, [r2, #16]
 80087f4:	e797      	b.n	8008726 <__mdiff+0x32>
 80087f6:	ce02      	ldmia	r6!, {r1}
 80087f8:	b28d      	uxth	r5, r1
 80087fa:	19ed      	adds	r5, r5, r7
 80087fc:	0c0f      	lsrs	r7, r1, #16
 80087fe:	1429      	asrs	r1, r5, #16
 8008800:	1879      	adds	r1, r7, r1
 8008802:	140f      	asrs	r7, r1, #16
 8008804:	b2ad      	uxth	r5, r5
 8008806:	0409      	lsls	r1, r1, #16
 8008808:	430d      	orrs	r5, r1
 800880a:	4661      	mov	r1, ip
 800880c:	c120      	stmia	r1!, {r5}
 800880e:	468c      	mov	ip, r1
 8008810:	e7dd      	b.n	80087ce <__mdiff+0xda>
 8008812:	3801      	subs	r0, #1
 8008814:	e7e9      	b.n	80087ea <__mdiff+0xf6>
 8008816:	46c0      	nop			; (mov r8, r8)
 8008818:	08009cd7 	.word	0x08009cd7
 800881c:	00000232 	.word	0x00000232
 8008820:	08009d48 	.word	0x08009d48

08008824 <__d2b>:
 8008824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008826:	2101      	movs	r1, #1
 8008828:	0014      	movs	r4, r2
 800882a:	001e      	movs	r6, r3
 800882c:	9f08      	ldr	r7, [sp, #32]
 800882e:	f7ff fcc1 	bl	80081b4 <_Balloc>
 8008832:	1e05      	subs	r5, r0, #0
 8008834:	d105      	bne.n	8008842 <__d2b+0x1e>
 8008836:	0002      	movs	r2, r0
 8008838:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <__d2b+0xb0>)
 800883a:	4927      	ldr	r1, [pc, #156]	; (80088d8 <__d2b+0xb4>)
 800883c:	4827      	ldr	r0, [pc, #156]	; (80088dc <__d2b+0xb8>)
 800883e:	f000 fc05 	bl	800904c <__assert_func>
 8008842:	0333      	lsls	r3, r6, #12
 8008844:	0076      	lsls	r6, r6, #1
 8008846:	0b1b      	lsrs	r3, r3, #12
 8008848:	0d76      	lsrs	r6, r6, #21
 800884a:	d124      	bne.n	8008896 <__d2b+0x72>
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	2c00      	cmp	r4, #0
 8008850:	d027      	beq.n	80088a2 <__d2b+0x7e>
 8008852:	4668      	mov	r0, sp
 8008854:	9400      	str	r4, [sp, #0]
 8008856:	f7ff fd73 	bl	8008340 <__lo0bits>
 800885a:	9c00      	ldr	r4, [sp, #0]
 800885c:	2800      	cmp	r0, #0
 800885e:	d01e      	beq.n	800889e <__d2b+0x7a>
 8008860:	9b01      	ldr	r3, [sp, #4]
 8008862:	2120      	movs	r1, #32
 8008864:	001a      	movs	r2, r3
 8008866:	1a09      	subs	r1, r1, r0
 8008868:	408a      	lsls	r2, r1
 800886a:	40c3      	lsrs	r3, r0
 800886c:	4322      	orrs	r2, r4
 800886e:	616a      	str	r2, [r5, #20]
 8008870:	9301      	str	r3, [sp, #4]
 8008872:	9c01      	ldr	r4, [sp, #4]
 8008874:	61ac      	str	r4, [r5, #24]
 8008876:	1e63      	subs	r3, r4, #1
 8008878:	419c      	sbcs	r4, r3
 800887a:	3401      	adds	r4, #1
 800887c:	612c      	str	r4, [r5, #16]
 800887e:	2e00      	cmp	r6, #0
 8008880:	d018      	beq.n	80088b4 <__d2b+0x90>
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <__d2b+0xbc>)
 8008884:	18f6      	adds	r6, r6, r3
 8008886:	2335      	movs	r3, #53	; 0x35
 8008888:	1836      	adds	r6, r6, r0
 800888a:	1a18      	subs	r0, r3, r0
 800888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800888e:	603e      	str	r6, [r7, #0]
 8008890:	6018      	str	r0, [r3, #0]
 8008892:	0028      	movs	r0, r5
 8008894:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008896:	2280      	movs	r2, #128	; 0x80
 8008898:	0352      	lsls	r2, r2, #13
 800889a:	4313      	orrs	r3, r2
 800889c:	e7d6      	b.n	800884c <__d2b+0x28>
 800889e:	616c      	str	r4, [r5, #20]
 80088a0:	e7e7      	b.n	8008872 <__d2b+0x4e>
 80088a2:	a801      	add	r0, sp, #4
 80088a4:	f7ff fd4c 	bl	8008340 <__lo0bits>
 80088a8:	2401      	movs	r4, #1
 80088aa:	9b01      	ldr	r3, [sp, #4]
 80088ac:	612c      	str	r4, [r5, #16]
 80088ae:	616b      	str	r3, [r5, #20]
 80088b0:	3020      	adds	r0, #32
 80088b2:	e7e4      	b.n	800887e <__d2b+0x5a>
 80088b4:	4b0b      	ldr	r3, [pc, #44]	; (80088e4 <__d2b+0xc0>)
 80088b6:	18c0      	adds	r0, r0, r3
 80088b8:	4b0b      	ldr	r3, [pc, #44]	; (80088e8 <__d2b+0xc4>)
 80088ba:	6038      	str	r0, [r7, #0]
 80088bc:	18e3      	adds	r3, r4, r3
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	18eb      	adds	r3, r5, r3
 80088c2:	6958      	ldr	r0, [r3, #20]
 80088c4:	f7ff fd22 	bl	800830c <__hi0bits>
 80088c8:	0164      	lsls	r4, r4, #5
 80088ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088cc:	1a24      	subs	r4, r4, r0
 80088ce:	601c      	str	r4, [r3, #0]
 80088d0:	e7df      	b.n	8008892 <__d2b+0x6e>
 80088d2:	46c0      	nop			; (mov r8, r8)
 80088d4:	08009cd7 	.word	0x08009cd7
 80088d8:	0000030a 	.word	0x0000030a
 80088dc:	08009d48 	.word	0x08009d48
 80088e0:	fffffbcd 	.word	0xfffffbcd
 80088e4:	fffffbce 	.word	0xfffffbce
 80088e8:	3fffffff 	.word	0x3fffffff

080088ec <_calloc_r>:
 80088ec:	b570      	push	{r4, r5, r6, lr}
 80088ee:	0c13      	lsrs	r3, r2, #16
 80088f0:	0c0d      	lsrs	r5, r1, #16
 80088f2:	d11e      	bne.n	8008932 <_calloc_r+0x46>
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <_calloc_r+0x26>
 80088f8:	b289      	uxth	r1, r1
 80088fa:	b294      	uxth	r4, r2
 80088fc:	434c      	muls	r4, r1
 80088fe:	0021      	movs	r1, r4
 8008900:	f000 f88c 	bl	8008a1c <_malloc_r>
 8008904:	1e05      	subs	r5, r0, #0
 8008906:	d01b      	beq.n	8008940 <_calloc_r+0x54>
 8008908:	0022      	movs	r2, r4
 800890a:	2100      	movs	r1, #0
 800890c:	f7fd fff4 	bl	80068f8 <memset>
 8008910:	e016      	b.n	8008940 <_calloc_r+0x54>
 8008912:	1c1d      	adds	r5, r3, #0
 8008914:	1c0b      	adds	r3, r1, #0
 8008916:	b292      	uxth	r2, r2
 8008918:	b289      	uxth	r1, r1
 800891a:	b29c      	uxth	r4, r3
 800891c:	4351      	muls	r1, r2
 800891e:	b2ab      	uxth	r3, r5
 8008920:	4363      	muls	r3, r4
 8008922:	0c0c      	lsrs	r4, r1, #16
 8008924:	191c      	adds	r4, r3, r4
 8008926:	0c22      	lsrs	r2, r4, #16
 8008928:	d107      	bne.n	800893a <_calloc_r+0x4e>
 800892a:	0424      	lsls	r4, r4, #16
 800892c:	b289      	uxth	r1, r1
 800892e:	430c      	orrs	r4, r1
 8008930:	e7e5      	b.n	80088fe <_calloc_r+0x12>
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <_calloc_r+0x4e>
 8008936:	1c13      	adds	r3, r2, #0
 8008938:	e7ed      	b.n	8008916 <_calloc_r+0x2a>
 800893a:	230c      	movs	r3, #12
 800893c:	2500      	movs	r5, #0
 800893e:	6003      	str	r3, [r0, #0]
 8008940:	0028      	movs	r0, r5
 8008942:	bd70      	pop	{r4, r5, r6, pc}

08008944 <_free_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	0005      	movs	r5, r0
 8008948:	2900      	cmp	r1, #0
 800894a:	d010      	beq.n	800896e <_free_r+0x2a>
 800894c:	1f0c      	subs	r4, r1, #4
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	da00      	bge.n	8008956 <_free_r+0x12>
 8008954:	18e4      	adds	r4, r4, r3
 8008956:	0028      	movs	r0, r5
 8008958:	f000 fd16 	bl	8009388 <__malloc_lock>
 800895c:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <_free_r+0x90>)
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d105      	bne.n	8008970 <_free_r+0x2c>
 8008964:	6063      	str	r3, [r4, #4]
 8008966:	6014      	str	r4, [r2, #0]
 8008968:	0028      	movs	r0, r5
 800896a:	f000 fd15 	bl	8009398 <__malloc_unlock>
 800896e:	bd70      	pop	{r4, r5, r6, pc}
 8008970:	42a3      	cmp	r3, r4
 8008972:	d908      	bls.n	8008986 <_free_r+0x42>
 8008974:	6821      	ldr	r1, [r4, #0]
 8008976:	1860      	adds	r0, r4, r1
 8008978:	4283      	cmp	r3, r0
 800897a:	d1f3      	bne.n	8008964 <_free_r+0x20>
 800897c:	6818      	ldr	r0, [r3, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	1841      	adds	r1, r0, r1
 8008982:	6021      	str	r1, [r4, #0]
 8008984:	e7ee      	b.n	8008964 <_free_r+0x20>
 8008986:	001a      	movs	r2, r3
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <_free_r+0x4e>
 800898e:	42a3      	cmp	r3, r4
 8008990:	d9f9      	bls.n	8008986 <_free_r+0x42>
 8008992:	6811      	ldr	r1, [r2, #0]
 8008994:	1850      	adds	r0, r2, r1
 8008996:	42a0      	cmp	r0, r4
 8008998:	d10b      	bne.n	80089b2 <_free_r+0x6e>
 800899a:	6820      	ldr	r0, [r4, #0]
 800899c:	1809      	adds	r1, r1, r0
 800899e:	1850      	adds	r0, r2, r1
 80089a0:	6011      	str	r1, [r2, #0]
 80089a2:	4283      	cmp	r3, r0
 80089a4:	d1e0      	bne.n	8008968 <_free_r+0x24>
 80089a6:	6818      	ldr	r0, [r3, #0]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	1841      	adds	r1, r0, r1
 80089ac:	6011      	str	r1, [r2, #0]
 80089ae:	6053      	str	r3, [r2, #4]
 80089b0:	e7da      	b.n	8008968 <_free_r+0x24>
 80089b2:	42a0      	cmp	r0, r4
 80089b4:	d902      	bls.n	80089bc <_free_r+0x78>
 80089b6:	230c      	movs	r3, #12
 80089b8:	602b      	str	r3, [r5, #0]
 80089ba:	e7d5      	b.n	8008968 <_free_r+0x24>
 80089bc:	6821      	ldr	r1, [r4, #0]
 80089be:	1860      	adds	r0, r4, r1
 80089c0:	4283      	cmp	r3, r0
 80089c2:	d103      	bne.n	80089cc <_free_r+0x88>
 80089c4:	6818      	ldr	r0, [r3, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	1841      	adds	r1, r0, r1
 80089ca:	6021      	str	r1, [r4, #0]
 80089cc:	6063      	str	r3, [r4, #4]
 80089ce:	6054      	str	r4, [r2, #4]
 80089d0:	e7ca      	b.n	8008968 <_free_r+0x24>
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	200002dc 	.word	0x200002dc

080089d8 <sbrk_aligned>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	4e0f      	ldr	r6, [pc, #60]	; (8008a18 <sbrk_aligned+0x40>)
 80089dc:	000d      	movs	r5, r1
 80089de:	6831      	ldr	r1, [r6, #0]
 80089e0:	0004      	movs	r4, r0
 80089e2:	2900      	cmp	r1, #0
 80089e4:	d102      	bne.n	80089ec <sbrk_aligned+0x14>
 80089e6:	f000 f9f1 	bl	8008dcc <_sbrk_r>
 80089ea:	6030      	str	r0, [r6, #0]
 80089ec:	0029      	movs	r1, r5
 80089ee:	0020      	movs	r0, r4
 80089f0:	f000 f9ec 	bl	8008dcc <_sbrk_r>
 80089f4:	1c43      	adds	r3, r0, #1
 80089f6:	d00a      	beq.n	8008a0e <sbrk_aligned+0x36>
 80089f8:	2303      	movs	r3, #3
 80089fa:	1cc5      	adds	r5, r0, #3
 80089fc:	439d      	bics	r5, r3
 80089fe:	42a8      	cmp	r0, r5
 8008a00:	d007      	beq.n	8008a12 <sbrk_aligned+0x3a>
 8008a02:	1a29      	subs	r1, r5, r0
 8008a04:	0020      	movs	r0, r4
 8008a06:	f000 f9e1 	bl	8008dcc <_sbrk_r>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d101      	bne.n	8008a12 <sbrk_aligned+0x3a>
 8008a0e:	2501      	movs	r5, #1
 8008a10:	426d      	negs	r5, r5
 8008a12:	0028      	movs	r0, r5
 8008a14:	bd70      	pop	{r4, r5, r6, pc}
 8008a16:	46c0      	nop			; (mov r8, r8)
 8008a18:	200002e0 	.word	0x200002e0

08008a1c <_malloc_r>:
 8008a1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1e:	2203      	movs	r2, #3
 8008a20:	1ccb      	adds	r3, r1, #3
 8008a22:	4393      	bics	r3, r2
 8008a24:	3308      	adds	r3, #8
 8008a26:	0006      	movs	r6, r0
 8008a28:	001f      	movs	r7, r3
 8008a2a:	2b0c      	cmp	r3, #12
 8008a2c:	d232      	bcs.n	8008a94 <_malloc_r+0x78>
 8008a2e:	270c      	movs	r7, #12
 8008a30:	42b9      	cmp	r1, r7
 8008a32:	d831      	bhi.n	8008a98 <_malloc_r+0x7c>
 8008a34:	0030      	movs	r0, r6
 8008a36:	f000 fca7 	bl	8009388 <__malloc_lock>
 8008a3a:	4d32      	ldr	r5, [pc, #200]	; (8008b04 <_malloc_r+0xe8>)
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	001c      	movs	r4, r3
 8008a40:	2c00      	cmp	r4, #0
 8008a42:	d12e      	bne.n	8008aa2 <_malloc_r+0x86>
 8008a44:	0039      	movs	r1, r7
 8008a46:	0030      	movs	r0, r6
 8008a48:	f7ff ffc6 	bl	80089d8 <sbrk_aligned>
 8008a4c:	0004      	movs	r4, r0
 8008a4e:	1c43      	adds	r3, r0, #1
 8008a50:	d11e      	bne.n	8008a90 <_malloc_r+0x74>
 8008a52:	682c      	ldr	r4, [r5, #0]
 8008a54:	0025      	movs	r5, r4
 8008a56:	2d00      	cmp	r5, #0
 8008a58:	d14a      	bne.n	8008af0 <_malloc_r+0xd4>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	0029      	movs	r1, r5
 8008a5e:	18e3      	adds	r3, r4, r3
 8008a60:	0030      	movs	r0, r6
 8008a62:	9301      	str	r3, [sp, #4]
 8008a64:	f000 f9b2 	bl	8008dcc <_sbrk_r>
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	4283      	cmp	r3, r0
 8008a6c:	d143      	bne.n	8008af6 <_malloc_r+0xda>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	3703      	adds	r7, #3
 8008a72:	1aff      	subs	r7, r7, r3
 8008a74:	2303      	movs	r3, #3
 8008a76:	439f      	bics	r7, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	2f0c      	cmp	r7, #12
 8008a7c:	d200      	bcs.n	8008a80 <_malloc_r+0x64>
 8008a7e:	270c      	movs	r7, #12
 8008a80:	0039      	movs	r1, r7
 8008a82:	0030      	movs	r0, r6
 8008a84:	f7ff ffa8 	bl	80089d8 <sbrk_aligned>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d034      	beq.n	8008af6 <_malloc_r+0xda>
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	19df      	adds	r7, r3, r7
 8008a90:	6027      	str	r7, [r4, #0]
 8008a92:	e013      	b.n	8008abc <_malloc_r+0xa0>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	dacb      	bge.n	8008a30 <_malloc_r+0x14>
 8008a98:	230c      	movs	r3, #12
 8008a9a:	2500      	movs	r5, #0
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	0028      	movs	r0, r5
 8008aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aa2:	6822      	ldr	r2, [r4, #0]
 8008aa4:	1bd1      	subs	r1, r2, r7
 8008aa6:	d420      	bmi.n	8008aea <_malloc_r+0xce>
 8008aa8:	290b      	cmp	r1, #11
 8008aaa:	d917      	bls.n	8008adc <_malloc_r+0xc0>
 8008aac:	19e2      	adds	r2, r4, r7
 8008aae:	6027      	str	r7, [r4, #0]
 8008ab0:	42a3      	cmp	r3, r4
 8008ab2:	d111      	bne.n	8008ad8 <_malloc_r+0xbc>
 8008ab4:	602a      	str	r2, [r5, #0]
 8008ab6:	6863      	ldr	r3, [r4, #4]
 8008ab8:	6011      	str	r1, [r2, #0]
 8008aba:	6053      	str	r3, [r2, #4]
 8008abc:	0030      	movs	r0, r6
 8008abe:	0025      	movs	r5, r4
 8008ac0:	f000 fc6a 	bl	8009398 <__malloc_unlock>
 8008ac4:	2207      	movs	r2, #7
 8008ac6:	350b      	adds	r5, #11
 8008ac8:	1d23      	adds	r3, r4, #4
 8008aca:	4395      	bics	r5, r2
 8008acc:	1aea      	subs	r2, r5, r3
 8008ace:	429d      	cmp	r5, r3
 8008ad0:	d0e5      	beq.n	8008a9e <_malloc_r+0x82>
 8008ad2:	1b5b      	subs	r3, r3, r5
 8008ad4:	50a3      	str	r3, [r4, r2]
 8008ad6:	e7e2      	b.n	8008a9e <_malloc_r+0x82>
 8008ad8:	605a      	str	r2, [r3, #4]
 8008ada:	e7ec      	b.n	8008ab6 <_malloc_r+0x9a>
 8008adc:	6862      	ldr	r2, [r4, #4]
 8008ade:	42a3      	cmp	r3, r4
 8008ae0:	d101      	bne.n	8008ae6 <_malloc_r+0xca>
 8008ae2:	602a      	str	r2, [r5, #0]
 8008ae4:	e7ea      	b.n	8008abc <_malloc_r+0xa0>
 8008ae6:	605a      	str	r2, [r3, #4]
 8008ae8:	e7e8      	b.n	8008abc <_malloc_r+0xa0>
 8008aea:	0023      	movs	r3, r4
 8008aec:	6864      	ldr	r4, [r4, #4]
 8008aee:	e7a7      	b.n	8008a40 <_malloc_r+0x24>
 8008af0:	002c      	movs	r4, r5
 8008af2:	686d      	ldr	r5, [r5, #4]
 8008af4:	e7af      	b.n	8008a56 <_malloc_r+0x3a>
 8008af6:	230c      	movs	r3, #12
 8008af8:	0030      	movs	r0, r6
 8008afa:	6033      	str	r3, [r6, #0]
 8008afc:	f000 fc4c 	bl	8009398 <__malloc_unlock>
 8008b00:	e7cd      	b.n	8008a9e <_malloc_r+0x82>
 8008b02:	46c0      	nop			; (mov r8, r8)
 8008b04:	200002dc 	.word	0x200002dc

08008b08 <__sfputc_r>:
 8008b08:	6893      	ldr	r3, [r2, #8]
 8008b0a:	b510      	push	{r4, lr}
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	6093      	str	r3, [r2, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	da04      	bge.n	8008b1e <__sfputc_r+0x16>
 8008b14:	6994      	ldr	r4, [r2, #24]
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	db07      	blt.n	8008b2a <__sfputc_r+0x22>
 8008b1a:	290a      	cmp	r1, #10
 8008b1c:	d005      	beq.n	8008b2a <__sfputc_r+0x22>
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	1c58      	adds	r0, r3, #1
 8008b22:	6010      	str	r0, [r2, #0]
 8008b24:	7019      	strb	r1, [r3, #0]
 8008b26:	0008      	movs	r0, r1
 8008b28:	bd10      	pop	{r4, pc}
 8008b2a:	f000 f9ad 	bl	8008e88 <__swbuf_r>
 8008b2e:	0001      	movs	r1, r0
 8008b30:	e7f9      	b.n	8008b26 <__sfputc_r+0x1e>

08008b32 <__sfputs_r>:
 8008b32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b34:	0006      	movs	r6, r0
 8008b36:	000f      	movs	r7, r1
 8008b38:	0014      	movs	r4, r2
 8008b3a:	18d5      	adds	r5, r2, r3
 8008b3c:	42ac      	cmp	r4, r5
 8008b3e:	d101      	bne.n	8008b44 <__sfputs_r+0x12>
 8008b40:	2000      	movs	r0, #0
 8008b42:	e007      	b.n	8008b54 <__sfputs_r+0x22>
 8008b44:	7821      	ldrb	r1, [r4, #0]
 8008b46:	003a      	movs	r2, r7
 8008b48:	0030      	movs	r0, r6
 8008b4a:	f7ff ffdd 	bl	8008b08 <__sfputc_r>
 8008b4e:	3401      	adds	r4, #1
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d1f3      	bne.n	8008b3c <__sfputs_r+0xa>
 8008b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008b58 <_vfiprintf_r>:
 8008b58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b5a:	b0a1      	sub	sp, #132	; 0x84
 8008b5c:	0006      	movs	r6, r0
 8008b5e:	000c      	movs	r4, r1
 8008b60:	001f      	movs	r7, r3
 8008b62:	9203      	str	r2, [sp, #12]
 8008b64:	2800      	cmp	r0, #0
 8008b66:	d004      	beq.n	8008b72 <_vfiprintf_r+0x1a>
 8008b68:	6983      	ldr	r3, [r0, #24]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <_vfiprintf_r+0x1a>
 8008b6e:	f7ff fa5b 	bl	8008028 <__sinit>
 8008b72:	4b8e      	ldr	r3, [pc, #568]	; (8008dac <_vfiprintf_r+0x254>)
 8008b74:	429c      	cmp	r4, r3
 8008b76:	d11c      	bne.n	8008bb2 <_vfiprintf_r+0x5a>
 8008b78:	6874      	ldr	r4, [r6, #4]
 8008b7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b7c:	07db      	lsls	r3, r3, #31
 8008b7e:	d405      	bmi.n	8008b8c <_vfiprintf_r+0x34>
 8008b80:	89a3      	ldrh	r3, [r4, #12]
 8008b82:	059b      	lsls	r3, r3, #22
 8008b84:	d402      	bmi.n	8008b8c <_vfiprintf_r+0x34>
 8008b86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b88:	f7ff faf3 	bl	8008172 <__retarget_lock_acquire_recursive>
 8008b8c:	89a3      	ldrh	r3, [r4, #12]
 8008b8e:	071b      	lsls	r3, r3, #28
 8008b90:	d502      	bpl.n	8008b98 <_vfiprintf_r+0x40>
 8008b92:	6923      	ldr	r3, [r4, #16]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d11d      	bne.n	8008bd4 <_vfiprintf_r+0x7c>
 8008b98:	0021      	movs	r1, r4
 8008b9a:	0030      	movs	r0, r6
 8008b9c:	f000 f9de 	bl	8008f5c <__swsetup_r>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d017      	beq.n	8008bd4 <_vfiprintf_r+0x7c>
 8008ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba6:	07db      	lsls	r3, r3, #31
 8008ba8:	d50d      	bpl.n	8008bc6 <_vfiprintf_r+0x6e>
 8008baa:	2001      	movs	r0, #1
 8008bac:	4240      	negs	r0, r0
 8008bae:	b021      	add	sp, #132	; 0x84
 8008bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb2:	4b7f      	ldr	r3, [pc, #508]	; (8008db0 <_vfiprintf_r+0x258>)
 8008bb4:	429c      	cmp	r4, r3
 8008bb6:	d101      	bne.n	8008bbc <_vfiprintf_r+0x64>
 8008bb8:	68b4      	ldr	r4, [r6, #8]
 8008bba:	e7de      	b.n	8008b7a <_vfiprintf_r+0x22>
 8008bbc:	4b7d      	ldr	r3, [pc, #500]	; (8008db4 <_vfiprintf_r+0x25c>)
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	d1db      	bne.n	8008b7a <_vfiprintf_r+0x22>
 8008bc2:	68f4      	ldr	r4, [r6, #12]
 8008bc4:	e7d9      	b.n	8008b7a <_vfiprintf_r+0x22>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	059b      	lsls	r3, r3, #22
 8008bca:	d4ee      	bmi.n	8008baa <_vfiprintf_r+0x52>
 8008bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bce:	f7ff fad1 	bl	8008174 <__retarget_lock_release_recursive>
 8008bd2:	e7ea      	b.n	8008baa <_vfiprintf_r+0x52>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	ad08      	add	r5, sp, #32
 8008bd8:	616b      	str	r3, [r5, #20]
 8008bda:	3320      	adds	r3, #32
 8008bdc:	766b      	strb	r3, [r5, #25]
 8008bde:	3310      	adds	r3, #16
 8008be0:	76ab      	strb	r3, [r5, #26]
 8008be2:	9707      	str	r7, [sp, #28]
 8008be4:	9f03      	ldr	r7, [sp, #12]
 8008be6:	783b      	ldrb	r3, [r7, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <_vfiprintf_r+0x98>
 8008bec:	2b25      	cmp	r3, #37	; 0x25
 8008bee:	d14e      	bne.n	8008c8e <_vfiprintf_r+0x136>
 8008bf0:	9b03      	ldr	r3, [sp, #12]
 8008bf2:	1afb      	subs	r3, r7, r3
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	9b03      	ldr	r3, [sp, #12]
 8008bf8:	429f      	cmp	r7, r3
 8008bfa:	d00d      	beq.n	8008c18 <_vfiprintf_r+0xc0>
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	0021      	movs	r1, r4
 8008c00:	0030      	movs	r0, r6
 8008c02:	9a03      	ldr	r2, [sp, #12]
 8008c04:	f7ff ff95 	bl	8008b32 <__sfputs_r>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d100      	bne.n	8008c0e <_vfiprintf_r+0xb6>
 8008c0c:	e0b5      	b.n	8008d7a <_vfiprintf_r+0x222>
 8008c0e:	696a      	ldr	r2, [r5, #20]
 8008c10:	9b05      	ldr	r3, [sp, #20]
 8008c12:	4694      	mov	ip, r2
 8008c14:	4463      	add	r3, ip
 8008c16:	616b      	str	r3, [r5, #20]
 8008c18:	783b      	ldrb	r3, [r7, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d100      	bne.n	8008c20 <_vfiprintf_r+0xc8>
 8008c1e:	e0ac      	b.n	8008d7a <_vfiprintf_r+0x222>
 8008c20:	2201      	movs	r2, #1
 8008c22:	1c7b      	adds	r3, r7, #1
 8008c24:	9303      	str	r3, [sp, #12]
 8008c26:	2300      	movs	r3, #0
 8008c28:	4252      	negs	r2, r2
 8008c2a:	606a      	str	r2, [r5, #4]
 8008c2c:	a904      	add	r1, sp, #16
 8008c2e:	3254      	adds	r2, #84	; 0x54
 8008c30:	1852      	adds	r2, r2, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	60eb      	str	r3, [r5, #12]
 8008c36:	60ab      	str	r3, [r5, #8]
 8008c38:	7013      	strb	r3, [r2, #0]
 8008c3a:	65ab      	str	r3, [r5, #88]	; 0x58
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	2205      	movs	r2, #5
 8008c40:	7819      	ldrb	r1, [r3, #0]
 8008c42:	485d      	ldr	r0, [pc, #372]	; (8008db8 <_vfiprintf_r+0x260>)
 8008c44:	f7ff faa2 	bl	800818c <memchr>
 8008c48:	9b03      	ldr	r3, [sp, #12]
 8008c4a:	1c5f      	adds	r7, r3, #1
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	d120      	bne.n	8008c92 <_vfiprintf_r+0x13a>
 8008c50:	682a      	ldr	r2, [r5, #0]
 8008c52:	06d3      	lsls	r3, r2, #27
 8008c54:	d504      	bpl.n	8008c60 <_vfiprintf_r+0x108>
 8008c56:	2353      	movs	r3, #83	; 0x53
 8008c58:	a904      	add	r1, sp, #16
 8008c5a:	185b      	adds	r3, r3, r1
 8008c5c:	2120      	movs	r1, #32
 8008c5e:	7019      	strb	r1, [r3, #0]
 8008c60:	0713      	lsls	r3, r2, #28
 8008c62:	d504      	bpl.n	8008c6e <_vfiprintf_r+0x116>
 8008c64:	2353      	movs	r3, #83	; 0x53
 8008c66:	a904      	add	r1, sp, #16
 8008c68:	185b      	adds	r3, r3, r1
 8008c6a:	212b      	movs	r1, #43	; 0x2b
 8008c6c:	7019      	strb	r1, [r3, #0]
 8008c6e:	9b03      	ldr	r3, [sp, #12]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	2b2a      	cmp	r3, #42	; 0x2a
 8008c74:	d016      	beq.n	8008ca4 <_vfiprintf_r+0x14c>
 8008c76:	2100      	movs	r1, #0
 8008c78:	68eb      	ldr	r3, [r5, #12]
 8008c7a:	9f03      	ldr	r7, [sp, #12]
 8008c7c:	783a      	ldrb	r2, [r7, #0]
 8008c7e:	1c78      	adds	r0, r7, #1
 8008c80:	3a30      	subs	r2, #48	; 0x30
 8008c82:	4684      	mov	ip, r0
 8008c84:	2a09      	cmp	r2, #9
 8008c86:	d94f      	bls.n	8008d28 <_vfiprintf_r+0x1d0>
 8008c88:	2900      	cmp	r1, #0
 8008c8a:	d111      	bne.n	8008cb0 <_vfiprintf_r+0x158>
 8008c8c:	e017      	b.n	8008cbe <_vfiprintf_r+0x166>
 8008c8e:	3701      	adds	r7, #1
 8008c90:	e7a9      	b.n	8008be6 <_vfiprintf_r+0x8e>
 8008c92:	4b49      	ldr	r3, [pc, #292]	; (8008db8 <_vfiprintf_r+0x260>)
 8008c94:	682a      	ldr	r2, [r5, #0]
 8008c96:	1ac0      	subs	r0, r0, r3
 8008c98:	2301      	movs	r3, #1
 8008c9a:	4083      	lsls	r3, r0
 8008c9c:	4313      	orrs	r3, r2
 8008c9e:	602b      	str	r3, [r5, #0]
 8008ca0:	9703      	str	r7, [sp, #12]
 8008ca2:	e7cb      	b.n	8008c3c <_vfiprintf_r+0xe4>
 8008ca4:	9b07      	ldr	r3, [sp, #28]
 8008ca6:	1d19      	adds	r1, r3, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	9107      	str	r1, [sp, #28]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	db01      	blt.n	8008cb4 <_vfiprintf_r+0x15c>
 8008cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cb2:	e004      	b.n	8008cbe <_vfiprintf_r+0x166>
 8008cb4:	425b      	negs	r3, r3
 8008cb6:	60eb      	str	r3, [r5, #12]
 8008cb8:	2302      	movs	r3, #2
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	602b      	str	r3, [r5, #0]
 8008cbe:	783b      	ldrb	r3, [r7, #0]
 8008cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8008cc2:	d10a      	bne.n	8008cda <_vfiprintf_r+0x182>
 8008cc4:	787b      	ldrb	r3, [r7, #1]
 8008cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8008cc8:	d137      	bne.n	8008d3a <_vfiprintf_r+0x1e2>
 8008cca:	9b07      	ldr	r3, [sp, #28]
 8008ccc:	3702      	adds	r7, #2
 8008cce:	1d1a      	adds	r2, r3, #4
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	9207      	str	r2, [sp, #28]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	db2d      	blt.n	8008d34 <_vfiprintf_r+0x1dc>
 8008cd8:	9309      	str	r3, [sp, #36]	; 0x24
 8008cda:	2203      	movs	r2, #3
 8008cdc:	7839      	ldrb	r1, [r7, #0]
 8008cde:	4837      	ldr	r0, [pc, #220]	; (8008dbc <_vfiprintf_r+0x264>)
 8008ce0:	f7ff fa54 	bl	800818c <memchr>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d007      	beq.n	8008cf8 <_vfiprintf_r+0x1a0>
 8008ce8:	4b34      	ldr	r3, [pc, #208]	; (8008dbc <_vfiprintf_r+0x264>)
 8008cea:	682a      	ldr	r2, [r5, #0]
 8008cec:	1ac0      	subs	r0, r0, r3
 8008cee:	2340      	movs	r3, #64	; 0x40
 8008cf0:	4083      	lsls	r3, r0
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	3701      	adds	r7, #1
 8008cf6:	602b      	str	r3, [r5, #0]
 8008cf8:	7839      	ldrb	r1, [r7, #0]
 8008cfa:	1c7b      	adds	r3, r7, #1
 8008cfc:	2206      	movs	r2, #6
 8008cfe:	4830      	ldr	r0, [pc, #192]	; (8008dc0 <_vfiprintf_r+0x268>)
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	7629      	strb	r1, [r5, #24]
 8008d04:	f7ff fa42 	bl	800818c <memchr>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d045      	beq.n	8008d98 <_vfiprintf_r+0x240>
 8008d0c:	4b2d      	ldr	r3, [pc, #180]	; (8008dc4 <_vfiprintf_r+0x26c>)
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d127      	bne.n	8008d62 <_vfiprintf_r+0x20a>
 8008d12:	2207      	movs	r2, #7
 8008d14:	9b07      	ldr	r3, [sp, #28]
 8008d16:	3307      	adds	r3, #7
 8008d18:	4393      	bics	r3, r2
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	9307      	str	r3, [sp, #28]
 8008d1e:	696b      	ldr	r3, [r5, #20]
 8008d20:	9a04      	ldr	r2, [sp, #16]
 8008d22:	189b      	adds	r3, r3, r2
 8008d24:	616b      	str	r3, [r5, #20]
 8008d26:	e75d      	b.n	8008be4 <_vfiprintf_r+0x8c>
 8008d28:	210a      	movs	r1, #10
 8008d2a:	434b      	muls	r3, r1
 8008d2c:	4667      	mov	r7, ip
 8008d2e:	189b      	adds	r3, r3, r2
 8008d30:	3909      	subs	r1, #9
 8008d32:	e7a3      	b.n	8008c7c <_vfiprintf_r+0x124>
 8008d34:	2301      	movs	r3, #1
 8008d36:	425b      	negs	r3, r3
 8008d38:	e7ce      	b.n	8008cd8 <_vfiprintf_r+0x180>
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	001a      	movs	r2, r3
 8008d3e:	3701      	adds	r7, #1
 8008d40:	606b      	str	r3, [r5, #4]
 8008d42:	7839      	ldrb	r1, [r7, #0]
 8008d44:	1c78      	adds	r0, r7, #1
 8008d46:	3930      	subs	r1, #48	; 0x30
 8008d48:	4684      	mov	ip, r0
 8008d4a:	2909      	cmp	r1, #9
 8008d4c:	d903      	bls.n	8008d56 <_vfiprintf_r+0x1fe>
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d0c3      	beq.n	8008cda <_vfiprintf_r+0x182>
 8008d52:	9209      	str	r2, [sp, #36]	; 0x24
 8008d54:	e7c1      	b.n	8008cda <_vfiprintf_r+0x182>
 8008d56:	230a      	movs	r3, #10
 8008d58:	435a      	muls	r2, r3
 8008d5a:	4667      	mov	r7, ip
 8008d5c:	1852      	adds	r2, r2, r1
 8008d5e:	3b09      	subs	r3, #9
 8008d60:	e7ef      	b.n	8008d42 <_vfiprintf_r+0x1ea>
 8008d62:	ab07      	add	r3, sp, #28
 8008d64:	9300      	str	r3, [sp, #0]
 8008d66:	0022      	movs	r2, r4
 8008d68:	0029      	movs	r1, r5
 8008d6a:	0030      	movs	r0, r6
 8008d6c:	4b16      	ldr	r3, [pc, #88]	; (8008dc8 <_vfiprintf_r+0x270>)
 8008d6e:	f7fd fe75 	bl	8006a5c <_printf_float>
 8008d72:	9004      	str	r0, [sp, #16]
 8008d74:	9b04      	ldr	r3, [sp, #16]
 8008d76:	3301      	adds	r3, #1
 8008d78:	d1d1      	bne.n	8008d1e <_vfiprintf_r+0x1c6>
 8008d7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d7c:	07db      	lsls	r3, r3, #31
 8008d7e:	d405      	bmi.n	8008d8c <_vfiprintf_r+0x234>
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	059b      	lsls	r3, r3, #22
 8008d84:	d402      	bmi.n	8008d8c <_vfiprintf_r+0x234>
 8008d86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d88:	f7ff f9f4 	bl	8008174 <__retarget_lock_release_recursive>
 8008d8c:	89a3      	ldrh	r3, [r4, #12]
 8008d8e:	065b      	lsls	r3, r3, #25
 8008d90:	d500      	bpl.n	8008d94 <_vfiprintf_r+0x23c>
 8008d92:	e70a      	b.n	8008baa <_vfiprintf_r+0x52>
 8008d94:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008d96:	e70a      	b.n	8008bae <_vfiprintf_r+0x56>
 8008d98:	ab07      	add	r3, sp, #28
 8008d9a:	9300      	str	r3, [sp, #0]
 8008d9c:	0022      	movs	r2, r4
 8008d9e:	0029      	movs	r1, r5
 8008da0:	0030      	movs	r0, r6
 8008da2:	4b09      	ldr	r3, [pc, #36]	; (8008dc8 <_vfiprintf_r+0x270>)
 8008da4:	f7fe f90c 	bl	8006fc0 <_printf_i>
 8008da8:	e7e3      	b.n	8008d72 <_vfiprintf_r+0x21a>
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	08009d08 	.word	0x08009d08
 8008db0:	08009d28 	.word	0x08009d28
 8008db4:	08009ce8 	.word	0x08009ce8
 8008db8:	08009ea4 	.word	0x08009ea4
 8008dbc:	08009eaa 	.word	0x08009eaa
 8008dc0:	08009eae 	.word	0x08009eae
 8008dc4:	08006a5d 	.word	0x08006a5d
 8008dc8:	08008b33 	.word	0x08008b33

08008dcc <_sbrk_r>:
 8008dcc:	2300      	movs	r3, #0
 8008dce:	b570      	push	{r4, r5, r6, lr}
 8008dd0:	4d06      	ldr	r5, [pc, #24]	; (8008dec <_sbrk_r+0x20>)
 8008dd2:	0004      	movs	r4, r0
 8008dd4:	0008      	movs	r0, r1
 8008dd6:	602b      	str	r3, [r5, #0]
 8008dd8:	f7fa fd46 	bl	8003868 <_sbrk>
 8008ddc:	1c43      	adds	r3, r0, #1
 8008dde:	d103      	bne.n	8008de8 <_sbrk_r+0x1c>
 8008de0:	682b      	ldr	r3, [r5, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d000      	beq.n	8008de8 <_sbrk_r+0x1c>
 8008de6:	6023      	str	r3, [r4, #0]
 8008de8:	bd70      	pop	{r4, r5, r6, pc}
 8008dea:	46c0      	nop			; (mov r8, r8)
 8008dec:	200002e4 	.word	0x200002e4

08008df0 <__sread>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	000c      	movs	r4, r1
 8008df4:	250e      	movs	r5, #14
 8008df6:	5f49      	ldrsh	r1, [r1, r5]
 8008df8:	f000 fad6 	bl	80093a8 <_read_r>
 8008dfc:	2800      	cmp	r0, #0
 8008dfe:	db03      	blt.n	8008e08 <__sread+0x18>
 8008e00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008e02:	181b      	adds	r3, r3, r0
 8008e04:	6563      	str	r3, [r4, #84]	; 0x54
 8008e06:	bd70      	pop	{r4, r5, r6, pc}
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	4a02      	ldr	r2, [pc, #8]	; (8008e14 <__sread+0x24>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	e7f9      	b.n	8008e06 <__sread+0x16>
 8008e12:	46c0      	nop			; (mov r8, r8)
 8008e14:	ffffefff 	.word	0xffffefff

08008e18 <__swrite>:
 8008e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e1a:	001f      	movs	r7, r3
 8008e1c:	898b      	ldrh	r3, [r1, #12]
 8008e1e:	0005      	movs	r5, r0
 8008e20:	000c      	movs	r4, r1
 8008e22:	0016      	movs	r6, r2
 8008e24:	05db      	lsls	r3, r3, #23
 8008e26:	d505      	bpl.n	8008e34 <__swrite+0x1c>
 8008e28:	230e      	movs	r3, #14
 8008e2a:	5ec9      	ldrsh	r1, [r1, r3]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	2302      	movs	r3, #2
 8008e30:	f000 fa18 	bl	8009264 <_lseek_r>
 8008e34:	89a3      	ldrh	r3, [r4, #12]
 8008e36:	4a05      	ldr	r2, [pc, #20]	; (8008e4c <__swrite+0x34>)
 8008e38:	0028      	movs	r0, r5
 8008e3a:	4013      	ands	r3, r2
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	0032      	movs	r2, r6
 8008e40:	230e      	movs	r3, #14
 8008e42:	5ee1      	ldrsh	r1, [r4, r3]
 8008e44:	003b      	movs	r3, r7
 8008e46:	f000 f875 	bl	8008f34 <_write_r>
 8008e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e4c:	ffffefff 	.word	0xffffefff

08008e50 <__sseek>:
 8008e50:	b570      	push	{r4, r5, r6, lr}
 8008e52:	000c      	movs	r4, r1
 8008e54:	250e      	movs	r5, #14
 8008e56:	5f49      	ldrsh	r1, [r1, r5]
 8008e58:	f000 fa04 	bl	8009264 <_lseek_r>
 8008e5c:	89a3      	ldrh	r3, [r4, #12]
 8008e5e:	1c42      	adds	r2, r0, #1
 8008e60:	d103      	bne.n	8008e6a <__sseek+0x1a>
 8008e62:	4a05      	ldr	r2, [pc, #20]	; (8008e78 <__sseek+0x28>)
 8008e64:	4013      	ands	r3, r2
 8008e66:	81a3      	strh	r3, [r4, #12]
 8008e68:	bd70      	pop	{r4, r5, r6, pc}
 8008e6a:	2280      	movs	r2, #128	; 0x80
 8008e6c:	0152      	lsls	r2, r2, #5
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	81a3      	strh	r3, [r4, #12]
 8008e72:	6560      	str	r0, [r4, #84]	; 0x54
 8008e74:	e7f8      	b.n	8008e68 <__sseek+0x18>
 8008e76:	46c0      	nop			; (mov r8, r8)
 8008e78:	ffffefff 	.word	0xffffefff

08008e7c <__sclose>:
 8008e7c:	b510      	push	{r4, lr}
 8008e7e:	230e      	movs	r3, #14
 8008e80:	5ec9      	ldrsh	r1, [r1, r3]
 8008e82:	f000 f901 	bl	8009088 <_close_r>
 8008e86:	bd10      	pop	{r4, pc}

08008e88 <__swbuf_r>:
 8008e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e8a:	0005      	movs	r5, r0
 8008e8c:	000e      	movs	r6, r1
 8008e8e:	0014      	movs	r4, r2
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d004      	beq.n	8008e9e <__swbuf_r+0x16>
 8008e94:	6983      	ldr	r3, [r0, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <__swbuf_r+0x16>
 8008e9a:	f7ff f8c5 	bl	8008028 <__sinit>
 8008e9e:	4b22      	ldr	r3, [pc, #136]	; (8008f28 <__swbuf_r+0xa0>)
 8008ea0:	429c      	cmp	r4, r3
 8008ea2:	d12e      	bne.n	8008f02 <__swbuf_r+0x7a>
 8008ea4:	686c      	ldr	r4, [r5, #4]
 8008ea6:	69a3      	ldr	r3, [r4, #24]
 8008ea8:	60a3      	str	r3, [r4, #8]
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	071b      	lsls	r3, r3, #28
 8008eae:	d532      	bpl.n	8008f16 <__swbuf_r+0x8e>
 8008eb0:	6923      	ldr	r3, [r4, #16]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d02f      	beq.n	8008f16 <__swbuf_r+0x8e>
 8008eb6:	6823      	ldr	r3, [r4, #0]
 8008eb8:	6922      	ldr	r2, [r4, #16]
 8008eba:	b2f7      	uxtb	r7, r6
 8008ebc:	1a98      	subs	r0, r3, r2
 8008ebe:	6963      	ldr	r3, [r4, #20]
 8008ec0:	b2f6      	uxtb	r6, r6
 8008ec2:	4283      	cmp	r3, r0
 8008ec4:	dc05      	bgt.n	8008ed2 <__swbuf_r+0x4a>
 8008ec6:	0021      	movs	r1, r4
 8008ec8:	0028      	movs	r0, r5
 8008eca:	f000 f97b 	bl	80091c4 <_fflush_r>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d127      	bne.n	8008f22 <__swbuf_r+0x9a>
 8008ed2:	68a3      	ldr	r3, [r4, #8]
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	60a3      	str	r3, [r4, #8]
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	1c5a      	adds	r2, r3, #1
 8008ede:	6022      	str	r2, [r4, #0]
 8008ee0:	701f      	strb	r7, [r3, #0]
 8008ee2:	6963      	ldr	r3, [r4, #20]
 8008ee4:	4283      	cmp	r3, r0
 8008ee6:	d004      	beq.n	8008ef2 <__swbuf_r+0x6a>
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	07db      	lsls	r3, r3, #31
 8008eec:	d507      	bpl.n	8008efe <__swbuf_r+0x76>
 8008eee:	2e0a      	cmp	r6, #10
 8008ef0:	d105      	bne.n	8008efe <__swbuf_r+0x76>
 8008ef2:	0021      	movs	r1, r4
 8008ef4:	0028      	movs	r0, r5
 8008ef6:	f000 f965 	bl	80091c4 <_fflush_r>
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d111      	bne.n	8008f22 <__swbuf_r+0x9a>
 8008efe:	0030      	movs	r0, r6
 8008f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f02:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <__swbuf_r+0xa4>)
 8008f04:	429c      	cmp	r4, r3
 8008f06:	d101      	bne.n	8008f0c <__swbuf_r+0x84>
 8008f08:	68ac      	ldr	r4, [r5, #8]
 8008f0a:	e7cc      	b.n	8008ea6 <__swbuf_r+0x1e>
 8008f0c:	4b08      	ldr	r3, [pc, #32]	; (8008f30 <__swbuf_r+0xa8>)
 8008f0e:	429c      	cmp	r4, r3
 8008f10:	d1c9      	bne.n	8008ea6 <__swbuf_r+0x1e>
 8008f12:	68ec      	ldr	r4, [r5, #12]
 8008f14:	e7c7      	b.n	8008ea6 <__swbuf_r+0x1e>
 8008f16:	0021      	movs	r1, r4
 8008f18:	0028      	movs	r0, r5
 8008f1a:	f000 f81f 	bl	8008f5c <__swsetup_r>
 8008f1e:	2800      	cmp	r0, #0
 8008f20:	d0c9      	beq.n	8008eb6 <__swbuf_r+0x2e>
 8008f22:	2601      	movs	r6, #1
 8008f24:	4276      	negs	r6, r6
 8008f26:	e7ea      	b.n	8008efe <__swbuf_r+0x76>
 8008f28:	08009d08 	.word	0x08009d08
 8008f2c:	08009d28 	.word	0x08009d28
 8008f30:	08009ce8 	.word	0x08009ce8

08008f34 <_write_r>:
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	0004      	movs	r4, r0
 8008f38:	0008      	movs	r0, r1
 8008f3a:	0011      	movs	r1, r2
 8008f3c:	001a      	movs	r2, r3
 8008f3e:	2300      	movs	r3, #0
 8008f40:	4d05      	ldr	r5, [pc, #20]	; (8008f58 <_write_r+0x24>)
 8008f42:	602b      	str	r3, [r5, #0]
 8008f44:	f7fa fc48 	bl	80037d8 <_write>
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d103      	bne.n	8008f54 <_write_r+0x20>
 8008f4c:	682b      	ldr	r3, [r5, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d000      	beq.n	8008f54 <_write_r+0x20>
 8008f52:	6023      	str	r3, [r4, #0]
 8008f54:	bd70      	pop	{r4, r5, r6, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	200002e4 	.word	0x200002e4

08008f5c <__swsetup_r>:
 8008f5c:	4b37      	ldr	r3, [pc, #220]	; (800903c <__swsetup_r+0xe0>)
 8008f5e:	b570      	push	{r4, r5, r6, lr}
 8008f60:	681d      	ldr	r5, [r3, #0]
 8008f62:	0006      	movs	r6, r0
 8008f64:	000c      	movs	r4, r1
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	d005      	beq.n	8008f76 <__swsetup_r+0x1a>
 8008f6a:	69ab      	ldr	r3, [r5, #24]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d102      	bne.n	8008f76 <__swsetup_r+0x1a>
 8008f70:	0028      	movs	r0, r5
 8008f72:	f7ff f859 	bl	8008028 <__sinit>
 8008f76:	4b32      	ldr	r3, [pc, #200]	; (8009040 <__swsetup_r+0xe4>)
 8008f78:	429c      	cmp	r4, r3
 8008f7a:	d10f      	bne.n	8008f9c <__swsetup_r+0x40>
 8008f7c:	686c      	ldr	r4, [r5, #4]
 8008f7e:	230c      	movs	r3, #12
 8008f80:	5ee2      	ldrsh	r2, [r4, r3]
 8008f82:	b293      	uxth	r3, r2
 8008f84:	0711      	lsls	r1, r2, #28
 8008f86:	d42d      	bmi.n	8008fe4 <__swsetup_r+0x88>
 8008f88:	06d9      	lsls	r1, r3, #27
 8008f8a:	d411      	bmi.n	8008fb0 <__swsetup_r+0x54>
 8008f8c:	2309      	movs	r3, #9
 8008f8e:	2001      	movs	r0, #1
 8008f90:	6033      	str	r3, [r6, #0]
 8008f92:	3337      	adds	r3, #55	; 0x37
 8008f94:	4313      	orrs	r3, r2
 8008f96:	81a3      	strh	r3, [r4, #12]
 8008f98:	4240      	negs	r0, r0
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	4b29      	ldr	r3, [pc, #164]	; (8009044 <__swsetup_r+0xe8>)
 8008f9e:	429c      	cmp	r4, r3
 8008fa0:	d101      	bne.n	8008fa6 <__swsetup_r+0x4a>
 8008fa2:	68ac      	ldr	r4, [r5, #8]
 8008fa4:	e7eb      	b.n	8008f7e <__swsetup_r+0x22>
 8008fa6:	4b28      	ldr	r3, [pc, #160]	; (8009048 <__swsetup_r+0xec>)
 8008fa8:	429c      	cmp	r4, r3
 8008faa:	d1e8      	bne.n	8008f7e <__swsetup_r+0x22>
 8008fac:	68ec      	ldr	r4, [r5, #12]
 8008fae:	e7e6      	b.n	8008f7e <__swsetup_r+0x22>
 8008fb0:	075b      	lsls	r3, r3, #29
 8008fb2:	d513      	bpl.n	8008fdc <__swsetup_r+0x80>
 8008fb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb6:	2900      	cmp	r1, #0
 8008fb8:	d008      	beq.n	8008fcc <__swsetup_r+0x70>
 8008fba:	0023      	movs	r3, r4
 8008fbc:	3344      	adds	r3, #68	; 0x44
 8008fbe:	4299      	cmp	r1, r3
 8008fc0:	d002      	beq.n	8008fc8 <__swsetup_r+0x6c>
 8008fc2:	0030      	movs	r0, r6
 8008fc4:	f7ff fcbe 	bl	8008944 <_free_r>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	6363      	str	r3, [r4, #52]	; 0x34
 8008fcc:	2224      	movs	r2, #36	; 0x24
 8008fce:	89a3      	ldrh	r3, [r4, #12]
 8008fd0:	4393      	bics	r3, r2
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6063      	str	r3, [r4, #4]
 8008fd8:	6923      	ldr	r3, [r4, #16]
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	2308      	movs	r3, #8
 8008fde:	89a2      	ldrh	r2, [r4, #12]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	6923      	ldr	r3, [r4, #16]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d10b      	bne.n	8009002 <__swsetup_r+0xa6>
 8008fea:	21a0      	movs	r1, #160	; 0xa0
 8008fec:	2280      	movs	r2, #128	; 0x80
 8008fee:	89a3      	ldrh	r3, [r4, #12]
 8008ff0:	0089      	lsls	r1, r1, #2
 8008ff2:	0092      	lsls	r2, r2, #2
 8008ff4:	400b      	ands	r3, r1
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d003      	beq.n	8009002 <__swsetup_r+0xa6>
 8008ffa:	0021      	movs	r1, r4
 8008ffc:	0030      	movs	r0, r6
 8008ffe:	f000 f96d 	bl	80092dc <__smakebuf_r>
 8009002:	220c      	movs	r2, #12
 8009004:	5ea3      	ldrsh	r3, [r4, r2]
 8009006:	2001      	movs	r0, #1
 8009008:	001a      	movs	r2, r3
 800900a:	b299      	uxth	r1, r3
 800900c:	4002      	ands	r2, r0
 800900e:	4203      	tst	r3, r0
 8009010:	d00f      	beq.n	8009032 <__swsetup_r+0xd6>
 8009012:	2200      	movs	r2, #0
 8009014:	60a2      	str	r2, [r4, #8]
 8009016:	6962      	ldr	r2, [r4, #20]
 8009018:	4252      	negs	r2, r2
 800901a:	61a2      	str	r2, [r4, #24]
 800901c:	2000      	movs	r0, #0
 800901e:	6922      	ldr	r2, [r4, #16]
 8009020:	4282      	cmp	r2, r0
 8009022:	d1ba      	bne.n	8008f9a <__swsetup_r+0x3e>
 8009024:	060a      	lsls	r2, r1, #24
 8009026:	d5b8      	bpl.n	8008f9a <__swsetup_r+0x3e>
 8009028:	2240      	movs	r2, #64	; 0x40
 800902a:	4313      	orrs	r3, r2
 800902c:	81a3      	strh	r3, [r4, #12]
 800902e:	3801      	subs	r0, #1
 8009030:	e7b3      	b.n	8008f9a <__swsetup_r+0x3e>
 8009032:	0788      	lsls	r0, r1, #30
 8009034:	d400      	bmi.n	8009038 <__swsetup_r+0xdc>
 8009036:	6962      	ldr	r2, [r4, #20]
 8009038:	60a2      	str	r2, [r4, #8]
 800903a:	e7ef      	b.n	800901c <__swsetup_r+0xc0>
 800903c:	2000000c 	.word	0x2000000c
 8009040:	08009d08 	.word	0x08009d08
 8009044:	08009d28 	.word	0x08009d28
 8009048:	08009ce8 	.word	0x08009ce8

0800904c <__assert_func>:
 800904c:	b530      	push	{r4, r5, lr}
 800904e:	0014      	movs	r4, r2
 8009050:	001a      	movs	r2, r3
 8009052:	4b09      	ldr	r3, [pc, #36]	; (8009078 <__assert_func+0x2c>)
 8009054:	0005      	movs	r5, r0
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	b085      	sub	sp, #20
 800905a:	68d8      	ldr	r0, [r3, #12]
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <__assert_func+0x30>)
 800905e:	2c00      	cmp	r4, #0
 8009060:	d101      	bne.n	8009066 <__assert_func+0x1a>
 8009062:	4b07      	ldr	r3, [pc, #28]	; (8009080 <__assert_func+0x34>)
 8009064:	001c      	movs	r4, r3
 8009066:	9301      	str	r3, [sp, #4]
 8009068:	9100      	str	r1, [sp, #0]
 800906a:	002b      	movs	r3, r5
 800906c:	4905      	ldr	r1, [pc, #20]	; (8009084 <__assert_func+0x38>)
 800906e:	9402      	str	r4, [sp, #8]
 8009070:	f000 f8e8 	bl	8009244 <fiprintf>
 8009074:	f000 f9b9 	bl	80093ea <abort>
 8009078:	2000000c 	.word	0x2000000c
 800907c:	08009eb5 	.word	0x08009eb5
 8009080:	08009ef0 	.word	0x08009ef0
 8009084:	08009ec2 	.word	0x08009ec2

08009088 <_close_r>:
 8009088:	2300      	movs	r3, #0
 800908a:	b570      	push	{r4, r5, r6, lr}
 800908c:	4d06      	ldr	r5, [pc, #24]	; (80090a8 <_close_r+0x20>)
 800908e:	0004      	movs	r4, r0
 8009090:	0008      	movs	r0, r1
 8009092:	602b      	str	r3, [r5, #0]
 8009094:	f7fa fbbc 	bl	8003810 <_close>
 8009098:	1c43      	adds	r3, r0, #1
 800909a:	d103      	bne.n	80090a4 <_close_r+0x1c>
 800909c:	682b      	ldr	r3, [r5, #0]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d000      	beq.n	80090a4 <_close_r+0x1c>
 80090a2:	6023      	str	r3, [r4, #0]
 80090a4:	bd70      	pop	{r4, r5, r6, pc}
 80090a6:	46c0      	nop			; (mov r8, r8)
 80090a8:	200002e4 	.word	0x200002e4

080090ac <__sflush_r>:
 80090ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ae:	898b      	ldrh	r3, [r1, #12]
 80090b0:	0005      	movs	r5, r0
 80090b2:	000c      	movs	r4, r1
 80090b4:	071a      	lsls	r2, r3, #28
 80090b6:	d45f      	bmi.n	8009178 <__sflush_r+0xcc>
 80090b8:	684a      	ldr	r2, [r1, #4]
 80090ba:	2a00      	cmp	r2, #0
 80090bc:	dc04      	bgt.n	80090c8 <__sflush_r+0x1c>
 80090be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	dc01      	bgt.n	80090c8 <__sflush_r+0x1c>
 80090c4:	2000      	movs	r0, #0
 80090c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80090ca:	2f00      	cmp	r7, #0
 80090cc:	d0fa      	beq.n	80090c4 <__sflush_r+0x18>
 80090ce:	2200      	movs	r2, #0
 80090d0:	2180      	movs	r1, #128	; 0x80
 80090d2:	682e      	ldr	r6, [r5, #0]
 80090d4:	602a      	str	r2, [r5, #0]
 80090d6:	001a      	movs	r2, r3
 80090d8:	0149      	lsls	r1, r1, #5
 80090da:	400a      	ands	r2, r1
 80090dc:	420b      	tst	r3, r1
 80090de:	d034      	beq.n	800914a <__sflush_r+0x9e>
 80090e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	075b      	lsls	r3, r3, #29
 80090e6:	d506      	bpl.n	80090f6 <__sflush_r+0x4a>
 80090e8:	6863      	ldr	r3, [r4, #4]
 80090ea:	1ac0      	subs	r0, r0, r3
 80090ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <__sflush_r+0x4a>
 80090f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80090f4:	1ac0      	subs	r0, r0, r3
 80090f6:	0002      	movs	r2, r0
 80090f8:	6a21      	ldr	r1, [r4, #32]
 80090fa:	2300      	movs	r3, #0
 80090fc:	0028      	movs	r0, r5
 80090fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009100:	47b8      	blx	r7
 8009102:	89a1      	ldrh	r1, [r4, #12]
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d106      	bne.n	8009116 <__sflush_r+0x6a>
 8009108:	682b      	ldr	r3, [r5, #0]
 800910a:	2b1d      	cmp	r3, #29
 800910c:	d831      	bhi.n	8009172 <__sflush_r+0xc6>
 800910e:	4a2c      	ldr	r2, [pc, #176]	; (80091c0 <__sflush_r+0x114>)
 8009110:	40da      	lsrs	r2, r3
 8009112:	07d3      	lsls	r3, r2, #31
 8009114:	d52d      	bpl.n	8009172 <__sflush_r+0xc6>
 8009116:	2300      	movs	r3, #0
 8009118:	6063      	str	r3, [r4, #4]
 800911a:	6923      	ldr	r3, [r4, #16]
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	04cb      	lsls	r3, r1, #19
 8009120:	d505      	bpl.n	800912e <__sflush_r+0x82>
 8009122:	1c43      	adds	r3, r0, #1
 8009124:	d102      	bne.n	800912c <__sflush_r+0x80>
 8009126:	682b      	ldr	r3, [r5, #0]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d100      	bne.n	800912e <__sflush_r+0x82>
 800912c:	6560      	str	r0, [r4, #84]	; 0x54
 800912e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009130:	602e      	str	r6, [r5, #0]
 8009132:	2900      	cmp	r1, #0
 8009134:	d0c6      	beq.n	80090c4 <__sflush_r+0x18>
 8009136:	0023      	movs	r3, r4
 8009138:	3344      	adds	r3, #68	; 0x44
 800913a:	4299      	cmp	r1, r3
 800913c:	d002      	beq.n	8009144 <__sflush_r+0x98>
 800913e:	0028      	movs	r0, r5
 8009140:	f7ff fc00 	bl	8008944 <_free_r>
 8009144:	2000      	movs	r0, #0
 8009146:	6360      	str	r0, [r4, #52]	; 0x34
 8009148:	e7bd      	b.n	80090c6 <__sflush_r+0x1a>
 800914a:	2301      	movs	r3, #1
 800914c:	0028      	movs	r0, r5
 800914e:	6a21      	ldr	r1, [r4, #32]
 8009150:	47b8      	blx	r7
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	d1c5      	bne.n	80090e2 <__sflush_r+0x36>
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0c2      	beq.n	80090e2 <__sflush_r+0x36>
 800915c:	2b1d      	cmp	r3, #29
 800915e:	d001      	beq.n	8009164 <__sflush_r+0xb8>
 8009160:	2b16      	cmp	r3, #22
 8009162:	d101      	bne.n	8009168 <__sflush_r+0xbc>
 8009164:	602e      	str	r6, [r5, #0]
 8009166:	e7ad      	b.n	80090c4 <__sflush_r+0x18>
 8009168:	2340      	movs	r3, #64	; 0x40
 800916a:	89a2      	ldrh	r2, [r4, #12]
 800916c:	4313      	orrs	r3, r2
 800916e:	81a3      	strh	r3, [r4, #12]
 8009170:	e7a9      	b.n	80090c6 <__sflush_r+0x1a>
 8009172:	2340      	movs	r3, #64	; 0x40
 8009174:	430b      	orrs	r3, r1
 8009176:	e7fa      	b.n	800916e <__sflush_r+0xc2>
 8009178:	690f      	ldr	r7, [r1, #16]
 800917a:	2f00      	cmp	r7, #0
 800917c:	d0a2      	beq.n	80090c4 <__sflush_r+0x18>
 800917e:	680a      	ldr	r2, [r1, #0]
 8009180:	600f      	str	r7, [r1, #0]
 8009182:	1bd2      	subs	r2, r2, r7
 8009184:	9201      	str	r2, [sp, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	079b      	lsls	r3, r3, #30
 800918a:	d100      	bne.n	800918e <__sflush_r+0xe2>
 800918c:	694a      	ldr	r2, [r1, #20]
 800918e:	60a2      	str	r2, [r4, #8]
 8009190:	9b01      	ldr	r3, [sp, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	dc00      	bgt.n	8009198 <__sflush_r+0xec>
 8009196:	e795      	b.n	80090c4 <__sflush_r+0x18>
 8009198:	003a      	movs	r2, r7
 800919a:	0028      	movs	r0, r5
 800919c:	9b01      	ldr	r3, [sp, #4]
 800919e:	6a21      	ldr	r1, [r4, #32]
 80091a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091a2:	47b0      	blx	r6
 80091a4:	2800      	cmp	r0, #0
 80091a6:	dc06      	bgt.n	80091b6 <__sflush_r+0x10a>
 80091a8:	2340      	movs	r3, #64	; 0x40
 80091aa:	2001      	movs	r0, #1
 80091ac:	89a2      	ldrh	r2, [r4, #12]
 80091ae:	4240      	negs	r0, r0
 80091b0:	4313      	orrs	r3, r2
 80091b2:	81a3      	strh	r3, [r4, #12]
 80091b4:	e787      	b.n	80090c6 <__sflush_r+0x1a>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	183f      	adds	r7, r7, r0
 80091ba:	1a1b      	subs	r3, r3, r0
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	e7e7      	b.n	8009190 <__sflush_r+0xe4>
 80091c0:	20400001 	.word	0x20400001

080091c4 <_fflush_r>:
 80091c4:	690b      	ldr	r3, [r1, #16]
 80091c6:	b570      	push	{r4, r5, r6, lr}
 80091c8:	0005      	movs	r5, r0
 80091ca:	000c      	movs	r4, r1
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d102      	bne.n	80091d6 <_fflush_r+0x12>
 80091d0:	2500      	movs	r5, #0
 80091d2:	0028      	movs	r0, r5
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d004      	beq.n	80091e4 <_fflush_r+0x20>
 80091da:	6983      	ldr	r3, [r0, #24]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d101      	bne.n	80091e4 <_fflush_r+0x20>
 80091e0:	f7fe ff22 	bl	8008028 <__sinit>
 80091e4:	4b14      	ldr	r3, [pc, #80]	; (8009238 <_fflush_r+0x74>)
 80091e6:	429c      	cmp	r4, r3
 80091e8:	d11b      	bne.n	8009222 <_fflush_r+0x5e>
 80091ea:	686c      	ldr	r4, [r5, #4]
 80091ec:	220c      	movs	r2, #12
 80091ee:	5ea3      	ldrsh	r3, [r4, r2]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0ed      	beq.n	80091d0 <_fflush_r+0xc>
 80091f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80091f6:	07d2      	lsls	r2, r2, #31
 80091f8:	d404      	bmi.n	8009204 <_fflush_r+0x40>
 80091fa:	059b      	lsls	r3, r3, #22
 80091fc:	d402      	bmi.n	8009204 <_fflush_r+0x40>
 80091fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009200:	f7fe ffb7 	bl	8008172 <__retarget_lock_acquire_recursive>
 8009204:	0028      	movs	r0, r5
 8009206:	0021      	movs	r1, r4
 8009208:	f7ff ff50 	bl	80090ac <__sflush_r>
 800920c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800920e:	0005      	movs	r5, r0
 8009210:	07db      	lsls	r3, r3, #31
 8009212:	d4de      	bmi.n	80091d2 <_fflush_r+0xe>
 8009214:	89a3      	ldrh	r3, [r4, #12]
 8009216:	059b      	lsls	r3, r3, #22
 8009218:	d4db      	bmi.n	80091d2 <_fflush_r+0xe>
 800921a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800921c:	f7fe ffaa 	bl	8008174 <__retarget_lock_release_recursive>
 8009220:	e7d7      	b.n	80091d2 <_fflush_r+0xe>
 8009222:	4b06      	ldr	r3, [pc, #24]	; (800923c <_fflush_r+0x78>)
 8009224:	429c      	cmp	r4, r3
 8009226:	d101      	bne.n	800922c <_fflush_r+0x68>
 8009228:	68ac      	ldr	r4, [r5, #8]
 800922a:	e7df      	b.n	80091ec <_fflush_r+0x28>
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <_fflush_r+0x7c>)
 800922e:	429c      	cmp	r4, r3
 8009230:	d1dc      	bne.n	80091ec <_fflush_r+0x28>
 8009232:	68ec      	ldr	r4, [r5, #12]
 8009234:	e7da      	b.n	80091ec <_fflush_r+0x28>
 8009236:	46c0      	nop			; (mov r8, r8)
 8009238:	08009d08 	.word	0x08009d08
 800923c:	08009d28 	.word	0x08009d28
 8009240:	08009ce8 	.word	0x08009ce8

08009244 <fiprintf>:
 8009244:	b40e      	push	{r1, r2, r3}
 8009246:	b503      	push	{r0, r1, lr}
 8009248:	0001      	movs	r1, r0
 800924a:	ab03      	add	r3, sp, #12
 800924c:	4804      	ldr	r0, [pc, #16]	; (8009260 <fiprintf+0x1c>)
 800924e:	cb04      	ldmia	r3!, {r2}
 8009250:	6800      	ldr	r0, [r0, #0]
 8009252:	9301      	str	r3, [sp, #4]
 8009254:	f7ff fc80 	bl	8008b58 <_vfiprintf_r>
 8009258:	b002      	add	sp, #8
 800925a:	bc08      	pop	{r3}
 800925c:	b003      	add	sp, #12
 800925e:	4718      	bx	r3
 8009260:	2000000c 	.word	0x2000000c

08009264 <_lseek_r>:
 8009264:	b570      	push	{r4, r5, r6, lr}
 8009266:	0004      	movs	r4, r0
 8009268:	0008      	movs	r0, r1
 800926a:	0011      	movs	r1, r2
 800926c:	001a      	movs	r2, r3
 800926e:	2300      	movs	r3, #0
 8009270:	4d05      	ldr	r5, [pc, #20]	; (8009288 <_lseek_r+0x24>)
 8009272:	602b      	str	r3, [r5, #0]
 8009274:	f7fa faed 	bl	8003852 <_lseek>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	d103      	bne.n	8009284 <_lseek_r+0x20>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d000      	beq.n	8009284 <_lseek_r+0x20>
 8009282:	6023      	str	r3, [r4, #0]
 8009284:	bd70      	pop	{r4, r5, r6, pc}
 8009286:	46c0      	nop			; (mov r8, r8)
 8009288:	200002e4 	.word	0x200002e4

0800928c <__swhatbuf_r>:
 800928c:	b570      	push	{r4, r5, r6, lr}
 800928e:	000e      	movs	r6, r1
 8009290:	001d      	movs	r5, r3
 8009292:	230e      	movs	r3, #14
 8009294:	5ec9      	ldrsh	r1, [r1, r3]
 8009296:	0014      	movs	r4, r2
 8009298:	b096      	sub	sp, #88	; 0x58
 800929a:	2900      	cmp	r1, #0
 800929c:	da08      	bge.n	80092b0 <__swhatbuf_r+0x24>
 800929e:	220c      	movs	r2, #12
 80092a0:	5eb3      	ldrsh	r3, [r6, r2]
 80092a2:	2200      	movs	r2, #0
 80092a4:	602a      	str	r2, [r5, #0]
 80092a6:	061b      	lsls	r3, r3, #24
 80092a8:	d411      	bmi.n	80092ce <__swhatbuf_r+0x42>
 80092aa:	2380      	movs	r3, #128	; 0x80
 80092ac:	00db      	lsls	r3, r3, #3
 80092ae:	e00f      	b.n	80092d0 <__swhatbuf_r+0x44>
 80092b0:	466a      	mov	r2, sp
 80092b2:	f000 f8a1 	bl	80093f8 <_fstat_r>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	dbf1      	blt.n	800929e <__swhatbuf_r+0x12>
 80092ba:	23f0      	movs	r3, #240	; 0xf0
 80092bc:	9901      	ldr	r1, [sp, #4]
 80092be:	021b      	lsls	r3, r3, #8
 80092c0:	4019      	ands	r1, r3
 80092c2:	4b05      	ldr	r3, [pc, #20]	; (80092d8 <__swhatbuf_r+0x4c>)
 80092c4:	18c9      	adds	r1, r1, r3
 80092c6:	424b      	negs	r3, r1
 80092c8:	4159      	adcs	r1, r3
 80092ca:	6029      	str	r1, [r5, #0]
 80092cc:	e7ed      	b.n	80092aa <__swhatbuf_r+0x1e>
 80092ce:	2340      	movs	r3, #64	; 0x40
 80092d0:	2000      	movs	r0, #0
 80092d2:	6023      	str	r3, [r4, #0]
 80092d4:	b016      	add	sp, #88	; 0x58
 80092d6:	bd70      	pop	{r4, r5, r6, pc}
 80092d8:	ffffe000 	.word	0xffffe000

080092dc <__smakebuf_r>:
 80092dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092de:	2602      	movs	r6, #2
 80092e0:	898b      	ldrh	r3, [r1, #12]
 80092e2:	0005      	movs	r5, r0
 80092e4:	000c      	movs	r4, r1
 80092e6:	4233      	tst	r3, r6
 80092e8:	d006      	beq.n	80092f8 <__smakebuf_r+0x1c>
 80092ea:	0023      	movs	r3, r4
 80092ec:	3347      	adds	r3, #71	; 0x47
 80092ee:	6023      	str	r3, [r4, #0]
 80092f0:	6123      	str	r3, [r4, #16]
 80092f2:	2301      	movs	r3, #1
 80092f4:	6163      	str	r3, [r4, #20]
 80092f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80092f8:	466a      	mov	r2, sp
 80092fa:	ab01      	add	r3, sp, #4
 80092fc:	f7ff ffc6 	bl	800928c <__swhatbuf_r>
 8009300:	9900      	ldr	r1, [sp, #0]
 8009302:	0007      	movs	r7, r0
 8009304:	0028      	movs	r0, r5
 8009306:	f7ff fb89 	bl	8008a1c <_malloc_r>
 800930a:	2800      	cmp	r0, #0
 800930c:	d108      	bne.n	8009320 <__smakebuf_r+0x44>
 800930e:	220c      	movs	r2, #12
 8009310:	5ea3      	ldrsh	r3, [r4, r2]
 8009312:	059a      	lsls	r2, r3, #22
 8009314:	d4ef      	bmi.n	80092f6 <__smakebuf_r+0x1a>
 8009316:	2203      	movs	r2, #3
 8009318:	4393      	bics	r3, r2
 800931a:	431e      	orrs	r6, r3
 800931c:	81a6      	strh	r6, [r4, #12]
 800931e:	e7e4      	b.n	80092ea <__smakebuf_r+0xe>
 8009320:	4b0f      	ldr	r3, [pc, #60]	; (8009360 <__smakebuf_r+0x84>)
 8009322:	62ab      	str	r3, [r5, #40]	; 0x28
 8009324:	2380      	movs	r3, #128	; 0x80
 8009326:	89a2      	ldrh	r2, [r4, #12]
 8009328:	6020      	str	r0, [r4, #0]
 800932a:	4313      	orrs	r3, r2
 800932c:	81a3      	strh	r3, [r4, #12]
 800932e:	9b00      	ldr	r3, [sp, #0]
 8009330:	6120      	str	r0, [r4, #16]
 8009332:	6163      	str	r3, [r4, #20]
 8009334:	9b01      	ldr	r3, [sp, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00d      	beq.n	8009356 <__smakebuf_r+0x7a>
 800933a:	0028      	movs	r0, r5
 800933c:	230e      	movs	r3, #14
 800933e:	5ee1      	ldrsh	r1, [r4, r3]
 8009340:	f000 f86c 	bl	800941c <_isatty_r>
 8009344:	2800      	cmp	r0, #0
 8009346:	d006      	beq.n	8009356 <__smakebuf_r+0x7a>
 8009348:	2203      	movs	r2, #3
 800934a:	89a3      	ldrh	r3, [r4, #12]
 800934c:	4393      	bics	r3, r2
 800934e:	001a      	movs	r2, r3
 8009350:	2301      	movs	r3, #1
 8009352:	4313      	orrs	r3, r2
 8009354:	81a3      	strh	r3, [r4, #12]
 8009356:	89a0      	ldrh	r0, [r4, #12]
 8009358:	4307      	orrs	r7, r0
 800935a:	81a7      	strh	r7, [r4, #12]
 800935c:	e7cb      	b.n	80092f6 <__smakebuf_r+0x1a>
 800935e:	46c0      	nop			; (mov r8, r8)
 8009360:	08007fad 	.word	0x08007fad

08009364 <__ascii_mbtowc>:
 8009364:	b082      	sub	sp, #8
 8009366:	2900      	cmp	r1, #0
 8009368:	d100      	bne.n	800936c <__ascii_mbtowc+0x8>
 800936a:	a901      	add	r1, sp, #4
 800936c:	1e10      	subs	r0, r2, #0
 800936e:	d006      	beq.n	800937e <__ascii_mbtowc+0x1a>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d006      	beq.n	8009382 <__ascii_mbtowc+0x1e>
 8009374:	7813      	ldrb	r3, [r2, #0]
 8009376:	600b      	str	r3, [r1, #0]
 8009378:	7810      	ldrb	r0, [r2, #0]
 800937a:	1e43      	subs	r3, r0, #1
 800937c:	4198      	sbcs	r0, r3
 800937e:	b002      	add	sp, #8
 8009380:	4770      	bx	lr
 8009382:	2002      	movs	r0, #2
 8009384:	4240      	negs	r0, r0
 8009386:	e7fa      	b.n	800937e <__ascii_mbtowc+0x1a>

08009388 <__malloc_lock>:
 8009388:	b510      	push	{r4, lr}
 800938a:	4802      	ldr	r0, [pc, #8]	; (8009394 <__malloc_lock+0xc>)
 800938c:	f7fe fef1 	bl	8008172 <__retarget_lock_acquire_recursive>
 8009390:	bd10      	pop	{r4, pc}
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	200002d8 	.word	0x200002d8

08009398 <__malloc_unlock>:
 8009398:	b510      	push	{r4, lr}
 800939a:	4802      	ldr	r0, [pc, #8]	; (80093a4 <__malloc_unlock+0xc>)
 800939c:	f7fe feea 	bl	8008174 <__retarget_lock_release_recursive>
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	46c0      	nop			; (mov r8, r8)
 80093a4:	200002d8 	.word	0x200002d8

080093a8 <_read_r>:
 80093a8:	b570      	push	{r4, r5, r6, lr}
 80093aa:	0004      	movs	r4, r0
 80093ac:	0008      	movs	r0, r1
 80093ae:	0011      	movs	r1, r2
 80093b0:	001a      	movs	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	4d05      	ldr	r5, [pc, #20]	; (80093cc <_read_r+0x24>)
 80093b6:	602b      	str	r3, [r5, #0]
 80093b8:	f7fa f9f1 	bl	800379e <_read>
 80093bc:	1c43      	adds	r3, r0, #1
 80093be:	d103      	bne.n	80093c8 <_read_r+0x20>
 80093c0:	682b      	ldr	r3, [r5, #0]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d000      	beq.n	80093c8 <_read_r+0x20>
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	bd70      	pop	{r4, r5, r6, pc}
 80093ca:	46c0      	nop			; (mov r8, r8)
 80093cc:	200002e4 	.word	0x200002e4

080093d0 <__ascii_wctomb>:
 80093d0:	0003      	movs	r3, r0
 80093d2:	1e08      	subs	r0, r1, #0
 80093d4:	d005      	beq.n	80093e2 <__ascii_wctomb+0x12>
 80093d6:	2aff      	cmp	r2, #255	; 0xff
 80093d8:	d904      	bls.n	80093e4 <__ascii_wctomb+0x14>
 80093da:	228a      	movs	r2, #138	; 0x8a
 80093dc:	2001      	movs	r0, #1
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	4240      	negs	r0, r0
 80093e2:	4770      	bx	lr
 80093e4:	2001      	movs	r0, #1
 80093e6:	700a      	strb	r2, [r1, #0]
 80093e8:	e7fb      	b.n	80093e2 <__ascii_wctomb+0x12>

080093ea <abort>:
 80093ea:	2006      	movs	r0, #6
 80093ec:	b510      	push	{r4, lr}
 80093ee:	f000 f851 	bl	8009494 <raise>
 80093f2:	2001      	movs	r0, #1
 80093f4:	f7fa f9c7 	bl	8003786 <_exit>

080093f8 <_fstat_r>:
 80093f8:	2300      	movs	r3, #0
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	4d06      	ldr	r5, [pc, #24]	; (8009418 <_fstat_r+0x20>)
 80093fe:	0004      	movs	r4, r0
 8009400:	0008      	movs	r0, r1
 8009402:	0011      	movs	r1, r2
 8009404:	602b      	str	r3, [r5, #0]
 8009406:	f7fa fa0d 	bl	8003824 <_fstat>
 800940a:	1c43      	adds	r3, r0, #1
 800940c:	d103      	bne.n	8009416 <_fstat_r+0x1e>
 800940e:	682b      	ldr	r3, [r5, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d000      	beq.n	8009416 <_fstat_r+0x1e>
 8009414:	6023      	str	r3, [r4, #0]
 8009416:	bd70      	pop	{r4, r5, r6, pc}
 8009418:	200002e4 	.word	0x200002e4

0800941c <_isatty_r>:
 800941c:	2300      	movs	r3, #0
 800941e:	b570      	push	{r4, r5, r6, lr}
 8009420:	4d06      	ldr	r5, [pc, #24]	; (800943c <_isatty_r+0x20>)
 8009422:	0004      	movs	r4, r0
 8009424:	0008      	movs	r0, r1
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	f7fa fa0a 	bl	8003840 <_isatty>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d103      	bne.n	8009438 <_isatty_r+0x1c>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d000      	beq.n	8009438 <_isatty_r+0x1c>
 8009436:	6023      	str	r3, [r4, #0]
 8009438:	bd70      	pop	{r4, r5, r6, pc}
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	200002e4 	.word	0x200002e4

08009440 <_raise_r>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	0004      	movs	r4, r0
 8009444:	000d      	movs	r5, r1
 8009446:	291f      	cmp	r1, #31
 8009448:	d904      	bls.n	8009454 <_raise_r+0x14>
 800944a:	2316      	movs	r3, #22
 800944c:	6003      	str	r3, [r0, #0]
 800944e:	2001      	movs	r0, #1
 8009450:	4240      	negs	r0, r0
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009456:	2b00      	cmp	r3, #0
 8009458:	d004      	beq.n	8009464 <_raise_r+0x24>
 800945a:	008a      	lsls	r2, r1, #2
 800945c:	189b      	adds	r3, r3, r2
 800945e:	681a      	ldr	r2, [r3, #0]
 8009460:	2a00      	cmp	r2, #0
 8009462:	d108      	bne.n	8009476 <_raise_r+0x36>
 8009464:	0020      	movs	r0, r4
 8009466:	f000 f831 	bl	80094cc <_getpid_r>
 800946a:	002a      	movs	r2, r5
 800946c:	0001      	movs	r1, r0
 800946e:	0020      	movs	r0, r4
 8009470:	f000 f81a 	bl	80094a8 <_kill_r>
 8009474:	e7ed      	b.n	8009452 <_raise_r+0x12>
 8009476:	2000      	movs	r0, #0
 8009478:	2a01      	cmp	r2, #1
 800947a:	d0ea      	beq.n	8009452 <_raise_r+0x12>
 800947c:	1c51      	adds	r1, r2, #1
 800947e:	d103      	bne.n	8009488 <_raise_r+0x48>
 8009480:	2316      	movs	r3, #22
 8009482:	3001      	adds	r0, #1
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	e7e4      	b.n	8009452 <_raise_r+0x12>
 8009488:	2400      	movs	r4, #0
 800948a:	0028      	movs	r0, r5
 800948c:	601c      	str	r4, [r3, #0]
 800948e:	4790      	blx	r2
 8009490:	0020      	movs	r0, r4
 8009492:	e7de      	b.n	8009452 <_raise_r+0x12>

08009494 <raise>:
 8009494:	b510      	push	{r4, lr}
 8009496:	4b03      	ldr	r3, [pc, #12]	; (80094a4 <raise+0x10>)
 8009498:	0001      	movs	r1, r0
 800949a:	6818      	ldr	r0, [r3, #0]
 800949c:	f7ff ffd0 	bl	8009440 <_raise_r>
 80094a0:	bd10      	pop	{r4, pc}
 80094a2:	46c0      	nop			; (mov r8, r8)
 80094a4:	2000000c 	.word	0x2000000c

080094a8 <_kill_r>:
 80094a8:	2300      	movs	r3, #0
 80094aa:	b570      	push	{r4, r5, r6, lr}
 80094ac:	4d06      	ldr	r5, [pc, #24]	; (80094c8 <_kill_r+0x20>)
 80094ae:	0004      	movs	r4, r0
 80094b0:	0008      	movs	r0, r1
 80094b2:	0011      	movs	r1, r2
 80094b4:	602b      	str	r3, [r5, #0]
 80094b6:	f7fa f956 	bl	8003766 <_kill>
 80094ba:	1c43      	adds	r3, r0, #1
 80094bc:	d103      	bne.n	80094c6 <_kill_r+0x1e>
 80094be:	682b      	ldr	r3, [r5, #0]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d000      	beq.n	80094c6 <_kill_r+0x1e>
 80094c4:	6023      	str	r3, [r4, #0]
 80094c6:	bd70      	pop	{r4, r5, r6, pc}
 80094c8:	200002e4 	.word	0x200002e4

080094cc <_getpid_r>:
 80094cc:	b510      	push	{r4, lr}
 80094ce:	f7fa f944 	bl	800375a <_getpid>
 80094d2:	bd10      	pop	{r4, pc}

080094d4 <sqrt>:
 80094d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d6:	0004      	movs	r4, r0
 80094d8:	000d      	movs	r5, r1
 80094da:	f000 f825 	bl	8009528 <__ieee754_sqrt>
 80094de:	0022      	movs	r2, r4
 80094e0:	0006      	movs	r6, r0
 80094e2:	000f      	movs	r7, r1
 80094e4:	002b      	movs	r3, r5
 80094e6:	0020      	movs	r0, r4
 80094e8:	0029      	movs	r1, r5
 80094ea:	f7f9 fd15 	bl	8002f18 <__aeabi_dcmpun>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d113      	bne.n	800951a <sqrt+0x46>
 80094f2:	2200      	movs	r2, #0
 80094f4:	2300      	movs	r3, #0
 80094f6:	0020      	movs	r0, r4
 80094f8:	0029      	movs	r1, r5
 80094fa:	f7f6 ffad 	bl	8000458 <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d00b      	beq.n	800951a <sqrt+0x46>
 8009502:	f7fd f9cf 	bl	80068a4 <__errno>
 8009506:	2321      	movs	r3, #33	; 0x21
 8009508:	2200      	movs	r2, #0
 800950a:	6003      	str	r3, [r0, #0]
 800950c:	2300      	movs	r3, #0
 800950e:	0010      	movs	r0, r2
 8009510:	0019      	movs	r1, r3
 8009512:	f7f8 fb01 	bl	8001b18 <__aeabi_ddiv>
 8009516:	0006      	movs	r6, r0
 8009518:	000f      	movs	r7, r1
 800951a:	0030      	movs	r0, r6
 800951c:	0039      	movs	r1, r7
 800951e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009520 <atan2f>:
 8009520:	b510      	push	{r4, lr}
 8009522:	f000 f8b7 	bl	8009694 <__ieee754_atan2f>
 8009526:	bd10      	pop	{r4, pc}

08009528 <__ieee754_sqrt>:
 8009528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800952a:	000b      	movs	r3, r1
 800952c:	000c      	movs	r4, r1
 800952e:	4956      	ldr	r1, [pc, #344]	; (8009688 <__ieee754_sqrt+0x160>)
 8009530:	0005      	movs	r5, r0
 8009532:	0002      	movs	r2, r0
 8009534:	0008      	movs	r0, r1
 8009536:	b085      	sub	sp, #20
 8009538:	4020      	ands	r0, r4
 800953a:	4288      	cmp	r0, r1
 800953c:	d10f      	bne.n	800955e <__ieee754_sqrt+0x36>
 800953e:	0028      	movs	r0, r5
 8009540:	0021      	movs	r1, r4
 8009542:	f7f8 feeb 	bl	800231c <__aeabi_dmul>
 8009546:	0002      	movs	r2, r0
 8009548:	000b      	movs	r3, r1
 800954a:	0028      	movs	r0, r5
 800954c:	0021      	movs	r1, r4
 800954e:	f7f7 ffa7 	bl	80014a0 <__aeabi_dadd>
 8009552:	0005      	movs	r5, r0
 8009554:	000c      	movs	r4, r1
 8009556:	0028      	movs	r0, r5
 8009558:	0021      	movs	r1, r4
 800955a:	b005      	add	sp, #20
 800955c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800955e:	2c00      	cmp	r4, #0
 8009560:	dc10      	bgt.n	8009584 <__ieee754_sqrt+0x5c>
 8009562:	0061      	lsls	r1, r4, #1
 8009564:	0849      	lsrs	r1, r1, #1
 8009566:	4329      	orrs	r1, r5
 8009568:	d0f5      	beq.n	8009556 <__ieee754_sqrt+0x2e>
 800956a:	2100      	movs	r1, #0
 800956c:	428c      	cmp	r4, r1
 800956e:	d100      	bne.n	8009572 <__ieee754_sqrt+0x4a>
 8009570:	e080      	b.n	8009674 <__ieee754_sqrt+0x14c>
 8009572:	0028      	movs	r0, r5
 8009574:	0021      	movs	r1, r4
 8009576:	f7f9 f93d 	bl	80027f4 <__aeabi_dsub>
 800957a:	0002      	movs	r2, r0
 800957c:	000b      	movs	r3, r1
 800957e:	f7f8 facb 	bl	8001b18 <__aeabi_ddiv>
 8009582:	e7e6      	b.n	8009552 <__ieee754_sqrt+0x2a>
 8009584:	1521      	asrs	r1, r4, #20
 8009586:	d075      	beq.n	8009674 <__ieee754_sqrt+0x14c>
 8009588:	4840      	ldr	r0, [pc, #256]	; (800968c <__ieee754_sqrt+0x164>)
 800958a:	031b      	lsls	r3, r3, #12
 800958c:	180c      	adds	r4, r1, r0
 800958e:	2080      	movs	r0, #128	; 0x80
 8009590:	0b1b      	lsrs	r3, r3, #12
 8009592:	0340      	lsls	r0, r0, #13
 8009594:	4303      	orrs	r3, r0
 8009596:	07c9      	lsls	r1, r1, #31
 8009598:	d403      	bmi.n	80095a2 <__ieee754_sqrt+0x7a>
 800959a:	0fd1      	lsrs	r1, r2, #31
 800959c:	005b      	lsls	r3, r3, #1
 800959e:	185b      	adds	r3, r3, r1
 80095a0:	0052      	lsls	r2, r2, #1
 80095a2:	1061      	asrs	r1, r4, #1
 80095a4:	2400      	movs	r4, #0
 80095a6:	9103      	str	r1, [sp, #12]
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	0fd1      	lsrs	r1, r2, #31
 80095ac:	185b      	adds	r3, r3, r1
 80095ae:	2180      	movs	r1, #128	; 0x80
 80095b0:	2516      	movs	r5, #22
 80095b2:	0020      	movs	r0, r4
 80095b4:	0052      	lsls	r2, r2, #1
 80095b6:	0389      	lsls	r1, r1, #14
 80095b8:	1846      	adds	r6, r0, r1
 80095ba:	429e      	cmp	r6, r3
 80095bc:	dc02      	bgt.n	80095c4 <__ieee754_sqrt+0x9c>
 80095be:	1870      	adds	r0, r6, r1
 80095c0:	1b9b      	subs	r3, r3, r6
 80095c2:	1864      	adds	r4, r4, r1
 80095c4:	0fd6      	lsrs	r6, r2, #31
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	3d01      	subs	r5, #1
 80095ca:	18f3      	adds	r3, r6, r3
 80095cc:	0052      	lsls	r2, r2, #1
 80095ce:	0849      	lsrs	r1, r1, #1
 80095d0:	2d00      	cmp	r5, #0
 80095d2:	d1f1      	bne.n	80095b8 <__ieee754_sqrt+0x90>
 80095d4:	2620      	movs	r6, #32
 80095d6:	2780      	movs	r7, #128	; 0x80
 80095d8:	0029      	movs	r1, r5
 80095da:	9601      	str	r6, [sp, #4]
 80095dc:	063f      	lsls	r7, r7, #24
 80095de:	197e      	adds	r6, r7, r5
 80095e0:	46b4      	mov	ip, r6
 80095e2:	4283      	cmp	r3, r0
 80095e4:	dc02      	bgt.n	80095ec <__ieee754_sqrt+0xc4>
 80095e6:	d114      	bne.n	8009612 <__ieee754_sqrt+0xea>
 80095e8:	4296      	cmp	r6, r2
 80095ea:	d812      	bhi.n	8009612 <__ieee754_sqrt+0xea>
 80095ec:	4665      	mov	r5, ip
 80095ee:	4666      	mov	r6, ip
 80095f0:	19ed      	adds	r5, r5, r7
 80095f2:	9002      	str	r0, [sp, #8]
 80095f4:	2e00      	cmp	r6, #0
 80095f6:	da03      	bge.n	8009600 <__ieee754_sqrt+0xd8>
 80095f8:	43ee      	mvns	r6, r5
 80095fa:	0ff6      	lsrs	r6, r6, #31
 80095fc:	1986      	adds	r6, r0, r6
 80095fe:	9602      	str	r6, [sp, #8]
 8009600:	1a1b      	subs	r3, r3, r0
 8009602:	4562      	cmp	r2, ip
 8009604:	4180      	sbcs	r0, r0
 8009606:	4240      	negs	r0, r0
 8009608:	1a1b      	subs	r3, r3, r0
 800960a:	4660      	mov	r0, ip
 800960c:	1a12      	subs	r2, r2, r0
 800960e:	9802      	ldr	r0, [sp, #8]
 8009610:	19c9      	adds	r1, r1, r7
 8009612:	0fd6      	lsrs	r6, r2, #31
 8009614:	005b      	lsls	r3, r3, #1
 8009616:	199b      	adds	r3, r3, r6
 8009618:	9e01      	ldr	r6, [sp, #4]
 800961a:	0052      	lsls	r2, r2, #1
 800961c:	3e01      	subs	r6, #1
 800961e:	087f      	lsrs	r7, r7, #1
 8009620:	9601      	str	r6, [sp, #4]
 8009622:	2e00      	cmp	r6, #0
 8009624:	d1db      	bne.n	80095de <__ieee754_sqrt+0xb6>
 8009626:	4313      	orrs	r3, r2
 8009628:	d003      	beq.n	8009632 <__ieee754_sqrt+0x10a>
 800962a:	1c4b      	adds	r3, r1, #1
 800962c:	d127      	bne.n	800967e <__ieee754_sqrt+0x156>
 800962e:	0031      	movs	r1, r6
 8009630:	3401      	adds	r4, #1
 8009632:	4b17      	ldr	r3, [pc, #92]	; (8009690 <__ieee754_sqrt+0x168>)
 8009634:	1060      	asrs	r0, r4, #1
 8009636:	18c0      	adds	r0, r0, r3
 8009638:	0849      	lsrs	r1, r1, #1
 800963a:	07e3      	lsls	r3, r4, #31
 800963c:	d502      	bpl.n	8009644 <__ieee754_sqrt+0x11c>
 800963e:	2380      	movs	r3, #128	; 0x80
 8009640:	061b      	lsls	r3, r3, #24
 8009642:	4319      	orrs	r1, r3
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	000d      	movs	r5, r1
 8009648:	051c      	lsls	r4, r3, #20
 800964a:	1823      	adds	r3, r4, r0
 800964c:	001c      	movs	r4, r3
 800964e:	e782      	b.n	8009556 <__ieee754_sqrt+0x2e>
 8009650:	0ad3      	lsrs	r3, r2, #11
 8009652:	3815      	subs	r0, #21
 8009654:	0552      	lsls	r2, r2, #21
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0fa      	beq.n	8009650 <__ieee754_sqrt+0x128>
 800965a:	2480      	movs	r4, #128	; 0x80
 800965c:	0364      	lsls	r4, r4, #13
 800965e:	4223      	tst	r3, r4
 8009660:	d00a      	beq.n	8009678 <__ieee754_sqrt+0x150>
 8009662:	2420      	movs	r4, #32
 8009664:	0016      	movs	r6, r2
 8009666:	1a64      	subs	r4, r4, r1
 8009668:	40e6      	lsrs	r6, r4
 800966a:	1e4d      	subs	r5, r1, #1
 800966c:	408a      	lsls	r2, r1
 800966e:	4333      	orrs	r3, r6
 8009670:	1b41      	subs	r1, r0, r5
 8009672:	e789      	b.n	8009588 <__ieee754_sqrt+0x60>
 8009674:	2000      	movs	r0, #0
 8009676:	e7ee      	b.n	8009656 <__ieee754_sqrt+0x12e>
 8009678:	005b      	lsls	r3, r3, #1
 800967a:	3101      	adds	r1, #1
 800967c:	e7ef      	b.n	800965e <__ieee754_sqrt+0x136>
 800967e:	2301      	movs	r3, #1
 8009680:	3101      	adds	r1, #1
 8009682:	4399      	bics	r1, r3
 8009684:	e7d5      	b.n	8009632 <__ieee754_sqrt+0x10a>
 8009686:	46c0      	nop			; (mov r8, r8)
 8009688:	7ff00000 	.word	0x7ff00000
 800968c:	fffffc01 	.word	0xfffffc01
 8009690:	3fe00000 	.word	0x3fe00000

08009694 <__ieee754_atan2f>:
 8009694:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009696:	25ff      	movs	r5, #255	; 0xff
 8009698:	004a      	lsls	r2, r1, #1
 800969a:	9101      	str	r1, [sp, #4]
 800969c:	0852      	lsrs	r2, r2, #1
 800969e:	05ed      	lsls	r5, r5, #23
 80096a0:	42aa      	cmp	r2, r5
 80096a2:	dc04      	bgt.n	80096ae <__ieee754_atan2f+0x1a>
 80096a4:	0043      	lsls	r3, r0, #1
 80096a6:	0007      	movs	r7, r0
 80096a8:	085b      	lsrs	r3, r3, #1
 80096aa:	42ab      	cmp	r3, r5
 80096ac:	dd02      	ble.n	80096b4 <__ieee754_atan2f+0x20>
 80096ae:	f7f7 f84f 	bl	8000750 <__aeabi_fadd>
 80096b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096b4:	24fe      	movs	r4, #254	; 0xfe
 80096b6:	05a4      	lsls	r4, r4, #22
 80096b8:	42a1      	cmp	r1, r4
 80096ba:	d102      	bne.n	80096c2 <__ieee754_atan2f+0x2e>
 80096bc:	f000 f866 	bl	800978c <atanf>
 80096c0:	e7f7      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 80096c2:	2602      	movs	r6, #2
 80096c4:	178c      	asrs	r4, r1, #30
 80096c6:	4034      	ands	r4, r6
 80096c8:	0fc6      	lsrs	r6, r0, #31
 80096ca:	4334      	orrs	r4, r6
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d105      	bne.n	80096dc <__ieee754_atan2f+0x48>
 80096d0:	2c02      	cmp	r4, #2
 80096d2:	d045      	beq.n	8009760 <__ieee754_atan2f+0xcc>
 80096d4:	2c03      	cmp	r4, #3
 80096d6:	d1ec      	bne.n	80096b2 <__ieee754_atan2f+0x1e>
 80096d8:	4824      	ldr	r0, [pc, #144]	; (800976c <__ieee754_atan2f+0xd8>)
 80096da:	e7ea      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 80096dc:	2a00      	cmp	r2, #0
 80096de:	d103      	bne.n	80096e8 <__ieee754_atan2f+0x54>
 80096e0:	2f00      	cmp	r7, #0
 80096e2:	da41      	bge.n	8009768 <__ieee754_atan2f+0xd4>
 80096e4:	4822      	ldr	r0, [pc, #136]	; (8009770 <__ieee754_atan2f+0xdc>)
 80096e6:	e7e4      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 80096e8:	42aa      	cmp	r2, r5
 80096ea:	d10e      	bne.n	800970a <__ieee754_atan2f+0x76>
 80096ec:	3c01      	subs	r4, #1
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d105      	bne.n	80096fe <__ieee754_atan2f+0x6a>
 80096f2:	2c02      	cmp	r4, #2
 80096f4:	d836      	bhi.n	8009764 <__ieee754_atan2f+0xd0>
 80096f6:	4b1f      	ldr	r3, [pc, #124]	; (8009774 <__ieee754_atan2f+0xe0>)
 80096f8:	00a4      	lsls	r4, r4, #2
 80096fa:	58e0      	ldr	r0, [r4, r3]
 80096fc:	e7d9      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 80096fe:	2000      	movs	r0, #0
 8009700:	2c02      	cmp	r4, #2
 8009702:	d8d6      	bhi.n	80096b2 <__ieee754_atan2f+0x1e>
 8009704:	4b1c      	ldr	r3, [pc, #112]	; (8009778 <__ieee754_atan2f+0xe4>)
 8009706:	00a4      	lsls	r4, r4, #2
 8009708:	e7f7      	b.n	80096fa <__ieee754_atan2f+0x66>
 800970a:	42ab      	cmp	r3, r5
 800970c:	d0e8      	beq.n	80096e0 <__ieee754_atan2f+0x4c>
 800970e:	1a9b      	subs	r3, r3, r2
 8009710:	15db      	asrs	r3, r3, #23
 8009712:	2b3c      	cmp	r3, #60	; 0x3c
 8009714:	dc14      	bgt.n	8009740 <__ieee754_atan2f+0xac>
 8009716:	2900      	cmp	r1, #0
 8009718:	da01      	bge.n	800971e <__ieee754_atan2f+0x8a>
 800971a:	333c      	adds	r3, #60	; 0x3c
 800971c:	db12      	blt.n	8009744 <__ieee754_atan2f+0xb0>
 800971e:	f7f7 f9b5 	bl	8000a8c <__aeabi_fdiv>
 8009722:	f000 f943 	bl	80099ac <fabsf>
 8009726:	f000 f831 	bl	800978c <atanf>
 800972a:	2c01      	cmp	r4, #1
 800972c:	d00c      	beq.n	8009748 <__ieee754_atan2f+0xb4>
 800972e:	2c02      	cmp	r4, #2
 8009730:	d00e      	beq.n	8009750 <__ieee754_atan2f+0xbc>
 8009732:	2c00      	cmp	r4, #0
 8009734:	d0bd      	beq.n	80096b2 <__ieee754_atan2f+0x1e>
 8009736:	4911      	ldr	r1, [pc, #68]	; (800977c <__ieee754_atan2f+0xe8>)
 8009738:	f7f7 f80a 	bl	8000750 <__aeabi_fadd>
 800973c:	4910      	ldr	r1, [pc, #64]	; (8009780 <__ieee754_atan2f+0xec>)
 800973e:	e00c      	b.n	800975a <__ieee754_atan2f+0xc6>
 8009740:	4810      	ldr	r0, [pc, #64]	; (8009784 <__ieee754_atan2f+0xf0>)
 8009742:	e7f2      	b.n	800972a <__ieee754_atan2f+0x96>
 8009744:	2000      	movs	r0, #0
 8009746:	e7f0      	b.n	800972a <__ieee754_atan2f+0x96>
 8009748:	2380      	movs	r3, #128	; 0x80
 800974a:	061b      	lsls	r3, r3, #24
 800974c:	18c0      	adds	r0, r0, r3
 800974e:	e7b0      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 8009750:	490a      	ldr	r1, [pc, #40]	; (800977c <__ieee754_atan2f+0xe8>)
 8009752:	f7f6 fffd 	bl	8000750 <__aeabi_fadd>
 8009756:	1c01      	adds	r1, r0, #0
 8009758:	4809      	ldr	r0, [pc, #36]	; (8009780 <__ieee754_atan2f+0xec>)
 800975a:	f7f7 fc85 	bl	8001068 <__aeabi_fsub>
 800975e:	e7a8      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 8009760:	4807      	ldr	r0, [pc, #28]	; (8009780 <__ieee754_atan2f+0xec>)
 8009762:	e7a6      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 8009764:	4808      	ldr	r0, [pc, #32]	; (8009788 <__ieee754_atan2f+0xf4>)
 8009766:	e7a4      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 8009768:	4806      	ldr	r0, [pc, #24]	; (8009784 <__ieee754_atan2f+0xf0>)
 800976a:	e7a2      	b.n	80096b2 <__ieee754_atan2f+0x1e>
 800976c:	c0490fdb 	.word	0xc0490fdb
 8009770:	bfc90fdb 	.word	0xbfc90fdb
 8009774:	08009ffc 	.word	0x08009ffc
 8009778:	0800a008 	.word	0x0800a008
 800977c:	33bbbd2e 	.word	0x33bbbd2e
 8009780:	40490fdb 	.word	0x40490fdb
 8009784:	3fc90fdb 	.word	0x3fc90fdb
 8009788:	3f490fdb 	.word	0x3f490fdb

0800978c <atanf>:
 800978c:	23a1      	movs	r3, #161	; 0xa1
 800978e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009790:	0045      	lsls	r5, r0, #1
 8009792:	1c04      	adds	r4, r0, #0
 8009794:	9001      	str	r0, [sp, #4]
 8009796:	086d      	lsrs	r5, r5, #1
 8009798:	05db      	lsls	r3, r3, #23
 800979a:	429d      	cmp	r5, r3
 800979c:	db0f      	blt.n	80097be <atanf+0x32>
 800979e:	23ff      	movs	r3, #255	; 0xff
 80097a0:	05db      	lsls	r3, r3, #23
 80097a2:	429d      	cmp	r5, r3
 80097a4:	dd04      	ble.n	80097b0 <atanf+0x24>
 80097a6:	1c01      	adds	r1, r0, #0
 80097a8:	f7f6 ffd2 	bl	8000750 <__aeabi_fadd>
 80097ac:	1c04      	adds	r4, r0, #0
 80097ae:	e004      	b.n	80097ba <atanf+0x2e>
 80097b0:	9b01      	ldr	r3, [sp, #4]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	dd00      	ble.n	80097b8 <atanf+0x2c>
 80097b6:	e0cc      	b.n	8009952 <atanf+0x1c6>
 80097b8:	4c67      	ldr	r4, [pc, #412]	; (8009958 <atanf+0x1cc>)
 80097ba:	1c20      	adds	r0, r4, #0
 80097bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80097be:	4b67      	ldr	r3, [pc, #412]	; (800995c <atanf+0x1d0>)
 80097c0:	429d      	cmp	r5, r3
 80097c2:	dc0f      	bgt.n	80097e4 <atanf+0x58>
 80097c4:	23c4      	movs	r3, #196	; 0xc4
 80097c6:	059b      	lsls	r3, r3, #22
 80097c8:	429d      	cmp	r5, r3
 80097ca:	da08      	bge.n	80097de <atanf+0x52>
 80097cc:	4964      	ldr	r1, [pc, #400]	; (8009960 <atanf+0x1d4>)
 80097ce:	f7f6 ffbf 	bl	8000750 <__aeabi_fadd>
 80097d2:	21fe      	movs	r1, #254	; 0xfe
 80097d4:	0589      	lsls	r1, r1, #22
 80097d6:	f7f6 fe8d 	bl	80004f4 <__aeabi_fcmpgt>
 80097da:	2800      	cmp	r0, #0
 80097dc:	d1ed      	bne.n	80097ba <atanf+0x2e>
 80097de:	2601      	movs	r6, #1
 80097e0:	4276      	negs	r6, r6
 80097e2:	e01b      	b.n	800981c <atanf+0x90>
 80097e4:	f000 f8e2 	bl	80099ac <fabsf>
 80097e8:	4b5e      	ldr	r3, [pc, #376]	; (8009964 <atanf+0x1d8>)
 80097ea:	1c04      	adds	r4, r0, #0
 80097ec:	429d      	cmp	r5, r3
 80097ee:	dc7b      	bgt.n	80098e8 <atanf+0x15c>
 80097f0:	4b5d      	ldr	r3, [pc, #372]	; (8009968 <atanf+0x1dc>)
 80097f2:	429d      	cmp	r5, r3
 80097f4:	dc67      	bgt.n	80098c6 <atanf+0x13a>
 80097f6:	1c01      	adds	r1, r0, #0
 80097f8:	f7f6 ffaa 	bl	8000750 <__aeabi_fadd>
 80097fc:	21fe      	movs	r1, #254	; 0xfe
 80097fe:	0589      	lsls	r1, r1, #22
 8009800:	f7f7 fc32 	bl	8001068 <__aeabi_fsub>
 8009804:	2180      	movs	r1, #128	; 0x80
 8009806:	1c05      	adds	r5, r0, #0
 8009808:	05c9      	lsls	r1, r1, #23
 800980a:	1c20      	adds	r0, r4, #0
 800980c:	f7f6 ffa0 	bl	8000750 <__aeabi_fadd>
 8009810:	1c01      	adds	r1, r0, #0
 8009812:	1c28      	adds	r0, r5, #0
 8009814:	f7f7 f93a 	bl	8000a8c <__aeabi_fdiv>
 8009818:	2600      	movs	r6, #0
 800981a:	1c04      	adds	r4, r0, #0
 800981c:	1c21      	adds	r1, r4, #0
 800981e:	1c20      	adds	r0, r4, #0
 8009820:	f7f7 fafc 	bl	8000e1c <__aeabi_fmul>
 8009824:	1c01      	adds	r1, r0, #0
 8009826:	1c07      	adds	r7, r0, #0
 8009828:	f7f7 faf8 	bl	8000e1c <__aeabi_fmul>
 800982c:	494f      	ldr	r1, [pc, #316]	; (800996c <atanf+0x1e0>)
 800982e:	1c05      	adds	r5, r0, #0
 8009830:	f7f7 faf4 	bl	8000e1c <__aeabi_fmul>
 8009834:	494e      	ldr	r1, [pc, #312]	; (8009970 <atanf+0x1e4>)
 8009836:	f7f6 ff8b 	bl	8000750 <__aeabi_fadd>
 800983a:	1c29      	adds	r1, r5, #0
 800983c:	f7f7 faee 	bl	8000e1c <__aeabi_fmul>
 8009840:	494c      	ldr	r1, [pc, #304]	; (8009974 <atanf+0x1e8>)
 8009842:	f7f6 ff85 	bl	8000750 <__aeabi_fadd>
 8009846:	1c29      	adds	r1, r5, #0
 8009848:	f7f7 fae8 	bl	8000e1c <__aeabi_fmul>
 800984c:	494a      	ldr	r1, [pc, #296]	; (8009978 <atanf+0x1ec>)
 800984e:	f7f6 ff7f 	bl	8000750 <__aeabi_fadd>
 8009852:	1c29      	adds	r1, r5, #0
 8009854:	f7f7 fae2 	bl	8000e1c <__aeabi_fmul>
 8009858:	4948      	ldr	r1, [pc, #288]	; (800997c <atanf+0x1f0>)
 800985a:	f7f6 ff79 	bl	8000750 <__aeabi_fadd>
 800985e:	1c29      	adds	r1, r5, #0
 8009860:	f7f7 fadc 	bl	8000e1c <__aeabi_fmul>
 8009864:	4946      	ldr	r1, [pc, #280]	; (8009980 <atanf+0x1f4>)
 8009866:	f7f6 ff73 	bl	8000750 <__aeabi_fadd>
 800986a:	1c39      	adds	r1, r7, #0
 800986c:	f7f7 fad6 	bl	8000e1c <__aeabi_fmul>
 8009870:	4944      	ldr	r1, [pc, #272]	; (8009984 <atanf+0x1f8>)
 8009872:	1c07      	adds	r7, r0, #0
 8009874:	1c28      	adds	r0, r5, #0
 8009876:	f7f7 fad1 	bl	8000e1c <__aeabi_fmul>
 800987a:	4943      	ldr	r1, [pc, #268]	; (8009988 <atanf+0x1fc>)
 800987c:	f7f7 fbf4 	bl	8001068 <__aeabi_fsub>
 8009880:	1c29      	adds	r1, r5, #0
 8009882:	f7f7 facb 	bl	8000e1c <__aeabi_fmul>
 8009886:	4941      	ldr	r1, [pc, #260]	; (800998c <atanf+0x200>)
 8009888:	f7f7 fbee 	bl	8001068 <__aeabi_fsub>
 800988c:	1c29      	adds	r1, r5, #0
 800988e:	f7f7 fac5 	bl	8000e1c <__aeabi_fmul>
 8009892:	493f      	ldr	r1, [pc, #252]	; (8009990 <atanf+0x204>)
 8009894:	f7f7 fbe8 	bl	8001068 <__aeabi_fsub>
 8009898:	1c29      	adds	r1, r5, #0
 800989a:	f7f7 fabf 	bl	8000e1c <__aeabi_fmul>
 800989e:	493d      	ldr	r1, [pc, #244]	; (8009994 <atanf+0x208>)
 80098a0:	f7f7 fbe2 	bl	8001068 <__aeabi_fsub>
 80098a4:	1c29      	adds	r1, r5, #0
 80098a6:	f7f7 fab9 	bl	8000e1c <__aeabi_fmul>
 80098aa:	1c01      	adds	r1, r0, #0
 80098ac:	1c38      	adds	r0, r7, #0
 80098ae:	f7f6 ff4f 	bl	8000750 <__aeabi_fadd>
 80098b2:	1c21      	adds	r1, r4, #0
 80098b4:	f7f7 fab2 	bl	8000e1c <__aeabi_fmul>
 80098b8:	1c73      	adds	r3, r6, #1
 80098ba:	d134      	bne.n	8009926 <atanf+0x19a>
 80098bc:	1c01      	adds	r1, r0, #0
 80098be:	1c20      	adds	r0, r4, #0
 80098c0:	f7f7 fbd2 	bl	8001068 <__aeabi_fsub>
 80098c4:	e772      	b.n	80097ac <atanf+0x20>
 80098c6:	21fe      	movs	r1, #254	; 0xfe
 80098c8:	0589      	lsls	r1, r1, #22
 80098ca:	f7f7 fbcd 	bl	8001068 <__aeabi_fsub>
 80098ce:	21fe      	movs	r1, #254	; 0xfe
 80098d0:	1c05      	adds	r5, r0, #0
 80098d2:	0589      	lsls	r1, r1, #22
 80098d4:	1c20      	adds	r0, r4, #0
 80098d6:	f7f6 ff3b 	bl	8000750 <__aeabi_fadd>
 80098da:	1c01      	adds	r1, r0, #0
 80098dc:	1c28      	adds	r0, r5, #0
 80098de:	f7f7 f8d5 	bl	8000a8c <__aeabi_fdiv>
 80098e2:	2601      	movs	r6, #1
 80098e4:	1c04      	adds	r4, r0, #0
 80098e6:	e799      	b.n	800981c <atanf+0x90>
 80098e8:	4b2b      	ldr	r3, [pc, #172]	; (8009998 <atanf+0x20c>)
 80098ea:	429d      	cmp	r5, r3
 80098ec:	dc14      	bgt.n	8009918 <atanf+0x18c>
 80098ee:	21ff      	movs	r1, #255	; 0xff
 80098f0:	0589      	lsls	r1, r1, #22
 80098f2:	f7f7 fbb9 	bl	8001068 <__aeabi_fsub>
 80098f6:	21ff      	movs	r1, #255	; 0xff
 80098f8:	1c05      	adds	r5, r0, #0
 80098fa:	0589      	lsls	r1, r1, #22
 80098fc:	1c20      	adds	r0, r4, #0
 80098fe:	f7f7 fa8d 	bl	8000e1c <__aeabi_fmul>
 8009902:	21fe      	movs	r1, #254	; 0xfe
 8009904:	0589      	lsls	r1, r1, #22
 8009906:	f7f6 ff23 	bl	8000750 <__aeabi_fadd>
 800990a:	1c01      	adds	r1, r0, #0
 800990c:	1c28      	adds	r0, r5, #0
 800990e:	f7f7 f8bd 	bl	8000a8c <__aeabi_fdiv>
 8009912:	2602      	movs	r6, #2
 8009914:	1c04      	adds	r4, r0, #0
 8009916:	e781      	b.n	800981c <atanf+0x90>
 8009918:	1c01      	adds	r1, r0, #0
 800991a:	4820      	ldr	r0, [pc, #128]	; (800999c <atanf+0x210>)
 800991c:	f7f7 f8b6 	bl	8000a8c <__aeabi_fdiv>
 8009920:	2603      	movs	r6, #3
 8009922:	1c04      	adds	r4, r0, #0
 8009924:	e77a      	b.n	800981c <atanf+0x90>
 8009926:	4b1e      	ldr	r3, [pc, #120]	; (80099a0 <atanf+0x214>)
 8009928:	00b6      	lsls	r6, r6, #2
 800992a:	58f1      	ldr	r1, [r6, r3]
 800992c:	f7f7 fb9c 	bl	8001068 <__aeabi_fsub>
 8009930:	1c21      	adds	r1, r4, #0
 8009932:	f7f7 fb99 	bl	8001068 <__aeabi_fsub>
 8009936:	4b1b      	ldr	r3, [pc, #108]	; (80099a4 <atanf+0x218>)
 8009938:	1c01      	adds	r1, r0, #0
 800993a:	58f0      	ldr	r0, [r6, r3]
 800993c:	f7f7 fb94 	bl	8001068 <__aeabi_fsub>
 8009940:	9b01      	ldr	r3, [sp, #4]
 8009942:	1c04      	adds	r4, r0, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	db00      	blt.n	800994a <atanf+0x1be>
 8009948:	e737      	b.n	80097ba <atanf+0x2e>
 800994a:	2380      	movs	r3, #128	; 0x80
 800994c:	061b      	lsls	r3, r3, #24
 800994e:	18c4      	adds	r4, r0, r3
 8009950:	e733      	b.n	80097ba <atanf+0x2e>
 8009952:	4c15      	ldr	r4, [pc, #84]	; (80099a8 <atanf+0x21c>)
 8009954:	e731      	b.n	80097ba <atanf+0x2e>
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	bfc90fdb 	.word	0xbfc90fdb
 800995c:	3edfffff 	.word	0x3edfffff
 8009960:	7149f2ca 	.word	0x7149f2ca
 8009964:	3f97ffff 	.word	0x3f97ffff
 8009968:	3f2fffff 	.word	0x3f2fffff
 800996c:	3c8569d7 	.word	0x3c8569d7
 8009970:	3d4bda59 	.word	0x3d4bda59
 8009974:	3d886b35 	.word	0x3d886b35
 8009978:	3dba2e6e 	.word	0x3dba2e6e
 800997c:	3e124925 	.word	0x3e124925
 8009980:	3eaaaaab 	.word	0x3eaaaaab
 8009984:	bd15a221 	.word	0xbd15a221
 8009988:	3d6ef16b 	.word	0x3d6ef16b
 800998c:	3d9d8795 	.word	0x3d9d8795
 8009990:	3de38e38 	.word	0x3de38e38
 8009994:	3e4ccccd 	.word	0x3e4ccccd
 8009998:	401bffff 	.word	0x401bffff
 800999c:	bf800000 	.word	0xbf800000
 80099a0:	0800a024 	.word	0x0800a024
 80099a4:	0800a014 	.word	0x0800a014
 80099a8:	3fc90fdb 	.word	0x3fc90fdb

080099ac <fabsf>:
 80099ac:	0040      	lsls	r0, r0, #1
 80099ae:	0840      	lsrs	r0, r0, #1
 80099b0:	4770      	bx	lr
	...

080099b4 <_init>:
 80099b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099b6:	46c0      	nop			; (mov r8, r8)
 80099b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099ba:	bc08      	pop	{r3}
 80099bc:	469e      	mov	lr, r3
 80099be:	4770      	bx	lr

080099c0 <_fini>:
 80099c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80099c6:	bc08      	pop	{r3}
 80099c8:	469e      	mov	lr, r3
 80099ca:	4770      	bx	lr
