
IMU_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000419c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800438c  0800438c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  08004404  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004404  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002c0a  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e7  00000000  00000000  00022ca2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00023490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009b0  00000000  00000000  00023f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000082b7  00000000  00000000  000248e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00001cac  00000000  00000000  0002cb9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0002e84b  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002d90  00000000  00000000  0002e89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004244 	.word	0x08004244

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004244 	.word	0x08004244

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80004c2:	f000 fb1b 	bl	8000afc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80004c6:	f000 f835 	bl	8000534 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80004ca:	f000 f911 	bl	80006f0 <MX_GPIO_Init>
	MX_I2C1_Init();
 80004ce:	f000 f89f 	bl	8000610 <MX_I2C1_Init>
	MX_USART2_UART_Init();
 80004d2:	f000 f8dd 	bl	8000690 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */

	uint8_t rslt;
	rslt = bmx160_if_init(&bmx160dev, &hi2c1);
 80004d6:	1dfc      	adds	r4, r7, #7
 80004d8:	4a12      	ldr	r2, [pc, #72]	; (8000524 <main+0x68>)
 80004da:	4b13      	ldr	r3, [pc, #76]	; (8000528 <main+0x6c>)
 80004dc:	0011      	movs	r1, r2
 80004de:	0018      	movs	r0, r3
 80004e0:	f000 fae2 	bl	8000aa8 <bmx160_if_init>
 80004e4:	0003      	movs	r3, r0
 80004e6:	7023      	strb	r3, [r4, #0]
	if (rslt==BMX160_OK) {
 80004e8:	1dfb      	adds	r3, r7, #7
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d10b      	bne.n	8000508 <main+0x4c>
		printf("\nDevice ready\r");
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <main+0x70>)
 80004f2:	0018      	movs	r0, r3
 80004f4:	f002 fece 	bl	8003294 <iprintf>
		printf("\nDevice ID: 0x%02X\r",bmx160dev.chip_id);
 80004f8:	4b0b      	ldr	r3, [pc, #44]	; (8000528 <main+0x6c>)
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	001a      	movs	r2, r3
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <main+0x74>)
 8000500:	0011      	movs	r1, r2
 8000502:	0018      	movs	r0, r3
 8000504:	f002 fec6 	bl	8003294 <iprintf>
		uint16_t status;



		// rf 08.05.2022 15:00
		printf("\nDevice ID: 0x%02X\r",bmx160dev.chip_id);
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <main+0x6c>)
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	001a      	movs	r2, r3
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <main+0x74>)
 8000510:	0011      	movs	r1, r2
 8000512:	0018      	movs	r0, r3
 8000514:	f002 febe 	bl	8003294 <iprintf>
		HAL_Delay(500);
 8000518:	23fa      	movs	r3, #250	; 0xfa
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	0018      	movs	r0, r3
 800051e:	f000 fb5d 	bl	8000bdc <HAL_Delay>
	while (1) {
 8000522:	e7f1      	b.n	8000508 <main+0x4c>
 8000524:	2000008c 	.word	0x2000008c
 8000528:	2000015c 	.word	0x2000015c
 800052c:	0800425c 	.word	0x0800425c
 8000530:	0800426c 	.word	0x0800426c

08000534 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000534:	b590      	push	{r4, r7, lr}
 8000536:	b09d      	sub	sp, #116	; 0x74
 8000538:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800053a:	2438      	movs	r4, #56	; 0x38
 800053c:	193b      	adds	r3, r7, r4
 800053e:	0018      	movs	r0, r3
 8000540:	2338      	movs	r3, #56	; 0x38
 8000542:	001a      	movs	r2, r3
 8000544:	2100      	movs	r1, #0
 8000546:	f002 fe9d 	bl	8003284 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800054a:	2324      	movs	r3, #36	; 0x24
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	2314      	movs	r3, #20
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f002 fe95 	bl	8003284 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800055a:	003b      	movs	r3, r7
 800055c:	0018      	movs	r0, r3
 800055e:	2324      	movs	r3, #36	; 0x24
 8000560:	001a      	movs	r2, r3
 8000562:	2100      	movs	r1, #0
 8000564:	f002 fe8e 	bl	8003284 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	4b27      	ldr	r3, [pc, #156]	; (8000608 <SystemClock_Config+0xd4>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a27      	ldr	r2, [pc, #156]	; (800060c <SystemClock_Config+0xd8>)
 800056e:	401a      	ands	r2, r3
 8000570:	4b25      	ldr	r3, [pc, #148]	; (8000608 <SystemClock_Config+0xd4>)
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0109      	lsls	r1, r1, #4
 8000576:	430a      	orrs	r2, r1
 8000578:	601a      	str	r2, [r3, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800057a:	0021      	movs	r1, r4
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2210      	movs	r2, #16
 8000580:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2201      	movs	r2, #1
 8000586:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800058e:	187b      	adds	r3, r7, r1
 8000590:	22a0      	movs	r2, #160	; 0xa0
 8000592:	0212      	lsls	r2, r2, #8
 8000594:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800059c:	187b      	adds	r3, r7, r1
 800059e:	0018      	movs	r0, r3
 80005a0:	f001 f9ba 	bl	8001918 <HAL_RCC_OscConfig>
 80005a4:	1e03      	subs	r3, r0, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x78>
		Error_Handler();
 80005a8:	f000 f8d8 	bl	800075c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80005ac:	2124      	movs	r1, #36	; 0x24
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	220f      	movs	r2, #15
 80005b2:	601a      	str	r2, [r3, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	2200      	movs	r2, #0
 80005b8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ba:	187b      	adds	r3, r7, r1
 80005bc:	2200      	movs	r2, #0
 80005be:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2200      	movs	r2, #0
 80005c4:	60da      	str	r2, [r3, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2100      	movs	r1, #0
 80005d0:	0018      	movs	r0, r3
 80005d2:	f001 fd65 	bl	80020a0 <HAL_RCC_ClockConfig>
 80005d6:	1e03      	subs	r3, r0, #0
 80005d8:	d001      	beq.n	80005de <SystemClock_Config+0xaa>
		Error_Handler();
 80005da:	f000 f8bf 	bl	800075c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2
 80005de:	003b      	movs	r3, r7
 80005e0:	220a      	movs	r2, #10
 80005e2:	601a      	str	r2, [r3, #0]
			| RCC_PERIPHCLK_I2C1;
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80005e4:	003b      	movs	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80005ea:	003b      	movs	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80005f0:	003b      	movs	r3, r7
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 ff78 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xcc>
		Error_Handler();
 80005fc:	f000 f8ae 	bl	800075c <Error_Handler>
	}
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b01d      	add	sp, #116	; 0x74
 8000606:	bd90      	pop	{r4, r7, pc}
 8000608:	40007000 	.word	0x40007000
 800060c:	ffffe7ff 	.word	0xffffe7ff

08000610 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_I2C1_Init+0x78>)
 8000616:	4a1d      	ldr	r2, [pc, #116]	; (800068c <MX_I2C1_Init+0x7c>)
 8000618:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00000708;
 800061a:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_I2C1_Init+0x78>)
 800061c:	22e1      	movs	r2, #225	; 0xe1
 800061e:	00d2      	lsls	r2, r2, #3
 8000620:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8000622:	4b19      	ldr	r3, [pc, #100]	; (8000688 <MX_I2C1_Init+0x78>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000628:	4b17      	ldr	r3, [pc, #92]	; (8000688 <MX_I2C1_Init+0x78>)
 800062a:	2201      	movs	r2, #1
 800062c:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_I2C1_Init+0x78>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_I2C1_Init+0x78>)
 8000636:	2200      	movs	r2, #0
 8000638:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_I2C1_Init+0x78>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C1_Init+0x78>)
 8000642:	2200      	movs	r2, #0
 8000644:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_I2C1_Init+0x78>)
 8000648:	2200      	movs	r2, #0
 800064a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800064c:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C1_Init+0x78>)
 800064e:	0018      	movs	r0, r3
 8000650:	f000 fd12 	bl	8001078 <HAL_I2C_Init>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000658:	f000 f880 	bl	800075c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C1_Init+0x78>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 f8c1 	bl	80017e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800066a:	f000 f877 	bl	800075c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2C1_Init+0x78>)
 8000670:	2100      	movs	r1, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f904 	bl	8001880 <HAL_I2CEx_ConfigDigitalFilter>
 8000678:	1e03      	subs	r3, r0, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x70>
		Error_Handler();
 800067c:	f000 f86e 	bl	800075c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	2000008c 	.word	0x2000008c
 800068c:	40005400 	.word	0x40005400

08000690 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART2_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 800069c:	22e1      	movs	r2, #225	; 0xe1
 800069e:	0252      	lsls	r2, r2, #9
 80006a0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 f86b 	bl	80027b0 <HAL_UART_Init>
 80006da:	1e03      	subs	r3, r0, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80006de:	f000 f83d 	bl	800075c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200000d8 	.word	0x200000d8
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_GPIO_Init+0x40>)
 80006f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006fa:	4b0d      	ldr	r3, [pc, #52]	; (8000730 <MX_GPIO_Init+0x40>)
 80006fc:	2101      	movs	r1, #1
 80006fe:	430a      	orrs	r2, r1
 8000700:	62da      	str	r2, [r3, #44]	; 0x2c
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_GPIO_Init+0x40>)
 8000704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000706:	2201      	movs	r2, #1
 8000708:	4013      	ands	r3, r2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_GPIO_Init+0x40>)
 8000710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000712:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_GPIO_Init+0x40>)
 8000714:	2102      	movs	r1, #2
 8000716:	430a      	orrs	r2, r1
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <MX_GPIO_Init+0x40>)
 800071c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800071e:	2202      	movs	r2, #2
 8000720:	4013      	ands	r3, r2
 8000722:	603b      	str	r3, [r7, #0]
 8000724:	683b      	ldr	r3, [r7, #0]

}
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b002      	add	sp, #8
 800072c:	bd80      	pop	{r7, pc}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	40021000 	.word	0x40021000

08000734 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <__io_putchar+0x20>)
 800073e:	1d39      	adds	r1, r7, #4
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <__io_putchar+0x24>)
 8000742:	2201      	movs	r2, #1
 8000744:	f002 f888 	bl	8002858 <HAL_UART_Transmit>

	return ch;
 8000748:	687b      	ldr	r3, [r7, #4]
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	b002      	add	sp, #8
 8000750:	bd80      	pop	{r7, pc}
 8000752:	46c0      	nop			; (mov r8, r8)
 8000754:	0000ffff 	.word	0x0000ffff
 8000758:	200000d8 	.word	0x200000d8

0800075c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000760:	b672      	cpsid	i
}
 8000762:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000764:	e7fe      	b.n	8000764 <Error_Handler+0x8>
	...

08000768 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076c:	4b07      	ldr	r3, [pc, #28]	; (800078c <HAL_MspInit+0x24>)
 800076e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x24>)
 8000772:	2101      	movs	r1, #1
 8000774:	430a      	orrs	r2, r1
 8000776:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <HAL_MspInit+0x24>)
 800077a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <HAL_MspInit+0x24>)
 800077e:	2180      	movs	r1, #128	; 0x80
 8000780:	0549      	lsls	r1, r1, #21
 8000782:	430a      	orrs	r2, r1
 8000784:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40021000 	.word	0x40021000

08000790 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b089      	sub	sp, #36	; 0x24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	240c      	movs	r4, #12
 800079a:	193b      	adds	r3, r7, r4
 800079c:	0018      	movs	r0, r3
 800079e:	2314      	movs	r3, #20
 80007a0:	001a      	movs	r2, r3
 80007a2:	2100      	movs	r1, #0
 80007a4:	f002 fd6e 	bl	8003284 <memset>
  if(hi2c->Instance==I2C1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a17      	ldr	r2, [pc, #92]	; (800080c <HAL_I2C_MspInit+0x7c>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d128      	bne.n	8000804 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	4b17      	ldr	r3, [pc, #92]	; (8000810 <HAL_I2C_MspInit+0x80>)
 80007b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007b6:	4b16      	ldr	r3, [pc, #88]	; (8000810 <HAL_I2C_MspInit+0x80>)
 80007b8:	2102      	movs	r1, #2
 80007ba:	430a      	orrs	r2, r1
 80007bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <HAL_I2C_MspInit+0x80>)
 80007c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007c2:	2202      	movs	r2, #2
 80007c4:	4013      	ands	r3, r2
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007ca:	0021      	movs	r1, r4
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	22c0      	movs	r2, #192	; 0xc0
 80007d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2212      	movs	r2, #18
 80007d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007de:	187b      	adds	r3, r7, r1
 80007e0:	2203      	movs	r2, #3
 80007e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80007e4:	187b      	adds	r3, r7, r1
 80007e6:	2201      	movs	r2, #1
 80007e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ea:	187b      	adds	r3, r7, r1
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <HAL_I2C_MspInit+0x84>)
 80007ee:	0019      	movs	r1, r3
 80007f0:	0010      	movs	r0, r2
 80007f2:	f000 facb 	bl	8000d8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007f6:	4b06      	ldr	r3, [pc, #24]	; (8000810 <HAL_I2C_MspInit+0x80>)
 80007f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_I2C_MspInit+0x80>)
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	0389      	lsls	r1, r1, #14
 8000800:	430a      	orrs	r2, r1
 8000802:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b009      	add	sp, #36	; 0x24
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40005400 	.word	0x40005400
 8000810:	40021000 	.word	0x40021000
 8000814:	50000400 	.word	0x50000400

08000818 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000818:	b590      	push	{r4, r7, lr}
 800081a:	b089      	sub	sp, #36	; 0x24
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	240c      	movs	r4, #12
 8000822:	193b      	adds	r3, r7, r4
 8000824:	0018      	movs	r0, r3
 8000826:	2314      	movs	r3, #20
 8000828:	001a      	movs	r2, r3
 800082a:	2100      	movs	r1, #0
 800082c:	f002 fd2a 	bl	8003284 <memset>
  if(huart->Instance==USART2)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a18      	ldr	r2, [pc, #96]	; (8000898 <HAL_UART_MspInit+0x80>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d129      	bne.n	800088e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_UART_MspInit+0x84>)
 800083c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800083e:	4b17      	ldr	r3, [pc, #92]	; (800089c <HAL_UART_MspInit+0x84>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0289      	lsls	r1, r1, #10
 8000844:	430a      	orrs	r2, r1
 8000846:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_UART_MspInit+0x84>)
 800084a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084c:	4b13      	ldr	r3, [pc, #76]	; (800089c <HAL_UART_MspInit+0x84>)
 800084e:	2101      	movs	r1, #1
 8000850:	430a      	orrs	r2, r1
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
 8000854:	4b11      	ldr	r3, [pc, #68]	; (800089c <HAL_UART_MspInit+0x84>)
 8000856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000858:	2201      	movs	r2, #1
 800085a:	4013      	ands	r3, r2
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000860:	0021      	movs	r1, r4
 8000862:	187b      	adds	r3, r7, r1
 8000864:	220c      	movs	r2, #12
 8000866:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000868:	187b      	adds	r3, r7, r1
 800086a:	2202      	movs	r2, #2
 800086c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000874:	187b      	adds	r3, r7, r1
 8000876:	2203      	movs	r2, #3
 8000878:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800087a:	187b      	adds	r3, r7, r1
 800087c:	2204      	movs	r2, #4
 800087e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000880:	187a      	adds	r2, r7, r1
 8000882:	23a0      	movs	r3, #160	; 0xa0
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fa7f 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	46bd      	mov	sp, r7
 8000892:	b009      	add	sp, #36	; 0x24
 8000894:	bd90      	pop	{r4, r7, pc}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	40004400 	.word	0x40004400
 800089c:	40021000 	.word	0x40021000

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <NMI_Handler+0x4>

080008a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008aa:	e7fe      	b.n	80008aa <HardFault_Handler+0x4>

080008ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80008b0:	46c0      	nop			; (mov r8, r8)
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b580      	push	{r7, lr}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c4:	f000 f96e 	bl	8000ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	e00a      	b.n	80008f6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008e0:	e000      	b.n	80008e4 <_read+0x16>
 80008e2:	bf00      	nop
 80008e4:	0001      	movs	r1, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1c5a      	adds	r2, r3, #1
 80008ea:	60ba      	str	r2, [r7, #8]
 80008ec:	b2ca      	uxtb	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	3301      	adds	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697a      	ldr	r2, [r7, #20]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	429a      	cmp	r2, r3
 80008fc:	dbf0      	blt.n	80008e0 <_read+0x12>
	}

return len;
 80008fe:	687b      	ldr	r3, [r7, #4]
}
 8000900:	0018      	movs	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	b006      	add	sp, #24
 8000906:	bd80      	pop	{r7, pc}

08000908 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b086      	sub	sp, #24
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	e009      	b.n	800092e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	1c5a      	adds	r2, r3, #1
 800091e:	60ba      	str	r2, [r7, #8]
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	0018      	movs	r0, r3
 8000924:	f7ff ff06 	bl	8000734 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	3301      	adds	r3, #1
 800092c:	617b      	str	r3, [r7, #20]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	429a      	cmp	r2, r3
 8000934:	dbf1      	blt.n	800091a <_write+0x12>
	}
	return len;
 8000936:	687b      	ldr	r3, [r7, #4]
}
 8000938:	0018      	movs	r0, r3
 800093a:	46bd      	mov	sp, r7
 800093c:	b006      	add	sp, #24
 800093e:	bd80      	pop	{r7, pc}

08000940 <_close>:

int _close(int file)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
	return -1;
 8000948:	2301      	movs	r3, #1
 800094a:	425b      	negs	r3, r3
}
 800094c:	0018      	movs	r0, r3
 800094e:	46bd      	mov	sp, r7
 8000950:	b002      	add	sp, #8
 8000952:	bd80      	pop	{r7, pc}

08000954 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
 800095c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	2280      	movs	r2, #128	; 0x80
 8000962:	0192      	lsls	r2, r2, #6
 8000964:	605a      	str	r2, [r3, #4]
	return 0;
 8000966:	2300      	movs	r3, #0
}
 8000968:	0018      	movs	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	b002      	add	sp, #8
 800096e:	bd80      	pop	{r7, pc}

08000970 <_isatty>:

int _isatty(int file)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	return 1;
 8000978:	2301      	movs	r3, #1
}
 800097a:	0018      	movs	r0, r3
 800097c:	46bd      	mov	sp, r7
 800097e:	b002      	add	sp, #8
 8000980:	bd80      	pop	{r7, pc}

08000982 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b084      	sub	sp, #16
 8000986:	af00      	add	r7, sp, #0
 8000988:	60f8      	str	r0, [r7, #12]
 800098a:	60b9      	str	r1, [r7, #8]
 800098c:	607a      	str	r2, [r7, #4]
	return 0;
 800098e:	2300      	movs	r3, #0
}
 8000990:	0018      	movs	r0, r3
 8000992:	46bd      	mov	sp, r7
 8000994:	b004      	add	sp, #16
 8000996:	bd80      	pop	{r7, pc}

08000998 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009a0:	4a14      	ldr	r2, [pc, #80]	; (80009f4 <_sbrk+0x5c>)
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <_sbrk+0x60>)
 80009a4:	1ad3      	subs	r3, r2, r3
 80009a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d102      	bne.n	80009ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <_sbrk+0x64>)
 80009b6:	4a12      	ldr	r2, [pc, #72]	; (8000a00 <_sbrk+0x68>)
 80009b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ba:	4b10      	ldr	r3, [pc, #64]	; (80009fc <_sbrk+0x64>)
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	18d3      	adds	r3, r2, r3
 80009c2:	693a      	ldr	r2, [r7, #16]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d207      	bcs.n	80009d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009c8:	f002 fc32 	bl	8003230 <__errno>
 80009cc:	0003      	movs	r3, r0
 80009ce:	220c      	movs	r2, #12
 80009d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	425b      	negs	r3, r3
 80009d6:	e009      	b.n	80009ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <_sbrk+0x64>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <_sbrk+0x64>)
 80009e0:	681a      	ldr	r2, [r3, #0]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	18d2      	adds	r2, r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <_sbrk+0x64>)
 80009e8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009ea:	68fb      	ldr	r3, [r7, #12]
}
 80009ec:	0018      	movs	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	b006      	add	sp, #24
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20002000 	.word	0x20002000
 80009f8:	00000400 	.word	0x00000400
 80009fc:	20000164 	.word	0x20000164
 8000a00:	20000180 	.word	0x20000180

08000a04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480d      	ldr	r0, [pc, #52]	; (8000a4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490e      	ldr	r1, [pc, #56]	; (8000a50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0b      	ldr	r2, [pc, #44]	; (8000a58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0b      	ldr	r4, [pc, #44]	; (8000a5c <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a3a:	f7ff ffe3 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a3e:	f002 fbfd 	bl	800323c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a42:	f7ff fd3b 	bl	80004bc <main>

08000a46 <LoopForever>:

LoopForever:
    b LoopForever
 8000a46:	e7fe      	b.n	8000a46 <LoopForever>
  ldr   r0, =_estack
 8000a48:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a50:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a54:	08004394 	.word	0x08004394
  ldr r2, =_sbss
 8000a58:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a5c:	2000017c 	.word	0x2000017c

08000a60 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a60:	e7fe      	b.n	8000a60 <ADC1_COMP_IRQHandler>

08000a62 <BMX160_Read_Byte>:
 return:     result of API execution status
 retval Zero Success
 retval other than zero Error
 Info:		This API reads the data from the register, stores it in the data pointer passed by the user
 ******************************************************************************/
static uint8_t BMX160_Read_Byte(bmx160_dev *dev, uint8_t addr, uint8_t *data) {
 8000a62:	b590      	push	{r4, r7, lr}
 8000a64:	b08b      	sub	sp, #44	; 0x2c
 8000a66:	af04      	add	r7, sp, #16
 8000a68:	60f8      	str	r0, [r7, #12]
 8000a6a:	607a      	str	r2, [r7, #4]
 8000a6c:	240b      	movs	r4, #11
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	1c0a      	adds	r2, r1, #0
 8000a72:	701a      	strb	r2, [r3, #0]
	uint8_t *buf = data;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	617b      	str	r3, [r7, #20]
	return HAL_I2C_Mem_Read(dev->i2cHandle, (dev->address << 1), addr,
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	795b      	ldrb	r3, [r3, #5]
 8000a80:	b29b      	uxth	r3, r3
 8000a82:	18db      	adds	r3, r3, r3
 8000a84:	b299      	uxth	r1, r3
 8000a86:	193b      	adds	r3, r7, r4
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	2320      	movs	r3, #32
 8000a8e:	9302      	str	r3, [sp, #8]
 8000a90:	2301      	movs	r3, #1
 8000a92:	9301      	str	r3, [sp, #4]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	9300      	str	r3, [sp, #0]
 8000a98:	2301      	movs	r3, #1
 8000a9a:	f000 fb83 	bl	80011a4 <HAL_I2C_Mem_Read>
 8000a9e:	0003      	movs	r3, r0
	MEMADDSIZE8, buf, 1, BMX160_I2C_TIMEOUT_DURATION);
}
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b007      	add	sp, #28
 8000aa6:	bd90      	pop	{r4, r7, pc}

08000aa8 <bmx160_if_init>:
 return:     Result of API execution status
 retval Zero Success
 retval other than zero Error
 Info:		-
 ******************************************************************************/
uint8_t bmx160_if_init(bmx160_dev *dev, I2C_HandleTypeDef *hi2c1) {
 8000aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
 8000ab0:	6039      	str	r1, [r7, #0]
	uint8_t rslt;
	uint8_t chip_id;
	dev->address = BMX160_ADDR_I2C;
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2268      	movs	r2, #104	; 0x68
 8000ab6:	715a      	strb	r2, [r3, #5]
	dev->i2cHandle = hi2c1;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	601a      	str	r2, [r3, #0]
	rslt = BMX160_Read_Byte(dev, BMX160_CHIP_ID_ADDR, &chip_id);
 8000abe:	260f      	movs	r6, #15
 8000ac0:	19bc      	adds	r4, r7, r6
 8000ac2:	250e      	movs	r5, #14
 8000ac4:	197a      	adds	r2, r7, r5
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2100      	movs	r1, #0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff ffc9 	bl	8000a62 <BMX160_Read_Byte>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	7023      	strb	r3, [r4, #0]
	if ((rslt == BMX160_OK)&&(chip_id==BMX160_CHIP_ID)) {
 8000ad4:	19bb      	adds	r3, r7, r6
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d107      	bne.n	8000aec <bmx160_if_init+0x44>
 8000adc:	197b      	adds	r3, r7, r5
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2bd8      	cmp	r3, #216	; 0xd8
 8000ae2:	d103      	bne.n	8000aec <bmx160_if_init+0x44>
		dev->chip_id = chip_id;
 8000ae4:	197b      	adds	r3, r7, r5
 8000ae6:	781a      	ldrb	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	711a      	strb	r2, [r3, #4]
	}
	return rslt;
 8000aec:	230f      	movs	r3, #15
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	781b      	ldrb	r3, [r3, #0]
}
 8000af2:	0018      	movs	r0, r3
 8000af4:	46bd      	mov	sp, r7
 8000af6:	b005      	add	sp, #20
 8000af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000afc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	2200      	movs	r2, #0
 8000b06:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b08:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <HAL_Init+0x3c>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Init+0x3c>)
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	430a      	orrs	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f811 	bl	8000b3c <HAL_InitTick>
 8000b1a:	1e03      	subs	r3, r0, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]
 8000b24:	e001      	b.n	8000b2a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b26:	f7ff fe1f 	bl	8000768 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b2a:	1dfb      	adds	r3, r7, #7
 8000b2c:	781b      	ldrb	r3, [r3, #0]
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b002      	add	sp, #8
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b46:	681c      	ldr	r4, [r3, #0]
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_InitTick+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	23fa      	movs	r3, #250	; 0xfa
 8000b50:	0098      	lsls	r0, r3, #2
 8000b52:	f7ff fae3 	bl	800011c <__udivsi3>
 8000b56:	0003      	movs	r3, r0
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f7ff fade 	bl	800011c <__udivsi3>
 8000b60:	0003      	movs	r3, r0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f000 f905 	bl	8000d72 <HAL_SYSTICK_Config>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d001      	beq.n	8000b70 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e00f      	b.n	8000b90 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b03      	cmp	r3, #3
 8000b74:	d80b      	bhi.n	8000b8e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b76:	6879      	ldr	r1, [r7, #4]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	425b      	negs	r3, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f000 f8e2 	bl	8000d48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <HAL_InitTick+0x64>)
 8000b86:	687a      	ldr	r2, [r7, #4]
 8000b88:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e000      	b.n	8000b90 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000b8e:	2301      	movs	r3, #1
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b003      	add	sp, #12
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000008 	.word	0x20000008
 8000ba0:	20000004 	.word	0x20000004

08000ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <HAL_IncTick+0x1c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	001a      	movs	r2, r3
 8000bae:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	18d2      	adds	r2, r2, r3
 8000bb4:	4b03      	ldr	r3, [pc, #12]	; (8000bc4 <HAL_IncTick+0x20>)
 8000bb6:	601a      	str	r2, [r3, #0]
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000168 	.word	0x20000168

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b02      	ldr	r3, [pc, #8]	; (8000bd8 <HAL_GetTick+0x10>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	46c0      	nop			; (mov r8, r8)
 8000bd8:	20000168 	.word	0x20000168

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff fff0 	bl	8000bc8 <HAL_GetTick>
 8000be8:	0003      	movs	r3, r0
 8000bea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	189b      	adds	r3, r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	f7ff ffe0 	bl	8000bc8 <HAL_GetTick>
 8000c08:	0002      	movs	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	46c0      	nop			; (mov r8, r8)
 8000c16:	46c0      	nop			; (mov r8, r8)
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	b004      	add	sp, #16
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	20000008 	.word	0x20000008

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b590      	push	{r4, r7, lr}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	0002      	movs	r2, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	2b7f      	cmp	r3, #127	; 0x7f
 8000c38:	d828      	bhi.n	8000c8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c3a:	4a2f      	ldr	r2, [pc, #188]	; (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	089b      	lsrs	r3, r3, #2
 8000c44:	33c0      	adds	r3, #192	; 0xc0
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	589b      	ldr	r3, [r3, r2]
 8000c4a:	1dfa      	adds	r2, r7, #7
 8000c4c:	7812      	ldrb	r2, [r2, #0]
 8000c4e:	0011      	movs	r1, r2
 8000c50:	2203      	movs	r2, #3
 8000c52:	400a      	ands	r2, r1
 8000c54:	00d2      	lsls	r2, r2, #3
 8000c56:	21ff      	movs	r1, #255	; 0xff
 8000c58:	4091      	lsls	r1, r2
 8000c5a:	000a      	movs	r2, r1
 8000c5c:	43d2      	mvns	r2, r2
 8000c5e:	401a      	ands	r2, r3
 8000c60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	019b      	lsls	r3, r3, #6
 8000c66:	22ff      	movs	r2, #255	; 0xff
 8000c68:	401a      	ands	r2, r3
 8000c6a:	1dfb      	adds	r3, r7, #7
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2303      	movs	r3, #3
 8000c72:	4003      	ands	r3, r0
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	481f      	ldr	r0, [pc, #124]	; (8000cf8 <__NVIC_SetPriority+0xd4>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	b25b      	sxtb	r3, r3
 8000c80:	089b      	lsrs	r3, r3, #2
 8000c82:	430a      	orrs	r2, r1
 8000c84:	33c0      	adds	r3, #192	; 0xc0
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c8a:	e031      	b.n	8000cf0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4a1b      	ldr	r2, [pc, #108]	; (8000cfc <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	0019      	movs	r1, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	400b      	ands	r3, r1
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3306      	adds	r3, #6
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	18d3      	adds	r3, r2, r3
 8000ca2:	3304      	adds	r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1dfa      	adds	r2, r7, #7
 8000ca8:	7812      	ldrb	r2, [r2, #0]
 8000caa:	0011      	movs	r1, r2
 8000cac:	2203      	movs	r2, #3
 8000cae:	400a      	ands	r2, r1
 8000cb0:	00d2      	lsls	r2, r2, #3
 8000cb2:	21ff      	movs	r1, #255	; 0xff
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	000a      	movs	r2, r1
 8000cb8:	43d2      	mvns	r2, r2
 8000cba:	401a      	ands	r2, r3
 8000cbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	019b      	lsls	r3, r3, #6
 8000cc2:	22ff      	movs	r2, #255	; 0xff
 8000cc4:	401a      	ands	r2, r3
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	0018      	movs	r0, r3
 8000ccc:	2303      	movs	r3, #3
 8000cce:	4003      	ands	r3, r0
 8000cd0:	00db      	lsls	r3, r3, #3
 8000cd2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <__NVIC_SetPriority+0xd8>)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	001c      	movs	r4, r3
 8000cdc:	230f      	movs	r3, #15
 8000cde:	4023      	ands	r3, r4
 8000ce0:	3b08      	subs	r3, #8
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	3306      	adds	r3, #6
 8000ce8:	009b      	lsls	r3, r3, #2
 8000cea:	18c3      	adds	r3, r0, r3
 8000cec:	3304      	adds	r3, #4
 8000cee:	601a      	str	r2, [r3, #0]
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b003      	add	sp, #12
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	1e5a      	subs	r2, r3, #1
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	045b      	lsls	r3, r3, #17
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d301      	bcc.n	8000d18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d14:	2301      	movs	r3, #1
 8000d16:	e010      	b.n	8000d3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <SysTick_Config+0x44>)
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	3a01      	subs	r2, #1
 8000d1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d20:	2301      	movs	r3, #1
 8000d22:	425b      	negs	r3, r3
 8000d24:	2103      	movs	r1, #3
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff ff7c 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <SysTick_Config+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d32:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <SysTick_Config+0x44>)
 8000d34:	2207      	movs	r2, #7
 8000d36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b002      	add	sp, #8
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	e000e010 	.word	0xe000e010

08000d48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60b9      	str	r1, [r7, #8]
 8000d50:	607a      	str	r2, [r7, #4]
 8000d52:	210f      	movs	r1, #15
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	1c02      	adds	r2, r0, #0
 8000d58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ffbf 	bl	8000d00 <SysTick_Config>
 8000d82:	0003      	movs	r3, r0
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b002      	add	sp, #8
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000da2:	e14f      	b.n	8001044 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2101      	movs	r1, #1
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	4091      	lsls	r1, r2
 8000dae:	000a      	movs	r2, r1
 8000db0:	4013      	ands	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d100      	bne.n	8000dbc <HAL_GPIO_Init+0x30>
 8000dba:	e140      	b.n	800103e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d005      	beq.n	8000dd4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	2203      	movs	r2, #3
 8000dce:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d130      	bne.n	8000e36 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	005b      	lsls	r3, r3, #1
 8000dde:	2203      	movs	r2, #3
 8000de0:	409a      	lsls	r2, r3
 8000de2:	0013      	movs	r3, r2
 8000de4:	43da      	mvns	r2, r3
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	4013      	ands	r3, r2
 8000dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68da      	ldr	r2, [r3, #12]
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	409a      	lsls	r2, r3
 8000df6:	0013      	movs	r3, r2
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0a:	2201      	movs	r2, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	0013      	movs	r3, r2
 8000e12:	43da      	mvns	r2, r3
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4013      	ands	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	2201      	movs	r2, #1
 8000e22:	401a      	ands	r2, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d017      	beq.n	8000e72 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	68db      	ldr	r3, [r3, #12]
 8000e46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	693a      	ldr	r2, [r7, #16]
 8000e70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2203      	movs	r2, #3
 8000e78:	4013      	ands	r3, r2
 8000e7a:	2b02      	cmp	r3, #2
 8000e7c:	d123      	bne.n	8000ec6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	58d3      	ldr	r3, [r2, r3]
 8000e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2207      	movs	r2, #7
 8000e90:	4013      	ands	r3, r2
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	220f      	movs	r2, #15
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	691a      	ldr	r2, [r3, #16]
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	2107      	movs	r1, #7
 8000eaa:	400b      	ands	r3, r1
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	0013      	movs	r3, r2
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	08da      	lsrs	r2, r3, #3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3208      	adds	r2, #8
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	6939      	ldr	r1, [r7, #16]
 8000ec4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	2203      	movs	r2, #3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685a      	ldr	r2, [r3, #4]
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	029b      	lsls	r3, r3, #10
 8000f02:	4013      	ands	r3, r2
 8000f04:	d100      	bne.n	8000f08 <HAL_GPIO_Init+0x17c>
 8000f06:	e09a      	b.n	800103e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f08:	4b54      	ldr	r3, [pc, #336]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f0c:	4b53      	ldr	r3, [pc, #332]	; (800105c <HAL_GPIO_Init+0x2d0>)
 8000f0e:	2101      	movs	r1, #1
 8000f10:	430a      	orrs	r2, r1
 8000f12:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f14:	4a52      	ldr	r2, [pc, #328]	; (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	589b      	ldr	r3, [r3, r2]
 8000f20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	2203      	movs	r2, #3
 8000f26:	4013      	ands	r3, r2
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	409a      	lsls	r2, r3
 8000f2e:	0013      	movs	r3, r2
 8000f30:	43da      	mvns	r2, r3
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4013      	ands	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	23a0      	movs	r3, #160	; 0xa0
 8000f3c:	05db      	lsls	r3, r3, #23
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d019      	beq.n	8000f76 <HAL_GPIO_Init+0x1ea>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2d8>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d013      	beq.n	8000f72 <HAL_GPIO_Init+0x1e6>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_GPIO_Init+0x2dc>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d00d      	beq.n	8000f6e <HAL_GPIO_Init+0x1e2>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <HAL_GPIO_Init+0x2e0>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d007      	beq.n	8000f6a <HAL_GPIO_Init+0x1de>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a44      	ldr	r2, [pc, #272]	; (8001070 <HAL_GPIO_Init+0x2e4>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d101      	bne.n	8000f66 <HAL_GPIO_Init+0x1da>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f66:	2306      	movs	r3, #6
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x1ec>
 8000f76:	2300      	movs	r3, #0
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	2103      	movs	r1, #3
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	; (8001060 <HAL_GPIO_Init+0x2d4>)
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f96:	4b37      	ldr	r3, [pc, #220]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685a      	ldr	r2, [r3, #4]
 8000faa:	2380      	movs	r3, #128	; 0x80
 8000fac:	025b      	lsls	r3, r3, #9
 8000fae:	4013      	ands	r3, r2
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fba:	4b2e      	ldr	r3, [pc, #184]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	43da      	mvns	r2, r3
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	029b      	lsls	r3, r3, #10
 8000fd8:	4013      	ands	r3, r2
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe4:	4b23      	ldr	r3, [pc, #140]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fea:	4b22      	ldr	r3, [pc, #136]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	035b      	lsls	r3, r3, #13
 8001002:	4013      	ands	r3, r2
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800100e:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	4013      	ands	r3, r2
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001038:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_GPIO_Init+0x2e8>)
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	40da      	lsrs	r2, r3
 800104c:	1e13      	subs	r3, r2, #0
 800104e:	d000      	beq.n	8001052 <HAL_GPIO_Init+0x2c6>
 8001050:	e6a8      	b.n	8000da4 <HAL_GPIO_Init+0x18>
  }
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b006      	add	sp, #24
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021000 	.word	0x40021000
 8001060:	40010000 	.word	0x40010000
 8001064:	50000400 	.word	0x50000400
 8001068:	50000800 	.word	0x50000800
 800106c:	50000c00 	.word	0x50000c00
 8001070:	50001c00 	.word	0x50001c00
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e082      	b.n	8001190 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2241      	movs	r2, #65	; 0x41
 800108e:	5c9b      	ldrb	r3, [r3, r2]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d107      	bne.n	80010a6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2240      	movs	r2, #64	; 0x40
 800109a:	2100      	movs	r1, #0
 800109c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	0018      	movs	r0, r3
 80010a2:	f7ff fb75 	bl	8000790 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2241      	movs	r2, #65	; 0x41
 80010aa:	2124      	movs	r1, #36	; 0x24
 80010ac:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2101      	movs	r1, #1
 80010ba:	438a      	bics	r2, r1
 80010bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4934      	ldr	r1, [pc, #208]	; (8001198 <HAL_I2C_Init+0x120>)
 80010c8:	400a      	ands	r2, r1
 80010ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	689a      	ldr	r2, [r3, #8]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4931      	ldr	r1, [pc, #196]	; (800119c <HAL_I2C_Init+0x124>)
 80010d8:	400a      	ands	r2, r1
 80010da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2180      	movs	r1, #128	; 0x80
 80010ee:	0209      	lsls	r1, r1, #8
 80010f0:	430a      	orrs	r2, r1
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	e007      	b.n	8001106 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	2184      	movs	r1, #132	; 0x84
 8001100:	0209      	lsls	r1, r1, #8
 8001102:	430a      	orrs	r2, r1
 8001104:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b02      	cmp	r3, #2
 800110c:	d104      	bne.n	8001118 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	491f      	ldr	r1, [pc, #124]	; (80011a0 <HAL_I2C_Init+0x128>)
 8001124:	430a      	orrs	r2, r1
 8001126:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	68da      	ldr	r2, [r3, #12]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	491a      	ldr	r1, [pc, #104]	; (800119c <HAL_I2C_Init+0x124>)
 8001134:	400a      	ands	r2, r1
 8001136:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	691a      	ldr	r2, [r3, #16]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	431a      	orrs	r2, r3
 8001142:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	430a      	orrs	r2, r1
 8001150:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69d9      	ldr	r1, [r3, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a1a      	ldr	r2, [r3, #32]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2101      	movs	r1, #1
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2241      	movs	r2, #65	; 0x41
 800117c:	2120      	movs	r1, #32
 800117e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2242      	movs	r2, #66	; 0x42
 800118a:	2100      	movs	r1, #0
 800118c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	b002      	add	sp, #8
 8001196:	bd80      	pop	{r7, pc}
 8001198:	f0ffffff 	.word	0xf0ffffff
 800119c:	ffff7fff 	.word	0xffff7fff
 80011a0:	02008000 	.word	0x02008000

080011a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	000c      	movs	r4, r1
 80011ae:	0010      	movs	r0, r2
 80011b0:	0019      	movs	r1, r3
 80011b2:	230a      	movs	r3, #10
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	1c22      	adds	r2, r4, #0
 80011b8:	801a      	strh	r2, [r3, #0]
 80011ba:	2308      	movs	r3, #8
 80011bc:	18fb      	adds	r3, r7, r3
 80011be:	1c02      	adds	r2, r0, #0
 80011c0:	801a      	strh	r2, [r3, #0]
 80011c2:	1dbb      	adds	r3, r7, #6
 80011c4:	1c0a      	adds	r2, r1, #0
 80011c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2241      	movs	r2, #65	; 0x41
 80011cc:	5c9b      	ldrb	r3, [r3, r2]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d000      	beq.n	80011d6 <HAL_I2C_Mem_Read+0x32>
 80011d4:	e110      	b.n	80013f8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80011d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d004      	beq.n	80011e6 <HAL_I2C_Mem_Read+0x42>
 80011dc:	232c      	movs	r3, #44	; 0x2c
 80011de:	18fb      	adds	r3, r7, r3
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d105      	bne.n	80011f2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0092      	lsls	r2, r2, #2
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e103      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2240      	movs	r2, #64	; 0x40
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_I2C_Mem_Read+0x5c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e0fc      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2240      	movs	r2, #64	; 0x40
 8001204:	2101      	movs	r1, #1
 8001206:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001208:	f7ff fcde 	bl	8000bc8 <HAL_GetTick>
 800120c:	0003      	movs	r3, r0
 800120e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	0219      	lsls	r1, r3, #8
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2319      	movs	r3, #25
 800121c:	2201      	movs	r2, #1
 800121e:	f000 f979 	bl	8001514 <I2C_WaitOnFlagUntilTimeout>
 8001222:	1e03      	subs	r3, r0, #0
 8001224:	d001      	beq.n	800122a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e0e7      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2241      	movs	r2, #65	; 0x41
 800122e:	2122      	movs	r1, #34	; 0x22
 8001230:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2242      	movs	r2, #66	; 0x42
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	2200      	movs	r2, #0
 800123e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	222c      	movs	r2, #44	; 0x2c
 800124a:	18ba      	adds	r2, r7, r2
 800124c:	8812      	ldrh	r2, [r2, #0]
 800124e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001256:	1dbb      	adds	r3, r7, #6
 8001258:	881c      	ldrh	r4, [r3, #0]
 800125a:	2308      	movs	r3, #8
 800125c:	18fb      	adds	r3, r7, r3
 800125e:	881a      	ldrh	r2, [r3, #0]
 8001260:	230a      	movs	r3, #10
 8001262:	18fb      	adds	r3, r7, r3
 8001264:	8819      	ldrh	r1, [r3, #0]
 8001266:	68f8      	ldr	r0, [r7, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	9301      	str	r3, [sp, #4]
 800126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800126e:	9300      	str	r3, [sp, #0]
 8001270:	0023      	movs	r3, r4
 8001272:	f000 f8cb 	bl	800140c <I2C_RequestMemoryRead>
 8001276:	1e03      	subs	r3, r0, #0
 8001278:	d005      	beq.n	8001286 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2240      	movs	r2, #64	; 0x40
 800127e:	2100      	movs	r1, #0
 8001280:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e0b9      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800128a:	b29b      	uxth	r3, r3
 800128c:	2bff      	cmp	r3, #255	; 0xff
 800128e:	d911      	bls.n	80012b4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	22ff      	movs	r2, #255	; 0xff
 8001294:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800129a:	b2da      	uxtb	r2, r3
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	045c      	lsls	r4, r3, #17
 80012a0:	230a      	movs	r3, #10
 80012a2:	18fb      	adds	r3, r7, r3
 80012a4:	8819      	ldrh	r1, [r3, #0]
 80012a6:	68f8      	ldr	r0, [r7, #12]
 80012a8:	4b56      	ldr	r3, [pc, #344]	; (8001404 <HAL_I2C_Mem_Read+0x260>)
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	0023      	movs	r3, r4
 80012ae:	f000 fa65 	bl	800177c <I2C_TransferConfig>
 80012b2:	e012      	b.n	80012da <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	049c      	lsls	r4, r3, #18
 80012c8:	230a      	movs	r3, #10
 80012ca:	18fb      	adds	r3, r7, r3
 80012cc:	8819      	ldrh	r1, [r3, #0]
 80012ce:	68f8      	ldr	r0, [r7, #12]
 80012d0:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <HAL_I2C_Mem_Read+0x260>)
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	0023      	movs	r3, r4
 80012d6:	f000 fa51 	bl	800177c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80012da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80012dc:	68f8      	ldr	r0, [r7, #12]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	0013      	movs	r3, r2
 80012e4:	2200      	movs	r2, #0
 80012e6:	2104      	movs	r1, #4
 80012e8:	f000 f914 	bl	8001514 <I2C_WaitOnFlagUntilTimeout>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e082      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001310:	3b01      	subs	r3, #1
 8001312:	b29a      	uxth	r2, r3
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800131c:	b29b      	uxth	r3, r3
 800131e:	3b01      	subs	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d03a      	beq.n	80013a6 <HAL_I2C_Mem_Read+0x202>
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001334:	2b00      	cmp	r3, #0
 8001336:	d136      	bne.n	80013a6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001338:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	0013      	movs	r3, r2
 8001342:	2200      	movs	r2, #0
 8001344:	2180      	movs	r1, #128	; 0x80
 8001346:	f000 f8e5 	bl	8001514 <I2C_WaitOnFlagUntilTimeout>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e053      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001356:	b29b      	uxth	r3, r3
 8001358:	2bff      	cmp	r3, #255	; 0xff
 800135a:	d911      	bls.n	8001380 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	22ff      	movs	r2, #255	; 0xff
 8001360:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001366:	b2da      	uxtb	r2, r3
 8001368:	2380      	movs	r3, #128	; 0x80
 800136a:	045c      	lsls	r4, r3, #17
 800136c:	230a      	movs	r3, #10
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	8819      	ldrh	r1, [r3, #0]
 8001372:	68f8      	ldr	r0, [r7, #12]
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	0023      	movs	r3, r4
 800137a:	f000 f9ff 	bl	800177c <I2C_TransferConfig>
 800137e:	e012      	b.n	80013a6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001384:	b29a      	uxth	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800138e:	b2da      	uxtb	r2, r3
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	049c      	lsls	r4, r3, #18
 8001394:	230a      	movs	r3, #10
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	8819      	ldrh	r1, [r3, #0]
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	2300      	movs	r3, #0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	0023      	movs	r3, r4
 80013a2:	f000 f9eb 	bl	800177c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013aa:	b29b      	uxth	r3, r3
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d194      	bne.n	80012da <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	0018      	movs	r0, r3
 80013b8:	f000 f92a 	bl	8001610 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013bc:	1e03      	subs	r3, r0, #0
 80013be:	d001      	beq.n	80013c4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e01a      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2220      	movs	r2, #32
 80013ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	490c      	ldr	r1, [pc, #48]	; (8001408 <HAL_I2C_Mem_Read+0x264>)
 80013d8:	400a      	ands	r2, r1
 80013da:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2241      	movs	r2, #65	; 0x41
 80013e0:	2120      	movs	r1, #32
 80013e2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2242      	movs	r2, #66	; 0x42
 80013e8:	2100      	movs	r1, #0
 80013ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2240      	movs	r2, #64	; 0x40
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e000      	b.n	80013fa <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80013f8:	2302      	movs	r3, #2
  }
}
 80013fa:	0018      	movs	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b007      	add	sp, #28
 8001400:	bd90      	pop	{r4, r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	80002400 	.word	0x80002400
 8001408:	fe00e800 	.word	0xfe00e800

0800140c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800140c:	b5b0      	push	{r4, r5, r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af02      	add	r7, sp, #8
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	000c      	movs	r4, r1
 8001416:	0010      	movs	r0, r2
 8001418:	0019      	movs	r1, r3
 800141a:	250a      	movs	r5, #10
 800141c:	197b      	adds	r3, r7, r5
 800141e:	1c22      	adds	r2, r4, #0
 8001420:	801a      	strh	r2, [r3, #0]
 8001422:	2308      	movs	r3, #8
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	1c02      	adds	r2, r0, #0
 8001428:	801a      	strh	r2, [r3, #0]
 800142a:	1dbb      	adds	r3, r7, #6
 800142c:	1c0a      	adds	r2, r1, #0
 800142e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001430:	1dbb      	adds	r3, r7, #6
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	197b      	adds	r3, r7, r5
 8001438:	8819      	ldrh	r1, [r3, #0]
 800143a:	68f8      	ldr	r0, [r7, #12]
 800143c:	4b23      	ldr	r3, [pc, #140]	; (80014cc <I2C_RequestMemoryRead+0xc0>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	f000 f99b 	bl	800177c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001448:	6a39      	ldr	r1, [r7, #32]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f8a0 	bl	8001592 <I2C_WaitOnTXISFlagUntilTimeout>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e033      	b.n	80014c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800145a:	1dbb      	adds	r3, r7, #6
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d107      	bne.n	8001472 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001462:	2308      	movs	r3, #8
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	881b      	ldrh	r3, [r3, #0]
 8001468:	b2da      	uxtb	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	629a      	str	r2, [r3, #40]	; 0x28
 8001470:	e019      	b.n	80014a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001472:	2308      	movs	r3, #8
 8001474:	18fb      	adds	r3, r7, r3
 8001476:	881b      	ldrh	r3, [r3, #0]
 8001478:	0a1b      	lsrs	r3, r3, #8
 800147a:	b29b      	uxth	r3, r3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001484:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001486:	6a39      	ldr	r1, [r7, #32]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	0018      	movs	r0, r3
 800148c:	f000 f881 	bl	8001592 <I2C_WaitOnTXISFlagUntilTimeout>
 8001490:	1e03      	subs	r3, r0, #0
 8001492:	d001      	beq.n	8001498 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e014      	b.n	80014c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001498:	2308      	movs	r3, #8
 800149a:	18fb      	adds	r3, r7, r3
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80014a6:	6a3a      	ldr	r2, [r7, #32]
 80014a8:	68f8      	ldr	r0, [r7, #12]
 80014aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	0013      	movs	r3, r2
 80014b0:	2200      	movs	r2, #0
 80014b2:	2140      	movs	r1, #64	; 0x40
 80014b4:	f000 f82e 	bl	8001514 <I2C_WaitOnFlagUntilTimeout>
 80014b8:	1e03      	subs	r3, r0, #0
 80014ba:	d001      	beq.n	80014c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	0018      	movs	r0, r3
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b004      	add	sp, #16
 80014c8:	bdb0      	pop	{r4, r5, r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	80002000 	.word	0x80002000

080014d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	2202      	movs	r2, #2
 80014e0:	4013      	ands	r3, r2
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d103      	bne.n	80014ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	2200      	movs	r2, #0
 80014ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2201      	movs	r2, #1
 80014f6:	4013      	ands	r3, r2
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d007      	beq.n	800150c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	699a      	ldr	r2, [r3, #24]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2101      	movs	r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	619a      	str	r2, [r3, #24]
  }
}
 800150c:	46c0      	nop			; (mov r8, r8)
 800150e:	46bd      	mov	sp, r7
 8001510:	b002      	add	sp, #8
 8001512:	bd80      	pop	{r7, pc}

08001514 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	1dfb      	adds	r3, r7, #7
 8001522:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001524:	e021      	b.n	800156a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	d01e      	beq.n	800156a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800152c:	f7ff fb4c 	bl	8000bc8 <HAL_GetTick>
 8001530:	0002      	movs	r2, r0
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d302      	bcc.n	8001542 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d113      	bne.n	800156a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	2220      	movs	r2, #32
 8001548:	431a      	orrs	r2, r3
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	2241      	movs	r2, #65	; 0x41
 8001552:	2120      	movs	r1, #32
 8001554:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2242      	movs	r2, #66	; 0x42
 800155a:	2100      	movs	r1, #0
 800155c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	2240      	movs	r2, #64	; 0x40
 8001562:	2100      	movs	r1, #0
 8001564:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	4013      	ands	r3, r2
 8001574:	68ba      	ldr	r2, [r7, #8]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	425a      	negs	r2, r3
 800157a:	4153      	adcs	r3, r2
 800157c:	b2db      	uxtb	r3, r3
 800157e:	001a      	movs	r2, r3
 8001580:	1dfb      	adds	r3, r7, #7
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d0ce      	beq.n	8001526 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	0018      	movs	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	b004      	add	sp, #16
 8001590:	bd80      	pop	{r7, pc}

08001592 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b084      	sub	sp, #16
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800159e:	e02b      	b.n	80015f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	0018      	movs	r0, r3
 80015a8:	f000 f86e 	bl	8001688 <I2C_IsAcknowledgeFailed>
 80015ac:	1e03      	subs	r3, r0, #0
 80015ae:	d001      	beq.n	80015b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e029      	b.n	8001608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	3301      	adds	r3, #1
 80015b8:	d01e      	beq.n	80015f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015ba:	f7ff fb05 	bl	8000bc8 <HAL_GetTick>
 80015be:	0002      	movs	r2, r0
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d302      	bcc.n	80015d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80015ca:	68bb      	ldr	r3, [r7, #8]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d113      	bne.n	80015f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d4:	2220      	movs	r2, #32
 80015d6:	431a      	orrs	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2241      	movs	r2, #65	; 0x41
 80015e0:	2120      	movs	r1, #32
 80015e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2242      	movs	r2, #66	; 0x42
 80015e8:	2100      	movs	r1, #0
 80015ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2240      	movs	r2, #64	; 0x40
 80015f0:	2100      	movs	r1, #0
 80015f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e007      	b.n	8001608 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2202      	movs	r2, #2
 8001600:	4013      	ands	r3, r2
 8001602:	2b02      	cmp	r3, #2
 8001604:	d1cc      	bne.n	80015a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	0018      	movs	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}

08001610 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800161c:	e028      	b.n	8001670 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	0018      	movs	r0, r3
 8001626:	f000 f82f 	bl	8001688 <I2C_IsAcknowledgeFailed>
 800162a:	1e03      	subs	r3, r0, #0
 800162c:	d001      	beq.n	8001632 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e026      	b.n	8001680 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001632:	f7ff fac9 	bl	8000bc8 <HAL_GetTick>
 8001636:	0002      	movs	r2, r0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	429a      	cmp	r2, r3
 8001640:	d302      	bcc.n	8001648 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d113      	bne.n	8001670 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164c:	2220      	movs	r2, #32
 800164e:	431a      	orrs	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2241      	movs	r2, #65	; 0x41
 8001658:	2120      	movs	r1, #32
 800165a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	2242      	movs	r2, #66	; 0x42
 8001660:	2100      	movs	r1, #0
 8001662:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	2100      	movs	r1, #0
 800166a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e007      	b.n	8001680 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2220      	movs	r2, #32
 8001678:	4013      	ands	r3, r2
 800167a:	2b20      	cmp	r3, #32
 800167c:	d1cf      	bne.n	800161e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800167e:	2300      	movs	r3, #0
}
 8001680:	0018      	movs	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	b004      	add	sp, #16
 8001686:	bd80      	pop	{r7, pc}

08001688 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2210      	movs	r2, #16
 800169c:	4013      	ands	r3, r2
 800169e:	2b10      	cmp	r3, #16
 80016a0:	d164      	bne.n	800176c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	049b      	lsls	r3, r3, #18
 80016ac:	401a      	ands	r2, r3
 80016ae:	2380      	movs	r3, #128	; 0x80
 80016b0:	049b      	lsls	r3, r3, #18
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d02b      	beq.n	800170e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	01c9      	lsls	r1, r1, #7
 80016c4:	430a      	orrs	r2, r1
 80016c6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c8:	e021      	b.n	800170e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	d01e      	beq.n	800170e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016d0:	f7ff fa7a 	bl	8000bc8 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d302      	bcc.n	80016e6 <I2C_IsAcknowledgeFailed+0x5e>
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d113      	bne.n	800170e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	2220      	movs	r2, #32
 80016ec:	431a      	orrs	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2241      	movs	r2, #65	; 0x41
 80016f6:	2120      	movs	r1, #32
 80016f8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	2242      	movs	r2, #66	; 0x42
 80016fe:	2100      	movs	r1, #0
 8001700:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	2240      	movs	r2, #64	; 0x40
 8001706:	2100      	movs	r1, #0
 8001708:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e02f      	b.n	800176e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2220      	movs	r2, #32
 8001716:	4013      	ands	r3, r2
 8001718:	2b20      	cmp	r3, #32
 800171a:	d1d6      	bne.n	80016ca <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2210      	movs	r2, #16
 8001722:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	2220      	movs	r2, #32
 800172a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	0018      	movs	r0, r3
 8001730:	f7ff fece 	bl	80014d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	490e      	ldr	r1, [pc, #56]	; (8001778 <I2C_IsAcknowledgeFailed+0xf0>)
 8001740:	400a      	ands	r2, r1
 8001742:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001748:	2204      	movs	r2, #4
 800174a:	431a      	orrs	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2241      	movs	r2, #65	; 0x41
 8001754:	2120      	movs	r1, #32
 8001756:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2242      	movs	r2, #66	; 0x42
 800175c:	2100      	movs	r1, #0
 800175e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2240      	movs	r2, #64	; 0x40
 8001764:	2100      	movs	r1, #0
 8001766:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	0018      	movs	r0, r3
 8001770:	46bd      	mov	sp, r7
 8001772:	b004      	add	sp, #16
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	fe00e800 	.word	0xfe00e800

0800177c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	0008      	movs	r0, r1
 8001786:	0011      	movs	r1, r2
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	240a      	movs	r4, #10
 800178c:	193b      	adds	r3, r7, r4
 800178e:	1c02      	adds	r2, r0, #0
 8001790:	801a      	strh	r2, [r3, #0]
 8001792:	2009      	movs	r0, #9
 8001794:	183b      	adds	r3, r7, r0
 8001796:	1c0a      	adds	r2, r1, #0
 8001798:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	0d51      	lsrs	r1, r2, #21
 80017a4:	2280      	movs	r2, #128	; 0x80
 80017a6:	00d2      	lsls	r2, r2, #3
 80017a8:	400a      	ands	r2, r1
 80017aa:	490e      	ldr	r1, [pc, #56]	; (80017e4 <I2C_TransferConfig+0x68>)
 80017ac:	430a      	orrs	r2, r1
 80017ae:	43d2      	mvns	r2, r2
 80017b0:	401a      	ands	r2, r3
 80017b2:	0011      	movs	r1, r2
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	881b      	ldrh	r3, [r3, #0]
 80017b8:	059b      	lsls	r3, r3, #22
 80017ba:	0d9a      	lsrs	r2, r3, #22
 80017bc:	183b      	adds	r3, r7, r0
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	0418      	lsls	r0, r3, #16
 80017c2:	23ff      	movs	r3, #255	; 0xff
 80017c4:	041b      	lsls	r3, r3, #16
 80017c6:	4003      	ands	r3, r0
 80017c8:	431a      	orrs	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	431a      	orrs	r2, r3
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	431a      	orrs	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80017da:	46c0      	nop			; (mov r8, r8)
 80017dc:	46bd      	mov	sp, r7
 80017de:	b005      	add	sp, #20
 80017e0:	bd90      	pop	{r4, r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	03ff63ff 	.word	0x03ff63ff

080017e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2241      	movs	r2, #65	; 0x41
 80017f6:	5c9b      	ldrb	r3, [r3, r2]
 80017f8:	b2db      	uxtb	r3, r3
 80017fa:	2b20      	cmp	r3, #32
 80017fc:	d138      	bne.n	8001870 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2240      	movs	r2, #64	; 0x40
 8001802:	5c9b      	ldrb	r3, [r3, r2]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001808:	2302      	movs	r3, #2
 800180a:	e032      	b.n	8001872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	2101      	movs	r1, #1
 8001812:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2241      	movs	r2, #65	; 0x41
 8001818:	2124      	movs	r1, #36	; 0x24
 800181a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2101      	movs	r1, #1
 8001828:	438a      	bics	r2, r1
 800182a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4911      	ldr	r1, [pc, #68]	; (800187c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001838:	400a      	ands	r2, r1
 800183a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6819      	ldr	r1, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2101      	movs	r1, #1
 8001858:	430a      	orrs	r2, r1
 800185a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2241      	movs	r2, #65	; 0x41
 8001860:	2120      	movs	r1, #32
 8001862:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2240      	movs	r2, #64	; 0x40
 8001868:	2100      	movs	r1, #0
 800186a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001870:	2302      	movs	r3, #2
  }
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b002      	add	sp, #8
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			; (mov r8, r8)
 800187c:	ffffefff 	.word	0xffffefff

08001880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2241      	movs	r2, #65	; 0x41
 800188e:	5c9b      	ldrb	r3, [r3, r2]
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b20      	cmp	r3, #32
 8001894:	d139      	bne.n	800190a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2240      	movs	r2, #64	; 0x40
 800189a:	5c9b      	ldrb	r3, [r3, r2]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d101      	bne.n	80018a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018a0:	2302      	movs	r3, #2
 80018a2:	e033      	b.n	800190c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	2101      	movs	r1, #1
 80018aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2241      	movs	r2, #65	; 0x41
 80018b0:	2124      	movs	r1, #36	; 0x24
 80018b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2101      	movs	r1, #1
 80018c0:	438a      	bics	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	4a11      	ldr	r2, [pc, #68]	; (8001914 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	68fa      	ldr	r2, [r7, #12]
 80018da:	4313      	orrs	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	430a      	orrs	r2, r1
 80018f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2241      	movs	r2, #65	; 0x41
 80018fa:	2120      	movs	r1, #32
 80018fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2240      	movs	r2, #64	; 0x40
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800190a:	2302      	movs	r3, #2
  }
}
 800190c:	0018      	movs	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	b004      	add	sp, #16
 8001912:	bd80      	pop	{r7, pc}
 8001914:	fffff0ff 	.word	0xfffff0ff

08001918 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001918:	b5b0      	push	{r4, r5, r7, lr}
 800191a:	b08a      	sub	sp, #40	; 0x28
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	f000 fbaf 	bl	800208a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800192c:	4bcf      	ldr	r3, [pc, #828]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	220c      	movs	r2, #12
 8001932:	4013      	ands	r3, r2
 8001934:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001936:	4bcd      	ldr	r3, [pc, #820]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	4013      	ands	r3, r2
 8001940:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	4013      	ands	r3, r2
 800194a:	d100      	bne.n	800194e <HAL_RCC_OscConfig+0x36>
 800194c:	e07e      	b.n	8001a4c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	2b08      	cmp	r3, #8
 8001952:	d007      	beq.n	8001964 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001954:	6a3b      	ldr	r3, [r7, #32]
 8001956:	2b0c      	cmp	r3, #12
 8001958:	d112      	bne.n	8001980 <HAL_RCC_OscConfig+0x68>
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	2380      	movs	r3, #128	; 0x80
 800195e:	025b      	lsls	r3, r3, #9
 8001960:	429a      	cmp	r2, r3
 8001962:	d10d      	bne.n	8001980 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001964:	4bc1      	ldr	r3, [pc, #772]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	029b      	lsls	r3, r3, #10
 800196c:	4013      	ands	r3, r2
 800196e:	d100      	bne.n	8001972 <HAL_RCC_OscConfig+0x5a>
 8001970:	e06b      	b.n	8001a4a <HAL_RCC_OscConfig+0x132>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d167      	bne.n	8001a4a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	f000 fb85 	bl	800208a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	025b      	lsls	r3, r3, #9
 8001988:	429a      	cmp	r2, r3
 800198a:	d107      	bne.n	800199c <HAL_RCC_OscConfig+0x84>
 800198c:	4bb7      	ldr	r3, [pc, #732]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4bb6      	ldr	r3, [pc, #728]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001992:	2180      	movs	r1, #128	; 0x80
 8001994:	0249      	lsls	r1, r1, #9
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	e027      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	23a0      	movs	r3, #160	; 0xa0
 80019a2:	02db      	lsls	r3, r3, #11
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d10e      	bne.n	80019c6 <HAL_RCC_OscConfig+0xae>
 80019a8:	4bb0      	ldr	r3, [pc, #704]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	4baf      	ldr	r3, [pc, #700]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	02c9      	lsls	r1, r1, #11
 80019b2:	430a      	orrs	r2, r1
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	4bad      	ldr	r3, [pc, #692]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	4bac      	ldr	r3, [pc, #688]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019bc:	2180      	movs	r1, #128	; 0x80
 80019be:	0249      	lsls	r1, r1, #9
 80019c0:	430a      	orrs	r2, r1
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	e012      	b.n	80019ec <HAL_RCC_OscConfig+0xd4>
 80019c6:	4ba9      	ldr	r3, [pc, #676]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	4ba8      	ldr	r3, [pc, #672]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019cc:	49a8      	ldr	r1, [pc, #672]	; (8001c70 <HAL_RCC_OscConfig+0x358>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	4ba6      	ldr	r3, [pc, #664]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	4013      	ands	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4ba2      	ldr	r3, [pc, #648]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	4ba1      	ldr	r3, [pc, #644]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 80019e6:	49a3      	ldr	r1, [pc, #652]	; (8001c74 <HAL_RCC_OscConfig+0x35c>)
 80019e8:	400a      	ands	r2, r1
 80019ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d015      	beq.n	8001a20 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f4:	f7ff f8e8 	bl	8000bc8 <HAL_GetTick>
 80019f8:	0003      	movs	r3, r0
 80019fa:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019fc:	e009      	b.n	8001a12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019fe:	f7ff f8e3 	bl	8000bc8 <HAL_GetTick>
 8001a02:	0002      	movs	r2, r0
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	2b64      	cmp	r3, #100	; 0x64
 8001a0a:	d902      	bls.n	8001a12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a0c:	2303      	movs	r3, #3
 8001a0e:	f000 fb3c 	bl	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a12:	4b96      	ldr	r3, [pc, #600]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	2380      	movs	r3, #128	; 0x80
 8001a18:	029b      	lsls	r3, r3, #10
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d0ef      	beq.n	80019fe <HAL_RCC_OscConfig+0xe6>
 8001a1e:	e015      	b.n	8001a4c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f8d2 	bl	8000bc8 <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a2a:	f7ff f8cd 	bl	8000bc8 <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b64      	cmp	r3, #100	; 0x64
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e326      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a3c:	4b8b      	ldr	r3, [pc, #556]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2380      	movs	r3, #128	; 0x80
 8001a42:	029b      	lsls	r3, r3, #10
 8001a44:	4013      	ands	r3, r2
 8001a46:	d1f0      	bne.n	8001a2a <HAL_RCC_OscConfig+0x112>
 8001a48:	e000      	b.n	8001a4c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2202      	movs	r2, #2
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_RCC_OscConfig+0x140>
 8001a56:	e08b      	b.n	8001b70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a5e:	6a3b      	ldr	r3, [r7, #32]
 8001a60:	2b04      	cmp	r3, #4
 8001a62:	d005      	beq.n	8001a70 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a64:	6a3b      	ldr	r3, [r7, #32]
 8001a66:	2b0c      	cmp	r3, #12
 8001a68:	d13e      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1d0>
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d13b      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a70:	4b7e      	ldr	r3, [pc, #504]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	d004      	beq.n	8001a84 <HAL_RCC_OscConfig+0x16c>
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e302      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a84:	4b79      	ldr	r3, [pc, #484]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4a7b      	ldr	r2, [pc, #492]	; (8001c78 <HAL_RCC_OscConfig+0x360>)
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	0019      	movs	r1, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	021a      	lsls	r2, r3, #8
 8001a94:	4b75      	ldr	r3, [pc, #468]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a9a:	4b74      	ldr	r3, [pc, #464]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2209      	movs	r2, #9
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	4b71      	ldr	r3, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001aa6:	697a      	ldr	r2, [r7, #20]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aac:	f000 fc40 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8001ab0:	0001      	movs	r1, r0
 8001ab2:	4b6e      	ldr	r3, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	091b      	lsrs	r3, r3, #4
 8001ab8:	220f      	movs	r2, #15
 8001aba:	4013      	ands	r3, r2
 8001abc:	4a6f      	ldr	r2, [pc, #444]	; (8001c7c <HAL_RCC_OscConfig+0x364>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	40da      	lsrs	r2, r3
 8001ac4:	4b6e      	ldr	r3, [pc, #440]	; (8001c80 <HAL_RCC_OscConfig+0x368>)
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ac8:	4b6e      	ldr	r3, [pc, #440]	; (8001c84 <HAL_RCC_OscConfig+0x36c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2513      	movs	r5, #19
 8001ace:	197c      	adds	r4, r7, r5
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff f833 	bl	8000b3c <HAL_InitTick>
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ada:	197b      	adds	r3, r7, r5
 8001adc:	781b      	ldrb	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d046      	beq.n	8001b70 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001ae2:	197b      	adds	r3, r7, r5
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	e2d0      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d027      	beq.n	8001b3e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aee:	4b5f      	ldr	r3, [pc, #380]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2209      	movs	r2, #9
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	4b5c      	ldr	r3, [pc, #368]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	430a      	orrs	r2, r1
 8001afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b00:	f7ff f862 	bl	8000bc8 <HAL_GetTick>
 8001b04:	0003      	movs	r3, r0
 8001b06:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0a:	f7ff f85d 	bl	8000bc8 <HAL_GetTick>
 8001b0e:	0002      	movs	r2, r0
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d901      	bls.n	8001b1c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	e2b6      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b1c:	4b53      	ldr	r3, [pc, #332]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2204      	movs	r2, #4
 8001b22:	4013      	ands	r3, r2
 8001b24:	d0f1      	beq.n	8001b0a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b51      	ldr	r3, [pc, #324]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a53      	ldr	r2, [pc, #332]	; (8001c78 <HAL_RCC_OscConfig+0x360>)
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	0019      	movs	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	021a      	lsls	r2, r3, #8
 8001b36:	4b4d      	ldr	r3, [pc, #308]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	e018      	b.n	8001b70 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	4b4a      	ldr	r3, [pc, #296]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b44:	2101      	movs	r1, #1
 8001b46:	438a      	bics	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f83d 	bl	8000bc8 <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b54:	f7ff f838 	bl	8000bc8 <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e291      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b66:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d1f1      	bne.n	8001b54 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2210      	movs	r2, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d100      	bne.n	8001b7c <HAL_RCC_OscConfig+0x264>
 8001b7a:	e0a1      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d140      	bne.n	8001c04 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	2380      	movs	r3, #128	; 0x80
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d005      	beq.n	8001b9a <HAL_RCC_OscConfig+0x282>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e277      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b9a:	4b34      	ldr	r3, [pc, #208]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4a3a      	ldr	r2, [pc, #232]	; (8001c88 <HAL_RCC_OscConfig+0x370>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	0019      	movs	r1, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ba8:	4b30      	ldr	r3, [pc, #192]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	0a19      	lsrs	r1, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	061a      	lsls	r2, r3, #24
 8001bbc:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	0b5b      	lsrs	r3, r3, #13
 8001bc8:	3301      	adds	r3, #1
 8001bca:	2280      	movs	r2, #128	; 0x80
 8001bcc:	0212      	lsls	r2, r2, #8
 8001bce:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001bd0:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	210f      	movs	r1, #15
 8001bd8:	400b      	ands	r3, r1
 8001bda:	4928      	ldr	r1, [pc, #160]	; (8001c7c <HAL_RCC_OscConfig+0x364>)
 8001bdc:	5ccb      	ldrb	r3, [r1, r3]
 8001bde:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001be0:	4b27      	ldr	r3, [pc, #156]	; (8001c80 <HAL_RCC_OscConfig+0x368>)
 8001be2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <HAL_RCC_OscConfig+0x36c>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2513      	movs	r5, #19
 8001bea:	197c      	adds	r4, r7, r5
 8001bec:	0018      	movs	r0, r3
 8001bee:	f7fe ffa5 	bl	8000b3c <HAL_InitTick>
 8001bf2:	0003      	movs	r3, r0
 8001bf4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bf6:	197b      	adds	r3, r7, r5
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d060      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001bfe:	197b      	adds	r3, r7, r5
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	e242      	b.n	800208a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	69db      	ldr	r3, [r3, #28]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d03f      	beq.n	8001c8c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c12:	2180      	movs	r1, #128	; 0x80
 8001c14:	0049      	lsls	r1, r1, #1
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7fe ffd5 	bl	8000bc8 <HAL_GetTick>
 8001c1e:	0003      	movs	r3, r0
 8001c20:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c24:	f7fe ffd0 	bl	8000bc8 <HAL_GetTick>
 8001c28:	0002      	movs	r2, r0
 8001c2a:	69bb      	ldr	r3, [r7, #24]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e229      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	2380      	movs	r3, #128	; 0x80
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4a10      	ldr	r2, [pc, #64]	; (8001c88 <HAL_RCC_OscConfig+0x370>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c56:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	021b      	lsls	r3, r3, #8
 8001c5c:	0a19      	lsrs	r1, r3, #8
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1b      	ldr	r3, [r3, #32]
 8001c62:	061a      	lsls	r2, r3, #24
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0x354>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	e029      	b.n	8001cc0 <HAL_RCC_OscConfig+0x3a8>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	fffeffff 	.word	0xfffeffff
 8001c74:	fffbffff 	.word	0xfffbffff
 8001c78:	ffffe0ff 	.word	0xffffe0ff
 8001c7c:	08004280 	.word	0x08004280
 8001c80:	20000000 	.word	0x20000000
 8001c84:	20000004 	.word	0x20000004
 8001c88:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c8c:	4bbd      	ldr	r3, [pc, #756]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4bbc      	ldr	r3, [pc, #752]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001c92:	49bd      	ldr	r1, [pc, #756]	; (8001f88 <HAL_RCC_OscConfig+0x670>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7fe ff96 	bl	8000bc8 <HAL_GetTick>
 8001c9c:	0003      	movs	r3, r0
 8001c9e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ca2:	f7fe ff91 	bl	8000bc8 <HAL_GetTick>
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e1ea      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001cb4:	4bb3      	ldr	r3, [pc, #716]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	2380      	movs	r3, #128	; 0x80
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d036      	beq.n	8001d38 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d019      	beq.n	8001d06 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd2:	4bac      	ldr	r3, [pc, #688]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cd6:	4bab      	ldr	r3, [pc, #684]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001cd8:	2101      	movs	r1, #1
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cde:	f7fe ff73 	bl	8000bc8 <HAL_GetTick>
 8001ce2:	0003      	movs	r3, r0
 8001ce4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce8:	f7fe ff6e 	bl	8000bc8 <HAL_GetTick>
 8001cec:	0002      	movs	r2, r0
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e1c7      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cfa:	4ba2      	ldr	r3, [pc, #648]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	2202      	movs	r2, #2
 8001d00:	4013      	ands	r3, r2
 8001d02:	d0f1      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x3d0>
 8001d04:	e018      	b.n	8001d38 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d06:	4b9f      	ldr	r3, [pc, #636]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001d08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d0a:	4b9e      	ldr	r3, [pc, #632]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	438a      	bics	r2, r1
 8001d10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d12:	f7fe ff59 	bl	8000bc8 <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1c:	f7fe ff54 	bl	8000bc8 <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1ad      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d2e:	4b95      	ldr	r3, [pc, #596]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d32:	2202      	movs	r2, #2
 8001d34:	4013      	ands	r3, r2
 8001d36:	d1f1      	bne.n	8001d1c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d100      	bne.n	8001d44 <HAL_RCC_OscConfig+0x42c>
 8001d42:	e0ae      	b.n	8001ea2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d44:	2027      	movs	r0, #39	; 0x27
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001d4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	055b      	lsls	r3, r3, #21
 8001d54:	4013      	ands	r3, r2
 8001d56:	d109      	bne.n	8001d6c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d58:	4b8a      	ldr	r3, [pc, #552]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001d5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d5c:	4b89      	ldr	r3, [pc, #548]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001d5e:	2180      	movs	r1, #128	; 0x80
 8001d60:	0549      	lsls	r1, r1, #21
 8001d62:	430a      	orrs	r2, r1
 8001d64:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d66:	183b      	adds	r3, r7, r0
 8001d68:	2201      	movs	r2, #1
 8001d6a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6c:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <HAL_RCC_OscConfig+0x674>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4013      	ands	r3, r2
 8001d76:	d11a      	bne.n	8001dae <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d78:	4b84      	ldr	r3, [pc, #528]	; (8001f8c <HAL_RCC_OscConfig+0x674>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <HAL_RCC_OscConfig+0x674>)
 8001d7e:	2180      	movs	r1, #128	; 0x80
 8001d80:	0049      	lsls	r1, r1, #1
 8001d82:	430a      	orrs	r2, r1
 8001d84:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d86:	f7fe ff1f 	bl	8000bc8 <HAL_GetTick>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d90:	f7fe ff1a 	bl	8000bc8 <HAL_GetTick>
 8001d94:	0002      	movs	r2, r0
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e173      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	4b7a      	ldr	r3, [pc, #488]	; (8001f8c <HAL_RCC_OscConfig+0x674>)
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	2380      	movs	r3, #128	; 0x80
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d107      	bne.n	8001dca <HAL_RCC_OscConfig+0x4b2>
 8001dba:	4b72      	ldr	r3, [pc, #456]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dbe:	4b71      	ldr	r3, [pc, #452]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001dc0:	2180      	movs	r1, #128	; 0x80
 8001dc2:	0049      	lsls	r1, r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc8:	e031      	b.n	8001e2e <HAL_RCC_OscConfig+0x516>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0x4d4>
 8001dd2:	4b6c      	ldr	r3, [pc, #432]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd6:	4b6b      	ldr	r3, [pc, #428]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001dd8:	496b      	ldr	r1, [pc, #428]	; (8001f88 <HAL_RCC_OscConfig+0x670>)
 8001dda:	400a      	ands	r2, r1
 8001ddc:	651a      	str	r2, [r3, #80]	; 0x50
 8001dde:	4b69      	ldr	r3, [pc, #420]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001de0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de2:	4b68      	ldr	r3, [pc, #416]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001de4:	496a      	ldr	r1, [pc, #424]	; (8001f90 <HAL_RCC_OscConfig+0x678>)
 8001de6:	400a      	ands	r2, r1
 8001de8:	651a      	str	r2, [r3, #80]	; 0x50
 8001dea:	e020      	b.n	8001e2e <HAL_RCC_OscConfig+0x516>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	23a0      	movs	r3, #160	; 0xa0
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d10e      	bne.n	8001e16 <HAL_RCC_OscConfig+0x4fe>
 8001df8:	4b62      	ldr	r3, [pc, #392]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001dfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dfc:	4b61      	ldr	r3, [pc, #388]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001dfe:	2180      	movs	r1, #128	; 0x80
 8001e00:	00c9      	lsls	r1, r1, #3
 8001e02:	430a      	orrs	r2, r1
 8001e04:	651a      	str	r2, [r3, #80]	; 0x50
 8001e06:	4b5f      	ldr	r3, [pc, #380]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e0a:	4b5e      	ldr	r3, [pc, #376]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0049      	lsls	r1, r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	651a      	str	r2, [r3, #80]	; 0x50
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x516>
 8001e16:	4b5b      	ldr	r3, [pc, #364]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e1a:	4b5a      	ldr	r3, [pc, #360]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e1c:	495a      	ldr	r1, [pc, #360]	; (8001f88 <HAL_RCC_OscConfig+0x670>)
 8001e1e:	400a      	ands	r2, r1
 8001e20:	651a      	str	r2, [r3, #80]	; 0x50
 8001e22:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e26:	4b57      	ldr	r3, [pc, #348]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e28:	4959      	ldr	r1, [pc, #356]	; (8001f90 <HAL_RCC_OscConfig+0x678>)
 8001e2a:	400a      	ands	r2, r1
 8001e2c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe fec7 	bl	8000bc8 <HAL_GetTick>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e3e:	e009      	b.n	8001e54 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e40:	f7fe fec2 	bl	8000bc8 <HAL_GetTick>
 8001e44:	0002      	movs	r2, r0
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	4a52      	ldr	r2, [pc, #328]	; (8001f94 <HAL_RCC_OscConfig+0x67c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e11a      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e54:	4b4b      	ldr	r3, [pc, #300]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d0ef      	beq.n	8001e40 <HAL_RCC_OscConfig+0x528>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe feb1 	bl	8000bc8 <HAL_GetTick>
 8001e66:	0003      	movs	r3, r0
 8001e68:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e6a:	e009      	b.n	8001e80 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e6c:	f7fe feac 	bl	8000bc8 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <HAL_RCC_OscConfig+0x67c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e104      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e80:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d1ef      	bne.n	8001e6c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e8c:	2327      	movs	r3, #39	; 0x27
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e96:	4b3b      	ldr	r3, [pc, #236]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e9a:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001e9c:	493e      	ldr	r1, [pc, #248]	; (8001f98 <HAL_RCC_OscConfig+0x680>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d049      	beq.n	8001f40 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d026      	beq.n	8001f02 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	4b32      	ldr	r3, [pc, #200]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ec4:	4b2f      	ldr	r3, [pc, #188]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
 8001ecc:	4b33      	ldr	r3, [pc, #204]	; (8001f9c <HAL_RCC_OscConfig+0x684>)
 8001ece:	6a1a      	ldr	r2, [r3, #32]
 8001ed0:	4b32      	ldr	r3, [pc, #200]	; (8001f9c <HAL_RCC_OscConfig+0x684>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0189      	lsls	r1, r1, #6
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7fe fe75 	bl	8000bc8 <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee4:	f7fe fe70 	bl	8000bc8 <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0c9      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ef6:	4b23      	ldr	r3, [pc, #140]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d0f1      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x5cc>
 8001f00:	e01e      	b.n	8001f40 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f02:	4b20      	ldr	r3, [pc, #128]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	438a      	bics	r2, r1
 8001f0c:	609a      	str	r2, [r3, #8]
 8001f0e:	4b23      	ldr	r3, [pc, #140]	; (8001f9c <HAL_RCC_OscConfig+0x684>)
 8001f10:	6a1a      	ldr	r2, [r3, #32]
 8001f12:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <HAL_RCC_OscConfig+0x684>)
 8001f14:	4922      	ldr	r1, [pc, #136]	; (8001fa0 <HAL_RCC_OscConfig+0x688>)
 8001f16:	400a      	ands	r2, r1
 8001f18:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1a:	f7fe fe55 	bl	8000bc8 <HAL_GetTick>
 8001f1e:	0003      	movs	r3, r0
 8001f20:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f24:	f7fe fe50 	bl	8000bc8 <HAL_GetTick>
 8001f28:	0002      	movs	r2, r0
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e0a9      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d1f1      	bne.n	8001f24 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d100      	bne.n	8001f4a <HAL_RCC_OscConfig+0x632>
 8001f48:	e09e      	b.n	8002088 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x63a>
 8001f50:	e077      	b.n	8002042 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d158      	bne.n	800200c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_OscConfig+0x66c>)
 8001f60:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <HAL_RCC_OscConfig+0x68c>)
 8001f62:	400a      	ands	r2, r1
 8001f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f66:	f7fe fe2f 	bl	8000bc8 <HAL_GetTick>
 8001f6a:	0003      	movs	r3, r0
 8001f6c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f6e:	e01b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe fe2a 	bl	8000bc8 <HAL_GetTick>
 8001f74:	0002      	movs	r2, r0
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d914      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e083      	b.n	800208a <HAL_RCC_OscConfig+0x772>
 8001f82:	46c0      	nop			; (mov r8, r8)
 8001f84:	40021000 	.word	0x40021000
 8001f88:	fffffeff 	.word	0xfffffeff
 8001f8c:	40007000 	.word	0x40007000
 8001f90:	fffffbff 	.word	0xfffffbff
 8001f94:	00001388 	.word	0x00001388
 8001f98:	efffffff 	.word	0xefffffff
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	ffffdfff 	.word	0xffffdfff
 8001fa4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fa8:	4b3a      	ldr	r3, [pc, #232]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	049b      	lsls	r3, r3, #18
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d1dd      	bne.n	8001f70 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb4:	4b37      	ldr	r3, [pc, #220]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	; (8002098 <HAL_RCC_OscConfig+0x780>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	4b31      	ldr	r3, [pc, #196]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fd0:	430a      	orrs	r2, r1
 8001fd2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4b2e      	ldr	r3, [pc, #184]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8001fda:	2180      	movs	r1, #128	; 0x80
 8001fdc:	0449      	lsls	r1, r1, #17
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe fdf1 	bl	8000bc8 <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fdec 	bl	8000bc8 <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e045      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001ffe:	4b25      	ldr	r3, [pc, #148]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	049b      	lsls	r3, r3, #18
 8002006:	4013      	ands	r3, r2
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x6d4>
 800200a:	e03d      	b.n	8002088 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b21      	ldr	r3, [pc, #132]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002012:	4922      	ldr	r1, [pc, #136]	; (800209c <HAL_RCC_OscConfig+0x784>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fdd6 	bl	8000bc8 <HAL_GetTick>
 800201c:	0003      	movs	r3, r0
 800201e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe fdd1 	bl	8000bc8 <HAL_GetTick>
 8002026:	0002      	movs	r2, r0
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e02a      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	049b      	lsls	r3, r3, #18
 800203c:	4013      	ands	r3, r2
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x70a>
 8002040:	e022      	b.n	8002088 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e01d      	b.n	800208a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_RCC_OscConfig+0x77c>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	2380      	movs	r3, #128	; 0x80
 8002058:	025b      	lsls	r3, r3, #9
 800205a:	401a      	ands	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002060:	429a      	cmp	r2, r3
 8002062:	d10f      	bne.n	8002084 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002064:	69fa      	ldr	r2, [r7, #28]
 8002066:	23f0      	movs	r3, #240	; 0xf0
 8002068:	039b      	lsls	r3, r3, #14
 800206a:	401a      	ands	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002070:	429a      	cmp	r2, r3
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002074:	69fa      	ldr	r2, [r7, #28]
 8002076:	23c0      	movs	r3, #192	; 0xc0
 8002078:	041b      	lsls	r3, r3, #16
 800207a:	401a      	ands	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	0018      	movs	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	b00a      	add	sp, #40	; 0x28
 8002090:	bdb0      	pop	{r4, r5, r7, pc}
 8002092:	46c0      	nop			; (mov r8, r8)
 8002094:	40021000 	.word	0x40021000
 8002098:	ff02ffff 	.word	0xff02ffff
 800209c:	feffffff 	.word	0xfeffffff

080020a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b5b0      	push	{r4, r5, r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e128      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b96      	ldr	r3, [pc, #600]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d91e      	bls.n	8002100 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b93      	ldr	r3, [pc, #588]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b90      	ldr	r3, [pc, #576]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020d4:	f7fe fd78 	bl	8000bc8 <HAL_GetTick>
 80020d8:	0003      	movs	r3, r0
 80020da:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	e009      	b.n	80020f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fd73 	bl	8000bc8 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a8a      	ldr	r2, [pc, #552]	; (8002314 <HAL_RCC_ClockConfig+0x274>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e109      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020f2:	4b87      	ldr	r3, [pc, #540]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2201      	movs	r2, #1
 80020f8:	4013      	ands	r3, r2
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d1ee      	bne.n	80020de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2202      	movs	r2, #2
 8002106:	4013      	ands	r3, r2
 8002108:	d009      	beq.n	800211e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800210a:	4b83      	ldr	r3, [pc, #524]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	22f0      	movs	r2, #240	; 0xf0
 8002110:	4393      	bics	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689a      	ldr	r2, [r3, #8]
 8002118:	4b7f      	ldr	r3, [pc, #508]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 800211a:	430a      	orrs	r2, r1
 800211c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_ClockConfig+0x8a>
 8002128:	e089      	b.n	800223e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002132:	4b79      	ldr	r3, [pc, #484]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	029b      	lsls	r3, r3, #10
 800213a:	4013      	ands	r3, r2
 800213c:	d120      	bne.n	8002180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0e1      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d107      	bne.n	800215a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800214a:	4b73      	ldr	r3, [pc, #460]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	2380      	movs	r3, #128	; 0x80
 8002150:	049b      	lsls	r3, r3, #18
 8002152:	4013      	ands	r3, r2
 8002154:	d114      	bne.n	8002180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e0d5      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d106      	bne.n	8002170 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002162:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2204      	movs	r2, #4
 8002168:	4013      	ands	r3, r2
 800216a:	d109      	bne.n	8002180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	e0ca      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002170:	4b69      	ldr	r3, [pc, #420]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4013      	ands	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0c2      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002180:	4b65      	ldr	r3, [pc, #404]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2203      	movs	r2, #3
 8002186:	4393      	bics	r3, r2
 8002188:	0019      	movs	r1, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002190:	430a      	orrs	r2, r1
 8002192:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002194:	f7fe fd18 	bl	8000bc8 <HAL_GetTick>
 8002198:	0003      	movs	r3, r0
 800219a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d111      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	e009      	b.n	80021ba <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a6:	f7fe fd0f 	bl	8000bc8 <HAL_GetTick>
 80021aa:	0002      	movs	r2, r0
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	4a58      	ldr	r2, [pc, #352]	; (8002314 <HAL_RCC_ClockConfig+0x274>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e0a5      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80021ba:	4b57      	ldr	r3, [pc, #348]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	220c      	movs	r2, #12
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d1ef      	bne.n	80021a6 <HAL_RCC_ClockConfig+0x106>
 80021c6:	e03a      	b.n	800223e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d111      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d0:	e009      	b.n	80021e6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d2:	f7fe fcf9 	bl	8000bc8 <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	4a4d      	ldr	r2, [pc, #308]	; (8002314 <HAL_RCC_ClockConfig+0x274>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e08f      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021e6:	4b4c      	ldr	r3, [pc, #304]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	220c      	movs	r2, #12
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	d1ef      	bne.n	80021d2 <HAL_RCC_ClockConfig+0x132>
 80021f2:	e024      	b.n	800223e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d11b      	bne.n	8002234 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fc:	e009      	b.n	8002212 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021fe:	f7fe fce3 	bl	8000bc8 <HAL_GetTick>
 8002202:	0002      	movs	r2, r0
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	4a42      	ldr	r2, [pc, #264]	; (8002314 <HAL_RCC_ClockConfig+0x274>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e079      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	220c      	movs	r2, #12
 8002218:	4013      	ands	r3, r2
 800221a:	2b04      	cmp	r3, #4
 800221c:	d1ef      	bne.n	80021fe <HAL_RCC_ClockConfig+0x15e>
 800221e:	e00e      	b.n	800223e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002220:	f7fe fcd2 	bl	8000bc8 <HAL_GetTick>
 8002224:	0002      	movs	r2, r0
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_RCC_ClockConfig+0x274>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e068      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002234:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	220c      	movs	r2, #12
 800223a:	4013      	ands	r3, r2
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800223e:	4b34      	ldr	r3, [pc, #208]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d21e      	bcs.n	800228a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2201      	movs	r2, #1
 8002252:	4393      	bics	r3, r2
 8002254:	0019      	movs	r1, r3
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	430a      	orrs	r2, r1
 800225c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800225e:	f7fe fcb3 	bl	8000bc8 <HAL_GetTick>
 8002262:	0003      	movs	r3, r0
 8002264:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	e009      	b.n	800227c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002268:	f7fe fcae 	bl	8000bc8 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_RCC_ClockConfig+0x274>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d901      	bls.n	800227c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e044      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_RCC_ClockConfig+0x270>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d1ee      	bne.n	8002268 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2204      	movs	r2, #4
 8002290:	4013      	ands	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002294:	4b20      	ldr	r3, [pc, #128]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	4a20      	ldr	r2, [pc, #128]	; (800231c <HAL_RCC_ClockConfig+0x27c>)
 800229a:	4013      	ands	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68da      	ldr	r2, [r3, #12]
 80022a2:	4b1d      	ldr	r3, [pc, #116]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2208      	movs	r2, #8
 80022ae:	4013      	ands	r3, r2
 80022b0:	d00a      	beq.n	80022c8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a1a      	ldr	r2, [pc, #104]	; (8002320 <HAL_RCC_ClockConfig+0x280>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	0019      	movs	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	00da      	lsls	r2, r3, #3
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c8:	f000 f832 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 80022cc:	0001      	movs	r1, r0
 80022ce:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_ClockConfig+0x278>)
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	091b      	lsrs	r3, r3, #4
 80022d4:	220f      	movs	r2, #15
 80022d6:	4013      	ands	r3, r2
 80022d8:	4a12      	ldr	r2, [pc, #72]	; (8002324 <HAL_RCC_ClockConfig+0x284>)
 80022da:	5cd3      	ldrb	r3, [r2, r3]
 80022dc:	000a      	movs	r2, r1
 80022de:	40da      	lsrs	r2, r3
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <HAL_RCC_ClockConfig+0x288>)
 80022e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <HAL_RCC_ClockConfig+0x28c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	250b      	movs	r5, #11
 80022ea:	197c      	adds	r4, r7, r5
 80022ec:	0018      	movs	r0, r3
 80022ee:	f7fe fc25 	bl	8000b3c <HAL_InitTick>
 80022f2:	0003      	movs	r3, r0
 80022f4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022f6:	197b      	adds	r3, r7, r5
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022fe:	197b      	adds	r3, r7, r5
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	e000      	b.n	8002306 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bdb0      	pop	{r4, r5, r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	40022000 	.word	0x40022000
 8002314:	00001388 	.word	0x00001388
 8002318:	40021000 	.word	0x40021000
 800231c:	fffff8ff 	.word	0xfffff8ff
 8002320:	ffffc7ff 	.word	0xffffc7ff
 8002324:	08004280 	.word	0x08004280
 8002328:	20000000 	.word	0x20000000
 800232c:	20000004 	.word	0x20000004

08002330 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002330:	b5b0      	push	{r4, r5, r7, lr}
 8002332:	b08e      	sub	sp, #56	; 0x38
 8002334:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002336:	4b4c      	ldr	r3, [pc, #304]	; (8002468 <HAL_RCC_GetSysClockFreq+0x138>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800233e:	230c      	movs	r3, #12
 8002340:	4013      	ands	r3, r2
 8002342:	2b0c      	cmp	r3, #12
 8002344:	d014      	beq.n	8002370 <HAL_RCC_GetSysClockFreq+0x40>
 8002346:	d900      	bls.n	800234a <HAL_RCC_GetSysClockFreq+0x1a>
 8002348:	e07b      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x112>
 800234a:	2b04      	cmp	r3, #4
 800234c:	d002      	beq.n	8002354 <HAL_RCC_GetSysClockFreq+0x24>
 800234e:	2b08      	cmp	r3, #8
 8002350:	d00b      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0x3a>
 8002352:	e076      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <HAL_RCC_GetSysClockFreq+0x138>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2210      	movs	r2, #16
 800235a:	4013      	ands	r3, r2
 800235c:	d002      	beq.n	8002364 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800235e:	4b43      	ldr	r3, [pc, #268]	; (800246c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002360:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002362:	e07c      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002364:	4b42      	ldr	r3, [pc, #264]	; (8002470 <HAL_RCC_GetSysClockFreq+0x140>)
 8002366:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002368:	e079      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800236a:	4b42      	ldr	r3, [pc, #264]	; (8002474 <HAL_RCC_GetSysClockFreq+0x144>)
 800236c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800236e:	e076      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002372:	0c9a      	lsrs	r2, r3, #18
 8002374:	230f      	movs	r3, #15
 8002376:	401a      	ands	r2, r3
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_GetSysClockFreq+0x148>)
 800237a:	5c9b      	ldrb	r3, [r3, r2]
 800237c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	0d9a      	lsrs	r2, r3, #22
 8002382:	2303      	movs	r3, #3
 8002384:	4013      	ands	r3, r2
 8002386:	3301      	adds	r3, #1
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800238a:	4b37      	ldr	r3, [pc, #220]	; (8002468 <HAL_RCC_GetSysClockFreq+0x138>)
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	025b      	lsls	r3, r3, #9
 8002392:	4013      	ands	r3, r2
 8002394:	d01a      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	61bb      	str	r3, [r7, #24]
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	4a35      	ldr	r2, [pc, #212]	; (8002474 <HAL_RCC_GetSysClockFreq+0x144>)
 80023a0:	2300      	movs	r3, #0
 80023a2:	69b8      	ldr	r0, [r7, #24]
 80023a4:	69f9      	ldr	r1, [r7, #28]
 80023a6:	f7fd ff65 	bl	8000274 <__aeabi_lmul>
 80023aa:	0002      	movs	r2, r0
 80023ac:	000b      	movs	r3, r1
 80023ae:	0010      	movs	r0, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	613b      	str	r3, [r7, #16]
 80023b6:	2300      	movs	r3, #0
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f7fd ff39 	bl	8000234 <__aeabi_uldivmod>
 80023c2:	0002      	movs	r2, r0
 80023c4:	000b      	movs	r3, r1
 80023c6:	0013      	movs	r3, r2
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	e037      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80023cc:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_GetSysClockFreq+0x138>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2210      	movs	r2, #16
 80023d2:	4013      	ands	r3, r2
 80023d4:	d01a      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80023d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	4a23      	ldr	r2, [pc, #140]	; (800246c <HAL_RCC_GetSysClockFreq+0x13c>)
 80023e0:	2300      	movs	r3, #0
 80023e2:	68b8      	ldr	r0, [r7, #8]
 80023e4:	68f9      	ldr	r1, [r7, #12]
 80023e6:	f7fd ff45 	bl	8000274 <__aeabi_lmul>
 80023ea:	0002      	movs	r2, r0
 80023ec:	000b      	movs	r3, r1
 80023ee:	0010      	movs	r0, r2
 80023f0:	0019      	movs	r1, r3
 80023f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f4:	603b      	str	r3, [r7, #0]
 80023f6:	2300      	movs	r3, #0
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f7fd ff19 	bl	8000234 <__aeabi_uldivmod>
 8002402:	0002      	movs	r2, r0
 8002404:	000b      	movs	r3, r1
 8002406:	0013      	movs	r3, r2
 8002408:	637b      	str	r3, [r7, #52]	; 0x34
 800240a:	e017      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	0018      	movs	r0, r3
 8002410:	2300      	movs	r3, #0
 8002412:	0019      	movs	r1, r3
 8002414:	4a16      	ldr	r2, [pc, #88]	; (8002470 <HAL_RCC_GetSysClockFreq+0x140>)
 8002416:	2300      	movs	r3, #0
 8002418:	f7fd ff2c 	bl	8000274 <__aeabi_lmul>
 800241c:	0002      	movs	r2, r0
 800241e:	000b      	movs	r3, r1
 8002420:	0010      	movs	r0, r2
 8002422:	0019      	movs	r1, r3
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	001c      	movs	r4, r3
 8002428:	2300      	movs	r3, #0
 800242a:	001d      	movs	r5, r3
 800242c:	0022      	movs	r2, r4
 800242e:	002b      	movs	r3, r5
 8002430:	f7fd ff00 	bl	8000234 <__aeabi_uldivmod>
 8002434:	0002      	movs	r2, r0
 8002436:	000b      	movs	r3, r1
 8002438:	0013      	movs	r3, r2
 800243a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800243c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002440:	e00d      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_RCC_GetSysClockFreq+0x138>)
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	0b5b      	lsrs	r3, r3, #13
 8002448:	2207      	movs	r2, #7
 800244a:	4013      	ands	r3, r2
 800244c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	3301      	adds	r3, #1
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	0212      	lsls	r2, r2, #8
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800245c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002460:	0018      	movs	r0, r3
 8002462:	46bd      	mov	sp, r7
 8002464:	b00e      	add	sp, #56	; 0x38
 8002466:	bdb0      	pop	{r4, r5, r7, pc}
 8002468:	40021000 	.word	0x40021000
 800246c:	003d0900 	.word	0x003d0900
 8002470:	00f42400 	.word	0x00f42400
 8002474:	007a1200 	.word	0x007a1200
 8002478:	08004298 	.word	0x08004298

0800247c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b02      	ldr	r3, [pc, #8]	; (800248c <HAL_RCC_GetHCLKFreq+0x10>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	0018      	movs	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	20000000 	.word	0x20000000

08002490 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002494:	f7ff fff2 	bl	800247c <HAL_RCC_GetHCLKFreq>
 8002498:	0001      	movs	r1, r0
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	2207      	movs	r2, #7
 80024a2:	4013      	ands	r3, r2
 80024a4:	4a04      	ldr	r2, [pc, #16]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024a6:	5cd3      	ldrb	r3, [r2, r3]
 80024a8:	40d9      	lsrs	r1, r3
 80024aa:	000b      	movs	r3, r1
}
 80024ac:	0018      	movs	r0, r3
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	46c0      	nop			; (mov r8, r8)
 80024b4:	40021000 	.word	0x40021000
 80024b8:	08004290 	.word	0x08004290

080024bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024c0:	f7ff ffdc 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c4:	0001      	movs	r1, r0
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	0adb      	lsrs	r3, r3, #11
 80024cc:	2207      	movs	r2, #7
 80024ce:	4013      	ands	r3, r2
 80024d0:	4a04      	ldr	r2, [pc, #16]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024d2:	5cd3      	ldrb	r3, [r2, r3]
 80024d4:	40d9      	lsrs	r1, r3
 80024d6:	000b      	movs	r3, r1
}
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	40021000 	.word	0x40021000
 80024e4:	08004290 	.word	0x08004290

080024e8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 80024f0:	2317      	movs	r3, #23
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2220      	movs	r2, #32
 80024fe:	4013      	ands	r3, r2
 8002500:	d106      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800250e:	e0d9      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002510:	4b9c      	ldr	r3, [pc, #624]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002512:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002514:	2380      	movs	r3, #128	; 0x80
 8002516:	055b      	lsls	r3, r3, #21
 8002518:	4013      	ands	r3, r2
 800251a:	d10a      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251c:	4b99      	ldr	r3, [pc, #612]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800251e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002520:	4b98      	ldr	r3, [pc, #608]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0549      	lsls	r1, r1, #21
 8002526:	430a      	orrs	r2, r1
 8002528:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800252a:	2317      	movs	r3, #23
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2201      	movs	r2, #1
 8002530:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002532:	4b95      	ldr	r3, [pc, #596]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	4013      	ands	r3, r2
 800253c:	d11a      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800253e:	4b92      	ldr	r3, [pc, #584]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	4b91      	ldr	r3, [pc, #580]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0049      	lsls	r1, r1, #1
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254c:	f7fe fb3c 	bl	8000bc8 <HAL_GetTick>
 8002550:	0003      	movs	r3, r0
 8002552:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002554:	e008      	b.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7fe fb37 	bl	8000bc8 <HAL_GetTick>
 800255a:	0002      	movs	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b64      	cmp	r3, #100	; 0x64
 8002562:	d901      	bls.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e108      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002568:	4b87      	ldr	r3, [pc, #540]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	4013      	ands	r3, r2
 8002572:	d0f0      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002574:	4b83      	ldr	r3, [pc, #524]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	23c0      	movs	r3, #192	; 0xc0
 800257a:	039b      	lsls	r3, r3, #14
 800257c:	4013      	ands	r3, r2
 800257e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	23c0      	movs	r3, #192	; 0xc0
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	4013      	ands	r3, r2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	429a      	cmp	r2, r3
 800258e:	d107      	bne.n	80025a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	23c0      	movs	r3, #192	; 0xc0
 8002596:	039b      	lsls	r3, r3, #14
 8002598:	4013      	ands	r3, r2
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d013      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	23c0      	movs	r3, #192	; 0xc0
 80025a6:	029b      	lsls	r3, r3, #10
 80025a8:	401a      	ands	r2, r3
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d10a      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80025b2:	4b74      	ldr	r3, [pc, #464]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	401a      	ands	r2, r3
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	029b      	lsls	r3, r3, #10
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d101      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0d8      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80025c8:	4b6e      	ldr	r3, [pc, #440]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80025ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80025cc:	23c0      	movs	r3, #192	; 0xc0
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d049      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685a      	ldr	r2, [r3, #4]
 80025de:	23c0      	movs	r3, #192	; 0xc0
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d004      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2220      	movs	r2, #32
 80025f0:	4013      	ands	r3, r2
 80025f2:	d10d      	bne.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	23c0      	movs	r3, #192	; 0xc0
 80025fa:	029b      	lsls	r3, r3, #10
 80025fc:	4013      	ands	r3, r2
 80025fe:	68fa      	ldr	r2, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	d034      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	011b      	lsls	r3, r3, #4
 800260c:	4013      	ands	r3, r2
 800260e:	d02e      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002610:	4b5c      	ldr	r3, [pc, #368]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002614:	4a5d      	ldr	r2, [pc, #372]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8002616:	4013      	ands	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800261a:	4b5a      	ldr	r3, [pc, #360]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800261c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800261e:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002620:	2180      	movs	r1, #128	; 0x80
 8002622:	0309      	lsls	r1, r1, #12
 8002624:	430a      	orrs	r2, r1
 8002626:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002628:	4b56      	ldr	r3, [pc, #344]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800262a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800262c:	4b55      	ldr	r3, [pc, #340]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800262e:	4958      	ldr	r1, [pc, #352]	; (8002790 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002630:	400a      	ands	r2, r1
 8002632:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	2380      	movs	r3, #128	; 0x80
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	4013      	ands	r3, r2
 8002642:	d014      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7fe fac0 	bl	8000bc8 <HAL_GetTick>
 8002648:	0003      	movs	r3, r0
 800264a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800264c:	e009      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264e:	f7fe fabb 	bl	8000bc8 <HAL_GetTick>
 8002652:	0002      	movs	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	4a4e      	ldr	r2, [pc, #312]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e08b      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4013      	ands	r3, r2
 800266c:	d0ef      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	23c0      	movs	r3, #192	; 0xc0
 8002674:	029b      	lsls	r3, r3, #10
 8002676:	401a      	ands	r2, r3
 8002678:	23c0      	movs	r3, #192	; 0xc0
 800267a:	029b      	lsls	r3, r3, #10
 800267c:	429a      	cmp	r2, r3
 800267e:	d10c      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002680:	4b40      	ldr	r3, [pc, #256]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a44      	ldr	r2, [pc, #272]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	23c0      	movs	r3, #192	; 0xc0
 8002690:	039b      	lsls	r3, r3, #14
 8002692:	401a      	ands	r2, r3
 8002694:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	4b3a      	ldr	r3, [pc, #232]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800269c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685a      	ldr	r2, [r3, #4]
 80026a2:	23c0      	movs	r3, #192	; 0xc0
 80026a4:	029b      	lsls	r3, r3, #10
 80026a6:	401a      	ands	r2, r3
 80026a8:	4b36      	ldr	r3, [pc, #216]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026aa:	430a      	orrs	r2, r1
 80026ac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ae:	2317      	movs	r3, #23
 80026b0:	18fb      	adds	r3, r7, r3
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d105      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b8:	4b32      	ldr	r3, [pc, #200]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026bc:	4b31      	ldr	r3, [pc, #196]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026be:	4937      	ldr	r1, [pc, #220]	; (800279c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80026c0:	400a      	ands	r2, r1
 80026c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	2203      	movs	r2, #3
 80026d4:	4393      	bics	r3, r2
 80026d6:	0019      	movs	r1, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	4b29      	ldr	r3, [pc, #164]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026de:	430a      	orrs	r2, r1
 80026e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2202      	movs	r2, #2
 80026e8:	4013      	ands	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80026ec:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f0:	220c      	movs	r2, #12
 80026f2:	4393      	bics	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691a      	ldr	r2, [r3, #16]
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80026fc:	430a      	orrs	r2, r1
 80026fe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2204      	movs	r2, #4
 8002706:	4013      	ands	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800270a:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800270c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270e:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002710:	4013      	ands	r3, r2
 8002712:	0019      	movs	r1, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	4b1a      	ldr	r3, [pc, #104]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800271a:	430a      	orrs	r2, r1
 800271c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2208      	movs	r2, #8
 8002724:	4013      	ands	r3, r2
 8002726:	d009      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002728:	4b16      	ldr	r3, [pc, #88]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272c:	4a1d      	ldr	r2, [pc, #116]	; (80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 800272e:	4013      	ands	r3, r2
 8002730:	0019      	movs	r1, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	4b13      	ldr	r3, [pc, #76]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002738:	430a      	orrs	r2, r1
 800273a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2240      	movs	r2, #64	; 0x40
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002746:	4b0f      	ldr	r3, [pc, #60]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274a:	4a17      	ldr	r2, [pc, #92]	; (80027a8 <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 800274c:	4013      	ands	r3, r2
 800274e:	0019      	movs	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a1a      	ldr	r2, [r3, #32]
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002756:	430a      	orrs	r2, r1
 8002758:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	4013      	ands	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002764:	4b07      	ldr	r3, [pc, #28]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b04      	ldr	r3, [pc, #16]	; (8002784 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002774:	430a      	orrs	r2, r1
 8002776:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	0018      	movs	r0, r3
 800277c:	46bd      	mov	sp, r7
 800277e:	b006      	add	sp, #24
 8002780:	bd80      	pop	{r7, pc}
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	40021000 	.word	0x40021000
 8002788:	40007000 	.word	0x40007000
 800278c:	fffcffff 	.word	0xfffcffff
 8002790:	fff7ffff 	.word	0xfff7ffff
 8002794:	00001388 	.word	0x00001388
 8002798:	ffcfffff 	.word	0xffcfffff
 800279c:	efffffff 	.word	0xefffffff
 80027a0:	fffff3ff 	.word	0xfffff3ff
 80027a4:	ffffcfff 	.word	0xffffcfff
 80027a8:	fbffffff 	.word	0xfbffffff
 80027ac:	fff3ffff 	.word	0xfff3ffff

080027b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e044      	b.n	800284c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d107      	bne.n	80027da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2274      	movs	r2, #116	; 0x74
 80027ce:	2100      	movs	r1, #0
 80027d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fe f81f 	bl	8000818 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	; 0x24
 80027de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	2101      	movs	r1, #1
 80027ec:	438a      	bics	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f8d8 	bl	80029a8 <UART_SetConfig>
 80027f8:	0003      	movs	r3, r0
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e024      	b.n	800284c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f000 fb4f 	bl	8002eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	490d      	ldr	r1, [pc, #52]	; (8002854 <HAL_UART_Init+0xa4>)
 800281e:	400a      	ands	r2, r1
 8002820:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	212a      	movs	r1, #42	; 0x2a
 800282e:	438a      	bics	r2, r1
 8002830:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2101      	movs	r1, #1
 800283e:	430a      	orrs	r2, r1
 8002840:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f000 fbe7 	bl	8003018 <UART_CheckIdleState>
 800284a:	0003      	movs	r3, r0
}
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}
 8002854:	ffffb7ff 	.word	0xffffb7ff

08002858 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	603b      	str	r3, [r7, #0]
 8002864:	1dbb      	adds	r3, r7, #6
 8002866:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800286c:	2b20      	cmp	r3, #32
 800286e:	d000      	beq.n	8002872 <HAL_UART_Transmit+0x1a>
 8002870:	e095      	b.n	800299e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <HAL_UART_Transmit+0x28>
 8002878:	1dbb      	adds	r3, r7, #6
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e08d      	b.n	80029a0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	2380      	movs	r3, #128	; 0x80
 800288a:	015b      	lsls	r3, r3, #5
 800288c:	429a      	cmp	r2, r3
 800288e:	d109      	bne.n	80028a4 <HAL_UART_Transmit+0x4c>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d105      	bne.n	80028a4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2201      	movs	r2, #1
 800289c:	4013      	ands	r3, r2
 800289e:	d001      	beq.n	80028a4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e07d      	b.n	80029a0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2274      	movs	r2, #116	; 0x74
 80028a8:	5c9b      	ldrb	r3, [r3, r2]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_UART_Transmit+0x5a>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e076      	b.n	80029a0 <HAL_UART_Transmit+0x148>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2274      	movs	r2, #116	; 0x74
 80028b6:	2101      	movs	r1, #1
 80028b8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2280      	movs	r2, #128	; 0x80
 80028be:	2100      	movs	r1, #0
 80028c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2221      	movs	r2, #33	; 0x21
 80028c6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028c8:	f7fe f97e 	bl	8000bc8 <HAL_GetTick>
 80028cc:	0003      	movs	r3, r0
 80028ce:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1dba      	adds	r2, r7, #6
 80028d4:	2150      	movs	r1, #80	; 0x50
 80028d6:	8812      	ldrh	r2, [r2, #0]
 80028d8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1dba      	adds	r2, r7, #6
 80028de:	2152      	movs	r1, #82	; 0x52
 80028e0:	8812      	ldrh	r2, [r2, #0]
 80028e2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	2380      	movs	r3, #128	; 0x80
 80028ea:	015b      	lsls	r3, r3, #5
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d108      	bne.n	8002902 <HAL_UART_Transmit+0xaa>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d104      	bne.n	8002902 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	61bb      	str	r3, [r7, #24]
 8002900:	e003      	b.n	800290a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2274      	movs	r2, #116	; 0x74
 800290e:	2100      	movs	r1, #0
 8002910:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002912:	e02c      	b.n	800296e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	0013      	movs	r3, r2
 800291e:	2200      	movs	r2, #0
 8002920:	2180      	movs	r1, #128	; 0x80
 8002922:	f000 fbc1 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8002926:	1e03      	subs	r3, r0, #0
 8002928:	d001      	beq.n	800292e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e038      	b.n	80029a0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d10b      	bne.n	800294c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	001a      	movs	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	05d2      	lsls	r2, r2, #23
 8002940:	0dd2      	lsrs	r2, r2, #23
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	3302      	adds	r3, #2
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	e007      	b.n	800295c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	781a      	ldrb	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3301      	adds	r3, #1
 800295a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2252      	movs	r2, #82	; 0x52
 8002960:	5a9b      	ldrh	r3, [r3, r2]
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b299      	uxth	r1, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2252      	movs	r2, #82	; 0x52
 800296c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2252      	movs	r2, #82	; 0x52
 8002972:	5a9b      	ldrh	r3, [r3, r2]
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1cc      	bne.n	8002914 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	0013      	movs	r3, r2
 8002984:	2200      	movs	r2, #0
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	f000 fb8e 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 800298c:	1e03      	subs	r3, r0, #0
 800298e:	d001      	beq.n	8002994 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e005      	b.n	80029a0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2220      	movs	r2, #32
 8002998:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	e000      	b.n	80029a0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800299e:	2302      	movs	r3, #2
  }
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b008      	add	sp, #32
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029a8:	b5b0      	push	{r4, r5, r7, lr}
 80029aa:	b08e      	sub	sp, #56	; 0x38
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029b0:	231a      	movs	r3, #26
 80029b2:	2218      	movs	r2, #24
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	2200      	movs	r2, #0
 80029ba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	689a      	ldr	r2, [r3, #8]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4ac6      	ldr	r2, [pc, #792]	; (8002cf4 <UART_SetConfig+0x34c>)
 80029dc:	4013      	ands	r3, r2
 80029de:	0019      	movs	r1, r3
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029e6:	430a      	orrs	r2, r1
 80029e8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4ac1      	ldr	r2, [pc, #772]	; (8002cf8 <UART_SetConfig+0x350>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	430a      	orrs	r2, r1
 8002a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4abb      	ldr	r2, [pc, #748]	; (8002cfc <UART_SetConfig+0x354>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d004      	beq.n	8002a1c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	4ab7      	ldr	r2, [pc, #732]	; (8002d00 <UART_SetConfig+0x358>)
 8002a24:	4013      	ands	r3, r2
 8002a26:	0019      	movs	r1, r3
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4ab3      	ldr	r2, [pc, #716]	; (8002d04 <UART_SetConfig+0x35c>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d131      	bne.n	8002aa0 <UART_SetConfig+0xf8>
 8002a3c:	4bb2      	ldr	r3, [pc, #712]	; (8002d08 <UART_SetConfig+0x360>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a40:	2203      	movs	r2, #3
 8002a42:	4013      	ands	r3, r2
 8002a44:	2b03      	cmp	r3, #3
 8002a46:	d01d      	beq.n	8002a84 <UART_SetConfig+0xdc>
 8002a48:	d823      	bhi.n	8002a92 <UART_SetConfig+0xea>
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d00c      	beq.n	8002a68 <UART_SetConfig+0xc0>
 8002a4e:	d820      	bhi.n	8002a92 <UART_SetConfig+0xea>
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <UART_SetConfig+0xb2>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d00e      	beq.n	8002a76 <UART_SetConfig+0xce>
 8002a58:	e01b      	b.n	8002a92 <UART_SetConfig+0xea>
 8002a5a:	231b      	movs	r3, #27
 8002a5c:	2218      	movs	r2, #24
 8002a5e:	189b      	adds	r3, r3, r2
 8002a60:	19db      	adds	r3, r3, r7
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
 8002a66:	e09c      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a68:	231b      	movs	r3, #27
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2202      	movs	r2, #2
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e095      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a76:	231b      	movs	r3, #27
 8002a78:	2218      	movs	r2, #24
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	19db      	adds	r3, r3, r7
 8002a7e:	2204      	movs	r2, #4
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e08e      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a84:	231b      	movs	r3, #27
 8002a86:	2218      	movs	r2, #24
 8002a88:	189b      	adds	r3, r3, r2
 8002a8a:	19db      	adds	r3, r3, r7
 8002a8c:	2208      	movs	r2, #8
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	e087      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002a92:	231b      	movs	r3, #27
 8002a94:	2218      	movs	r2, #24
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	19db      	adds	r3, r3, r7
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e080      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a99      	ldr	r2, [pc, #612]	; (8002d0c <UART_SetConfig+0x364>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d131      	bne.n	8002b0e <UART_SetConfig+0x166>
 8002aaa:	4b97      	ldr	r3, [pc, #604]	; (8002d08 <UART_SetConfig+0x360>)
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	220c      	movs	r2, #12
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d01d      	beq.n	8002af2 <UART_SetConfig+0x14a>
 8002ab6:	d823      	bhi.n	8002b00 <UART_SetConfig+0x158>
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d00c      	beq.n	8002ad6 <UART_SetConfig+0x12e>
 8002abc:	d820      	bhi.n	8002b00 <UART_SetConfig+0x158>
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <UART_SetConfig+0x120>
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d00e      	beq.n	8002ae4 <UART_SetConfig+0x13c>
 8002ac6:	e01b      	b.n	8002b00 <UART_SetConfig+0x158>
 8002ac8:	231b      	movs	r3, #27
 8002aca:	2218      	movs	r2, #24
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	19db      	adds	r3, r3, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	701a      	strb	r2, [r3, #0]
 8002ad4:	e065      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002ad6:	231b      	movs	r3, #27
 8002ad8:	2218      	movs	r2, #24
 8002ada:	189b      	adds	r3, r3, r2
 8002adc:	19db      	adds	r3, r3, r7
 8002ade:	2202      	movs	r2, #2
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	e05e      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002ae4:	231b      	movs	r3, #27
 8002ae6:	2218      	movs	r2, #24
 8002ae8:	189b      	adds	r3, r3, r2
 8002aea:	19db      	adds	r3, r3, r7
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e057      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002af2:	231b      	movs	r3, #27
 8002af4:	2218      	movs	r2, #24
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	19db      	adds	r3, r3, r7
 8002afa:	2208      	movs	r2, #8
 8002afc:	701a      	strb	r2, [r3, #0]
 8002afe:	e050      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b00:	231b      	movs	r3, #27
 8002b02:	2218      	movs	r2, #24
 8002b04:	189b      	adds	r3, r3, r2
 8002b06:	19db      	adds	r3, r3, r7
 8002b08:	2210      	movs	r2, #16
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e049      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a7a      	ldr	r2, [pc, #488]	; (8002cfc <UART_SetConfig+0x354>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d13e      	bne.n	8002b96 <UART_SetConfig+0x1ee>
 8002b18:	4b7b      	ldr	r3, [pc, #492]	; (8002d08 <UART_SetConfig+0x360>)
 8002b1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b1c:	23c0      	movs	r3, #192	; 0xc0
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	4013      	ands	r3, r2
 8002b22:	22c0      	movs	r2, #192	; 0xc0
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d027      	beq.n	8002b7a <UART_SetConfig+0x1d2>
 8002b2a:	22c0      	movs	r2, #192	; 0xc0
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d82a      	bhi.n	8002b88 <UART_SetConfig+0x1e0>
 8002b32:	2280      	movs	r2, #128	; 0x80
 8002b34:	0112      	lsls	r2, r2, #4
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d011      	beq.n	8002b5e <UART_SetConfig+0x1b6>
 8002b3a:	2280      	movs	r2, #128	; 0x80
 8002b3c:	0112      	lsls	r2, r2, #4
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d822      	bhi.n	8002b88 <UART_SetConfig+0x1e0>
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <UART_SetConfig+0x1a8>
 8002b46:	2280      	movs	r2, #128	; 0x80
 8002b48:	00d2      	lsls	r2, r2, #3
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <UART_SetConfig+0x1c4>
 8002b4e:	e01b      	b.n	8002b88 <UART_SetConfig+0x1e0>
 8002b50:	231b      	movs	r3, #27
 8002b52:	2218      	movs	r2, #24
 8002b54:	189b      	adds	r3, r3, r2
 8002b56:	19db      	adds	r3, r3, r7
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
 8002b5c:	e021      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b5e:	231b      	movs	r3, #27
 8002b60:	2218      	movs	r2, #24
 8002b62:	189b      	adds	r3, r3, r2
 8002b64:	19db      	adds	r3, r3, r7
 8002b66:	2202      	movs	r2, #2
 8002b68:	701a      	strb	r2, [r3, #0]
 8002b6a:	e01a      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b6c:	231b      	movs	r3, #27
 8002b6e:	2218      	movs	r2, #24
 8002b70:	189b      	adds	r3, r3, r2
 8002b72:	19db      	adds	r3, r3, r7
 8002b74:	2204      	movs	r2, #4
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	e013      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b7a:	231b      	movs	r3, #27
 8002b7c:	2218      	movs	r2, #24
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	19db      	adds	r3, r3, r7
 8002b82:	2208      	movs	r2, #8
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e00c      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b88:	231b      	movs	r3, #27
 8002b8a:	2218      	movs	r2, #24
 8002b8c:	189b      	adds	r3, r3, r2
 8002b8e:	19db      	adds	r3, r3, r7
 8002b90:	2210      	movs	r2, #16
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	e005      	b.n	8002ba2 <UART_SetConfig+0x1fa>
 8002b96:	231b      	movs	r3, #27
 8002b98:	2218      	movs	r2, #24
 8002b9a:	189b      	adds	r3, r3, r2
 8002b9c:	19db      	adds	r3, r3, r7
 8002b9e:	2210      	movs	r2, #16
 8002ba0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a55      	ldr	r2, [pc, #340]	; (8002cfc <UART_SetConfig+0x354>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d000      	beq.n	8002bae <UART_SetConfig+0x206>
 8002bac:	e084      	b.n	8002cb8 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bae:	231b      	movs	r3, #27
 8002bb0:	2218      	movs	r2, #24
 8002bb2:	189b      	adds	r3, r3, r2
 8002bb4:	19db      	adds	r3, r3, r7
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d01d      	beq.n	8002bf8 <UART_SetConfig+0x250>
 8002bbc:	dc20      	bgt.n	8002c00 <UART_SetConfig+0x258>
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d015      	beq.n	8002bee <UART_SetConfig+0x246>
 8002bc2:	dc1d      	bgt.n	8002c00 <UART_SetConfig+0x258>
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <UART_SetConfig+0x226>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d005      	beq.n	8002bd8 <UART_SetConfig+0x230>
 8002bcc:	e018      	b.n	8002c00 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bce:	f7ff fc5f 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8002bd2:	0003      	movs	r3, r0
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bd6:	e01c      	b.n	8002c12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <UART_SetConfig+0x360>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2210      	movs	r2, #16
 8002bde:	4013      	ands	r3, r2
 8002be0:	d002      	beq.n	8002be8 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <UART_SetConfig+0x368>)
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002be6:	e014      	b.n	8002c12 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <UART_SetConfig+0x36c>)
 8002bea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bec:	e011      	b.n	8002c12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bee:	f7ff fb9f 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8002bf2:	0003      	movs	r3, r0
 8002bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bf6:	e00c      	b.n	8002c12 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bfe:	e008      	b.n	8002c12 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c04:	231a      	movs	r3, #26
 8002c06:	2218      	movs	r2, #24
 8002c08:	189b      	adds	r3, r3, r2
 8002c0a:	19db      	adds	r3, r3, r7
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        break;
 8002c10:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d100      	bne.n	8002c1a <UART_SetConfig+0x272>
 8002c18:	e133      	b.n	8002e82 <UART_SetConfig+0x4da>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	0013      	movs	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d305      	bcc.n	8002c36 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d906      	bls.n	8002c44 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002c36:	231a      	movs	r3, #26
 8002c38:	2218      	movs	r2, #24
 8002c3a:	189b      	adds	r3, r3, r2
 8002c3c:	19db      	adds	r3, r3, r7
 8002c3e:	2201      	movs	r2, #1
 8002c40:	701a      	strb	r2, [r3, #0]
 8002c42:	e11e      	b.n	8002e82 <UART_SetConfig+0x4da>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c46:	613b      	str	r3, [r7, #16]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	6939      	ldr	r1, [r7, #16]
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	000b      	movs	r3, r1
 8002c52:	0e1b      	lsrs	r3, r3, #24
 8002c54:	0010      	movs	r0, r2
 8002c56:	0205      	lsls	r5, r0, #8
 8002c58:	431d      	orrs	r5, r3
 8002c5a:	000b      	movs	r3, r1
 8002c5c:	021c      	lsls	r4, r3, #8
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68b8      	ldr	r0, [r7, #8]
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	1900      	adds	r0, r0, r4
 8002c70:	4169      	adcs	r1, r5
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	2300      	movs	r3, #0
 8002c7a:	607b      	str	r3, [r7, #4]
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f7fd fad8 	bl	8000234 <__aeabi_uldivmod>
 8002c84:	0002      	movs	r2, r0
 8002c86:	000b      	movs	r3, r1
 8002c88:	0013      	movs	r3, r2
 8002c8a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8e:	23c0      	movs	r3, #192	; 0xc0
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d309      	bcc.n	8002caa <UART_SetConfig+0x302>
 8002c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	035b      	lsls	r3, r3, #13
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d204      	bcs.n	8002caa <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ca6:	60da      	str	r2, [r3, #12]
 8002ca8:	e0eb      	b.n	8002e82 <UART_SetConfig+0x4da>
        }
        else
        {
          ret = HAL_ERROR;
 8002caa:	231a      	movs	r3, #26
 8002cac:	2218      	movs	r2, #24
 8002cae:	189b      	adds	r3, r3, r2
 8002cb0:	19db      	adds	r3, r3, r7
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e0e4      	b.n	8002e82 <UART_SetConfig+0x4da>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	021b      	lsls	r3, r3, #8
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d000      	beq.n	8002cc6 <UART_SetConfig+0x31e>
 8002cc4:	e086      	b.n	8002dd4 <UART_SetConfig+0x42c>
  {
    switch (clocksource)
 8002cc6:	231b      	movs	r3, #27
 8002cc8:	2218      	movs	r2, #24
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	19db      	adds	r3, r3, r7
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d837      	bhi.n	8002d44 <UART_SetConfig+0x39c>
 8002cd4:	009a      	lsls	r2, r3, #2
 8002cd6:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <UART_SetConfig+0x370>)
 8002cd8:	18d3      	adds	r3, r2, r3
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cde:	f7ff fbd7 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8002ce2:	0003      	movs	r3, r0
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce6:	e036      	b.n	8002d56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff fbe8 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8002cec:	0003      	movs	r3, r0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf0:	e031      	b.n	8002d56 <UART_SetConfig+0x3ae>
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	efff69f3 	.word	0xefff69f3
 8002cf8:	ffffcfff 	.word	0xffffcfff
 8002cfc:	40004800 	.word	0x40004800
 8002d00:	fffff4ff 	.word	0xfffff4ff
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	40004400 	.word	0x40004400
 8002d10:	003d0900 	.word	0x003d0900
 8002d14:	00f42400 	.word	0x00f42400
 8002d18:	080042a4 	.word	0x080042a4
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d1c:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <UART_SetConfig+0x4f8>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2210      	movs	r2, #16
 8002d22:	4013      	ands	r3, r2
 8002d24:	d002      	beq.n	8002d2c <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d26:	4b5f      	ldr	r3, [pc, #380]	; (8002ea4 <UART_SetConfig+0x4fc>)
 8002d28:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d2a:	e014      	b.n	8002d56 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	; (8002ea8 <UART_SetConfig+0x500>)
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d30:	e011      	b.n	8002d56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d32:	f7ff fafd 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8002d36:	0003      	movs	r3, r0
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d3a:	e00c      	b.n	8002d56 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	021b      	lsls	r3, r3, #8
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d42:	e008      	b.n	8002d56 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d48:	231a      	movs	r3, #26
 8002d4a:	2218      	movs	r2, #24
 8002d4c:	189b      	adds	r3, r3, r2
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
        break;
 8002d54:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d100      	bne.n	8002d5e <UART_SetConfig+0x3b6>
 8002d5c:	e091      	b.n	8002e82 <UART_SetConfig+0x4da>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	005a      	lsls	r2, r3, #1
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	18d2      	adds	r2, r2, r3
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	0019      	movs	r1, r3
 8002d70:	0010      	movs	r0, r2
 8002d72:	f7fd f9d3 	bl	800011c <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	2b0f      	cmp	r3, #15
 8002d80:	d921      	bls.n	8002dc6 <UART_SetConfig+0x41e>
 8002d82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d84:	2380      	movs	r3, #128	; 0x80
 8002d86:	025b      	lsls	r3, r3, #9
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d21c      	bcs.n	8002dc6 <UART_SetConfig+0x41e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	b29a      	uxth	r2, r3
 8002d90:	200e      	movs	r0, #14
 8002d92:	2418      	movs	r4, #24
 8002d94:	1903      	adds	r3, r0, r4
 8002d96:	19db      	adds	r3, r3, r7
 8002d98:	210f      	movs	r1, #15
 8002d9a:	438a      	bics	r2, r1
 8002d9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	085b      	lsrs	r3, r3, #1
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2207      	movs	r2, #7
 8002da6:	4013      	ands	r3, r2
 8002da8:	b299      	uxth	r1, r3
 8002daa:	1903      	adds	r3, r0, r4
 8002dac:	19db      	adds	r3, r3, r7
 8002dae:	1902      	adds	r2, r0, r4
 8002db0:	19d2      	adds	r2, r2, r7
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	430a      	orrs	r2, r1
 8002db6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	1902      	adds	r2, r0, r4
 8002dbe:	19d2      	adds	r2, r2, r7
 8002dc0:	8812      	ldrh	r2, [r2, #0]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	e05d      	b.n	8002e82 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8002dc6:	231a      	movs	r3, #26
 8002dc8:	2218      	movs	r2, #24
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e056      	b.n	8002e82 <UART_SetConfig+0x4da>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dd4:	231b      	movs	r3, #27
 8002dd6:	2218      	movs	r2, #24
 8002dd8:	189b      	adds	r3, r3, r2
 8002dda:	19db      	adds	r3, r3, r7
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b08      	cmp	r3, #8
 8002de0:	d822      	bhi.n	8002e28 <UART_SetConfig+0x480>
 8002de2:	009a      	lsls	r2, r3, #2
 8002de4:	4b31      	ldr	r3, [pc, #196]	; (8002eac <UART_SetConfig+0x504>)
 8002de6:	18d3      	adds	r3, r2, r3
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff fb50 	bl	8002490 <HAL_RCC_GetPCLK1Freq>
 8002df0:	0003      	movs	r3, r0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df4:	e021      	b.n	8002e3a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df6:	f7ff fb61 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002dfe:	e01c      	b.n	8002e3a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <UART_SetConfig+0x4f8>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2210      	movs	r2, #16
 8002e06:	4013      	ands	r3, r2
 8002e08:	d002      	beq.n	8002e10 <UART_SetConfig+0x468>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002e0a:	4b26      	ldr	r3, [pc, #152]	; (8002ea4 <UART_SetConfig+0x4fc>)
 8002e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e0e:	e014      	b.n	8002e3a <UART_SetConfig+0x492>
          pclk = (uint32_t) HSI_VALUE;
 8002e10:	4b25      	ldr	r3, [pc, #148]	; (8002ea8 <UART_SetConfig+0x500>)
 8002e12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e14:	e011      	b.n	8002e3a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e16:	f7ff fa8b 	bl	8002330 <HAL_RCC_GetSysClockFreq>
 8002e1a:	0003      	movs	r3, r0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e1e:	e00c      	b.n	8002e3a <UART_SetConfig+0x492>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e20:	2380      	movs	r3, #128	; 0x80
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e26:	e008      	b.n	8002e3a <UART_SetConfig+0x492>
      default:
        pclk = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e2c:	231a      	movs	r3, #26
 8002e2e:	2218      	movs	r2, #24
 8002e30:	189b      	adds	r3, r3, r2
 8002e32:	19db      	adds	r3, r3, r7
 8002e34:	2201      	movs	r2, #1
 8002e36:	701a      	strb	r2, [r3, #0]
        break;
 8002e38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <UART_SetConfig+0x4da>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	085a      	lsrs	r2, r3, #1
 8002e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e48:	18d2      	adds	r2, r2, r3
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	0019      	movs	r1, r3
 8002e50:	0010      	movs	r0, r2
 8002e52:	f7fd f963 	bl	800011c <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5e:	2b0f      	cmp	r3, #15
 8002e60:	d909      	bls.n	8002e76 <UART_SetConfig+0x4ce>
 8002e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e64:	2380      	movs	r3, #128	; 0x80
 8002e66:	025b      	lsls	r3, r3, #9
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d204      	bcs.n	8002e76 <UART_SetConfig+0x4ce>
      {
        huart->Instance->BRR = usartdiv;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e72:	60da      	str	r2, [r3, #12]
 8002e74:	e005      	b.n	8002e82 <UART_SetConfig+0x4da>
      }
      else
      {
        ret = HAL_ERROR;
 8002e76:	231a      	movs	r3, #26
 8002e78:	2218      	movs	r2, #24
 8002e7a:	189b      	adds	r3, r3, r2
 8002e7c:	19db      	adds	r3, r3, r7
 8002e7e:	2201      	movs	r2, #1
 8002e80:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	2200      	movs	r2, #0
 8002e86:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e8e:	231a      	movs	r3, #26
 8002e90:	2218      	movs	r2, #24
 8002e92:	189b      	adds	r3, r3, r2
 8002e94:	19db      	adds	r3, r3, r7
 8002e96:	781b      	ldrb	r3, [r3, #0]
}
 8002e98:	0018      	movs	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b00e      	add	sp, #56	; 0x38
 8002e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	003d0900 	.word	0x003d0900
 8002ea8:	00f42400 	.word	0x00f42400
 8002eac:	080042c8 	.word	0x080042c8

08002eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a4a      	ldr	r2, [pc, #296]	; (8002ff4 <UART_AdvFeatureConfig+0x144>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	0019      	movs	r1, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2202      	movs	r2, #2
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	d00b      	beq.n	8002efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a43      	ldr	r2, [pc, #268]	; (8002ff8 <UART_AdvFeatureConfig+0x148>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	0019      	movs	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	430a      	orrs	r2, r1
 8002efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2204      	movs	r2, #4
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <UART_AdvFeatureConfig+0x14c>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	0019      	movs	r1, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2208      	movs	r2, #8
 8002f24:	4013      	ands	r3, r2
 8002f26:	d00b      	beq.n	8002f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	4a34      	ldr	r2, [pc, #208]	; (8003000 <UART_AdvFeatureConfig+0x150>)
 8002f30:	4013      	ands	r3, r2
 8002f32:	0019      	movs	r1, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2210      	movs	r2, #16
 8002f46:	4013      	ands	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	4a2c      	ldr	r2, [pc, #176]	; (8003004 <UART_AdvFeatureConfig+0x154>)
 8002f52:	4013      	ands	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2220      	movs	r2, #32
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d00b      	beq.n	8002f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	4a25      	ldr	r2, [pc, #148]	; (8003008 <UART_AdvFeatureConfig+0x158>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	0019      	movs	r1, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2240      	movs	r2, #64	; 0x40
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	d01d      	beq.n	8002fca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <UART_AdvFeatureConfig+0x15c>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	035b      	lsls	r3, r3, #13
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10b      	bne.n	8002fca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	4a15      	ldr	r2, [pc, #84]	; (8003010 <UART_AdvFeatureConfig+0x160>)
 8002fba:	4013      	ands	r3, r2
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fce:	2280      	movs	r2, #128	; 0x80
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d00b      	beq.n	8002fec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <UART_AdvFeatureConfig+0x164>)
 8002fdc:	4013      	ands	r3, r2
 8002fde:	0019      	movs	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	605a      	str	r2, [r3, #4]
  }
}
 8002fec:	46c0      	nop			; (mov r8, r8)
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	fffdffff 	.word	0xfffdffff
 8002ff8:	fffeffff 	.word	0xfffeffff
 8002ffc:	fffbffff 	.word	0xfffbffff
 8003000:	ffff7fff 	.word	0xffff7fff
 8003004:	ffffefff 	.word	0xffffefff
 8003008:	ffffdfff 	.word	0xffffdfff
 800300c:	ffefffff 	.word	0xffefffff
 8003010:	ff9fffff 	.word	0xff9fffff
 8003014:	fff7ffff 	.word	0xfff7ffff

08003018 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af02      	add	r7, sp, #8
 800301e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2280      	movs	r2, #128	; 0x80
 8003024:	2100      	movs	r1, #0
 8003026:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003028:	f7fd fdce 	bl	8000bc8 <HAL_GetTick>
 800302c:	0003      	movs	r3, r0
 800302e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2208      	movs	r2, #8
 8003038:	4013      	ands	r3, r2
 800303a:	2b08      	cmp	r3, #8
 800303c:	d10c      	bne.n	8003058 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2280      	movs	r2, #128	; 0x80
 8003042:	0391      	lsls	r1, r2, #14
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	4a17      	ldr	r2, [pc, #92]	; (80030a4 <UART_CheckIdleState+0x8c>)
 8003048:	9200      	str	r2, [sp, #0]
 800304a:	2200      	movs	r2, #0
 800304c:	f000 f82c 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8003050:	1e03      	subs	r3, r0, #0
 8003052:	d001      	beq.n	8003058 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e021      	b.n	800309c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2204      	movs	r2, #4
 8003060:	4013      	ands	r3, r2
 8003062:	2b04      	cmp	r3, #4
 8003064:	d10c      	bne.n	8003080 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2280      	movs	r2, #128	; 0x80
 800306a:	03d1      	lsls	r1, r2, #15
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <UART_CheckIdleState+0x8c>)
 8003070:	9200      	str	r2, [sp, #0]
 8003072:	2200      	movs	r2, #0
 8003074:	f000 f818 	bl	80030a8 <UART_WaitOnFlagUntilTimeout>
 8003078:	1e03      	subs	r3, r0, #0
 800307a:	d001      	beq.n	8003080 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e00d      	b.n	800309c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2274      	movs	r2, #116	; 0x74
 8003096:	2100      	movs	r1, #0
 8003098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b004      	add	sp, #16
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	01ffffff 	.word	0x01ffffff

080030a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b094      	sub	sp, #80	; 0x50
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	603b      	str	r3, [r7, #0]
 80030b4:	1dfb      	adds	r3, r7, #7
 80030b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b8:	e0a3      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030bc:	3301      	adds	r3, #1
 80030be:	d100      	bne.n	80030c2 <UART_WaitOnFlagUntilTimeout+0x1a>
 80030c0:	e09f      	b.n	8003202 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fd fd81 	bl	8000bc8 <HAL_GetTick>
 80030c6:	0002      	movs	r2, r0
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d302      	bcc.n	80030d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80030d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d13d      	bne.n	8003154 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d8:	f3ef 8310 	mrs	r3, PRIMASK
 80030dc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030e0:	647b      	str	r3, [r7, #68]	; 0x44
 80030e2:	2301      	movs	r3, #1
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	f383 8810 	msr	PRIMASK, r3
}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	494c      	ldr	r1, [pc, #304]	; (800322c <UART_WaitOnFlagUntilTimeout+0x184>)
 80030fa:	400a      	ands	r2, r1
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003100:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003104:	f383 8810 	msr	PRIMASK, r3
}
 8003108:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800310a:	f3ef 8310 	mrs	r3, PRIMASK
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003112:	643b      	str	r3, [r7, #64]	; 0x40
 8003114:	2301      	movs	r3, #1
 8003116:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800311a:	f383 8810 	msr	PRIMASK, r3
}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689a      	ldr	r2, [r3, #8]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2101      	movs	r1, #1
 800312c:	438a      	bics	r2, r1
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003132:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003134:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003136:	f383 8810 	msr	PRIMASK, r3
}
 800313a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2220      	movs	r2, #32
 8003140:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2220      	movs	r2, #32
 8003146:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2274      	movs	r2, #116	; 0x74
 800314c:	2100      	movs	r1, #0
 800314e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e067      	b.n	8003224 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2204      	movs	r2, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d050      	beq.n	8003202 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	2380      	movs	r3, #128	; 0x80
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	401a      	ands	r2, r3
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	429a      	cmp	r2, r3
 8003172:	d146      	bne.n	8003202 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	0112      	lsls	r2, r2, #4
 800317c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317e:	f3ef 8310 	mrs	r3, PRIMASK
 8003182:	613b      	str	r3, [r7, #16]
  return(result);
 8003184:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003186:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003188:	2301      	movs	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			; (mov r8, r8)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4923      	ldr	r1, [pc, #140]	; (800322c <UART_WaitOnFlagUntilTimeout+0x184>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031b0:	f3ef 8310 	mrs	r3, PRIMASK
 80031b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80031b6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80031ba:	2301      	movs	r3, #1
 80031bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	46c0      	nop			; (mov r8, r8)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	438a      	bics	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2220      	movs	r2, #32
 80031e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2280      	movs	r2, #128	; 0x80
 80031f2:	2120      	movs	r1, #32
 80031f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2274      	movs	r2, #116	; 0x74
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e010      	b.n	8003224 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	4013      	ands	r3, r2
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	425a      	negs	r2, r3
 8003212:	4153      	adcs	r3, r2
 8003214:	b2db      	uxtb	r3, r3
 8003216:	001a      	movs	r2, r3
 8003218:	1dfb      	adds	r3, r7, #7
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d100      	bne.n	8003222 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003220:	e74b      	b.n	80030ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b014      	add	sp, #80	; 0x50
 800322a:	bd80      	pop	{r7, pc}
 800322c:	fffffe5f 	.word	0xfffffe5f

08003230 <__errno>:
 8003230:	4b01      	ldr	r3, [pc, #4]	; (8003238 <__errno+0x8>)
 8003232:	6818      	ldr	r0, [r3, #0]
 8003234:	4770      	bx	lr
 8003236:	46c0      	nop			; (mov r8, r8)
 8003238:	2000000c 	.word	0x2000000c

0800323c <__libc_init_array>:
 800323c:	b570      	push	{r4, r5, r6, lr}
 800323e:	2600      	movs	r6, #0
 8003240:	4d0c      	ldr	r5, [pc, #48]	; (8003274 <__libc_init_array+0x38>)
 8003242:	4c0d      	ldr	r4, [pc, #52]	; (8003278 <__libc_init_array+0x3c>)
 8003244:	1b64      	subs	r4, r4, r5
 8003246:	10a4      	asrs	r4, r4, #2
 8003248:	42a6      	cmp	r6, r4
 800324a:	d109      	bne.n	8003260 <__libc_init_array+0x24>
 800324c:	2600      	movs	r6, #0
 800324e:	f000 fff9 	bl	8004244 <_init>
 8003252:	4d0a      	ldr	r5, [pc, #40]	; (800327c <__libc_init_array+0x40>)
 8003254:	4c0a      	ldr	r4, [pc, #40]	; (8003280 <__libc_init_array+0x44>)
 8003256:	1b64      	subs	r4, r4, r5
 8003258:	10a4      	asrs	r4, r4, #2
 800325a:	42a6      	cmp	r6, r4
 800325c:	d105      	bne.n	800326a <__libc_init_array+0x2e>
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	00b3      	lsls	r3, r6, #2
 8003262:	58eb      	ldr	r3, [r5, r3]
 8003264:	4798      	blx	r3
 8003266:	3601      	adds	r6, #1
 8003268:	e7ee      	b.n	8003248 <__libc_init_array+0xc>
 800326a:	00b3      	lsls	r3, r6, #2
 800326c:	58eb      	ldr	r3, [r5, r3]
 800326e:	4798      	blx	r3
 8003270:	3601      	adds	r6, #1
 8003272:	e7f2      	b.n	800325a <__libc_init_array+0x1e>
 8003274:	0800438c 	.word	0x0800438c
 8003278:	0800438c 	.word	0x0800438c
 800327c:	0800438c 	.word	0x0800438c
 8003280:	08004390 	.word	0x08004390

08003284 <memset>:
 8003284:	0003      	movs	r3, r0
 8003286:	1882      	adds	r2, r0, r2
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	7019      	strb	r1, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <iprintf>:
 8003294:	b40f      	push	{r0, r1, r2, r3}
 8003296:	4b0b      	ldr	r3, [pc, #44]	; (80032c4 <iprintf+0x30>)
 8003298:	b513      	push	{r0, r1, r4, lr}
 800329a:	681c      	ldr	r4, [r3, #0]
 800329c:	2c00      	cmp	r4, #0
 800329e:	d005      	beq.n	80032ac <iprintf+0x18>
 80032a0:	69a3      	ldr	r3, [r4, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d102      	bne.n	80032ac <iprintf+0x18>
 80032a6:	0020      	movs	r0, r4
 80032a8:	f000 f870 	bl	800338c <__sinit>
 80032ac:	ab05      	add	r3, sp, #20
 80032ae:	0020      	movs	r0, r4
 80032b0:	9a04      	ldr	r2, [sp, #16]
 80032b2:	68a1      	ldr	r1, [r4, #8]
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	f000 f9cd 	bl	8003654 <_vfiprintf_r>
 80032ba:	bc16      	pop	{r1, r2, r4}
 80032bc:	bc08      	pop	{r3}
 80032be:	b004      	add	sp, #16
 80032c0:	4718      	bx	r3
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	2000000c 	.word	0x2000000c

080032c8 <std>:
 80032c8:	2300      	movs	r3, #0
 80032ca:	b510      	push	{r4, lr}
 80032cc:	0004      	movs	r4, r0
 80032ce:	6003      	str	r3, [r0, #0]
 80032d0:	6043      	str	r3, [r0, #4]
 80032d2:	6083      	str	r3, [r0, #8]
 80032d4:	8181      	strh	r1, [r0, #12]
 80032d6:	6643      	str	r3, [r0, #100]	; 0x64
 80032d8:	0019      	movs	r1, r3
 80032da:	81c2      	strh	r2, [r0, #14]
 80032dc:	6103      	str	r3, [r0, #16]
 80032de:	6143      	str	r3, [r0, #20]
 80032e0:	6183      	str	r3, [r0, #24]
 80032e2:	2208      	movs	r2, #8
 80032e4:	305c      	adds	r0, #92	; 0x5c
 80032e6:	f7ff ffcd 	bl	8003284 <memset>
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <std+0x38>)
 80032ec:	6224      	str	r4, [r4, #32]
 80032ee:	6263      	str	r3, [r4, #36]	; 0x24
 80032f0:	4b04      	ldr	r3, [pc, #16]	; (8003304 <std+0x3c>)
 80032f2:	62a3      	str	r3, [r4, #40]	; 0x28
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <std+0x40>)
 80032f6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <std+0x44>)
 80032fa:	6323      	str	r3, [r4, #48]	; 0x30
 80032fc:	bd10      	pop	{r4, pc}
 80032fe:	46c0      	nop			; (mov r8, r8)
 8003300:	08003bf1 	.word	0x08003bf1
 8003304:	08003c19 	.word	0x08003c19
 8003308:	08003c51 	.word	0x08003c51
 800330c:	08003c7d 	.word	0x08003c7d

08003310 <_cleanup_r>:
 8003310:	b510      	push	{r4, lr}
 8003312:	4902      	ldr	r1, [pc, #8]	; (800331c <_cleanup_r+0xc>)
 8003314:	f000 f8ba 	bl	800348c <_fwalk_reent>
 8003318:	bd10      	pop	{r4, pc}
 800331a:	46c0      	nop			; (mov r8, r8)
 800331c:	08003f89 	.word	0x08003f89

08003320 <__sfmoreglue>:
 8003320:	b570      	push	{r4, r5, r6, lr}
 8003322:	2568      	movs	r5, #104	; 0x68
 8003324:	1e4a      	subs	r2, r1, #1
 8003326:	4355      	muls	r5, r2
 8003328:	000e      	movs	r6, r1
 800332a:	0029      	movs	r1, r5
 800332c:	3174      	adds	r1, #116	; 0x74
 800332e:	f000 f8f3 	bl	8003518 <_malloc_r>
 8003332:	1e04      	subs	r4, r0, #0
 8003334:	d008      	beq.n	8003348 <__sfmoreglue+0x28>
 8003336:	2100      	movs	r1, #0
 8003338:	002a      	movs	r2, r5
 800333a:	6001      	str	r1, [r0, #0]
 800333c:	6046      	str	r6, [r0, #4]
 800333e:	300c      	adds	r0, #12
 8003340:	60a0      	str	r0, [r4, #8]
 8003342:	3268      	adds	r2, #104	; 0x68
 8003344:	f7ff ff9e 	bl	8003284 <memset>
 8003348:	0020      	movs	r0, r4
 800334a:	bd70      	pop	{r4, r5, r6, pc}

0800334c <__sfp_lock_acquire>:
 800334c:	b510      	push	{r4, lr}
 800334e:	4802      	ldr	r0, [pc, #8]	; (8003358 <__sfp_lock_acquire+0xc>)
 8003350:	f000 f8bd 	bl	80034ce <__retarget_lock_acquire_recursive>
 8003354:	bd10      	pop	{r4, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	2000016d 	.word	0x2000016d

0800335c <__sfp_lock_release>:
 800335c:	b510      	push	{r4, lr}
 800335e:	4802      	ldr	r0, [pc, #8]	; (8003368 <__sfp_lock_release+0xc>)
 8003360:	f000 f8b6 	bl	80034d0 <__retarget_lock_release_recursive>
 8003364:	bd10      	pop	{r4, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	2000016d 	.word	0x2000016d

0800336c <__sinit_lock_acquire>:
 800336c:	b510      	push	{r4, lr}
 800336e:	4802      	ldr	r0, [pc, #8]	; (8003378 <__sinit_lock_acquire+0xc>)
 8003370:	f000 f8ad 	bl	80034ce <__retarget_lock_acquire_recursive>
 8003374:	bd10      	pop	{r4, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	2000016e 	.word	0x2000016e

0800337c <__sinit_lock_release>:
 800337c:	b510      	push	{r4, lr}
 800337e:	4802      	ldr	r0, [pc, #8]	; (8003388 <__sinit_lock_release+0xc>)
 8003380:	f000 f8a6 	bl	80034d0 <__retarget_lock_release_recursive>
 8003384:	bd10      	pop	{r4, pc}
 8003386:	46c0      	nop			; (mov r8, r8)
 8003388:	2000016e 	.word	0x2000016e

0800338c <__sinit>:
 800338c:	b513      	push	{r0, r1, r4, lr}
 800338e:	0004      	movs	r4, r0
 8003390:	f7ff ffec 	bl	800336c <__sinit_lock_acquire>
 8003394:	69a3      	ldr	r3, [r4, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d002      	beq.n	80033a0 <__sinit+0x14>
 800339a:	f7ff ffef 	bl	800337c <__sinit_lock_release>
 800339e:	bd13      	pop	{r0, r1, r4, pc}
 80033a0:	64a3      	str	r3, [r4, #72]	; 0x48
 80033a2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80033a4:	6523      	str	r3, [r4, #80]	; 0x50
 80033a6:	4b13      	ldr	r3, [pc, #76]	; (80033f4 <__sinit+0x68>)
 80033a8:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <__sinit+0x6c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	d101      	bne.n	80033b8 <__sinit+0x2c>
 80033b4:	2301      	movs	r3, #1
 80033b6:	61a3      	str	r3, [r4, #24]
 80033b8:	0020      	movs	r0, r4
 80033ba:	f000 f81f 	bl	80033fc <__sfp>
 80033be:	6060      	str	r0, [r4, #4]
 80033c0:	0020      	movs	r0, r4
 80033c2:	f000 f81b 	bl	80033fc <__sfp>
 80033c6:	60a0      	str	r0, [r4, #8]
 80033c8:	0020      	movs	r0, r4
 80033ca:	f000 f817 	bl	80033fc <__sfp>
 80033ce:	2200      	movs	r2, #0
 80033d0:	2104      	movs	r1, #4
 80033d2:	60e0      	str	r0, [r4, #12]
 80033d4:	6860      	ldr	r0, [r4, #4]
 80033d6:	f7ff ff77 	bl	80032c8 <std>
 80033da:	2201      	movs	r2, #1
 80033dc:	2109      	movs	r1, #9
 80033de:	68a0      	ldr	r0, [r4, #8]
 80033e0:	f7ff ff72 	bl	80032c8 <std>
 80033e4:	2202      	movs	r2, #2
 80033e6:	2112      	movs	r1, #18
 80033e8:	68e0      	ldr	r0, [r4, #12]
 80033ea:	f7ff ff6d 	bl	80032c8 <std>
 80033ee:	2301      	movs	r3, #1
 80033f0:	61a3      	str	r3, [r4, #24]
 80033f2:	e7d2      	b.n	800339a <__sinit+0xe>
 80033f4:	080042ec 	.word	0x080042ec
 80033f8:	08003311 	.word	0x08003311

080033fc <__sfp>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	0007      	movs	r7, r0
 8003400:	f7ff ffa4 	bl	800334c <__sfp_lock_acquire>
 8003404:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <__sfp+0x88>)
 8003406:	681e      	ldr	r6, [r3, #0]
 8003408:	69b3      	ldr	r3, [r6, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d102      	bne.n	8003414 <__sfp+0x18>
 800340e:	0030      	movs	r0, r6
 8003410:	f7ff ffbc 	bl	800338c <__sinit>
 8003414:	3648      	adds	r6, #72	; 0x48
 8003416:	68b4      	ldr	r4, [r6, #8]
 8003418:	6873      	ldr	r3, [r6, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	d504      	bpl.n	8003428 <__sfp+0x2c>
 800341e:	6833      	ldr	r3, [r6, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d022      	beq.n	800346a <__sfp+0x6e>
 8003424:	6836      	ldr	r6, [r6, #0]
 8003426:	e7f6      	b.n	8003416 <__sfp+0x1a>
 8003428:	220c      	movs	r2, #12
 800342a:	5ea5      	ldrsh	r5, [r4, r2]
 800342c:	2d00      	cmp	r5, #0
 800342e:	d11a      	bne.n	8003466 <__sfp+0x6a>
 8003430:	0020      	movs	r0, r4
 8003432:	4b15      	ldr	r3, [pc, #84]	; (8003488 <__sfp+0x8c>)
 8003434:	3058      	adds	r0, #88	; 0x58
 8003436:	60e3      	str	r3, [r4, #12]
 8003438:	6665      	str	r5, [r4, #100]	; 0x64
 800343a:	f000 f847 	bl	80034cc <__retarget_lock_init_recursive>
 800343e:	f7ff ff8d 	bl	800335c <__sfp_lock_release>
 8003442:	0020      	movs	r0, r4
 8003444:	2208      	movs	r2, #8
 8003446:	0029      	movs	r1, r5
 8003448:	6025      	str	r5, [r4, #0]
 800344a:	60a5      	str	r5, [r4, #8]
 800344c:	6065      	str	r5, [r4, #4]
 800344e:	6125      	str	r5, [r4, #16]
 8003450:	6165      	str	r5, [r4, #20]
 8003452:	61a5      	str	r5, [r4, #24]
 8003454:	305c      	adds	r0, #92	; 0x5c
 8003456:	f7ff ff15 	bl	8003284 <memset>
 800345a:	6365      	str	r5, [r4, #52]	; 0x34
 800345c:	63a5      	str	r5, [r4, #56]	; 0x38
 800345e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003460:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003462:	0020      	movs	r0, r4
 8003464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003466:	3468      	adds	r4, #104	; 0x68
 8003468:	e7d7      	b.n	800341a <__sfp+0x1e>
 800346a:	2104      	movs	r1, #4
 800346c:	0038      	movs	r0, r7
 800346e:	f7ff ff57 	bl	8003320 <__sfmoreglue>
 8003472:	1e04      	subs	r4, r0, #0
 8003474:	6030      	str	r0, [r6, #0]
 8003476:	d1d5      	bne.n	8003424 <__sfp+0x28>
 8003478:	f7ff ff70 	bl	800335c <__sfp_lock_release>
 800347c:	230c      	movs	r3, #12
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	e7ef      	b.n	8003462 <__sfp+0x66>
 8003482:	46c0      	nop			; (mov r8, r8)
 8003484:	080042ec 	.word	0x080042ec
 8003488:	ffff0001 	.word	0xffff0001

0800348c <_fwalk_reent>:
 800348c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800348e:	0004      	movs	r4, r0
 8003490:	0006      	movs	r6, r0
 8003492:	2700      	movs	r7, #0
 8003494:	9101      	str	r1, [sp, #4]
 8003496:	3448      	adds	r4, #72	; 0x48
 8003498:	6863      	ldr	r3, [r4, #4]
 800349a:	68a5      	ldr	r5, [r4, #8]
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	9b00      	ldr	r3, [sp, #0]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	d504      	bpl.n	80034b0 <_fwalk_reent+0x24>
 80034a6:	6824      	ldr	r4, [r4, #0]
 80034a8:	2c00      	cmp	r4, #0
 80034aa:	d1f5      	bne.n	8003498 <_fwalk_reent+0xc>
 80034ac:	0038      	movs	r0, r7
 80034ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80034b0:	89ab      	ldrh	r3, [r5, #12]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d908      	bls.n	80034c8 <_fwalk_reent+0x3c>
 80034b6:	220e      	movs	r2, #14
 80034b8:	5eab      	ldrsh	r3, [r5, r2]
 80034ba:	3301      	adds	r3, #1
 80034bc:	d004      	beq.n	80034c8 <_fwalk_reent+0x3c>
 80034be:	0029      	movs	r1, r5
 80034c0:	0030      	movs	r0, r6
 80034c2:	9b01      	ldr	r3, [sp, #4]
 80034c4:	4798      	blx	r3
 80034c6:	4307      	orrs	r7, r0
 80034c8:	3568      	adds	r5, #104	; 0x68
 80034ca:	e7e8      	b.n	800349e <_fwalk_reent+0x12>

080034cc <__retarget_lock_init_recursive>:
 80034cc:	4770      	bx	lr

080034ce <__retarget_lock_acquire_recursive>:
 80034ce:	4770      	bx	lr

080034d0 <__retarget_lock_release_recursive>:
 80034d0:	4770      	bx	lr
	...

080034d4 <sbrk_aligned>:
 80034d4:	b570      	push	{r4, r5, r6, lr}
 80034d6:	4e0f      	ldr	r6, [pc, #60]	; (8003514 <sbrk_aligned+0x40>)
 80034d8:	000d      	movs	r5, r1
 80034da:	6831      	ldr	r1, [r6, #0]
 80034dc:	0004      	movs	r4, r0
 80034de:	2900      	cmp	r1, #0
 80034e0:	d102      	bne.n	80034e8 <sbrk_aligned+0x14>
 80034e2:	f000 fb73 	bl	8003bcc <_sbrk_r>
 80034e6:	6030      	str	r0, [r6, #0]
 80034e8:	0029      	movs	r1, r5
 80034ea:	0020      	movs	r0, r4
 80034ec:	f000 fb6e 	bl	8003bcc <_sbrk_r>
 80034f0:	1c43      	adds	r3, r0, #1
 80034f2:	d00a      	beq.n	800350a <sbrk_aligned+0x36>
 80034f4:	2303      	movs	r3, #3
 80034f6:	1cc5      	adds	r5, r0, #3
 80034f8:	439d      	bics	r5, r3
 80034fa:	42a8      	cmp	r0, r5
 80034fc:	d007      	beq.n	800350e <sbrk_aligned+0x3a>
 80034fe:	1a29      	subs	r1, r5, r0
 8003500:	0020      	movs	r0, r4
 8003502:	f000 fb63 	bl	8003bcc <_sbrk_r>
 8003506:	1c43      	adds	r3, r0, #1
 8003508:	d101      	bne.n	800350e <sbrk_aligned+0x3a>
 800350a:	2501      	movs	r5, #1
 800350c:	426d      	negs	r5, r5
 800350e:	0028      	movs	r0, r5
 8003510:	bd70      	pop	{r4, r5, r6, pc}
 8003512:	46c0      	nop			; (mov r8, r8)
 8003514:	20000174 	.word	0x20000174

08003518 <_malloc_r>:
 8003518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800351a:	2203      	movs	r2, #3
 800351c:	1ccb      	adds	r3, r1, #3
 800351e:	4393      	bics	r3, r2
 8003520:	3308      	adds	r3, #8
 8003522:	0006      	movs	r6, r0
 8003524:	001f      	movs	r7, r3
 8003526:	2b0c      	cmp	r3, #12
 8003528:	d232      	bcs.n	8003590 <_malloc_r+0x78>
 800352a:	270c      	movs	r7, #12
 800352c:	42b9      	cmp	r1, r7
 800352e:	d831      	bhi.n	8003594 <_malloc_r+0x7c>
 8003530:	0030      	movs	r0, r6
 8003532:	f000 fdf5 	bl	8004120 <__malloc_lock>
 8003536:	4d32      	ldr	r5, [pc, #200]	; (8003600 <_malloc_r+0xe8>)
 8003538:	682b      	ldr	r3, [r5, #0]
 800353a:	001c      	movs	r4, r3
 800353c:	2c00      	cmp	r4, #0
 800353e:	d12e      	bne.n	800359e <_malloc_r+0x86>
 8003540:	0039      	movs	r1, r7
 8003542:	0030      	movs	r0, r6
 8003544:	f7ff ffc6 	bl	80034d4 <sbrk_aligned>
 8003548:	0004      	movs	r4, r0
 800354a:	1c43      	adds	r3, r0, #1
 800354c:	d11e      	bne.n	800358c <_malloc_r+0x74>
 800354e:	682c      	ldr	r4, [r5, #0]
 8003550:	0025      	movs	r5, r4
 8003552:	2d00      	cmp	r5, #0
 8003554:	d14a      	bne.n	80035ec <_malloc_r+0xd4>
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0029      	movs	r1, r5
 800355a:	18e3      	adds	r3, r4, r3
 800355c:	0030      	movs	r0, r6
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	f000 fb34 	bl	8003bcc <_sbrk_r>
 8003564:	9b01      	ldr	r3, [sp, #4]
 8003566:	4283      	cmp	r3, r0
 8003568:	d143      	bne.n	80035f2 <_malloc_r+0xda>
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	3703      	adds	r7, #3
 800356e:	1aff      	subs	r7, r7, r3
 8003570:	2303      	movs	r3, #3
 8003572:	439f      	bics	r7, r3
 8003574:	3708      	adds	r7, #8
 8003576:	2f0c      	cmp	r7, #12
 8003578:	d200      	bcs.n	800357c <_malloc_r+0x64>
 800357a:	270c      	movs	r7, #12
 800357c:	0039      	movs	r1, r7
 800357e:	0030      	movs	r0, r6
 8003580:	f7ff ffa8 	bl	80034d4 <sbrk_aligned>
 8003584:	1c43      	adds	r3, r0, #1
 8003586:	d034      	beq.n	80035f2 <_malloc_r+0xda>
 8003588:	6823      	ldr	r3, [r4, #0]
 800358a:	19df      	adds	r7, r3, r7
 800358c:	6027      	str	r7, [r4, #0]
 800358e:	e013      	b.n	80035b8 <_malloc_r+0xa0>
 8003590:	2b00      	cmp	r3, #0
 8003592:	dacb      	bge.n	800352c <_malloc_r+0x14>
 8003594:	230c      	movs	r3, #12
 8003596:	2500      	movs	r5, #0
 8003598:	6033      	str	r3, [r6, #0]
 800359a:	0028      	movs	r0, r5
 800359c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800359e:	6822      	ldr	r2, [r4, #0]
 80035a0:	1bd1      	subs	r1, r2, r7
 80035a2:	d420      	bmi.n	80035e6 <_malloc_r+0xce>
 80035a4:	290b      	cmp	r1, #11
 80035a6:	d917      	bls.n	80035d8 <_malloc_r+0xc0>
 80035a8:	19e2      	adds	r2, r4, r7
 80035aa:	6027      	str	r7, [r4, #0]
 80035ac:	42a3      	cmp	r3, r4
 80035ae:	d111      	bne.n	80035d4 <_malloc_r+0xbc>
 80035b0:	602a      	str	r2, [r5, #0]
 80035b2:	6863      	ldr	r3, [r4, #4]
 80035b4:	6011      	str	r1, [r2, #0]
 80035b6:	6053      	str	r3, [r2, #4]
 80035b8:	0030      	movs	r0, r6
 80035ba:	0025      	movs	r5, r4
 80035bc:	f000 fdb8 	bl	8004130 <__malloc_unlock>
 80035c0:	2207      	movs	r2, #7
 80035c2:	350b      	adds	r5, #11
 80035c4:	1d23      	adds	r3, r4, #4
 80035c6:	4395      	bics	r5, r2
 80035c8:	1aea      	subs	r2, r5, r3
 80035ca:	429d      	cmp	r5, r3
 80035cc:	d0e5      	beq.n	800359a <_malloc_r+0x82>
 80035ce:	1b5b      	subs	r3, r3, r5
 80035d0:	50a3      	str	r3, [r4, r2]
 80035d2:	e7e2      	b.n	800359a <_malloc_r+0x82>
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	e7ec      	b.n	80035b2 <_malloc_r+0x9a>
 80035d8:	6862      	ldr	r2, [r4, #4]
 80035da:	42a3      	cmp	r3, r4
 80035dc:	d101      	bne.n	80035e2 <_malloc_r+0xca>
 80035de:	602a      	str	r2, [r5, #0]
 80035e0:	e7ea      	b.n	80035b8 <_malloc_r+0xa0>
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	e7e8      	b.n	80035b8 <_malloc_r+0xa0>
 80035e6:	0023      	movs	r3, r4
 80035e8:	6864      	ldr	r4, [r4, #4]
 80035ea:	e7a7      	b.n	800353c <_malloc_r+0x24>
 80035ec:	002c      	movs	r4, r5
 80035ee:	686d      	ldr	r5, [r5, #4]
 80035f0:	e7af      	b.n	8003552 <_malloc_r+0x3a>
 80035f2:	230c      	movs	r3, #12
 80035f4:	0030      	movs	r0, r6
 80035f6:	6033      	str	r3, [r6, #0]
 80035f8:	f000 fd9a 	bl	8004130 <__malloc_unlock>
 80035fc:	e7cd      	b.n	800359a <_malloc_r+0x82>
 80035fe:	46c0      	nop			; (mov r8, r8)
 8003600:	20000170 	.word	0x20000170

08003604 <__sfputc_r>:
 8003604:	6893      	ldr	r3, [r2, #8]
 8003606:	b510      	push	{r4, lr}
 8003608:	3b01      	subs	r3, #1
 800360a:	6093      	str	r3, [r2, #8]
 800360c:	2b00      	cmp	r3, #0
 800360e:	da04      	bge.n	800361a <__sfputc_r+0x16>
 8003610:	6994      	ldr	r4, [r2, #24]
 8003612:	42a3      	cmp	r3, r4
 8003614:	db07      	blt.n	8003626 <__sfputc_r+0x22>
 8003616:	290a      	cmp	r1, #10
 8003618:	d005      	beq.n	8003626 <__sfputc_r+0x22>
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	1c58      	adds	r0, r3, #1
 800361e:	6010      	str	r0, [r2, #0]
 8003620:	7019      	strb	r1, [r3, #0]
 8003622:	0008      	movs	r0, r1
 8003624:	bd10      	pop	{r4, pc}
 8003626:	f000 fb2f 	bl	8003c88 <__swbuf_r>
 800362a:	0001      	movs	r1, r0
 800362c:	e7f9      	b.n	8003622 <__sfputc_r+0x1e>

0800362e <__sfputs_r>:
 800362e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003630:	0006      	movs	r6, r0
 8003632:	000f      	movs	r7, r1
 8003634:	0014      	movs	r4, r2
 8003636:	18d5      	adds	r5, r2, r3
 8003638:	42ac      	cmp	r4, r5
 800363a:	d101      	bne.n	8003640 <__sfputs_r+0x12>
 800363c:	2000      	movs	r0, #0
 800363e:	e007      	b.n	8003650 <__sfputs_r+0x22>
 8003640:	7821      	ldrb	r1, [r4, #0]
 8003642:	003a      	movs	r2, r7
 8003644:	0030      	movs	r0, r6
 8003646:	f7ff ffdd 	bl	8003604 <__sfputc_r>
 800364a:	3401      	adds	r4, #1
 800364c:	1c43      	adds	r3, r0, #1
 800364e:	d1f3      	bne.n	8003638 <__sfputs_r+0xa>
 8003650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003654 <_vfiprintf_r>:
 8003654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003656:	b0a1      	sub	sp, #132	; 0x84
 8003658:	0006      	movs	r6, r0
 800365a:	000c      	movs	r4, r1
 800365c:	001f      	movs	r7, r3
 800365e:	9203      	str	r2, [sp, #12]
 8003660:	2800      	cmp	r0, #0
 8003662:	d004      	beq.n	800366e <_vfiprintf_r+0x1a>
 8003664:	6983      	ldr	r3, [r0, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <_vfiprintf_r+0x1a>
 800366a:	f7ff fe8f 	bl	800338c <__sinit>
 800366e:	4b8e      	ldr	r3, [pc, #568]	; (80038a8 <_vfiprintf_r+0x254>)
 8003670:	429c      	cmp	r4, r3
 8003672:	d11c      	bne.n	80036ae <_vfiprintf_r+0x5a>
 8003674:	6874      	ldr	r4, [r6, #4]
 8003676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003678:	07db      	lsls	r3, r3, #31
 800367a:	d405      	bmi.n	8003688 <_vfiprintf_r+0x34>
 800367c:	89a3      	ldrh	r3, [r4, #12]
 800367e:	059b      	lsls	r3, r3, #22
 8003680:	d402      	bmi.n	8003688 <_vfiprintf_r+0x34>
 8003682:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003684:	f7ff ff23 	bl	80034ce <__retarget_lock_acquire_recursive>
 8003688:	89a3      	ldrh	r3, [r4, #12]
 800368a:	071b      	lsls	r3, r3, #28
 800368c:	d502      	bpl.n	8003694 <_vfiprintf_r+0x40>
 800368e:	6923      	ldr	r3, [r4, #16]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11d      	bne.n	80036d0 <_vfiprintf_r+0x7c>
 8003694:	0021      	movs	r1, r4
 8003696:	0030      	movs	r0, r6
 8003698:	f000 fb60 	bl	8003d5c <__swsetup_r>
 800369c:	2800      	cmp	r0, #0
 800369e:	d017      	beq.n	80036d0 <_vfiprintf_r+0x7c>
 80036a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036a2:	07db      	lsls	r3, r3, #31
 80036a4:	d50d      	bpl.n	80036c2 <_vfiprintf_r+0x6e>
 80036a6:	2001      	movs	r0, #1
 80036a8:	4240      	negs	r0, r0
 80036aa:	b021      	add	sp, #132	; 0x84
 80036ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ae:	4b7f      	ldr	r3, [pc, #508]	; (80038ac <_vfiprintf_r+0x258>)
 80036b0:	429c      	cmp	r4, r3
 80036b2:	d101      	bne.n	80036b8 <_vfiprintf_r+0x64>
 80036b4:	68b4      	ldr	r4, [r6, #8]
 80036b6:	e7de      	b.n	8003676 <_vfiprintf_r+0x22>
 80036b8:	4b7d      	ldr	r3, [pc, #500]	; (80038b0 <_vfiprintf_r+0x25c>)
 80036ba:	429c      	cmp	r4, r3
 80036bc:	d1db      	bne.n	8003676 <_vfiprintf_r+0x22>
 80036be:	68f4      	ldr	r4, [r6, #12]
 80036c0:	e7d9      	b.n	8003676 <_vfiprintf_r+0x22>
 80036c2:	89a3      	ldrh	r3, [r4, #12]
 80036c4:	059b      	lsls	r3, r3, #22
 80036c6:	d4ee      	bmi.n	80036a6 <_vfiprintf_r+0x52>
 80036c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ca:	f7ff ff01 	bl	80034d0 <__retarget_lock_release_recursive>
 80036ce:	e7ea      	b.n	80036a6 <_vfiprintf_r+0x52>
 80036d0:	2300      	movs	r3, #0
 80036d2:	ad08      	add	r5, sp, #32
 80036d4:	616b      	str	r3, [r5, #20]
 80036d6:	3320      	adds	r3, #32
 80036d8:	766b      	strb	r3, [r5, #25]
 80036da:	3310      	adds	r3, #16
 80036dc:	76ab      	strb	r3, [r5, #26]
 80036de:	9707      	str	r7, [sp, #28]
 80036e0:	9f03      	ldr	r7, [sp, #12]
 80036e2:	783b      	ldrb	r3, [r7, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <_vfiprintf_r+0x98>
 80036e8:	2b25      	cmp	r3, #37	; 0x25
 80036ea:	d14e      	bne.n	800378a <_vfiprintf_r+0x136>
 80036ec:	9b03      	ldr	r3, [sp, #12]
 80036ee:	1afb      	subs	r3, r7, r3
 80036f0:	9305      	str	r3, [sp, #20]
 80036f2:	9b03      	ldr	r3, [sp, #12]
 80036f4:	429f      	cmp	r7, r3
 80036f6:	d00d      	beq.n	8003714 <_vfiprintf_r+0xc0>
 80036f8:	9b05      	ldr	r3, [sp, #20]
 80036fa:	0021      	movs	r1, r4
 80036fc:	0030      	movs	r0, r6
 80036fe:	9a03      	ldr	r2, [sp, #12]
 8003700:	f7ff ff95 	bl	800362e <__sfputs_r>
 8003704:	1c43      	adds	r3, r0, #1
 8003706:	d100      	bne.n	800370a <_vfiprintf_r+0xb6>
 8003708:	e0b5      	b.n	8003876 <_vfiprintf_r+0x222>
 800370a:	696a      	ldr	r2, [r5, #20]
 800370c:	9b05      	ldr	r3, [sp, #20]
 800370e:	4694      	mov	ip, r2
 8003710:	4463      	add	r3, ip
 8003712:	616b      	str	r3, [r5, #20]
 8003714:	783b      	ldrb	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d100      	bne.n	800371c <_vfiprintf_r+0xc8>
 800371a:	e0ac      	b.n	8003876 <_vfiprintf_r+0x222>
 800371c:	2201      	movs	r2, #1
 800371e:	1c7b      	adds	r3, r7, #1
 8003720:	9303      	str	r3, [sp, #12]
 8003722:	2300      	movs	r3, #0
 8003724:	4252      	negs	r2, r2
 8003726:	606a      	str	r2, [r5, #4]
 8003728:	a904      	add	r1, sp, #16
 800372a:	3254      	adds	r2, #84	; 0x54
 800372c:	1852      	adds	r2, r2, r1
 800372e:	602b      	str	r3, [r5, #0]
 8003730:	60eb      	str	r3, [r5, #12]
 8003732:	60ab      	str	r3, [r5, #8]
 8003734:	7013      	strb	r3, [r2, #0]
 8003736:	65ab      	str	r3, [r5, #88]	; 0x58
 8003738:	9b03      	ldr	r3, [sp, #12]
 800373a:	2205      	movs	r2, #5
 800373c:	7819      	ldrb	r1, [r3, #0]
 800373e:	485d      	ldr	r0, [pc, #372]	; (80038b4 <_vfiprintf_r+0x260>)
 8003740:	f000 fce2 	bl	8004108 <memchr>
 8003744:	9b03      	ldr	r3, [sp, #12]
 8003746:	1c5f      	adds	r7, r3, #1
 8003748:	2800      	cmp	r0, #0
 800374a:	d120      	bne.n	800378e <_vfiprintf_r+0x13a>
 800374c:	682a      	ldr	r2, [r5, #0]
 800374e:	06d3      	lsls	r3, r2, #27
 8003750:	d504      	bpl.n	800375c <_vfiprintf_r+0x108>
 8003752:	2353      	movs	r3, #83	; 0x53
 8003754:	a904      	add	r1, sp, #16
 8003756:	185b      	adds	r3, r3, r1
 8003758:	2120      	movs	r1, #32
 800375a:	7019      	strb	r1, [r3, #0]
 800375c:	0713      	lsls	r3, r2, #28
 800375e:	d504      	bpl.n	800376a <_vfiprintf_r+0x116>
 8003760:	2353      	movs	r3, #83	; 0x53
 8003762:	a904      	add	r1, sp, #16
 8003764:	185b      	adds	r3, r3, r1
 8003766:	212b      	movs	r1, #43	; 0x2b
 8003768:	7019      	strb	r1, [r3, #0]
 800376a:	9b03      	ldr	r3, [sp, #12]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b2a      	cmp	r3, #42	; 0x2a
 8003770:	d016      	beq.n	80037a0 <_vfiprintf_r+0x14c>
 8003772:	2100      	movs	r1, #0
 8003774:	68eb      	ldr	r3, [r5, #12]
 8003776:	9f03      	ldr	r7, [sp, #12]
 8003778:	783a      	ldrb	r2, [r7, #0]
 800377a:	1c78      	adds	r0, r7, #1
 800377c:	3a30      	subs	r2, #48	; 0x30
 800377e:	4684      	mov	ip, r0
 8003780:	2a09      	cmp	r2, #9
 8003782:	d94f      	bls.n	8003824 <_vfiprintf_r+0x1d0>
 8003784:	2900      	cmp	r1, #0
 8003786:	d111      	bne.n	80037ac <_vfiprintf_r+0x158>
 8003788:	e017      	b.n	80037ba <_vfiprintf_r+0x166>
 800378a:	3701      	adds	r7, #1
 800378c:	e7a9      	b.n	80036e2 <_vfiprintf_r+0x8e>
 800378e:	4b49      	ldr	r3, [pc, #292]	; (80038b4 <_vfiprintf_r+0x260>)
 8003790:	682a      	ldr	r2, [r5, #0]
 8003792:	1ac0      	subs	r0, r0, r3
 8003794:	2301      	movs	r3, #1
 8003796:	4083      	lsls	r3, r0
 8003798:	4313      	orrs	r3, r2
 800379a:	602b      	str	r3, [r5, #0]
 800379c:	9703      	str	r7, [sp, #12]
 800379e:	e7cb      	b.n	8003738 <_vfiprintf_r+0xe4>
 80037a0:	9b07      	ldr	r3, [sp, #28]
 80037a2:	1d19      	adds	r1, r3, #4
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	9107      	str	r1, [sp, #28]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	db01      	blt.n	80037b0 <_vfiprintf_r+0x15c>
 80037ac:	930b      	str	r3, [sp, #44]	; 0x2c
 80037ae:	e004      	b.n	80037ba <_vfiprintf_r+0x166>
 80037b0:	425b      	negs	r3, r3
 80037b2:	60eb      	str	r3, [r5, #12]
 80037b4:	2302      	movs	r3, #2
 80037b6:	4313      	orrs	r3, r2
 80037b8:	602b      	str	r3, [r5, #0]
 80037ba:	783b      	ldrb	r3, [r7, #0]
 80037bc:	2b2e      	cmp	r3, #46	; 0x2e
 80037be:	d10a      	bne.n	80037d6 <_vfiprintf_r+0x182>
 80037c0:	787b      	ldrb	r3, [r7, #1]
 80037c2:	2b2a      	cmp	r3, #42	; 0x2a
 80037c4:	d137      	bne.n	8003836 <_vfiprintf_r+0x1e2>
 80037c6:	9b07      	ldr	r3, [sp, #28]
 80037c8:	3702      	adds	r7, #2
 80037ca:	1d1a      	adds	r2, r3, #4
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	9207      	str	r2, [sp, #28]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	db2d      	blt.n	8003830 <_vfiprintf_r+0x1dc>
 80037d4:	9309      	str	r3, [sp, #36]	; 0x24
 80037d6:	2203      	movs	r2, #3
 80037d8:	7839      	ldrb	r1, [r7, #0]
 80037da:	4837      	ldr	r0, [pc, #220]	; (80038b8 <_vfiprintf_r+0x264>)
 80037dc:	f000 fc94 	bl	8004108 <memchr>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d007      	beq.n	80037f4 <_vfiprintf_r+0x1a0>
 80037e4:	4b34      	ldr	r3, [pc, #208]	; (80038b8 <_vfiprintf_r+0x264>)
 80037e6:	682a      	ldr	r2, [r5, #0]
 80037e8:	1ac0      	subs	r0, r0, r3
 80037ea:	2340      	movs	r3, #64	; 0x40
 80037ec:	4083      	lsls	r3, r0
 80037ee:	4313      	orrs	r3, r2
 80037f0:	3701      	adds	r7, #1
 80037f2:	602b      	str	r3, [r5, #0]
 80037f4:	7839      	ldrb	r1, [r7, #0]
 80037f6:	1c7b      	adds	r3, r7, #1
 80037f8:	2206      	movs	r2, #6
 80037fa:	4830      	ldr	r0, [pc, #192]	; (80038bc <_vfiprintf_r+0x268>)
 80037fc:	9303      	str	r3, [sp, #12]
 80037fe:	7629      	strb	r1, [r5, #24]
 8003800:	f000 fc82 	bl	8004108 <memchr>
 8003804:	2800      	cmp	r0, #0
 8003806:	d045      	beq.n	8003894 <_vfiprintf_r+0x240>
 8003808:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <_vfiprintf_r+0x26c>)
 800380a:	2b00      	cmp	r3, #0
 800380c:	d127      	bne.n	800385e <_vfiprintf_r+0x20a>
 800380e:	2207      	movs	r2, #7
 8003810:	9b07      	ldr	r3, [sp, #28]
 8003812:	3307      	adds	r3, #7
 8003814:	4393      	bics	r3, r2
 8003816:	3308      	adds	r3, #8
 8003818:	9307      	str	r3, [sp, #28]
 800381a:	696b      	ldr	r3, [r5, #20]
 800381c:	9a04      	ldr	r2, [sp, #16]
 800381e:	189b      	adds	r3, r3, r2
 8003820:	616b      	str	r3, [r5, #20]
 8003822:	e75d      	b.n	80036e0 <_vfiprintf_r+0x8c>
 8003824:	210a      	movs	r1, #10
 8003826:	434b      	muls	r3, r1
 8003828:	4667      	mov	r7, ip
 800382a:	189b      	adds	r3, r3, r2
 800382c:	3909      	subs	r1, #9
 800382e:	e7a3      	b.n	8003778 <_vfiprintf_r+0x124>
 8003830:	2301      	movs	r3, #1
 8003832:	425b      	negs	r3, r3
 8003834:	e7ce      	b.n	80037d4 <_vfiprintf_r+0x180>
 8003836:	2300      	movs	r3, #0
 8003838:	001a      	movs	r2, r3
 800383a:	3701      	adds	r7, #1
 800383c:	606b      	str	r3, [r5, #4]
 800383e:	7839      	ldrb	r1, [r7, #0]
 8003840:	1c78      	adds	r0, r7, #1
 8003842:	3930      	subs	r1, #48	; 0x30
 8003844:	4684      	mov	ip, r0
 8003846:	2909      	cmp	r1, #9
 8003848:	d903      	bls.n	8003852 <_vfiprintf_r+0x1fe>
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0c3      	beq.n	80037d6 <_vfiprintf_r+0x182>
 800384e:	9209      	str	r2, [sp, #36]	; 0x24
 8003850:	e7c1      	b.n	80037d6 <_vfiprintf_r+0x182>
 8003852:	230a      	movs	r3, #10
 8003854:	435a      	muls	r2, r3
 8003856:	4667      	mov	r7, ip
 8003858:	1852      	adds	r2, r2, r1
 800385a:	3b09      	subs	r3, #9
 800385c:	e7ef      	b.n	800383e <_vfiprintf_r+0x1ea>
 800385e:	ab07      	add	r3, sp, #28
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	0022      	movs	r2, r4
 8003864:	0029      	movs	r1, r5
 8003866:	0030      	movs	r0, r6
 8003868:	4b16      	ldr	r3, [pc, #88]	; (80038c4 <_vfiprintf_r+0x270>)
 800386a:	e000      	b.n	800386e <_vfiprintf_r+0x21a>
 800386c:	bf00      	nop
 800386e:	9004      	str	r0, [sp, #16]
 8003870:	9b04      	ldr	r3, [sp, #16]
 8003872:	3301      	adds	r3, #1
 8003874:	d1d1      	bne.n	800381a <_vfiprintf_r+0x1c6>
 8003876:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003878:	07db      	lsls	r3, r3, #31
 800387a:	d405      	bmi.n	8003888 <_vfiprintf_r+0x234>
 800387c:	89a3      	ldrh	r3, [r4, #12]
 800387e:	059b      	lsls	r3, r3, #22
 8003880:	d402      	bmi.n	8003888 <_vfiprintf_r+0x234>
 8003882:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003884:	f7ff fe24 	bl	80034d0 <__retarget_lock_release_recursive>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	065b      	lsls	r3, r3, #25
 800388c:	d500      	bpl.n	8003890 <_vfiprintf_r+0x23c>
 800388e:	e70a      	b.n	80036a6 <_vfiprintf_r+0x52>
 8003890:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003892:	e70a      	b.n	80036aa <_vfiprintf_r+0x56>
 8003894:	ab07      	add	r3, sp, #28
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	0022      	movs	r2, r4
 800389a:	0029      	movs	r1, r5
 800389c:	0030      	movs	r0, r6
 800389e:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <_vfiprintf_r+0x270>)
 80038a0:	f000 f882 	bl	80039a8 <_printf_i>
 80038a4:	e7e3      	b.n	800386e <_vfiprintf_r+0x21a>
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	08004310 	.word	0x08004310
 80038ac:	08004330 	.word	0x08004330
 80038b0:	080042f0 	.word	0x080042f0
 80038b4:	08004350 	.word	0x08004350
 80038b8:	08004356 	.word	0x08004356
 80038bc:	0800435a 	.word	0x0800435a
 80038c0:	00000000 	.word	0x00000000
 80038c4:	0800362f 	.word	0x0800362f

080038c8 <_printf_common>:
 80038c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80038ca:	0015      	movs	r5, r2
 80038cc:	9301      	str	r3, [sp, #4]
 80038ce:	688a      	ldr	r2, [r1, #8]
 80038d0:	690b      	ldr	r3, [r1, #16]
 80038d2:	000c      	movs	r4, r1
 80038d4:	9000      	str	r0, [sp, #0]
 80038d6:	4293      	cmp	r3, r2
 80038d8:	da00      	bge.n	80038dc <_printf_common+0x14>
 80038da:	0013      	movs	r3, r2
 80038dc:	0022      	movs	r2, r4
 80038de:	602b      	str	r3, [r5, #0]
 80038e0:	3243      	adds	r2, #67	; 0x43
 80038e2:	7812      	ldrb	r2, [r2, #0]
 80038e4:	2a00      	cmp	r2, #0
 80038e6:	d001      	beq.n	80038ec <_printf_common+0x24>
 80038e8:	3301      	adds	r3, #1
 80038ea:	602b      	str	r3, [r5, #0]
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	069b      	lsls	r3, r3, #26
 80038f0:	d502      	bpl.n	80038f8 <_printf_common+0x30>
 80038f2:	682b      	ldr	r3, [r5, #0]
 80038f4:	3302      	adds	r3, #2
 80038f6:	602b      	str	r3, [r5, #0]
 80038f8:	6822      	ldr	r2, [r4, #0]
 80038fa:	2306      	movs	r3, #6
 80038fc:	0017      	movs	r7, r2
 80038fe:	401f      	ands	r7, r3
 8003900:	421a      	tst	r2, r3
 8003902:	d027      	beq.n	8003954 <_printf_common+0x8c>
 8003904:	0023      	movs	r3, r4
 8003906:	3343      	adds	r3, #67	; 0x43
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	1e5a      	subs	r2, r3, #1
 800390c:	4193      	sbcs	r3, r2
 800390e:	6822      	ldr	r2, [r4, #0]
 8003910:	0692      	lsls	r2, r2, #26
 8003912:	d430      	bmi.n	8003976 <_printf_common+0xae>
 8003914:	0022      	movs	r2, r4
 8003916:	9901      	ldr	r1, [sp, #4]
 8003918:	9800      	ldr	r0, [sp, #0]
 800391a:	9e08      	ldr	r6, [sp, #32]
 800391c:	3243      	adds	r2, #67	; 0x43
 800391e:	47b0      	blx	r6
 8003920:	1c43      	adds	r3, r0, #1
 8003922:	d025      	beq.n	8003970 <_printf_common+0xa8>
 8003924:	2306      	movs	r3, #6
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	682a      	ldr	r2, [r5, #0]
 800392a:	68e1      	ldr	r1, [r4, #12]
 800392c:	2500      	movs	r5, #0
 800392e:	4003      	ands	r3, r0
 8003930:	2b04      	cmp	r3, #4
 8003932:	d103      	bne.n	800393c <_printf_common+0x74>
 8003934:	1a8d      	subs	r5, r1, r2
 8003936:	43eb      	mvns	r3, r5
 8003938:	17db      	asrs	r3, r3, #31
 800393a:	401d      	ands	r5, r3
 800393c:	68a3      	ldr	r3, [r4, #8]
 800393e:	6922      	ldr	r2, [r4, #16]
 8003940:	4293      	cmp	r3, r2
 8003942:	dd01      	ble.n	8003948 <_printf_common+0x80>
 8003944:	1a9b      	subs	r3, r3, r2
 8003946:	18ed      	adds	r5, r5, r3
 8003948:	2700      	movs	r7, #0
 800394a:	42bd      	cmp	r5, r7
 800394c:	d120      	bne.n	8003990 <_printf_common+0xc8>
 800394e:	2000      	movs	r0, #0
 8003950:	e010      	b.n	8003974 <_printf_common+0xac>
 8003952:	3701      	adds	r7, #1
 8003954:	68e3      	ldr	r3, [r4, #12]
 8003956:	682a      	ldr	r2, [r5, #0]
 8003958:	1a9b      	subs	r3, r3, r2
 800395a:	42bb      	cmp	r3, r7
 800395c:	ddd2      	ble.n	8003904 <_printf_common+0x3c>
 800395e:	0022      	movs	r2, r4
 8003960:	2301      	movs	r3, #1
 8003962:	9901      	ldr	r1, [sp, #4]
 8003964:	9800      	ldr	r0, [sp, #0]
 8003966:	9e08      	ldr	r6, [sp, #32]
 8003968:	3219      	adds	r2, #25
 800396a:	47b0      	blx	r6
 800396c:	1c43      	adds	r3, r0, #1
 800396e:	d1f0      	bne.n	8003952 <_printf_common+0x8a>
 8003970:	2001      	movs	r0, #1
 8003972:	4240      	negs	r0, r0
 8003974:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003976:	2030      	movs	r0, #48	; 0x30
 8003978:	18e1      	adds	r1, r4, r3
 800397a:	3143      	adds	r1, #67	; 0x43
 800397c:	7008      	strb	r0, [r1, #0]
 800397e:	0021      	movs	r1, r4
 8003980:	1c5a      	adds	r2, r3, #1
 8003982:	3145      	adds	r1, #69	; 0x45
 8003984:	7809      	ldrb	r1, [r1, #0]
 8003986:	18a2      	adds	r2, r4, r2
 8003988:	3243      	adds	r2, #67	; 0x43
 800398a:	3302      	adds	r3, #2
 800398c:	7011      	strb	r1, [r2, #0]
 800398e:	e7c1      	b.n	8003914 <_printf_common+0x4c>
 8003990:	0022      	movs	r2, r4
 8003992:	2301      	movs	r3, #1
 8003994:	9901      	ldr	r1, [sp, #4]
 8003996:	9800      	ldr	r0, [sp, #0]
 8003998:	9e08      	ldr	r6, [sp, #32]
 800399a:	321a      	adds	r2, #26
 800399c:	47b0      	blx	r6
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d0e6      	beq.n	8003970 <_printf_common+0xa8>
 80039a2:	3701      	adds	r7, #1
 80039a4:	e7d1      	b.n	800394a <_printf_common+0x82>
	...

080039a8 <_printf_i>:
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	b08b      	sub	sp, #44	; 0x2c
 80039ac:	9206      	str	r2, [sp, #24]
 80039ae:	000a      	movs	r2, r1
 80039b0:	3243      	adds	r2, #67	; 0x43
 80039b2:	9307      	str	r3, [sp, #28]
 80039b4:	9005      	str	r0, [sp, #20]
 80039b6:	9204      	str	r2, [sp, #16]
 80039b8:	7e0a      	ldrb	r2, [r1, #24]
 80039ba:	000c      	movs	r4, r1
 80039bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80039be:	2a78      	cmp	r2, #120	; 0x78
 80039c0:	d807      	bhi.n	80039d2 <_printf_i+0x2a>
 80039c2:	2a62      	cmp	r2, #98	; 0x62
 80039c4:	d809      	bhi.n	80039da <_printf_i+0x32>
 80039c6:	2a00      	cmp	r2, #0
 80039c8:	d100      	bne.n	80039cc <_printf_i+0x24>
 80039ca:	e0c1      	b.n	8003b50 <_printf_i+0x1a8>
 80039cc:	2a58      	cmp	r2, #88	; 0x58
 80039ce:	d100      	bne.n	80039d2 <_printf_i+0x2a>
 80039d0:	e08c      	b.n	8003aec <_printf_i+0x144>
 80039d2:	0026      	movs	r6, r4
 80039d4:	3642      	adds	r6, #66	; 0x42
 80039d6:	7032      	strb	r2, [r6, #0]
 80039d8:	e022      	b.n	8003a20 <_printf_i+0x78>
 80039da:	0010      	movs	r0, r2
 80039dc:	3863      	subs	r0, #99	; 0x63
 80039de:	2815      	cmp	r0, #21
 80039e0:	d8f7      	bhi.n	80039d2 <_printf_i+0x2a>
 80039e2:	f7fc fb91 	bl	8000108 <__gnu_thumb1_case_shi>
 80039e6:	0016      	.short	0x0016
 80039e8:	fff6001f 	.word	0xfff6001f
 80039ec:	fff6fff6 	.word	0xfff6fff6
 80039f0:	001ffff6 	.word	0x001ffff6
 80039f4:	fff6fff6 	.word	0xfff6fff6
 80039f8:	fff6fff6 	.word	0xfff6fff6
 80039fc:	003600a8 	.word	0x003600a8
 8003a00:	fff6009a 	.word	0xfff6009a
 8003a04:	00b9fff6 	.word	0x00b9fff6
 8003a08:	0036fff6 	.word	0x0036fff6
 8003a0c:	fff6fff6 	.word	0xfff6fff6
 8003a10:	009e      	.short	0x009e
 8003a12:	0026      	movs	r6, r4
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	3642      	adds	r6, #66	; 0x42
 8003a18:	1d11      	adds	r1, r2, #4
 8003a1a:	6019      	str	r1, [r3, #0]
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	7033      	strb	r3, [r6, #0]
 8003a20:	2301      	movs	r3, #1
 8003a22:	e0a7      	b.n	8003b74 <_printf_i+0x1cc>
 8003a24:	6808      	ldr	r0, [r1, #0]
 8003a26:	6819      	ldr	r1, [r3, #0]
 8003a28:	1d0a      	adds	r2, r1, #4
 8003a2a:	0605      	lsls	r5, r0, #24
 8003a2c:	d50b      	bpl.n	8003a46 <_printf_i+0x9e>
 8003a2e:	680d      	ldr	r5, [r1, #0]
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	2d00      	cmp	r5, #0
 8003a34:	da03      	bge.n	8003a3e <_printf_i+0x96>
 8003a36:	232d      	movs	r3, #45	; 0x2d
 8003a38:	9a04      	ldr	r2, [sp, #16]
 8003a3a:	426d      	negs	r5, r5
 8003a3c:	7013      	strb	r3, [r2, #0]
 8003a3e:	4b61      	ldr	r3, [pc, #388]	; (8003bc4 <_printf_i+0x21c>)
 8003a40:	270a      	movs	r7, #10
 8003a42:	9303      	str	r3, [sp, #12]
 8003a44:	e01b      	b.n	8003a7e <_printf_i+0xd6>
 8003a46:	680d      	ldr	r5, [r1, #0]
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	0641      	lsls	r1, r0, #25
 8003a4c:	d5f1      	bpl.n	8003a32 <_printf_i+0x8a>
 8003a4e:	b22d      	sxth	r5, r5
 8003a50:	e7ef      	b.n	8003a32 <_printf_i+0x8a>
 8003a52:	680d      	ldr	r5, [r1, #0]
 8003a54:	6819      	ldr	r1, [r3, #0]
 8003a56:	1d08      	adds	r0, r1, #4
 8003a58:	6018      	str	r0, [r3, #0]
 8003a5a:	062e      	lsls	r6, r5, #24
 8003a5c:	d501      	bpl.n	8003a62 <_printf_i+0xba>
 8003a5e:	680d      	ldr	r5, [r1, #0]
 8003a60:	e003      	b.n	8003a6a <_printf_i+0xc2>
 8003a62:	066d      	lsls	r5, r5, #25
 8003a64:	d5fb      	bpl.n	8003a5e <_printf_i+0xb6>
 8003a66:	680d      	ldr	r5, [r1, #0]
 8003a68:	b2ad      	uxth	r5, r5
 8003a6a:	4b56      	ldr	r3, [pc, #344]	; (8003bc4 <_printf_i+0x21c>)
 8003a6c:	2708      	movs	r7, #8
 8003a6e:	9303      	str	r3, [sp, #12]
 8003a70:	2a6f      	cmp	r2, #111	; 0x6f
 8003a72:	d000      	beq.n	8003a76 <_printf_i+0xce>
 8003a74:	3702      	adds	r7, #2
 8003a76:	0023      	movs	r3, r4
 8003a78:	2200      	movs	r2, #0
 8003a7a:	3343      	adds	r3, #67	; 0x43
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	6863      	ldr	r3, [r4, #4]
 8003a80:	60a3      	str	r3, [r4, #8]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	db03      	blt.n	8003a8e <_printf_i+0xe6>
 8003a86:	2204      	movs	r2, #4
 8003a88:	6821      	ldr	r1, [r4, #0]
 8003a8a:	4391      	bics	r1, r2
 8003a8c:	6021      	str	r1, [r4, #0]
 8003a8e:	2d00      	cmp	r5, #0
 8003a90:	d102      	bne.n	8003a98 <_printf_i+0xf0>
 8003a92:	9e04      	ldr	r6, [sp, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00c      	beq.n	8003ab2 <_printf_i+0x10a>
 8003a98:	9e04      	ldr	r6, [sp, #16]
 8003a9a:	0028      	movs	r0, r5
 8003a9c:	0039      	movs	r1, r7
 8003a9e:	f7fc fbc3 	bl	8000228 <__aeabi_uidivmod>
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	3e01      	subs	r6, #1
 8003aa6:	5c5b      	ldrb	r3, [r3, r1]
 8003aa8:	7033      	strb	r3, [r6, #0]
 8003aaa:	002b      	movs	r3, r5
 8003aac:	0005      	movs	r5, r0
 8003aae:	429f      	cmp	r7, r3
 8003ab0:	d9f3      	bls.n	8003a9a <_printf_i+0xf2>
 8003ab2:	2f08      	cmp	r7, #8
 8003ab4:	d109      	bne.n	8003aca <_printf_i+0x122>
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	07db      	lsls	r3, r3, #31
 8003aba:	d506      	bpl.n	8003aca <_printf_i+0x122>
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	6922      	ldr	r2, [r4, #16]
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	dc02      	bgt.n	8003aca <_printf_i+0x122>
 8003ac4:	2330      	movs	r3, #48	; 0x30
 8003ac6:	3e01      	subs	r6, #1
 8003ac8:	7033      	strb	r3, [r6, #0]
 8003aca:	9b04      	ldr	r3, [sp, #16]
 8003acc:	1b9b      	subs	r3, r3, r6
 8003ace:	6123      	str	r3, [r4, #16]
 8003ad0:	9b07      	ldr	r3, [sp, #28]
 8003ad2:	0021      	movs	r1, r4
 8003ad4:	9300      	str	r3, [sp, #0]
 8003ad6:	9805      	ldr	r0, [sp, #20]
 8003ad8:	9b06      	ldr	r3, [sp, #24]
 8003ada:	aa09      	add	r2, sp, #36	; 0x24
 8003adc:	f7ff fef4 	bl	80038c8 <_printf_common>
 8003ae0:	1c43      	adds	r3, r0, #1
 8003ae2:	d14c      	bne.n	8003b7e <_printf_i+0x1d6>
 8003ae4:	2001      	movs	r0, #1
 8003ae6:	4240      	negs	r0, r0
 8003ae8:	b00b      	add	sp, #44	; 0x2c
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aec:	3145      	adds	r1, #69	; 0x45
 8003aee:	700a      	strb	r2, [r1, #0]
 8003af0:	4a34      	ldr	r2, [pc, #208]	; (8003bc4 <_printf_i+0x21c>)
 8003af2:	9203      	str	r2, [sp, #12]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	6821      	ldr	r1, [r4, #0]
 8003af8:	ca20      	ldmia	r2!, {r5}
 8003afa:	601a      	str	r2, [r3, #0]
 8003afc:	0608      	lsls	r0, r1, #24
 8003afe:	d516      	bpl.n	8003b2e <_printf_i+0x186>
 8003b00:	07cb      	lsls	r3, r1, #31
 8003b02:	d502      	bpl.n	8003b0a <_printf_i+0x162>
 8003b04:	2320      	movs	r3, #32
 8003b06:	4319      	orrs	r1, r3
 8003b08:	6021      	str	r1, [r4, #0]
 8003b0a:	2710      	movs	r7, #16
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	d1b2      	bne.n	8003a76 <_printf_i+0xce>
 8003b10:	2320      	movs	r3, #32
 8003b12:	6822      	ldr	r2, [r4, #0]
 8003b14:	439a      	bics	r2, r3
 8003b16:	6022      	str	r2, [r4, #0]
 8003b18:	e7ad      	b.n	8003a76 <_printf_i+0xce>
 8003b1a:	2220      	movs	r2, #32
 8003b1c:	6809      	ldr	r1, [r1, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	6022      	str	r2, [r4, #0]
 8003b22:	0022      	movs	r2, r4
 8003b24:	2178      	movs	r1, #120	; 0x78
 8003b26:	3245      	adds	r2, #69	; 0x45
 8003b28:	7011      	strb	r1, [r2, #0]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <_printf_i+0x220>)
 8003b2c:	e7e1      	b.n	8003af2 <_printf_i+0x14a>
 8003b2e:	0648      	lsls	r0, r1, #25
 8003b30:	d5e6      	bpl.n	8003b00 <_printf_i+0x158>
 8003b32:	b2ad      	uxth	r5, r5
 8003b34:	e7e4      	b.n	8003b00 <_printf_i+0x158>
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	680d      	ldr	r5, [r1, #0]
 8003b3a:	1d10      	adds	r0, r2, #4
 8003b3c:	6949      	ldr	r1, [r1, #20]
 8003b3e:	6018      	str	r0, [r3, #0]
 8003b40:	6813      	ldr	r3, [r2, #0]
 8003b42:	062e      	lsls	r6, r5, #24
 8003b44:	d501      	bpl.n	8003b4a <_printf_i+0x1a2>
 8003b46:	6019      	str	r1, [r3, #0]
 8003b48:	e002      	b.n	8003b50 <_printf_i+0x1a8>
 8003b4a:	066d      	lsls	r5, r5, #25
 8003b4c:	d5fb      	bpl.n	8003b46 <_printf_i+0x19e>
 8003b4e:	8019      	strh	r1, [r3, #0]
 8003b50:	2300      	movs	r3, #0
 8003b52:	9e04      	ldr	r6, [sp, #16]
 8003b54:	6123      	str	r3, [r4, #16]
 8003b56:	e7bb      	b.n	8003ad0 <_printf_i+0x128>
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	1d11      	adds	r1, r2, #4
 8003b5c:	6019      	str	r1, [r3, #0]
 8003b5e:	6816      	ldr	r6, [r2, #0]
 8003b60:	2100      	movs	r1, #0
 8003b62:	0030      	movs	r0, r6
 8003b64:	6862      	ldr	r2, [r4, #4]
 8003b66:	f000 facf 	bl	8004108 <memchr>
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	d001      	beq.n	8003b72 <_printf_i+0x1ca>
 8003b6e:	1b80      	subs	r0, r0, r6
 8003b70:	6060      	str	r0, [r4, #4]
 8003b72:	6863      	ldr	r3, [r4, #4]
 8003b74:	6123      	str	r3, [r4, #16]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9a04      	ldr	r2, [sp, #16]
 8003b7a:	7013      	strb	r3, [r2, #0]
 8003b7c:	e7a8      	b.n	8003ad0 <_printf_i+0x128>
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	0032      	movs	r2, r6
 8003b82:	9906      	ldr	r1, [sp, #24]
 8003b84:	9805      	ldr	r0, [sp, #20]
 8003b86:	9d07      	ldr	r5, [sp, #28]
 8003b88:	47a8      	blx	r5
 8003b8a:	1c43      	adds	r3, r0, #1
 8003b8c:	d0aa      	beq.n	8003ae4 <_printf_i+0x13c>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	079b      	lsls	r3, r3, #30
 8003b92:	d415      	bmi.n	8003bc0 <_printf_i+0x218>
 8003b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b96:	68e0      	ldr	r0, [r4, #12]
 8003b98:	4298      	cmp	r0, r3
 8003b9a:	daa5      	bge.n	8003ae8 <_printf_i+0x140>
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	e7a3      	b.n	8003ae8 <_printf_i+0x140>
 8003ba0:	0022      	movs	r2, r4
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	9906      	ldr	r1, [sp, #24]
 8003ba6:	9805      	ldr	r0, [sp, #20]
 8003ba8:	9e07      	ldr	r6, [sp, #28]
 8003baa:	3219      	adds	r2, #25
 8003bac:	47b0      	blx	r6
 8003bae:	1c43      	adds	r3, r0, #1
 8003bb0:	d098      	beq.n	8003ae4 <_printf_i+0x13c>
 8003bb2:	3501      	adds	r5, #1
 8003bb4:	68e3      	ldr	r3, [r4, #12]
 8003bb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	42ab      	cmp	r3, r5
 8003bbc:	dcf0      	bgt.n	8003ba0 <_printf_i+0x1f8>
 8003bbe:	e7e9      	b.n	8003b94 <_printf_i+0x1ec>
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	e7f7      	b.n	8003bb4 <_printf_i+0x20c>
 8003bc4:	08004361 	.word	0x08004361
 8003bc8:	08004372 	.word	0x08004372

08003bcc <_sbrk_r>:
 8003bcc:	2300      	movs	r3, #0
 8003bce:	b570      	push	{r4, r5, r6, lr}
 8003bd0:	4d06      	ldr	r5, [pc, #24]	; (8003bec <_sbrk_r+0x20>)
 8003bd2:	0004      	movs	r4, r0
 8003bd4:	0008      	movs	r0, r1
 8003bd6:	602b      	str	r3, [r5, #0]
 8003bd8:	f7fc fede 	bl	8000998 <_sbrk>
 8003bdc:	1c43      	adds	r3, r0, #1
 8003bde:	d103      	bne.n	8003be8 <_sbrk_r+0x1c>
 8003be0:	682b      	ldr	r3, [r5, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d000      	beq.n	8003be8 <_sbrk_r+0x1c>
 8003be6:	6023      	str	r3, [r4, #0]
 8003be8:	bd70      	pop	{r4, r5, r6, pc}
 8003bea:	46c0      	nop			; (mov r8, r8)
 8003bec:	20000178 	.word	0x20000178

08003bf0 <__sread>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	000c      	movs	r4, r1
 8003bf4:	250e      	movs	r5, #14
 8003bf6:	5f49      	ldrsh	r1, [r1, r5]
 8003bf8:	f000 faec 	bl	80041d4 <_read_r>
 8003bfc:	2800      	cmp	r0, #0
 8003bfe:	db03      	blt.n	8003c08 <__sread+0x18>
 8003c00:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c02:	181b      	adds	r3, r3, r0
 8003c04:	6563      	str	r3, [r4, #84]	; 0x54
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	89a3      	ldrh	r3, [r4, #12]
 8003c0a:	4a02      	ldr	r2, [pc, #8]	; (8003c14 <__sread+0x24>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	81a3      	strh	r3, [r4, #12]
 8003c10:	e7f9      	b.n	8003c06 <__sread+0x16>
 8003c12:	46c0      	nop			; (mov r8, r8)
 8003c14:	ffffefff 	.word	0xffffefff

08003c18 <__swrite>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	001f      	movs	r7, r3
 8003c1c:	898b      	ldrh	r3, [r1, #12]
 8003c1e:	0005      	movs	r5, r0
 8003c20:	000c      	movs	r4, r1
 8003c22:	0016      	movs	r6, r2
 8003c24:	05db      	lsls	r3, r3, #23
 8003c26:	d505      	bpl.n	8003c34 <__swrite+0x1c>
 8003c28:	230e      	movs	r3, #14
 8003c2a:	5ec9      	ldrsh	r1, [r1, r3]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2302      	movs	r3, #2
 8003c30:	f000 f9ea 	bl	8004008 <_lseek_r>
 8003c34:	89a3      	ldrh	r3, [r4, #12]
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <__swrite+0x34>)
 8003c38:	0028      	movs	r0, r5
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	81a3      	strh	r3, [r4, #12]
 8003c3e:	0032      	movs	r2, r6
 8003c40:	230e      	movs	r3, #14
 8003c42:	5ee1      	ldrsh	r1, [r4, r3]
 8003c44:	003b      	movs	r3, r7
 8003c46:	f000 f875 	bl	8003d34 <_write_r>
 8003c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c4c:	ffffefff 	.word	0xffffefff

08003c50 <__sseek>:
 8003c50:	b570      	push	{r4, r5, r6, lr}
 8003c52:	000c      	movs	r4, r1
 8003c54:	250e      	movs	r5, #14
 8003c56:	5f49      	ldrsh	r1, [r1, r5]
 8003c58:	f000 f9d6 	bl	8004008 <_lseek_r>
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	1c42      	adds	r2, r0, #1
 8003c60:	d103      	bne.n	8003c6a <__sseek+0x1a>
 8003c62:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <__sseek+0x28>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	81a3      	strh	r3, [r4, #12]
 8003c68:	bd70      	pop	{r4, r5, r6, pc}
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	0152      	lsls	r2, r2, #5
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	81a3      	strh	r3, [r4, #12]
 8003c72:	6560      	str	r0, [r4, #84]	; 0x54
 8003c74:	e7f8      	b.n	8003c68 <__sseek+0x18>
 8003c76:	46c0      	nop			; (mov r8, r8)
 8003c78:	ffffefff 	.word	0xffffefff

08003c7c <__sclose>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	230e      	movs	r3, #14
 8003c80:	5ec9      	ldrsh	r1, [r1, r3]
 8003c82:	f000 f8e3 	bl	8003e4c <_close_r>
 8003c86:	bd10      	pop	{r4, pc}

08003c88 <__swbuf_r>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	0005      	movs	r5, r0
 8003c8c:	000e      	movs	r6, r1
 8003c8e:	0014      	movs	r4, r2
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d004      	beq.n	8003c9e <__swbuf_r+0x16>
 8003c94:	6983      	ldr	r3, [r0, #24]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d101      	bne.n	8003c9e <__swbuf_r+0x16>
 8003c9a:	f7ff fb77 	bl	800338c <__sinit>
 8003c9e:	4b22      	ldr	r3, [pc, #136]	; (8003d28 <__swbuf_r+0xa0>)
 8003ca0:	429c      	cmp	r4, r3
 8003ca2:	d12e      	bne.n	8003d02 <__swbuf_r+0x7a>
 8003ca4:	686c      	ldr	r4, [r5, #4]
 8003ca6:	69a3      	ldr	r3, [r4, #24]
 8003ca8:	60a3      	str	r3, [r4, #8]
 8003caa:	89a3      	ldrh	r3, [r4, #12]
 8003cac:	071b      	lsls	r3, r3, #28
 8003cae:	d532      	bpl.n	8003d16 <__swbuf_r+0x8e>
 8003cb0:	6923      	ldr	r3, [r4, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d02f      	beq.n	8003d16 <__swbuf_r+0x8e>
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	6922      	ldr	r2, [r4, #16]
 8003cba:	b2f7      	uxtb	r7, r6
 8003cbc:	1a98      	subs	r0, r3, r2
 8003cbe:	6963      	ldr	r3, [r4, #20]
 8003cc0:	b2f6      	uxtb	r6, r6
 8003cc2:	4283      	cmp	r3, r0
 8003cc4:	dc05      	bgt.n	8003cd2 <__swbuf_r+0x4a>
 8003cc6:	0021      	movs	r1, r4
 8003cc8:	0028      	movs	r0, r5
 8003cca:	f000 f95d 	bl	8003f88 <_fflush_r>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d127      	bne.n	8003d22 <__swbuf_r+0x9a>
 8003cd2:	68a3      	ldr	r3, [r4, #8]
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	60a3      	str	r3, [r4, #8]
 8003cda:	6823      	ldr	r3, [r4, #0]
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	6022      	str	r2, [r4, #0]
 8003ce0:	701f      	strb	r7, [r3, #0]
 8003ce2:	6963      	ldr	r3, [r4, #20]
 8003ce4:	4283      	cmp	r3, r0
 8003ce6:	d004      	beq.n	8003cf2 <__swbuf_r+0x6a>
 8003ce8:	89a3      	ldrh	r3, [r4, #12]
 8003cea:	07db      	lsls	r3, r3, #31
 8003cec:	d507      	bpl.n	8003cfe <__swbuf_r+0x76>
 8003cee:	2e0a      	cmp	r6, #10
 8003cf0:	d105      	bne.n	8003cfe <__swbuf_r+0x76>
 8003cf2:	0021      	movs	r1, r4
 8003cf4:	0028      	movs	r0, r5
 8003cf6:	f000 f947 	bl	8003f88 <_fflush_r>
 8003cfa:	2800      	cmp	r0, #0
 8003cfc:	d111      	bne.n	8003d22 <__swbuf_r+0x9a>
 8003cfe:	0030      	movs	r0, r6
 8003d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d02:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <__swbuf_r+0xa4>)
 8003d04:	429c      	cmp	r4, r3
 8003d06:	d101      	bne.n	8003d0c <__swbuf_r+0x84>
 8003d08:	68ac      	ldr	r4, [r5, #8]
 8003d0a:	e7cc      	b.n	8003ca6 <__swbuf_r+0x1e>
 8003d0c:	4b08      	ldr	r3, [pc, #32]	; (8003d30 <__swbuf_r+0xa8>)
 8003d0e:	429c      	cmp	r4, r3
 8003d10:	d1c9      	bne.n	8003ca6 <__swbuf_r+0x1e>
 8003d12:	68ec      	ldr	r4, [r5, #12]
 8003d14:	e7c7      	b.n	8003ca6 <__swbuf_r+0x1e>
 8003d16:	0021      	movs	r1, r4
 8003d18:	0028      	movs	r0, r5
 8003d1a:	f000 f81f 	bl	8003d5c <__swsetup_r>
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	d0c9      	beq.n	8003cb6 <__swbuf_r+0x2e>
 8003d22:	2601      	movs	r6, #1
 8003d24:	4276      	negs	r6, r6
 8003d26:	e7ea      	b.n	8003cfe <__swbuf_r+0x76>
 8003d28:	08004310 	.word	0x08004310
 8003d2c:	08004330 	.word	0x08004330
 8003d30:	080042f0 	.word	0x080042f0

08003d34 <_write_r>:
 8003d34:	b570      	push	{r4, r5, r6, lr}
 8003d36:	0004      	movs	r4, r0
 8003d38:	0008      	movs	r0, r1
 8003d3a:	0011      	movs	r1, r2
 8003d3c:	001a      	movs	r2, r3
 8003d3e:	2300      	movs	r3, #0
 8003d40:	4d05      	ldr	r5, [pc, #20]	; (8003d58 <_write_r+0x24>)
 8003d42:	602b      	str	r3, [r5, #0]
 8003d44:	f7fc fde0 	bl	8000908 <_write>
 8003d48:	1c43      	adds	r3, r0, #1
 8003d4a:	d103      	bne.n	8003d54 <_write_r+0x20>
 8003d4c:	682b      	ldr	r3, [r5, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d000      	beq.n	8003d54 <_write_r+0x20>
 8003d52:	6023      	str	r3, [r4, #0]
 8003d54:	bd70      	pop	{r4, r5, r6, pc}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	20000178 	.word	0x20000178

08003d5c <__swsetup_r>:
 8003d5c:	4b37      	ldr	r3, [pc, #220]	; (8003e3c <__swsetup_r+0xe0>)
 8003d5e:	b570      	push	{r4, r5, r6, lr}
 8003d60:	681d      	ldr	r5, [r3, #0]
 8003d62:	0006      	movs	r6, r0
 8003d64:	000c      	movs	r4, r1
 8003d66:	2d00      	cmp	r5, #0
 8003d68:	d005      	beq.n	8003d76 <__swsetup_r+0x1a>
 8003d6a:	69ab      	ldr	r3, [r5, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d102      	bne.n	8003d76 <__swsetup_r+0x1a>
 8003d70:	0028      	movs	r0, r5
 8003d72:	f7ff fb0b 	bl	800338c <__sinit>
 8003d76:	4b32      	ldr	r3, [pc, #200]	; (8003e40 <__swsetup_r+0xe4>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	d10f      	bne.n	8003d9c <__swsetup_r+0x40>
 8003d7c:	686c      	ldr	r4, [r5, #4]
 8003d7e:	230c      	movs	r3, #12
 8003d80:	5ee2      	ldrsh	r2, [r4, r3]
 8003d82:	b293      	uxth	r3, r2
 8003d84:	0711      	lsls	r1, r2, #28
 8003d86:	d42d      	bmi.n	8003de4 <__swsetup_r+0x88>
 8003d88:	06d9      	lsls	r1, r3, #27
 8003d8a:	d411      	bmi.n	8003db0 <__swsetup_r+0x54>
 8003d8c:	2309      	movs	r3, #9
 8003d8e:	2001      	movs	r0, #1
 8003d90:	6033      	str	r3, [r6, #0]
 8003d92:	3337      	adds	r3, #55	; 0x37
 8003d94:	4313      	orrs	r3, r2
 8003d96:	81a3      	strh	r3, [r4, #12]
 8003d98:	4240      	negs	r0, r0
 8003d9a:	bd70      	pop	{r4, r5, r6, pc}
 8003d9c:	4b29      	ldr	r3, [pc, #164]	; (8003e44 <__swsetup_r+0xe8>)
 8003d9e:	429c      	cmp	r4, r3
 8003da0:	d101      	bne.n	8003da6 <__swsetup_r+0x4a>
 8003da2:	68ac      	ldr	r4, [r5, #8]
 8003da4:	e7eb      	b.n	8003d7e <__swsetup_r+0x22>
 8003da6:	4b28      	ldr	r3, [pc, #160]	; (8003e48 <__swsetup_r+0xec>)
 8003da8:	429c      	cmp	r4, r3
 8003daa:	d1e8      	bne.n	8003d7e <__swsetup_r+0x22>
 8003dac:	68ec      	ldr	r4, [r5, #12]
 8003dae:	e7e6      	b.n	8003d7e <__swsetup_r+0x22>
 8003db0:	075b      	lsls	r3, r3, #29
 8003db2:	d513      	bpl.n	8003ddc <__swsetup_r+0x80>
 8003db4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003db6:	2900      	cmp	r1, #0
 8003db8:	d008      	beq.n	8003dcc <__swsetup_r+0x70>
 8003dba:	0023      	movs	r3, r4
 8003dbc:	3344      	adds	r3, #68	; 0x44
 8003dbe:	4299      	cmp	r1, r3
 8003dc0:	d002      	beq.n	8003dc8 <__swsetup_r+0x6c>
 8003dc2:	0030      	movs	r0, r6
 8003dc4:	f000 f9bc 	bl	8004140 <_free_r>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6363      	str	r3, [r4, #52]	; 0x34
 8003dcc:	2224      	movs	r2, #36	; 0x24
 8003dce:	89a3      	ldrh	r3, [r4, #12]
 8003dd0:	4393      	bics	r3, r2
 8003dd2:	81a3      	strh	r3, [r4, #12]
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6063      	str	r3, [r4, #4]
 8003dd8:	6923      	ldr	r3, [r4, #16]
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	2308      	movs	r3, #8
 8003dde:	89a2      	ldrh	r2, [r4, #12]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	81a3      	strh	r3, [r4, #12]
 8003de4:	6923      	ldr	r3, [r4, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10b      	bne.n	8003e02 <__swsetup_r+0xa6>
 8003dea:	21a0      	movs	r1, #160	; 0xa0
 8003dec:	2280      	movs	r2, #128	; 0x80
 8003dee:	89a3      	ldrh	r3, [r4, #12]
 8003df0:	0089      	lsls	r1, r1, #2
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	400b      	ands	r3, r1
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d003      	beq.n	8003e02 <__swsetup_r+0xa6>
 8003dfa:	0021      	movs	r1, r4
 8003dfc:	0030      	movs	r0, r6
 8003dfe:	f000 f93f 	bl	8004080 <__smakebuf_r>
 8003e02:	220c      	movs	r2, #12
 8003e04:	5ea3      	ldrsh	r3, [r4, r2]
 8003e06:	2001      	movs	r0, #1
 8003e08:	001a      	movs	r2, r3
 8003e0a:	b299      	uxth	r1, r3
 8003e0c:	4002      	ands	r2, r0
 8003e0e:	4203      	tst	r3, r0
 8003e10:	d00f      	beq.n	8003e32 <__swsetup_r+0xd6>
 8003e12:	2200      	movs	r2, #0
 8003e14:	60a2      	str	r2, [r4, #8]
 8003e16:	6962      	ldr	r2, [r4, #20]
 8003e18:	4252      	negs	r2, r2
 8003e1a:	61a2      	str	r2, [r4, #24]
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	6922      	ldr	r2, [r4, #16]
 8003e20:	4282      	cmp	r2, r0
 8003e22:	d1ba      	bne.n	8003d9a <__swsetup_r+0x3e>
 8003e24:	060a      	lsls	r2, r1, #24
 8003e26:	d5b8      	bpl.n	8003d9a <__swsetup_r+0x3e>
 8003e28:	2240      	movs	r2, #64	; 0x40
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	81a3      	strh	r3, [r4, #12]
 8003e2e:	3801      	subs	r0, #1
 8003e30:	e7b3      	b.n	8003d9a <__swsetup_r+0x3e>
 8003e32:	0788      	lsls	r0, r1, #30
 8003e34:	d400      	bmi.n	8003e38 <__swsetup_r+0xdc>
 8003e36:	6962      	ldr	r2, [r4, #20]
 8003e38:	60a2      	str	r2, [r4, #8]
 8003e3a:	e7ef      	b.n	8003e1c <__swsetup_r+0xc0>
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	08004310 	.word	0x08004310
 8003e44:	08004330 	.word	0x08004330
 8003e48:	080042f0 	.word	0x080042f0

08003e4c <_close_r>:
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	b570      	push	{r4, r5, r6, lr}
 8003e50:	4d06      	ldr	r5, [pc, #24]	; (8003e6c <_close_r+0x20>)
 8003e52:	0004      	movs	r4, r0
 8003e54:	0008      	movs	r0, r1
 8003e56:	602b      	str	r3, [r5, #0]
 8003e58:	f7fc fd72 	bl	8000940 <_close>
 8003e5c:	1c43      	adds	r3, r0, #1
 8003e5e:	d103      	bne.n	8003e68 <_close_r+0x1c>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d000      	beq.n	8003e68 <_close_r+0x1c>
 8003e66:	6023      	str	r3, [r4, #0]
 8003e68:	bd70      	pop	{r4, r5, r6, pc}
 8003e6a:	46c0      	nop			; (mov r8, r8)
 8003e6c:	20000178 	.word	0x20000178

08003e70 <__sflush_r>:
 8003e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e72:	898b      	ldrh	r3, [r1, #12]
 8003e74:	0005      	movs	r5, r0
 8003e76:	000c      	movs	r4, r1
 8003e78:	071a      	lsls	r2, r3, #28
 8003e7a:	d45f      	bmi.n	8003f3c <__sflush_r+0xcc>
 8003e7c:	684a      	ldr	r2, [r1, #4]
 8003e7e:	2a00      	cmp	r2, #0
 8003e80:	dc04      	bgt.n	8003e8c <__sflush_r+0x1c>
 8003e82:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003e84:	2a00      	cmp	r2, #0
 8003e86:	dc01      	bgt.n	8003e8c <__sflush_r+0x1c>
 8003e88:	2000      	movs	r0, #0
 8003e8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e8c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003e8e:	2f00      	cmp	r7, #0
 8003e90:	d0fa      	beq.n	8003e88 <__sflush_r+0x18>
 8003e92:	2200      	movs	r2, #0
 8003e94:	2180      	movs	r1, #128	; 0x80
 8003e96:	682e      	ldr	r6, [r5, #0]
 8003e98:	602a      	str	r2, [r5, #0]
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	0149      	lsls	r1, r1, #5
 8003e9e:	400a      	ands	r2, r1
 8003ea0:	420b      	tst	r3, r1
 8003ea2:	d034      	beq.n	8003f0e <__sflush_r+0x9e>
 8003ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	075b      	lsls	r3, r3, #29
 8003eaa:	d506      	bpl.n	8003eba <__sflush_r+0x4a>
 8003eac:	6863      	ldr	r3, [r4, #4]
 8003eae:	1ac0      	subs	r0, r0, r3
 8003eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <__sflush_r+0x4a>
 8003eb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	0002      	movs	r2, r0
 8003ebc:	6a21      	ldr	r1, [r4, #32]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	0028      	movs	r0, r5
 8003ec2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ec4:	47b8      	blx	r7
 8003ec6:	89a1      	ldrh	r1, [r4, #12]
 8003ec8:	1c43      	adds	r3, r0, #1
 8003eca:	d106      	bne.n	8003eda <__sflush_r+0x6a>
 8003ecc:	682b      	ldr	r3, [r5, #0]
 8003ece:	2b1d      	cmp	r3, #29
 8003ed0:	d831      	bhi.n	8003f36 <__sflush_r+0xc6>
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <__sflush_r+0x114>)
 8003ed4:	40da      	lsrs	r2, r3
 8003ed6:	07d3      	lsls	r3, r2, #31
 8003ed8:	d52d      	bpl.n	8003f36 <__sflush_r+0xc6>
 8003eda:	2300      	movs	r3, #0
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	04cb      	lsls	r3, r1, #19
 8003ee4:	d505      	bpl.n	8003ef2 <__sflush_r+0x82>
 8003ee6:	1c43      	adds	r3, r0, #1
 8003ee8:	d102      	bne.n	8003ef0 <__sflush_r+0x80>
 8003eea:	682b      	ldr	r3, [r5, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d100      	bne.n	8003ef2 <__sflush_r+0x82>
 8003ef0:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ef4:	602e      	str	r6, [r5, #0]
 8003ef6:	2900      	cmp	r1, #0
 8003ef8:	d0c6      	beq.n	8003e88 <__sflush_r+0x18>
 8003efa:	0023      	movs	r3, r4
 8003efc:	3344      	adds	r3, #68	; 0x44
 8003efe:	4299      	cmp	r1, r3
 8003f00:	d002      	beq.n	8003f08 <__sflush_r+0x98>
 8003f02:	0028      	movs	r0, r5
 8003f04:	f000 f91c 	bl	8004140 <_free_r>
 8003f08:	2000      	movs	r0, #0
 8003f0a:	6360      	str	r0, [r4, #52]	; 0x34
 8003f0c:	e7bd      	b.n	8003e8a <__sflush_r+0x1a>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	0028      	movs	r0, r5
 8003f12:	6a21      	ldr	r1, [r4, #32]
 8003f14:	47b8      	blx	r7
 8003f16:	1c43      	adds	r3, r0, #1
 8003f18:	d1c5      	bne.n	8003ea6 <__sflush_r+0x36>
 8003f1a:	682b      	ldr	r3, [r5, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d0c2      	beq.n	8003ea6 <__sflush_r+0x36>
 8003f20:	2b1d      	cmp	r3, #29
 8003f22:	d001      	beq.n	8003f28 <__sflush_r+0xb8>
 8003f24:	2b16      	cmp	r3, #22
 8003f26:	d101      	bne.n	8003f2c <__sflush_r+0xbc>
 8003f28:	602e      	str	r6, [r5, #0]
 8003f2a:	e7ad      	b.n	8003e88 <__sflush_r+0x18>
 8003f2c:	2340      	movs	r3, #64	; 0x40
 8003f2e:	89a2      	ldrh	r2, [r4, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	e7a9      	b.n	8003e8a <__sflush_r+0x1a>
 8003f36:	2340      	movs	r3, #64	; 0x40
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	e7fa      	b.n	8003f32 <__sflush_r+0xc2>
 8003f3c:	690f      	ldr	r7, [r1, #16]
 8003f3e:	2f00      	cmp	r7, #0
 8003f40:	d0a2      	beq.n	8003e88 <__sflush_r+0x18>
 8003f42:	680a      	ldr	r2, [r1, #0]
 8003f44:	600f      	str	r7, [r1, #0]
 8003f46:	1bd2      	subs	r2, r2, r7
 8003f48:	9201      	str	r2, [sp, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	079b      	lsls	r3, r3, #30
 8003f4e:	d100      	bne.n	8003f52 <__sflush_r+0xe2>
 8003f50:	694a      	ldr	r2, [r1, #20]
 8003f52:	60a2      	str	r2, [r4, #8]
 8003f54:	9b01      	ldr	r3, [sp, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	dc00      	bgt.n	8003f5c <__sflush_r+0xec>
 8003f5a:	e795      	b.n	8003e88 <__sflush_r+0x18>
 8003f5c:	003a      	movs	r2, r7
 8003f5e:	0028      	movs	r0, r5
 8003f60:	9b01      	ldr	r3, [sp, #4]
 8003f62:	6a21      	ldr	r1, [r4, #32]
 8003f64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f66:	47b0      	blx	r6
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	dc06      	bgt.n	8003f7a <__sflush_r+0x10a>
 8003f6c:	2340      	movs	r3, #64	; 0x40
 8003f6e:	2001      	movs	r0, #1
 8003f70:	89a2      	ldrh	r2, [r4, #12]
 8003f72:	4240      	negs	r0, r0
 8003f74:	4313      	orrs	r3, r2
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	e787      	b.n	8003e8a <__sflush_r+0x1a>
 8003f7a:	9b01      	ldr	r3, [sp, #4]
 8003f7c:	183f      	adds	r7, r7, r0
 8003f7e:	1a1b      	subs	r3, r3, r0
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	e7e7      	b.n	8003f54 <__sflush_r+0xe4>
 8003f84:	20400001 	.word	0x20400001

08003f88 <_fflush_r>:
 8003f88:	690b      	ldr	r3, [r1, #16]
 8003f8a:	b570      	push	{r4, r5, r6, lr}
 8003f8c:	0005      	movs	r5, r0
 8003f8e:	000c      	movs	r4, r1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <_fflush_r+0x12>
 8003f94:	2500      	movs	r5, #0
 8003f96:	0028      	movs	r0, r5
 8003f98:	bd70      	pop	{r4, r5, r6, pc}
 8003f9a:	2800      	cmp	r0, #0
 8003f9c:	d004      	beq.n	8003fa8 <_fflush_r+0x20>
 8003f9e:	6983      	ldr	r3, [r0, #24]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <_fflush_r+0x20>
 8003fa4:	f7ff f9f2 	bl	800338c <__sinit>
 8003fa8:	4b14      	ldr	r3, [pc, #80]	; (8003ffc <_fflush_r+0x74>)
 8003faa:	429c      	cmp	r4, r3
 8003fac:	d11b      	bne.n	8003fe6 <_fflush_r+0x5e>
 8003fae:	686c      	ldr	r4, [r5, #4]
 8003fb0:	220c      	movs	r2, #12
 8003fb2:	5ea3      	ldrsh	r3, [r4, r2]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d0ed      	beq.n	8003f94 <_fflush_r+0xc>
 8003fb8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fba:	07d2      	lsls	r2, r2, #31
 8003fbc:	d404      	bmi.n	8003fc8 <_fflush_r+0x40>
 8003fbe:	059b      	lsls	r3, r3, #22
 8003fc0:	d402      	bmi.n	8003fc8 <_fflush_r+0x40>
 8003fc2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc4:	f7ff fa83 	bl	80034ce <__retarget_lock_acquire_recursive>
 8003fc8:	0028      	movs	r0, r5
 8003fca:	0021      	movs	r1, r4
 8003fcc:	f7ff ff50 	bl	8003e70 <__sflush_r>
 8003fd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fd2:	0005      	movs	r5, r0
 8003fd4:	07db      	lsls	r3, r3, #31
 8003fd6:	d4de      	bmi.n	8003f96 <_fflush_r+0xe>
 8003fd8:	89a3      	ldrh	r3, [r4, #12]
 8003fda:	059b      	lsls	r3, r3, #22
 8003fdc:	d4db      	bmi.n	8003f96 <_fflush_r+0xe>
 8003fde:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fe0:	f7ff fa76 	bl	80034d0 <__retarget_lock_release_recursive>
 8003fe4:	e7d7      	b.n	8003f96 <_fflush_r+0xe>
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <_fflush_r+0x78>)
 8003fe8:	429c      	cmp	r4, r3
 8003fea:	d101      	bne.n	8003ff0 <_fflush_r+0x68>
 8003fec:	68ac      	ldr	r4, [r5, #8]
 8003fee:	e7df      	b.n	8003fb0 <_fflush_r+0x28>
 8003ff0:	4b04      	ldr	r3, [pc, #16]	; (8004004 <_fflush_r+0x7c>)
 8003ff2:	429c      	cmp	r4, r3
 8003ff4:	d1dc      	bne.n	8003fb0 <_fflush_r+0x28>
 8003ff6:	68ec      	ldr	r4, [r5, #12]
 8003ff8:	e7da      	b.n	8003fb0 <_fflush_r+0x28>
 8003ffa:	46c0      	nop			; (mov r8, r8)
 8003ffc:	08004310 	.word	0x08004310
 8004000:	08004330 	.word	0x08004330
 8004004:	080042f0 	.word	0x080042f0

08004008 <_lseek_r>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	0004      	movs	r4, r0
 800400c:	0008      	movs	r0, r1
 800400e:	0011      	movs	r1, r2
 8004010:	001a      	movs	r2, r3
 8004012:	2300      	movs	r3, #0
 8004014:	4d05      	ldr	r5, [pc, #20]	; (800402c <_lseek_r+0x24>)
 8004016:	602b      	str	r3, [r5, #0]
 8004018:	f7fc fcb3 	bl	8000982 <_lseek>
 800401c:	1c43      	adds	r3, r0, #1
 800401e:	d103      	bne.n	8004028 <_lseek_r+0x20>
 8004020:	682b      	ldr	r3, [r5, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d000      	beq.n	8004028 <_lseek_r+0x20>
 8004026:	6023      	str	r3, [r4, #0]
 8004028:	bd70      	pop	{r4, r5, r6, pc}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	20000178 	.word	0x20000178

08004030 <__swhatbuf_r>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	000e      	movs	r6, r1
 8004034:	001d      	movs	r5, r3
 8004036:	230e      	movs	r3, #14
 8004038:	5ec9      	ldrsh	r1, [r1, r3]
 800403a:	0014      	movs	r4, r2
 800403c:	b096      	sub	sp, #88	; 0x58
 800403e:	2900      	cmp	r1, #0
 8004040:	da08      	bge.n	8004054 <__swhatbuf_r+0x24>
 8004042:	220c      	movs	r2, #12
 8004044:	5eb3      	ldrsh	r3, [r6, r2]
 8004046:	2200      	movs	r2, #0
 8004048:	602a      	str	r2, [r5, #0]
 800404a:	061b      	lsls	r3, r3, #24
 800404c:	d411      	bmi.n	8004072 <__swhatbuf_r+0x42>
 800404e:	2380      	movs	r3, #128	; 0x80
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	e00f      	b.n	8004074 <__swhatbuf_r+0x44>
 8004054:	466a      	mov	r2, sp
 8004056:	f000 f8d1 	bl	80041fc <_fstat_r>
 800405a:	2800      	cmp	r0, #0
 800405c:	dbf1      	blt.n	8004042 <__swhatbuf_r+0x12>
 800405e:	23f0      	movs	r3, #240	; 0xf0
 8004060:	9901      	ldr	r1, [sp, #4]
 8004062:	021b      	lsls	r3, r3, #8
 8004064:	4019      	ands	r1, r3
 8004066:	4b05      	ldr	r3, [pc, #20]	; (800407c <__swhatbuf_r+0x4c>)
 8004068:	18c9      	adds	r1, r1, r3
 800406a:	424b      	negs	r3, r1
 800406c:	4159      	adcs	r1, r3
 800406e:	6029      	str	r1, [r5, #0]
 8004070:	e7ed      	b.n	800404e <__swhatbuf_r+0x1e>
 8004072:	2340      	movs	r3, #64	; 0x40
 8004074:	2000      	movs	r0, #0
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	b016      	add	sp, #88	; 0x58
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	ffffe000 	.word	0xffffe000

08004080 <__smakebuf_r>:
 8004080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004082:	2602      	movs	r6, #2
 8004084:	898b      	ldrh	r3, [r1, #12]
 8004086:	0005      	movs	r5, r0
 8004088:	000c      	movs	r4, r1
 800408a:	4233      	tst	r3, r6
 800408c:	d006      	beq.n	800409c <__smakebuf_r+0x1c>
 800408e:	0023      	movs	r3, r4
 8004090:	3347      	adds	r3, #71	; 0x47
 8004092:	6023      	str	r3, [r4, #0]
 8004094:	6123      	str	r3, [r4, #16]
 8004096:	2301      	movs	r3, #1
 8004098:	6163      	str	r3, [r4, #20]
 800409a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800409c:	466a      	mov	r2, sp
 800409e:	ab01      	add	r3, sp, #4
 80040a0:	f7ff ffc6 	bl	8004030 <__swhatbuf_r>
 80040a4:	9900      	ldr	r1, [sp, #0]
 80040a6:	0007      	movs	r7, r0
 80040a8:	0028      	movs	r0, r5
 80040aa:	f7ff fa35 	bl	8003518 <_malloc_r>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d108      	bne.n	80040c4 <__smakebuf_r+0x44>
 80040b2:	220c      	movs	r2, #12
 80040b4:	5ea3      	ldrsh	r3, [r4, r2]
 80040b6:	059a      	lsls	r2, r3, #22
 80040b8:	d4ef      	bmi.n	800409a <__smakebuf_r+0x1a>
 80040ba:	2203      	movs	r2, #3
 80040bc:	4393      	bics	r3, r2
 80040be:	431e      	orrs	r6, r3
 80040c0:	81a6      	strh	r6, [r4, #12]
 80040c2:	e7e4      	b.n	800408e <__smakebuf_r+0xe>
 80040c4:	4b0f      	ldr	r3, [pc, #60]	; (8004104 <__smakebuf_r+0x84>)
 80040c6:	62ab      	str	r3, [r5, #40]	; 0x28
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	89a2      	ldrh	r2, [r4, #12]
 80040cc:	6020      	str	r0, [r4, #0]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	81a3      	strh	r3, [r4, #12]
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	6120      	str	r0, [r4, #16]
 80040d6:	6163      	str	r3, [r4, #20]
 80040d8:	9b01      	ldr	r3, [sp, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <__smakebuf_r+0x7a>
 80040de:	0028      	movs	r0, r5
 80040e0:	230e      	movs	r3, #14
 80040e2:	5ee1      	ldrsh	r1, [r4, r3]
 80040e4:	f000 f89c 	bl	8004220 <_isatty_r>
 80040e8:	2800      	cmp	r0, #0
 80040ea:	d006      	beq.n	80040fa <__smakebuf_r+0x7a>
 80040ec:	2203      	movs	r2, #3
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	4393      	bics	r3, r2
 80040f2:	001a      	movs	r2, r3
 80040f4:	2301      	movs	r3, #1
 80040f6:	4313      	orrs	r3, r2
 80040f8:	81a3      	strh	r3, [r4, #12]
 80040fa:	89a0      	ldrh	r0, [r4, #12]
 80040fc:	4307      	orrs	r7, r0
 80040fe:	81a7      	strh	r7, [r4, #12]
 8004100:	e7cb      	b.n	800409a <__smakebuf_r+0x1a>
 8004102:	46c0      	nop			; (mov r8, r8)
 8004104:	08003311 	.word	0x08003311

08004108 <memchr>:
 8004108:	b2c9      	uxtb	r1, r1
 800410a:	1882      	adds	r2, r0, r2
 800410c:	4290      	cmp	r0, r2
 800410e:	d101      	bne.n	8004114 <memchr+0xc>
 8004110:	2000      	movs	r0, #0
 8004112:	4770      	bx	lr
 8004114:	7803      	ldrb	r3, [r0, #0]
 8004116:	428b      	cmp	r3, r1
 8004118:	d0fb      	beq.n	8004112 <memchr+0xa>
 800411a:	3001      	adds	r0, #1
 800411c:	e7f6      	b.n	800410c <memchr+0x4>
	...

08004120 <__malloc_lock>:
 8004120:	b510      	push	{r4, lr}
 8004122:	4802      	ldr	r0, [pc, #8]	; (800412c <__malloc_lock+0xc>)
 8004124:	f7ff f9d3 	bl	80034ce <__retarget_lock_acquire_recursive>
 8004128:	bd10      	pop	{r4, pc}
 800412a:	46c0      	nop			; (mov r8, r8)
 800412c:	2000016c 	.word	0x2000016c

08004130 <__malloc_unlock>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4802      	ldr	r0, [pc, #8]	; (800413c <__malloc_unlock+0xc>)
 8004134:	f7ff f9cc 	bl	80034d0 <__retarget_lock_release_recursive>
 8004138:	bd10      	pop	{r4, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	2000016c 	.word	0x2000016c

08004140 <_free_r>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	0005      	movs	r5, r0
 8004144:	2900      	cmp	r1, #0
 8004146:	d010      	beq.n	800416a <_free_r+0x2a>
 8004148:	1f0c      	subs	r4, r1, #4
 800414a:	6823      	ldr	r3, [r4, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	da00      	bge.n	8004152 <_free_r+0x12>
 8004150:	18e4      	adds	r4, r4, r3
 8004152:	0028      	movs	r0, r5
 8004154:	f7ff ffe4 	bl	8004120 <__malloc_lock>
 8004158:	4a1d      	ldr	r2, [pc, #116]	; (80041d0 <_free_r+0x90>)
 800415a:	6813      	ldr	r3, [r2, #0]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <_free_r+0x2c>
 8004160:	6063      	str	r3, [r4, #4]
 8004162:	6014      	str	r4, [r2, #0]
 8004164:	0028      	movs	r0, r5
 8004166:	f7ff ffe3 	bl	8004130 <__malloc_unlock>
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	42a3      	cmp	r3, r4
 800416e:	d908      	bls.n	8004182 <_free_r+0x42>
 8004170:	6821      	ldr	r1, [r4, #0]
 8004172:	1860      	adds	r0, r4, r1
 8004174:	4283      	cmp	r3, r0
 8004176:	d1f3      	bne.n	8004160 <_free_r+0x20>
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	1841      	adds	r1, r0, r1
 800417e:	6021      	str	r1, [r4, #0]
 8004180:	e7ee      	b.n	8004160 <_free_r+0x20>
 8004182:	001a      	movs	r2, r3
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d001      	beq.n	800418e <_free_r+0x4e>
 800418a:	42a3      	cmp	r3, r4
 800418c:	d9f9      	bls.n	8004182 <_free_r+0x42>
 800418e:	6811      	ldr	r1, [r2, #0]
 8004190:	1850      	adds	r0, r2, r1
 8004192:	42a0      	cmp	r0, r4
 8004194:	d10b      	bne.n	80041ae <_free_r+0x6e>
 8004196:	6820      	ldr	r0, [r4, #0]
 8004198:	1809      	adds	r1, r1, r0
 800419a:	1850      	adds	r0, r2, r1
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	4283      	cmp	r3, r0
 80041a0:	d1e0      	bne.n	8004164 <_free_r+0x24>
 80041a2:	6818      	ldr	r0, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	1841      	adds	r1, r0, r1
 80041a8:	6011      	str	r1, [r2, #0]
 80041aa:	6053      	str	r3, [r2, #4]
 80041ac:	e7da      	b.n	8004164 <_free_r+0x24>
 80041ae:	42a0      	cmp	r0, r4
 80041b0:	d902      	bls.n	80041b8 <_free_r+0x78>
 80041b2:	230c      	movs	r3, #12
 80041b4:	602b      	str	r3, [r5, #0]
 80041b6:	e7d5      	b.n	8004164 <_free_r+0x24>
 80041b8:	6821      	ldr	r1, [r4, #0]
 80041ba:	1860      	adds	r0, r4, r1
 80041bc:	4283      	cmp	r3, r0
 80041be:	d103      	bne.n	80041c8 <_free_r+0x88>
 80041c0:	6818      	ldr	r0, [r3, #0]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	1841      	adds	r1, r0, r1
 80041c6:	6021      	str	r1, [r4, #0]
 80041c8:	6063      	str	r3, [r4, #4]
 80041ca:	6054      	str	r4, [r2, #4]
 80041cc:	e7ca      	b.n	8004164 <_free_r+0x24>
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	20000170 	.word	0x20000170

080041d4 <_read_r>:
 80041d4:	b570      	push	{r4, r5, r6, lr}
 80041d6:	0004      	movs	r4, r0
 80041d8:	0008      	movs	r0, r1
 80041da:	0011      	movs	r1, r2
 80041dc:	001a      	movs	r2, r3
 80041de:	2300      	movs	r3, #0
 80041e0:	4d05      	ldr	r5, [pc, #20]	; (80041f8 <_read_r+0x24>)
 80041e2:	602b      	str	r3, [r5, #0]
 80041e4:	f7fc fb73 	bl	80008ce <_read>
 80041e8:	1c43      	adds	r3, r0, #1
 80041ea:	d103      	bne.n	80041f4 <_read_r+0x20>
 80041ec:	682b      	ldr	r3, [r5, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d000      	beq.n	80041f4 <_read_r+0x20>
 80041f2:	6023      	str	r3, [r4, #0]
 80041f4:	bd70      	pop	{r4, r5, r6, pc}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	20000178 	.word	0x20000178

080041fc <_fstat_r>:
 80041fc:	2300      	movs	r3, #0
 80041fe:	b570      	push	{r4, r5, r6, lr}
 8004200:	4d06      	ldr	r5, [pc, #24]	; (800421c <_fstat_r+0x20>)
 8004202:	0004      	movs	r4, r0
 8004204:	0008      	movs	r0, r1
 8004206:	0011      	movs	r1, r2
 8004208:	602b      	str	r3, [r5, #0]
 800420a:	f7fc fba3 	bl	8000954 <_fstat>
 800420e:	1c43      	adds	r3, r0, #1
 8004210:	d103      	bne.n	800421a <_fstat_r+0x1e>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d000      	beq.n	800421a <_fstat_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd70      	pop	{r4, r5, r6, pc}
 800421c:	20000178 	.word	0x20000178

08004220 <_isatty_r>:
 8004220:	2300      	movs	r3, #0
 8004222:	b570      	push	{r4, r5, r6, lr}
 8004224:	4d06      	ldr	r5, [pc, #24]	; (8004240 <_isatty_r+0x20>)
 8004226:	0004      	movs	r4, r0
 8004228:	0008      	movs	r0, r1
 800422a:	602b      	str	r3, [r5, #0]
 800422c:	f7fc fba0 	bl	8000970 <_isatty>
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	d103      	bne.n	800423c <_isatty_r+0x1c>
 8004234:	682b      	ldr	r3, [r5, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d000      	beq.n	800423c <_isatty_r+0x1c>
 800423a:	6023      	str	r3, [r4, #0]
 800423c:	bd70      	pop	{r4, r5, r6, pc}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	20000178 	.word	0x20000178

08004244 <_init>:
 8004244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800424a:	bc08      	pop	{r3}
 800424c:	469e      	mov	lr, r3
 800424e:	4770      	bx	lr

08004250 <_fini>:
 8004250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004252:	46c0      	nop			; (mov r8, r8)
 8004254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004256:	bc08      	pop	{r3}
 8004258:	469e      	mov	lr, r3
 800425a:	4770      	bx	lr
