
I2C_Multiplexer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004b90  08004b90  00014b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce8  08004ce8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ce8  08004ce8  00014ce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cf0  08004cf0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf0  08004cf0  00014cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004cf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004d68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004d68  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebb3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f23  00000000  00000000  0002ec53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca8  00000000  00000000  00030b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023153  00000000  00000000  000323f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8e3  00000000  00000000  00055543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1b2a  00000000  00000000  00064e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136950  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b9c  00000000  00000000  001369a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b78 	.word	0x08004b78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08004b78 	.word	0x08004b78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fc3a 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f82e 	bl	80005ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000590:	f000 f8ee 	bl	8000770 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000594:	f000 f8bc 	bl	8000710 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000598:	f000 f87a 	bl	8000690 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  errIni = PCA9847_Initialise(&multiplexer, &hi2c1);
 800059c:	490e      	ldr	r1, [pc, #56]	; (80005d8 <main+0x54>)
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <main+0x58>)
 80005a0:	f000 fb37 	bl	8000c12 <PCA9847_Initialise>
 80005a4:	4603      	mov	r3, r0
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <main+0x5c>)
 80005aa:	701a      	strb	r2, [r3, #0]
  printf("Error-Initialsierung: %d \n",errIni);
 80005ac:	4b0c      	ldr	r3, [pc, #48]	; (80005e0 <main+0x5c>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	480c      	ldr	r0, [pc, #48]	; (80005e4 <main+0x60>)
 80005b4:	f003 fb52 	bl	8003c5c <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  PCA9847_SetChannel(&multiplexer, 1);
 80005b8:	2101      	movs	r1, #1
 80005ba:	4808      	ldr	r0, [pc, #32]	; (80005dc <main+0x58>)
 80005bc:	f000 fb4c 	bl	8000c58 <PCA9847_SetChannel>
	  channelNumber = PCA9847_CheckChannel(&multiplexer);
 80005c0:	4806      	ldr	r0, [pc, #24]	; (80005dc <main+0x58>)
 80005c2:	f000 fba9 	bl	8000d18 <PCA9847_CheckChannel>
 80005c6:	4603      	mov	r3, r0
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <main+0x64>)
 80005cc:	701a      	strb	r2, [r3, #0]
	  PCA9847_SetNextChannel(&multiplexer);
 80005ce:	4803      	ldr	r0, [pc, #12]	; (80005dc <main+0x58>)
 80005d0:	f000 fb88 	bl	8000ce4 <PCA9847_SetNextChannel>
	  PCA9847_SetChannel(&multiplexer, 1);
 80005d4:	e7f0      	b.n	80005b8 <main+0x34>
 80005d6:	bf00      	nop
 80005d8:	2000008c 	.word	0x2000008c
 80005dc:	20000164 	.word	0x20000164
 80005e0:	20000169 	.word	0x20000169
 80005e4:	08004b90 	.word	0x08004b90
 80005e8:	20000168 	.word	0x20000168

080005ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b096      	sub	sp, #88	; 0x58
 80005f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	2244      	movs	r2, #68	; 0x44
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f003 fb26 	bl	8003c4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000600:	463b      	mov	r3, r7
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000612:	f001 fc81 	bl	8001f18 <HAL_PWREx_ControlVoltageScaling>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800061c:	f000 f90e 	bl	800083c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000620:	2302      	movs	r3, #2
 8000622:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000624:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000628:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062a:	2340      	movs	r3, #64	; 0x40
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000632:	2302      	movs	r3, #2
 8000634:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800063a:	230a      	movs	r3, #10
 800063c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063e:	2307      	movs	r3, #7
 8000640:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000646:	2302      	movs	r3, #2
 8000648:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fcb8 	bl	8001fc4 <HAL_RCC_OscConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800065a:	f000 f8ef 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2303      	movs	r3, #3
 8000664:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066e:	2300      	movs	r3, #0
 8000670:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000672:	463b      	mov	r3, r7
 8000674:	2104      	movs	r1, #4
 8000676:	4618      	mov	r0, r3
 8000678:	f002 f8b8 	bl	80027ec <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000682:	f000 f8db 	bl	800083c <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3758      	adds	r7, #88	; 0x58
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000694:	4b1b      	ldr	r3, [pc, #108]	; (8000704 <MX_I2C1_Init+0x74>)
 8000696:	4a1c      	ldr	r2, [pc, #112]	; (8000708 <MX_I2C1_Init+0x78>)
 8000698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 800069a:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <MX_I2C1_Init+0x74>)
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <MX_I2C1_Init+0x7c>)
 800069e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a6:	4b17      	ldr	r3, [pc, #92]	; (8000704 <MX_I2C1_Init+0x74>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006b2:	4b14      	ldr	r3, [pc, #80]	; (8000704 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <MX_I2C1_Init+0x74>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006be:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_I2C1_Init+0x74>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <MX_I2C1_Init+0x74>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006ca:	480e      	ldr	r0, [pc, #56]	; (8000704 <MX_I2C1_Init+0x74>)
 80006cc:	f000 fe8c 	bl	80013e8 <HAL_I2C_Init>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006d6:	f000 f8b1 	bl	800083c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4809      	ldr	r0, [pc, #36]	; (8000704 <MX_I2C1_Init+0x74>)
 80006de:	f001 fb75 	bl	8001dcc <HAL_I2CEx_ConfigAnalogFilter>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006e8:	f000 f8a8 	bl	800083c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006ec:	2100      	movs	r1, #0
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_I2C1_Init+0x74>)
 80006f0:	f001 fbb7 	bl	8001e62 <HAL_I2CEx_ConfigDigitalFilter>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006fa:	f000 f89f 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	40005400 	.word	0x40005400
 800070c:	10909cec 	.word	0x10909cec

08000710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000716:	4a15      	ldr	r2, [pc, #84]	; (800076c <MX_USART2_UART_Init+0x5c>)
 8000718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800071c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000736:	220c      	movs	r2, #12
 8000738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800073c:	2200      	movs	r2, #0
 800073e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000742:	2200      	movs	r2, #0
 8000744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000748:	2200      	movs	r2, #0
 800074a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x58>)
 800074e:	2200      	movs	r2, #0
 8000750:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x58>)
 8000754:	f002 fdcc 	bl	80032f0 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800075e:	f000 f86d 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000e0 	.word	0x200000e0
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08a      	sub	sp, #40	; 0x28
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0314 	add.w	r3, r7, #20
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <MX_GPIO_Init+0xc4>)
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b28      	ldr	r3, [pc, #160]	; (8000834 <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0304 	and.w	r3, r3, #4
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079e:	4b25      	ldr	r3, [pc, #148]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a24      	ldr	r2, [pc, #144]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b22      	ldr	r3, [pc, #136]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b1f      	ldr	r3, [pc, #124]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a1e      	ldr	r2, [pc, #120]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b19      	ldr	r3, [pc, #100]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a18      	ldr	r2, [pc, #96]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <MX_GPIO_Init+0xc4>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2120      	movs	r1, #32
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fde3 	bl	80013b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	480b      	ldr	r0, [pc, #44]	; (8000838 <MX_GPIO_Init+0xc8>)
 800080a:	f000 fc5b 	bl	80010c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 800080e:	2320      	movs	r3, #32
 8000810:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0314 	add.w	r3, r7, #20
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000828:	f000 fc4c 	bl	80010c4 <HAL_GPIO_Init>

}
 800082c:	bf00      	nop
 800082e:	3728      	adds	r7, #40	; 0x28
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	48000800 	.word	0x48000800

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <HAL_MspInit+0x44>)
 8000850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000852:	4a0e      	ldr	r2, [pc, #56]	; (800088c <HAL_MspInit+0x44>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6613      	str	r3, [r2, #96]	; 0x60
 800085a:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_MspInit+0x44>)
 800085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b09      	ldr	r3, [pc, #36]	; (800088c <HAL_MspInit+0x44>)
 8000868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800086a:	4a08      	ldr	r2, [pc, #32]	; (800088c <HAL_MspInit+0x44>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	6593      	str	r3, [r2, #88]	; 0x58
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <HAL_MspInit+0x44>)
 8000874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40021000 	.word	0x40021000

08000890 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b0a4      	sub	sp, #144	; 0x90
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000898:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2268      	movs	r2, #104	; 0x68
 80008ae:	2100      	movs	r1, #0
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 f9cb 	bl	8003c4c <memset>
  if(hi2c->Instance==I2C1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a21      	ldr	r2, [pc, #132]	; (8000940 <HAL_I2C_MspInit+0xb0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d13b      	bne.n	8000938 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c4:	2300      	movs	r3, #0
 80008c6:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4618      	mov	r0, r3
 80008ce:	f002 f9b1 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008d8:	f7ff ffb0 	bl	800083c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_I2C_MspInit+0xb4>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	4a18      	ldr	r2, [pc, #96]	; (8000944 <HAL_I2C_MspInit+0xb4>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <HAL_I2C_MspInit+0xb4>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008fa:	2312      	movs	r3, #18
 80008fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800090c:	2304      	movs	r3, #4
 800090e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fbd2 	bl	80010c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_I2C_MspInit+0xb4>)
 8000922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_I2C_MspInit+0xb4>)
 8000926:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800092a:	6593      	str	r3, [r2, #88]	; 0x58
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_I2C_MspInit+0xb4>)
 800092e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000938:	bf00      	nop
 800093a:	3790      	adds	r7, #144	; 0x90
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	40005400 	.word	0x40005400
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b0a4      	sub	sp, #144	; 0x90
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000950:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	605a      	str	r2, [r3, #4]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	60da      	str	r2, [r3, #12]
 800095e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	2268      	movs	r2, #104	; 0x68
 8000966:	2100      	movs	r1, #0
 8000968:	4618      	mov	r0, r3
 800096a:	f003 f96f 	bl	8003c4c <memset>
  if(huart->Instance==USART2)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <HAL_UART_MspInit+0xb0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d13a      	bne.n	80009ee <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000978:	2302      	movs	r3, #2
 800097a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800097c:	2300      	movs	r3, #0
 800097e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	4618      	mov	r0, r3
 8000986:	f002 f955 	bl	8002c34 <HAL_RCCEx_PeriphCLKConfig>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000990:	f7ff ff54 	bl	800083c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000994:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_UART_MspInit+0xb4>)
 8000996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000998:	4a18      	ldr	r2, [pc, #96]	; (80009fc <HAL_UART_MspInit+0xb4>)
 800099a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800099e:	6593      	str	r3, [r2, #88]	; 0x58
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_UART_MspInit+0xb4>)
 80009a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009a8:	613b      	str	r3, [r7, #16]
 80009aa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_UART_MspInit+0xb4>)
 80009ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b0:	4a12      	ldr	r2, [pc, #72]	; (80009fc <HAL_UART_MspInit+0xb4>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b8:	4b10      	ldr	r3, [pc, #64]	; (80009fc <HAL_UART_MspInit+0xb4>)
 80009ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009bc:	f003 0301 	and.w	r3, r3, #1
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009c4:	230c      	movs	r3, #12
 80009c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009da:	2307      	movs	r3, #7
 80009dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009e4:	4619      	mov	r1, r3
 80009e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ea:	f000 fb6b 	bl	80010c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ee:	bf00      	nop
 80009f0:	3790      	adds	r7, #144	; 0x90
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40004400 	.word	0x40004400
 80009fc:	40021000 	.word	0x40021000

08000a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a04:	e7fe      	b.n	8000a04 <NMI_Handler+0x4>

08000a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a06:	b480      	push	{r7}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a0a:	e7fe      	b.n	8000a0a <HardFault_Handler+0x4>

08000a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a10:	e7fe      	b.n	8000a10 <MemManage_Handler+0x4>

08000a12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr

08000a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4c:	f000 fa34 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b086      	sub	sp, #24
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
 8000a64:	e00a      	b.n	8000a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a66:	f3af 8000 	nop.w
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	1c5a      	adds	r2, r3, #1
 8000a70:	60ba      	str	r2, [r7, #8]
 8000a72:	b2ca      	uxtb	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	617b      	str	r3, [r7, #20]
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	dbf0      	blt.n	8000a66 <_read+0x12>
	}

return len;
 8000a84:	687b      	ldr	r3, [r7, #4]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b086      	sub	sp, #24
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	60b9      	str	r1, [r7, #8]
 8000a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	e009      	b.n	8000ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	1c5a      	adds	r2, r3, #1
 8000aa4:	60ba      	str	r2, [r7, #8]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	617b      	str	r3, [r7, #20]
 8000ab4:	697a      	ldr	r2, [r7, #20]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dbf1      	blt.n	8000aa0 <_write+0x12>
	}
	return len;
 8000abc:	687b      	ldr	r3, [r7, #4]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3718      	adds	r7, #24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <_close>:

int _close(int file)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
	return -1;
 8000ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aee:	605a      	str	r2, [r3, #4]
	return 0;
 8000af0:	2300      	movs	r3, #0
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr

08000afe <_isatty>:

int _isatty(int file)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	return 1;
 8000b06:	2301      	movs	r3, #1
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr

08000b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b085      	sub	sp, #20
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3714      	adds	r7, #20
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
	...

08000b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b38:	4a14      	ldr	r2, [pc, #80]	; (8000b8c <_sbrk+0x5c>)
 8000b3a:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <_sbrk+0x60>)
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b44:	4b13      	ldr	r3, [pc, #76]	; (8000b94 <_sbrk+0x64>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <_sbrk+0x64>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <_sbrk+0x68>)
 8000b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	d207      	bcs.n	8000b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b60:	f003 f84a 	bl	8003bf8 <__errno>
 8000b64:	4603      	mov	r3, r0
 8000b66:	220c      	movs	r2, #12
 8000b68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b6e:	e009      	b.n	8000b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b70:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <_sbrk+0x64>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b76:	4b07      	ldr	r3, [pc, #28]	; (8000b94 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <_sbrk+0x64>)
 8000b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b82:	68fb      	ldr	r3, [r7, #12]
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3718      	adds	r7, #24
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20028000 	.word	0x20028000
 8000b90:	00000400 	.word	0x00000400
 8000b94:	2000016c 	.word	0x2000016c
 8000b98:	20000188 	.word	0x20000188

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f003 f809 	bl	8003c04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff fcc7 	bl	8000584 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c04:	08004cf8 	.word	0x08004cf8
  ldr r2, =_sbss
 8000c08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c0c:	20000184 	.word	0x20000184

08000c10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_IRQHandler>

08000c12 <PCA9847_Initialise>:
#include "PCA9847.h"

uint8_t PCA9847_Initialise(PCA9847 *dev, I2C_HandleTypeDef *i2cHandle) {
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b084      	sub	sp, #16
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	6078      	str	r0, [r7, #4]
 8000c1a:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	683a      	ldr	r2, [r7, #0]
 8000c20:	601a      	str	r2, [r3, #0]

	/* Store number of transaction errors */
	uint8_t regData;
	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	73fb      	strb	r3, [r7, #15]

	/* Set to reset default state (all channels disabled) */
	regData = DISABLE_CHANNELS;
 8000c26:	2300      	movs	r3, #0
 8000c28:	737b      	strb	r3, [r7, #13]
	status = PCA9847_Write(dev, &regData);
 8000c2a:	f107 030d 	add.w	r3, r7, #13
 8000c2e:	4619      	mov	r1, r3
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f000 f8bf 	bl	8000db4 <PCA9847_Write>
 8000c36:	4603      	mov	r3, r0
 8000c38:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bf14      	ite	ne
 8000c40:	2301      	movne	r3, #1
 8000c42:	2300      	moveq	r3, #0
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	461a      	mov	r2, r3
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	73fb      	strb	r3, [r7, #15]

	return errNum;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <PCA9847_SetChannel>:

void PCA9847_SetChannel(PCA9847 *dev, uint8_t channelNumber) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	460b      	mov	r3, r1
 8000c62:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	switch (channelNumber) {
 8000c64:	78fb      	ldrb	r3, [r7, #3]
 8000c66:	2b07      	cmp	r3, #7
 8000c68:	d82a      	bhi.n	8000cc0 <PCA9847_SetChannel+0x68>
 8000c6a:	a201      	add	r2, pc, #4	; (adr r2, 8000c70 <PCA9847_SetChannel+0x18>)
 8000c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c70:	08000c91 	.word	0x08000c91
 8000c74:	08000c97 	.word	0x08000c97
 8000c78:	08000c9d 	.word	0x08000c9d
 8000c7c:	08000ca3 	.word	0x08000ca3
 8000c80:	08000ca9 	.word	0x08000ca9
 8000c84:	08000caf 	.word	0x08000caf
 8000c88:	08000cb5 	.word	0x08000cb5
 8000c8c:	08000cbb 	.word	0x08000cbb
	case 0:
		regData = ENABLE_CHANNEL_0;
 8000c90:	2308      	movs	r3, #8
 8000c92:	73fb      	strb	r3, [r7, #15]
		break;
 8000c94:	e01a      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 1:
		regData = ENABLE_CHANNEL_1;
 8000c96:	2309      	movs	r3, #9
 8000c98:	73fb      	strb	r3, [r7, #15]
		break;
 8000c9a:	e017      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 2:
		regData = ENABLE_CHANNEL_2;
 8000c9c:	230a      	movs	r3, #10
 8000c9e:	73fb      	strb	r3, [r7, #15]
		break;
 8000ca0:	e014      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 3:
		regData = ENABLE_CHANNEL_3;
 8000ca2:	230b      	movs	r3, #11
 8000ca4:	73fb      	strb	r3, [r7, #15]
		break;
 8000ca6:	e011      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 4:
		regData = ENABLE_CHANNEL_4;
 8000ca8:	230c      	movs	r3, #12
 8000caa:	73fb      	strb	r3, [r7, #15]
		break;
 8000cac:	e00e      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 5:
		regData = ENABLE_CHANNEL_5;
 8000cae:	230d      	movs	r3, #13
 8000cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb2:	e00b      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 6:
		regData = ENABLE_CHANNEL_6;
 8000cb4:	230e      	movs	r3, #14
 8000cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb8:	e008      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	case 7:
		regData = ENABLE_CHANNEL_7;
 8000cba:	230f      	movs	r3, #15
 8000cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8000cbe:	e005      	b.n	8000ccc <PCA9847_SetChannel+0x74>
	default:
		printf("Channelnumber should be 0-7 but is %d \r\n", channelNumber);
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4806      	ldr	r0, [pc, #24]	; (8000ce0 <PCA9847_SetChannel+0x88>)
 8000cc6:	f002 ffc9 	bl	8003c5c <iprintf>
 8000cca:	e005      	b.n	8000cd8 <PCA9847_SetChannel+0x80>
		return;
	}
	PCA9847_Write(dev, &regData);
 8000ccc:	f107 030f 	add.w	r3, r7, #15
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f86e 	bl	8000db4 <PCA9847_Write>
}
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	08004bac 	.word	0x08004bac

08000ce4 <PCA9847_SetNextChannel>:

void PCA9847_SetNextChannel(PCA9847 *dev) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
	uint8_t currentChannel;
	uint8_t nextChannel;
	currentChannel = PCA9847_CheckChannel(dev);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f813 	bl	8000d18 <PCA9847_CheckChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73bb      	strb	r3, [r7, #14]
	nextChannel = currentChannel + 1;
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
	if (nextChannel >= 8) {
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2b07      	cmp	r3, #7
 8000d00:	d901      	bls.n	8000d06 <PCA9847_SetNextChannel+0x22>
		nextChannel = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
	}
	PCA9847_SetChannel(dev, nextChannel);
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff ffa4 	bl	8000c58 <PCA9847_SetChannel>

}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <PCA9847_CheckChannel>:
	uint8_t regData;
	regData = DISABLE_CHANNELS;
	PCA9847_Write(dev, &regData);
}

uint8_t PCA9847_CheckChannel(PCA9847 *dev) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	uint8_t regData;
	PCA9847_Read(dev, &regData);
 8000d20:	f107 030f 	add.w	r3, r7, #15
 8000d24:	4619      	mov	r1, r3
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 f857 	bl	8000dda <PCA9847_Read>
	switch (regData) {
 8000d2c:	7bfb      	ldrb	r3, [r7, #15]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d834      	bhi.n	8000d9c <PCA9847_CheckChannel+0x84>
 8000d32:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <PCA9847_CheckChannel+0x20>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000d99 	.word	0x08000d99
 8000d3c:	08000d9d 	.word	0x08000d9d
 8000d40:	08000d9d 	.word	0x08000d9d
 8000d44:	08000d9d 	.word	0x08000d9d
 8000d48:	08000d9d 	.word	0x08000d9d
 8000d4c:	08000d9d 	.word	0x08000d9d
 8000d50:	08000d9d 	.word	0x08000d9d
 8000d54:	08000d9d 	.word	0x08000d9d
 8000d58:	08000d79 	.word	0x08000d79
 8000d5c:	08000d7d 	.word	0x08000d7d
 8000d60:	08000d81 	.word	0x08000d81
 8000d64:	08000d85 	.word	0x08000d85
 8000d68:	08000d89 	.word	0x08000d89
 8000d6c:	08000d8d 	.word	0x08000d8d
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000d95 	.word	0x08000d95
	case ENABLE_CHANNEL_0:
		return 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	e015      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_1:
		return 1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e013      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_2:
		return 2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	e011      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_3:
		return 3;
 8000d84:	2303      	movs	r3, #3
 8000d86:	e00f      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_4:
		return 4;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	e00d      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_5:
		return 5;
 8000d8c:	2305      	movs	r3, #5
 8000d8e:	e00b      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_6:
		return 6;
 8000d90:	2306      	movs	r3, #6
 8000d92:	e009      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case ENABLE_CHANNEL_7:
		return 7;
 8000d94:	2307      	movs	r3, #7
 8000d96:	e007      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	case DISABLE_CHANNELS:
		return 8;
 8000d98:	2308      	movs	r3, #8
 8000d9a:	e005      	b.n	8000da8 <PCA9847_CheckChannel+0x90>
	default:
		printf("Couldn't check Channel. Received Data: %d \r\n", regData);
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4803      	ldr	r0, [pc, #12]	; (8000db0 <PCA9847_CheckChannel+0x98>)
 8000da2:	f002 ff5b 	bl	8003c5c <iprintf>
		return 9;
 8000da6:	2309      	movs	r3, #9
	}
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3710      	adds	r7, #16
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	08004bd8 	.word	0x08004bd8

08000db4 <PCA9847_Write>:

/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef PCA9847_Write(PCA9847 *dev, uint8_t *data) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b084      	sub	sp, #16
 8000db8:	af02      	add	r7, sp, #8
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Master_Transmit(dev->i2cHandle, PCA9847_I2C_ADDR, data, 1,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6818      	ldr	r0, [r3, #0]
 8000dc2:	230a      	movs	r3, #10
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	683a      	ldr	r2, [r7, #0]
 8000dca:	21e2      	movs	r1, #226	; 0xe2
 8000dcc:	f000 fb9c 	bl	8001508 <HAL_I2C_Master_Transmit>
 8000dd0:	4603      	mov	r3, r0
			10);
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PCA9847_Read>:

HAL_StatusTypeDef PCA9847_Read(PCA9847 *dev, uint8_t *data) {
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b084      	sub	sp, #16
 8000dde:	af02      	add	r7, sp, #8
 8000de0:	6078      	str	r0, [r7, #4]
 8000de2:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Master_Receive(dev->i2cHandle, PCA9847_I2C_ADDR, data, 1, 10);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6818      	ldr	r0, [r3, #0]
 8000de8:	230a      	movs	r3, #10
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2301      	movs	r3, #1
 8000dee:	683a      	ldr	r2, [r7, #0]
 8000df0:	21e2      	movs	r1, #226	; 0xe2
 8000df2:	f000 fc7d 	bl	80016f0 <HAL_I2C_Master_Receive>
 8000df6:	4603      	mov	r3, r0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0a:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <HAL_Init+0x3c>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <HAL_Init+0x3c>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e16:	2003      	movs	r0, #3
 8000e18:	f000 f920 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f000 f80f 	bl	8000e40 <HAL_InitTick>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	71fb      	strb	r3, [r7, #7]
 8000e2c:	e001      	b.n	8000e32 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2e:	f7ff fd0b 	bl	8000848 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e32:	79fb      	ldrb	r3, [r7, #7]
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e4c:	4b17      	ldr	r3, [pc, #92]	; (8000eac <HAL_InitTick+0x6c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d023      	beq.n	8000e9c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <HAL_InitTick+0x70>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <HAL_InitTick+0x6c>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f91d 	bl	80010aa <HAL_SYSTICK_Config>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10f      	bne.n	8000e96 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d809      	bhi.n	8000e90 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f8f5 	bl	8001072 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e88:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_InitTick+0x74>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e007      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e004      	b.n	8000ea0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e001      	b.n	8000ea0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	20000004 	.word	0x20000004

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000008 	.word	0x20000008
 8000edc:	20000170 	.word	0x20000170

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000170 	.word	0x20000170

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d2:	e154      	b.n	800137e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	2101      	movs	r1, #1
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 8146 	beq.w	8001378 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d005      	beq.n	8001104 <HAL_GPIO_Init+0x40>
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b02      	cmp	r3, #2
 8001102:	d130      	bne.n	8001166 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68da      	ldr	r2, [r3, #12]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4313      	orrs	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800113a:	2201      	movs	r2, #1
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	091b      	lsrs	r3, r3, #4
 8001150:	f003 0201 	and.w	r2, r3, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	2b03      	cmp	r3, #3
 8001170:	d017      	beq.n	80011a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	2203      	movs	r2, #3
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d123      	bne.n	80011f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	08da      	lsrs	r2, r3, #3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3208      	adds	r2, #8
 80011b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	691a      	ldr	r2, [r3, #16]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0307 	and.w	r3, r3, #7
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	08da      	lsrs	r2, r3, #3
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3208      	adds	r2, #8
 80011f0:	6939      	ldr	r1, [r7, #16]
 80011f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0203 	and.w	r2, r3, #3
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 80a0 	beq.w	8001378 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001238:	4b58      	ldr	r3, [pc, #352]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800123a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800123c:	4a57      	ldr	r2, [pc, #348]	; (800139c <HAL_GPIO_Init+0x2d8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6613      	str	r3, [r2, #96]	; 0x60
 8001244:	4b55      	ldr	r3, [pc, #340]	; (800139c <HAL_GPIO_Init+0x2d8>)
 8001246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001250:	4a53      	ldr	r2, [pc, #332]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	089b      	lsrs	r3, r3, #2
 8001256:	3302      	adds	r3, #2
 8001258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800127a:	d019      	beq.n	80012b0 <HAL_GPIO_Init+0x1ec>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	4a49      	ldr	r2, [pc, #292]	; (80013a4 <HAL_GPIO_Init+0x2e0>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d013      	beq.n	80012ac <HAL_GPIO_Init+0x1e8>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4a48      	ldr	r2, [pc, #288]	; (80013a8 <HAL_GPIO_Init+0x2e4>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00d      	beq.n	80012a8 <HAL_GPIO_Init+0x1e4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a47      	ldr	r2, [pc, #284]	; (80013ac <HAL_GPIO_Init+0x2e8>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d007      	beq.n	80012a4 <HAL_GPIO_Init+0x1e0>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_GPIO_Init+0x2ec>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d101      	bne.n	80012a0 <HAL_GPIO_Init+0x1dc>
 800129c:	2304      	movs	r3, #4
 800129e:	e008      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a0:	2307      	movs	r3, #7
 80012a2:	e006      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a4:	2303      	movs	r3, #3
 80012a6:	e004      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012a8:	2302      	movs	r3, #2
 80012aa:	e002      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_GPIO_Init+0x1ee>
 80012b0:	2300      	movs	r3, #0
 80012b2:	697a      	ldr	r2, [r7, #20]
 80012b4:	f002 0203 	and.w	r2, r2, #3
 80012b8:	0092      	lsls	r2, r2, #2
 80012ba:	4093      	lsls	r3, r2
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012c2:	4937      	ldr	r1, [pc, #220]	; (80013a0 <HAL_GPIO_Init+0x2dc>)
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	089b      	lsrs	r3, r3, #2
 80012c8:	3302      	adds	r3, #2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012d0:	4b38      	ldr	r3, [pc, #224]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	43db      	mvns	r3, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012f4:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012fa:	4b2e      	ldr	r3, [pc, #184]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d003      	beq.n	800131e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800131e:	4a25      	ldr	r2, [pc, #148]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001324:	4b23      	ldr	r3, [pc, #140]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001348:	4a1a      	ldr	r2, [pc, #104]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800134e:	4b19      	ldr	r3, [pc, #100]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <HAL_GPIO_Init+0x2f0>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	3301      	adds	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f aea3 	bne.w	80010d4 <HAL_GPIO_Init+0x10>
  }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	371c      	adds	r7, #28
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40021000 	.word	0x40021000
 80013a0:	40010000 	.word	0x40010000
 80013a4:	48000400 	.word	0x48000400
 80013a8:	48000800 	.word	0x48000800
 80013ac:	48000c00 	.word	0x48000c00
 80013b0:	48001000 	.word	0x48001000
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	460b      	mov	r3, r1
 80013c2:	807b      	strh	r3, [r7, #2]
 80013c4:	4613      	mov	r3, r2
 80013c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c8:	787b      	ldrb	r3, [r7, #1]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013ce:	887a      	ldrh	r2, [r7, #2]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e081      	b.n	80014fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d106      	bne.n	8001414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fa3e 	bl	8000890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2224      	movs	r2, #36	; 0x24
 8001418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f022 0201 	bic.w	r2, r2, #1
 800142a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001438:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001448:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d107      	bne.n	8001462 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	e006      	b.n	8001470 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800146e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	2b02      	cmp	r3, #2
 8001476:	d104      	bne.n	8001482 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001480:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001490:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001494:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68da      	ldr	r2, [r3, #12]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	691a      	ldr	r2, [r3, #16]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69d9      	ldr	r1, [r3, #28]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1a      	ldr	r2, [r3, #32]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0201 	orr.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2220      	movs	r2, #32
 80014ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af02      	add	r7, sp, #8
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	607a      	str	r2, [r7, #4]
 8001512:	461a      	mov	r2, r3
 8001514:	460b      	mov	r3, r1
 8001516:	817b      	strh	r3, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b20      	cmp	r3, #32
 8001526:	f040 80da 	bne.w	80016de <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001530:	2b01      	cmp	r3, #1
 8001532:	d101      	bne.n	8001538 <HAL_I2C_Master_Transmit+0x30>
 8001534:	2302      	movs	r3, #2
 8001536:	e0d3      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1d8>
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001540:	f7ff fcce 	bl	8000ee0 <HAL_GetTick>
 8001544:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	2319      	movs	r3, #25
 800154c:	2201      	movs	r2, #1
 800154e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001552:	68f8      	ldr	r0, [r7, #12]
 8001554:	f000 f9e6 	bl	8001924 <I2C_WaitOnFlagUntilTimeout>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0be      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	2221      	movs	r2, #33	; 0x21
 8001566:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2210      	movs	r2, #16
 800156e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2200      	movs	r2, #0
 8001576:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	893a      	ldrh	r2, [r7, #8]
 8001582:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2200      	movs	r2, #0
 8001588:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158e:	b29b      	uxth	r3, r3
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d90e      	bls.n	80015b2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	22ff      	movs	r2, #255	; 0xff
 8001598:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	8979      	ldrh	r1, [r7, #10]
 80015a2:	4b51      	ldr	r3, [pc, #324]	; (80016e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f000 fbdc 	bl	8001d68 <I2C_TransferConfig>
 80015b0:	e06c      	b.n	800168c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b6:	b29a      	uxth	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	8979      	ldrh	r1, [r7, #10]
 80015c4:	4b48      	ldr	r3, [pc, #288]	; (80016e8 <HAL_I2C_Master_Transmit+0x1e0>)
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015cc:	68f8      	ldr	r0, [r7, #12]
 80015ce:	f000 fbcb 	bl	8001d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80015d2:	e05b      	b.n	800168c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	6a39      	ldr	r1, [r7, #32]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f000 f9e3 	bl	80019a4 <I2C_WaitOnTXISFlagUntilTimeout>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e07b      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	781a      	ldrb	r2, [r3, #0]
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f8:	1c5a      	adds	r2, r3, #1
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001602:	b29b      	uxth	r3, r3
 8001604:	3b01      	subs	r3, #1
 8001606:	b29a      	uxth	r2, r3
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001610:	3b01      	subs	r3, #1
 8001612:	b29a      	uxth	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29b      	uxth	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d034      	beq.n	800168c <HAL_I2C_Master_Transmit+0x184>
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001626:	2b00      	cmp	r3, #0
 8001628:	d130      	bne.n	800168c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	2200      	movs	r2, #0
 8001632:	2180      	movs	r1, #128	; 0x80
 8001634:	68f8      	ldr	r0, [r7, #12]
 8001636:	f000 f975 	bl	8001924 <I2C_WaitOnFlagUntilTimeout>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e04d      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001648:	b29b      	uxth	r3, r3
 800164a:	2bff      	cmp	r3, #255	; 0xff
 800164c:	d90e      	bls.n	800166c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	22ff      	movs	r2, #255	; 0xff
 8001652:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001658:	b2da      	uxtb	r2, r3
 800165a:	8979      	ldrh	r1, [r7, #10]
 800165c:	2300      	movs	r3, #0
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 fb7f 	bl	8001d68 <I2C_TransferConfig>
 800166a:	e00f      	b.n	800168c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001670:	b29a      	uxth	r2, r3
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800167a:	b2da      	uxtb	r2, r3
 800167c:	8979      	ldrh	r1, [r7, #10]
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 fb6e 	bl	8001d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001690:	b29b      	uxth	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d19e      	bne.n	80015d4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	6a39      	ldr	r1, [r7, #32]
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f000 f9c2 	bl	8001a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e01a      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2220      	movs	r2, #32
 80016b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_I2C_Master_Transmit+0x1e4>)
 80016be:	400b      	ands	r3, r1
 80016c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2220      	movs	r2, #32
 80016c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016da:	2300      	movs	r3, #0
 80016dc:	e000      	b.n	80016e0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016de:	2302      	movs	r3, #2
  }
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	80002000 	.word	0x80002000
 80016ec:	fe00e800 	.word	0xfe00e800

080016f0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b088      	sub	sp, #32
 80016f4:	af02      	add	r7, sp, #8
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	460b      	mov	r3, r1
 80016fe:	817b      	strh	r3, [r7, #10]
 8001700:	4613      	mov	r3, r2
 8001702:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b20      	cmp	r3, #32
 800170e:	f040 80db 	bne.w	80018c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001718:	2b01      	cmp	r3, #1
 800171a:	d101      	bne.n	8001720 <HAL_I2C_Master_Receive+0x30>
 800171c:	2302      	movs	r3, #2
 800171e:	e0d4      	b.n	80018ca <HAL_I2C_Master_Receive+0x1da>
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001728:	f7ff fbda 	bl	8000ee0 <HAL_GetTick>
 800172c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2319      	movs	r3, #25
 8001734:	2201      	movs	r2, #1
 8001736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 f8f2 	bl	8001924 <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e0bf      	b.n	80018ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	2222      	movs	r2, #34	; 0x22
 800174e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2210      	movs	r2, #16
 8001756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2200      	movs	r2, #0
 800175e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	893a      	ldrh	r2, [r7, #8]
 800176a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2bff      	cmp	r3, #255	; 0xff
 800177a:	d90e      	bls.n	800179a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	22ff      	movs	r2, #255	; 0xff
 8001780:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001786:	b2da      	uxtb	r2, r3
 8001788:	8979      	ldrh	r1, [r7, #10]
 800178a:	4b52      	ldr	r3, [pc, #328]	; (80018d4 <HAL_I2C_Master_Receive+0x1e4>)
 800178c:	9300      	str	r3, [sp, #0]
 800178e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 fae8 	bl	8001d68 <I2C_TransferConfig>
 8001798:	e06d      	b.n	8001876 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800179e:	b29a      	uxth	r2, r3
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	8979      	ldrh	r1, [r7, #10]
 80017ac:	4b49      	ldr	r3, [pc, #292]	; (80018d4 <HAL_I2C_Master_Receive+0x1e4>)
 80017ae:	9300      	str	r3, [sp, #0]
 80017b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f000 fad7 	bl	8001d68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80017ba:	e05c      	b.n	8001876 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	6a39      	ldr	r1, [r7, #32]
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f000 f96b 	bl	8001a9c <I2C_WaitOnRXNEFlagUntilTimeout>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e07c      	b.n	80018ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	1c5a      	adds	r2, r3, #1
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017ec:	3b01      	subs	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b29a      	uxth	r2, r3
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	2b00      	cmp	r3, #0
 800180a:	d034      	beq.n	8001876 <HAL_I2C_Master_Receive+0x186>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001810:	2b00      	cmp	r3, #0
 8001812:	d130      	bne.n	8001876 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	9300      	str	r3, [sp, #0]
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	2200      	movs	r2, #0
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 f880 	bl	8001924 <I2C_WaitOnFlagUntilTimeout>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e04d      	b.n	80018ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29b      	uxth	r3, r3
 8001834:	2bff      	cmp	r3, #255	; 0xff
 8001836:	d90e      	bls.n	8001856 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	22ff      	movs	r2, #255	; 0xff
 800183c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001842:	b2da      	uxtb	r2, r3
 8001844:	8979      	ldrh	r1, [r7, #10]
 8001846:	2300      	movs	r3, #0
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 fa8a 	bl	8001d68 <I2C_TransferConfig>
 8001854:	e00f      	b.n	8001876 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185a:	b29a      	uxth	r2, r3
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001864:	b2da      	uxtb	r2, r3
 8001866:	8979      	ldrh	r1, [r7, #10]
 8001868:	2300      	movs	r3, #0
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	f000 fa79 	bl	8001d68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d19d      	bne.n	80017bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001880:	697a      	ldr	r2, [r7, #20]
 8001882:	6a39      	ldr	r1, [r7, #32]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f8cd 	bl	8001a24 <I2C_WaitOnSTOPFlagUntilTimeout>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e01a      	b.n	80018ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2220      	movs	r2, #32
 800189a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6859      	ldr	r1, [r3, #4]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <HAL_I2C_Master_Receive+0x1e8>)
 80018a8:	400b      	ands	r3, r1
 80018aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2220      	movs	r2, #32
 80018b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e000      	b.n	80018ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80018c8:	2302      	movs	r3, #2
  }
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	80002400 	.word	0x80002400
 80018d8:	fe00e800 	.word	0xfe00e800

080018dc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	699b      	ldr	r3, [r3, #24]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d103      	bne.n	80018fa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	699b      	ldr	r3, [r3, #24]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b01      	cmp	r3, #1
 8001906:	d007      	beq.n	8001918 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	699a      	ldr	r2, [r3, #24]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	619a      	str	r2, [r3, #24]
  }
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr

08001924 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	4613      	mov	r3, r2
 8001932:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001934:	e022      	b.n	800197c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800193c:	d01e      	beq.n	800197c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800193e:	f7ff facf 	bl	8000ee0 <HAL_GetTick>
 8001942:	4602      	mov	r2, r0
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	429a      	cmp	r2, r3
 800194c:	d302      	bcc.n	8001954 <I2C_WaitOnFlagUntilTimeout+0x30>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d113      	bne.n	800197c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2220      	movs	r2, #32
 8001964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e00f      	b.n	800199c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	699a      	ldr	r2, [r3, #24]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4013      	ands	r3, r2
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	429a      	cmp	r2, r3
 800198a:	bf0c      	ite	eq
 800198c:	2301      	moveq	r3, #1
 800198e:	2300      	movne	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	79fb      	ldrb	r3, [r7, #7]
 8001996:	429a      	cmp	r2, r3
 8001998:	d0cd      	beq.n	8001936 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80019b0:	e02c      	b.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	68f8      	ldr	r0, [r7, #12]
 80019b8:	f000 f8ea 	bl	8001b90 <I2C_IsErrorOccurred>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e02a      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019cc:	d01e      	beq.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019ce:	f7ff fa87 	bl	8000ee0 <HAL_GetTick>
 80019d2:	4602      	mov	r2, r0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	68ba      	ldr	r2, [r7, #8]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d302      	bcc.n	80019e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d113      	bne.n	8001a0c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e8:	f043 0220 	orr.w	r2, r3, #32
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2220      	movs	r2, #32
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e007      	b.n	8001a1c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d1cb      	bne.n	80019b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001a1a:	2300      	movs	r3, #0
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3710      	adds	r7, #16
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a30:	e028      	b.n	8001a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	68b9      	ldr	r1, [r7, #8]
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f8aa 	bl	8001b90 <I2C_IsErrorOccurred>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e026      	b.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a46:	f7ff fa4b 	bl	8000ee0 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d113      	bne.n	8001a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a60:	f043 0220 	orr.w	r2, r3, #32
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2220      	movs	r2, #32
 8001a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e007      	b.n	8001a94 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	f003 0320 	and.w	r3, r3, #32
 8001a8e:	2b20      	cmp	r3, #32
 8001a90:	d1cf      	bne.n	8001a32 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001aa8:	e064      	b.n	8001b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 f86e 	bl	8001b90 <I2C_IsErrorOccurred>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e062      	b.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0320 	and.w	r3, r3, #32
 8001ac8:	2b20      	cmp	r3, #32
 8001aca:	d138      	bne.n	8001b3e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d105      	bne.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e04e      	b.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	f003 0310 	and.w	r3, r3, #16
 8001af0:	2b10      	cmp	r3, #16
 8001af2:	d107      	bne.n	8001b04 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2210      	movs	r2, #16
 8001afa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2204      	movs	r2, #4
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
 8001b02:	e002      	b.n	8001b0a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	6859      	ldr	r1, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001b1e:	400b      	ands	r3, r1
 8001b20:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2220      	movs	r2, #32
 8001b26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e022      	b.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b3e:	f7ff f9cf 	bl	8000ee0 <HAL_GetTick>
 8001b42:	4602      	mov	r2, r0
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d302      	bcc.n	8001b54 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d10f      	bne.n	8001b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	f043 0220 	orr.w	r2, r3, #32
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2220      	movs	r2, #32
 8001b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e007      	b.n	8001b84 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	d193      	bne.n	8001aaa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001b82:	2300      	movs	r3, #0
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	fe00e800 	.word	0xfe00e800

08001b90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	f003 0310 	and.w	r3, r3, #16
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d075      	beq.n	8001ca8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001bc4:	e056      	b.n	8001c74 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bcc:	d052      	beq.n	8001c74 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bce:	f7ff f987 	bl	8000ee0 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	68ba      	ldr	r2, [r7, #8]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d302      	bcc.n	8001be4 <I2C_IsErrorOccurred+0x54>
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d147      	bne.n	8001c74 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001bf6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c06:	d12e      	bne.n	8001c66 <I2C_IsErrorOccurred+0xd6>
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c0e:	d02a      	beq.n	8001c66 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001c10:	7cfb      	ldrb	r3, [r7, #19]
 8001c12:	2b20      	cmp	r3, #32
 8001c14:	d027      	beq.n	8001c66 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c26:	f7ff f95b 	bl	8000ee0 <HAL_GetTick>
 8001c2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c2c:	e01b      	b.n	8001c66 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c2e:	f7ff f957 	bl	8000ee0 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b19      	cmp	r3, #25
 8001c3a:	d914      	bls.n	8001c66 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f043 0220 	orr.w	r2, r3, #32
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2220      	movs	r2, #32
 8001c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2200      	movs	r2, #0
 8001c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d1dc      	bne.n	8001c2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f003 0320 	and.w	r3, r3, #32
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d003      	beq.n	8001c8a <I2C_IsErrorOccurred+0xfa>
 8001c82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d09d      	beq.n	8001bc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d103      	bne.n	8001c9a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2220      	movs	r2, #32
 8001c98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001c9a:	6a3b      	ldr	r3, [r7, #32]
 8001c9c:	f043 0304 	orr.w	r3, r3, #4
 8001ca0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00b      	beq.n	8001d16 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001cfe:	6a3b      	ldr	r3, [r7, #32]
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d0e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001d16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01c      	beq.n	8001d58 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff fddc 	bl	80018dc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6859      	ldr	r1, [r3, #4]
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <I2C_IsErrorOccurred+0x1d4>)
 8001d30:	400b      	ands	r3, r1
 8001d32:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d38:	6a3b      	ldr	r3, [r7, #32]
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2220      	movs	r2, #32
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8001d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	fe00e800 	.word	0xfe00e800

08001d68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	460b      	mov	r3, r1
 8001d74:	817b      	strh	r3, [r7, #10]
 8001d76:	4613      	mov	r3, r2
 8001d78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d7a:	897b      	ldrh	r3, [r7, #10]
 8001d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d80:	7a7b      	ldrb	r3, [r7, #9]
 8001d82:	041b      	lsls	r3, r3, #16
 8001d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001d8e:	6a3b      	ldr	r3, [r7, #32]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	0d5b      	lsrs	r3, r3, #21
 8001da2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <I2C_TransferConfig+0x60>)
 8001da8:	430b      	orrs	r3, r1
 8001daa:	43db      	mvns	r3, r3
 8001dac:	ea02 0103 	and.w	r1, r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001dba:	bf00      	nop
 8001dbc:	371c      	adds	r7, #28
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	03ff63ff 	.word	0x03ff63ff

08001dcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b20      	cmp	r3, #32
 8001de0:	d138      	bne.n	8001e54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e032      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2224      	movs	r2, #36	; 0x24
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6819      	ldr	r1, [r3, #0]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0201 	orr.w	r2, r2, #1
 8001e3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2220      	movs	r2, #32
 8001e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	e000      	b.n	8001e56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e54:	2302      	movs	r3, #2
  }
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d139      	bne.n	8001eec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d101      	bne.n	8001e86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e82:	2302      	movs	r3, #2
 8001e84:	e033      	b.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2224      	movs	r2, #36	; 0x24
 8001e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001eb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2220      	movs	r2, #32
 8001edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	e000      	b.n	8001eee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001eec:	2302      	movs	r3, #2
  }
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
	...

08001efc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f00:	4b04      	ldr	r3, [pc, #16]	; (8001f14 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40007000 	.word	0x40007000

08001f18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f26:	d130      	bne.n	8001f8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f28:	4b23      	ldr	r3, [pc, #140]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f34:	d038      	beq.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f46:	4b1d      	ldr	r3, [pc, #116]	; (8001fbc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2232      	movs	r2, #50	; 0x32
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	4a1b      	ldr	r2, [pc, #108]	; (8001fc0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001f52:	fba2 2303 	umull	r2, r3, r2, r3
 8001f56:	0c9b      	lsrs	r3, r3, #18
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f5c:	e002      	b.n	8001f64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f64:	4b14      	ldr	r3, [pc, #80]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f66:	695b      	ldr	r3, [r3, #20]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f70:	d102      	bne.n	8001f78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f2      	bne.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f78:	4b0f      	ldr	r3, [pc, #60]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f7a:	695b      	ldr	r3, [r3, #20]
 8001f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d110      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e00f      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f96:	d007      	beq.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f98:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fa0:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3714      	adds	r7, #20
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	431bde83 	.word	0x431bde83

08001fc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f000 bc02 	b.w	80027dc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fd8:	4b96      	ldr	r3, [pc, #600]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fe2:	4b94      	ldr	r3, [pc, #592]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0310 	and.w	r3, r3, #16
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 80e4 	beq.w	80021c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_RCC_OscConfig+0x4c>
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	2b0c      	cmp	r3, #12
 8002004:	f040 808b 	bne.w	800211e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	2b01      	cmp	r3, #1
 800200c:	f040 8087 	bne.w	800211e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002010:	4b88      	ldr	r3, [pc, #544]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_OscConfig+0x64>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d101      	bne.n	8002028 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e3d9      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a1a      	ldr	r2, [r3, #32]
 800202c:	4b81      	ldr	r3, [pc, #516]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d004      	beq.n	8002042 <HAL_RCC_OscConfig+0x7e>
 8002038:	4b7e      	ldr	r3, [pc, #504]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002040:	e005      	b.n	800204e <HAL_RCC_OscConfig+0x8a>
 8002042:	4b7c      	ldr	r3, [pc, #496]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800204e:	4293      	cmp	r3, r2
 8002050:	d223      	bcs.n	800209a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4618      	mov	r0, r3
 8002058:	f000 fd8c 	bl	8002b74 <RCC_SetFlashLatencyFromMSIRange>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e3ba      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002066:	4b73      	ldr	r3, [pc, #460]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a72      	ldr	r2, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	496d      	ldr	r1, [pc, #436]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69db      	ldr	r3, [r3, #28]
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	4968      	ldr	r1, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002094:	4313      	orrs	r3, r2
 8002096:	604b      	str	r3, [r1, #4]
 8002098:	e025      	b.n	80020e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a65      	ldr	r2, [pc, #404]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b63      	ldr	r3, [pc, #396]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6a1b      	ldr	r3, [r3, #32]
 80020b2:	4960      	ldr	r1, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020b8:	4b5e      	ldr	r3, [pc, #376]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	021b      	lsls	r3, r3, #8
 80020c6:	495b      	ldr	r1, [pc, #364]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fd4c 	bl	8002b74 <RCC_SetFlashLatencyFromMSIRange>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e37a      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e6:	f000 fc81 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80020ea:	4602      	mov	r2, r0
 80020ec:	4b51      	ldr	r3, [pc, #324]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4950      	ldr	r1, [pc, #320]	; (8002238 <HAL_RCC_OscConfig+0x274>)
 80020f8:	5ccb      	ldrb	r3, [r1, r3]
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002102:	4a4e      	ldr	r2, [pc, #312]	; (800223c <HAL_RCC_OscConfig+0x278>)
 8002104:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002106:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <HAL_RCC_OscConfig+0x27c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fe98 	bl	8000e40 <HAL_InitTick>
 8002110:	4603      	mov	r3, r0
 8002112:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002114:	7bfb      	ldrb	r3, [r7, #15]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d052      	beq.n	80021c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800211a:	7bfb      	ldrb	r3, [r7, #15]
 800211c:	e35e      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d032      	beq.n	800218c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a42      	ldr	r2, [pc, #264]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002132:	f7fe fed5 	bl	8000ee0 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800213a:	f7fe fed1 	bl	8000ee0 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e347      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d0f0      	beq.n	800213a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002158:	4b36      	ldr	r3, [pc, #216]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a35      	ldr	r2, [pc, #212]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800215e:	f043 0308 	orr.w	r3, r3, #8
 8002162:	6013      	str	r3, [r2, #0]
 8002164:	4b33      	ldr	r3, [pc, #204]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	4930      	ldr	r1, [pc, #192]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002172:	4313      	orrs	r3, r2
 8002174:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	492b      	ldr	r1, [pc, #172]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002186:	4313      	orrs	r3, r2
 8002188:	604b      	str	r3, [r1, #4]
 800218a:	e01a      	b.n	80021c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800218c:	4b29      	ldr	r3, [pc, #164]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a28      	ldr	r2, [pc, #160]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002192:	f023 0301 	bic.w	r3, r3, #1
 8002196:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002198:	f7fe fea2 	bl	8000ee0 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021a0:	f7fe fe9e 	bl	8000ee0 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e314      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021b2:	4b20      	ldr	r3, [pc, #128]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x1dc>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d073      	beq.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b08      	cmp	r3, #8
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_OscConfig+0x21c>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d10e      	bne.n	80021f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d10b      	bne.n	80021f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d063      	beq.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d15f      	bne.n	80022b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e2f1      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d106      	bne.n	8002210 <HAL_RCC_OscConfig+0x24c>
 8002202:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a0b      	ldr	r2, [pc, #44]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	e025      	b.n	800225c <HAL_RCC_OscConfig+0x298>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002218:	d114      	bne.n	8002244 <HAL_RCC_OscConfig+0x280>
 800221a:	4b06      	ldr	r3, [pc, #24]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a05      	ldr	r2, [pc, #20]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002220:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	4b03      	ldr	r3, [pc, #12]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a02      	ldr	r2, [pc, #8]	; (8002234 <HAL_RCC_OscConfig+0x270>)
 800222c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	e013      	b.n	800225c <HAL_RCC_OscConfig+0x298>
 8002234:	40021000 	.word	0x40021000
 8002238:	08004c08 	.word	0x08004c08
 800223c:	20000000 	.word	0x20000000
 8002240:	20000004 	.word	0x20000004
 8002244:	4ba0      	ldr	r3, [pc, #640]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a9f      	ldr	r2, [pc, #636]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800224a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b9d      	ldr	r3, [pc, #628]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a9c      	ldr	r2, [pc, #624]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800225a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fe3c 	bl	8000ee0 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800226c:	f7fe fe38 	bl	8000ee0 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b64      	cmp	r3, #100	; 0x64
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e2ae      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227e:	4b92      	ldr	r3, [pc, #584]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x2a8>
 800228a:	e014      	b.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228c:	f7fe fe28 	bl	8000ee0 <HAL_GetTick>
 8002290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002292:	e008      	b.n	80022a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002294:	f7fe fe24 	bl	8000ee0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	2b64      	cmp	r3, #100	; 0x64
 80022a0:	d901      	bls.n	80022a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022a2:	2303      	movs	r3, #3
 80022a4:	e29a      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a6:	4b88      	ldr	r3, [pc, #544]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1f0      	bne.n	8002294 <HAL_RCC_OscConfig+0x2d0>
 80022b2:	e000      	b.n	80022b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d060      	beq.n	8002384 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_OscConfig+0x310>
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d119      	bne.n	8002302 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d116      	bne.n	8002302 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d4:	4b7c      	ldr	r3, [pc, #496]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_RCC_OscConfig+0x328>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e277      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	691b      	ldr	r3, [r3, #16]
 80022f8:	061b      	lsls	r3, r3, #24
 80022fa:	4973      	ldr	r1, [pc, #460]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002300:	e040      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d023      	beq.n	8002352 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800230a:	4b6f      	ldr	r3, [pc, #444]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a6e      	ldr	r2, [pc, #440]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002314:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002316:	f7fe fde3 	bl	8000ee0 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231e:	f7fe fddf 	bl	8000ee0 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e255      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002330:	4b65      	ldr	r3, [pc, #404]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233c:	4b62      	ldr	r3, [pc, #392]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	061b      	lsls	r3, r3, #24
 800234a:	495f      	ldr	r1, [pc, #380]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800234c:	4313      	orrs	r3, r2
 800234e:	604b      	str	r3, [r1, #4]
 8002350:	e018      	b.n	8002384 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002352:	4b5d      	ldr	r3, [pc, #372]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a5c      	ldr	r2, [pc, #368]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800235c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235e:	f7fe fdbf 	bl	8000ee0 <HAL_GetTick>
 8002362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002364:	e008      	b.n	8002378 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002366:	f7fe fdbb 	bl	8000ee0 <HAL_GetTick>
 800236a:	4602      	mov	r2, r0
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	1ad3      	subs	r3, r2, r3
 8002370:	2b02      	cmp	r3, #2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e231      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002378:	4b53      	ldr	r3, [pc, #332]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d1f0      	bne.n	8002366 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d03c      	beq.n	800240a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002398:	4b4b      	ldr	r3, [pc, #300]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800239a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239e:	4a4a      	ldr	r2, [pc, #296]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7fe fd9a 	bl	8000ee0 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b0:	f7fe fd96 	bl	8000ee0 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e20c      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023c2:	4b41      	ldr	r3, [pc, #260]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80023c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <HAL_RCC_OscConfig+0x3ec>
 80023d0:	e01b      	b.n	800240a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d2:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80023d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d8:	4a3b      	ldr	r2, [pc, #236]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe fd7d 	bl	8000ee0 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe fd79 	bl	8000ee0 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e1ef      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023fc:	4b32      	ldr	r3, [pc, #200]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80023fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1ef      	bne.n	80023ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	f000 80a6 	beq.w	8002564 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002418:	2300      	movs	r3, #0
 800241a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800241c:	4b2a      	ldr	r3, [pc, #168]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800241e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d10d      	bne.n	8002444 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800242a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242c:	4a26      	ldr	r2, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002432:	6593      	str	r3, [r2, #88]	; 0x58
 8002434:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243c:	60bb      	str	r3, [r7, #8]
 800243e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002440:	2301      	movs	r3, #1
 8002442:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCC_OscConfig+0x508>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d118      	bne.n	8002482 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002450:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <HAL_RCC_OscConfig+0x508>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_RCC_OscConfig+0x508>)
 8002456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245c:	f7fe fd40 	bl	8000ee0 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002464:	f7fe fd3c 	bl	8000ee0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e1b2      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002476:	4b15      	ldr	r3, [pc, #84]	; (80024cc <HAL_RCC_OscConfig+0x508>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d108      	bne.n	800249c <HAL_RCC_OscConfig+0x4d8>
 800248a:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 800248c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002490:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800249a:	e029      	b.n	80024f0 <HAL_RCC_OscConfig+0x52c>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	d115      	bne.n	80024d0 <HAL_RCC_OscConfig+0x50c>
 80024a4:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024b4:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_RCC_OscConfig+0x504>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024c4:	e014      	b.n	80024f0 <HAL_RCC_OscConfig+0x52c>
 80024c6:	bf00      	nop
 80024c8:	40021000 	.word	0x40021000
 80024cc:	40007000 	.word	0x40007000
 80024d0:	4b9a      	ldr	r3, [pc, #616]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a99      	ldr	r2, [pc, #612]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80024d8:	f023 0301 	bic.w	r3, r3, #1
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e0:	4b96      	ldr	r3, [pc, #600]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80024e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e6:	4a95      	ldr	r2, [pc, #596]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80024e8:	f023 0304 	bic.w	r3, r3, #4
 80024ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d016      	beq.n	8002526 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fcf2 	bl	8000ee0 <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fe:	e00a      	b.n	8002516 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002500:	f7fe fcee 	bl	8000ee0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	f241 3288 	movw	r2, #5000	; 0x1388
 800250e:	4293      	cmp	r3, r2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e162      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002516:	4b89      	ldr	r3, [pc, #548]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ed      	beq.n	8002500 <HAL_RCC_OscConfig+0x53c>
 8002524:	e015      	b.n	8002552 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fcdb 	bl	8000ee0 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fcd7 	bl	8000ee0 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e14b      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002544:	4b7d      	ldr	r3, [pc, #500]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ed      	bne.n	800252e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002552:	7ffb      	ldrb	r3, [r7, #31]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b78      	ldr	r3, [pc, #480]	; (800273c <HAL_RCC_OscConfig+0x778>)
 800255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255c:	4a77      	ldr	r2, [pc, #476]	; (800273c <HAL_RCC_OscConfig+0x778>)
 800255e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002562:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0320 	and.w	r3, r3, #32
 800256c:	2b00      	cmp	r3, #0
 800256e:	d03c      	beq.n	80025ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01c      	beq.n	80025b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002578:	4b70      	ldr	r3, [pc, #448]	; (800273c <HAL_RCC_OscConfig+0x778>)
 800257a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800257e:	4a6f      	ldr	r2, [pc, #444]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7fe fcaa 	bl	8000ee0 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002590:	f7fe fca6 	bl	8000ee0 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e11c      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025a2:	4b66      	ldr	r3, [pc, #408]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80025a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d0ef      	beq.n	8002590 <HAL_RCC_OscConfig+0x5cc>
 80025b0:	e01b      	b.n	80025ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025b2:	4b62      	ldr	r3, [pc, #392]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80025b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025b8:	4a60      	ldr	r2, [pc, #384]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fc8d 	bl	8000ee0 <HAL_GetTick>
 80025c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025ca:	f7fe fc89 	bl	8000ee0 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e0ff      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025dc:	4b57      	ldr	r3, [pc, #348]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80025de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1ef      	bne.n	80025ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 80f3 	beq.w	80027da <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	f040 80c9 	bne.w	8002790 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0203 	and.w	r2, r3, #3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260e:	429a      	cmp	r2, r3
 8002610:	d12c      	bne.n	800266c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	3b01      	subs	r3, #1
 800261e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002620:	429a      	cmp	r2, r3
 8002622:	d123      	bne.n	800266c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800262e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002630:	429a      	cmp	r2, r3
 8002632:	d11b      	bne.n	800266c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d113      	bne.n	800266c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800264e:	085b      	lsrs	r3, r3, #1
 8002650:	3b01      	subs	r3, #1
 8002652:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002654:	429a      	cmp	r2, r3
 8002656:	d109      	bne.n	800266c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	085b      	lsrs	r3, r3, #1
 8002664:	3b01      	subs	r3, #1
 8002666:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002668:	429a      	cmp	r2, r3
 800266a:	d06b      	beq.n	8002744 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	2b0c      	cmp	r3, #12
 8002670:	d062      	beq.n	8002738 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002672:	4b32      	ldr	r3, [pc, #200]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e0ac      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002682:	4b2e      	ldr	r3, [pc, #184]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a2d      	ldr	r2, [pc, #180]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002688:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800268c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800268e:	f7fe fc27 	bl	8000ee0 <HAL_GetTick>
 8002692:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002694:	e008      	b.n	80026a8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002696:	f7fe fc23 	bl	8000ee0 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e099      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	4b24      	ldr	r3, [pc, #144]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1f0      	bne.n	8002696 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026b4:	4b21      	ldr	r3, [pc, #132]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	4b21      	ldr	r3, [pc, #132]	; (8002740 <HAL_RCC_OscConfig+0x77c>)
 80026ba:	4013      	ands	r3, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026c4:	3a01      	subs	r2, #1
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	4311      	orrs	r1, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026ce:	0212      	lsls	r2, r2, #8
 80026d0:	4311      	orrs	r1, r2
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80026d6:	0852      	lsrs	r2, r2, #1
 80026d8:	3a01      	subs	r2, #1
 80026da:	0552      	lsls	r2, r2, #21
 80026dc:	4311      	orrs	r1, r2
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e2:	0852      	lsrs	r2, r2, #1
 80026e4:	3a01      	subs	r2, #1
 80026e6:	0652      	lsls	r2, r2, #25
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80026ee:	06d2      	lsls	r2, r2, #27
 80026f0:	430a      	orrs	r2, r1
 80026f2:	4912      	ldr	r1, [pc, #72]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80026f8:	4b10      	ldr	r3, [pc, #64]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a0f      	ldr	r2, [pc, #60]	; (800273c <HAL_RCC_OscConfig+0x778>)
 80026fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002702:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <HAL_RCC_OscConfig+0x778>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <HAL_RCC_OscConfig+0x778>)
 800270a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002710:	f7fe fbe6 	bl	8000ee0 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fbe2 	bl	8000ee0 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e058      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800272a:	4b04      	ldr	r3, [pc, #16]	; (800273c <HAL_RCC_OscConfig+0x778>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d0f0      	beq.n	8002718 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002736:	e050      	b.n	80027da <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e04f      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
 800273c:	40021000 	.word	0x40021000
 8002740:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002744:	4b27      	ldr	r3, [pc, #156]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d144      	bne.n	80027da <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a23      	ldr	r2, [pc, #140]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002766:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002768:	f7fe fbba 	bl	8000ee0 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7fe fbb6 	bl	8000ee0 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e02c      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b18      	ldr	r3, [pc, #96]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x7ac>
 800278e:	e024      	b.n	80027da <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d01f      	beq.n	80027d6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002796:	4b13      	ldr	r3, [pc, #76]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 800279c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fb9d 	bl	8000ee0 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe fb99 	bl	8000ee0 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e00f      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027bc:	4b09      	ldr	r3, [pc, #36]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f0      	bne.n	80027aa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 80027ca:	68da      	ldr	r2, [r3, #12]
 80027cc:	4905      	ldr	r1, [pc, #20]	; (80027e4 <HAL_RCC_OscConfig+0x820>)
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_RCC_OscConfig+0x824>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	60cb      	str	r3, [r1, #12]
 80027d4:	e001      	b.n	80027da <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000
 80027e8:	feeefffc 	.word	0xfeeefffc

080027ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e0e7      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b75      	ldr	r3, [pc, #468]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d910      	bls.n	8002830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b72      	ldr	r3, [pc, #456]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 0207 	bic.w	r2, r3, #7
 8002816:	4970      	ldr	r1, [pc, #448]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b6e      	ldr	r3, [pc, #440]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cf      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d010      	beq.n	800285e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	4b66      	ldr	r3, [pc, #408]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002848:	429a      	cmp	r2, r3
 800284a:	d908      	bls.n	800285e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b63      	ldr	r3, [pc, #396]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4960      	ldr	r1, [pc, #384]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d04c      	beq.n	8002904 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b03      	cmp	r3, #3
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002872:	4b5a      	ldr	r3, [pc, #360]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d121      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e0a6      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d107      	bne.n	800289a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800288a:	4b54      	ldr	r3, [pc, #336]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d115      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	e09a      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028a2:	4b4e      	ldr	r3, [pc, #312]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e08e      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b2:	4b4a      	ldr	r3, [pc, #296]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e086      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b46      	ldr	r3, [pc, #280]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4943      	ldr	r1, [pc, #268]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7fe fb04 	bl	8000ee0 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7fe fb00 	bl	8000ee0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e06e      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	4b31      	ldr	r3, [pc, #196]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800291c:	429a      	cmp	r2, r3
 800291e:	d208      	bcs.n	8002932 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002920:	4b2e      	ldr	r3, [pc, #184]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	492b      	ldr	r1, [pc, #172]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800292e:	4313      	orrs	r3, r2
 8002930:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002932:	4b29      	ldr	r3, [pc, #164]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d210      	bcs.n	8002962 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002940:	4b25      	ldr	r3, [pc, #148]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 0207 	bic.w	r2, r3, #7
 8002948:	4923      	ldr	r1, [pc, #140]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002950:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCC_ClockConfig+0x1ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d001      	beq.n	8002962 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e036      	b.n	80029d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b00      	cmp	r3, #0
 800296c:	d008      	beq.n	8002980 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	4918      	ldr	r1, [pc, #96]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d009      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298c:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4910      	ldr	r1, [pc, #64]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029a0:	f000 f824 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <HAL_RCC_ClockConfig+0x1f0>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	091b      	lsrs	r3, r3, #4
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	490b      	ldr	r1, [pc, #44]	; (80029e0 <HAL_RCC_ClockConfig+0x1f4>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
 80029bc:	4a09      	ldr	r2, [pc, #36]	; (80029e4 <HAL_RCC_ClockConfig+0x1f8>)
 80029be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_ClockConfig+0x1fc>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7fe fa3b 	bl	8000e40 <HAL_InitTick>
 80029ca:	4603      	mov	r3, r0
 80029cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80029ce:	7afb      	ldrb	r3, [r7, #11]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	40022000 	.word	0x40022000
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08004c08 	.word	0x08004c08
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004

080029ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	; 0x24
 80029f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	61fb      	str	r3, [r7, #28]
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029fa:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
 8002a02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a04:	4b3b      	ldr	r3, [pc, #236]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d005      	beq.n	8002a20 <HAL_RCC_GetSysClockFreq+0x34>
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	2b0c      	cmp	r3, #12
 8002a18:	d121      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d11e      	bne.n	8002a5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a20:	4b34      	ldr	r3, [pc, #208]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a2c:	4b31      	ldr	r3, [pc, #196]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a32:	0a1b      	lsrs	r3, r3, #8
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	e005      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a48:	4a2b      	ldr	r2, [pc, #172]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10d      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a64:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	e004      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	2b0c      	cmp	r3, #12
 8002a78:	d134      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a7a:	4b1e      	ldr	r3, [pc, #120]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0303 	and.w	r3, r3, #3
 8002a82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b03      	cmp	r3, #3
 8002a8e:	d003      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0xac>
 8002a90:	e005      	b.n	8002a9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a92:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_RCC_GetSysClockFreq+0x110>)
 8002a94:	617b      	str	r3, [r7, #20]
      break;
 8002a96:	e005      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a98:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a9a:	617b      	str	r3, [r7, #20]
      break;
 8002a9c:	e002      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	617b      	str	r3, [r7, #20]
      break;
 8002aa2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	091b      	lsrs	r3, r3, #4
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	3301      	adds	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	0a1b      	lsrs	r3, r3, #8
 8002ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	fb03 f202 	mul.w	r2, r3, r2
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002aca:	4b0a      	ldr	r3, [pc, #40]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	0e5b      	lsrs	r3, r3, #25
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ae4:	69bb      	ldr	r3, [r7, #24]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	08004c20 	.word	0x08004c20
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	007a1200 	.word	0x007a1200

08002b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	; (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4904      	ldr	r1, [pc, #16]	; (8002b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	08004c18 	.word	0x08004c18

08002b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b4c:	f7ff ffda 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0adb      	lsrs	r3, r3, #11
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4904      	ldr	r1, [pc, #16]	; (8002b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08004c18 	.word	0x08004c18

08002b74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b086      	sub	sp, #24
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b80:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d003      	beq.n	8002b94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b8c:	f7ff f9b6 	bl	8001efc <HAL_PWREx_GetVoltageRange>
 8002b90:	6178      	str	r0, [r7, #20]
 8002b92:	e014      	b.n	8002bbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b94:	4b25      	ldr	r3, [pc, #148]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b98:	4a24      	ldr	r2, [pc, #144]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	60fb      	str	r3, [r7, #12]
 8002baa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bac:	f7ff f9a6 	bl	8001efc <HAL_PWREx_GetVoltageRange>
 8002bb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb6:	4a1d      	ldr	r2, [pc, #116]	; (8002c2c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bc4:	d10b      	bne.n	8002bde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2b80      	cmp	r3, #128	; 0x80
 8002bca:	d919      	bls.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2ba0      	cmp	r3, #160	; 0xa0
 8002bd0:	d902      	bls.n	8002bd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	613b      	str	r3, [r7, #16]
 8002bd6:	e013      	b.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bd8:	2301      	movs	r3, #1
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	e010      	b.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b80      	cmp	r3, #128	; 0x80
 8002be2:	d902      	bls.n	8002bea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002be4:	2303      	movs	r3, #3
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	e00a      	b.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b80      	cmp	r3, #128	; 0x80
 8002bee:	d102      	bne.n	8002bf6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	e004      	b.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d101      	bne.n	8002c00 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f023 0207 	bic.w	r2, r3, #7
 8002c08:	4909      	ldr	r1, [pc, #36]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c10:	4b07      	ldr	r3, [pc, #28]	; (8002c30 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d001      	beq.n	8002c22 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	40021000 	.word	0x40021000
 8002c30:	40022000 	.word	0x40022000

08002c34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c40:	2300      	movs	r3, #0
 8002c42:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d031      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c58:	d01a      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002c5a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c5e:	d814      	bhi.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d009      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002c68:	d10f      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002c6a:	4b5d      	ldr	r3, [pc, #372]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a5c      	ldr	r2, [pc, #368]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c74:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c76:	e00c      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fa44 	bl	800310c <RCCEx_PLLSAI1_Config>
 8002c84:	4603      	mov	r3, r0
 8002c86:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c88:	e003      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	74fb      	strb	r3, [r7, #19]
      break;
 8002c8e:	e000      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002c90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c92:	7cfb      	ldrb	r3, [r7, #19]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10b      	bne.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c98:	4b51      	ldr	r3, [pc, #324]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca6:	494e      	ldr	r1, [pc, #312]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002cae:	e001      	b.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cb0:	7cfb      	ldrb	r3, [r7, #19]
 8002cb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	f000 809e 	beq.w	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cc6:	4b46      	ldr	r3, [pc, #280]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cdc:	4b40      	ldr	r3, [pc, #256]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ce0:	4a3f      	ldr	r2, [pc, #252]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ce2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ce8:	4b3d      	ldr	r3, [pc, #244]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cf8:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a39      	ldr	r2, [pc, #228]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d04:	f7fe f8ec 	bl	8000ee0 <HAL_GetTick>
 8002d08:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d0a:	e009      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d0c:	f7fe f8e8 	bl	8000ee0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d902      	bls.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	74fb      	strb	r3, [r7, #19]
        break;
 8002d1e:	e005      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d20:	4b30      	ldr	r3, [pc, #192]	; (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ef      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d15a      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d32:	4b2b      	ldr	r3, [pc, #172]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01e      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d48:	697a      	ldr	r2, [r7, #20]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d4e:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d60:	4a1f      	ldr	r2, [pc, #124]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d6a:	4b1d      	ldr	r3, [pc, #116]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d70:	4a1b      	ldr	r2, [pc, #108]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d016      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f8a8 	bl	8000ee0 <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d92:	e00b      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe f8a4 	bl	8000ee0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d902      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	74fb      	strb	r3, [r7, #19]
            break;
 8002daa:	e006      	b.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dac:	4b0c      	ldr	r3, [pc, #48]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0ec      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002dba:	7cfb      	ldrb	r3, [r7, #19]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10b      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dce:	4904      	ldr	r1, [pc, #16]	; (8002de0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002dd6:	e009      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002dd8:	7cfb      	ldrb	r3, [r7, #19]
 8002dda:	74bb      	strb	r3, [r7, #18]
 8002ddc:	e006      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002dde:	bf00      	nop
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002dec:	7c7b      	ldrb	r3, [r7, #17]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d105      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df2:	4b9e      	ldr	r3, [pc, #632]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	4a9d      	ldr	r2, [pc, #628]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e0a:	4b98      	ldr	r3, [pc, #608]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e10:	f023 0203 	bic.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	4994      	ldr	r1, [pc, #592]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00a      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e32:	f023 020c 	bic.w	r2, r3, #12
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	498c      	ldr	r1, [pc, #560]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00a      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e4e:	4b87      	ldr	r3, [pc, #540]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5c:	4983      	ldr	r1, [pc, #524]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00a      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e70:	4b7e      	ldr	r3, [pc, #504]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	497b      	ldr	r1, [pc, #492]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0320 	and.w	r3, r3, #32
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00a      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e92:	4b76      	ldr	r3, [pc, #472]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea0:	4972      	ldr	r1, [pc, #456]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eb4:	4b6d      	ldr	r3, [pc, #436]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	496a      	ldr	r1, [pc, #424]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ed6:	4b65      	ldr	r3, [pc, #404]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002edc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee4:	4961      	ldr	r1, [pc, #388]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00a      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ef8:	4b5c      	ldr	r3, [pc, #368]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f06:	4959      	ldr	r1, [pc, #356]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00a      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f1a:	4b54      	ldr	r3, [pc, #336]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	4950      	ldr	r1, [pc, #320]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d00a      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f3c:	4b4b      	ldr	r3, [pc, #300]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f4a:	4948      	ldr	r1, [pc, #288]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00a      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f64:	f023 0203 	bic.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	493f      	ldr	r1, [pc, #252]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d028      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f8e:	4937      	ldr	r1, [pc, #220]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f9e:	d106      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fa0:	4b32      	ldr	r3, [pc, #200]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	4a31      	ldr	r2, [pc, #196]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002faa:	60d3      	str	r3, [r2, #12]
 8002fac:	e011      	b.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fb6:	d10c      	bne.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	3304      	adds	r3, #4
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 f8a4 	bl	800310c <RCCEx_PLLSAI1_Config>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002fc8:	7cfb      	ldrb	r3, [r7, #19]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002fce:	7cfb      	ldrb	r3, [r7, #19]
 8002fd0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d028      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fde:	4b23      	ldr	r3, [pc, #140]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	491f      	ldr	r1, [pc, #124]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ffc:	d106      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffe:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	4a1a      	ldr	r2, [pc, #104]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003004:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003008:	60d3      	str	r3, [r2, #12]
 800300a:	e011      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003010:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003014:	d10c      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3304      	adds	r3, #4
 800301a:	2101      	movs	r1, #1
 800301c:	4618      	mov	r0, r3
 800301e:	f000 f875 	bl	800310c <RCCEx_PLLSAI1_Config>
 8003022:	4603      	mov	r3, r0
 8003024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003026:	7cfb      	ldrb	r3, [r7, #19]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 800302c:	7cfb      	ldrb	r3, [r7, #19]
 800302e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d02b      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800303e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003042:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304a:	4908      	ldr	r1, [pc, #32]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800304c:	4313      	orrs	r3, r2
 800304e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003056:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800305a:	d109      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003066:	60d3      	str	r3, [r2, #12]
 8003068:	e014      	b.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003078:	d10c      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	2101      	movs	r1, #1
 8003080:	4618      	mov	r0, r3
 8003082:	f000 f843 	bl	800310c <RCCEx_PLLSAI1_Config>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003090:	7cfb      	ldrb	r3, [r7, #19]
 8003092:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01c      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ae:	4916      	ldr	r1, [pc, #88]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030be:	d10c      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	3304      	adds	r3, #4
 80030c4:	2102      	movs	r1, #2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 f820 	bl	800310c <RCCEx_PLLSAI1_Config>
 80030cc:	4603      	mov	r3, r0
 80030ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030d0:	7cfb      	ldrb	r3, [r7, #19]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80030d6:	7cfb      	ldrb	r3, [r7, #19]
 80030d8:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030e6:	4b08      	ldr	r3, [pc, #32]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f4:	4904      	ldr	r1, [pc, #16]	; (8003108 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000

0800310c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800311a:	4b74      	ldr	r3, [pc, #464]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d018      	beq.n	8003158 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003126:	4b71      	ldr	r3, [pc, #452]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	f003 0203 	and.w	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	429a      	cmp	r2, r3
 8003134:	d10d      	bne.n	8003152 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
       ||
 800313a:	2b00      	cmp	r3, #0
 800313c:	d009      	beq.n	8003152 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800313e:	4b6b      	ldr	r3, [pc, #428]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	091b      	lsrs	r3, r3, #4
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
       ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d047      	beq.n	80031e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	73fb      	strb	r3, [r7, #15]
 8003156:	e044      	b.n	80031e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b03      	cmp	r3, #3
 800315e:	d018      	beq.n	8003192 <RCCEx_PLLSAI1_Config+0x86>
 8003160:	2b03      	cmp	r3, #3
 8003162:	d825      	bhi.n	80031b0 <RCCEx_PLLSAI1_Config+0xa4>
 8003164:	2b01      	cmp	r3, #1
 8003166:	d002      	beq.n	800316e <RCCEx_PLLSAI1_Config+0x62>
 8003168:	2b02      	cmp	r3, #2
 800316a:	d009      	beq.n	8003180 <RCCEx_PLLSAI1_Config+0x74>
 800316c:	e020      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800316e:	4b5f      	ldr	r3, [pc, #380]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d11d      	bne.n	80031b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317e:	e01a      	b.n	80031b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003180:	4b5a      	ldr	r3, [pc, #360]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	2b00      	cmp	r3, #0
 800318a:	d116      	bne.n	80031ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003190:	e013      	b.n	80031ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003192:	4b56      	ldr	r3, [pc, #344]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800319e:	4b53      	ldr	r3, [pc, #332]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d109      	bne.n	80031be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80031ae:	e006      	b.n	80031be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
      break;
 80031b4:	e004      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031b6:	bf00      	nop
 80031b8:	e002      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ba:	bf00      	nop
 80031bc:	e000      	b.n	80031c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031be:	bf00      	nop
    }

    if(status == HAL_OK)
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10d      	bne.n	80031e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031c6:	4b49      	ldr	r3, [pc, #292]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6819      	ldr	r1, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	3b01      	subs	r3, #1
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	430b      	orrs	r3, r1
 80031dc:	4943      	ldr	r1, [pc, #268]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d17c      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031e8:	4b40      	ldr	r3, [pc, #256]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a3f      	ldr	r2, [pc, #252]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031f4:	f7fd fe74 	bl	8000ee0 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031fa:	e009      	b.n	8003210 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031fc:	f7fd fe70 	bl	8000ee0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d902      	bls.n	8003210 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	73fb      	strb	r3, [r7, #15]
        break;
 800320e:	e005      	b.n	800321c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003210:	4b36      	ldr	r3, [pc, #216]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1ef      	bne.n	80031fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800321c:	7bfb      	ldrb	r3, [r7, #15]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d15f      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d110      	bne.n	800324a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003228:	4b30      	ldr	r3, [pc, #192]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003230:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003234:	687a      	ldr	r2, [r7, #4]
 8003236:	6892      	ldr	r2, [r2, #8]
 8003238:	0211      	lsls	r1, r2, #8
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	68d2      	ldr	r2, [r2, #12]
 800323e:	06d2      	lsls	r2, r2, #27
 8003240:	430a      	orrs	r2, r1
 8003242:	492a      	ldr	r1, [pc, #168]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003244:	4313      	orrs	r3, r2
 8003246:	610b      	str	r3, [r1, #16]
 8003248:	e027      	b.n	800329a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d112      	bne.n	8003276 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003250:	4b26      	ldr	r3, [pc, #152]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003258:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6892      	ldr	r2, [r2, #8]
 8003260:	0211      	lsls	r1, r2, #8
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6912      	ldr	r2, [r2, #16]
 8003266:	0852      	lsrs	r2, r2, #1
 8003268:	3a01      	subs	r2, #1
 800326a:	0552      	lsls	r2, r2, #21
 800326c:	430a      	orrs	r2, r1
 800326e:	491f      	ldr	r1, [pc, #124]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003270:	4313      	orrs	r3, r2
 8003272:	610b      	str	r3, [r1, #16]
 8003274:	e011      	b.n	800329a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800327e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6892      	ldr	r2, [r2, #8]
 8003286:	0211      	lsls	r1, r2, #8
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6952      	ldr	r2, [r2, #20]
 800328c:	0852      	lsrs	r2, r2, #1
 800328e:	3a01      	subs	r2, #1
 8003290:	0652      	lsls	r2, r2, #25
 8003292:	430a      	orrs	r2, r1
 8003294:	4915      	ldr	r1, [pc, #84]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8003296:	4313      	orrs	r3, r2
 8003298:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800329a:	4b14      	ldr	r3, [pc, #80]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032a4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a6:	f7fd fe1b 	bl	8000ee0 <HAL_GetTick>
 80032aa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032ac:	e009      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032ae:	f7fd fe17 	bl	8000ee0 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d902      	bls.n	80032c2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	73fb      	strb	r3, [r7, #15]
          break;
 80032c0:	e005      	b.n	80032ce <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032c2:	4b0a      	ldr	r3, [pc, #40]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ef      	beq.n	80032ae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032ce:	7bfb      	ldrb	r3, [r7, #15]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	4903      	ldr	r1, [pc, #12]	; (80032ec <RCCEx_PLLSAI1_Config+0x1e0>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	40021000 	.word	0x40021000

080032f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e040      	b.n	8003384 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	2b00      	cmp	r3, #0
 8003308:	d106      	bne.n	8003318 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fd fb18 	bl	8000948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2224      	movs	r2, #36	; 0x24
 800331c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f82c 	bl	800338c <UART_SetConfig>
 8003334:	4603      	mov	r3, r0
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e022      	b.n	8003384 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 faa6 	bl	8003898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800335a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800336a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f042 0201 	orr.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f000 fb2d 	bl	80039dc <UART_CheckIdleState>
 8003382:	4603      	mov	r3, r0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b08a      	sub	sp, #40	; 0x28
 8003392:	af00      	add	r7, sp, #0
 8003394:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	431a      	orrs	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	69db      	ldr	r3, [r3, #28]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	4ba5      	ldr	r3, [pc, #660]	; (8003650 <UART_SetConfig+0x2c4>)
 80033bc:	4013      	ands	r3, r2
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	6812      	ldr	r2, [r2, #0]
 80033c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	68da      	ldr	r2, [r3, #12]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a9a      	ldr	r2, [pc, #616]	; (8003654 <UART_SetConfig+0x2c8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	4313      	orrs	r3, r2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	430a      	orrs	r2, r1
 800340a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a91      	ldr	r2, [pc, #580]	; (8003658 <UART_SetConfig+0x2cc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d126      	bne.n	8003464 <UART_SetConfig+0xd8>
 8003416:	4b91      	ldr	r3, [pc, #580]	; (800365c <UART_SetConfig+0x2d0>)
 8003418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341c:	f003 0303 	and.w	r3, r3, #3
 8003420:	2b03      	cmp	r3, #3
 8003422:	d81b      	bhi.n	800345c <UART_SetConfig+0xd0>
 8003424:	a201      	add	r2, pc, #4	; (adr r2, 800342c <UART_SetConfig+0xa0>)
 8003426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342a:	bf00      	nop
 800342c:	0800343d 	.word	0x0800343d
 8003430:	0800344d 	.word	0x0800344d
 8003434:	08003445 	.word	0x08003445
 8003438:	08003455 	.word	0x08003455
 800343c:	2301      	movs	r3, #1
 800343e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003442:	e0d6      	b.n	80035f2 <UART_SetConfig+0x266>
 8003444:	2302      	movs	r3, #2
 8003446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800344a:	e0d2      	b.n	80035f2 <UART_SetConfig+0x266>
 800344c:	2304      	movs	r3, #4
 800344e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003452:	e0ce      	b.n	80035f2 <UART_SetConfig+0x266>
 8003454:	2308      	movs	r3, #8
 8003456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800345a:	e0ca      	b.n	80035f2 <UART_SetConfig+0x266>
 800345c:	2310      	movs	r3, #16
 800345e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003462:	e0c6      	b.n	80035f2 <UART_SetConfig+0x266>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a7d      	ldr	r2, [pc, #500]	; (8003660 <UART_SetConfig+0x2d4>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d138      	bne.n	80034e0 <UART_SetConfig+0x154>
 800346e:	4b7b      	ldr	r3, [pc, #492]	; (800365c <UART_SetConfig+0x2d0>)
 8003470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b0c      	cmp	r3, #12
 800347a:	d82d      	bhi.n	80034d8 <UART_SetConfig+0x14c>
 800347c:	a201      	add	r2, pc, #4	; (adr r2, 8003484 <UART_SetConfig+0xf8>)
 800347e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003482:	bf00      	nop
 8003484:	080034b9 	.word	0x080034b9
 8003488:	080034d9 	.word	0x080034d9
 800348c:	080034d9 	.word	0x080034d9
 8003490:	080034d9 	.word	0x080034d9
 8003494:	080034c9 	.word	0x080034c9
 8003498:	080034d9 	.word	0x080034d9
 800349c:	080034d9 	.word	0x080034d9
 80034a0:	080034d9 	.word	0x080034d9
 80034a4:	080034c1 	.word	0x080034c1
 80034a8:	080034d9 	.word	0x080034d9
 80034ac:	080034d9 	.word	0x080034d9
 80034b0:	080034d9 	.word	0x080034d9
 80034b4:	080034d1 	.word	0x080034d1
 80034b8:	2300      	movs	r3, #0
 80034ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034be:	e098      	b.n	80035f2 <UART_SetConfig+0x266>
 80034c0:	2302      	movs	r3, #2
 80034c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034c6:	e094      	b.n	80035f2 <UART_SetConfig+0x266>
 80034c8:	2304      	movs	r3, #4
 80034ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ce:	e090      	b.n	80035f2 <UART_SetConfig+0x266>
 80034d0:	2308      	movs	r3, #8
 80034d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034d6:	e08c      	b.n	80035f2 <UART_SetConfig+0x266>
 80034d8:	2310      	movs	r3, #16
 80034da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034de:	e088      	b.n	80035f2 <UART_SetConfig+0x266>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a5f      	ldr	r2, [pc, #380]	; (8003664 <UART_SetConfig+0x2d8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d125      	bne.n	8003536 <UART_SetConfig+0x1aa>
 80034ea:	4b5c      	ldr	r3, [pc, #368]	; (800365c <UART_SetConfig+0x2d0>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f4:	2b30      	cmp	r3, #48	; 0x30
 80034f6:	d016      	beq.n	8003526 <UART_SetConfig+0x19a>
 80034f8:	2b30      	cmp	r3, #48	; 0x30
 80034fa:	d818      	bhi.n	800352e <UART_SetConfig+0x1a2>
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d00a      	beq.n	8003516 <UART_SetConfig+0x18a>
 8003500:	2b20      	cmp	r3, #32
 8003502:	d814      	bhi.n	800352e <UART_SetConfig+0x1a2>
 8003504:	2b00      	cmp	r3, #0
 8003506:	d002      	beq.n	800350e <UART_SetConfig+0x182>
 8003508:	2b10      	cmp	r3, #16
 800350a:	d008      	beq.n	800351e <UART_SetConfig+0x192>
 800350c:	e00f      	b.n	800352e <UART_SetConfig+0x1a2>
 800350e:	2300      	movs	r3, #0
 8003510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003514:	e06d      	b.n	80035f2 <UART_SetConfig+0x266>
 8003516:	2302      	movs	r3, #2
 8003518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351c:	e069      	b.n	80035f2 <UART_SetConfig+0x266>
 800351e:	2304      	movs	r3, #4
 8003520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003524:	e065      	b.n	80035f2 <UART_SetConfig+0x266>
 8003526:	2308      	movs	r3, #8
 8003528:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800352c:	e061      	b.n	80035f2 <UART_SetConfig+0x266>
 800352e:	2310      	movs	r3, #16
 8003530:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003534:	e05d      	b.n	80035f2 <UART_SetConfig+0x266>
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a4b      	ldr	r2, [pc, #300]	; (8003668 <UART_SetConfig+0x2dc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d125      	bne.n	800358c <UART_SetConfig+0x200>
 8003540:	4b46      	ldr	r3, [pc, #280]	; (800365c <UART_SetConfig+0x2d0>)
 8003542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003546:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800354a:	2bc0      	cmp	r3, #192	; 0xc0
 800354c:	d016      	beq.n	800357c <UART_SetConfig+0x1f0>
 800354e:	2bc0      	cmp	r3, #192	; 0xc0
 8003550:	d818      	bhi.n	8003584 <UART_SetConfig+0x1f8>
 8003552:	2b80      	cmp	r3, #128	; 0x80
 8003554:	d00a      	beq.n	800356c <UART_SetConfig+0x1e0>
 8003556:	2b80      	cmp	r3, #128	; 0x80
 8003558:	d814      	bhi.n	8003584 <UART_SetConfig+0x1f8>
 800355a:	2b00      	cmp	r3, #0
 800355c:	d002      	beq.n	8003564 <UART_SetConfig+0x1d8>
 800355e:	2b40      	cmp	r3, #64	; 0x40
 8003560:	d008      	beq.n	8003574 <UART_SetConfig+0x1e8>
 8003562:	e00f      	b.n	8003584 <UART_SetConfig+0x1f8>
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356a:	e042      	b.n	80035f2 <UART_SetConfig+0x266>
 800356c:	2302      	movs	r3, #2
 800356e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003572:	e03e      	b.n	80035f2 <UART_SetConfig+0x266>
 8003574:	2304      	movs	r3, #4
 8003576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357a:	e03a      	b.n	80035f2 <UART_SetConfig+0x266>
 800357c:	2308      	movs	r3, #8
 800357e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003582:	e036      	b.n	80035f2 <UART_SetConfig+0x266>
 8003584:	2310      	movs	r3, #16
 8003586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358a:	e032      	b.n	80035f2 <UART_SetConfig+0x266>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a30      	ldr	r2, [pc, #192]	; (8003654 <UART_SetConfig+0x2c8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d12a      	bne.n	80035ec <UART_SetConfig+0x260>
 8003596:	4b31      	ldr	r3, [pc, #196]	; (800365c <UART_SetConfig+0x2d0>)
 8003598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035a4:	d01a      	beq.n	80035dc <UART_SetConfig+0x250>
 80035a6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80035aa:	d81b      	bhi.n	80035e4 <UART_SetConfig+0x258>
 80035ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b0:	d00c      	beq.n	80035cc <UART_SetConfig+0x240>
 80035b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035b6:	d815      	bhi.n	80035e4 <UART_SetConfig+0x258>
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <UART_SetConfig+0x238>
 80035bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c0:	d008      	beq.n	80035d4 <UART_SetConfig+0x248>
 80035c2:	e00f      	b.n	80035e4 <UART_SetConfig+0x258>
 80035c4:	2300      	movs	r3, #0
 80035c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ca:	e012      	b.n	80035f2 <UART_SetConfig+0x266>
 80035cc:	2302      	movs	r3, #2
 80035ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d2:	e00e      	b.n	80035f2 <UART_SetConfig+0x266>
 80035d4:	2304      	movs	r3, #4
 80035d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035da:	e00a      	b.n	80035f2 <UART_SetConfig+0x266>
 80035dc:	2308      	movs	r3, #8
 80035de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e2:	e006      	b.n	80035f2 <UART_SetConfig+0x266>
 80035e4:	2310      	movs	r3, #16
 80035e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ea:	e002      	b.n	80035f2 <UART_SetConfig+0x266>
 80035ec:	2310      	movs	r3, #16
 80035ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a17      	ldr	r2, [pc, #92]	; (8003654 <UART_SetConfig+0x2c8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	f040 808b 	bne.w	8003714 <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003602:	2b08      	cmp	r3, #8
 8003604:	d834      	bhi.n	8003670 <UART_SetConfig+0x2e4>
 8003606:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0x280>)
 8003608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360c:	08003631 	.word	0x08003631
 8003610:	08003671 	.word	0x08003671
 8003614:	08003639 	.word	0x08003639
 8003618:	08003671 	.word	0x08003671
 800361c:	0800363f 	.word	0x0800363f
 8003620:	08003671 	.word	0x08003671
 8003624:	08003671 	.word	0x08003671
 8003628:	08003671 	.word	0x08003671
 800362c:	08003647 	.word	0x08003647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003630:	f7ff fa74 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003634:	61f8      	str	r0, [r7, #28]
        break;
 8003636:	e021      	b.n	800367c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003638:	4b0c      	ldr	r3, [pc, #48]	; (800366c <UART_SetConfig+0x2e0>)
 800363a:	61fb      	str	r3, [r7, #28]
        break;
 800363c:	e01e      	b.n	800367c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800363e:	f7ff f9d5 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8003642:	61f8      	str	r0, [r7, #28]
        break;
 8003644:	e01a      	b.n	800367c <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800364a:	61fb      	str	r3, [r7, #28]
        break;
 800364c:	e016      	b.n	800367c <UART_SetConfig+0x2f0>
 800364e:	bf00      	nop
 8003650:	efff69f3 	.word	0xefff69f3
 8003654:	40008000 	.word	0x40008000
 8003658:	40013800 	.word	0x40013800
 800365c:	40021000 	.word	0x40021000
 8003660:	40004400 	.word	0x40004400
 8003664:	40004800 	.word	0x40004800
 8003668:	40004c00 	.word	0x40004c00
 800366c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800367a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80fa 	beq.w	8003878 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	685a      	ldr	r2, [r3, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	69fa      	ldr	r2, [r7, #28]
 8003690:	429a      	cmp	r2, r3
 8003692:	d305      	bcc.n	80036a0 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	d903      	bls.n	80036a8 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80036a6:	e0e7      	b.n	8003878 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	2200      	movs	r2, #0
 80036ac:	461c      	mov	r4, r3
 80036ae:	4615      	mov	r5, r2
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	022b      	lsls	r3, r5, #8
 80036ba:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80036be:	0222      	lsls	r2, r4, #8
 80036c0:	68f9      	ldr	r1, [r7, #12]
 80036c2:	6849      	ldr	r1, [r1, #4]
 80036c4:	0849      	lsrs	r1, r1, #1
 80036c6:	2000      	movs	r0, #0
 80036c8:	4688      	mov	r8, r1
 80036ca:	4681      	mov	r9, r0
 80036cc:	eb12 0a08 	adds.w	sl, r2, r8
 80036d0:	eb43 0b09 	adc.w	fp, r3, r9
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	603b      	str	r3, [r7, #0]
 80036dc:	607a      	str	r2, [r7, #4]
 80036de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036e2:	4650      	mov	r0, sl
 80036e4:	4659      	mov	r1, fp
 80036e6:	f7fc fdcb 	bl	8000280 <__aeabi_uldivmod>
 80036ea:	4602      	mov	r2, r0
 80036ec:	460b      	mov	r3, r1
 80036ee:	4613      	mov	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036f8:	d308      	bcc.n	800370c <UART_SetConfig+0x380>
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003700:	d204      	bcs.n	800370c <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	60da      	str	r2, [r3, #12]
 800370a:	e0b5      	b.n	8003878 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003712:	e0b1      	b.n	8003878 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	69db      	ldr	r3, [r3, #28]
 8003718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371c:	d15d      	bne.n	80037da <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800371e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003722:	2b08      	cmp	r3, #8
 8003724:	d827      	bhi.n	8003776 <UART_SetConfig+0x3ea>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x3a0>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003751 	.word	0x08003751
 8003730:	08003759 	.word	0x08003759
 8003734:	08003761 	.word	0x08003761
 8003738:	08003777 	.word	0x08003777
 800373c:	08003767 	.word	0x08003767
 8003740:	08003777 	.word	0x08003777
 8003744:	08003777 	.word	0x08003777
 8003748:	08003777 	.word	0x08003777
 800374c:	0800376f 	.word	0x0800376f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003750:	f7ff f9e4 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003754:	61f8      	str	r0, [r7, #28]
        break;
 8003756:	e014      	b.n	8003782 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003758:	f7ff f9f6 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 800375c:	61f8      	str	r0, [r7, #28]
        break;
 800375e:	e010      	b.n	8003782 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003760:	4b4c      	ldr	r3, [pc, #304]	; (8003894 <UART_SetConfig+0x508>)
 8003762:	61fb      	str	r3, [r7, #28]
        break;
 8003764:	e00d      	b.n	8003782 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003766:	f7ff f941 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 800376a:	61f8      	str	r0, [r7, #28]
        break;
 800376c:	e009      	b.n	8003782 <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800376e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003772:	61fb      	str	r3, [r7, #28]
        break;
 8003774:	e005      	b.n	8003782 <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003780:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d077      	beq.n	8003878 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005a      	lsls	r2, r3, #1
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	441a      	add	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b0f      	cmp	r3, #15
 80037a2:	d916      	bls.n	80037d2 <UART_SetConfig+0x446>
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037aa:	d212      	bcs.n	80037d2 <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	f023 030f 	bic.w	r3, r3, #15
 80037b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	8afb      	ldrh	r3, [r7, #22]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	8afa      	ldrh	r2, [r7, #22]
 80037ce:	60da      	str	r2, [r3, #12]
 80037d0:	e052      	b.n	8003878 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037d8:	e04e      	b.n	8003878 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d827      	bhi.n	8003832 <UART_SetConfig+0x4a6>
 80037e2:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0x45c>)
 80037e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e8:	0800380d 	.word	0x0800380d
 80037ec:	08003815 	.word	0x08003815
 80037f0:	0800381d 	.word	0x0800381d
 80037f4:	08003833 	.word	0x08003833
 80037f8:	08003823 	.word	0x08003823
 80037fc:	08003833 	.word	0x08003833
 8003800:	08003833 	.word	0x08003833
 8003804:	08003833 	.word	0x08003833
 8003808:	0800382b 	.word	0x0800382b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800380c:	f7ff f986 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003810:	61f8      	str	r0, [r7, #28]
        break;
 8003812:	e014      	b.n	800383e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003814:	f7ff f998 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 8003818:	61f8      	str	r0, [r7, #28]
        break;
 800381a:	e010      	b.n	800383e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800381c:	4b1d      	ldr	r3, [pc, #116]	; (8003894 <UART_SetConfig+0x508>)
 800381e:	61fb      	str	r3, [r7, #28]
        break;
 8003820:	e00d      	b.n	800383e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003822:	f7ff f8e3 	bl	80029ec <HAL_RCC_GetSysClockFreq>
 8003826:	61f8      	str	r0, [r7, #28]
        break;
 8003828:	e009      	b.n	800383e <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800382e:	61fb      	str	r3, [r7, #28]
        break;
 8003830:	e005      	b.n	800383e <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800383c:	bf00      	nop
    }

    if (pclk != 0U)
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d019      	beq.n	8003878 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	085a      	lsrs	r2, r3, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	441a      	add	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	fbb2 f3f3 	udiv	r3, r2, r3
 8003856:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	2b0f      	cmp	r3, #15
 800385c:	d909      	bls.n	8003872 <UART_SetConfig+0x4e6>
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d205      	bcs.n	8003872 <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60da      	str	r2, [r3, #12]
 8003870:	e002      	b.n	8003878 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2200      	movs	r2, #0
 800387c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003884:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003888:	4618      	mov	r0, r3
 800388a:	3728      	adds	r7, #40	; 0x28
 800388c:	46bd      	mov	sp, r7
 800388e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003892:	bf00      	nop
 8003894:	00f42400 	.word	0x00f42400

08003898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00a      	beq.n	80038c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00a      	beq.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d00a      	beq.n	8003906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	430a      	orrs	r2, r1
 8003904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	f003 0308 	and.w	r3, r3, #8
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00a      	beq.n	8003928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f003 0320 	and.w	r3, r3, #32
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00a      	beq.n	800396c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01a      	beq.n	80039ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003992:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003996:	d10a      	bne.n	80039ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00a      	beq.n	80039d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	605a      	str	r2, [r3, #4]
  }
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr

080039dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af02      	add	r7, sp, #8
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039ec:	f7fd fa78 	bl	8000ee0 <HAL_GetTick>
 80039f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0308 	and.w	r3, r3, #8
 80039fc:	2b08      	cmp	r3, #8
 80039fe:	d10e      	bne.n	8003a1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f82d 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e023      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d10e      	bne.n	8003a4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f817 	bl	8003a6e <UART_WaitOnFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d001      	beq.n	8003a4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e00d      	b.n	8003a66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b09c      	sub	sp, #112	; 0x70
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	603b      	str	r3, [r7, #0]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a7e:	e0a5      	b.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	f000 80a1 	beq.w	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a8a:	f7fd fa29 	bl	8000ee0 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d302      	bcc.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d13e      	bne.n	8003b1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa8:	e853 3f00 	ldrex	r3, [r3]
 8003aac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ab0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ab4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ac0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ac4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ac6:	e841 2300 	strex	r3, r2, [r1]
 8003aca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1e6      	bne.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	f023 0301 	bic.w	r3, r3, #1
 8003ae8:	663b      	str	r3, [r7, #96]	; 0x60
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3308      	adds	r3, #8
 8003af0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003af2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003af4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003af8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003afa:	e841 2300 	strex	r3, r2, [r1]
 8003afe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1e5      	bne.n	8003ad2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e067      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d04f      	beq.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	69db      	ldr	r3, [r3, #28]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b3a:	d147      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
 8003b66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	3308      	adds	r3, #8
 8003b7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	e853 3f00 	ldrex	r3, [r3]
 8003b86:	613b      	str	r3, [r7, #16]
   return(result);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	3308      	adds	r3, #8
 8003b96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b98:	623a      	str	r2, [r7, #32]
 8003b9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9c:	69f9      	ldr	r1, [r7, #28]
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	e841 2300 	strex	r3, r2, [r1]
 8003ba4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e5      	bne.n	8003b78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e010      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	68ba      	ldr	r2, [r7, #8]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	bf0c      	ite	eq
 8003bdc:	2301      	moveq	r3, #1
 8003bde:	2300      	movne	r3, #0
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	461a      	mov	r2, r3
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	f43f af4a 	beq.w	8003a80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3770      	adds	r7, #112	; 0x70
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <__errno>:
 8003bf8:	4b01      	ldr	r3, [pc, #4]	; (8003c00 <__errno+0x8>)
 8003bfa:	6818      	ldr	r0, [r3, #0]
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	2000000c 	.word	0x2000000c

08003c04 <__libc_init_array>:
 8003c04:	b570      	push	{r4, r5, r6, lr}
 8003c06:	4d0d      	ldr	r5, [pc, #52]	; (8003c3c <__libc_init_array+0x38>)
 8003c08:	4c0d      	ldr	r4, [pc, #52]	; (8003c40 <__libc_init_array+0x3c>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	2600      	movs	r6, #0
 8003c10:	42a6      	cmp	r6, r4
 8003c12:	d109      	bne.n	8003c28 <__libc_init_array+0x24>
 8003c14:	4d0b      	ldr	r5, [pc, #44]	; (8003c44 <__libc_init_array+0x40>)
 8003c16:	4c0c      	ldr	r4, [pc, #48]	; (8003c48 <__libc_init_array+0x44>)
 8003c18:	f000 ffae 	bl	8004b78 <_init>
 8003c1c:	1b64      	subs	r4, r4, r5
 8003c1e:	10a4      	asrs	r4, r4, #2
 8003c20:	2600      	movs	r6, #0
 8003c22:	42a6      	cmp	r6, r4
 8003c24:	d105      	bne.n	8003c32 <__libc_init_array+0x2e>
 8003c26:	bd70      	pop	{r4, r5, r6, pc}
 8003c28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c2c:	4798      	blx	r3
 8003c2e:	3601      	adds	r6, #1
 8003c30:	e7ee      	b.n	8003c10 <__libc_init_array+0xc>
 8003c32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c36:	4798      	blx	r3
 8003c38:	3601      	adds	r6, #1
 8003c3a:	e7f2      	b.n	8003c22 <__libc_init_array+0x1e>
 8003c3c:	08004cf0 	.word	0x08004cf0
 8003c40:	08004cf0 	.word	0x08004cf0
 8003c44:	08004cf0 	.word	0x08004cf0
 8003c48:	08004cf4 	.word	0x08004cf4

08003c4c <memset>:
 8003c4c:	4402      	add	r2, r0
 8003c4e:	4603      	mov	r3, r0
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d100      	bne.n	8003c56 <memset+0xa>
 8003c54:	4770      	bx	lr
 8003c56:	f803 1b01 	strb.w	r1, [r3], #1
 8003c5a:	e7f9      	b.n	8003c50 <memset+0x4>

08003c5c <iprintf>:
 8003c5c:	b40f      	push	{r0, r1, r2, r3}
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	; (8003c88 <iprintf+0x2c>)
 8003c60:	b513      	push	{r0, r1, r4, lr}
 8003c62:	681c      	ldr	r4, [r3, #0]
 8003c64:	b124      	cbz	r4, 8003c70 <iprintf+0x14>
 8003c66:	69a3      	ldr	r3, [r4, #24]
 8003c68:	b913      	cbnz	r3, 8003c70 <iprintf+0x14>
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f000 f866 	bl	8003d3c <__sinit>
 8003c70:	ab05      	add	r3, sp, #20
 8003c72:	9a04      	ldr	r2, [sp, #16]
 8003c74:	68a1      	ldr	r1, [r4, #8]
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f000 f9bd 	bl	8003ff8 <_vfiprintf_r>
 8003c7e:	b002      	add	sp, #8
 8003c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c84:	b004      	add	sp, #16
 8003c86:	4770      	bx	lr
 8003c88:	2000000c 	.word	0x2000000c

08003c8c <std>:
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	4604      	mov	r4, r0
 8003c92:	e9c0 3300 	strd	r3, r3, [r0]
 8003c96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c9a:	6083      	str	r3, [r0, #8]
 8003c9c:	8181      	strh	r1, [r0, #12]
 8003c9e:	6643      	str	r3, [r0, #100]	; 0x64
 8003ca0:	81c2      	strh	r2, [r0, #14]
 8003ca2:	6183      	str	r3, [r0, #24]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	2208      	movs	r2, #8
 8003ca8:	305c      	adds	r0, #92	; 0x5c
 8003caa:	f7ff ffcf 	bl	8003c4c <memset>
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <std+0x38>)
 8003cb0:	6263      	str	r3, [r4, #36]	; 0x24
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <std+0x3c>)
 8003cb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <std+0x40>)
 8003cb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <std+0x44>)
 8003cbc:	6224      	str	r4, [r4, #32]
 8003cbe:	6323      	str	r3, [r4, #48]	; 0x30
 8003cc0:	bd10      	pop	{r4, pc}
 8003cc2:	bf00      	nop
 8003cc4:	080045a1 	.word	0x080045a1
 8003cc8:	080045c3 	.word	0x080045c3
 8003ccc:	080045fb 	.word	0x080045fb
 8003cd0:	0800461f 	.word	0x0800461f

08003cd4 <_cleanup_r>:
 8003cd4:	4901      	ldr	r1, [pc, #4]	; (8003cdc <_cleanup_r+0x8>)
 8003cd6:	f000 b8af 	b.w	8003e38 <_fwalk_reent>
 8003cda:	bf00      	nop
 8003cdc:	080048f9 	.word	0x080048f9

08003ce0 <__sfmoreglue>:
 8003ce0:	b570      	push	{r4, r5, r6, lr}
 8003ce2:	2268      	movs	r2, #104	; 0x68
 8003ce4:	1e4d      	subs	r5, r1, #1
 8003ce6:	4355      	muls	r5, r2
 8003ce8:	460e      	mov	r6, r1
 8003cea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cee:	f000 f8e5 	bl	8003ebc <_malloc_r>
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	b140      	cbz	r0, 8003d08 <__sfmoreglue+0x28>
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	e9c0 1600 	strd	r1, r6, [r0]
 8003cfc:	300c      	adds	r0, #12
 8003cfe:	60a0      	str	r0, [r4, #8]
 8003d00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003d04:	f7ff ffa2 	bl	8003c4c <memset>
 8003d08:	4620      	mov	r0, r4
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}

08003d0c <__sfp_lock_acquire>:
 8003d0c:	4801      	ldr	r0, [pc, #4]	; (8003d14 <__sfp_lock_acquire+0x8>)
 8003d0e:	f000 b8b3 	b.w	8003e78 <__retarget_lock_acquire_recursive>
 8003d12:	bf00      	nop
 8003d14:	20000175 	.word	0x20000175

08003d18 <__sfp_lock_release>:
 8003d18:	4801      	ldr	r0, [pc, #4]	; (8003d20 <__sfp_lock_release+0x8>)
 8003d1a:	f000 b8ae 	b.w	8003e7a <__retarget_lock_release_recursive>
 8003d1e:	bf00      	nop
 8003d20:	20000175 	.word	0x20000175

08003d24 <__sinit_lock_acquire>:
 8003d24:	4801      	ldr	r0, [pc, #4]	; (8003d2c <__sinit_lock_acquire+0x8>)
 8003d26:	f000 b8a7 	b.w	8003e78 <__retarget_lock_acquire_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	20000176 	.word	0x20000176

08003d30 <__sinit_lock_release>:
 8003d30:	4801      	ldr	r0, [pc, #4]	; (8003d38 <__sinit_lock_release+0x8>)
 8003d32:	f000 b8a2 	b.w	8003e7a <__retarget_lock_release_recursive>
 8003d36:	bf00      	nop
 8003d38:	20000176 	.word	0x20000176

08003d3c <__sinit>:
 8003d3c:	b510      	push	{r4, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	f7ff fff0 	bl	8003d24 <__sinit_lock_acquire>
 8003d44:	69a3      	ldr	r3, [r4, #24]
 8003d46:	b11b      	cbz	r3, 8003d50 <__sinit+0x14>
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d4c:	f7ff bff0 	b.w	8003d30 <__sinit_lock_release>
 8003d50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d54:	6523      	str	r3, [r4, #80]	; 0x50
 8003d56:	4b13      	ldr	r3, [pc, #76]	; (8003da4 <__sinit+0x68>)
 8003d58:	4a13      	ldr	r2, [pc, #76]	; (8003da8 <__sinit+0x6c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d5e:	42a3      	cmp	r3, r4
 8003d60:	bf04      	itt	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	61a3      	streq	r3, [r4, #24]
 8003d66:	4620      	mov	r0, r4
 8003d68:	f000 f820 	bl	8003dac <__sfp>
 8003d6c:	6060      	str	r0, [r4, #4]
 8003d6e:	4620      	mov	r0, r4
 8003d70:	f000 f81c 	bl	8003dac <__sfp>
 8003d74:	60a0      	str	r0, [r4, #8]
 8003d76:	4620      	mov	r0, r4
 8003d78:	f000 f818 	bl	8003dac <__sfp>
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	60e0      	str	r0, [r4, #12]
 8003d80:	2104      	movs	r1, #4
 8003d82:	6860      	ldr	r0, [r4, #4]
 8003d84:	f7ff ff82 	bl	8003c8c <std>
 8003d88:	68a0      	ldr	r0, [r4, #8]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	2109      	movs	r1, #9
 8003d8e:	f7ff ff7d 	bl	8003c8c <std>
 8003d92:	68e0      	ldr	r0, [r4, #12]
 8003d94:	2202      	movs	r2, #2
 8003d96:	2112      	movs	r1, #18
 8003d98:	f7ff ff78 	bl	8003c8c <std>
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	61a3      	str	r3, [r4, #24]
 8003da0:	e7d2      	b.n	8003d48 <__sinit+0xc>
 8003da2:	bf00      	nop
 8003da4:	08004c50 	.word	0x08004c50
 8003da8:	08003cd5 	.word	0x08003cd5

08003dac <__sfp>:
 8003dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dae:	4607      	mov	r7, r0
 8003db0:	f7ff ffac 	bl	8003d0c <__sfp_lock_acquire>
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <__sfp+0x84>)
 8003db6:	681e      	ldr	r6, [r3, #0]
 8003db8:	69b3      	ldr	r3, [r6, #24]
 8003dba:	b913      	cbnz	r3, 8003dc2 <__sfp+0x16>
 8003dbc:	4630      	mov	r0, r6
 8003dbe:	f7ff ffbd 	bl	8003d3c <__sinit>
 8003dc2:	3648      	adds	r6, #72	; 0x48
 8003dc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	d503      	bpl.n	8003dd4 <__sfp+0x28>
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	b30b      	cbz	r3, 8003e14 <__sfp+0x68>
 8003dd0:	6836      	ldr	r6, [r6, #0]
 8003dd2:	e7f7      	b.n	8003dc4 <__sfp+0x18>
 8003dd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003dd8:	b9d5      	cbnz	r5, 8003e10 <__sfp+0x64>
 8003dda:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <__sfp+0x88>)
 8003ddc:	60e3      	str	r3, [r4, #12]
 8003dde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003de2:	6665      	str	r5, [r4, #100]	; 0x64
 8003de4:	f000 f847 	bl	8003e76 <__retarget_lock_init_recursive>
 8003de8:	f7ff ff96 	bl	8003d18 <__sfp_lock_release>
 8003dec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003df0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003df4:	6025      	str	r5, [r4, #0]
 8003df6:	61a5      	str	r5, [r4, #24]
 8003df8:	2208      	movs	r2, #8
 8003dfa:	4629      	mov	r1, r5
 8003dfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e00:	f7ff ff24 	bl	8003c4c <memset>
 8003e04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	3468      	adds	r4, #104	; 0x68
 8003e12:	e7d9      	b.n	8003dc8 <__sfp+0x1c>
 8003e14:	2104      	movs	r1, #4
 8003e16:	4638      	mov	r0, r7
 8003e18:	f7ff ff62 	bl	8003ce0 <__sfmoreglue>
 8003e1c:	4604      	mov	r4, r0
 8003e1e:	6030      	str	r0, [r6, #0]
 8003e20:	2800      	cmp	r0, #0
 8003e22:	d1d5      	bne.n	8003dd0 <__sfp+0x24>
 8003e24:	f7ff ff78 	bl	8003d18 <__sfp_lock_release>
 8003e28:	230c      	movs	r3, #12
 8003e2a:	603b      	str	r3, [r7, #0]
 8003e2c:	e7ee      	b.n	8003e0c <__sfp+0x60>
 8003e2e:	bf00      	nop
 8003e30:	08004c50 	.word	0x08004c50
 8003e34:	ffff0001 	.word	0xffff0001

08003e38 <_fwalk_reent>:
 8003e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e3c:	4606      	mov	r6, r0
 8003e3e:	4688      	mov	r8, r1
 8003e40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e44:	2700      	movs	r7, #0
 8003e46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e4a:	f1b9 0901 	subs.w	r9, r9, #1
 8003e4e:	d505      	bpl.n	8003e5c <_fwalk_reent+0x24>
 8003e50:	6824      	ldr	r4, [r4, #0]
 8003e52:	2c00      	cmp	r4, #0
 8003e54:	d1f7      	bne.n	8003e46 <_fwalk_reent+0xe>
 8003e56:	4638      	mov	r0, r7
 8003e58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e5c:	89ab      	ldrh	r3, [r5, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d907      	bls.n	8003e72 <_fwalk_reent+0x3a>
 8003e62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e66:	3301      	adds	r3, #1
 8003e68:	d003      	beq.n	8003e72 <_fwalk_reent+0x3a>
 8003e6a:	4629      	mov	r1, r5
 8003e6c:	4630      	mov	r0, r6
 8003e6e:	47c0      	blx	r8
 8003e70:	4307      	orrs	r7, r0
 8003e72:	3568      	adds	r5, #104	; 0x68
 8003e74:	e7e9      	b.n	8003e4a <_fwalk_reent+0x12>

08003e76 <__retarget_lock_init_recursive>:
 8003e76:	4770      	bx	lr

08003e78 <__retarget_lock_acquire_recursive>:
 8003e78:	4770      	bx	lr

08003e7a <__retarget_lock_release_recursive>:
 8003e7a:	4770      	bx	lr

08003e7c <sbrk_aligned>:
 8003e7c:	b570      	push	{r4, r5, r6, lr}
 8003e7e:	4e0e      	ldr	r6, [pc, #56]	; (8003eb8 <sbrk_aligned+0x3c>)
 8003e80:	460c      	mov	r4, r1
 8003e82:	6831      	ldr	r1, [r6, #0]
 8003e84:	4605      	mov	r5, r0
 8003e86:	b911      	cbnz	r1, 8003e8e <sbrk_aligned+0x12>
 8003e88:	f000 fb7a 	bl	8004580 <_sbrk_r>
 8003e8c:	6030      	str	r0, [r6, #0]
 8003e8e:	4621      	mov	r1, r4
 8003e90:	4628      	mov	r0, r5
 8003e92:	f000 fb75 	bl	8004580 <_sbrk_r>
 8003e96:	1c43      	adds	r3, r0, #1
 8003e98:	d00a      	beq.n	8003eb0 <sbrk_aligned+0x34>
 8003e9a:	1cc4      	adds	r4, r0, #3
 8003e9c:	f024 0403 	bic.w	r4, r4, #3
 8003ea0:	42a0      	cmp	r0, r4
 8003ea2:	d007      	beq.n	8003eb4 <sbrk_aligned+0x38>
 8003ea4:	1a21      	subs	r1, r4, r0
 8003ea6:	4628      	mov	r0, r5
 8003ea8:	f000 fb6a 	bl	8004580 <_sbrk_r>
 8003eac:	3001      	adds	r0, #1
 8003eae:	d101      	bne.n	8003eb4 <sbrk_aligned+0x38>
 8003eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	2000017c 	.word	0x2000017c

08003ebc <_malloc_r>:
 8003ebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ec0:	1ccd      	adds	r5, r1, #3
 8003ec2:	f025 0503 	bic.w	r5, r5, #3
 8003ec6:	3508      	adds	r5, #8
 8003ec8:	2d0c      	cmp	r5, #12
 8003eca:	bf38      	it	cc
 8003ecc:	250c      	movcc	r5, #12
 8003ece:	2d00      	cmp	r5, #0
 8003ed0:	4607      	mov	r7, r0
 8003ed2:	db01      	blt.n	8003ed8 <_malloc_r+0x1c>
 8003ed4:	42a9      	cmp	r1, r5
 8003ed6:	d905      	bls.n	8003ee4 <_malloc_r+0x28>
 8003ed8:	230c      	movs	r3, #12
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	2600      	movs	r6, #0
 8003ede:	4630      	mov	r0, r6
 8003ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ee4:	4e2e      	ldr	r6, [pc, #184]	; (8003fa0 <_malloc_r+0xe4>)
 8003ee6:	f000 fdbb 	bl	8004a60 <__malloc_lock>
 8003eea:	6833      	ldr	r3, [r6, #0]
 8003eec:	461c      	mov	r4, r3
 8003eee:	bb34      	cbnz	r4, 8003f3e <_malloc_r+0x82>
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f7ff ffc2 	bl	8003e7c <sbrk_aligned>
 8003ef8:	1c43      	adds	r3, r0, #1
 8003efa:	4604      	mov	r4, r0
 8003efc:	d14d      	bne.n	8003f9a <_malloc_r+0xde>
 8003efe:	6834      	ldr	r4, [r6, #0]
 8003f00:	4626      	mov	r6, r4
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d140      	bne.n	8003f88 <_malloc_r+0xcc>
 8003f06:	6823      	ldr	r3, [r4, #0]
 8003f08:	4631      	mov	r1, r6
 8003f0a:	4638      	mov	r0, r7
 8003f0c:	eb04 0803 	add.w	r8, r4, r3
 8003f10:	f000 fb36 	bl	8004580 <_sbrk_r>
 8003f14:	4580      	cmp	r8, r0
 8003f16:	d13a      	bne.n	8003f8e <_malloc_r+0xd2>
 8003f18:	6821      	ldr	r1, [r4, #0]
 8003f1a:	3503      	adds	r5, #3
 8003f1c:	1a6d      	subs	r5, r5, r1
 8003f1e:	f025 0503 	bic.w	r5, r5, #3
 8003f22:	3508      	adds	r5, #8
 8003f24:	2d0c      	cmp	r5, #12
 8003f26:	bf38      	it	cc
 8003f28:	250c      	movcc	r5, #12
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	f7ff ffa5 	bl	8003e7c <sbrk_aligned>
 8003f32:	3001      	adds	r0, #1
 8003f34:	d02b      	beq.n	8003f8e <_malloc_r+0xd2>
 8003f36:	6823      	ldr	r3, [r4, #0]
 8003f38:	442b      	add	r3, r5
 8003f3a:	6023      	str	r3, [r4, #0]
 8003f3c:	e00e      	b.n	8003f5c <_malloc_r+0xa0>
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	1b52      	subs	r2, r2, r5
 8003f42:	d41e      	bmi.n	8003f82 <_malloc_r+0xc6>
 8003f44:	2a0b      	cmp	r2, #11
 8003f46:	d916      	bls.n	8003f76 <_malloc_r+0xba>
 8003f48:	1961      	adds	r1, r4, r5
 8003f4a:	42a3      	cmp	r3, r4
 8003f4c:	6025      	str	r5, [r4, #0]
 8003f4e:	bf18      	it	ne
 8003f50:	6059      	strne	r1, [r3, #4]
 8003f52:	6863      	ldr	r3, [r4, #4]
 8003f54:	bf08      	it	eq
 8003f56:	6031      	streq	r1, [r6, #0]
 8003f58:	5162      	str	r2, [r4, r5]
 8003f5a:	604b      	str	r3, [r1, #4]
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	f104 060b 	add.w	r6, r4, #11
 8003f62:	f000 fd83 	bl	8004a6c <__malloc_unlock>
 8003f66:	f026 0607 	bic.w	r6, r6, #7
 8003f6a:	1d23      	adds	r3, r4, #4
 8003f6c:	1af2      	subs	r2, r6, r3
 8003f6e:	d0b6      	beq.n	8003ede <_malloc_r+0x22>
 8003f70:	1b9b      	subs	r3, r3, r6
 8003f72:	50a3      	str	r3, [r4, r2]
 8003f74:	e7b3      	b.n	8003ede <_malloc_r+0x22>
 8003f76:	6862      	ldr	r2, [r4, #4]
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	bf0c      	ite	eq
 8003f7c:	6032      	streq	r2, [r6, #0]
 8003f7e:	605a      	strne	r2, [r3, #4]
 8003f80:	e7ec      	b.n	8003f5c <_malloc_r+0xa0>
 8003f82:	4623      	mov	r3, r4
 8003f84:	6864      	ldr	r4, [r4, #4]
 8003f86:	e7b2      	b.n	8003eee <_malloc_r+0x32>
 8003f88:	4634      	mov	r4, r6
 8003f8a:	6876      	ldr	r6, [r6, #4]
 8003f8c:	e7b9      	b.n	8003f02 <_malloc_r+0x46>
 8003f8e:	230c      	movs	r3, #12
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4638      	mov	r0, r7
 8003f94:	f000 fd6a 	bl	8004a6c <__malloc_unlock>
 8003f98:	e7a1      	b.n	8003ede <_malloc_r+0x22>
 8003f9a:	6025      	str	r5, [r4, #0]
 8003f9c:	e7de      	b.n	8003f5c <_malloc_r+0xa0>
 8003f9e:	bf00      	nop
 8003fa0:	20000178 	.word	0x20000178

08003fa4 <__sfputc_r>:
 8003fa4:	6893      	ldr	r3, [r2, #8]
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	b410      	push	{r4}
 8003fac:	6093      	str	r3, [r2, #8]
 8003fae:	da08      	bge.n	8003fc2 <__sfputc_r+0x1e>
 8003fb0:	6994      	ldr	r4, [r2, #24]
 8003fb2:	42a3      	cmp	r3, r4
 8003fb4:	db01      	blt.n	8003fba <__sfputc_r+0x16>
 8003fb6:	290a      	cmp	r1, #10
 8003fb8:	d103      	bne.n	8003fc2 <__sfputc_r+0x1e>
 8003fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fbe:	f000 bb33 	b.w	8004628 <__swbuf_r>
 8003fc2:	6813      	ldr	r3, [r2, #0]
 8003fc4:	1c58      	adds	r0, r3, #1
 8003fc6:	6010      	str	r0, [r2, #0]
 8003fc8:	7019      	strb	r1, [r3, #0]
 8003fca:	4608      	mov	r0, r1
 8003fcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <__sfputs_r>:
 8003fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd4:	4606      	mov	r6, r0
 8003fd6:	460f      	mov	r7, r1
 8003fd8:	4614      	mov	r4, r2
 8003fda:	18d5      	adds	r5, r2, r3
 8003fdc:	42ac      	cmp	r4, r5
 8003fde:	d101      	bne.n	8003fe4 <__sfputs_r+0x12>
 8003fe0:	2000      	movs	r0, #0
 8003fe2:	e007      	b.n	8003ff4 <__sfputs_r+0x22>
 8003fe4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe8:	463a      	mov	r2, r7
 8003fea:	4630      	mov	r0, r6
 8003fec:	f7ff ffda 	bl	8003fa4 <__sfputc_r>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d1f3      	bne.n	8003fdc <__sfputs_r+0xa>
 8003ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ff8 <_vfiprintf_r>:
 8003ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ffc:	460d      	mov	r5, r1
 8003ffe:	b09d      	sub	sp, #116	; 0x74
 8004000:	4614      	mov	r4, r2
 8004002:	4698      	mov	r8, r3
 8004004:	4606      	mov	r6, r0
 8004006:	b118      	cbz	r0, 8004010 <_vfiprintf_r+0x18>
 8004008:	6983      	ldr	r3, [r0, #24]
 800400a:	b90b      	cbnz	r3, 8004010 <_vfiprintf_r+0x18>
 800400c:	f7ff fe96 	bl	8003d3c <__sinit>
 8004010:	4b89      	ldr	r3, [pc, #548]	; (8004238 <_vfiprintf_r+0x240>)
 8004012:	429d      	cmp	r5, r3
 8004014:	d11b      	bne.n	800404e <_vfiprintf_r+0x56>
 8004016:	6875      	ldr	r5, [r6, #4]
 8004018:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800401a:	07d9      	lsls	r1, r3, #31
 800401c:	d405      	bmi.n	800402a <_vfiprintf_r+0x32>
 800401e:	89ab      	ldrh	r3, [r5, #12]
 8004020:	059a      	lsls	r2, r3, #22
 8004022:	d402      	bmi.n	800402a <_vfiprintf_r+0x32>
 8004024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004026:	f7ff ff27 	bl	8003e78 <__retarget_lock_acquire_recursive>
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	071b      	lsls	r3, r3, #28
 800402e:	d501      	bpl.n	8004034 <_vfiprintf_r+0x3c>
 8004030:	692b      	ldr	r3, [r5, #16]
 8004032:	b9eb      	cbnz	r3, 8004070 <_vfiprintf_r+0x78>
 8004034:	4629      	mov	r1, r5
 8004036:	4630      	mov	r0, r6
 8004038:	f000 fb5a 	bl	80046f0 <__swsetup_r>
 800403c:	b1c0      	cbz	r0, 8004070 <_vfiprintf_r+0x78>
 800403e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004040:	07dc      	lsls	r4, r3, #31
 8004042:	d50e      	bpl.n	8004062 <_vfiprintf_r+0x6a>
 8004044:	f04f 30ff 	mov.w	r0, #4294967295
 8004048:	b01d      	add	sp, #116	; 0x74
 800404a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800404e:	4b7b      	ldr	r3, [pc, #492]	; (800423c <_vfiprintf_r+0x244>)
 8004050:	429d      	cmp	r5, r3
 8004052:	d101      	bne.n	8004058 <_vfiprintf_r+0x60>
 8004054:	68b5      	ldr	r5, [r6, #8]
 8004056:	e7df      	b.n	8004018 <_vfiprintf_r+0x20>
 8004058:	4b79      	ldr	r3, [pc, #484]	; (8004240 <_vfiprintf_r+0x248>)
 800405a:	429d      	cmp	r5, r3
 800405c:	bf08      	it	eq
 800405e:	68f5      	ldreq	r5, [r6, #12]
 8004060:	e7da      	b.n	8004018 <_vfiprintf_r+0x20>
 8004062:	89ab      	ldrh	r3, [r5, #12]
 8004064:	0598      	lsls	r0, r3, #22
 8004066:	d4ed      	bmi.n	8004044 <_vfiprintf_r+0x4c>
 8004068:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800406a:	f7ff ff06 	bl	8003e7a <__retarget_lock_release_recursive>
 800406e:	e7e9      	b.n	8004044 <_vfiprintf_r+0x4c>
 8004070:	2300      	movs	r3, #0
 8004072:	9309      	str	r3, [sp, #36]	; 0x24
 8004074:	2320      	movs	r3, #32
 8004076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800407a:	f8cd 800c 	str.w	r8, [sp, #12]
 800407e:	2330      	movs	r3, #48	; 0x30
 8004080:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004244 <_vfiprintf_r+0x24c>
 8004084:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004088:	f04f 0901 	mov.w	r9, #1
 800408c:	4623      	mov	r3, r4
 800408e:	469a      	mov	sl, r3
 8004090:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004094:	b10a      	cbz	r2, 800409a <_vfiprintf_r+0xa2>
 8004096:	2a25      	cmp	r2, #37	; 0x25
 8004098:	d1f9      	bne.n	800408e <_vfiprintf_r+0x96>
 800409a:	ebba 0b04 	subs.w	fp, sl, r4
 800409e:	d00b      	beq.n	80040b8 <_vfiprintf_r+0xc0>
 80040a0:	465b      	mov	r3, fp
 80040a2:	4622      	mov	r2, r4
 80040a4:	4629      	mov	r1, r5
 80040a6:	4630      	mov	r0, r6
 80040a8:	f7ff ff93 	bl	8003fd2 <__sfputs_r>
 80040ac:	3001      	adds	r0, #1
 80040ae:	f000 80aa 	beq.w	8004206 <_vfiprintf_r+0x20e>
 80040b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b4:	445a      	add	r2, fp
 80040b6:	9209      	str	r2, [sp, #36]	; 0x24
 80040b8:	f89a 3000 	ldrb.w	r3, [sl]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f000 80a2 	beq.w	8004206 <_vfiprintf_r+0x20e>
 80040c2:	2300      	movs	r3, #0
 80040c4:	f04f 32ff 	mov.w	r2, #4294967295
 80040c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040cc:	f10a 0a01 	add.w	sl, sl, #1
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	9307      	str	r3, [sp, #28]
 80040d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040d8:	931a      	str	r3, [sp, #104]	; 0x68
 80040da:	4654      	mov	r4, sl
 80040dc:	2205      	movs	r2, #5
 80040de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e2:	4858      	ldr	r0, [pc, #352]	; (8004244 <_vfiprintf_r+0x24c>)
 80040e4:	f7fc f87c 	bl	80001e0 <memchr>
 80040e8:	9a04      	ldr	r2, [sp, #16]
 80040ea:	b9d8      	cbnz	r0, 8004124 <_vfiprintf_r+0x12c>
 80040ec:	06d1      	lsls	r1, r2, #27
 80040ee:	bf44      	itt	mi
 80040f0:	2320      	movmi	r3, #32
 80040f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040f6:	0713      	lsls	r3, r2, #28
 80040f8:	bf44      	itt	mi
 80040fa:	232b      	movmi	r3, #43	; 0x2b
 80040fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004100:	f89a 3000 	ldrb.w	r3, [sl]
 8004104:	2b2a      	cmp	r3, #42	; 0x2a
 8004106:	d015      	beq.n	8004134 <_vfiprintf_r+0x13c>
 8004108:	9a07      	ldr	r2, [sp, #28]
 800410a:	4654      	mov	r4, sl
 800410c:	2000      	movs	r0, #0
 800410e:	f04f 0c0a 	mov.w	ip, #10
 8004112:	4621      	mov	r1, r4
 8004114:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004118:	3b30      	subs	r3, #48	; 0x30
 800411a:	2b09      	cmp	r3, #9
 800411c:	d94e      	bls.n	80041bc <_vfiprintf_r+0x1c4>
 800411e:	b1b0      	cbz	r0, 800414e <_vfiprintf_r+0x156>
 8004120:	9207      	str	r2, [sp, #28]
 8004122:	e014      	b.n	800414e <_vfiprintf_r+0x156>
 8004124:	eba0 0308 	sub.w	r3, r0, r8
 8004128:	fa09 f303 	lsl.w	r3, r9, r3
 800412c:	4313      	orrs	r3, r2
 800412e:	9304      	str	r3, [sp, #16]
 8004130:	46a2      	mov	sl, r4
 8004132:	e7d2      	b.n	80040da <_vfiprintf_r+0xe2>
 8004134:	9b03      	ldr	r3, [sp, #12]
 8004136:	1d19      	adds	r1, r3, #4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	9103      	str	r1, [sp, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	bfbb      	ittet	lt
 8004140:	425b      	neglt	r3, r3
 8004142:	f042 0202 	orrlt.w	r2, r2, #2
 8004146:	9307      	strge	r3, [sp, #28]
 8004148:	9307      	strlt	r3, [sp, #28]
 800414a:	bfb8      	it	lt
 800414c:	9204      	strlt	r2, [sp, #16]
 800414e:	7823      	ldrb	r3, [r4, #0]
 8004150:	2b2e      	cmp	r3, #46	; 0x2e
 8004152:	d10c      	bne.n	800416e <_vfiprintf_r+0x176>
 8004154:	7863      	ldrb	r3, [r4, #1]
 8004156:	2b2a      	cmp	r3, #42	; 0x2a
 8004158:	d135      	bne.n	80041c6 <_vfiprintf_r+0x1ce>
 800415a:	9b03      	ldr	r3, [sp, #12]
 800415c:	1d1a      	adds	r2, r3, #4
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	9203      	str	r2, [sp, #12]
 8004162:	2b00      	cmp	r3, #0
 8004164:	bfb8      	it	lt
 8004166:	f04f 33ff 	movlt.w	r3, #4294967295
 800416a:	3402      	adds	r4, #2
 800416c:	9305      	str	r3, [sp, #20]
 800416e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004254 <_vfiprintf_r+0x25c>
 8004172:	7821      	ldrb	r1, [r4, #0]
 8004174:	2203      	movs	r2, #3
 8004176:	4650      	mov	r0, sl
 8004178:	f7fc f832 	bl	80001e0 <memchr>
 800417c:	b140      	cbz	r0, 8004190 <_vfiprintf_r+0x198>
 800417e:	2340      	movs	r3, #64	; 0x40
 8004180:	eba0 000a 	sub.w	r0, r0, sl
 8004184:	fa03 f000 	lsl.w	r0, r3, r0
 8004188:	9b04      	ldr	r3, [sp, #16]
 800418a:	4303      	orrs	r3, r0
 800418c:	3401      	adds	r4, #1
 800418e:	9304      	str	r3, [sp, #16]
 8004190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004194:	482c      	ldr	r0, [pc, #176]	; (8004248 <_vfiprintf_r+0x250>)
 8004196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800419a:	2206      	movs	r2, #6
 800419c:	f7fc f820 	bl	80001e0 <memchr>
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d03f      	beq.n	8004224 <_vfiprintf_r+0x22c>
 80041a4:	4b29      	ldr	r3, [pc, #164]	; (800424c <_vfiprintf_r+0x254>)
 80041a6:	bb1b      	cbnz	r3, 80041f0 <_vfiprintf_r+0x1f8>
 80041a8:	9b03      	ldr	r3, [sp, #12]
 80041aa:	3307      	adds	r3, #7
 80041ac:	f023 0307 	bic.w	r3, r3, #7
 80041b0:	3308      	adds	r3, #8
 80041b2:	9303      	str	r3, [sp, #12]
 80041b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b6:	443b      	add	r3, r7
 80041b8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ba:	e767      	b.n	800408c <_vfiprintf_r+0x94>
 80041bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80041c0:	460c      	mov	r4, r1
 80041c2:	2001      	movs	r0, #1
 80041c4:	e7a5      	b.n	8004112 <_vfiprintf_r+0x11a>
 80041c6:	2300      	movs	r3, #0
 80041c8:	3401      	adds	r4, #1
 80041ca:	9305      	str	r3, [sp, #20]
 80041cc:	4619      	mov	r1, r3
 80041ce:	f04f 0c0a 	mov.w	ip, #10
 80041d2:	4620      	mov	r0, r4
 80041d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041d8:	3a30      	subs	r2, #48	; 0x30
 80041da:	2a09      	cmp	r2, #9
 80041dc:	d903      	bls.n	80041e6 <_vfiprintf_r+0x1ee>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0c5      	beq.n	800416e <_vfiprintf_r+0x176>
 80041e2:	9105      	str	r1, [sp, #20]
 80041e4:	e7c3      	b.n	800416e <_vfiprintf_r+0x176>
 80041e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80041ea:	4604      	mov	r4, r0
 80041ec:	2301      	movs	r3, #1
 80041ee:	e7f0      	b.n	80041d2 <_vfiprintf_r+0x1da>
 80041f0:	ab03      	add	r3, sp, #12
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	462a      	mov	r2, r5
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <_vfiprintf_r+0x258>)
 80041f8:	a904      	add	r1, sp, #16
 80041fa:	4630      	mov	r0, r6
 80041fc:	f3af 8000 	nop.w
 8004200:	4607      	mov	r7, r0
 8004202:	1c78      	adds	r0, r7, #1
 8004204:	d1d6      	bne.n	80041b4 <_vfiprintf_r+0x1bc>
 8004206:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004208:	07d9      	lsls	r1, r3, #31
 800420a:	d405      	bmi.n	8004218 <_vfiprintf_r+0x220>
 800420c:	89ab      	ldrh	r3, [r5, #12]
 800420e:	059a      	lsls	r2, r3, #22
 8004210:	d402      	bmi.n	8004218 <_vfiprintf_r+0x220>
 8004212:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004214:	f7ff fe31 	bl	8003e7a <__retarget_lock_release_recursive>
 8004218:	89ab      	ldrh	r3, [r5, #12]
 800421a:	065b      	lsls	r3, r3, #25
 800421c:	f53f af12 	bmi.w	8004044 <_vfiprintf_r+0x4c>
 8004220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004222:	e711      	b.n	8004048 <_vfiprintf_r+0x50>
 8004224:	ab03      	add	r3, sp, #12
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	462a      	mov	r2, r5
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <_vfiprintf_r+0x258>)
 800422c:	a904      	add	r1, sp, #16
 800422e:	4630      	mov	r0, r6
 8004230:	f000 f880 	bl	8004334 <_printf_i>
 8004234:	e7e4      	b.n	8004200 <_vfiprintf_r+0x208>
 8004236:	bf00      	nop
 8004238:	08004c74 	.word	0x08004c74
 800423c:	08004c94 	.word	0x08004c94
 8004240:	08004c54 	.word	0x08004c54
 8004244:	08004cb4 	.word	0x08004cb4
 8004248:	08004cbe 	.word	0x08004cbe
 800424c:	00000000 	.word	0x00000000
 8004250:	08003fd3 	.word	0x08003fd3
 8004254:	08004cba 	.word	0x08004cba

08004258 <_printf_common>:
 8004258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800425c:	4616      	mov	r6, r2
 800425e:	4699      	mov	r9, r3
 8004260:	688a      	ldr	r2, [r1, #8]
 8004262:	690b      	ldr	r3, [r1, #16]
 8004264:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004268:	4293      	cmp	r3, r2
 800426a:	bfb8      	it	lt
 800426c:	4613      	movlt	r3, r2
 800426e:	6033      	str	r3, [r6, #0]
 8004270:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004274:	4607      	mov	r7, r0
 8004276:	460c      	mov	r4, r1
 8004278:	b10a      	cbz	r2, 800427e <_printf_common+0x26>
 800427a:	3301      	adds	r3, #1
 800427c:	6033      	str	r3, [r6, #0]
 800427e:	6823      	ldr	r3, [r4, #0]
 8004280:	0699      	lsls	r1, r3, #26
 8004282:	bf42      	ittt	mi
 8004284:	6833      	ldrmi	r3, [r6, #0]
 8004286:	3302      	addmi	r3, #2
 8004288:	6033      	strmi	r3, [r6, #0]
 800428a:	6825      	ldr	r5, [r4, #0]
 800428c:	f015 0506 	ands.w	r5, r5, #6
 8004290:	d106      	bne.n	80042a0 <_printf_common+0x48>
 8004292:	f104 0a19 	add.w	sl, r4, #25
 8004296:	68e3      	ldr	r3, [r4, #12]
 8004298:	6832      	ldr	r2, [r6, #0]
 800429a:	1a9b      	subs	r3, r3, r2
 800429c:	42ab      	cmp	r3, r5
 800429e:	dc26      	bgt.n	80042ee <_printf_common+0x96>
 80042a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042a4:	1e13      	subs	r3, r2, #0
 80042a6:	6822      	ldr	r2, [r4, #0]
 80042a8:	bf18      	it	ne
 80042aa:	2301      	movne	r3, #1
 80042ac:	0692      	lsls	r2, r2, #26
 80042ae:	d42b      	bmi.n	8004308 <_printf_common+0xb0>
 80042b0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b4:	4649      	mov	r1, r9
 80042b6:	4638      	mov	r0, r7
 80042b8:	47c0      	blx	r8
 80042ba:	3001      	adds	r0, #1
 80042bc:	d01e      	beq.n	80042fc <_printf_common+0xa4>
 80042be:	6823      	ldr	r3, [r4, #0]
 80042c0:	68e5      	ldr	r5, [r4, #12]
 80042c2:	6832      	ldr	r2, [r6, #0]
 80042c4:	f003 0306 	and.w	r3, r3, #6
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	bf08      	it	eq
 80042cc:	1aad      	subeq	r5, r5, r2
 80042ce:	68a3      	ldr	r3, [r4, #8]
 80042d0:	6922      	ldr	r2, [r4, #16]
 80042d2:	bf0c      	ite	eq
 80042d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042d8:	2500      	movne	r5, #0
 80042da:	4293      	cmp	r3, r2
 80042dc:	bfc4      	itt	gt
 80042de:	1a9b      	subgt	r3, r3, r2
 80042e0:	18ed      	addgt	r5, r5, r3
 80042e2:	2600      	movs	r6, #0
 80042e4:	341a      	adds	r4, #26
 80042e6:	42b5      	cmp	r5, r6
 80042e8:	d11a      	bne.n	8004320 <_printf_common+0xc8>
 80042ea:	2000      	movs	r0, #0
 80042ec:	e008      	b.n	8004300 <_printf_common+0xa8>
 80042ee:	2301      	movs	r3, #1
 80042f0:	4652      	mov	r2, sl
 80042f2:	4649      	mov	r1, r9
 80042f4:	4638      	mov	r0, r7
 80042f6:	47c0      	blx	r8
 80042f8:	3001      	adds	r0, #1
 80042fa:	d103      	bne.n	8004304 <_printf_common+0xac>
 80042fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004304:	3501      	adds	r5, #1
 8004306:	e7c6      	b.n	8004296 <_printf_common+0x3e>
 8004308:	18e1      	adds	r1, r4, r3
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	2030      	movs	r0, #48	; 0x30
 800430e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004312:	4422      	add	r2, r4
 8004314:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004318:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800431c:	3302      	adds	r3, #2
 800431e:	e7c7      	b.n	80042b0 <_printf_common+0x58>
 8004320:	2301      	movs	r3, #1
 8004322:	4622      	mov	r2, r4
 8004324:	4649      	mov	r1, r9
 8004326:	4638      	mov	r0, r7
 8004328:	47c0      	blx	r8
 800432a:	3001      	adds	r0, #1
 800432c:	d0e6      	beq.n	80042fc <_printf_common+0xa4>
 800432e:	3601      	adds	r6, #1
 8004330:	e7d9      	b.n	80042e6 <_printf_common+0x8e>
	...

08004334 <_printf_i>:
 8004334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004338:	7e0f      	ldrb	r7, [r1, #24]
 800433a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800433c:	2f78      	cmp	r7, #120	; 0x78
 800433e:	4691      	mov	r9, r2
 8004340:	4680      	mov	r8, r0
 8004342:	460c      	mov	r4, r1
 8004344:	469a      	mov	sl, r3
 8004346:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800434a:	d807      	bhi.n	800435c <_printf_i+0x28>
 800434c:	2f62      	cmp	r7, #98	; 0x62
 800434e:	d80a      	bhi.n	8004366 <_printf_i+0x32>
 8004350:	2f00      	cmp	r7, #0
 8004352:	f000 80d8 	beq.w	8004506 <_printf_i+0x1d2>
 8004356:	2f58      	cmp	r7, #88	; 0x58
 8004358:	f000 80a3 	beq.w	80044a2 <_printf_i+0x16e>
 800435c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004360:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004364:	e03a      	b.n	80043dc <_printf_i+0xa8>
 8004366:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800436a:	2b15      	cmp	r3, #21
 800436c:	d8f6      	bhi.n	800435c <_printf_i+0x28>
 800436e:	a101      	add	r1, pc, #4	; (adr r1, 8004374 <_printf_i+0x40>)
 8004370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004374:	080043cd 	.word	0x080043cd
 8004378:	080043e1 	.word	0x080043e1
 800437c:	0800435d 	.word	0x0800435d
 8004380:	0800435d 	.word	0x0800435d
 8004384:	0800435d 	.word	0x0800435d
 8004388:	0800435d 	.word	0x0800435d
 800438c:	080043e1 	.word	0x080043e1
 8004390:	0800435d 	.word	0x0800435d
 8004394:	0800435d 	.word	0x0800435d
 8004398:	0800435d 	.word	0x0800435d
 800439c:	0800435d 	.word	0x0800435d
 80043a0:	080044ed 	.word	0x080044ed
 80043a4:	08004411 	.word	0x08004411
 80043a8:	080044cf 	.word	0x080044cf
 80043ac:	0800435d 	.word	0x0800435d
 80043b0:	0800435d 	.word	0x0800435d
 80043b4:	0800450f 	.word	0x0800450f
 80043b8:	0800435d 	.word	0x0800435d
 80043bc:	08004411 	.word	0x08004411
 80043c0:	0800435d 	.word	0x0800435d
 80043c4:	0800435d 	.word	0x0800435d
 80043c8:	080044d7 	.word	0x080044d7
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	1d1a      	adds	r2, r3, #4
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	602a      	str	r2, [r5, #0]
 80043d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043dc:	2301      	movs	r3, #1
 80043de:	e0a3      	b.n	8004528 <_printf_i+0x1f4>
 80043e0:	6820      	ldr	r0, [r4, #0]
 80043e2:	6829      	ldr	r1, [r5, #0]
 80043e4:	0606      	lsls	r6, r0, #24
 80043e6:	f101 0304 	add.w	r3, r1, #4
 80043ea:	d50a      	bpl.n	8004402 <_printf_i+0xce>
 80043ec:	680e      	ldr	r6, [r1, #0]
 80043ee:	602b      	str	r3, [r5, #0]
 80043f0:	2e00      	cmp	r6, #0
 80043f2:	da03      	bge.n	80043fc <_printf_i+0xc8>
 80043f4:	232d      	movs	r3, #45	; 0x2d
 80043f6:	4276      	negs	r6, r6
 80043f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043fc:	485e      	ldr	r0, [pc, #376]	; (8004578 <_printf_i+0x244>)
 80043fe:	230a      	movs	r3, #10
 8004400:	e019      	b.n	8004436 <_printf_i+0x102>
 8004402:	680e      	ldr	r6, [r1, #0]
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	f010 0f40 	tst.w	r0, #64	; 0x40
 800440a:	bf18      	it	ne
 800440c:	b236      	sxthne	r6, r6
 800440e:	e7ef      	b.n	80043f0 <_printf_i+0xbc>
 8004410:	682b      	ldr	r3, [r5, #0]
 8004412:	6820      	ldr	r0, [r4, #0]
 8004414:	1d19      	adds	r1, r3, #4
 8004416:	6029      	str	r1, [r5, #0]
 8004418:	0601      	lsls	r1, r0, #24
 800441a:	d501      	bpl.n	8004420 <_printf_i+0xec>
 800441c:	681e      	ldr	r6, [r3, #0]
 800441e:	e002      	b.n	8004426 <_printf_i+0xf2>
 8004420:	0646      	lsls	r6, r0, #25
 8004422:	d5fb      	bpl.n	800441c <_printf_i+0xe8>
 8004424:	881e      	ldrh	r6, [r3, #0]
 8004426:	4854      	ldr	r0, [pc, #336]	; (8004578 <_printf_i+0x244>)
 8004428:	2f6f      	cmp	r7, #111	; 0x6f
 800442a:	bf0c      	ite	eq
 800442c:	2308      	moveq	r3, #8
 800442e:	230a      	movne	r3, #10
 8004430:	2100      	movs	r1, #0
 8004432:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004436:	6865      	ldr	r5, [r4, #4]
 8004438:	60a5      	str	r5, [r4, #8]
 800443a:	2d00      	cmp	r5, #0
 800443c:	bfa2      	ittt	ge
 800443e:	6821      	ldrge	r1, [r4, #0]
 8004440:	f021 0104 	bicge.w	r1, r1, #4
 8004444:	6021      	strge	r1, [r4, #0]
 8004446:	b90e      	cbnz	r6, 800444c <_printf_i+0x118>
 8004448:	2d00      	cmp	r5, #0
 800444a:	d04d      	beq.n	80044e8 <_printf_i+0x1b4>
 800444c:	4615      	mov	r5, r2
 800444e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004452:	fb03 6711 	mls	r7, r3, r1, r6
 8004456:	5dc7      	ldrb	r7, [r0, r7]
 8004458:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800445c:	4637      	mov	r7, r6
 800445e:	42bb      	cmp	r3, r7
 8004460:	460e      	mov	r6, r1
 8004462:	d9f4      	bls.n	800444e <_printf_i+0x11a>
 8004464:	2b08      	cmp	r3, #8
 8004466:	d10b      	bne.n	8004480 <_printf_i+0x14c>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	07de      	lsls	r6, r3, #31
 800446c:	d508      	bpl.n	8004480 <_printf_i+0x14c>
 800446e:	6923      	ldr	r3, [r4, #16]
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	4299      	cmp	r1, r3
 8004474:	bfde      	ittt	le
 8004476:	2330      	movle	r3, #48	; 0x30
 8004478:	f805 3c01 	strble.w	r3, [r5, #-1]
 800447c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004480:	1b52      	subs	r2, r2, r5
 8004482:	6122      	str	r2, [r4, #16]
 8004484:	f8cd a000 	str.w	sl, [sp]
 8004488:	464b      	mov	r3, r9
 800448a:	aa03      	add	r2, sp, #12
 800448c:	4621      	mov	r1, r4
 800448e:	4640      	mov	r0, r8
 8004490:	f7ff fee2 	bl	8004258 <_printf_common>
 8004494:	3001      	adds	r0, #1
 8004496:	d14c      	bne.n	8004532 <_printf_i+0x1fe>
 8004498:	f04f 30ff 	mov.w	r0, #4294967295
 800449c:	b004      	add	sp, #16
 800449e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a2:	4835      	ldr	r0, [pc, #212]	; (8004578 <_printf_i+0x244>)
 80044a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044a8:	6829      	ldr	r1, [r5, #0]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80044b0:	6029      	str	r1, [r5, #0]
 80044b2:	061d      	lsls	r5, r3, #24
 80044b4:	d514      	bpl.n	80044e0 <_printf_i+0x1ac>
 80044b6:	07df      	lsls	r7, r3, #31
 80044b8:	bf44      	itt	mi
 80044ba:	f043 0320 	orrmi.w	r3, r3, #32
 80044be:	6023      	strmi	r3, [r4, #0]
 80044c0:	b91e      	cbnz	r6, 80044ca <_printf_i+0x196>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	f023 0320 	bic.w	r3, r3, #32
 80044c8:	6023      	str	r3, [r4, #0]
 80044ca:	2310      	movs	r3, #16
 80044cc:	e7b0      	b.n	8004430 <_printf_i+0xfc>
 80044ce:	6823      	ldr	r3, [r4, #0]
 80044d0:	f043 0320 	orr.w	r3, r3, #32
 80044d4:	6023      	str	r3, [r4, #0]
 80044d6:	2378      	movs	r3, #120	; 0x78
 80044d8:	4828      	ldr	r0, [pc, #160]	; (800457c <_printf_i+0x248>)
 80044da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044de:	e7e3      	b.n	80044a8 <_printf_i+0x174>
 80044e0:	0659      	lsls	r1, r3, #25
 80044e2:	bf48      	it	mi
 80044e4:	b2b6      	uxthmi	r6, r6
 80044e6:	e7e6      	b.n	80044b6 <_printf_i+0x182>
 80044e8:	4615      	mov	r5, r2
 80044ea:	e7bb      	b.n	8004464 <_printf_i+0x130>
 80044ec:	682b      	ldr	r3, [r5, #0]
 80044ee:	6826      	ldr	r6, [r4, #0]
 80044f0:	6961      	ldr	r1, [r4, #20]
 80044f2:	1d18      	adds	r0, r3, #4
 80044f4:	6028      	str	r0, [r5, #0]
 80044f6:	0635      	lsls	r5, r6, #24
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	d501      	bpl.n	8004500 <_printf_i+0x1cc>
 80044fc:	6019      	str	r1, [r3, #0]
 80044fe:	e002      	b.n	8004506 <_printf_i+0x1d2>
 8004500:	0670      	lsls	r0, r6, #25
 8004502:	d5fb      	bpl.n	80044fc <_printf_i+0x1c8>
 8004504:	8019      	strh	r1, [r3, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	6123      	str	r3, [r4, #16]
 800450a:	4615      	mov	r5, r2
 800450c:	e7ba      	b.n	8004484 <_printf_i+0x150>
 800450e:	682b      	ldr	r3, [r5, #0]
 8004510:	1d1a      	adds	r2, r3, #4
 8004512:	602a      	str	r2, [r5, #0]
 8004514:	681d      	ldr	r5, [r3, #0]
 8004516:	6862      	ldr	r2, [r4, #4]
 8004518:	2100      	movs	r1, #0
 800451a:	4628      	mov	r0, r5
 800451c:	f7fb fe60 	bl	80001e0 <memchr>
 8004520:	b108      	cbz	r0, 8004526 <_printf_i+0x1f2>
 8004522:	1b40      	subs	r0, r0, r5
 8004524:	6060      	str	r0, [r4, #4]
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	6123      	str	r3, [r4, #16]
 800452a:	2300      	movs	r3, #0
 800452c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004530:	e7a8      	b.n	8004484 <_printf_i+0x150>
 8004532:	6923      	ldr	r3, [r4, #16]
 8004534:	462a      	mov	r2, r5
 8004536:	4649      	mov	r1, r9
 8004538:	4640      	mov	r0, r8
 800453a:	47d0      	blx	sl
 800453c:	3001      	adds	r0, #1
 800453e:	d0ab      	beq.n	8004498 <_printf_i+0x164>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	079b      	lsls	r3, r3, #30
 8004544:	d413      	bmi.n	800456e <_printf_i+0x23a>
 8004546:	68e0      	ldr	r0, [r4, #12]
 8004548:	9b03      	ldr	r3, [sp, #12]
 800454a:	4298      	cmp	r0, r3
 800454c:	bfb8      	it	lt
 800454e:	4618      	movlt	r0, r3
 8004550:	e7a4      	b.n	800449c <_printf_i+0x168>
 8004552:	2301      	movs	r3, #1
 8004554:	4632      	mov	r2, r6
 8004556:	4649      	mov	r1, r9
 8004558:	4640      	mov	r0, r8
 800455a:	47d0      	blx	sl
 800455c:	3001      	adds	r0, #1
 800455e:	d09b      	beq.n	8004498 <_printf_i+0x164>
 8004560:	3501      	adds	r5, #1
 8004562:	68e3      	ldr	r3, [r4, #12]
 8004564:	9903      	ldr	r1, [sp, #12]
 8004566:	1a5b      	subs	r3, r3, r1
 8004568:	42ab      	cmp	r3, r5
 800456a:	dcf2      	bgt.n	8004552 <_printf_i+0x21e>
 800456c:	e7eb      	b.n	8004546 <_printf_i+0x212>
 800456e:	2500      	movs	r5, #0
 8004570:	f104 0619 	add.w	r6, r4, #25
 8004574:	e7f5      	b.n	8004562 <_printf_i+0x22e>
 8004576:	bf00      	nop
 8004578:	08004cc5 	.word	0x08004cc5
 800457c:	08004cd6 	.word	0x08004cd6

08004580 <_sbrk_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d06      	ldr	r5, [pc, #24]	; (800459c <_sbrk_r+0x1c>)
 8004584:	2300      	movs	r3, #0
 8004586:	4604      	mov	r4, r0
 8004588:	4608      	mov	r0, r1
 800458a:	602b      	str	r3, [r5, #0]
 800458c:	f7fc fad0 	bl	8000b30 <_sbrk>
 8004590:	1c43      	adds	r3, r0, #1
 8004592:	d102      	bne.n	800459a <_sbrk_r+0x1a>
 8004594:	682b      	ldr	r3, [r5, #0]
 8004596:	b103      	cbz	r3, 800459a <_sbrk_r+0x1a>
 8004598:	6023      	str	r3, [r4, #0]
 800459a:	bd38      	pop	{r3, r4, r5, pc}
 800459c:	20000180 	.word	0x20000180

080045a0 <__sread>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	460c      	mov	r4, r1
 80045a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045a8:	f000 fab2 	bl	8004b10 <_read_r>
 80045ac:	2800      	cmp	r0, #0
 80045ae:	bfab      	itete	ge
 80045b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045b2:	89a3      	ldrhlt	r3, [r4, #12]
 80045b4:	181b      	addge	r3, r3, r0
 80045b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045ba:	bfac      	ite	ge
 80045bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80045be:	81a3      	strhlt	r3, [r4, #12]
 80045c0:	bd10      	pop	{r4, pc}

080045c2 <__swrite>:
 80045c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	461f      	mov	r7, r3
 80045c8:	898b      	ldrh	r3, [r1, #12]
 80045ca:	05db      	lsls	r3, r3, #23
 80045cc:	4605      	mov	r5, r0
 80045ce:	460c      	mov	r4, r1
 80045d0:	4616      	mov	r6, r2
 80045d2:	d505      	bpl.n	80045e0 <__swrite+0x1e>
 80045d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d8:	2302      	movs	r3, #2
 80045da:	2200      	movs	r2, #0
 80045dc:	f000 f9c8 	bl	8004970 <_lseek_r>
 80045e0:	89a3      	ldrh	r3, [r4, #12]
 80045e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
 80045f0:	4628      	mov	r0, r5
 80045f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045f6:	f000 b869 	b.w	80046cc <_write_r>

080045fa <__sseek>:
 80045fa:	b510      	push	{r4, lr}
 80045fc:	460c      	mov	r4, r1
 80045fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004602:	f000 f9b5 	bl	8004970 <_lseek_r>
 8004606:	1c43      	adds	r3, r0, #1
 8004608:	89a3      	ldrh	r3, [r4, #12]
 800460a:	bf15      	itete	ne
 800460c:	6560      	strne	r0, [r4, #84]	; 0x54
 800460e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004612:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004616:	81a3      	strheq	r3, [r4, #12]
 8004618:	bf18      	it	ne
 800461a:	81a3      	strhne	r3, [r4, #12]
 800461c:	bd10      	pop	{r4, pc}

0800461e <__sclose>:
 800461e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004622:	f000 b8d3 	b.w	80047cc <_close_r>
	...

08004628 <__swbuf_r>:
 8004628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800462a:	460e      	mov	r6, r1
 800462c:	4614      	mov	r4, r2
 800462e:	4605      	mov	r5, r0
 8004630:	b118      	cbz	r0, 800463a <__swbuf_r+0x12>
 8004632:	6983      	ldr	r3, [r0, #24]
 8004634:	b90b      	cbnz	r3, 800463a <__swbuf_r+0x12>
 8004636:	f7ff fb81 	bl	8003d3c <__sinit>
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <__swbuf_r+0x98>)
 800463c:	429c      	cmp	r4, r3
 800463e:	d12b      	bne.n	8004698 <__swbuf_r+0x70>
 8004640:	686c      	ldr	r4, [r5, #4]
 8004642:	69a3      	ldr	r3, [r4, #24]
 8004644:	60a3      	str	r3, [r4, #8]
 8004646:	89a3      	ldrh	r3, [r4, #12]
 8004648:	071a      	lsls	r2, r3, #28
 800464a:	d52f      	bpl.n	80046ac <__swbuf_r+0x84>
 800464c:	6923      	ldr	r3, [r4, #16]
 800464e:	b36b      	cbz	r3, 80046ac <__swbuf_r+0x84>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	6820      	ldr	r0, [r4, #0]
 8004654:	1ac0      	subs	r0, r0, r3
 8004656:	6963      	ldr	r3, [r4, #20]
 8004658:	b2f6      	uxtb	r6, r6
 800465a:	4283      	cmp	r3, r0
 800465c:	4637      	mov	r7, r6
 800465e:	dc04      	bgt.n	800466a <__swbuf_r+0x42>
 8004660:	4621      	mov	r1, r4
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f948 	bl	80048f8 <_fflush_r>
 8004668:	bb30      	cbnz	r0, 80046b8 <__swbuf_r+0x90>
 800466a:	68a3      	ldr	r3, [r4, #8]
 800466c:	3b01      	subs	r3, #1
 800466e:	60a3      	str	r3, [r4, #8]
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	6022      	str	r2, [r4, #0]
 8004676:	701e      	strb	r6, [r3, #0]
 8004678:	6963      	ldr	r3, [r4, #20]
 800467a:	3001      	adds	r0, #1
 800467c:	4283      	cmp	r3, r0
 800467e:	d004      	beq.n	800468a <__swbuf_r+0x62>
 8004680:	89a3      	ldrh	r3, [r4, #12]
 8004682:	07db      	lsls	r3, r3, #31
 8004684:	d506      	bpl.n	8004694 <__swbuf_r+0x6c>
 8004686:	2e0a      	cmp	r6, #10
 8004688:	d104      	bne.n	8004694 <__swbuf_r+0x6c>
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f000 f933 	bl	80048f8 <_fflush_r>
 8004692:	b988      	cbnz	r0, 80046b8 <__swbuf_r+0x90>
 8004694:	4638      	mov	r0, r7
 8004696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <__swbuf_r+0x9c>)
 800469a:	429c      	cmp	r4, r3
 800469c:	d101      	bne.n	80046a2 <__swbuf_r+0x7a>
 800469e:	68ac      	ldr	r4, [r5, #8]
 80046a0:	e7cf      	b.n	8004642 <__swbuf_r+0x1a>
 80046a2:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <__swbuf_r+0xa0>)
 80046a4:	429c      	cmp	r4, r3
 80046a6:	bf08      	it	eq
 80046a8:	68ec      	ldreq	r4, [r5, #12]
 80046aa:	e7ca      	b.n	8004642 <__swbuf_r+0x1a>
 80046ac:	4621      	mov	r1, r4
 80046ae:	4628      	mov	r0, r5
 80046b0:	f000 f81e 	bl	80046f0 <__swsetup_r>
 80046b4:	2800      	cmp	r0, #0
 80046b6:	d0cb      	beq.n	8004650 <__swbuf_r+0x28>
 80046b8:	f04f 37ff 	mov.w	r7, #4294967295
 80046bc:	e7ea      	b.n	8004694 <__swbuf_r+0x6c>
 80046be:	bf00      	nop
 80046c0:	08004c74 	.word	0x08004c74
 80046c4:	08004c94 	.word	0x08004c94
 80046c8:	08004c54 	.word	0x08004c54

080046cc <_write_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	4d07      	ldr	r5, [pc, #28]	; (80046ec <_write_r+0x20>)
 80046d0:	4604      	mov	r4, r0
 80046d2:	4608      	mov	r0, r1
 80046d4:	4611      	mov	r1, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	602a      	str	r2, [r5, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	f7fc f9d7 	bl	8000a8e <_write>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_write_r+0x1e>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_write_r+0x1e>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	20000180 	.word	0x20000180

080046f0 <__swsetup_r>:
 80046f0:	4b32      	ldr	r3, [pc, #200]	; (80047bc <__swsetup_r+0xcc>)
 80046f2:	b570      	push	{r4, r5, r6, lr}
 80046f4:	681d      	ldr	r5, [r3, #0]
 80046f6:	4606      	mov	r6, r0
 80046f8:	460c      	mov	r4, r1
 80046fa:	b125      	cbz	r5, 8004706 <__swsetup_r+0x16>
 80046fc:	69ab      	ldr	r3, [r5, #24]
 80046fe:	b913      	cbnz	r3, 8004706 <__swsetup_r+0x16>
 8004700:	4628      	mov	r0, r5
 8004702:	f7ff fb1b 	bl	8003d3c <__sinit>
 8004706:	4b2e      	ldr	r3, [pc, #184]	; (80047c0 <__swsetup_r+0xd0>)
 8004708:	429c      	cmp	r4, r3
 800470a:	d10f      	bne.n	800472c <__swsetup_r+0x3c>
 800470c:	686c      	ldr	r4, [r5, #4]
 800470e:	89a3      	ldrh	r3, [r4, #12]
 8004710:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004714:	0719      	lsls	r1, r3, #28
 8004716:	d42c      	bmi.n	8004772 <__swsetup_r+0x82>
 8004718:	06dd      	lsls	r5, r3, #27
 800471a:	d411      	bmi.n	8004740 <__swsetup_r+0x50>
 800471c:	2309      	movs	r3, #9
 800471e:	6033      	str	r3, [r6, #0]
 8004720:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004724:	81a3      	strh	r3, [r4, #12]
 8004726:	f04f 30ff 	mov.w	r0, #4294967295
 800472a:	e03e      	b.n	80047aa <__swsetup_r+0xba>
 800472c:	4b25      	ldr	r3, [pc, #148]	; (80047c4 <__swsetup_r+0xd4>)
 800472e:	429c      	cmp	r4, r3
 8004730:	d101      	bne.n	8004736 <__swsetup_r+0x46>
 8004732:	68ac      	ldr	r4, [r5, #8]
 8004734:	e7eb      	b.n	800470e <__swsetup_r+0x1e>
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <__swsetup_r+0xd8>)
 8004738:	429c      	cmp	r4, r3
 800473a:	bf08      	it	eq
 800473c:	68ec      	ldreq	r4, [r5, #12]
 800473e:	e7e6      	b.n	800470e <__swsetup_r+0x1e>
 8004740:	0758      	lsls	r0, r3, #29
 8004742:	d512      	bpl.n	800476a <__swsetup_r+0x7a>
 8004744:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004746:	b141      	cbz	r1, 800475a <__swsetup_r+0x6a>
 8004748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800474c:	4299      	cmp	r1, r3
 800474e:	d002      	beq.n	8004756 <__swsetup_r+0x66>
 8004750:	4630      	mov	r0, r6
 8004752:	f000 f991 	bl	8004a78 <_free_r>
 8004756:	2300      	movs	r3, #0
 8004758:	6363      	str	r3, [r4, #52]	; 0x34
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004760:	81a3      	strh	r3, [r4, #12]
 8004762:	2300      	movs	r3, #0
 8004764:	6063      	str	r3, [r4, #4]
 8004766:	6923      	ldr	r3, [r4, #16]
 8004768:	6023      	str	r3, [r4, #0]
 800476a:	89a3      	ldrh	r3, [r4, #12]
 800476c:	f043 0308 	orr.w	r3, r3, #8
 8004770:	81a3      	strh	r3, [r4, #12]
 8004772:	6923      	ldr	r3, [r4, #16]
 8004774:	b94b      	cbnz	r3, 800478a <__swsetup_r+0x9a>
 8004776:	89a3      	ldrh	r3, [r4, #12]
 8004778:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800477c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004780:	d003      	beq.n	800478a <__swsetup_r+0x9a>
 8004782:	4621      	mov	r1, r4
 8004784:	4630      	mov	r0, r6
 8004786:	f000 f92b 	bl	80049e0 <__smakebuf_r>
 800478a:	89a0      	ldrh	r0, [r4, #12]
 800478c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004790:	f010 0301 	ands.w	r3, r0, #1
 8004794:	d00a      	beq.n	80047ac <__swsetup_r+0xbc>
 8004796:	2300      	movs	r3, #0
 8004798:	60a3      	str	r3, [r4, #8]
 800479a:	6963      	ldr	r3, [r4, #20]
 800479c:	425b      	negs	r3, r3
 800479e:	61a3      	str	r3, [r4, #24]
 80047a0:	6923      	ldr	r3, [r4, #16]
 80047a2:	b943      	cbnz	r3, 80047b6 <__swsetup_r+0xc6>
 80047a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80047a8:	d1ba      	bne.n	8004720 <__swsetup_r+0x30>
 80047aa:	bd70      	pop	{r4, r5, r6, pc}
 80047ac:	0781      	lsls	r1, r0, #30
 80047ae:	bf58      	it	pl
 80047b0:	6963      	ldrpl	r3, [r4, #20]
 80047b2:	60a3      	str	r3, [r4, #8]
 80047b4:	e7f4      	b.n	80047a0 <__swsetup_r+0xb0>
 80047b6:	2000      	movs	r0, #0
 80047b8:	e7f7      	b.n	80047aa <__swsetup_r+0xba>
 80047ba:	bf00      	nop
 80047bc:	2000000c 	.word	0x2000000c
 80047c0:	08004c74 	.word	0x08004c74
 80047c4:	08004c94 	.word	0x08004c94
 80047c8:	08004c54 	.word	0x08004c54

080047cc <_close_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d06      	ldr	r5, [pc, #24]	; (80047e8 <_close_r+0x1c>)
 80047d0:	2300      	movs	r3, #0
 80047d2:	4604      	mov	r4, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	602b      	str	r3, [r5, #0]
 80047d8:	f7fc f975 	bl	8000ac6 <_close>
 80047dc:	1c43      	adds	r3, r0, #1
 80047de:	d102      	bne.n	80047e6 <_close_r+0x1a>
 80047e0:	682b      	ldr	r3, [r5, #0]
 80047e2:	b103      	cbz	r3, 80047e6 <_close_r+0x1a>
 80047e4:	6023      	str	r3, [r4, #0]
 80047e6:	bd38      	pop	{r3, r4, r5, pc}
 80047e8:	20000180 	.word	0x20000180

080047ec <__sflush_r>:
 80047ec:	898a      	ldrh	r2, [r1, #12]
 80047ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f2:	4605      	mov	r5, r0
 80047f4:	0710      	lsls	r0, r2, #28
 80047f6:	460c      	mov	r4, r1
 80047f8:	d458      	bmi.n	80048ac <__sflush_r+0xc0>
 80047fa:	684b      	ldr	r3, [r1, #4]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	dc05      	bgt.n	800480c <__sflush_r+0x20>
 8004800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004802:	2b00      	cmp	r3, #0
 8004804:	dc02      	bgt.n	800480c <__sflush_r+0x20>
 8004806:	2000      	movs	r0, #0
 8004808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800480c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800480e:	2e00      	cmp	r6, #0
 8004810:	d0f9      	beq.n	8004806 <__sflush_r+0x1a>
 8004812:	2300      	movs	r3, #0
 8004814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004818:	682f      	ldr	r7, [r5, #0]
 800481a:	602b      	str	r3, [r5, #0]
 800481c:	d032      	beq.n	8004884 <__sflush_r+0x98>
 800481e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004820:	89a3      	ldrh	r3, [r4, #12]
 8004822:	075a      	lsls	r2, r3, #29
 8004824:	d505      	bpl.n	8004832 <__sflush_r+0x46>
 8004826:	6863      	ldr	r3, [r4, #4]
 8004828:	1ac0      	subs	r0, r0, r3
 800482a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800482c:	b10b      	cbz	r3, 8004832 <__sflush_r+0x46>
 800482e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004830:	1ac0      	subs	r0, r0, r3
 8004832:	2300      	movs	r3, #0
 8004834:	4602      	mov	r2, r0
 8004836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004838:	6a21      	ldr	r1, [r4, #32]
 800483a:	4628      	mov	r0, r5
 800483c:	47b0      	blx	r6
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	d106      	bne.n	8004852 <__sflush_r+0x66>
 8004844:	6829      	ldr	r1, [r5, #0]
 8004846:	291d      	cmp	r1, #29
 8004848:	d82c      	bhi.n	80048a4 <__sflush_r+0xb8>
 800484a:	4a2a      	ldr	r2, [pc, #168]	; (80048f4 <__sflush_r+0x108>)
 800484c:	40ca      	lsrs	r2, r1
 800484e:	07d6      	lsls	r6, r2, #31
 8004850:	d528      	bpl.n	80048a4 <__sflush_r+0xb8>
 8004852:	2200      	movs	r2, #0
 8004854:	6062      	str	r2, [r4, #4]
 8004856:	04d9      	lsls	r1, r3, #19
 8004858:	6922      	ldr	r2, [r4, #16]
 800485a:	6022      	str	r2, [r4, #0]
 800485c:	d504      	bpl.n	8004868 <__sflush_r+0x7c>
 800485e:	1c42      	adds	r2, r0, #1
 8004860:	d101      	bne.n	8004866 <__sflush_r+0x7a>
 8004862:	682b      	ldr	r3, [r5, #0]
 8004864:	b903      	cbnz	r3, 8004868 <__sflush_r+0x7c>
 8004866:	6560      	str	r0, [r4, #84]	; 0x54
 8004868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800486a:	602f      	str	r7, [r5, #0]
 800486c:	2900      	cmp	r1, #0
 800486e:	d0ca      	beq.n	8004806 <__sflush_r+0x1a>
 8004870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004874:	4299      	cmp	r1, r3
 8004876:	d002      	beq.n	800487e <__sflush_r+0x92>
 8004878:	4628      	mov	r0, r5
 800487a:	f000 f8fd 	bl	8004a78 <_free_r>
 800487e:	2000      	movs	r0, #0
 8004880:	6360      	str	r0, [r4, #52]	; 0x34
 8004882:	e7c1      	b.n	8004808 <__sflush_r+0x1c>
 8004884:	6a21      	ldr	r1, [r4, #32]
 8004886:	2301      	movs	r3, #1
 8004888:	4628      	mov	r0, r5
 800488a:	47b0      	blx	r6
 800488c:	1c41      	adds	r1, r0, #1
 800488e:	d1c7      	bne.n	8004820 <__sflush_r+0x34>
 8004890:	682b      	ldr	r3, [r5, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0c4      	beq.n	8004820 <__sflush_r+0x34>
 8004896:	2b1d      	cmp	r3, #29
 8004898:	d001      	beq.n	800489e <__sflush_r+0xb2>
 800489a:	2b16      	cmp	r3, #22
 800489c:	d101      	bne.n	80048a2 <__sflush_r+0xb6>
 800489e:	602f      	str	r7, [r5, #0]
 80048a0:	e7b1      	b.n	8004806 <__sflush_r+0x1a>
 80048a2:	89a3      	ldrh	r3, [r4, #12]
 80048a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a8:	81a3      	strh	r3, [r4, #12]
 80048aa:	e7ad      	b.n	8004808 <__sflush_r+0x1c>
 80048ac:	690f      	ldr	r7, [r1, #16]
 80048ae:	2f00      	cmp	r7, #0
 80048b0:	d0a9      	beq.n	8004806 <__sflush_r+0x1a>
 80048b2:	0793      	lsls	r3, r2, #30
 80048b4:	680e      	ldr	r6, [r1, #0]
 80048b6:	bf08      	it	eq
 80048b8:	694b      	ldreq	r3, [r1, #20]
 80048ba:	600f      	str	r7, [r1, #0]
 80048bc:	bf18      	it	ne
 80048be:	2300      	movne	r3, #0
 80048c0:	eba6 0807 	sub.w	r8, r6, r7
 80048c4:	608b      	str	r3, [r1, #8]
 80048c6:	f1b8 0f00 	cmp.w	r8, #0
 80048ca:	dd9c      	ble.n	8004806 <__sflush_r+0x1a>
 80048cc:	6a21      	ldr	r1, [r4, #32]
 80048ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048d0:	4643      	mov	r3, r8
 80048d2:	463a      	mov	r2, r7
 80048d4:	4628      	mov	r0, r5
 80048d6:	47b0      	blx	r6
 80048d8:	2800      	cmp	r0, #0
 80048da:	dc06      	bgt.n	80048ea <__sflush_r+0xfe>
 80048dc:	89a3      	ldrh	r3, [r4, #12]
 80048de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048e2:	81a3      	strh	r3, [r4, #12]
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295
 80048e8:	e78e      	b.n	8004808 <__sflush_r+0x1c>
 80048ea:	4407      	add	r7, r0
 80048ec:	eba8 0800 	sub.w	r8, r8, r0
 80048f0:	e7e9      	b.n	80048c6 <__sflush_r+0xda>
 80048f2:	bf00      	nop
 80048f4:	20400001 	.word	0x20400001

080048f8 <_fflush_r>:
 80048f8:	b538      	push	{r3, r4, r5, lr}
 80048fa:	690b      	ldr	r3, [r1, #16]
 80048fc:	4605      	mov	r5, r0
 80048fe:	460c      	mov	r4, r1
 8004900:	b913      	cbnz	r3, 8004908 <_fflush_r+0x10>
 8004902:	2500      	movs	r5, #0
 8004904:	4628      	mov	r0, r5
 8004906:	bd38      	pop	{r3, r4, r5, pc}
 8004908:	b118      	cbz	r0, 8004912 <_fflush_r+0x1a>
 800490a:	6983      	ldr	r3, [r0, #24]
 800490c:	b90b      	cbnz	r3, 8004912 <_fflush_r+0x1a>
 800490e:	f7ff fa15 	bl	8003d3c <__sinit>
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <_fflush_r+0x6c>)
 8004914:	429c      	cmp	r4, r3
 8004916:	d11b      	bne.n	8004950 <_fflush_r+0x58>
 8004918:	686c      	ldr	r4, [r5, #4]
 800491a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d0ef      	beq.n	8004902 <_fflush_r+0xa>
 8004922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004924:	07d0      	lsls	r0, r2, #31
 8004926:	d404      	bmi.n	8004932 <_fflush_r+0x3a>
 8004928:	0599      	lsls	r1, r3, #22
 800492a:	d402      	bmi.n	8004932 <_fflush_r+0x3a>
 800492c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800492e:	f7ff faa3 	bl	8003e78 <__retarget_lock_acquire_recursive>
 8004932:	4628      	mov	r0, r5
 8004934:	4621      	mov	r1, r4
 8004936:	f7ff ff59 	bl	80047ec <__sflush_r>
 800493a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800493c:	07da      	lsls	r2, r3, #31
 800493e:	4605      	mov	r5, r0
 8004940:	d4e0      	bmi.n	8004904 <_fflush_r+0xc>
 8004942:	89a3      	ldrh	r3, [r4, #12]
 8004944:	059b      	lsls	r3, r3, #22
 8004946:	d4dd      	bmi.n	8004904 <_fflush_r+0xc>
 8004948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800494a:	f7ff fa96 	bl	8003e7a <__retarget_lock_release_recursive>
 800494e:	e7d9      	b.n	8004904 <_fflush_r+0xc>
 8004950:	4b05      	ldr	r3, [pc, #20]	; (8004968 <_fflush_r+0x70>)
 8004952:	429c      	cmp	r4, r3
 8004954:	d101      	bne.n	800495a <_fflush_r+0x62>
 8004956:	68ac      	ldr	r4, [r5, #8]
 8004958:	e7df      	b.n	800491a <_fflush_r+0x22>
 800495a:	4b04      	ldr	r3, [pc, #16]	; (800496c <_fflush_r+0x74>)
 800495c:	429c      	cmp	r4, r3
 800495e:	bf08      	it	eq
 8004960:	68ec      	ldreq	r4, [r5, #12]
 8004962:	e7da      	b.n	800491a <_fflush_r+0x22>
 8004964:	08004c74 	.word	0x08004c74
 8004968:	08004c94 	.word	0x08004c94
 800496c:	08004c54 	.word	0x08004c54

08004970 <_lseek_r>:
 8004970:	b538      	push	{r3, r4, r5, lr}
 8004972:	4d07      	ldr	r5, [pc, #28]	; (8004990 <_lseek_r+0x20>)
 8004974:	4604      	mov	r4, r0
 8004976:	4608      	mov	r0, r1
 8004978:	4611      	mov	r1, r2
 800497a:	2200      	movs	r2, #0
 800497c:	602a      	str	r2, [r5, #0]
 800497e:	461a      	mov	r2, r3
 8004980:	f7fc f8c8 	bl	8000b14 <_lseek>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_lseek_r+0x1e>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_lseek_r+0x1e>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	20000180 	.word	0x20000180

08004994 <__swhatbuf_r>:
 8004994:	b570      	push	{r4, r5, r6, lr}
 8004996:	460e      	mov	r6, r1
 8004998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800499c:	2900      	cmp	r1, #0
 800499e:	b096      	sub	sp, #88	; 0x58
 80049a0:	4614      	mov	r4, r2
 80049a2:	461d      	mov	r5, r3
 80049a4:	da08      	bge.n	80049b8 <__swhatbuf_r+0x24>
 80049a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	602a      	str	r2, [r5, #0]
 80049ae:	061a      	lsls	r2, r3, #24
 80049b0:	d410      	bmi.n	80049d4 <__swhatbuf_r+0x40>
 80049b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049b6:	e00e      	b.n	80049d6 <__swhatbuf_r+0x42>
 80049b8:	466a      	mov	r2, sp
 80049ba:	f000 f8bb 	bl	8004b34 <_fstat_r>
 80049be:	2800      	cmp	r0, #0
 80049c0:	dbf1      	blt.n	80049a6 <__swhatbuf_r+0x12>
 80049c2:	9a01      	ldr	r2, [sp, #4]
 80049c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049cc:	425a      	negs	r2, r3
 80049ce:	415a      	adcs	r2, r3
 80049d0:	602a      	str	r2, [r5, #0]
 80049d2:	e7ee      	b.n	80049b2 <__swhatbuf_r+0x1e>
 80049d4:	2340      	movs	r3, #64	; 0x40
 80049d6:	2000      	movs	r0, #0
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	b016      	add	sp, #88	; 0x58
 80049dc:	bd70      	pop	{r4, r5, r6, pc}
	...

080049e0 <__smakebuf_r>:
 80049e0:	898b      	ldrh	r3, [r1, #12]
 80049e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049e4:	079d      	lsls	r5, r3, #30
 80049e6:	4606      	mov	r6, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	d507      	bpl.n	80049fc <__smakebuf_r+0x1c>
 80049ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	6123      	str	r3, [r4, #16]
 80049f4:	2301      	movs	r3, #1
 80049f6:	6163      	str	r3, [r4, #20]
 80049f8:	b002      	add	sp, #8
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	ab01      	add	r3, sp, #4
 80049fe:	466a      	mov	r2, sp
 8004a00:	f7ff ffc8 	bl	8004994 <__swhatbuf_r>
 8004a04:	9900      	ldr	r1, [sp, #0]
 8004a06:	4605      	mov	r5, r0
 8004a08:	4630      	mov	r0, r6
 8004a0a:	f7ff fa57 	bl	8003ebc <_malloc_r>
 8004a0e:	b948      	cbnz	r0, 8004a24 <__smakebuf_r+0x44>
 8004a10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a14:	059a      	lsls	r2, r3, #22
 8004a16:	d4ef      	bmi.n	80049f8 <__smakebuf_r+0x18>
 8004a18:	f023 0303 	bic.w	r3, r3, #3
 8004a1c:	f043 0302 	orr.w	r3, r3, #2
 8004a20:	81a3      	strh	r3, [r4, #12]
 8004a22:	e7e3      	b.n	80049ec <__smakebuf_r+0xc>
 8004a24:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <__smakebuf_r+0x7c>)
 8004a26:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	6020      	str	r0, [r4, #0]
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a30:	81a3      	strh	r3, [r4, #12]
 8004a32:	9b00      	ldr	r3, [sp, #0]
 8004a34:	6163      	str	r3, [r4, #20]
 8004a36:	9b01      	ldr	r3, [sp, #4]
 8004a38:	6120      	str	r0, [r4, #16]
 8004a3a:	b15b      	cbz	r3, 8004a54 <__smakebuf_r+0x74>
 8004a3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a40:	4630      	mov	r0, r6
 8004a42:	f000 f889 	bl	8004b58 <_isatty_r>
 8004a46:	b128      	cbz	r0, 8004a54 <__smakebuf_r+0x74>
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	f023 0303 	bic.w	r3, r3, #3
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	81a3      	strh	r3, [r4, #12]
 8004a54:	89a0      	ldrh	r0, [r4, #12]
 8004a56:	4305      	orrs	r5, r0
 8004a58:	81a5      	strh	r5, [r4, #12]
 8004a5a:	e7cd      	b.n	80049f8 <__smakebuf_r+0x18>
 8004a5c:	08003cd5 	.word	0x08003cd5

08004a60 <__malloc_lock>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__malloc_lock+0x8>)
 8004a62:	f7ff ba09 	b.w	8003e78 <__retarget_lock_acquire_recursive>
 8004a66:	bf00      	nop
 8004a68:	20000174 	.word	0x20000174

08004a6c <__malloc_unlock>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__malloc_unlock+0x8>)
 8004a6e:	f7ff ba04 	b.w	8003e7a <__retarget_lock_release_recursive>
 8004a72:	bf00      	nop
 8004a74:	20000174 	.word	0x20000174

08004a78 <_free_r>:
 8004a78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a7a:	2900      	cmp	r1, #0
 8004a7c:	d044      	beq.n	8004b08 <_free_r+0x90>
 8004a7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a82:	9001      	str	r0, [sp, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	f1a1 0404 	sub.w	r4, r1, #4
 8004a8a:	bfb8      	it	lt
 8004a8c:	18e4      	addlt	r4, r4, r3
 8004a8e:	f7ff ffe7 	bl	8004a60 <__malloc_lock>
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <_free_r+0x94>)
 8004a94:	9801      	ldr	r0, [sp, #4]
 8004a96:	6813      	ldr	r3, [r2, #0]
 8004a98:	b933      	cbnz	r3, 8004aa8 <_free_r+0x30>
 8004a9a:	6063      	str	r3, [r4, #4]
 8004a9c:	6014      	str	r4, [r2, #0]
 8004a9e:	b003      	add	sp, #12
 8004aa0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004aa4:	f7ff bfe2 	b.w	8004a6c <__malloc_unlock>
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	d908      	bls.n	8004abe <_free_r+0x46>
 8004aac:	6825      	ldr	r5, [r4, #0]
 8004aae:	1961      	adds	r1, r4, r5
 8004ab0:	428b      	cmp	r3, r1
 8004ab2:	bf01      	itttt	eq
 8004ab4:	6819      	ldreq	r1, [r3, #0]
 8004ab6:	685b      	ldreq	r3, [r3, #4]
 8004ab8:	1949      	addeq	r1, r1, r5
 8004aba:	6021      	streq	r1, [r4, #0]
 8004abc:	e7ed      	b.n	8004a9a <_free_r+0x22>
 8004abe:	461a      	mov	r2, r3
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	b10b      	cbz	r3, 8004ac8 <_free_r+0x50>
 8004ac4:	42a3      	cmp	r3, r4
 8004ac6:	d9fa      	bls.n	8004abe <_free_r+0x46>
 8004ac8:	6811      	ldr	r1, [r2, #0]
 8004aca:	1855      	adds	r5, r2, r1
 8004acc:	42a5      	cmp	r5, r4
 8004ace:	d10b      	bne.n	8004ae8 <_free_r+0x70>
 8004ad0:	6824      	ldr	r4, [r4, #0]
 8004ad2:	4421      	add	r1, r4
 8004ad4:	1854      	adds	r4, r2, r1
 8004ad6:	42a3      	cmp	r3, r4
 8004ad8:	6011      	str	r1, [r2, #0]
 8004ada:	d1e0      	bne.n	8004a9e <_free_r+0x26>
 8004adc:	681c      	ldr	r4, [r3, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	6053      	str	r3, [r2, #4]
 8004ae2:	4421      	add	r1, r4
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	e7da      	b.n	8004a9e <_free_r+0x26>
 8004ae8:	d902      	bls.n	8004af0 <_free_r+0x78>
 8004aea:	230c      	movs	r3, #12
 8004aec:	6003      	str	r3, [r0, #0]
 8004aee:	e7d6      	b.n	8004a9e <_free_r+0x26>
 8004af0:	6825      	ldr	r5, [r4, #0]
 8004af2:	1961      	adds	r1, r4, r5
 8004af4:	428b      	cmp	r3, r1
 8004af6:	bf04      	itt	eq
 8004af8:	6819      	ldreq	r1, [r3, #0]
 8004afa:	685b      	ldreq	r3, [r3, #4]
 8004afc:	6063      	str	r3, [r4, #4]
 8004afe:	bf04      	itt	eq
 8004b00:	1949      	addeq	r1, r1, r5
 8004b02:	6021      	streq	r1, [r4, #0]
 8004b04:	6054      	str	r4, [r2, #4]
 8004b06:	e7ca      	b.n	8004a9e <_free_r+0x26>
 8004b08:	b003      	add	sp, #12
 8004b0a:	bd30      	pop	{r4, r5, pc}
 8004b0c:	20000178 	.word	0x20000178

08004b10 <_read_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4d07      	ldr	r5, [pc, #28]	; (8004b30 <_read_r+0x20>)
 8004b14:	4604      	mov	r4, r0
 8004b16:	4608      	mov	r0, r1
 8004b18:	4611      	mov	r1, r2
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fb ff98 	bl	8000a54 <_read>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_read_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_read_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	20000180 	.word	0x20000180

08004b34 <_fstat_r>:
 8004b34:	b538      	push	{r3, r4, r5, lr}
 8004b36:	4d07      	ldr	r5, [pc, #28]	; (8004b54 <_fstat_r+0x20>)
 8004b38:	2300      	movs	r3, #0
 8004b3a:	4604      	mov	r4, r0
 8004b3c:	4608      	mov	r0, r1
 8004b3e:	4611      	mov	r1, r2
 8004b40:	602b      	str	r3, [r5, #0]
 8004b42:	f7fb ffcc 	bl	8000ade <_fstat>
 8004b46:	1c43      	adds	r3, r0, #1
 8004b48:	d102      	bne.n	8004b50 <_fstat_r+0x1c>
 8004b4a:	682b      	ldr	r3, [r5, #0]
 8004b4c:	b103      	cbz	r3, 8004b50 <_fstat_r+0x1c>
 8004b4e:	6023      	str	r3, [r4, #0]
 8004b50:	bd38      	pop	{r3, r4, r5, pc}
 8004b52:	bf00      	nop
 8004b54:	20000180 	.word	0x20000180

08004b58 <_isatty_r>:
 8004b58:	b538      	push	{r3, r4, r5, lr}
 8004b5a:	4d06      	ldr	r5, [pc, #24]	; (8004b74 <_isatty_r+0x1c>)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	4604      	mov	r4, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	602b      	str	r3, [r5, #0]
 8004b64:	f7fb ffcb 	bl	8000afe <_isatty>
 8004b68:	1c43      	adds	r3, r0, #1
 8004b6a:	d102      	bne.n	8004b72 <_isatty_r+0x1a>
 8004b6c:	682b      	ldr	r3, [r5, #0]
 8004b6e:	b103      	cbz	r3, 8004b72 <_isatty_r+0x1a>
 8004b70:	6023      	str	r3, [r4, #0]
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
 8004b74:	20000180 	.word	0x20000180

08004b78 <_init>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr

08004b84 <_fini>:
 8004b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b86:	bf00      	nop
 8004b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8a:	bc08      	pop	{r3}
 8004b8c:	469e      	mov	lr, r3
 8004b8e:	4770      	bx	lr
