
Spektrumsanalyse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ed80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800ef10  0800ef10  0001ef10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7a0  0800f7a0  000203f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7a0  0800f7a0  0001f7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7a8  0800f7a8  000203f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7a8  0800f7a8  0001f7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7ac  0800f7ac  0001f7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003f8  20000000  0800f7b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200003f8  0800fba8  000203f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800fba8  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ee7c  00000000  00000000  00020428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000041ed  00000000  00000000  0003f2a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a90  00000000  00000000  00043498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018b8  00000000  00000000  00044f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029202  00000000  00000000  000467e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022eb4  00000000  00000000  0006f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebcfe  00000000  00000000  00092896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017e594  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000827c  00000000  00000000  0017e5e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003f8 	.word	0x200003f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eef8 	.word	0x0800eef8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003fc 	.word	0x200003fc
 80001cc:	0800eef8 	.word	0x0800eef8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000eac:	b5b0      	push	{r4, r5, r7, lr}
 8000eae:	b088      	sub	sp, #32
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	777b      	strb	r3, [r7, #29]
 8000ebe:	e01b      	b.n	8000ef8 <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	77bb      	strb	r3, [r7, #30]
 8000ec4:	e012      	b.n	8000eec <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000ec6:	7fba      	ldrb	r2, [r7, #30]
 8000ec8:	7f7b      	ldrb	r3, [r7, #29]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	461a      	mov	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	1899      	adds	r1, r3, r2
 8000ed4:	7fba      	ldrb	r2, [r7, #30]
 8000ed6:	7f7b      	ldrb	r3, [r7, #29]
 8000ed8:	7808      	ldrb	r0, [r1, #0]
 8000eda:	4961      	ldr	r1, [pc, #388]	; (8001060 <AES_Encrypt+0x1b4>)
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	440a      	add	r2, r1
 8000ee0:	4413      	add	r3, r2
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000ee6:	7fbb      	ldrb	r3, [r7, #30]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	77bb      	strb	r3, [r7, #30]
 8000eec:	7fbb      	ldrb	r3, [r7, #30]
 8000eee:	2b03      	cmp	r3, #3
 8000ef0:	d9e9      	bls.n	8000ec6 <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 8000ef2:	7f7b      	ldrb	r3, [r7, #29]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	777b      	strb	r3, [r7, #29]
 8000ef8:	7f7b      	ldrb	r3, [r7, #29]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d9e0      	bls.n	8000ec0 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000efe:	2300      	movs	r3, #0
 8000f00:	77fb      	strb	r3, [r7, #31]
 8000f02:	e00b      	b.n	8000f1c <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 8000f04:	7ffb      	ldrb	r3, [r7, #31]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	441a      	add	r2, r3
 8000f0a:	7ffb      	ldrb	r3, [r7, #31]
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	3320      	adds	r3, #32
 8000f10:	443b      	add	r3, r7
 8000f12:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	77fb      	strb	r3, [r7, #31]
 8000f1c:	7ffb      	ldrb	r3, [r7, #31]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	d9f0      	bls.n	8000f04 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 8000f22:	f107 030c 	add.w	r3, r7, #12
 8000f26:	4618      	mov	r0, r3
 8000f28:	f000 f89c 	bl	8001064 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	773b      	strb	r3, [r7, #28]
 8000f30:	e038      	b.n	8000fa4 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	777b      	strb	r3, [r7, #29]
 8000f36:	e01f      	b.n	8000f78 <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000f38:	2300      	movs	r3, #0
 8000f3a:	77bb      	strb	r3, [r7, #30]
 8000f3c:	e016      	b.n	8000f6c <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000f3e:	7fba      	ldrb	r2, [r7, #30]
 8000f40:	7f7b      	ldrb	r3, [r7, #29]
 8000f42:	4947      	ldr	r1, [pc, #284]	; (8001060 <AES_Encrypt+0x1b4>)
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	440a      	add	r2, r1
 8000f48:	4413      	add	r3, r2
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	7fbd      	ldrb	r5, [r7, #30]
 8000f4e:	7f7c      	ldrb	r4, [r7, #29]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f000 f8bf 	bl	80010d4 <AES_Sub_Byte>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4a41      	ldr	r2, [pc, #260]	; (8001060 <AES_Encrypt+0x1b4>)
 8000f5c:	00ab      	lsls	r3, r5, #2
 8000f5e:	4413      	add	r3, r2
 8000f60:	4423      	add	r3, r4
 8000f62:	460a      	mov	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 8000f66:	7fbb      	ldrb	r3, [r7, #30]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	77bb      	strb	r3, [r7, #30]
 8000f6c:	7fbb      	ldrb	r3, [r7, #30]
 8000f6e:	2b03      	cmp	r3, #3
 8000f70:	d9e5      	bls.n	8000f3e <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000f72:	7f7b      	ldrb	r3, [r7, #29]
 8000f74:	3301      	adds	r3, #1
 8000f76:	777b      	strb	r3, [r7, #29]
 8000f78:	7f7b      	ldrb	r3, [r7, #29]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d9dc      	bls.n	8000f38 <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000f7e:	f000 f8c7 	bl	8001110 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000f82:	f000 f909 	bl	8001198 <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	7f3b      	ldrb	r3, [r7, #28]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f998 	bl	80012c4 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 f863 	bl	8001064 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000f9e:	7f3b      	ldrb	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	773b      	strb	r3, [r7, #28]
 8000fa4:	7f3b      	ldrb	r3, [r7, #28]
 8000fa6:	2b09      	cmp	r3, #9
 8000fa8:	d9c3      	bls.n	8000f32 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	777b      	strb	r3, [r7, #29]
 8000fae:	e01f      	b.n	8000ff0 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	77bb      	strb	r3, [r7, #30]
 8000fb4:	e016      	b.n	8000fe4 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000fb6:	7fba      	ldrb	r2, [r7, #30]
 8000fb8:	7f7b      	ldrb	r3, [r7, #29]
 8000fba:	4929      	ldr	r1, [pc, #164]	; (8001060 <AES_Encrypt+0x1b4>)
 8000fbc:	0092      	lsls	r2, r2, #2
 8000fbe:	440a      	add	r2, r1
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	7fbd      	ldrb	r5, [r7, #30]
 8000fc6:	7f7c      	ldrb	r4, [r7, #29]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 f883 	bl	80010d4 <AES_Sub_Byte>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <AES_Encrypt+0x1b4>)
 8000fd4:	00ab      	lsls	r3, r5, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4423      	add	r3, r4
 8000fda:	460a      	mov	r2, r1
 8000fdc:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000fde:	7fbb      	ldrb	r3, [r7, #30]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	77bb      	strb	r3, [r7, #30]
 8000fe4:	7fbb      	ldrb	r3, [r7, #30]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d9e5      	bls.n	8000fb6 <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8000fea:	7f7b      	ldrb	r3, [r7, #29]
 8000fec:	3301      	adds	r3, #1
 8000fee:	777b      	strb	r3, [r7, #29]
 8000ff0:	7f7b      	ldrb	r3, [r7, #29]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d9dc      	bls.n	8000fb0 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 8000ff6:	f000 f88b 	bl	8001110 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	7f3b      	ldrb	r3, [r7, #28]
 8001000:	4611      	mov	r1, r2
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f95e 	bl	80012c4 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	4618      	mov	r0, r3
 800100e:	f000 f829 	bl	8001064 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 8001012:	2300      	movs	r3, #0
 8001014:	777b      	strb	r3, [r7, #29]
 8001016:	e01a      	b.n	800104e <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 8001018:	2300      	movs	r3, #0
 800101a:	77bb      	strb	r3, [r7, #30]
 800101c:	e011      	b.n	8001042 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 800101e:	7fb9      	ldrb	r1, [r7, #30]
 8001020:	7f7a      	ldrb	r2, [r7, #29]
 8001022:	7fb8      	ldrb	r0, [r7, #30]
 8001024:	7f7b      	ldrb	r3, [r7, #29]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	4403      	add	r3, r0
 800102a:	4618      	mov	r0, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4403      	add	r3, r0
 8001030:	480b      	ldr	r0, [pc, #44]	; (8001060 <AES_Encrypt+0x1b4>)
 8001032:	0089      	lsls	r1, r1, #2
 8001034:	4401      	add	r1, r0
 8001036:	440a      	add	r2, r1
 8001038:	7812      	ldrb	r2, [r2, #0]
 800103a:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800103c:	7fbb      	ldrb	r3, [r7, #30]
 800103e:	3301      	adds	r3, #1
 8001040:	77bb      	strb	r3, [r7, #30]
 8001042:	7fbb      	ldrb	r3, [r7, #30]
 8001044:	2b03      	cmp	r3, #3
 8001046:	d9ea      	bls.n	800101e <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 8001048:	7f7b      	ldrb	r3, [r7, #29]
 800104a:	3301      	adds	r3, #1
 800104c:	777b      	strb	r3, [r7, #29]
 800104e:	7f7b      	ldrb	r3, [r7, #29]
 8001050:	2b03      	cmp	r3, #3
 8001052:	d9e1      	bls.n	8001018 <AES_Encrypt+0x16c>
		}
	}

}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3720      	adds	r7, #32
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	20000414 	.word	0x20000414

08001064 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8001064:	b480      	push	{r7}
 8001066:	b085      	sub	sp, #20
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 800106c:	2300      	movs	r3, #0
 800106e:	73bb      	strb	r3, [r7, #14]
 8001070:	e024      	b.n	80010bc <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e01b      	b.n	80010b0 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	7bbb      	ldrb	r3, [r7, #14]
 800107c:	4914      	ldr	r1, [pc, #80]	; (80010d0 <AES_Add_Round_Key+0x6c>)
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	440a      	add	r2, r1
 8001082:	4413      	add	r3, r2
 8001084:	7818      	ldrb	r0, [r3, #0]
 8001086:	7bfa      	ldrb	r2, [r7, #15]
 8001088:	7bbb      	ldrb	r3, [r7, #14]
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	4413      	add	r3, r2
 800108e:	461a      	mov	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4413      	add	r3, r2
 8001094:	7819      	ldrb	r1, [r3, #0]
 8001096:	7bfa      	ldrb	r2, [r7, #15]
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	4041      	eors	r1, r0
 800109c:	b2c8      	uxtb	r0, r1
 800109e:	490c      	ldr	r1, [pc, #48]	; (80010d0 <AES_Add_Round_Key+0x6c>)
 80010a0:	0092      	lsls	r2, r2, #2
 80010a2:	440a      	add	r2, r1
 80010a4:	4413      	add	r3, r2
 80010a6:	4602      	mov	r2, r0
 80010a8:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80010aa:	7bfb      	ldrb	r3, [r7, #15]
 80010ac:	3301      	adds	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	d9e0      	bls.n	8001078 <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	3301      	adds	r3, #1
 80010ba:	73bb      	strb	r3, [r7, #14]
 80010bc:	7bbb      	ldrb	r3, [r7, #14]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d9d7      	bls.n	8001072 <AES_Add_Round_Key+0xe>
		}
	}
}
 80010c2:	bf00      	nop
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	20000414 	.word	0x20000414

080010d4 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	f003 030f 	and.w	r3, r3, #15
 80010ea:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 80010ec:	7bfa      	ldrb	r2, [r7, #15]
 80010ee:	7bbb      	ldrb	r3, [r7, #14]
 80010f0:	4906      	ldr	r1, [pc, #24]	; (800110c <AES_Sub_Byte+0x38>)
 80010f2:	0112      	lsls	r2, r2, #4
 80010f4:	440a      	add	r2, r1
 80010f6:	4413      	add	r3, r2
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20000000 	.word	0x20000000

08001110 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <AES_Shift_Rows+0x84>)
 8001118:	791b      	ldrb	r3, [r3, #4]
 800111a:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <AES_Shift_Rows+0x84>)
 800111e:	795a      	ldrb	r2, [r3, #5]
 8001120:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <AES_Shift_Rows+0x84>)
 8001122:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 8001124:	4b1b      	ldr	r3, [pc, #108]	; (8001194 <AES_Shift_Rows+0x84>)
 8001126:	799a      	ldrb	r2, [r3, #6]
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <AES_Shift_Rows+0x84>)
 800112a:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 800112c:	4b19      	ldr	r3, [pc, #100]	; (8001194 <AES_Shift_Rows+0x84>)
 800112e:	79da      	ldrb	r2, [r3, #7]
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <AES_Shift_Rows+0x84>)
 8001132:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 8001134:	4a17      	ldr	r2, [pc, #92]	; (8001194 <AES_Shift_Rows+0x84>)
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <AES_Shift_Rows+0x84>)
 800113c:	7a1b      	ldrb	r3, [r3, #8]
 800113e:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8001140:	4b14      	ldr	r3, [pc, #80]	; (8001194 <AES_Shift_Rows+0x84>)
 8001142:	7a9a      	ldrb	r2, [r3, #10]
 8001144:	4b13      	ldr	r3, [pc, #76]	; (8001194 <AES_Shift_Rows+0x84>)
 8001146:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <AES_Shift_Rows+0x84>)
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 800114e:	4b11      	ldr	r3, [pc, #68]	; (8001194 <AES_Shift_Rows+0x84>)
 8001150:	7a5b      	ldrb	r3, [r3, #9]
 8001152:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 8001154:	4b0f      	ldr	r3, [pc, #60]	; (8001194 <AES_Shift_Rows+0x84>)
 8001156:	7ada      	ldrb	r2, [r3, #11]
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <AES_Shift_Rows+0x84>)
 800115a:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 800115c:	4a0d      	ldr	r2, [pc, #52]	; (8001194 <AES_Shift_Rows+0x84>)
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <AES_Shift_Rows+0x84>)
 8001164:	7bdb      	ldrb	r3, [r3, #15]
 8001166:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <AES_Shift_Rows+0x84>)
 800116a:	7b9a      	ldrb	r2, [r3, #14]
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <AES_Shift_Rows+0x84>)
 800116e:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <AES_Shift_Rows+0x84>)
 8001172:	7b5a      	ldrb	r2, [r3, #13]
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <AES_Shift_Rows+0x84>)
 8001176:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <AES_Shift_Rows+0x84>)
 800117a:	7b1a      	ldrb	r2, [r3, #12]
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <AES_Shift_Rows+0x84>)
 800117e:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8001180:	4a04      	ldr	r2, [pc, #16]	; (8001194 <AES_Shift_Rows+0x84>)
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	7313      	strb	r3, [r2, #12]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20000414 	.word	0x20000414

08001198 <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 800119e:	2300      	movs	r3, #0
 80011a0:	73bb      	strb	r3, [r7, #14]
 80011a2:	e082      	b.n	80012aa <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e033      	b.n	8001212 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 80011aa:	7bf9      	ldrb	r1, [r7, #15]
 80011ac:	7bba      	ldrb	r2, [r7, #14]
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	4843      	ldr	r0, [pc, #268]	; (80012c0 <AES_Mix_Collums+0x128>)
 80011b2:	0089      	lsls	r1, r1, #2
 80011b4:	4401      	add	r1, r0
 80011b6:	440a      	add	r2, r1
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	3310      	adds	r3, #16
 80011bc:	443b      	add	r3, r7
 80011be:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 80011c2:	7bfa      	ldrb	r2, [r7, #15]
 80011c4:	7bbb      	ldrb	r3, [r7, #14]
 80011c6:	493e      	ldr	r1, [pc, #248]	; (80012c0 <AES_Mix_Collums+0x128>)
 80011c8:	0092      	lsls	r2, r2, #2
 80011ca:	440a      	add	r2, r1
 80011cc:	4413      	add	r3, r2
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	3310      	adds	r3, #16
 80011d8:	443b      	add	r3, r7
 80011da:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80011de:	7bfa      	ldrb	r2, [r7, #15]
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	4937      	ldr	r1, [pc, #220]	; (80012c0 <AES_Mix_Collums+0x128>)
 80011e4:	0092      	lsls	r2, r2, #2
 80011e6:	440a      	add	r2, r1
 80011e8:	4413      	add	r3, r2
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	b25b      	sxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	da0c      	bge.n	800120c <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	3310      	adds	r3, #16
 80011f6:	443b      	add	r3, r7
 80011f8:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f082 021b 	eor.w	r2, r2, #27
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	3310      	adds	r3, #16
 8001206:	443b      	add	r3, r7
 8001208:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	3301      	adds	r3, #1
 8001210:	73fb      	strb	r3, [r7, #15]
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d9c8      	bls.n	80011aa <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 8001218:	793a      	ldrb	r2, [r7, #4]
 800121a:	7a7b      	ldrb	r3, [r7, #9]
 800121c:	4053      	eors	r3, r2
 800121e:	b2da      	uxtb	r2, r3
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	4053      	eors	r3, r2
 8001224:	b2da      	uxtb	r2, r3
 8001226:	7abb      	ldrb	r3, [r7, #10]
 8001228:	4053      	eors	r3, r2
 800122a:	b2d9      	uxtb	r1, r3
 800122c:	7afa      	ldrb	r2, [r7, #11]
 800122e:	7bbb      	ldrb	r3, [r7, #14]
 8001230:	404a      	eors	r2, r1
 8001232:	b2d1      	uxtb	r1, r2
 8001234:	4a22      	ldr	r2, [pc, #136]	; (80012c0 <AES_Mix_Collums+0x128>)
 8001236:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 8001238:	7a3a      	ldrb	r2, [r7, #8]
 800123a:	797b      	ldrb	r3, [r7, #5]
 800123c:	4053      	eors	r3, r2
 800123e:	b2da      	uxtb	r2, r3
 8001240:	7abb      	ldrb	r3, [r7, #10]
 8001242:	4053      	eors	r3, r2
 8001244:	b2da      	uxtb	r2, r3
 8001246:	79bb      	ldrb	r3, [r7, #6]
 8001248:	4053      	eors	r3, r2
 800124a:	b2d9      	uxtb	r1, r3
 800124c:	7afa      	ldrb	r2, [r7, #11]
 800124e:	7bbb      	ldrb	r3, [r7, #14]
 8001250:	404a      	eors	r2, r1
 8001252:	b2d1      	uxtb	r1, r2
 8001254:	4a1a      	ldr	r2, [pc, #104]	; (80012c0 <AES_Mix_Collums+0x128>)
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 800125c:	7a3a      	ldrb	r2, [r7, #8]
 800125e:	7a7b      	ldrb	r3, [r7, #9]
 8001260:	4053      	eors	r3, r2
 8001262:	b2da      	uxtb	r2, r3
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	4053      	eors	r3, r2
 8001268:	b2da      	uxtb	r2, r3
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	4053      	eors	r3, r2
 800126e:	b2d9      	uxtb	r1, r3
 8001270:	79fa      	ldrb	r2, [r7, #7]
 8001272:	7bbb      	ldrb	r3, [r7, #14]
 8001274:	404a      	eors	r2, r1
 8001276:	b2d1      	uxtb	r1, r2
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <AES_Mix_Collums+0x128>)
 800127a:	4413      	add	r3, r2
 800127c:	460a      	mov	r2, r1
 800127e:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8001280:	7a3a      	ldrb	r2, [r7, #8]
 8001282:	793b      	ldrb	r3, [r7, #4]
 8001284:	4053      	eors	r3, r2
 8001286:	b2da      	uxtb	r2, r3
 8001288:	7a7b      	ldrb	r3, [r7, #9]
 800128a:	4053      	eors	r3, r2
 800128c:	b2da      	uxtb	r2, r3
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	4053      	eors	r3, r2
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	79fa      	ldrb	r2, [r7, #7]
 8001296:	7bbb      	ldrb	r3, [r7, #14]
 8001298:	404a      	eors	r2, r1
 800129a:	b2d1      	uxtb	r1, r2
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <AES_Mix_Collums+0x128>)
 800129e:	4413      	add	r3, r2
 80012a0:	460a      	mov	r2, r1
 80012a2:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	3301      	adds	r3, #1
 80012a8:	73bb      	strb	r3, [r7, #14]
 80012aa:	7bbb      	ldrb	r3, [r7, #14]
 80012ac:	2b03      	cmp	r3, #3
 80012ae:	f67f af79 	bls.w	80011a4 <AES_Mix_Collums+0xc>
	}
}
 80012b2:	bf00      	nop
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	20000414 	.word	0x20000414

080012c4 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	6039      	str	r1, [r7, #0]
 80012ce:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]
 80012d4:	e00c      	b.n	80012f0 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	330c      	adds	r3, #12
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	441a      	add	r2, r3
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	7812      	ldrb	r2, [r2, #0]
 80012e2:	3318      	adds	r3, #24
 80012e4:	443b      	add	r3, r7
 80012e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	3301      	adds	r3, #1
 80012ee:	75fb      	strb	r3, [r7, #23]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d9ef      	bls.n	80012d6 <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80012f6:	7b3b      	ldrb	r3, [r7, #12]
 80012f8:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 8001306:	7d3b      	ldrb	r3, [r7, #20]
 8001308:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 800130a:	2300      	movs	r3, #0
 800130c:	75fb      	strb	r3, [r7, #23]
 800130e:	e012      	b.n	8001336 <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 8001310:	7dfb      	ldrb	r3, [r7, #23]
 8001312:	3318      	adds	r3, #24
 8001314:	443b      	add	r3, r7
 8001316:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800131a:	7dfc      	ldrb	r4, [r7, #23]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fed9 	bl	80010d4 <AES_Sub_Byte>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	f104 0318 	add.w	r3, r4, #24
 800132a:	443b      	add	r3, r7
 800132c:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	3301      	adds	r3, #1
 8001334:	75fb      	strb	r3, [r7, #23]
 8001336:	7dfb      	ldrb	r3, [r7, #23]
 8001338:	2b03      	cmp	r3, #3
 800133a:	d9e9      	bls.n	8001310 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 800133c:	2301      	movs	r3, #1
 800133e:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8001340:	e010      	b.n	8001364 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8001342:	7d7b      	ldrb	r3, [r7, #21]
 8001344:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001348:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800134a:	7d7b      	ldrb	r3, [r7, #21]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8001350:	7cfb      	ldrb	r3, [r7, #19]
 8001352:	2b80      	cmp	r3, #128	; 0x80
 8001354:	d103      	bne.n	800135e <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 8001356:	7d7b      	ldrb	r3, [r7, #21]
 8001358:	f083 031b 	eor.w	r3, r3, #27
 800135c:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	3b01      	subs	r3, #1
 8001362:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d1eb      	bne.n	8001342 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800136a:	7b3a      	ldrb	r2, [r7, #12]
 800136c:	7d7b      	ldrb	r3, [r7, #21]
 800136e:	4053      	eors	r3, r2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8001374:	2300      	movs	r3, #0
 8001376:	75fb      	strb	r3, [r7, #23]
 8001378:	e02f      	b.n	80013da <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800137a:	2300      	movs	r3, #0
 800137c:	75bb      	strb	r3, [r7, #22]
 800137e:	e026      	b.n	80013ce <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8001380:	7dba      	ldrb	r2, [r7, #22]
 8001382:	7dfb      	ldrb	r3, [r7, #23]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	461a      	mov	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	7819      	ldrb	r1, [r3, #0]
 8001390:	7dbb      	ldrb	r3, [r7, #22]
 8001392:	3318      	adds	r3, #24
 8001394:	443b      	add	r3, r7
 8001396:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800139a:	7db8      	ldrb	r0, [r7, #22]
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4403      	add	r3, r0
 80013a2:	4618      	mov	r0, r3
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	4403      	add	r3, r0
 80013a8:	404a      	eors	r2, r1
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 80013ae:	7dba      	ldrb	r2, [r7, #22]
 80013b0:	7dfb      	ldrb	r3, [r7, #23]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	4413      	add	r3, r2
 80013b6:	461a      	mov	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	441a      	add	r2, r3
 80013bc:	7dbb      	ldrb	r3, [r7, #22]
 80013be:	7812      	ldrb	r2, [r2, #0]
 80013c0:	3318      	adds	r3, #24
 80013c2:	443b      	add	r3, r7
 80013c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 80013c8:	7dbb      	ldrb	r3, [r7, #22]
 80013ca:	3301      	adds	r3, #1
 80013cc:	75bb      	strb	r3, [r7, #22]
 80013ce:	7dbb      	ldrb	r3, [r7, #22]
 80013d0:	2b03      	cmp	r3, #3
 80013d2:	d9d5      	bls.n	8001380 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 80013d4:	7dfb      	ldrb	r3, [r7, #23]
 80013d6:	3301      	adds	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b03      	cmp	r3, #3
 80013de:	d9cc      	bls.n	800137a <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	371c      	adds	r7, #28
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd90      	pop	{r4, r7, pc}
	...

080013ec <Encrypt_Payload>:
extern unsigned char NwkSkey[16];
extern unsigned char AppSkey[16];
extern unsigned char DevAddr[4];

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08a      	sub	sp, #40	; 0x28
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	607a      	str	r2, [r7, #4]
 80013f6:	461a      	mov	r2, r3
 80013f8:	460b      	mov	r3, r1
 80013fa:	72fb      	strb	r3, [r7, #11]
 80013fc:	4613      	mov	r3, r2
 80013fe:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 8001412:	7afb      	ldrb	r3, [r7, #11]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 800141a:	7afb      	ldrb	r3, [r7, #11]
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 8001424:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001428:	2b00      	cmp	r3, #0
 800142a:	d004      	beq.n	8001436 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 800142c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001430:	3301      	adds	r3, #1
 8001432:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8001436:	2301      	movs	r3, #1
 8001438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800143c:	e07e      	b.n	800153c <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 800143e:	2301      	movs	r3, #1
 8001440:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8001442:	2300      	movs	r3, #0
 8001444:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8001446:	2300      	movs	r3, #0
 8001448:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800144a:	2300      	movs	r3, #0
 800144c:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 800144e:	2300      	movs	r3, #0
 8001450:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8001452:	7abb      	ldrb	r3, [r7, #10]
 8001454:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <Encrypt_Payload+0x168>)
 8001458:	78db      	ldrb	r3, [r3, #3]
 800145a:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800145c:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <Encrypt_Payload+0x168>)
 800145e:	789b      	ldrb	r3, [r3, #2]
 8001460:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8001462:	4b3c      	ldr	r3, [pc, #240]	; (8001554 <Encrypt_Payload+0x168>)
 8001464:	785b      	ldrb	r3, [r3, #1]
 8001466:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 8001468:	4b3a      	ldr	r3, [pc, #232]	; (8001554 <Encrypt_Payload+0x168>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	0a1b      	lsrs	r3, r3, #8
 8001478:	b2db      	uxtb	r3, r3
 800147a:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8001482:	2300      	movs	r3, #0
 8001484:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 800148e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A,AppSkey);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	492f      	ldr	r1, [pc, #188]	; (8001558 <Encrypt_Payload+0x16c>)
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fd05 	bl	8000eac <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 80014a2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80014a6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d01c      	beq.n	80014e8 <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014b4:	e013      	b.n	80014de <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781a      	ldrb	r2, [r3, #0]
 80014ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014be:	3328      	adds	r3, #40	; 0x28
 80014c0:	443b      	add	r3, r7
 80014c2:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80014c6:	4053      	eors	r3, r2
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	701a      	strb	r2, [r3, #0]
				Data++;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	3301      	adds	r3, #1
 80014d2:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 80014d4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014d8:	3301      	adds	r3, #1
 80014da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d9e7      	bls.n	80014b6 <Encrypt_Payload+0xca>
 80014e6:	e024      	b.n	8001532 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 80014e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d102      	bne.n	80014f6 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 80014f0:	2310      	movs	r3, #16
 80014f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014fc:	e013      	b.n	8001526 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	781a      	ldrb	r2, [r3, #0]
 8001502:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001506:	3328      	adds	r3, #40	; 0x28
 8001508:	443b      	add	r3, r7
 800150a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800150e:	4053      	eors	r3, r2
 8001510:	b2da      	uxtb	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	701a      	strb	r2, [r3, #0]
				Data++;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	3301      	adds	r3, #1
 800151a:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 800151c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001520:	3301      	adds	r3, #1
 8001522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001526:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800152a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800152e:	429a      	cmp	r2, r3
 8001530:	d3e5      	bcc.n	80014fe <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8001532:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001536:	3301      	adds	r3, #1
 8001538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800153c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001540:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001544:	429a      	cmp	r2, r3
 8001546:	f67f af7a 	bls.w	800143e <Encrypt_Payload+0x52>
			}
		}
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000444 	.word	0x20000444
 8001558:	20000434 	.word	0x20000434

0800155c <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b09b      	sub	sp, #108	; 0x6c
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	4613      	mov	r3, r2
 800156a:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 800156c:	4bb8      	ldr	r3, [pc, #736]	; (8001850 <Calculate_MIC+0x2f4>)
 800156e:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8001572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8001578:	4bb5      	ldr	r3, [pc, #724]	; (8001850 <Calculate_MIC+0x2f4>)
 800157a:	f107 0434 	add.w	r4, r7, #52	; 0x34
 800157e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001580:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8001584:	4bb2      	ldr	r3, [pc, #712]	; (8001850 <Calculate_MIC+0x2f4>)
 8001586:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800158a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800158c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8001590:	4baf      	ldr	r3, [pc, #700]	; (8001850 <Calculate_MIC+0x2f4>)
 8001592:	f107 0414 	add.w	r4, r7, #20
 8001596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001598:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 80015a8:	2301      	movs	r3, #1
 80015aa:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 80015ae:	2349      	movs	r3, #73	; 0x49
 80015b0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 80015cc:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80015d0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 80015d4:	4b9f      	ldr	r3, [pc, #636]	; (8001854 <Calculate_MIC+0x2f8>)
 80015d6:	78db      	ldrb	r3, [r3, #3]
 80015d8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 80015dc:	4b9d      	ldr	r3, [pc, #628]	; (8001854 <Calculate_MIC+0x2f8>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 80015e4:	4b9b      	ldr	r3, [pc, #620]	; (8001854 <Calculate_MIC+0x2f8>)
 80015e6:	785b      	ldrb	r3, [r3, #1]
 80015e8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 80015ec:	4b99      	ldr	r3, [pc, #612]	; (8001854 <Calculate_MIC+0x2f8>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	0a1b      	lsrs	r3, r3, #8
 8001600:	b2db      	uxtb	r3, r3
 8001602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 8001612:	2300      	movs	r3, #0
 8001614:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 8001618:	79fb      	ldrb	r3, [r7, #7]
 800161a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	091b      	lsrs	r3, r3, #4
 8001622:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8001630:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <Calculate_MIC+0xe6>
	{
		Number_of_Blocks++;
 8001638:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800163c:	3301      	adds	r3, #1
 800163e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2);
 8001642:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001646:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f000 f905 	bl	800185c <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B,NwkSkey);
 8001652:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001656:	4980      	ldr	r1, [pc, #512]	; (8001858 <Calculate_MIC+0x2fc>)
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fc27 	bl	8000eac <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001664:	e010      	b.n	8001688 <Calculate_MIC+0x12c>
	{
		Old_Data[i] = Block_B[i];
 8001666:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800166a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800166e:	3268      	adds	r2, #104	; 0x68
 8001670:	443a      	add	r2, r7
 8001672:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8001676:	3368      	adds	r3, #104	; 0x68
 8001678:	443b      	add	r3, r7
 800167a:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 800167e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001682:	3301      	adds	r3, #1
 8001684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001688:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800168c:	2b0f      	cmp	r3, #15
 800168e:	d9ea      	bls.n	8001666 <Calculate_MIC+0x10a>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8001690:	e043      	b.n	800171a <Calculate_MIC+0x1be>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001698:	e00f      	b.n	80016ba <Calculate_MIC+0x15e>
		{
			New_Data[i] = *Data;
 800169a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	7812      	ldrb	r2, [r2, #0]
 80016a2:	3368      	adds	r3, #104	; 0x68
 80016a4:	443b      	add	r3, r7
 80016a6:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3301      	adds	r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 80016b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016b4:	3301      	adds	r3, #1
 80016b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	d9eb      	bls.n	800169a <Calculate_MIC+0x13e>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 80016c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 f94f 	bl	8001970 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data,NwkSkey);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4960      	ldr	r1, [pc, #384]	; (8001858 <Calculate_MIC+0x2fc>)
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff fbe7 	bl	8000eac <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80016e4:	e010      	b.n	8001708 <Calculate_MIC+0x1ac>
		{
			Old_Data[i] = New_Data[i];
 80016e6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80016ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016ee:	3268      	adds	r2, #104	; 0x68
 80016f0:	443a      	add	r2, r7
 80016f2:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 80016f6:	3368      	adds	r3, #104	; 0x68
 80016f8:	443b      	add	r3, r7
 80016fa:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 80016fe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001702:	3301      	adds	r3, #1
 8001704:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001708:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d9ea      	bls.n	80016e6 <Calculate_MIC+0x18a>
		}

		//Raise Block counter
		Block_Counter++;
 8001710:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001714:	3301      	adds	r3, #1
 8001716:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 800171a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800171e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001722:	429a      	cmp	r2, r3
 8001724:	d3b5      	bcc.n	8001692 <Calculate_MIC+0x136>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8001726:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800172a:	2b00      	cmp	r3, #0
 800172c:	d12e      	bne.n	800178c <Calculate_MIC+0x230>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 800172e:	2300      	movs	r3, #0
 8001730:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001734:	e00f      	b.n	8001756 <Calculate_MIC+0x1fa>
		{
			New_Data[i] = *Data;
 8001736:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	3368      	adds	r3, #104	; 0x68
 8001740:	443b      	add	r3, r7
 8001742:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	3301      	adds	r3, #1
 800174a:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 800174c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001750:	3301      	adds	r3, #1
 8001752:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001756:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d9eb      	bls.n	8001736 <Calculate_MIC+0x1da>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 800175e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f901 	bl	8001970 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 800176e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f000 f8f9 	bl	8001970 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	4935      	ldr	r1, [pc, #212]	; (8001858 <Calculate_MIC+0x2fc>)
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff fb91 	bl	8000eac <AES_Encrypt>
 800178a:	e04d      	b.n	8001828 <Calculate_MIC+0x2cc>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001792:	e02f      	b.n	80017f4 <Calculate_MIC+0x298>
		{
			if(i < Incomplete_Block_Size)
 8001794:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001798:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800179c:	429a      	cmp	r2, r3
 800179e:	d20a      	bcs.n	80017b6 <Calculate_MIC+0x25a>
			{
				New_Data[i] = *Data;
 80017a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017a4:	68fa      	ldr	r2, [r7, #12]
 80017a6:	7812      	ldrb	r2, [r2, #0]
 80017a8:	3368      	adds	r3, #104	; 0x68
 80017aa:	443b      	add	r3, r7
 80017ac:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	3301      	adds	r3, #1
 80017b4:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 80017b6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80017ba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017be:	429a      	cmp	r2, r3
 80017c0:	d106      	bne.n	80017d0 <Calculate_MIC+0x274>
			{
				New_Data[i] = 0x80;
 80017c2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017c6:	3368      	adds	r3, #104	; 0x68
 80017c8:	443b      	add	r3, r7
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 80017d0:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80017d4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80017d8:	429a      	cmp	r2, r3
 80017da:	d906      	bls.n	80017ea <Calculate_MIC+0x28e>
			{
				New_Data[i] = 0x00;
 80017dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017e0:	3368      	adds	r3, #104	; 0x68
 80017e2:	443b      	add	r3, r7
 80017e4:	2200      	movs	r2, #0
 80017e6:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 80017ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017ee:	3301      	adds	r3, #1
 80017f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80017f4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80017f8:	2b0f      	cmp	r3, #15
 80017fa:	d9cb      	bls.n	8001794 <Calculate_MIC+0x238>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 80017fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f000 f8b2 	bl	8001970 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 800180c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4611      	mov	r1, r2
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f8aa 	bl	8001970 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	490d      	ldr	r1, [pc, #52]	; (8001858 <Calculate_MIC+0x2fc>)
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fb42 	bl	8000eac <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8001828:	7d3a      	ldrb	r2, [r7, #20]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	3301      	adds	r3, #1
 8001832:	7d7a      	ldrb	r2, [r7, #21]
 8001834:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	3302      	adds	r3, #2
 800183a:	7dba      	ldrb	r2, [r7, #22]
 800183c:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	3303      	adds	r3, #3
 8001842:	7dfa      	ldrb	r2, [r7, #23]
 8001844:	701a      	strb	r2, [r3, #0]
}
 8001846:	bf00      	nop
 8001848:	376c      	adds	r7, #108	; 0x6c
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	0800ef10 	.word	0x0800ef10
 8001854:	20000444 	.word	0x20000444
 8001858:	20000424 	.word	0x20000424

0800185c <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1,NwkSkey);
 8001866:	4926      	ldr	r1, [pc, #152]	; (8001900 <Generate_Keys+0xa4>)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f7ff fb1f 	bl	8000eac <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	b25b      	sxtb	r3, r3
 8001874:	2b00      	cmp	r3, #0
 8001876:	da02      	bge.n	800187e <Generate_Keys+0x22>
	{
		MSB_Key = 1;
 8001878:	2301      	movs	r3, #1
 800187a:	73bb      	strb	r3, [r7, #14]
 800187c:	e001      	b.n	8001882 <Generate_Keys+0x26>
	}
	else
	{
		MSB_Key = 0;
 800187e:	2300      	movs	r3, #0
 8001880:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f000 f83e 	bl	8001904 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8001888:	7bbb      	ldrb	r3, [r7, #14]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d109      	bne.n	80018a2 <Generate_Keys+0x46>
	{
		K1[15] = K1[15] ^ 0x87;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	330f      	adds	r3, #15
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	320f      	adds	r2, #15
 8001898:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 800189c:	43db      	mvns	r3, r3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
 80018a6:	e00a      	b.n	80018be <Generate_Keys+0x62>
	{
		K2[i] = K1[i];
 80018a8:	7bfb      	ldrb	r3, [r7, #15]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	441a      	add	r2, r3
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	6839      	ldr	r1, [r7, #0]
 80018b2:	440b      	add	r3, r1
 80018b4:	7812      	ldrb	r2, [r2, #0]
 80018b6:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	3301      	adds	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	2b0f      	cmp	r3, #15
 80018c2:	d9f1      	bls.n	80018a8 <Generate_Keys+0x4c>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	da02      	bge.n	80018d4 <Generate_Keys+0x78>
	{
		MSB_Key = 1;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	e001      	b.n	80018d8 <Generate_Keys+0x7c>
	}
	else
	{
		MSB_Key = 0;
 80018d4:	2300      	movs	r3, #0
 80018d6:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 80018d8:	6838      	ldr	r0, [r7, #0]
 80018da:	f000 f813 	bl	8001904 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d109      	bne.n	80018f8 <Generate_Keys+0x9c>
	{
		K2[15] = K2[15] ^ 0x87;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	330f      	adds	r3, #15
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	320f      	adds	r2, #15
 80018ee:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 80018f2:	43db      	mvns	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	7013      	strb	r3, [r2, #0]
	}
}
 80018f8:	bf00      	nop
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000424 	.word	0x20000424

08001904 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 8001910:	2300      	movs	r3, #0
 8001912:	73fb      	strb	r3, [r7, #15]
 8001914:	e022      	b.n	800195c <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8001916:	7bfb      	ldrb	r3, [r7, #15]
 8001918:	2b0e      	cmp	r3, #14
 800191a:	d80d      	bhi.n	8001938 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 800191c:	7bfb      	ldrb	r3, [r7, #15]
 800191e:	3301      	adds	r3, #1
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	4413      	add	r3, r2
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	b25b      	sxtb	r3, r3
 8001928:	2b00      	cmp	r3, #0
 800192a:	da02      	bge.n	8001932 <Shift_Left+0x2e>
			{
				Overflow = 1;
 800192c:	2301      	movs	r3, #1
 800192e:	73bb      	strb	r3, [r7, #14]
 8001930:	e004      	b.n	800193c <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	73bb      	strb	r3, [r7, #14]
 8001936:	e001      	b.n	800193c <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 800193c:	7bfb      	ldrb	r3, [r7, #15]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	b2d9      	uxtb	r1, r3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	4413      	add	r3, r2
 800194e:	7bba      	ldrb	r2, [r7, #14]
 8001950:	440a      	add	r2, r1
 8001952:	b2d2      	uxtb	r2, r2
 8001954:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	3301      	adds	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	d9d9      	bls.n	8001916 <Shift_Left+0x12>
	}
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 800197a:	2300      	movs	r3, #0
 800197c:	73fb      	strb	r3, [r7, #15]
 800197e:	e010      	b.n	80019a2 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8001980:	7bfb      	ldrb	r3, [r7, #15]
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	7819      	ldrb	r1, [r3, #0]
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	4413      	add	r3, r2
 800198e:	781a      	ldrb	r2, [r3, #0]
 8001990:	7bfb      	ldrb	r3, [r7, #15]
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4403      	add	r3, r0
 8001996:	404a      	eors	r2, r1
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	3301      	adds	r3, #1
 80019a0:	73fb      	strb	r3, [r7, #15]
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
 80019a4:	2b0f      	cmp	r3, #15
 80019a6:	d9eb      	bls.n	8001980 <XOR+0x10>
	}
}
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <rfm95_read>:
unsigned char NwkSkey[16];
unsigned char AppSkey[16];
unsigned char DevAddr[4];

static bool rfm95_read(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t *buffer) {
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	60f8      	str	r0, [r7, #12]
 80019be:	460b      	mov	r3, r1
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6858      	ldr	r0, [r3, #4]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	891b      	ldrh	r3, [r3, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	4619      	mov	r1, r3
 80019d0:	f003 f828 	bl	8004a24 <HAL_GPIO_WritePin>

	//uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
	uint8_t transmit_buffer = (uint8_t) reg;
 80019d4:	7afb      	ldrb	r3, [r7, #11]
 80019d6:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f107 0117 	add.w	r1, r7, #23
 80019e0:	230a      	movs	r3, #10
 80019e2:	2201      	movs	r2, #1
 80019e4:	f005 fc43 	bl	800726e <HAL_SPI_Transmit>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <rfm95_read+0x3c>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e014      	b.n	8001a1c <rfm95_read+0x66>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	230a      	movs	r3, #10
 80019f8:	2201      	movs	r2, #1
 80019fa:	6879      	ldr	r1, [r7, #4]
 80019fc:	f005 fda5 	bl	800754a <HAL_SPI_Receive>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <rfm95_read+0x54>
			!= HAL_OK) {
		return false;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e008      	b.n	8001a1c <rfm95_read+0x66>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6858      	ldr	r0, [r3, #4]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	891b      	ldrh	r3, [r3, #8]
 8001a12:	2201      	movs	r2, #1
 8001a14:	4619      	mov	r1, r3
 8001a16:	f003 f805 	bl	8004a24 <HAL_GPIO_WritePin>

	return true;
 8001a1a:	2301      	movs	r3, #1
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <rfm95_write>:

static bool rfm95_write(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t value) {
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	70fb      	strb	r3, [r7, #3]
 8001a30:	4613      	mov	r3, r2
 8001a32:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6858      	ldr	r0, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	891b      	ldrh	r3, [r3, #8]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f002 fff0 	bl	8004a24 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	733b      	strb	r3, [r7, #12]
 8001a4e:	78bb      	ldrb	r3, [r7, #2]
 8001a50:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6818      	ldr	r0, [r3, #0]
 8001a56:	f107 010c 	add.w	r1, r7, #12
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	2202      	movs	r2, #2
 8001a5e:	f005 fc06 	bl	800726e <HAL_SPI_Transmit>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <rfm95_write+0x48>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e008      	b.n	8001a7e <rfm95_write+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6858      	ldr	r0, [r3, #4]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	891b      	ldrh	r3, [r3, #8]
 8001a74:	2201      	movs	r2, #1
 8001a76:	4619      	mov	r1, r3
 8001a78:	f002 ffd4 	bl	8004a24 <HAL_GPIO_WritePin>

	return true;
 8001a7c:	2301      	movs	r3, #1
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <rfm95_reset>:

static void rfm95_reset(rfm95_handle_t *handle) {
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68d8      	ldr	r0, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	8a1b      	ldrh	r3, [r3, #16]
 8001a96:	2200      	movs	r2, #0
 8001a98:	4619      	mov	r1, r3
 8001a9a:	f002 ffc3 	bl	8004a24 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	f002 fcc8 	bl	8004434 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68d8      	ldr	r0, [r3, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	8a1b      	ldrh	r3, [r3, #16]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f002 ffb8 	bl	8004a24 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001ab4:	2005      	movs	r0, #5
 8001ab6:	f002 fcbd 	bl	8004434 <HAL_Delay>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ad6:	d005      	beq.n	8001ae4 <rfm95_init+0x20>
 8001ad8:	4b7f      	ldr	r3, [pc, #508]	; (8001cd8 <rfm95_init+0x214>)
 8001ada:	4a80      	ldr	r2, [pc, #512]	; (8001cdc <rfm95_init+0x218>)
 8001adc:	2181      	movs	r1, #129	; 0x81
 8001ade:	4880      	ldr	r0, [pc, #512]	; (8001ce0 <rfm95_init+0x21c>)
 8001ae0:	f00a f98a 	bl	800bdf8 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <rfm95_init+0x36>
 8001aee:	4b7d      	ldr	r3, [pc, #500]	; (8001ce4 <rfm95_init+0x220>)
 8001af0:	4a7a      	ldr	r2, [pc, #488]	; (8001cdc <rfm95_init+0x218>)
 8001af2:	2182      	movs	r1, #130	; 0x82
 8001af4:	487a      	ldr	r0, [pc, #488]	; (8001ce0 <rfm95_init+0x21c>)
 8001af6:	f00a f97f 	bl	800bdf8 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b04:	d005      	beq.n	8001b12 <rfm95_init+0x4e>
 8001b06:	4b78      	ldr	r3, [pc, #480]	; (8001ce8 <rfm95_init+0x224>)
 8001b08:	4a74      	ldr	r2, [pc, #464]	; (8001cdc <rfm95_init+0x218>)
 8001b0a:	2183      	movs	r1, #131	; 0x83
 8001b0c:	4874      	ldr	r0, [pc, #464]	; (8001ce0 <rfm95_init+0x21c>)
 8001b0e:	f00a f973 	bl	800bdf8 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <rfm95_init+0x64>
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <rfm95_init+0x228>)
 8001b1e:	4a6f      	ldr	r2, [pc, #444]	; (8001cdc <rfm95_init+0x218>)
 8001b20:	2184      	movs	r1, #132	; 0x84
 8001b22:	486f      	ldr	r0, [pc, #444]	; (8001ce0 <rfm95_init+0x21c>)
 8001b24:	f00a f968 	bl	800bdf8 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d005      	beq.n	8001b3e <rfm95_init+0x7a>
 8001b32:	4b6f      	ldr	r3, [pc, #444]	; (8001cf0 <rfm95_init+0x22c>)
 8001b34:	4a69      	ldr	r2, [pc, #420]	; (8001cdc <rfm95_init+0x218>)
 8001b36:	2185      	movs	r1, #133	; 0x85
 8001b38:	4869      	ldr	r0, [pc, #420]	; (8001ce0 <rfm95_init+0x21c>)
 8001b3a:	f00a f95d 	bl	800bdf8 <__assert_func>

	rfm95_reset(handle);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff ffa1 	bl	8001a86 <rfm95_reset>

	if (handle->reload_frame_counter != NULL) {
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d009      	beq.n	8001b60 <rfm95_init+0x9c>
		handle->reload_frame_counter(&handle->tx_frame_count,
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	f102 0052 	add.w	r0, r2, #82	; 0x52
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	3250      	adds	r2, #80	; 0x50
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4798      	blx	r3
 8001b5e:	e007      	b.n	8001b70 <rfm95_init+0xac>
				&handle->rx_frame_count);
	} else {
		handle->tx_frame_count = 0;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		handle->rx_frame_count = 0;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}

	// Check for correct version.
	uint8_t version;
	if (!rfm95_read(handle, RFM95_REGISTER_VERSION, &version))
 8001b70:	f107 030f 	add.w	r3, r7, #15
 8001b74:	461a      	mov	r2, r3
 8001b76:	2142      	movs	r1, #66	; 0x42
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f7ff ff1c 	bl	80019b6 <rfm95_read>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f083 0301 	eor.w	r3, r3, #1
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <rfm95_init+0xca>
		return false;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e0a0      	b.n	8001cd0 <rfm95_init+0x20c>
	if (version != RFM9x_VER)
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b12      	cmp	r3, #18
 8001b92:	d001      	beq.n	8001b98 <rfm95_init+0xd4>
		return false;
 8001b94:	2300      	movs	r3, #0
 8001b96:	e09b      	b.n	8001cd0 <rfm95_init+0x20c>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff41 	bl	8001a24 <rfm95_write>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f083 0301 	eor.w	r3, r3, #1
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <rfm95_init+0xee>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	e08e      	b.n	8001cd0 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7ff ff34 	bl	8001a24 <rfm95_write>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	f083 0301 	eor.w	r3, r3, #1
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <rfm95_init+0x108>
	RFM95_REGISTER_OP_MODE_LORA))
		return false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e081      	b.n	8001cd0 <rfm95_init+0x20c>

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8001bcc:	2111      	movs	r1, #17
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 f890 	bl	8001cf4 <rfm95_set_power>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f083 0301 	eor.w	r3, r3, #1
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <rfm95_init+0x120>
		return false;
 8001be0:	2300      	movs	r3, #0
 8001be2:	e075      	b.n	8001cd0 <rfm95_init+0x20c>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 37))
 8001be4:	2225      	movs	r2, #37	; 0x25
 8001be6:	211f      	movs	r1, #31
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff ff1b 	bl	8001a24 <rfm95_write>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <rfm95_init+0x13a>
		return false;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e068      	b.n	8001cd0 <rfm95_init+0x20c>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2120      	movs	r1, #32
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ff0e 	bl	8001a24 <rfm95_write>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f083 0301 	eor.w	r3, r3, #1
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <rfm95_init+0x154>
		return false;
 8001c14:	2300      	movs	r3, #0
 8001c16:	e05b      	b.n	8001cd0 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8001c18:	2208      	movs	r2, #8
 8001c1a:	2121      	movs	r1, #33	; 0x21
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff01 	bl	8001a24 <rfm95_write>
 8001c22:	4603      	mov	r3, r0
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <rfm95_init+0x16e>
		return false;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e04e      	b.n	8001cd0 <rfm95_init+0x20c>

	// Turn on low data rate optimisation (for symbol lengths > 16ms) and automatic AGC
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3,
 8001c32:	220c      	movs	r2, #12
 8001c34:	2126      	movs	r1, #38	; 0x26
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fef4 	bl	8001a24 <rfm95_write>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <rfm95_init+0x188>
	RFM95_REGISTER_MODEM_CONFIG_3_LDR_OPTIM_AGC_AUTO_ON))
		return false;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	e041      	b.n	8001cd0 <rfm95_init+0x20c>

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8001c4c:	2234      	movs	r2, #52	; 0x34
 8001c4e:	2139      	movs	r1, #57	; 0x39
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff fee7 	bl	8001a24 <rfm95_write>
 8001c56:	4603      	mov	r3, r0
 8001c58:	f083 0301 	eor.w	r3, r3, #1
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <rfm95_init+0x1a2>
		return false;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e034      	b.n	8001cd0 <rfm95_init+0x20c>

	// Set IQ inversion.
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_1,
 8001c66:	2227      	movs	r2, #39	; 0x27
 8001c68:	2133      	movs	r1, #51	; 0x33
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff feda 	bl	8001a24 <rfm95_write>
 8001c70:	4603      	mov	r3, r0
 8001c72:	f083 0301 	eor.w	r3, r3, #1
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <rfm95_init+0x1bc>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e027      	b.n	8001cd0 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_2,
 8001c80:	221d      	movs	r2, #29
 8001c82:	213b      	movs	r1, #59	; 0x3b
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff fecd 	bl	8001a24 <rfm95_write>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <rfm95_init+0x1d6>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e01a      	b.n	8001cd0 <rfm95_init+0x20c>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 8001c9a:	2280      	movs	r2, #128	; 0x80
 8001c9c:	210e      	movs	r1, #14
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f7ff fec0 	bl	8001a24 <rfm95_write>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <rfm95_init+0x1f0>
		return false;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	e00d      	b.n	8001cd0 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	210f      	movs	r1, #15
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7ff feb3 	bl	8001a24 <rfm95_write>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f083 0301 	eor.w	r3, r3, #1
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <rfm95_init+0x20a>
		return false;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e000      	b.n	8001cd0 <rfm95_init+0x20c>

	return true;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	0800ef20 	.word	0x0800ef20
 8001cdc:	0800f2bc 	.word	0x0800f2bc
 8001ce0:	0800ef54 	.word	0x0800ef54
 8001ce4:	0800ef78 	.word	0x0800ef78
 8001ce8:	0800efb4 	.word	0x0800efb4
 8001cec:	0800efec 	.word	0x0800efec
 8001cf0:	0800f028 	.word	0x0800f028

08001cf4 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	dd03      	ble.n	8001d10 <rfm95_set_power+0x1c>
 8001d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0c:	2b11      	cmp	r3, #17
 8001d0e:	dd09      	ble.n	8001d24 <rfm95_set_power+0x30>
 8001d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d14:	2b14      	cmp	r3, #20
 8001d16:	d005      	beq.n	8001d24 <rfm95_set_power+0x30>
 8001d18:	4b2c      	ldr	r3, [pc, #176]	; (8001dcc <rfm95_set_power+0xd8>)
 8001d1a:	4a2d      	ldr	r2, [pc, #180]	; (8001dd0 <rfm95_set_power+0xdc>)
 8001d1c:	21c9      	movs	r1, #201	; 0xc9
 8001d1e:	482d      	ldr	r0, [pc, #180]	; (8001dd4 <rfm95_set_power+0xe0>)
 8001d20:	f00a f86a 	bl	800bdf8 <__assert_func>

	rfm95_register_pa_config_t pa_config = { 0 };
 8001d24:	2300      	movs	r3, #0
 8001d26:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001d2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	dd18      	ble.n	8001d66 <rfm95_set_power+0x72>
 8001d34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d38:	2b11      	cmp	r3, #17
 8001d3a:	dc14      	bgt.n	8001d66 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001d3c:	7b3b      	ldrb	r3, [r7, #12]
 8001d3e:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d42:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001d44:	7b3b      	ldrb	r3, [r7, #12]
 8001d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d4a:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	3b02      	subs	r3, #2
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	7b3b      	ldrb	r3, [r7, #12]
 8001d5a:	f362 0303 	bfi	r3, r2, #0, #4
 8001d5e:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001d60:	2384      	movs	r3, #132	; 0x84
 8001d62:	73fb      	strb	r3, [r7, #15]
 8001d64:	e011      	b.n	8001d8a <rfm95_set_power+0x96>

	} else if (power == 20) {
 8001d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d6a:	2b14      	cmp	r3, #20
 8001d6c:	d10d      	bne.n	8001d8a <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d74:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001d76:	7b3b      	ldrb	r3, [r7, #12]
 8001d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d7c:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001d7e:	7b3b      	ldrb	r3, [r7, #12]
 8001d80:	f043 030f 	orr.w	r3, r3, #15
 8001d84:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001d86:	2387      	movs	r3, #135	; 0x87
 8001d88:	73fb      	strb	r3, [r7, #15]
	}

	if (!rfm95_write(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 8001d8a:	7b3b      	ldrb	r3, [r7, #12]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2109      	movs	r1, #9
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fe47 	bl	8001a24 <rfm95_write>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f083 0301 	eor.w	r3, r3, #1
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <rfm95_set_power+0xb2>
		return false;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e00e      	b.n	8001dc4 <rfm95_set_power+0xd0>
	if (!rfm95_write(handle, RFM95_REGISTER_PA_DAC, pa_dac_config))
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
 8001da8:	461a      	mov	r2, r3
 8001daa:	214d      	movs	r1, #77	; 0x4d
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fe39 	bl	8001a24 <rfm95_write>
 8001db2:	4603      	mov	r3, r0
 8001db4:	f083 0301 	eor.w	r3, r3, #1
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <rfm95_set_power+0xce>
		return false;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	e000      	b.n	8001dc4 <rfm95_set_power+0xd0>

	return true;
 8001dc2:	2301      	movs	r3, #1
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	0800f060 	.word	0x0800f060
 8001dd0:	0800f2c8 	.word	0x0800f2c8
 8001dd4:	0800ef54 	.word	0x0800ef54

08001dd8 <rfm95_send_package>:

static bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data,
		size_t length, uint8_t channel) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	70fb      	strb	r3, [r7, #3]
	assert(channel < 9);
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d905      	bls.n	8001df8 <rfm95_send_package+0x20>
 8001dec:	4b86      	ldr	r3, [pc, #536]	; (8002008 <rfm95_send_package+0x230>)
 8001dee:	4a87      	ldr	r2, [pc, #540]	; (800200c <rfm95_send_package+0x234>)
 8001df0:	21e5      	movs	r1, #229	; 0xe5
 8001df2:	4887      	ldr	r0, [pc, #540]	; (8002010 <rfm95_send_package+0x238>)
 8001df4:	f00a f800 	bl	800bdf8 <__assert_func>

	uint32_t tick_start;

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001df8:	2281      	movs	r2, #129	; 0x81
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	f7ff fe11 	bl	8001a24 <rfm95_write>
 8001e02:	4603      	mov	r3, r0
 8001e04:	f083 0301 	eor.w	r3, r3, #1
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <rfm95_send_package+0x3a>
	RFM95_REGISTER_OP_MODE_LORA_STANDBY))
		return false;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	e0f5      	b.n	8001ffe <rfm95_send_package+0x226>

	tick_start = HAL_GetTick();
 8001e12:	f002 fb03 	bl	800441c <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8001e18:	e00d      	b.n	8001e36 <rfm95_send_package+0x5e>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - tick_start) >= RFM95_WAKEUP_TIMEOUT) {
 8001e1a:	f002 faff 	bl	800441c <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d906      	bls.n	8001e36 <rfm95_send_package+0x5e>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff fdf9 	bl	8001a24 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e0e3      	b.n	8001ffe <rfm95_send_package+0x226>
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8c1b      	ldrh	r3, [r3, #32]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4610      	mov	r0, r2
 8001e42:	f002 fdd7 	bl	80049f4 <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0e6      	beq.n	8001e1a <rfm95_send_package+0x42>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_FR_MSB,
 8001e4c:	78fa      	ldrb	r2, [r7, #3]
 8001e4e:	4971      	ldr	r1, [pc, #452]	; (8002014 <rfm95_send_package+0x23c>)
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2106      	movs	r1, #6
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fde0 	bl	8001a24 <rfm95_write>
 8001e64:	4603      	mov	r3, r0
 8001e66:	f083 0301 	eor.w	r3, r3, #1
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <rfm95_send_package+0x9c>
			eu863_lora_frequency[channel][0]))
		return false;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e0c4      	b.n	8001ffe <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_MID,
 8001e74:	78fa      	ldrb	r2, [r7, #3]
 8001e76:	4967      	ldr	r1, [pc, #412]	; (8002014 <rfm95_send_package+0x23c>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	440b      	add	r3, r1
 8001e80:	3301      	adds	r3, #1
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	2107      	movs	r1, #7
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f7ff fdcb 	bl	8001a24 <rfm95_write>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f083 0301 	eor.w	r3, r3, #1
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <rfm95_send_package+0xc6>
			eu863_lora_frequency[channel][1]))
		return false;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	e0af      	b.n	8001ffe <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_LSB,
 8001e9e:	78fa      	ldrb	r2, [r7, #3]
 8001ea0:	495c      	ldr	r1, [pc, #368]	; (8002014 <rfm95_send_package+0x23c>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4413      	add	r3, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3302      	adds	r3, #2
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2108      	movs	r1, #8
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff fdb6 	bl	8001a24 <rfm95_write>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	f083 0301 	eor.w	r3, r3, #1
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <rfm95_send_package+0xf0>
			eu863_lora_frequency[channel][2]))
		return false;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	e09a      	b.n	8001ffe <rfm95_send_package+0x226>

	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 8001ec8:	2272      	movs	r2, #114	; 0x72
 8001eca:	211d      	movs	r1, #29
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fda9 	bl	8001a24 <rfm95_write>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	f083 0301 	eor.w	r3, r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <rfm95_send_package+0x10a>
		return false;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e08d      	b.n	8001ffe <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 8001ee2:	2274      	movs	r2, #116	; 0x74
 8001ee4:	211e      	movs	r1, #30
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f7ff fd9c 	bl	8001a24 <rfm95_write>
 8001eec:	4603      	mov	r3, r0
 8001eee:	f083 0301 	eor.w	r3, r3, #1
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <rfm95_send_package+0x124>
		return false;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	e080      	b.n	8001ffe <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 8001efc:	2204      	movs	r2, #4
 8001efe:	2126      	movs	r1, #38	; 0x26
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f7ff fd8f 	bl	8001a24 <rfm95_write>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <rfm95_send_package+0x13e>
		return false;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e073      	b.n	8001ffe <rfm95_send_package+0x226>

	if (!rfm95_write(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2122      	movs	r1, #34	; 0x22
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff fd80 	bl	8001a24 <rfm95_write>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f083 0301 	eor.w	r3, r3, #1
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <rfm95_send_package+0x15c>
		return false;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e064      	b.n	8001ffe <rfm95_send_package+0x226>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8001f34:	2280      	movs	r2, #128	; 0x80
 8001f36:	210d      	movs	r1, #13
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7ff fd73 	bl	8001a24 <rfm95_write>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <rfm95_send_package+0x176>
		return false;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	e057      	b.n	8001ffe <rfm95_send_package+0x226>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	e00b      	b.n	8001f6c <rfm95_send_package+0x194>
		rfm95_write(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8001f54:	68ba      	ldr	r2, [r7, #8]
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	4413      	add	r3, r2
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2100      	movs	r1, #0
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7ff fd5f 	bl	8001a24 <rfm95_write>
	for (size_t i = 0; i < length; i++) {
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3ef      	bcc.n	8001f54 <rfm95_send_package+0x17c>
	}

	if (!rfm95_write(handle, RFM95_REGISTER_DIO_MAPPING_1,
 8001f74:	2240      	movs	r2, #64	; 0x40
 8001f76:	2140      	movs	r1, #64	; 0x40
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff fd53 	bl	8001a24 <rfm95_write>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f083 0301 	eor.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <rfm95_send_package+0x1b6>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e037      	b.n	8001ffe <rfm95_send_package+0x226>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001f8e:	2283      	movs	r2, #131	; 0x83
 8001f90:	2101      	movs	r1, #1
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7ff fd46 	bl	8001a24 <rfm95_write>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <rfm95_send_package+0x1d0>
	RFM95_REGISTER_OP_MODE_LORA_TX))
		return false;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e02a      	b.n	8001ffe <rfm95_send_package+0x226>

	tick_start = HAL_GetTick();
 8001fa8:	f002 fa38 	bl	800441c <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8001fae:	e00d      	b.n	8001fcc <rfm95_send_package+0x1f4>
		if ((HAL_GetTick() - tick_start) >= RFM95_SEND_TIMEOUT) {
 8001fb0:	f002 fa34 	bl	800441c <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b13      	cmp	r3, #19
 8001fbc:	d906      	bls.n	8001fcc <rfm95_send_package+0x1f4>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f7ff fd2e 	bl	8001a24 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e018      	b.n	8001ffe <rfm95_send_package+0x226>
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	8b1b      	ldrh	r3, [r3, #24]
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	f002 fd0c 	bl	80049f4 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0e6      	beq.n	8001fb0 <rfm95_send_package+0x1d8>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	f7ff fd1c 	bl	8001a24 <rfm95_write>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f083 0301 	eor.w	r3, r3, #1
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <rfm95_send_package+0x224>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	e000      	b.n	8001ffe <rfm95_send_package+0x226>

	return true;
 8001ffc:	2301      	movs	r3, #1
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	0800f08c 	.word	0x0800f08c
 800200c:	0800f2d8 	.word	0x0800f2d8
 8002010:	0800ef54 	.word	0x0800ef54
 8002014:	0800f2a0 	.word	0x0800f2a0

08002018 <rfm95_send_data_groundstation>:

bool rfm95_send_data_groundstation(rfm95_handle_t *handle) {
 8002018:	b580      	push	{r7, lr}
 800201a:	b08e      	sub	sp, #56	; 0x38
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

	// Set TTN sync word 0x12.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x12))
 8002020:	2212      	movs	r2, #18
 8002022:	2139      	movs	r1, #57	; 0x39
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff fcfd 	bl	8001a24 <rfm95_write>
 800202a:	4603      	mov	r3, r0
 800202c:	f083 0301 	eor.w	r3, r3, #1
 8002030:	b2db      	uxtb	r3, r3
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <rfm95_send_data_groundstation+0x22>
		return false;
 8002036:	2300      	movs	r3, #0
 8002038:	e0cf      	b.n	80021da <rfm95_send_data_groundstation+0x1c2>

	size_t length = LENGHT_GROUNDSTATION;
 800203a:	230b      	movs	r3, #11
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t ident = IDENT;
 800203e:	2309      	movs	r3, #9
 8002040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t rfm_data[LENGHT_GROUNDSTATION];
	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
 8002044:	230b      	movs	r3, #11
 8002046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	unsigned long latitude = handle->latitude;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	623b      	str	r3, [r7, #32]
	unsigned long longitude = handle->longitude;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002054:	61fb      	str	r3, [r7, #28]
	unsigned altitude = handle->altitude;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800205a:	61bb      	str	r3, [r7, #24]



	// set identifier to 1 for bits
	rfm_data[0] = ((ident << 4) & 0xf0);
 800205c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	b2db      	uxtb	r3, r3
 8002064:	733b      	strb	r3, [r7, #12]
	// set the next for bits with the orientation
	if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'E') {
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800206c:	2b4e      	cmp	r3, #78	; 0x4e
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2da      	uxtb	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800207c:	2b45      	cmp	r3, #69	; 0x45
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	4013      	ands	r3, r2
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d005      	beq.n	800209a <rfm95_send_data_groundstation+0x82>
		rfm_data[0] = (rfm_data[0] | 0x01);
 800208e:	7b3b      	ldrb	r3, [r7, #12]
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	733b      	strb	r3, [r7, #12]
 8002098:	e04f      	b.n	800213a <rfm95_send_data_groundstation+0x122>
	} else if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'W') {
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80020a0:	2b4e      	cmp	r3, #78	; 0x4e
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020b0:	2b57      	cmp	r3, #87	; 0x57
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	4013      	ands	r3, r2
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <rfm95_send_data_groundstation+0xb6>
		rfm_data[0] = (rfm_data[0] | 0x02);
 80020c2:	7b3b      	ldrb	r3, [r7, #12]
 80020c4:	f043 0302 	orr.w	r3, r3, #2
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	733b      	strb	r3, [r7, #12]
 80020cc:	e035      	b.n	800213a <rfm95_send_data_groundstation+0x122>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'E') {
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80020d4:	2b53      	cmp	r3, #83	; 0x53
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80020e4:	2b45      	cmp	r3, #69	; 0x45
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	4013      	ands	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d005      	beq.n	8002102 <rfm95_send_data_groundstation+0xea>
		rfm_data[0] = (rfm_data[0] | 0x03);
 80020f6:	7b3b      	ldrb	r3, [r7, #12]
 80020f8:	f043 0303 	orr.w	r3, r3, #3
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	733b      	strb	r3, [r7, #12]
 8002100:	e01b      	b.n	800213a <rfm95_send_data_groundstation+0x122>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'W') {
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002108:	2b53      	cmp	r3, #83	; 0x53
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2da      	uxtb	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002118:	2b57      	cmp	r3, #87	; 0x57
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4013      	ands	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <rfm95_send_data_groundstation+0x11e>
		rfm_data[0] = (rfm_data[0] | 0x04);
 800212a:	7b3b      	ldrb	r3, [r7, #12]
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	b2db      	uxtb	r3, r3
 8002132:	733b      	strb	r3, [r7, #12]
 8002134:	e001      	b.n	800213a <rfm95_send_data_groundstation+0x122>
	} else {
		rfm_data[0] = (rfm_data[0] | 0x00);
 8002136:	7b3b      	ldrb	r3, [r7, #12]
 8002138:	733b      	strb	r3, [r7, #12]
	}

	// set latitude
	for (int i = 0; i < 4; i++) {
 800213a:	2300      	movs	r3, #0
 800213c:	637b      	str	r3, [r7, #52]	; 0x34
 800213e:	e00e      	b.n	800215e <rfm95_send_data_groundstation+0x146>
		rfm_data[4 - i] = ((latitude >> (i * 8)) & 0xFF);
 8002140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	6a3a      	ldr	r2, [r7, #32]
 8002146:	40da      	lsrs	r2, r3
 8002148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800214a:	f1c3 0304 	rsb	r3, r3, #4
 800214e:	b2d2      	uxtb	r2, r2
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	443b      	add	r3, r7
 8002154:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i = 0; i < 4; i++) {
 8002158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800215a:	3301      	adds	r3, #1
 800215c:	637b      	str	r3, [r7, #52]	; 0x34
 800215e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002160:	2b03      	cmp	r3, #3
 8002162:	dded      	ble.n	8002140 <rfm95_send_data_groundstation+0x128>
	}
	for (int i = 0; i < 4; i++) {
 8002164:	2300      	movs	r3, #0
 8002166:	633b      	str	r3, [r7, #48]	; 0x30
 8002168:	e00e      	b.n	8002188 <rfm95_send_data_groundstation+0x170>
		rfm_data[8 - i] = ((longitude >> (i * 8)) & 0xFF);
 800216a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	40da      	lsrs	r2, r3
 8002172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002174:	f1c3 0308 	rsb	r3, r3, #8
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	3338      	adds	r3, #56	; 0x38
 800217c:	443b      	add	r3, r7
 800217e:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i = 0; i < 4; i++) {
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	3301      	adds	r3, #1
 8002186:	633b      	str	r3, [r7, #48]	; 0x30
 8002188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800218a:	2b03      	cmp	r3, #3
 800218c:	dded      	ble.n	800216a <rfm95_send_data_groundstation+0x152>
	}

	for (int i = 0; i < 2; i++) {
 800218e:	2300      	movs	r3, #0
 8002190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002192:	e00e      	b.n	80021b2 <rfm95_send_data_groundstation+0x19a>
		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
 8002194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	40da      	lsrs	r2, r3
 800219c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800219e:	f1c3 030a 	rsb	r3, r3, #10
 80021a2:	b2d2      	uxtb	r2, r2
 80021a4:	3338      	adds	r3, #56	; 0x38
 80021a6:	443b      	add	r3, r7
 80021a8:	f803 2c2c 	strb.w	r2, [r3, #-44]
	for (int i = 0; i < 2; i++) {
 80021ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021ae:	3301      	adds	r3, #1
 80021b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	dded      	ble.n	8002194 <rfm95_send_data_groundstation+0x17c>
//		rfm_data[0] = 0x53;
//		rfm_data[1] = 0x4f;
//		rfm_data[2] = 0x53;


	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 80021b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80021bc:	f107 010c 	add.w	r1, r7, #12
 80021c0:	2308      	movs	r3, #8
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff fe08 	bl	8001dd8 <rfm95_send_package>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f083 0301 	eor.w	r3, r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d001      	beq.n	80021d8 <rfm95_send_data_groundstation+0x1c0>
			8)) {
		return false;
 80021d4:	2300      	movs	r3, #0
 80021d6:	e000      	b.n	80021da <rfm95_send_data_groundstation+0x1c2>
	}
	return true;
 80021d8:	2301      	movs	r3, #1
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3738      	adds	r7, #56	; 0x38
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
	...

080021e4 <rfm95_send_data>:

bool rfm95_send_data(rfm95_handle_t *handle, const uint8_t *data, size_t length) {
 80021e4:	b590      	push	{r4, r7, lr}
 80021e6:	b09d      	sub	sp, #116	; 0x74
 80021e8:	af02      	add	r7, sp, #8
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 80021f0:	2234      	movs	r2, #52	; 0x34
 80021f2:	2139      	movs	r1, #57	; 0x39
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff fc15 	bl	8001a24 <rfm95_write>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <rfm95_send_data+0x26>
		return false;
 8002206:	2300      	movs	r3, #0
 8002208:	e0df      	b.n	80023ca <rfm95_send_data+0x1e6>

	// 64 bytes is maximum size of FIFO
	assert(length + 4 + 9 <= 64);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	330d      	adds	r3, #13
 800220e:	2b40      	cmp	r3, #64	; 0x40
 8002210:	d906      	bls.n	8002220 <rfm95_send_data+0x3c>
 8002212:	4b70      	ldr	r3, [pc, #448]	; (80023d4 <rfm95_send_data+0x1f0>)
 8002214:	4a70      	ldr	r2, [pc, #448]	; (80023d8 <rfm95_send_data+0x1f4>)
 8002216:	f240 116b 	movw	r1, #363	; 0x16b
 800221a:	4870      	ldr	r0, [pc, #448]	; (80023dc <rfm95_send_data+0x1f8>)
 800221c:	f009 fdec 	bl	800bdf8 <__assert_func>

	uint8_t direction = 0; // Up
 8002220:	2300      	movs	r3, #0
 8002222:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t frame_control = 0x00;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t frame_port = 0x01;
 800222c:	2301      	movs	r3, #1
 800222e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t mac_header = 0x40;
 8002232:	2340      	movs	r3, #64	; 0x40
 8002234:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	uint8_t rfm_data[64 + 4 + 9];
	uint8_t rfm_package_length = 0;
 8002238:	2300      	movs	r3, #0
 800223a:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t mic[4];

	rfm_data[0] = mac_header;
 800223e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8002242:	753b      	strb	r3, [r7, #20]
	rfm_data[1] = handle->device_address[3];
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800224a:	757b      	strb	r3, [r7, #21]
	rfm_data[2] = handle->device_address[2];
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002252:	75bb      	strb	r3, [r7, #22]
	rfm_data[3] = handle->device_address[1];
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800225a:	75fb      	strb	r3, [r7, #23]
	rfm_data[4] = handle->device_address[0];
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002262:	763b      	strb	r3, [r7, #24]
	rfm_data[5] = frame_control;
 8002264:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8002268:	767b      	strb	r3, [r7, #25]
	rfm_data[6] = (handle->tx_frame_count & 0x00ffu);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002270:	b2db      	uxtb	r3, r3
 8002272:	76bb      	strb	r3, [r7, #26]
	rfm_data[7] = ((uint16_t) (handle->tx_frame_count >> 8u) & 0x00ffu);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	b29b      	uxth	r3, r3
 800227e:	b2db      	uxtb	r3, r3
 8002280:	76fb      	strb	r3, [r7, #27]
	rfm_data[8] = frame_port;
 8002282:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8002286:	773b      	strb	r3, [r7, #28]
	rfm_package_length += 9;
 8002288:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800228c:	3309      	adds	r3, #9
 800228e:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Copy network and application session keys as well as device address to variables of encryption library
	memcpy(NwkSkey, handle->network_session_key,
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	3326      	adds	r3, #38	; 0x26
 8002296:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <rfm95_send_data+0x1fc>)
 8002298:	4614      	mov	r4, r2
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	6859      	ldr	r1, [r3, #4]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	68db      	ldr	r3, [r3, #12]
 80022a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->network_session_key));
	memcpy(AppSkey, handle->application_session_key,
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	3336      	adds	r3, #54	; 0x36
 80022a8:	4a4e      	ldr	r2, [pc, #312]	; (80023e4 <rfm95_send_data+0x200>)
 80022aa:	4614      	mov	r4, r2
 80022ac:	6818      	ldr	r0, [r3, #0]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->application_session_key));
	memcpy(DevAddr, handle->device_address, sizeof(handle->device_address));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3322      	adds	r3, #34	; 0x22
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <rfm95_send_data+0x204>)
 80022c0:	601a      	str	r2, [r3, #0]

	// Encrypt payload in place in package.
	memcpy(rfm_data + rfm_package_length, data, length);
 80022c2:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80022c6:	f107 0214 	add.w	r2, r7, #20
 80022ca:	4413      	add	r3, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f009 fdef 	bl	800beb4 <memcpy>
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 80022d6:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80022da:	f107 0214 	add.w	r2, r7, #20
 80022de:	18d0      	adds	r0, r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	b2d9      	uxtb	r1, r3
			handle->tx_frame_count, direction);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 80022ea:	461a      	mov	r2, r3
 80022ec:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80022f0:	f7ff f87c 	bl	80013ec <Encrypt_Payload>
	rfm_package_length += length;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80022fc:	4413      	add	r3, r2
 80022fe:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Calculate MIC and copy to last 4 bytes of the package.
	Calculate_MIC(rfm_data, mic, rfm_package_length, handle->tx_frame_count,
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002308:	461c      	mov	r4, r3
 800230a:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800230e:	f107 0110 	add.w	r1, r7, #16
 8002312:	f107 0014 	add.w	r0, r7, #20
 8002316:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4623      	mov	r3, r4
 800231e:	f7ff f91d 	bl	800155c <Calculate_MIC>
			direction);
	for (uint8_t i = 0; i < 4; i++) {
 8002322:	2300      	movs	r3, #0
 8002324:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002328:	e013      	b.n	8002352 <rfm95_send_data+0x16e>
		rfm_data[rfm_package_length + i] = mic[i];
 800232a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800232e:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8002332:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002336:	440b      	add	r3, r1
 8002338:	3268      	adds	r2, #104	; 0x68
 800233a:	443a      	add	r2, r7
 800233c:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8002340:	3368      	adds	r3, #104	; 0x68
 8002342:	443b      	add	r3, r7
 8002344:	f803 2c54 	strb.w	r2, [r3, #-84]
	for (uint8_t i = 0; i < 4; i++) {
 8002348:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800234c:	3301      	adds	r3, #1
 800234e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002352:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002356:	2b03      	cmp	r3, #3
 8002358:	d9e7      	bls.n	800232a <rfm95_send_data+0x146>
	}
	rfm_package_length += 4;
 800235a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800235e:	3304      	adds	r3, #4
 8002360:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	uint8_t pseudorandom_channel = rfm_data[rfm_package_length - 1] & 0x7u;
 8002364:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8002368:	3b01      	subs	r3, #1
 800236a:	3368      	adds	r3, #104	; 0x68
 800236c:	443b      	add	r3, r7
 800236e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 800237a:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 800237e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8002382:	f107 0114 	add.w	r1, r7, #20
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f7ff fd26 	bl	8001dd8 <rfm95_send_package>
 800238c:	4603      	mov	r3, r0
 800238e:	f083 0301 	eor.w	r3, r3, #1
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <rfm95_send_data+0x1b8>
			pseudorandom_channel)) {
		return false;
 8002398:	2300      	movs	r3, #0
 800239a:	e016      	b.n	80023ca <rfm95_send_data+0x1e6>
	}

	handle->tx_frame_count++;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023a2:	3301      	adds	r3, #1
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if (handle->save_frame_counter != NULL) {
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <rfm95_send_data+0x1e4>
		handle->save_frame_counter(handle->tx_frame_count,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	68fa      	ldr	r2, [r7, #12]
 80023ba:	f8b2 0052 	ldrh.w	r0, [r2, #82]	; 0x52
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80023c4:	4611      	mov	r1, r2
 80023c6:	4798      	blx	r3
				handle->rx_frame_count);
	}
	return true;
 80023c8:	2301      	movs	r3, #1
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	376c      	adds	r7, #108	; 0x6c
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	0800f098 	.word	0x0800f098
 80023d8:	0800f2ec 	.word	0x0800f2ec
 80023dc:	0800ef54 	.word	0x0800ef54
 80023e0:	20000424 	.word	0x20000424
 80023e4:	20000434 	.word	0x20000434
 80023e8:	20000444 	.word	0x20000444

080023ec <FlowInit>:
#include <stdio.h>

#define LORAINTERVALL 5
extern SPI_HandleTypeDef hspi2;

FlowInit(rfm95_handle_t *handle) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
	// Initialise RFM95 module.
	if (!rfm95_init(handle)) {
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff fb65 	bl	8001ac4 <rfm95_init>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f083 0301 	eor.w	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <FlowInit+0x22>
		printf("RFM95 init failed\n\r");
 8002406:	4805      	ldr	r0, [pc, #20]	; (800241c <FlowInit+0x30>)
 8002408:	f00a fb2e 	bl	800ca68 <iprintf>
	} else {
		printf("RFM95 init sucess\n\r");
	}
}
 800240c:	e002      	b.n	8002414 <FlowInit+0x28>
		printf("RFM95 init sucess\n\r");
 800240e:	4804      	ldr	r0, [pc, #16]	; (8002420 <FlowInit+0x34>)
 8002410:	f00a fb2a 	bl	800ca68 <iprintf>
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	0800f0b0 	.word	0x0800f0b0
 8002420:	0800f0c4 	.word	0x0800f0c4

08002424 <Flow>:

Flow(rfm95_handle_t *handle) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b09c      	sub	sp, #112	; 0x70
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
//		printf("RFM95 send failed\n\r");
//	} else {
//		printf("RFM95 send success\n\r");
//	}

	size_t length = LENGHT_GROUNDSTATION;
 800242c:	230b      	movs	r3, #11
 800242e:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t ident = IDENT;
 8002430:	2309      	movs	r3, #9
 8002432:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t rfm_data[LENGHT_GROUNDSTATION];
	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
 8002436:	230b      	movs	r3, #11
 8002438:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	unsigned long latitude = handle->latitude;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned long longitude = handle->longitude;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002446:	657b      	str	r3, [r7, #84]	; 0x54
	unsigned altitude = handle->altitude;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800244c:	653b      	str	r3, [r7, #80]	; 0x50



	// set identifier to 1 for bits
	rfm_data[0] = ((ident << 4) & 0xf0);
 800244e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	b2db      	uxtb	r3, r3
 8002456:	733b      	strb	r3, [r7, #12]
	// set the next for bits with the orientation
	if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'E') {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800245e:	2b4e      	cmp	r3, #78	; 0x4e
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2da      	uxtb	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800246e:	2b45      	cmp	r3, #69	; 0x45
 8002470:	bf0c      	ite	eq
 8002472:	2301      	moveq	r3, #1
 8002474:	2300      	movne	r3, #0
 8002476:	b2db      	uxtb	r3, r3
 8002478:	4013      	ands	r3, r2
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <Flow+0x68>
		rfm_data[0] = (rfm_data[0] | 0x01);
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	b2db      	uxtb	r3, r3
 8002488:	733b      	strb	r3, [r7, #12]
 800248a:	e04f      	b.n	800252c <Flow+0x108>
	} else if (handle->latitude_or[0] == 'N' & handle->longitude_or[0] == 'W') {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8002492:	2b4e      	cmp	r3, #78	; 0x4e
 8002494:	bf0c      	ite	eq
 8002496:	2301      	moveq	r3, #1
 8002498:	2300      	movne	r3, #0
 800249a:	b2da      	uxtb	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024a2:	2b57      	cmp	r3, #87	; 0x57
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	4013      	ands	r3, r2
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <Flow+0x9c>
		rfm_data[0] = (rfm_data[0] | 0x02);
 80024b4:	7b3b      	ldrb	r3, [r7, #12]
 80024b6:	f043 0302 	orr.w	r3, r3, #2
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	733b      	strb	r3, [r7, #12]
 80024be:	e035      	b.n	800252c <Flow+0x108>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'E') {
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80024c6:	2b53      	cmp	r3, #83	; 0x53
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2da      	uxtb	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024d6:	2b45      	cmp	r3, #69	; 0x45
 80024d8:	bf0c      	ite	eq
 80024da:	2301      	moveq	r3, #1
 80024dc:	2300      	movne	r3, #0
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4013      	ands	r3, r2
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <Flow+0xd0>
		rfm_data[0] = (rfm_data[0] | 0x03);
 80024e8:	7b3b      	ldrb	r3, [r7, #12]
 80024ea:	f043 0303 	orr.w	r3, r3, #3
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	733b      	strb	r3, [r7, #12]
 80024f2:	e01b      	b.n	800252c <Flow+0x108>
	} else if (handle->latitude_or[0] == 'S' & handle->longitude_or[0] == 'W') {
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80024fa:	2b53      	cmp	r3, #83	; 0x53
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2da      	uxtb	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800250a:	2b57      	cmp	r3, #87	; 0x57
 800250c:	bf0c      	ite	eq
 800250e:	2301      	moveq	r3, #1
 8002510:	2300      	movne	r3, #0
 8002512:	b2db      	uxtb	r3, r3
 8002514:	4013      	ands	r3, r2
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d005      	beq.n	8002528 <Flow+0x104>
		rfm_data[0] = (rfm_data[0] | 0x04);
 800251c:	7b3b      	ldrb	r3, [r7, #12]
 800251e:	f043 0304 	orr.w	r3, r3, #4
 8002522:	b2db      	uxtb	r3, r3
 8002524:	733b      	strb	r3, [r7, #12]
 8002526:	e001      	b.n	800252c <Flow+0x108>
	} else {
		rfm_data[0] = (rfm_data[0] | 0x00);
 8002528:	7b3b      	ldrb	r3, [r7, #12]
 800252a:	733b      	strb	r3, [r7, #12]
	}

	// set latitude
	for (int i = 0; i < 4; i++) {
 800252c:	2300      	movs	r3, #0
 800252e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002530:	e00e      	b.n	8002550 <Flow+0x12c>
		rfm_data[4 - i] = ((latitude >> (i * 8)) & 0xFF);
 8002532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002538:	40da      	lsrs	r2, r3
 800253a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800253c:	f1c3 0304 	rsb	r3, r3, #4
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	3370      	adds	r3, #112	; 0x70
 8002544:	443b      	add	r3, r7
 8002546:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 4; i++) {
 800254a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800254c:	3301      	adds	r3, #1
 800254e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002552:	2b03      	cmp	r3, #3
 8002554:	dded      	ble.n	8002532 <Flow+0x10e>
	}
	for (int i = 0; i < 4; i++) {
 8002556:	2300      	movs	r3, #0
 8002558:	66bb      	str	r3, [r7, #104]	; 0x68
 800255a:	e00e      	b.n	800257a <Flow+0x156>
		rfm_data[8 - i] = ((longitude >> (i * 8)) & 0xFF);
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002562:	40da      	lsrs	r2, r3
 8002564:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002566:	f1c3 0308 	rsb	r3, r3, #8
 800256a:	b2d2      	uxtb	r2, r2
 800256c:	3370      	adds	r3, #112	; 0x70
 800256e:	443b      	add	r3, r7
 8002570:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 4; i++) {
 8002574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002576:	3301      	adds	r3, #1
 8002578:	66bb      	str	r3, [r7, #104]	; 0x68
 800257a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800257c:	2b03      	cmp	r3, #3
 800257e:	dded      	ble.n	800255c <Flow+0x138>
	}

	for (int i = 0; i < 2; i++) {
 8002580:	2300      	movs	r3, #0
 8002582:	667b      	str	r3, [r7, #100]	; 0x64
 8002584:	e00e      	b.n	80025a4 <Flow+0x180>
		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
 8002586:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002588:	00db      	lsls	r3, r3, #3
 800258a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800258c:	40da      	lsrs	r2, r3
 800258e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002590:	f1c3 030a 	rsb	r3, r3, #10
 8002594:	b2d2      	uxtb	r2, r2
 8002596:	3370      	adds	r3, #112	; 0x70
 8002598:	443b      	add	r3, r7
 800259a:	f803 2c64 	strb.w	r2, [r3, #-100]
	for (int i = 0; i < 2; i++) {
 800259e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a0:	3301      	adds	r3, #1
 80025a2:	667b      	str	r3, [r7, #100]	; 0x64
 80025a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	dded      	ble.n	8002586 <Flow+0x162>
	}


	if (!rfm95_send_data(handle, rfm_data, sizeof(rfm_data))) {
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	220b      	movs	r2, #11
 80025b0:	4619      	mov	r1, r3
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fe16 	bl	80021e4 <rfm95_send_data>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f083 0301 	eor.w	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d003      	beq.n	80025cc <Flow+0x1a8>
		printf("RFM95 send failed\n\r");
 80025c4:	4810      	ldr	r0, [pc, #64]	; (8002608 <Flow+0x1e4>)
 80025c6:	f00a fa4f 	bl	800ca68 <iprintf>
 80025ca:	e002      	b.n	80025d2 <Flow+0x1ae>
	} else {
		printf("RFM95 send success\n\r");
 80025cc:	480f      	ldr	r0, [pc, #60]	; (800260c <Flow+0x1e8>)
 80025ce:	f00a fa4b 	bl	800ca68 <iprintf>
	}

	if (!rfm95_send_data_groundstation(handle)) {
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fd20 	bl	8002018 <rfm95_send_data_groundstation>
 80025d8:	4603      	mov	r3, r0
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <Flow+0x1c8>
		printf("RFM95 send failed\n\r");
 80025e4:	4808      	ldr	r0, [pc, #32]	; (8002608 <Flow+0x1e4>)
 80025e6:	f00a fa3f 	bl	800ca68 <iprintf>
 80025ea:	e002      	b.n	80025f2 <Flow+0x1ce>
	} else {
		printf("RFM95 send success\n\r");
 80025ec:	4807      	ldr	r0, [pc, #28]	; (800260c <Flow+0x1e8>)
 80025ee:	f00a fa3b 	bl	800ca68 <iprintf>
	}

//	}

	loraCounter++;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <Flow+0x1ec>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	3301      	adds	r3, #1
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <Flow+0x1ec>)
 80025fc:	701a      	strb	r2, [r3, #0]
}
 80025fe:	bf00      	nop
 8002600:	3770      	adds	r7, #112	; 0x70
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	0800f0d8 	.word	0x0800f0d8
 800260c:	0800f0ec 	.word	0x0800f0ec
 8002610:	20000448 	.word	0x20000448

08002614 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8002614:	b40f      	push	{r0, r1, r2, r3}
 8002616:	b580      	push	{r7, lr}
 8002618:	b082      	sub	sp, #8
 800261a:	af00      	add	r7, sp, #0
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <myprintf+0x34>)
 800262c:	f00a fb96 	bl	800cd5c <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8002630:	4805      	ldr	r0, [pc, #20]	; (8002648 <myprintf+0x34>)
 8002632:	f7fd fdcd 	bl	80001d0 <strlen>
 8002636:	4603      	mov	r3, r0
 8002638:	607b      	str	r3, [r7, #4]
	//HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);

}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002644:	b004      	add	sp, #16
 8002646:	4770      	bx	lr
 8002648:	20000640 	.word	0x20000640

0800264c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800264c:	b5b0      	push	{r4, r5, r7, lr}
 800264e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 8002652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002654:	f001 fe7a 	bl	800434c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002658:	f000 fa4c 	bl	8002af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800265c:	f000 fba2 	bl	8002da4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002660:	f000 fb0a 	bl	8002c78 <MX_SPI2_Init>
  MX_TIM16_Init();
 8002664:	f000 fb46 	bl	8002cf4 <MX_TIM16_Init>
  MX_I2C1_Init();
 8002668:	f000 fa8a 	bl	8002b80 <MX_I2C1_Init>
  MX_SPI1_Init();
 800266c:	f000 fac6 	bl	8002bfc <MX_SPI1_Init>
  MX_FATFS_Init();
 8002670:	f006 fcba 	bl	8008fe8 <MX_FATFS_Init>
  MX_UART4_Init();
 8002674:	f000 fb66 	bl	8002d44 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	FlowInit(&rfm95_handle);
 8002678:	48cf      	ldr	r0, [pc, #828]	; (80029b8 <main+0x36c>)
 800267a:	f7ff feb7 	bl	80023ec <FlowInit>

	errIni = PCA9847_Initialise(&multiplexer, &hi2c1);
 800267e:	49cf      	ldr	r1, [pc, #828]	; (80029bc <main+0x370>)
 8002680:	48cf      	ldr	r0, [pc, #828]	; (80029c0 <main+0x374>)
 8002682:	f001 fd47 	bl	8004114 <PCA9847_Initialise>
 8002686:	4603      	mov	r3, r0
 8002688:	461a      	mov	r2, r3
 800268a:	4bce      	ldr	r3, [pc, #824]	; (80029c4 <main+0x378>)
 800268c:	701a      	strb	r2, [r3, #0]
	Setup_Spectralsensor();
 800268e:	f000 fcb9 	bl	8003004 <Setup_Spectralsensor>
//	NVIC_SetPriority(SysTick_IRQn, 0);

//	PCA9847_SetChannel(&multiplexer, 5);
//	SHT41_read(&temp_innen);

	HAL_TIM_Base_Start_IT(&htim16);
 8002692:	48cd      	ldr	r0, [pc, #820]	; (80029c8 <main+0x37c>)
 8002694:	f005 fcb0 	bl	8007ff8 <HAL_TIM_Base_Start_IT>

//	Write_SD_Card(&rfm95_handle);
//	Write_SD_Card(&rfm95_handle);

	char bfr[1024];
	char msgSep = '$';
 8002698:	2324      	movs	r3, #36	; 0x24
 800269a:	f887 3443 	strb.w	r3, [r7, #1091]	; 0x443
	char msgSep1 = 'G';
 800269e:	2347      	movs	r3, #71	; 0x47
 80026a0:	f887 3442 	strb.w	r3, [r7, #1090]	; 0x442
	char msgSep2 = 'N';
 80026a4:	234e      	movs	r3, #78	; 0x4e
 80026a6:	f887 3441 	strb.w	r3, [r7, #1089]	; 0x441
	char msgSep3 = 'G';
 80026aa:	2347      	movs	r3, #71	; 0x47
 80026ac:	f887 3440 	strb.w	r3, [r7, #1088]	; 0x440
	char msgSep4 = 'G';
 80026b0:	2347      	movs	r3, #71	; 0x47
 80026b2:	f887 343f 	strb.w	r3, [r7, #1087]	; 0x43f
	char msgSep5 = 'A';
 80026b6:	2341      	movs	r3, #65	; 0x41
 80026b8:	f887 343e 	strb.w	r3, [r7, #1086]	; 0x43e

	char part_string[13];
	uint16_t who[] = { 9, 12, 1, 13, 1, 1, 2, 4, 5 };
 80026bc:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80026c0:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80026c4:	4ac1      	ldr	r2, [pc, #772]	; (80029cc <main+0x380>)
 80026c6:	461c      	mov	r4, r3
 80026c8:	4615      	mov	r5, r2
 80026ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026ce:	682b      	ldr	r3, [r5, #0]
 80026d0:	8023      	strh	r3, [r4, #0]

	bool foundString;
	uint16_t string_Start;

	uint16_t datapoint = 0;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
		//HAL_GPIO_TogglePin(SS1_GPIO_Port, SS1_Pin);
		//HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
		// HAL_GPIO_TogglePin(READY_LED_GPIO_Port, READY_LED_Pin);
		// HAL_Delay(5000);

		foundString = false;
 80026d8:	2300      	movs	r3, #0
 80026da:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
		string_Start = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464

		for (int o = 0; o < 1024; ++o) {
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80026ea:	e00d      	b.n	8002708 <main+0xbc>
			bfr[o] = 0;
 80026ec:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80026f0:	f5a3 6287 	sub.w	r2, r3, #1080	; 0x438
 80026f4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80026f8:	4413      	add	r3, r2
 80026fa:	2200      	movs	r2, #0
 80026fc:	701a      	strb	r2, [r3, #0]
		for (int o = 0; o < 1024; ++o) {
 80026fe:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 8002702:	3301      	adds	r3, #1
 8002704:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8002708:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800270c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002710:	dbec      	blt.n	80026ec <main+0xa0>
		}
		HAL_StatusTypeDef status;
		if (UART4->ISR & USART_ISR_ORE)
 8002712:	4baf      	ldr	r3, [pc, #700]	; (80029d0 <main+0x384>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <main+0xd8>
			UART4->ICR = USART_ICR_ORECF;
 800271e:	4bac      	ldr	r3, [pc, #688]	; (80029d0 <main+0x384>)
 8002720:	2208      	movs	r2, #8
 8002722:	621a      	str	r2, [r3, #32]

		status = HAL_UART_Receive(&huart4, (uint8_t*) bfr, sizeof(bfr), 800);
 8002724:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002728:	f44f 7348 	mov.w	r3, #800	; 0x320
 800272c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002730:	48a8      	ldr	r0, [pc, #672]	; (80029d4 <main+0x388>)
 8002732:	f005 ff1f 	bl	8008574 <HAL_UART_Receive>
 8002736:	4603      	mov	r3, r0
 8002738:	f887 343d 	strb.w	r3, [r7, #1085]	; 0x43d
		for (uint16_t i = 0; i < 1024; i++) {
 800273c:	2300      	movs	r3, #0
 800273e:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
 8002742:	e05d      	b.n	8002800 <main+0x1b4>
			if (bfr[i] == msgSep && bfr[i + 1] == msgSep1
 8002744:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 8002748:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800274c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002750:	5cd3      	ldrb	r3, [r2, r3]
 8002752:	f897 2443 	ldrb.w	r2, [r7, #1091]	; 0x443
 8002756:	429a      	cmp	r2, r3
 8002758:	d14d      	bne.n	80027f6 <main+0x1aa>
 800275a:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 800275e:	3301      	adds	r3, #1
 8002760:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002764:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002768:	5cd3      	ldrb	r3, [r2, r3]
 800276a:	f897 2442 	ldrb.w	r2, [r7, #1090]	; 0x442
 800276e:	429a      	cmp	r2, r3
 8002770:	d141      	bne.n	80027f6 <main+0x1aa>
					&& bfr[i + 2] == msgSep2 && bfr[i + 3] == msgSep3
 8002772:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 8002776:	3302      	adds	r3, #2
 8002778:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800277c:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002780:	5cd3      	ldrb	r3, [r2, r3]
 8002782:	f897 2441 	ldrb.w	r2, [r7, #1089]	; 0x441
 8002786:	429a      	cmp	r2, r3
 8002788:	d135      	bne.n	80027f6 <main+0x1aa>
 800278a:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 800278e:	3303      	adds	r3, #3
 8002790:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002794:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002798:	5cd3      	ldrb	r3, [r2, r3]
 800279a:	f897 2440 	ldrb.w	r2, [r7, #1088]	; 0x440
 800279e:	429a      	cmp	r2, r3
 80027a0:	d129      	bne.n	80027f6 <main+0x1aa>
					&& bfr[i + 4] == msgSep4 && bfr[i + 5] == msgSep5) {
 80027a2:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 80027a6:	3304      	adds	r3, #4
 80027a8:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80027ac:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80027b0:	5cd3      	ldrb	r3, [r2, r3]
 80027b2:	f897 243f 	ldrb.w	r2, [r7, #1087]	; 0x43f
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d11d      	bne.n	80027f6 <main+0x1aa>
 80027ba:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 80027be:	3305      	adds	r3, #5
 80027c0:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80027c4:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	f897 243e 	ldrb.w	r2, [r7, #1086]	; 0x43e
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d111      	bne.n	80027f6 <main+0x1aa>
//	             if (EvalFrame(&bfr[i], sample)){
//	                 return;
//	             }
				printf(bfr[i]);
 80027d2:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 80027d6:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80027da:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f00a f941 	bl	800ca68 <iprintf>
				foundString = true;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
				string_Start = i + 7;
 80027ec:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 80027f0:	3307      	adds	r3, #7
 80027f2:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
		for (uint16_t i = 0; i < 1024; i++) {
 80027f6:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 80027fa:	3301      	adds	r3, #1
 80027fc:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
 8002800:	f8b7 345a 	ldrh.w	r3, [r7, #1114]	; 0x45a
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d39c      	bcc.n	8002744 <main+0xf8>

			}
		}

		if (foundString == true) {
 800280a:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 800280e:	2b00      	cmp	r3, #0
 8002810:	f000 8150 	beq.w	8002ab4 <main+0x468>
			datapoint = 0;
 8002814:	2300      	movs	r3, #0
 8002816:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
			while (datapoint < 9) {
 800281a:	e146      	b.n	8002aaa <main+0x45e>

				for (int var = 0; var <= who[datapoint]; ++var) {
 800281c:	2300      	movs	r3, #0
 800281e:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8002822:	e056      	b.n	80028d2 <main+0x286>
					if (bfr[string_Start + var] != ',') {
 8002824:	f8b7 2464 	ldrh.w	r2, [r7, #1124]	; 0x464
 8002828:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800282c:	4413      	add	r3, r2
 800282e:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002832:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	2b2c      	cmp	r3, #44	; 0x2c
 800283a:	d013      	beq.n	8002864 <main+0x218>
						part_string[var] = bfr[string_Start + var];
 800283c:	f8b7 2464 	ldrh.w	r2, [r7, #1124]	; 0x464
 8002840:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002844:	4413      	add	r3, r2
 8002846:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800284a:	f5a2 6287 	sub.w	r2, r2, #1080	; 0x438
 800284e:	5cd1      	ldrb	r1, [r2, r3]
 8002850:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002854:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8002858:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800285c:	4413      	add	r3, r2
 800285e:	460a      	mov	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
 8002862:	e031      	b.n	80028c8 <main+0x27c>
					} else {
						if (var == 0) {
 8002864:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <main+0x232>
							part_string[var] = ',';
 800286c:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002870:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8002874:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002878:	4413      	add	r3, r2
 800287a:	222c      	movs	r2, #44	; 0x2c
 800287c:	701a      	strb	r2, [r3, #0]
						}
						string_Start = string_Start + var + 1;
 800287e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002882:	b29a      	uxth	r2, r3
 8002884:	f8b7 3464 	ldrh.w	r3, [r7, #1124]	; 0x464
 8002888:	4413      	add	r3, r2
 800288a:	b29b      	uxth	r3, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
						for (uint16_t p = var + 1; p < 13; ++p) {
 8002892:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8002896:	b29b      	uxth	r3, r3
 8002898:	3301      	adds	r3, #1
 800289a:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
 800289e:	e00c      	b.n	80028ba <main+0x26e>
							part_string[p] = '?';
 80028a0:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 80028a4:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80028a8:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80028ac:	213f      	movs	r1, #63	; 0x3f
 80028ae:	54d1      	strb	r1, [r2, r3]
						for (uint16_t p = var + 1; p < 13; ++p) {
 80028b0:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 80028b4:	3301      	adds	r3, #1
 80028b6:	f8a7 3452 	strh.w	r3, [r7, #1106]	; 0x452
 80028ba:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	; 0x452
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d9ee      	bls.n	80028a0 <main+0x254>
						}
						var = 12 + 1;
 80028c2:	230d      	movs	r3, #13
 80028c4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
				for (int var = 0; var <= who[datapoint]; ++var) {
 80028c8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80028cc:	3301      	adds	r3, #1
 80028ce:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80028d2:	f8b7 2462 	ldrh.w	r2, [r7, #1122]	; 0x462
 80028d6:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 80028da:	f2a3 435c 	subw	r3, r3, #1116	; 0x45c
 80028de:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80028e8:	4293      	cmp	r3, r2
 80028ea:	dd9b      	ble.n	8002824 <main+0x1d8>
					}

				}
				if (datapoint == 1) {
 80028ec:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	d14b      	bne.n	800298c <main+0x340>
					unsigned long answer;
					char *remaining;
					for (uint16_t ll = 5; ll < 10; ++ll) {
 80028f4:	2305      	movs	r3, #5
 80028f6:	f8a7 3450 	strh.w	r3, [r7, #1104]	; 0x450
 80028fa:	e013      	b.n	8002924 <main+0x2d8>
						part_string[ll - 1] = part_string[ll];
 80028fc:	f8b7 2450 	ldrh.w	r2, [r7, #1104]	; 0x450
 8002900:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	; 0x450
 8002904:	3b01      	subs	r3, #1
 8002906:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 800290a:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 800290e:	5c89      	ldrb	r1, [r1, r2]
 8002910:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002914:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8002918:	54d1      	strb	r1, [r2, r3]
					for (uint16_t ll = 5; ll < 10; ++ll) {
 800291a:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	; 0x450
 800291e:	3301      	adds	r3, #1
 8002920:	f8a7 3450 	strh.w	r3, [r7, #1104]	; 0x450
 8002924:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	; 0x450
 8002928:	2b09      	cmp	r3, #9
 800292a:	d9e7      	bls.n	80028fc <main+0x2b0>
					}
					for (int z = 0; z < 13; ++z) {
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8002932:	e017      	b.n	8002964 <main+0x318>
						if (part_string[z] == '?') {
 8002934:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002938:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 800293c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002940:	4413      	add	r3, r2
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	2b3f      	cmp	r3, #63	; 0x3f
 8002946:	d108      	bne.n	800295a <main+0x30e>
							part_string[z - 1] = '?';
 8002948:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800294c:	3b01      	subs	r3, #1
 800294e:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002952:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8002956:	213f      	movs	r1, #63	; 0x3f
 8002958:	54d1      	strb	r1, [r2, r3]
					for (int z = 0; z < 13; ++z) {
 800295a:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 800295e:	3301      	adds	r3, #1
 8002960:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8002964:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8002968:	2b0c      	cmp	r3, #12
 800296a:	dde3      	ble.n	8002934 <main+0x2e8>

						}
					}
					answer = strtol(part_string, &remaining, 10);
 800296c:	f107 0108 	add.w	r1, r7, #8
 8002970:	f107 0320 	add.w	r3, r7, #32
 8002974:	220a      	movs	r2, #10
 8002976:	4618      	mov	r0, r3
 8002978:	f00a f9ba 	bl	800ccf0 <strtol>
 800297c:	4603      	mov	r3, r0
 800297e:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
					rfm95_handle.latitude = answer;
 8002982:	4a0d      	ldr	r2, [pc, #52]	; (80029b8 <main+0x36c>)
 8002984:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 8002988:	65d3      	str	r3, [r2, #92]	; 0x5c
 800298a:	e089      	b.n	8002aa0 <main+0x454>

				} else if (datapoint == 2) {
 800298c:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002990:	2b02      	cmp	r3, #2
 8002992:	d108      	bne.n	80029a6 <main+0x35a>
					rfm95_handle.latitude_or[0] = part_string[0];
 8002994:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002998:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <main+0x36c>)
 80029a0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80029a4:	e07c      	b.n	8002aa0 <main+0x454>

				} else if (datapoint == 3) {
 80029a6:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 80029aa:	2b03      	cmp	r3, #3
 80029ac:	d15b      	bne.n	8002a66 <main+0x41a>
					unsigned long answer;
					char *remaining;
					for (uint16_t ll = 6; ll < 11; ++ll) {
 80029ae:	2306      	movs	r3, #6
 80029b0:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 80029b4:	e024      	b.n	8002a00 <main+0x3b4>
 80029b6:	bf00      	nop
 80029b8:	20000120 	.word	0x20000120
 80029bc:	2000044c 	.word	0x2000044c
 80029c0:	20000638 	.word	0x20000638
 80029c4:	2000063c 	.word	0x2000063c
 80029c8:	20000568 	.word	0x20000568
 80029cc:	0800f104 	.word	0x0800f104
 80029d0:	40004c00 	.word	0x40004c00
 80029d4:	200005b4 	.word	0x200005b4
						part_string[ll - 1] = part_string[ll];
 80029d8:	f8b7 244a 	ldrh.w	r2, [r7, #1098]	; 0x44a
 80029dc:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80029e0:	3b01      	subs	r3, #1
 80029e2:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 80029e6:	f5a1 6189 	sub.w	r1, r1, #1096	; 0x448
 80029ea:	5c89      	ldrb	r1, [r1, r2]
 80029ec:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 80029f0:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 80029f4:	54d1      	strb	r1, [r2, r3]
					for (uint16_t ll = 6; ll < 11; ++ll) {
 80029f6:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 80029fa:	3301      	adds	r3, #1
 80029fc:	f8a7 344a 	strh.w	r3, [r7, #1098]	; 0x44a
 8002a00:	f8b7 344a 	ldrh.w	r3, [r7, #1098]	; 0x44a
 8002a04:	2b0a      	cmp	r3, #10
 8002a06:	d9e7      	bls.n	80029d8 <main+0x38c>
					}
					for (int z = 0; z < 13; ++z) {
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8002a0e:	e017      	b.n	8002a40 <main+0x3f4>
						if (part_string[z] == '?') {
 8002a10:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002a14:	f5a3 6289 	sub.w	r2, r3, #1096	; 0x448
 8002a18:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b3f      	cmp	r3, #63	; 0x3f
 8002a22:	d108      	bne.n	8002a36 <main+0x3ea>
							part_string[z - 1] = '?';
 8002a24:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8002a2e:	f5a2 6289 	sub.w	r2, r2, #1096	; 0x448
 8002a32:	213f      	movs	r1, #63	; 0x3f
 8002a34:	54d1      	strb	r1, [r2, r3]
					for (int z = 0; z < 13; ++z) {
 8002a36:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8002a40:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8002a44:	2b0c      	cmp	r3, #12
 8002a46:	dde3      	ble.n	8002a10 <main+0x3c4>

						}
					}
					answer = strtol(part_string, &remaining, 10);
 8002a48:	1d39      	adds	r1, r7, #4
 8002a4a:	f107 0320 	add.w	r3, r7, #32
 8002a4e:	220a      	movs	r2, #10
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00a f94d 	bl	800ccf0 <strtol>
 8002a56:	4603      	mov	r3, r0
 8002a58:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
					rfm95_handle.longitude = answer;
 8002a5c:	4a21      	ldr	r2, [pc, #132]	; (8002ae4 <main+0x498>)
 8002a5e:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 8002a62:	6553      	str	r3, [r2, #84]	; 0x54
 8002a64:	e01c      	b.n	8002aa0 <main+0x454>
				} else if (datapoint == 4) {
 8002a66:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d108      	bne.n	8002a80 <main+0x434>
					rfm95_handle.longitude_or[0] = part_string[0];
 8002a6e:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 8002a72:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8002a76:	781a      	ldrb	r2, [r3, #0]
 8002a78:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <main+0x498>)
 8002a7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a7e:	e00f      	b.n	8002aa0 <main+0x454>

				} else if (datapoint == 8) {
 8002a80:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d10b      	bne.n	8002aa0 <main+0x454>
					unsigned int answer;
					answer = atoi(part_string);
 8002a88:	f107 0320 	add.w	r3, r7, #32
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f009 f9d1 	bl	800be34 <atoi>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
					rfm95_handle.altitude = answer;
 8002a98:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <main+0x498>)
 8002a9a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002a9e:	6653      	str	r3, [r2, #100]	; 0x64
				}
				datapoint++;
 8002aa0:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
			while (datapoint < 9) {
 8002aaa:	f8b7 3462 	ldrh.w	r3, [r7, #1122]	; 0x462
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	f67f aeb4 	bls.w	800281c <main+0x1d0>
			}

		}

		if (read_and_safe == true) {
 8002ab4:	4b0c      	ldr	r3, [pc, #48]	; (8002ae8 <main+0x49c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f43f ae0d 	beq.w	80026d8 <main+0x8c>
			read_and_safe = false;
 8002abe:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <main+0x49c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
			Read_Spectralsensor(&rfm95_handle);
 8002ac4:	4807      	ldr	r0, [pc, #28]	; (8002ae4 <main+0x498>)
 8002ac6:	f000 fac3 	bl	8003050 <Read_Spectralsensor>
			SHT41_read(&temp_innen);
 8002aca:	4808      	ldr	r0, [pc, #32]	; (8002aec <main+0x4a0>)
 8002acc:	f001 fba0 	bl	8004210 <SHT41_read>
			SHT41_read(&temp_aussen);
 8002ad0:	4807      	ldr	r0, [pc, #28]	; (8002af0 <main+0x4a4>)
 8002ad2:	f001 fb9d 	bl	8004210 <SHT41_read>
			//read_temp_aussen(&rfm95_handle);
			read_temp_innen(&rfm95_handle);
 8002ad6:	4803      	ldr	r0, [pc, #12]	; (8002ae4 <main+0x498>)
 8002ad8:	f000 fc6e 	bl	80033b8 <read_temp_innen>
			Write_SD_Card_Spectral(&rfm95_handle);
 8002adc:	4801      	ldr	r0, [pc, #4]	; (8002ae4 <main+0x498>)
 8002ade:	f000 fb01 	bl	80030e4 <Write_SD_Card_Spectral>
	while (1) {
 8002ae2:	e5f9      	b.n	80026d8 <main+0x8c>
 8002ae4:	20000120 	.word	0x20000120
 8002ae8:	2000063d 	.word	0x2000063d
 8002aec:	20000100 	.word	0x20000100
 8002af0:	20000110 	.word	0x20000110

08002af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b096      	sub	sp, #88	; 0x58
 8002af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	2244      	movs	r2, #68	; 0x44
 8002b00:	2100      	movs	r1, #0
 8002b02:	4618      	mov	r0, r3
 8002b04:	f009 f9e4 	bl	800bed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b08:	463b      	mov	r3, r7
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
 8002b14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b16:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b1a:	f003 f823 	bl	8005b64 <HAL_PWREx_ControlVoltageScaling>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002b24:	f000 fce6 	bl	80034f4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002b28:	2310      	movs	r3, #16
 8002b2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002b34:	2360      	movs	r3, #96	; 0x60
 8002b36:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	4618      	mov	r0, r3
 8002b42:	f003 f865 	bl	8005c10 <HAL_RCC_OscConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8002b4c:	f000 fcd2 	bl	80034f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b50:	230f      	movs	r3, #15
 8002b52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002b54:	2300      	movs	r3, #0
 8002b56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002b64:	463b      	mov	r3, r7
 8002b66:	2100      	movs	r1, #0
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f003 fc2d 	bl	80063c8 <HAL_RCC_ClockConfig>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002b74:	f000 fcbe 	bl	80034f4 <Error_Handler>
  }
}
 8002b78:	bf00      	nop
 8002b7a:	3758      	adds	r7, #88	; 0x58
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b86:	4a1c      	ldr	r2, [pc, #112]	; (8002bf8 <MX_I2C1_Init+0x78>)
 8002b88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b8c:	f640 6214 	movw	r2, #3604	; 0xe14
 8002b90:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002b92:	4b18      	ldr	r3, [pc, #96]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b98:	4b16      	ldr	r3, [pc, #88]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002baa:	4b12      	ldr	r3, [pc, #72]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002bb0:	4b10      	ldr	r3, [pc, #64]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002bb6:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bbe:	f001 ff63 	bl	8004a88 <HAL_I2C_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002bc8:	f000 fc94 	bl	80034f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002bcc:	2100      	movs	r1, #0
 8002bce:	4809      	ldr	r0, [pc, #36]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002bd0:	f002 ff22 	bl	8005a18 <HAL_I2CEx_ConfigAnalogFilter>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002bda:	f000 fc8b 	bl	80034f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002bde:	2100      	movs	r1, #0
 8002be0:	4804      	ldr	r0, [pc, #16]	; (8002bf4 <MX_I2C1_Init+0x74>)
 8002be2:	f002 ff64 	bl	8005aae <HAL_I2CEx_ConfigDigitalFilter>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002bec:	f000 fc82 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002bf0:	bf00      	nop
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	2000044c 	.word	0x2000044c
 8002bf8:	40005400 	.word	0x40005400

08002bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c02:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <MX_SPI1_Init+0x78>)
 8002c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002c0e:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c16:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c1c:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c1e:	2200      	movs	r2, #0
 8002c20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c22:	4b13      	ldr	r3, [pc, #76]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c30:	4b0f      	ldr	r3, [pc, #60]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002c36:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c4a:	2207      	movs	r2, #7
 8002c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002c4e:	4b08      	ldr	r3, [pc, #32]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c56:	2208      	movs	r2, #8
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002c5a:	4805      	ldr	r0, [pc, #20]	; (8002c70 <MX_SPI1_Init+0x74>)
 8002c5c:	f004 fa64 	bl	8007128 <HAL_SPI_Init>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8002c66:	f000 fc45 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200004a0 	.word	0x200004a0
 8002c74:	40013000 	.word	0x40013000

08002c78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002c7c:	4b1b      	ldr	r3, [pc, #108]	; (8002cec <MX_SPI2_Init+0x74>)
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	; (8002cf0 <MX_SPI2_Init+0x78>)
 8002c80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002c82:	4b1a      	ldr	r3, [pc, #104]	; (8002cec <MX_SPI2_Init+0x74>)
 8002c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002c88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002c8a:	4b18      	ldr	r3, [pc, #96]	; (8002cec <MX_SPI2_Init+0x74>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <MX_SPI2_Init+0x74>)
 8002c92:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c96:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c98:	4b14      	ldr	r3, [pc, #80]	; (8002cec <MX_SPI2_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002c9e:	4b13      	ldr	r3, [pc, #76]	; (8002cec <MX_SPI2_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <MX_SPI2_Init+0x74>)
 8002ca6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002caa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cae:	2238      	movs	r2, #56	; 0x38
 8002cb0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cb2:	4b0e      	ldr	r3, [pc, #56]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002cca:	4b08      	ldr	r3, [pc, #32]	; (8002cec <MX_SPI2_Init+0x74>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002cd0:	4b06      	ldr	r3, [pc, #24]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002cd6:	4805      	ldr	r0, [pc, #20]	; (8002cec <MX_SPI2_Init+0x74>)
 8002cd8:	f004 fa26 	bl	8007128 <HAL_SPI_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002ce2:	f000 fc07 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000504 	.word	0x20000504
 8002cf0:	40003800 	.word	0x40003800

08002cf4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002cf8:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002cfa:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <MX_TIM16_Init+0x4c>)
 8002cfc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 6000;
 8002cfe:	4b0f      	ldr	r3, [pc, #60]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d00:	f241 7270 	movw	r2, #6000	; 0x1770
 8002d04:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000;
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d0e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002d12:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002d26:	4805      	ldr	r0, [pc, #20]	; (8002d3c <MX_TIM16_Init+0x48>)
 8002d28:	f005 f90e 	bl	8007f48 <HAL_TIM_Base_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002d32:	f000 fbdf 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000568 	.word	0x20000568
 8002d40:	40014400 	.word	0x40014400

08002d44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d4a:	4a15      	ldr	r2, [pc, #84]	; (8002da0 <MX_UART4_Init+0x5c>)
 8002d4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002d4e:	4b13      	ldr	r3, [pc, #76]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d56:	4b11      	ldr	r3, [pc, #68]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d5c:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d62:	4b0e      	ldr	r3, [pc, #56]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d68:	4b0c      	ldr	r3, [pc, #48]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d6a:	220c      	movs	r2, #12
 8002d6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d74:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d80:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002d86:	4805      	ldr	r0, [pc, #20]	; (8002d9c <MX_UART4_Init+0x58>)
 8002d88:	f005 fba6 	bl	80084d8 <HAL_UART_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002d92:	f000 fbaf 	bl	80034f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	200005b4 	.word	0x200005b4
 8002da0:	40004c00 	.word	0x40004c00

08002da4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b08a      	sub	sp, #40	; 0x28
 8002da8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002daa:	f107 0314 	add.w	r3, r7, #20
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
 8002db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dba:	4b77      	ldr	r3, [pc, #476]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dbe:	4a76      	ldr	r2, [pc, #472]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002dc0:	f043 0304 	orr.w	r3, r3, #4
 8002dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dc6:	4b74      	ldr	r3, [pc, #464]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dca:	f003 0304 	and.w	r3, r3, #4
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dd2:	4b71      	ldr	r3, [pc, #452]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dd6:	4a70      	ldr	r2, [pc, #448]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dde:	4b6e      	ldr	r3, [pc, #440]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	4b6b      	ldr	r3, [pc, #428]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	4a6a      	ldr	r2, [pc, #424]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002df6:	4b68      	ldr	r3, [pc, #416]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e02:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e06:	4a64      	ldr	r2, [pc, #400]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002e08:	f043 0308 	orr.w	r3, r3, #8
 8002e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e0e:	4b62      	ldr	r3, [pc, #392]	; (8002f98 <MX_GPIO_Init+0x1f4>)
 8002e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	607b      	str	r3, [r7, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|SD_LC_Pin, GPIO_PIN_SET);
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2118      	movs	r1, #24
 8002e1e:	485f      	ldr	r0, [pc, #380]	; (8002f9c <MX_GPIO_Init+0x1f8>)
 8002e20:	f001 fe00 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INT_GPS_Pin|RESET_GPS_Pin|LORA_LC3_Pin|LORA_LC1_Pin
 8002e24:	2201      	movs	r2, #1
 8002e26:	f649 010c 	movw	r1, #38924	; 0x980c
 8002e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e2e:	f001 fdf9 	bl	8004a24 <HAL_GPIO_WritePin>
                          |RESET_n_MUX_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_NSS_GPIO_Port, SD_NSS_Pin, GPIO_PIN_RESET);
 8002e32:	2200      	movs	r2, #0
 8002e34:	2110      	movs	r1, #16
 8002e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e3a:	f001 fdf3 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_SW_Pin|SS1_Pin|SS2_Pin, GPIO_PIN_RESET);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 8002e44:	4855      	ldr	r0, [pc, #340]	; (8002f9c <MX_GPIO_Init+0x1f8>)
 8002e46:	f001 fded 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_LC2_GPIO_Port, LoRa_LC2_Pin, GPIO_PIN_SET);
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	2104      	movs	r1, #4
 8002e4e:	4854      	ldr	r0, [pc, #336]	; (8002fa0 <MX_GPIO_Init+0x1fc>)
 8002e50:	f001 fde8 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, READY_LED_Pin|STATUS_LED_Pin|LORA_NSS_Pin|SS4_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8002e5a:	4851      	ldr	r0, [pc, #324]	; (8002fa0 <MX_GPIO_Init+0x1fc>)
 8002e5c:	f001 fde2 	bl	8004a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_3V3_Pin ADC_BATTERIE_Pin */
  GPIO_InitStruct.Pin = ADC_3V3_Pin|ADC_BATTERIE_Pin;
 8002e60:	2303      	movs	r3, #3
 8002e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8002e64:	230b      	movs	r3, #11
 8002e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6c:	f107 0314 	add.w	r3, r7, #20
 8002e70:	4619      	mov	r1, r3
 8002e72:	484a      	ldr	r0, [pc, #296]	; (8002f9c <MX_GPIO_Init+0x1f8>)
 8002e74:	f001 fc14 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 SD_LC_Pin POWER_SW_Pin SS1_Pin
                           SS2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SD_LC_Pin|POWER_SW_Pin|SS1_Pin
 8002e78:	f241 4338 	movw	r3, #5176	; 0x1438
 8002e7c:	617b      	str	r3, [r7, #20]
                          |SS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e8a:	f107 0314 	add.w	r3, r7, #20
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4842      	ldr	r0, [pc, #264]	; (8002f9c <MX_GPIO_Init+0x1f8>)
 8002e92:	f001 fc05 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_GPS_Pin RESET_GPS_Pin SD_NSS_Pin RESET_n_MUX_Pin */
  GPIO_InitStruct.Pin = INT_GPS_Pin|RESET_GPS_Pin|SD_NSS_Pin|RESET_n_MUX_Pin;
 8002e96:	f248 031c 	movw	r3, #32796	; 0x801c
 8002e9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4619      	mov	r1, r3
 8002eae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002eb2:	f001 fbf5 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_AS_Pin INT2_AS_Pin INT_SS3_Pin INT_SS4_Pin */
  GPIO_InitStruct.Pin = INT1_AS_Pin|INT2_AS_Pin|INT_SS3_Pin|INT_SS4_Pin;
 8002eb6:	23a3      	movs	r3, #163	; 0xa3
 8002eb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec2:	f107 0314 	add.w	r3, r7, #20
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4835      	ldr	r0, [pc, #212]	; (8002fa0 <MX_GPIO_Init+0x1fc>)
 8002eca:	f001 fbe9 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_LC2_Pin */
  GPIO_InitStruct.Pin = LoRa_LC2_Pin;
 8002ece:	2304      	movs	r3, #4
 8002ed0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002ed2:	2311      	movs	r3, #17
 8002ed4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eda:	2300      	movs	r3, #0
 8002edc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LoRa_LC2_GPIO_Port, &GPIO_InitStruct);
 8002ede:	f107 0314 	add.w	r3, r7, #20
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	482e      	ldr	r0, [pc, #184]	; (8002fa0 <MX_GPIO_Init+0x1fc>)
 8002ee6:	f001 fbdb 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_LED_Pin STATUS_LED_Pin LORA_NSS_Pin SS4_Pin */
  GPIO_InitStruct.Pin = READY_LED_Pin|STATUS_LED_Pin|LORA_NSS_Pin|SS4_Pin;
 8002eea:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 8002eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4619      	mov	r1, r3
 8002f02:	4827      	ldr	r0, [pc, #156]	; (8002fa0 <MX_GPIO_Init+0x1fc>)
 8002f04:	f001 fbcc 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO0_Pin LORA_DIO1_Pin LORA_DIO2_Pin LORA_DIO3_Pin
                           INT_SS1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin|LORA_DIO1_Pin|LORA_DIO2_Pin|LORA_DIO3_Pin
 8002f08:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8002f0c:	617b      	str	r3, [r7, #20]
                          |INT_SS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f12:	2300      	movs	r3, #0
 8002f14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f16:	f107 0314 	add.w	r3, r7, #20
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	481f      	ldr	r0, [pc, #124]	; (8002f9c <MX_GPIO_Init+0x1f8>)
 8002f1e:	f001 fbbf 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO4_Pin LORA_DIO5_Pin Reset_LoRa_Pin */
  GPIO_InitStruct.Pin = LORA_DIO4_Pin|LORA_DIO5_Pin|Reset_LoRa_Pin;
 8002f22:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 0314 	add.w	r3, r7, #20
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f3a:	f001 fbb1 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_LC3_Pin LORA_LC1_Pin */
  GPIO_InitStruct.Pin = LORA_LC3_Pin|LORA_LC1_Pin;
 8002f3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002f44:	2311      	movs	r3, #17
 8002f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	4619      	mov	r1, r3
 8002f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f5a:	f001 fba1 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_SS2_Pin */
  GPIO_InitStruct.Pin = INT_SS2_Pin;
 8002f5e:	2304      	movs	r3, #4
 8002f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_SS2_GPIO_Port, &GPIO_InitStruct);
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	4619      	mov	r1, r3
 8002f70:	480c      	ldr	r0, [pc, #48]	; (8002fa4 <MX_GPIO_Init+0x200>)
 8002f72:	f001 fb95 	bl	80046a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS3_Pin */
  GPIO_InitStruct.Pin = SS3_Pin;
 8002f76:	2310      	movs	r3, #16
 8002f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002f7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	2300      	movs	r3, #0
 8002f82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	4619      	mov	r1, r3
 8002f8a:	4805      	ldr	r0, [pc, #20]	; (8002fa0 <MX_GPIO_Init+0x1fc>)
 8002f8c:	f001 fb88 	bl	80046a0 <HAL_GPIO_Init>

}
 8002f90:	bf00      	nop
 8002f92:	3728      	adds	r7, #40	; 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	48000800 	.word	0x48000800
 8002fa0:	48000400 	.word	0x48000400
 8002fa4:	48000c00 	.word	0x48000c00

08002fa8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
	static int sendintervall = 6;
	if (htim == &htim16) {
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d117      	bne.n	8002fe8 <HAL_TIM_PeriodElapsedCallback+0x40>
		read_and_safe = true;
 8002fb8:	4b0e      	ldr	r3, [pc, #56]	; (8002ff4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]

		if (sendintervall == 6) {
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b06      	cmp	r3, #6
 8002fc4:	d10b      	bne.n	8002fde <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8002fc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fca:	480c      	ldr	r0, [pc, #48]	; (8002ffc <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002fcc:	f001 fd42 	bl	8004a54 <HAL_GPIO_TogglePin>
			Flow(&rfm95_handle);
 8002fd0:	480b      	ldr	r0, [pc, #44]	; (8003000 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002fd2:	f7ff fa27 	bl	8002424 <Flow>
			sendintervall = 0;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
		//	read_temp_innen(&rfm95_handle, 5);
//		Write_SD_Card_Spectral(&rfm95_handle);

	}

}
 8002fdc:	e004      	b.n	8002fe8 <HAL_TIM_PeriodElapsedCallback+0x40>
			sendintervall++;
 8002fde:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	3708      	adds	r7, #8
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20000568 	.word	0x20000568
 8002ff4:	2000063d 	.word	0x2000063d
 8002ff8:	20000200 	.word	0x20000200
 8002ffc:	48000400 	.word	0x48000400
 8003000:	20000120 	.word	0x20000120

08003004 <Setup_Spectralsensor>:

void Setup_Spectralsensor(void) {
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0

	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	e015      	b.n	800303c <Setup_Spectralsensor+0x38>
		PCA9847_SetChannel(&multiplexer, i);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	4619      	mov	r1, r3
 8003016:	480d      	ldr	r0, [pc, #52]	; (800304c <Setup_Spectralsensor+0x48>)
 8003018:	f001 f8a0 	bl	800415c <PCA9847_SetChannel>
		AS7341_Init(eSpm);
 800301c:	2000      	movs	r0, #0
 800301e:	f000 fd9d 	bl	8003b5c <AS7341_Init>
		AS7341_ATIME_config(100);
 8003022:	2064      	movs	r0, #100	; 0x64
 8003024:	f001 f819 	bl	800405a <AS7341_ATIME_config>
		AS7341_ASTEP_config(999);
 8003028:	f240 30e7 	movw	r0, #999	; 0x3e7
 800302c:	f001 f823 	bl	8004076 <AS7341_ASTEP_config>
		AS7341_AGAIN_config(6);
 8003030:	2006      	movs	r0, #6
 8003032:	f001 f839 	bl	80040a8 <AS7341_AGAIN_config>
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3301      	adds	r3, #1
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b03      	cmp	r3, #3
 8003040:	dde6      	ble.n	8003010 <Setup_Spectralsensor+0xc>
	}

}
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000638 	.word	0x20000638

08003050 <Read_Spectralsensor>:

void Read_Spectralsensor(rfm95_handle_t *handle) {
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b08f      	sub	sp, #60	; 0x3c
 8003054:	af00      	add	r7, sp, #0
 8003056:	6178      	str	r0, [r7, #20]
	sModeOneData_t data1;
	sModeTwoData_t data2;
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003058:	2300      	movs	r3, #0
 800305a:	637b      	str	r3, [r7, #52]	; 0x34
 800305c:	e038      	b.n	80030d0 <Read_Spectralsensor+0x80>
		PCA9847_SetChannel(&multiplexer, i);
 800305e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003060:	b2db      	uxtb	r3, r3
 8003062:	4619      	mov	r1, r3
 8003064:	481e      	ldr	r0, [pc, #120]	; (80030e0 <Read_Spectralsensor+0x90>)
 8003066:	f001 f879 	bl	800415c <PCA9847_SetChannel>
		AS7341_startMeasure(eF1F4ClearNIR);
 800306a:	2000      	movs	r0, #0
 800306c:	f000 fed0 	bl	8003e10 <AS7341_startMeasure>
		handle->spectraldata_1[i] = AS7341_ReadSpectralDataOne();
 8003070:	6979      	ldr	r1, [r7, #20]
 8003072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8003082:	463b      	mov	r3, r7
 8003084:	4618      	mov	r0, r3
 8003086:	f000 ff6b 	bl	8003f60 <AS7341_ReadSpectralDataOne>
 800308a:	1ca3      	adds	r3, r4, #2
 800308c:	463a      	mov	r2, r7
 800308e:	6810      	ldr	r0, [r2, #0]
 8003090:	6851      	ldr	r1, [r2, #4]
 8003092:	6892      	ldr	r2, [r2, #8]
 8003094:	6018      	str	r0, [r3, #0]
 8003096:	6059      	str	r1, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
		AS7341_startMeasure(eF5F8ClearNIR);
 800309a:	2001      	movs	r0, #1
 800309c:	f000 feb8 	bl	8003e10 <AS7341_startMeasure>
		handle->spectraldata_2[i] = AS7341_ReadSpectralDataTwo();
 80030a0:	6979      	ldr	r1, [r7, #20]
 80030a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80030a4:	4613      	mov	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80030b2:	463b      	mov	r3, r7
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 ff81 	bl	8003fbc <AS7341_ReadSpectralDataTwo>
 80030ba:	1ca3      	adds	r3, r4, #2
 80030bc:	463a      	mov	r2, r7
 80030be:	6810      	ldr	r0, [r2, #0]
 80030c0:	6851      	ldr	r1, [r2, #4]
 80030c2:	6892      	ldr	r2, [r2, #8]
 80030c4:	6018      	str	r0, [r3, #0]
 80030c6:	6059      	str	r1, [r3, #4]
 80030c8:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 80030ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030cc:	3301      	adds	r3, #1
 80030ce:	637b      	str	r3, [r7, #52]	; 0x34
 80030d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	ddc3      	ble.n	800305e <Read_Spectralsensor+0xe>
	}

}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	373c      	adds	r7, #60	; 0x3c
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	20000638 	.word	0x20000638

080030e4 <Write_SD_Card_Spectral>:
void Write_SD_Card_Spectral(rfm95_handle_t *handle) {
 80030e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030e8:	f2ad 4dec 	subw	sp, sp, #1260	; 0x4ec
 80030ec:	af0a      	add	r7, sp, #40	; 0x28
 80030ee:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80030f2:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80030f6:	6018      	str	r0, [r3, #0]
	FATFS FatFs; 	//Fatfs handle
	FIL fil; 		//File handle
	FRESULT fres; //Result after operations

	//Open the file system
	fres = f_mount(&FatFs, "", 1); //1=mount now
 80030f8:	f507 7321 	add.w	r3, r7, #644	; 0x284
 80030fc:	2201      	movs	r2, #1
 80030fe:	49a8      	ldr	r1, [pc, #672]	; (80033a0 <Write_SD_Card_Spectral+0x2bc>)
 8003100:	4618      	mov	r0, r3
 8003102:	f008 f9fb 	bl	800b4fc <f_mount>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
	if (fres != FR_OK) {
 800310c:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8003110:	2b00      	cmp	r3, #0
 8003112:	d006      	beq.n	8003122 <Write_SD_Card_Spectral+0x3e>
		myprintf("f_mount error (%i)\r\n", fres);
 8003114:	f897 34bb 	ldrb.w	r3, [r7, #1211]	; 0x4bb
 8003118:	4619      	mov	r1, r3
 800311a:	48a2      	ldr	r0, [pc, #648]	; (80033a4 <Write_SD_Card_Spectral+0x2c0>)
 800311c:	f7ff fa7a 	bl	8002614 <myprintf>
 8003120:	e138      	b.n	8003394 <Write_SD_Card_Spectral+0x2b0>

	//Now let's try and write a file "write.txt"

	//BYTE readBuf[30];
	UINT bytesWrote;
	fres = f_open(&fil, "write.txt",
 8003122:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003126:	2232      	movs	r2, #50	; 0x32
 8003128:	499f      	ldr	r1, [pc, #636]	; (80033a8 <Write_SD_Card_Spectral+0x2c4>)
 800312a:	4618      	mov	r0, r3
 800312c:	f008 fa2c 	bl	800b588 <f_open>
 8003130:	4603      	mov	r3, r0
 8003132:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
	FA_WRITE | FA_OPEN_APPEND | FA_OPEN_EXISTING);
	//strncpy((char*) readBuf, "Test", 30);
	char data_packet[51];
	int cx;

	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 8003136:	2300      	movs	r3, #0
 8003138:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800313c:	e0bd      	b.n	80032ba <Write_SD_Card_Spectral+0x1d6>
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
				handle->spectraldata_1[i].CLEAR, handle->spectraldata_1[i].NIR,
 800313e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003142:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003146:	6819      	ldr	r1, [r3, #0]
 8003148:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 800314c:	4613      	mov	r3, r2
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	4413      	add	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	3372      	adds	r3, #114	; 0x72
 8003158:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 800315a:	469c      	mov	ip, r3
				handle->spectraldata_1[i].CLEAR, handle->spectraldata_1[i].NIR,
 800315c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003160:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003164:	6819      	ldr	r1, [r3, #0]
 8003166:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 800316a:	4613      	mov	r3, r2
 800316c:	005b      	lsls	r3, r3, #1
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	3374      	adds	r3, #116	; 0x74
 8003176:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 8003178:	461c      	mov	r4, r3
				handle->spectraldata_1[i].channel1,
 800317a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800317e:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 8003188:	4613      	mov	r3, r2
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	336a      	adds	r3, #106	; 0x6a
 8003194:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 8003196:	461d      	mov	r5, r3
				handle->spectraldata_1[i].channel2,
 8003198:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800319c:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80031a0:	6819      	ldr	r1, [r3, #0]
 80031a2:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 80031a6:	4613      	mov	r3, r2
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	336c      	adds	r3, #108	; 0x6c
 80031b2:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 80031b4:	461e      	mov	r6, r3
				handle->spectraldata_1[i].channel3,
 80031b6:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80031ba:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 80031c4:	4613      	mov	r3, r2
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	4413      	add	r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	336e      	adds	r3, #110	; 0x6e
 80031d0:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 80031d2:	613b      	str	r3, [r7, #16]
				handle->spectraldata_1[i].channel4,
 80031d4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80031d8:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80031dc:	6819      	ldr	r1, [r3, #0]
 80031de:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	3370      	adds	r3, #112	; 0x70
 80031ee:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 80031f0:	60fb      	str	r3, [r7, #12]
				handle->spectraldata_2[i].channel5,
 80031f2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80031f6:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80031fa:	6819      	ldr	r1, [r3, #0]
 80031fc:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 8003200:	4613      	mov	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	4413      	add	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	339a      	adds	r3, #154	; 0x9a
 800320c:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 800320e:	60bb      	str	r3, [r7, #8]
				handle->spectraldata_2[i].channel6,
 8003210:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003214:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 800321e:	4613      	mov	r3, r2
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	4413      	add	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	440b      	add	r3, r1
 8003228:	339c      	adds	r3, #156	; 0x9c
 800322a:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 800322c:	607b      	str	r3, [r7, #4]
				handle->spectraldata_2[i].channel7,
 800322e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003232:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003236:	6819      	ldr	r1, [r3, #0]
 8003238:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	339e      	adds	r3, #158	; 0x9e
 8003248:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 800324a:	603b      	str	r3, [r7, #0]
				handle->spectraldata_2[i].channel8);
 800324c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003250:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003254:	6819      	ldr	r1, [r3, #0]
 8003256:	f8d7 24bc 	ldr.w	r2, [r7, #1212]	; 0x4bc
 800325a:	4613      	mov	r3, r2
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	33a0      	adds	r3, #160	; 0xa0
 8003266:	881b      	ldrh	r3, [r3, #0]
		cx = snprintf(data_packet, 51, "%d;%d;%d;%d;%d;%d;%d;%d;%d;%d\r\n",
 8003268:	f107 001c 	add.w	r0, r7, #28
 800326c:	9308      	str	r3, [sp, #32]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	9207      	str	r2, [sp, #28]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	9206      	str	r2, [sp, #24]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	9205      	str	r2, [sp, #20]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	9204      	str	r2, [sp, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	9602      	str	r6, [sp, #8]
 8003284:	9501      	str	r5, [sp, #4]
 8003286:	9400      	str	r4, [sp, #0]
 8003288:	4663      	mov	r3, ip
 800328a:	4a48      	ldr	r2, [pc, #288]	; (80033ac <Write_SD_Card_Spectral+0x2c8>)
 800328c:	2133      	movs	r1, #51	; 0x33
 800328e:	f009 fc79 	bl	800cb84 <sniprintf>
 8003292:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
		fres = f_write(&fil, data_packet, cx, &bytesWrote);
 8003296:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 800329a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800329e:	f107 011c 	add.w	r1, r7, #28
 80032a2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80032a6:	f008 fb2d 	bl	800b904 <f_write>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
	for (int i = 0; i < ANZAHL_SPECTRALSENSOR; ++i) {
 80032b0:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80032b4:	3301      	adds	r3, #1
 80032b6:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 80032ba:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	; 0x4bc
 80032be:	2b03      	cmp	r3, #3
 80032c0:	f77f af3d 	ble.w	800313e <Write_SD_Card_Spectral+0x5a>
	}
	cx = snprintf(data_packet, 51, "%f,%f,%f,%f\r\n", handle->tem_innen,
 80032c4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80032c8:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f938 	bl	8000548 <__aeabi_f2d>
 80032d8:	4604      	mov	r4, r0
 80032da:	460d      	mov	r5, r1
			handle->tem_aussen, handle->rph_innen, handle->rph_aussen);
 80032dc:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80032e0:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
	cx = snprintf(data_packet, 51, "%f,%f,%f,%f\r\n", handle->tem_innen,
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f92c 	bl	8000548 <__aeabi_f2d>
 80032f0:	4680      	mov	r8, r0
 80032f2:	4689      	mov	r9, r1
			handle->tem_aussen, handle->rph_innen, handle->rph_aussen);
 80032f4:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80032f8:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
	cx = snprintf(data_packet, 51, "%f,%f,%f,%f\r\n", handle->tem_innen,
 8003302:	4618      	mov	r0, r3
 8003304:	f7fd f920 	bl	8000548 <__aeabi_f2d>
 8003308:	4682      	mov	sl, r0
 800330a:	468b      	mov	fp, r1
			handle->tem_aussen, handle->rph_innen, handle->rph_aussen);
 800330c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003310:	f2a3 43ac 	subw	r3, r3, #1196	; 0x4ac
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	cx = snprintf(data_packet, 51, "%f,%f,%f,%f\r\n", handle->tem_innen,
 800331a:	4618      	mov	r0, r3
 800331c:	f7fd f914 	bl	8000548 <__aeabi_f2d>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	f107 001c 	add.w	r0, r7, #28
 8003328:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800332c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003330:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003334:	e9cd 4500 	strd	r4, r5, [sp]
 8003338:	4a1d      	ldr	r2, [pc, #116]	; (80033b0 <Write_SD_Card_Spectral+0x2cc>)
 800333a:	2133      	movs	r1, #51	; 0x33
 800333c:	f009 fc22 	bl	800cb84 <sniprintf>
 8003340:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
	fres = f_write(&fil, data_packet, cx, &bytesWrote);
 8003344:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8003348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800334c:	f107 011c 	add.w	r1, r7, #28
 8003350:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003354:	f008 fad6 	bl	800b904 <f_write>
 8003358:	4603      	mov	r3, r0
 800335a:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
	cx = snprintf(data_packet, 51, "\r\n");
 800335e:	f107 031c 	add.w	r3, r7, #28
 8003362:	4a14      	ldr	r2, [pc, #80]	; (80033b4 <Write_SD_Card_Spectral+0x2d0>)
 8003364:	2133      	movs	r1, #51	; 0x33
 8003366:	4618      	mov	r0, r3
 8003368:	f009 fc0c 	bl	800cb84 <sniprintf>
 800336c:	f8c7 04b4 	str.w	r0, [r7, #1204]	; 0x4b4
	fres = f_write(&fil, data_packet, cx, &bytesWrote);
 8003370:	f8d7 24b4 	ldr.w	r2, [r7, #1204]	; 0x4b4
 8003374:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003378:	f107 011c 	add.w	r1, r7, #28
 800337c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8003380:	f008 fac0 	bl	800b904 <f_write>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 34bb 	strb.w	r3, [r7, #1211]	; 0x4bb
	f_close(&fil);
 800338a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800338e:	4618      	mov	r0, r3
 8003390:	f008 fcab 	bl	800bcea <f_close>

}
 8003394:	f207 47c4 	addw	r7, r7, #1220	; 0x4c4
 8003398:	46bd      	mov	sp, r7
 800339a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800339e:	bf00      	nop
 80033a0:	0800f118 	.word	0x0800f118
 80033a4:	0800f11c 	.word	0x0800f11c
 80033a8:	0800f134 	.word	0x0800f134
 80033ac:	0800f140 	.word	0x0800f140
 80033b0:	0800f160 	.word	0x0800f160
 80033b4:	0800f170 	.word	0x0800f170

080033b8 <read_temp_innen>:

	f_close(&fil);
	counter++;
}

read_temp_innen(rfm95_handle_t *handle) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08e      	sub	sp, #56	; 0x38
 80033bc:	af02      	add	r7, sp, #8
 80033be:	6078      	str	r0, [r7, #4]
	PCA9847_SetChannel(&multiplexer, 5);
 80033c0:	2105      	movs	r1, #5
 80033c2:	4844      	ldr	r0, [pc, #272]	; (80034d4 <read_temp_innen+0x11c>)
 80033c4:	f000 feca 	bl	800415c <PCA9847_SetChannel>
	HAL_StatusTypeDef status;
	uint8_t value[6] = { 0 };
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	2300      	movs	r3, #0
 80033ce:	823b      	strh	r3, [r7, #16]
	uint8_t cmd = 0xFD;
 80033d0:	23fd      	movs	r3, #253	; 0xfd
 80033d2:	72fb      	strb	r3, [r7, #11]
	status = HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &cmd, 1, 10);
 80033d4:	f107 020b 	add.w	r2, r7, #11
 80033d8:	230a      	movs	r3, #10
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	2301      	movs	r3, #1
 80033de:	2188      	movs	r1, #136	; 0x88
 80033e0:	483d      	ldr	r0, [pc, #244]	; (80034d8 <read_temp_innen+0x120>)
 80033e2:	f001 fbe1 	bl	8004ba8 <HAL_I2C_Master_Transmit>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	HAL_Delay(10);
 80033ec:	200a      	movs	r0, #10
 80033ee:	f001 f821 	bl	8004434 <HAL_Delay>
	status = HAL_I2C_Master_Receive(&hi2c1, 0x44 << 1, value, 6, 10);
 80033f2:	f107 020c 	add.w	r2, r7, #12
 80033f6:	230a      	movs	r3, #10
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	2306      	movs	r3, #6
 80033fc:	2188      	movs	r1, #136	; 0x88
 80033fe:	4836      	ldr	r0, [pc, #216]	; (80034d8 <read_temp_innen+0x120>)
 8003400:	f001 fcc6 	bl	8004d90 <HAL_I2C_Master_Receive>
 8003404:	4603      	mov	r3, r0
 8003406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	float t_ticks = value[0] * 256 + value[1];
 800340a:	7b3b      	ldrb	r3, [r7, #12]
 800340c:	021b      	lsls	r3, r3, #8
 800340e:	7b7a      	ldrb	r2, [r7, #13]
 8003410:	4413      	add	r3, r2
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800341a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float checksum_t = value[2];
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003428:	edc7 7a08 	vstr	s15, [r7, #32]
	float rh_ticks = value[3] * 256 + value[4];
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	021b      	lsls	r3, r3, #8
 8003430:	7c3a      	ldrb	r2, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	ee07 3a90 	vmov	s15, r3
 8003438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800343c:	edc7 7a07 	vstr	s15, [r7, #28]
	float checksum_rh = value[5];
 8003440:	7c7b      	ldrb	r3, [r7, #17]
 8003442:	ee07 3a90 	vmov	s15, r3
 8003446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344a:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_degC = -45 + 175 * t_ticks / 65535;
 800344e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003452:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80034dc <read_temp_innen+0x124>
 8003456:	ee27 7a87 	vmul.f32	s14, s15, s14
 800345a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80034e0 <read_temp_innen+0x128>
 800345e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003462:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80034e4 <read_temp_innen+0x12c>
 8003466:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800346a:	edc7 7a05 	vstr	s15, [r7, #20]
	float rh_pRH = -6 + 125 * rh_ticks / 65535;
 800346e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003472:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80034e8 <read_temp_innen+0x130>
 8003476:	ee27 7a87 	vmul.f32	s14, s15, s14
 800347a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80034e0 <read_temp_innen+0x128>
 800347e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003482:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8003486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800348a:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if (rh_pRH > 100) {
 800348e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003492:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80034ec <read_temp_innen+0x134>
 8003496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800349e:	dd01      	ble.n	80034a4 <read_temp_innen+0xec>
		rh_pRH = 100;
 80034a0:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <read_temp_innen+0x138>)
 80034a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (rh_pRH < 0) {
 80034a4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80034a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b0:	d502      	bpl.n	80034b8 <read_temp_innen+0x100>
		rh_pRH = 0;
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	handle->tem_innen = t_degC;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	handle->rph_innen = rh_pRH;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034c4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
}
 80034c8:	bf00      	nop
 80034ca:	4618      	mov	r0, r3
 80034cc:	3730      	adds	r7, #48	; 0x30
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	20000638 	.word	0x20000638
 80034d8:	2000044c 	.word	0x2000044c
 80034dc:	432f0000 	.word	0x432f0000
 80034e0:	477fff00 	.word	0x477fff00
 80034e4:	42340000 	.word	0x42340000
 80034e8:	42fa0000 	.word	0x42fa0000
 80034ec:	42c80000 	.word	0x42c80000
 80034f0:	42c80000 	.word	0x42c80000

080034f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034f4:	b480      	push	{r7}
 80034f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034f8:	b672      	cpsid	i
}
 80034fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80034fc:	e7fe      	b.n	80034fc <Error_Handler+0x8>
	...

08003500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	4b0f      	ldr	r3, [pc, #60]	; (8003544 <HAL_MspInit+0x44>)
 8003508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350a:	4a0e      	ldr	r2, [pc, #56]	; (8003544 <HAL_MspInit+0x44>)
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6613      	str	r3, [r2, #96]	; 0x60
 8003512:	4b0c      	ldr	r3, [pc, #48]	; (8003544 <HAL_MspInit+0x44>)
 8003514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	607b      	str	r3, [r7, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_MspInit+0x44>)
 8003520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003522:	4a08      	ldr	r2, [pc, #32]	; (8003544 <HAL_MspInit+0x44>)
 8003524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <HAL_MspInit+0x44>)
 800352c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800352e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003532:	603b      	str	r3, [r7, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b0aa      	sub	sp, #168	; 0xa8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003550:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003560:	f107 0310 	add.w	r3, r7, #16
 8003564:	2284      	movs	r2, #132	; 0x84
 8003566:	2100      	movs	r1, #0
 8003568:	4618      	mov	r0, r3
 800356a:	f008 fcb1 	bl	800bed0 <memset>
  if(hi2c->Instance==I2C1)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a21      	ldr	r2, [pc, #132]	; (80035f8 <HAL_I2C_MspInit+0xb0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d13b      	bne.n	80035f0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003578:	2340      	movs	r3, #64	; 0x40
 800357a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800357c:	2300      	movs	r3, #0
 800357e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	4618      	mov	r0, r3
 8003586:	f003 f943 	bl	8006810 <HAL_RCCEx_PeriphCLKConfig>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003590:	f7ff ffb0 	bl	80034f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003594:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_I2C_MspInit+0xb4>)
 8003596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_I2C_MspInit+0xb4>)
 800359a:	f043 0302 	orr.w	r3, r3, #2
 800359e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <HAL_I2C_MspInit+0xb4>)
 80035a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035a4:	f003 0302 	and.w	r3, r3, #2
 80035a8:	60fb      	str	r3, [r7, #12]
 80035aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80035ac:	f44f 7340 	mov.w	r3, #768	; 0x300
 80035b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035b4:	2312      	movs	r3, #18
 80035b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035c0:	2303      	movs	r3, #3
 80035c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035c6:	2304      	movs	r3, #4
 80035c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80035d0:	4619      	mov	r1, r3
 80035d2:	480b      	ldr	r0, [pc, #44]	; (8003600 <HAL_I2C_MspInit+0xb8>)
 80035d4:	f001 f864 	bl	80046a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035d8:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_I2C_MspInit+0xb4>)
 80035da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035dc:	4a07      	ldr	r2, [pc, #28]	; (80035fc <HAL_I2C_MspInit+0xb4>)
 80035de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035e2:	6593      	str	r3, [r2, #88]	; 0x58
 80035e4:	4b05      	ldr	r3, [pc, #20]	; (80035fc <HAL_I2C_MspInit+0xb4>)
 80035e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035f0:	bf00      	nop
 80035f2:	37a8      	adds	r7, #168	; 0xa8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	40005400 	.word	0x40005400
 80035fc:	40021000 	.word	0x40021000
 8003600:	48000400 	.word	0x48000400

08003604 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b08c      	sub	sp, #48	; 0x30
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2f      	ldr	r2, [pc, #188]	; (80036e0 <HAL_SPI_MspInit+0xdc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d129      	bne.n	800367a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 8003628:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800362a:	4a2e      	ldr	r2, [pc, #184]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 800362c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003630:	6613      	str	r3, [r2, #96]	; 0x60
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 8003634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 8003640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003642:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800364a:	4b26      	ldr	r3, [pc, #152]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 800364c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003656:	23e0      	movs	r3, #224	; 0xe0
 8003658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365a:	2302      	movs	r3, #2
 800365c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800365e:	2300      	movs	r3, #0
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003662:	2303      	movs	r3, #3
 8003664:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003666:	2305      	movs	r3, #5
 8003668:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	f107 031c 	add.w	r3, r7, #28
 800366e:	4619      	mov	r1, r3
 8003670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003674:	f001 f814 	bl	80046a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003678:	e02d      	b.n	80036d6 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a1a      	ldr	r2, [pc, #104]	; (80036e8 <HAL_SPI_MspInit+0xe4>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d128      	bne.n	80036d6 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 8003686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003688:	4a16      	ldr	r2, [pc, #88]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 800368a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368e:	6593      	str	r3, [r2, #88]	; 0x58
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 8003692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 800369e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036a0:	4a10      	ldr	r2, [pc, #64]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036a8:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <HAL_SPI_MspInit+0xe0>)
 80036aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_MISO_Pin|LORA_MOSI_Pin;
 80036b4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80036b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ba:	2302      	movs	r3, #2
 80036bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c2:	2303      	movs	r3, #3
 80036c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036c6:	2305      	movs	r3, #5
 80036c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ca:	f107 031c 	add.w	r3, r7, #28
 80036ce:	4619      	mov	r1, r3
 80036d0:	4806      	ldr	r0, [pc, #24]	; (80036ec <HAL_SPI_MspInit+0xe8>)
 80036d2:	f000 ffe5 	bl	80046a0 <HAL_GPIO_Init>
}
 80036d6:	bf00      	nop
 80036d8:	3730      	adds	r7, #48	; 0x30
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40013000 	.word	0x40013000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40003800 	.word	0x40003800
 80036ec:	48000400 	.word	0x48000400

080036f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_TIM_Base_MspInit+0x44>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d113      	bne.n	800372a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003702:	4b0d      	ldr	r3, [pc, #52]	; (8003738 <HAL_TIM_Base_MspInit+0x48>)
 8003704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003706:	4a0c      	ldr	r2, [pc, #48]	; (8003738 <HAL_TIM_Base_MspInit+0x48>)
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	6613      	str	r3, [r2, #96]	; 0x60
 800370e:	4b0a      	ldr	r3, [pc, #40]	; (8003738 <HAL_TIM_Base_MspInit+0x48>)
 8003710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003716:	60fb      	str	r3, [r7, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	2100      	movs	r1, #0
 800371e:	2019      	movs	r0, #25
 8003720:	f000 ff87 	bl	8004632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003724:	2019      	movs	r0, #25
 8003726:	f000 ffa0 	bl	800466a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800372a:	bf00      	nop
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40014400 	.word	0x40014400
 8003738:	40021000 	.word	0x40021000

0800373c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b0aa      	sub	sp, #168	; 0xa8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003744:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003748:	2200      	movs	r2, #0
 800374a:	601a      	str	r2, [r3, #0]
 800374c:	605a      	str	r2, [r3, #4]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	60da      	str	r2, [r3, #12]
 8003752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003754:	f107 0310 	add.w	r3, r7, #16
 8003758:	2284      	movs	r2, #132	; 0x84
 800375a:	2100      	movs	r1, #0
 800375c:	4618      	mov	r0, r3
 800375e:	f008 fbb7 	bl	800bed0 <memset>
  if(huart->Instance==UART4)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a21      	ldr	r2, [pc, #132]	; (80037ec <HAL_UART_MspInit+0xb0>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d13b      	bne.n	80037e4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800376c:	2308      	movs	r3, #8
 800376e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003770:	2300      	movs	r3, #0
 8003772:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003774:	f107 0310 	add.w	r3, r7, #16
 8003778:	4618      	mov	r0, r3
 800377a:	f003 f849 	bl	8006810 <HAL_RCCEx_PeriphCLKConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003784:	f7ff feb6 	bl	80034f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <HAL_UART_MspInit+0xb4>)
 800378a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800378c:	4a18      	ldr	r2, [pc, #96]	; (80037f0 <HAL_UART_MspInit+0xb4>)
 800378e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003792:	6593      	str	r3, [r2, #88]	; 0x58
 8003794:	4b16      	ldr	r3, [pc, #88]	; (80037f0 <HAL_UART_MspInit+0xb4>)
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	4b13      	ldr	r3, [pc, #76]	; (80037f0 <HAL_UART_MspInit+0xb4>)
 80037a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a4:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <HAL_UART_MspInit+0xb4>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ac:	4b10      	ldr	r3, [pc, #64]	; (80037f0 <HAL_UART_MspInit+0xb4>)
 80037ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037b8:	2303      	movs	r3, #3
 80037ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037be:	2302      	movs	r3, #2
 80037c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ca:	2303      	movs	r3, #3
 80037cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80037d0:	2308      	movs	r3, #8
 80037d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037d6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80037da:	4619      	mov	r1, r3
 80037dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e0:	f000 ff5e 	bl	80046a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80037e4:	bf00      	nop
 80037e6:	37a8      	adds	r7, #168	; 0xa8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40004c00 	.word	0x40004c00
 80037f0:	40021000 	.word	0x40021000

080037f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037f8:	e7fe      	b.n	80037f8 <NMI_Handler+0x4>

080037fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037fa:	b480      	push	{r7}
 80037fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037fe:	e7fe      	b.n	80037fe <HardFault_Handler+0x4>

08003800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003804:	e7fe      	b.n	8003804 <MemManage_Handler+0x4>

08003806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <BusFault_Handler+0x4>

0800380c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <UsageFault_Handler+0x4>

08003812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003816:	bf00      	nop
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800382e:	b480      	push	{r7}
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003832:	bf00      	nop
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003840:	f000 fdd8 	bl	80043f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003844:	bf00      	nop
 8003846:	bd80      	pop	{r7, pc}

08003848 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800384c:	4802      	ldr	r0, [pc, #8]	; (8003858 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800384e:	f004 fc43 	bl	80080d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003852:	bf00      	nop
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000568 	.word	0x20000568

0800385c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	return 1;
 8003860:	2301      	movs	r3, #1
}
 8003862:	4618      	mov	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <_kill>:

int _kill(int pid, int sig)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003876:	f008 fae1 	bl	800be3c <__errno>
 800387a:	4603      	mov	r3, r0
 800387c:	2216      	movs	r2, #22
 800387e:	601a      	str	r2, [r3, #0]
	return -1;
 8003880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003884:	4618      	mov	r0, r3
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_exit>:

void _exit (int status)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003894:	f04f 31ff 	mov.w	r1, #4294967295
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffe7 	bl	800386c <_kill>
	while (1) {}		/* Make sure we hang here */
 800389e:	e7fe      	b.n	800389e <_exit+0x12>

080038a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	e00a      	b.n	80038c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80038b2:	f3af 8000 	nop.w
 80038b6:	4601      	mov	r1, r0
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	60ba      	str	r2, [r7, #8]
 80038be:	b2ca      	uxtb	r2, r1
 80038c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	3301      	adds	r3, #1
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	dbf0      	blt.n	80038b2 <_read+0x12>
	}

return len;
 80038d0:	687b      	ldr	r3, [r7, #4]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b086      	sub	sp, #24
 80038de:	af00      	add	r7, sp, #0
 80038e0:	60f8      	str	r0, [r7, #12]
 80038e2:	60b9      	str	r1, [r7, #8]
 80038e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
 80038ea:	e009      	b.n	8003900 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	60ba      	str	r2, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	697a      	ldr	r2, [r7, #20]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	429a      	cmp	r2, r3
 8003906:	dbf1      	blt.n	80038ec <_write+0x12>
	}
	return len;
 8003908:	687b      	ldr	r3, [r7, #4]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <_close>:

int _close(int file)
{
 8003912:	b480      	push	{r7}
 8003914:	b083      	sub	sp, #12
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
	return -1;
 800391a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800393a:	605a      	str	r2, [r3, #4]
	return 0;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr

0800394a <_isatty>:

int _isatty(int file)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	return 1;
 8003952:	2301      	movs	r3, #1
}
 8003954:	4618      	mov	r0, r3
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
	return 0;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
	...

0800397c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <_sbrk+0x5c>)
 8003986:	4b15      	ldr	r3, [pc, #84]	; (80039dc <_sbrk+0x60>)
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003990:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <_sbrk+0x64>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <_sbrk+0x64>)
 800399a:	4a12      	ldr	r2, [pc, #72]	; (80039e4 <_sbrk+0x68>)
 800399c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <_sbrk+0x64>)
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d207      	bcs.n	80039bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80039ac:	f008 fa46 	bl	800be3c <__errno>
 80039b0:	4603      	mov	r3, r0
 80039b2:	220c      	movs	r2, #12
 80039b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80039b6:	f04f 33ff 	mov.w	r3, #4294967295
 80039ba:	e009      	b.n	80039d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80039bc:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <_sbrk+0x64>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80039c2:	4b07      	ldr	r3, [pc, #28]	; (80039e0 <_sbrk+0x64>)
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	4a05      	ldr	r2, [pc, #20]	; (80039e0 <_sbrk+0x64>)
 80039cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80039ce:	68fb      	ldr	r3, [r7, #12]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3718      	adds	r7, #24
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	20018000 	.word	0x20018000
 80039dc:	00000400 	.word	0x00000400
 80039e0:	20000740 	.word	0x20000740
 80039e4:	200007a8 	.word	0x200007a8

080039e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80039e8:	b480      	push	{r7}
 80039ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80039ec:	4b06      	ldr	r3, [pc, #24]	; (8003a08 <SystemInit+0x20>)
 80039ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f2:	4a05      	ldr	r2, [pc, #20]	; (8003a08 <SystemInit+0x20>)
 80039f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80039fc:	bf00      	nop
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	e000ed00 	.word	0xe000ed00

08003a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a10:	f7ff ffea 	bl	80039e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a14:	480c      	ldr	r0, [pc, #48]	; (8003a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8003a16:	490d      	ldr	r1, [pc, #52]	; (8003a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003a18:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <LoopForever+0xe>)
  movs r3, #0
 8003a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a1c:	e002      	b.n	8003a24 <LoopCopyDataInit>

08003a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a22:	3304      	adds	r3, #4

08003a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a28:	d3f9      	bcc.n	8003a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003a2c:	4c0a      	ldr	r4, [pc, #40]	; (8003a58 <LoopForever+0x16>)
  movs r3, #0
 8003a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a30:	e001      	b.n	8003a36 <LoopFillZerobss>

08003a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a34:	3204      	adds	r2, #4

08003a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a38:	d3fb      	bcc.n	8003a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a3a:	f008 fa17 	bl	800be6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003a3e:	f7fe fe05 	bl	800264c <main>

08003a42 <LoopForever>:

LoopForever:
    b LoopForever
 8003a42:	e7fe      	b.n	8003a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a4c:	200003f8 	.word	0x200003f8
  ldr r2, =_sidata
 8003a50:	0800f7b0 	.word	0x0800f7b0
  ldr r2, =_sbss
 8003a54:	200003f8 	.word	0x200003f8
  ldr r4, =_ebss
 8003a58:	200007a4 	.word	0x200007a4

08003a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a5c:	e7fe      	b.n	8003a5c <ADC1_2_IRQHandler>
	...

08003a60 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	4603      	mov	r3, r0
 8003a68:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <DEV_I2C_Init+0x24>)
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8003a70:	4a05      	ldr	r2, [pc, #20]	; (8003a88 <DEV_I2C_Init+0x28>)
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	7013      	strb	r3, [r2, #0]
#endif
}
 8003a76:	bf00      	nop
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000744 	.word	0x20000744
 8003a88:	20000745 	.word	0x20000745

08003a8c <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af04      	add	r7, sp, #16
 8003a92:	4603      	mov	r3, r0
 8003a94:	460a      	mov	r2, r1
 8003a96:	71fb      	strb	r3, [r7, #7]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8003aa0:	79bb      	ldrb	r3, [r7, #6]
 8003aa2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8003aa4:	4b09      	ldr	r3, [pc, #36]	; (8003acc <I2C_Write_Byte+0x40>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b299      	uxth	r1, r3
 8003aaa:	79fb      	ldrb	r3, [r7, #7]
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	2320      	movs	r3, #32
 8003ab0:	9302      	str	r3, [sp, #8]
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	9301      	str	r3, [sp, #4]
 8003ab6:	f107 030c 	add.w	r3, r7, #12
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	2301      	movs	r3, #1
 8003abe:	4804      	ldr	r0, [pc, #16]	; (8003ad0 <I2C_Write_Byte+0x44>)
 8003ac0:	f001 fa5c 	bl	8004f7c <HAL_I2C_Mem_Write>
#endif
}
 8003ac4:	bf00      	nop
 8003ac6:	3710      	adds	r7, #16
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	20000745 	.word	0x20000745
 8003ad0:	2000044c 	.word	0x2000044c

08003ad4 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b088      	sub	sp, #32
 8003ad8:	af04      	add	r7, sp, #16
 8003ada:	4603      	mov	r3, r0
 8003adc:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8003ade:	2300      	movs	r3, #0
 8003ae0:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8003ae2:	4b0b      	ldr	r3, [pc, #44]	; (8003b10 <I2C_Read_Byte+0x3c>)
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	3301      	adds	r3, #1
 8003aea:	b299      	uxth	r1, r3
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	b29a      	uxth	r2, r3
 8003af0:	2320      	movs	r3, #32
 8003af2:	9302      	str	r3, [sp, #8]
 8003af4:	2301      	movs	r3, #1
 8003af6:	9301      	str	r3, [sp, #4]
 8003af8:	f107 030c 	add.w	r3, r7, #12
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	2301      	movs	r3, #1
 8003b00:	4804      	ldr	r0, [pc, #16]	; (8003b14 <I2C_Read_Byte+0x40>)
 8003b02:	f001 fb4f 	bl	80051a4 <HAL_I2C_Mem_Read>
	return Buf[0];
 8003b06:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3710      	adds	r7, #16
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	20000745 	.word	0x20000745
 8003b14:	2000044c 	.word	0x2000044c

08003b18 <AS7341_Read_Byte>:
 function:	Read one byte of data to AS7341 via I2C
 parameter:
 Addr: Register address
 Info:
 ******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	4603      	mov	r3, r0
 8003b20:	71fb      	strb	r3, [r7, #7]
	return I2C_Read_Byte(Addr);
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7ff ffd5 	bl	8003ad4 <I2C_Read_Byte>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	b2db      	uxtb	r3, r3
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <AS7341_Write_Byte>:
 parameter:
 Addr: Register address
 Value: Write to the value of the register
 Info:
 ******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value) {
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b082      	sub	sp, #8
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	460a      	mov	r2, r1
 8003b40:	71fb      	strb	r3, [r7, #7]
 8003b42:	4613      	mov	r3, r2
 8003b44:	71bb      	strb	r3, [r7, #6]
	I2C_Write_Byte(Addr, Value);
 8003b46:	79ba      	ldrb	r2, [r7, #6]
 8003b48:	79fb      	ldrb	r3, [r7, #7]
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7ff ff9d 	bl	8003a8c <I2C_Write_Byte>
}
 8003b52:	bf00      	nop
 8003b54:	3708      	adds	r7, #8
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <AS7341_Init>:
/******************************************************************************
 function:	AS7341 Initialization
 parameter:
 Info:
 ******************************************************************************/
UBYTE AS7341_Init(eMode_t mode) {
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS << 1); //8-bit address
 8003b66:	2072      	movs	r0, #114	; 0x72
 8003b68:	f7ff ff7a 	bl	8003a60 <DEV_I2C_Init>
	//printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id
	AS7341_Enable(true);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f000 f80b 	bl	8003b88 <AS7341_Enable>
	measureMode = mode;
 8003b72:	4a04      	ldr	r2, [pc, #16]	; (8003b84 <AS7341_Init+0x28>)
 8003b74:	79fb      	ldrb	r3, [r7, #7]
 8003b76:	7013      	strb	r3, [r2, #0]
	return 0;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3708      	adds	r7, #8
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000746 	.word	0x20000746

08003b88 <AS7341_Enable>:

/******************************************************************************
 function： enable PON
 info：	power on
 ******************************************************************************/
void AS7341_Enable(int flag) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data = AS7341_Read_Byte(AS7341_ENABLE);
 8003b90:	2080      	movs	r0, #128	; 0x80
 8003b92:	f7ff ffc1 	bl	8003b18 <AS7341_Read_Byte>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]
	if (flag == true) {
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d104      	bne.n	8003baa <AS7341_Enable+0x22>
		data = data | (1 << 0);
 8003ba0:	7bfb      	ldrb	r3, [r7, #15]
 8003ba2:	f043 0301 	orr.w	r3, r3, #1
 8003ba6:	73fb      	strb	r3, [r7, #15]
 8003ba8:	e003      	b.n	8003bb2 <AS7341_Enable+0x2a>
	} else {
		data = data & (~1);
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
 8003bac:	f023 0301 	bic.w	r3, r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_ENABLE, data);
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	2080      	movs	r0, #128	; 0x80
 8003bb8:	f7ff ffbd 	bl	8003b36 <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8003bbc:	4805      	ldr	r0, [pc, #20]	; (8003bd4 <AS7341_Enable+0x4c>)
 8003bbe:	f008 ffd9 	bl	800cb74 <puts>
	AS7341_Write_Byte(0x00, 0x30);
 8003bc2:	2130      	movs	r1, #48	; 0x30
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f7ff ffb6 	bl	8003b36 <AS7341_Write_Byte>
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	0800f198 	.word	0x0800f198

08003bd8 <AS7341_EnableSpectralMeasure>:
/******************************************************************************
 function： enable Spectral measure
 info：
 ******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)    //Enable spectral measurement
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data = AS7341_Read_Byte(AS7341_ENABLE);
 8003be0:	2080      	movs	r0, #128	; 0x80
 8003be2:	f7ff ff99 	bl	8003b18 <AS7341_Read_Byte>
 8003be6:	4603      	mov	r3, r0
 8003be8:	73fb      	strb	r3, [r7, #15]
	if (flag == true) {
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d104      	bne.n	8003bfa <AS7341_EnableSpectralMeasure+0x22>
		data = data | (1 << 1);
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	f043 0302 	orr.w	r3, r3, #2
 8003bf6:	73fb      	strb	r3, [r7, #15]
 8003bf8:	e003      	b.n	8003c02 <AS7341_EnableSpectralMeasure+0x2a>
	} else {
		data = data & (~(1 << 1));
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	f023 0302 	bic.w	r3, r3, #2
 8003c00:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_ENABLE, data);
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	4619      	mov	r1, r3
 8003c06:	2080      	movs	r0, #128	; 0x80
 8003c08:	f7ff ff95 	bl	8003b36 <AS7341_Write_Byte>
}
 8003c0c:	bf00      	nop
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}

08003c14 <AS7341_EnableSMUX>:
 function： enable SMUX
 info：
 ******************************************************************************/
void AS7341_EnableSMUX(int flag)    //Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data = AS7341_Read_Byte(AS7341_ENABLE);
 8003c1c:	2080      	movs	r0, #128	; 0x80
 8003c1e:	f7ff ff7b 	bl	8003b18 <AS7341_Read_Byte>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73fb      	strb	r3, [r7, #15]
	if (flag == true) {
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d104      	bne.n	8003c36 <AS7341_EnableSMUX+0x22>
		data = data | (1 << 4);
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	f043 0310 	orr.w	r3, r3, #16
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	e003      	b.n	8003c3e <AS7341_EnableSMUX+0x2a>
	} else {
		data = data & (~(1 << 4));
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	f023 0310 	bic.w	r3, r3, #16
 8003c3c:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_ENABLE, data);
 8003c3e:	7bfb      	ldrb	r3, [r7, #15]
 8003c40:	4619      	mov	r1, r3
 8003c42:	2080      	movs	r0, #128	; 0x80
 8003c44:	f7ff ff77 	bl	8003b36 <AS7341_Write_Byte>
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <AS7341_Config>:

/******************************************************************************
 function:	choose model for spectral measurement
 info：
 ******************************************************************************/
void AS7341_Config(eMode_t mode) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
	UBYTE data;
	AS7341_SetBank(1);
 8003c5a:	2001      	movs	r0, #1
 8003c5c:	f000 fa37 	bl	80040ce <AS7341_SetBank>
	data = AS7341_Read_Byte(AS7341_CONFIG);
 8003c60:	2070      	movs	r0, #112	; 0x70
 8003c62:	f7ff ff59 	bl	8003b18 <AS7341_Read_Byte>
 8003c66:	4603      	mov	r3, r0
 8003c68:	73fb      	strb	r3, [r7, #15]
	switch (mode) {
 8003c6a:	79fb      	ldrb	r3, [r7, #7]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d015      	beq.n	8003c9c <AS7341_Config+0x4c>
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	dc18      	bgt.n	8003ca6 <AS7341_Config+0x56>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <AS7341_Config+0x2e>
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d005      	beq.n	8003c88 <AS7341_Config+0x38>
		data = (data & (~3)) | eSynd;
	}
		;
		break;
	default:
		break;
 8003c7c:	e013      	b.n	8003ca6 <AS7341_Config+0x56>
		data = (data & (~3)) | eSpm;
 8003c7e:	7bfb      	ldrb	r3, [r7, #15]
 8003c80:	f023 0303 	bic.w	r3, r3, #3
 8003c84:	73fb      	strb	r3, [r7, #15]
		break;
 8003c86:	e00f      	b.n	8003ca8 <AS7341_Config+0x58>
		data = (data & (~3)) | eSyns;
 8003c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c8c:	f023 0303 	bic.w	r3, r3, #3
 8003c90:	b25b      	sxtb	r3, r3
 8003c92:	f043 0301 	orr.w	r3, r3, #1
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	73fb      	strb	r3, [r7, #15]
		break;
 8003c9a:	e005      	b.n	8003ca8 <AS7341_Config+0x58>
		data = (data & (~3)) | eSynd;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	f043 0303 	orr.w	r3, r3, #3
 8003ca2:	73fb      	strb	r3, [r7, #15]
		break;
 8003ca4:	e000      	b.n	8003ca8 <AS7341_Config+0x58>
		break;
 8003ca6:	bf00      	nop
	}
	AS7341_Write_Byte(AS7341_CONFIG, data);
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	4619      	mov	r1, r3
 8003cac:	2070      	movs	r0, #112	; 0x70
 8003cae:	f7ff ff42 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_SetBank(0);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f000 fa0b 	bl	80040ce <AS7341_SetBank>
}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <F1F4_Clear_NIR>:

/******************************************************************************
 function:	Configure SMUX for sensors F1-4, Clear and NIR
 info：
 ******************************************************************************/
void F1F4_Clear_NIR() {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	af00      	add	r7, sp, #0
	AS7341_Write_Byte(0x00, 0x30);
 8003cc4:	2130      	movs	r1, #48	; 0x30
 8003cc6:	2000      	movs	r0, #0
 8003cc8:	f7ff ff35 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x01, 0x01);
 8003ccc:	2101      	movs	r1, #1
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f7ff ff31 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x02, 0x00);
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	2002      	movs	r0, #2
 8003cd8:	f7ff ff2d 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x03, 0x00);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	2003      	movs	r0, #3
 8003ce0:	f7ff ff29 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x04, 0x00);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	2004      	movs	r0, #4
 8003ce8:	f7ff ff25 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x05, 0x42);
 8003cec:	2142      	movs	r1, #66	; 0x42
 8003cee:	2005      	movs	r0, #5
 8003cf0:	f7ff ff21 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x06, 0x00);
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	2006      	movs	r0, #6
 8003cf8:	f7ff ff1d 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x07, 0x00);
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	2007      	movs	r0, #7
 8003d00:	f7ff ff19 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x08, 0x50);
 8003d04:	2150      	movs	r1, #80	; 0x50
 8003d06:	2008      	movs	r0, #8
 8003d08:	f7ff ff15 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x09, 0x00);
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	2009      	movs	r0, #9
 8003d10:	f7ff ff11 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0A, 0x00);
 8003d14:	2100      	movs	r1, #0
 8003d16:	200a      	movs	r0, #10
 8003d18:	f7ff ff0d 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0B, 0x00);
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	200b      	movs	r0, #11
 8003d20:	f7ff ff09 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0C, 0x20);
 8003d24:	2120      	movs	r1, #32
 8003d26:	200c      	movs	r0, #12
 8003d28:	f7ff ff05 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0D, 0x04);
 8003d2c:	2104      	movs	r1, #4
 8003d2e:	200d      	movs	r0, #13
 8003d30:	f7ff ff01 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0E, 0x00);
 8003d34:	2100      	movs	r1, #0
 8003d36:	200e      	movs	r0, #14
 8003d38:	f7ff fefd 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0F, 0x30);
 8003d3c:	2130      	movs	r1, #48	; 0x30
 8003d3e:	200f      	movs	r0, #15
 8003d40:	f7ff fef9 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x10, 0x01);
 8003d44:	2101      	movs	r1, #1
 8003d46:	2010      	movs	r0, #16
 8003d48:	f7ff fef5 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x11, 0x50);
 8003d4c:	2150      	movs	r1, #80	; 0x50
 8003d4e:	2011      	movs	r0, #17
 8003d50:	f7ff fef1 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x12, 0x00);
 8003d54:	2100      	movs	r1, #0
 8003d56:	2012      	movs	r0, #18
 8003d58:	f7ff feed 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x13, 0x06);
 8003d5c:	2106      	movs	r1, #6
 8003d5e:	2013      	movs	r0, #19
 8003d60:	f7ff fee9 	bl	8003b36 <AS7341_Write_Byte>
}
 8003d64:	bf00      	nop
 8003d66:	bd80      	pop	{r7, pc}

08003d68 <F5F8_Clear_NIR>:
/******************************************************************************
 function:	Configure SMUX for sensors F5-8, Clear and NIR
 info：
 ******************************************************************************/
void F5F8_Clear_NIR() {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	af00      	add	r7, sp, #0
	AS7341_Write_Byte(0x00, 0x00);
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	2000      	movs	r0, #0
 8003d70:	f7ff fee1 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x01, 0x00);
 8003d74:	2100      	movs	r1, #0
 8003d76:	2001      	movs	r0, #1
 8003d78:	f7ff fedd 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x02, 0x00);
 8003d7c:	2100      	movs	r1, #0
 8003d7e:	2002      	movs	r0, #2
 8003d80:	f7ff fed9 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x03, 0x40);
 8003d84:	2140      	movs	r1, #64	; 0x40
 8003d86:	2003      	movs	r0, #3
 8003d88:	f7ff fed5 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x04, 0x02);
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	2004      	movs	r0, #4
 8003d90:	f7ff fed1 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x05, 0x00);
 8003d94:	2100      	movs	r1, #0
 8003d96:	2005      	movs	r0, #5
 8003d98:	f7ff fecd 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x06, 0x10);
 8003d9c:	2110      	movs	r1, #16
 8003d9e:	2006      	movs	r0, #6
 8003da0:	f7ff fec9 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x07, 0x03);
 8003da4:	2103      	movs	r1, #3
 8003da6:	2007      	movs	r0, #7
 8003da8:	f7ff fec5 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x08, 0x50);
 8003dac:	2150      	movs	r1, #80	; 0x50
 8003dae:	2008      	movs	r0, #8
 8003db0:	f7ff fec1 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x09, 0x10);
 8003db4:	2110      	movs	r1, #16
 8003db6:	2009      	movs	r0, #9
 8003db8:	f7ff febd 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0A, 0x03);
 8003dbc:	2103      	movs	r1, #3
 8003dbe:	200a      	movs	r0, #10
 8003dc0:	f7ff feb9 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0B, 0x00);
 8003dc4:	2100      	movs	r1, #0
 8003dc6:	200b      	movs	r0, #11
 8003dc8:	f7ff feb5 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0C, 0x00);
 8003dcc:	2100      	movs	r1, #0
 8003dce:	200c      	movs	r0, #12
 8003dd0:	f7ff feb1 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0D, 0x00);
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	200d      	movs	r0, #13
 8003dd8:	f7ff fead 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0E, 0x24);
 8003ddc:	2124      	movs	r1, #36	; 0x24
 8003dde:	200e      	movs	r0, #14
 8003de0:	f7ff fea9 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x0F, 0x00);
 8003de4:	2100      	movs	r1, #0
 8003de6:	200f      	movs	r0, #15
 8003de8:	f7ff fea5 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x10, 0x00);
 8003dec:	2100      	movs	r1, #0
 8003dee:	2010      	movs	r0, #16
 8003df0:	f7ff fea1 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x11, 0x50);
 8003df4:	2150      	movs	r1, #80	; 0x50
 8003df6:	2011      	movs	r0, #17
 8003df8:	f7ff fe9d 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x12, 0x00);
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	2012      	movs	r0, #18
 8003e00:	f7ff fe99 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(0x13, 0x06);
 8003e04:	2106      	movs	r1, #6
 8003e06:	2013      	movs	r0, #19
 8003e08:	f7ff fe95 	bl	8003b36 <AS7341_Write_Byte>
}
 8003e0c:	bf00      	nop
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <AS7341_startMeasure>:

/******************************************************************************
 function:	Start the measurement
 info：		This function only handles SPM and SYNS modes.
 ******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode) {
 8003e10:	b5b0      	push	{r4, r5, r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	71fb      	strb	r3, [r7, #7]
	UBYTE data = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	73fb      	strb	r3, [r7, #15]
	data = AS7341_Read_Byte(AS7341_CFG_0);
 8003e1e:	20a9      	movs	r0, #169	; 0xa9
 8003e20:	f7ff fe7a 	bl	8003b18 <AS7341_Read_Byte>
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]
	data = data & (~(1 << 4));
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
 8003e2a:	f023 0310 	bic.w	r3, r3, #16
 8003e2e:	73fb      	strb	r3, [r7, #15]

	AS7341_Write_Byte(AS7341_CFG_0, data);
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
 8003e32:	4619      	mov	r1, r3
 8003e34:	20a9      	movs	r0, #169	; 0xa9
 8003e36:	f7ff fe7e 	bl	8003b36 <AS7341_Write_Byte>

	AS7341_EnableSpectralMeasure(false);
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7ff fecc 	bl	8003bd8 <AS7341_EnableSpectralMeasure>
	AS7341_Write_Byte(0xAF, 0x10);    //SMUX Command config
 8003e40:	2110      	movs	r1, #16
 8003e42:	20af      	movs	r0, #175	; 0xaf
 8003e44:	f7ff fe77 	bl	8003b36 <AS7341_Write_Byte>

	if (mode == eF1F4ClearNIR)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <AS7341_startMeasure+0x44>
		F1F4_Clear_NIR();
 8003e4e:	f7ff ff37 	bl	8003cc0 <F1F4_Clear_NIR>
 8003e52:	e004      	b.n	8003e5e <AS7341_startMeasure+0x4e>
	else if (mode == eF5F8ClearNIR)
 8003e54:	79fb      	ldrb	r3, [r7, #7]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <AS7341_startMeasure+0x4e>
		F5F8_Clear_NIR();
 8003e5a:	f7ff ff85 	bl	8003d68 <F5F8_Clear_NIR>
	AS7341_EnableSMUX(true);
 8003e5e:	2001      	movs	r0, #1
 8003e60:	f7ff fed8 	bl	8003c14 <AS7341_EnableSMUX>
	if (measureMode == eSyns) {
 8003e64:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <AS7341_startMeasure+0xcc>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <AS7341_startMeasure+0x6a>
		AS7341_SetGpioMode(INPUT);
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	f000 f8d3 	bl	8004018 <AS7341_SetGpioMode>
		AS7341_Config(eSyns);
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7ff feec 	bl	8003c50 <AS7341_Config>
 8003e78:	e006      	b.n	8003e88 <AS7341_startMeasure+0x78>
	} else if (measureMode == eSpm) {
 8003e7a:	4b18      	ldr	r3, [pc, #96]	; (8003edc <AS7341_startMeasure+0xcc>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <AS7341_startMeasure+0x78>
		AS7341_Config(eSpm);
 8003e82:	2000      	movs	r0, #0
 8003e84:	f7ff fee4 	bl	8003c50 <AS7341_Config>
	}
	AS7341_EnableSpectralMeasure(true);
 8003e88:	2001      	movs	r0, #1
 8003e8a:	f7ff fea5 	bl	8003bd8 <AS7341_EnableSpectralMeasure>
	if (measureMode == eSpm) {
 8003e8e:	4b13      	ldr	r3, [pc, #76]	; (8003edc <AS7341_startMeasure+0xcc>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d11e      	bne.n	8003ed4 <AS7341_startMeasure+0xc4>
		// 01.06.2022
		// Added try to prevent a while forever loop

		uint64_t tick = 0;
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
		bool exit_flagg = false;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	73bb      	strb	r3, [r7, #14]
		while (!AS7341_MeasureComplete()) {
 8003ea6:	e00e      	b.n	8003ec6 <AS7341_startMeasure+0xb6>
			//DEV_Delay_ms(1);
			if (++tick > (UINT16_MAX/20)-1) {
 8003ea8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003eac:	1c54      	adds	r4, r2, #1
 8003eae:	f143 0500 	adc.w	r5, r3, #0
 8003eb2:	e9c7 4504 	strd	r4, r5, [r7, #16]
 8003eb6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003eba:	f640 41cc 	movw	r1, #3276	; 0xccc
 8003ebe:	428a      	cmp	r2, r1
 8003ec0:	f173 0300 	sbcs.w	r3, r3, #0
 8003ec4:	d205      	bcs.n	8003ed2 <AS7341_startMeasure+0xc2>
		while (!AS7341_MeasureComplete()) {
 8003ec6:	f000 f80b 	bl	8003ee0 <AS7341_MeasureComplete>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0eb      	beq.n	8003ea8 <AS7341_startMeasure+0x98>
 8003ed0:	e000      	b.n	8003ed4 <AS7341_startMeasure+0xc4>
				return;
 8003ed2:	bf00      	nop
			}
		}


	}
}
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8003eda:	bf00      	nop
 8003edc:	20000746 	.word	0x20000746

08003ee0 <AS7341_MeasureComplete>:
/******************************************************************************
 function:  Determine whether the measurement is complete
 info：
 ******************************************************************************/

int AS7341_MeasureComplete() {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2);
 8003ee6:	20a3      	movs	r0, #163	; 0xa3
 8003ee8:	f7ff fe16 	bl	8003b18 <AS7341_Read_Byte>
 8003eec:	4603      	mov	r3, r0
 8003eee:	71fb      	strb	r3, [r7, #7]
	if ((status & (1 << 6))) {
 8003ef0:	79fb      	ldrb	r3, [r7, #7]
 8003ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <AS7341_MeasureComplete+0x1e>
		return true;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <AS7341_MeasureComplete+0x20>
	} else {
		return false;
 8003efe:	2300      	movs	r3, #0
	}
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <AS7341_GetChannelData>:

/******************************************************************************
 function:  Gets data for all channels
 info：
 ******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel) {
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	4603      	mov	r3, r0
 8003f10:	71fb      	strb	r3, [r7, #7]
	UWORD data[2];
	UWORD channelData = 0x0000;
 8003f12:	2300      	movs	r3, #0
 8003f14:	81fb      	strh	r3, [r7, #14]
	data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel * 2);
 8003f16:	79fb      	ldrb	r3, [r7, #7]
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	3b6b      	subs	r3, #107	; 0x6b
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff fdf9 	bl	8003b18 <AS7341_Read_Byte>
 8003f26:	4603      	mov	r3, r0
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	813b      	strh	r3, [r7, #8]
	data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel * 2);
 8003f2c:	79fb      	ldrb	r3, [r7, #7]
 8003f2e:	334b      	adds	r3, #75	; 0x4b
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fdee 	bl	8003b18 <AS7341_Read_Byte>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	817b      	strh	r3, [r7, #10]
	channelData = data[1];
 8003f42:	897b      	ldrh	r3, [r7, #10]
 8003f44:	81fb      	strh	r3, [r7, #14]
	channelData = (channelData << 8) | data[0];
 8003f46:	89fb      	ldrh	r3, [r7, #14]
 8003f48:	021b      	lsls	r3, r3, #8
 8003f4a:	b21a      	sxth	r2, r3
 8003f4c:	893b      	ldrh	r3, [r7, #8]
 8003f4e:	b21b      	sxth	r3, r3
 8003f50:	4313      	orrs	r3, r2
 8003f52:	b21b      	sxth	r3, r3
 8003f54:	81fb      	strh	r3, [r7, #14]
	//DEV_Delay_ms(50);
	return channelData;
 8003f56:	89fb      	ldrh	r3, [r7, #14]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <AS7341_ReadSpectralDataOne>:
/******************************************************************************
 function:  Use SMUX to read data from the low channel
 info：
 ******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne() {
 8003f60:	b590      	push	{r4, r7, lr}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
	sModeOneData_t data;
	data.channel1 = AS7341_GetChannelData(0);
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7ff ffcd 	bl	8003f08 <AS7341_GetChannelData>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	81bb      	strh	r3, [r7, #12]
	data.channel2 = AS7341_GetChannelData(1);
 8003f72:	2001      	movs	r0, #1
 8003f74:	f7ff ffc8 	bl	8003f08 <AS7341_GetChannelData>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	81fb      	strh	r3, [r7, #14]
	data.channel3 = AS7341_GetChannelData(2);
 8003f7c:	2002      	movs	r0, #2
 8003f7e:	f7ff ffc3 	bl	8003f08 <AS7341_GetChannelData>
 8003f82:	4603      	mov	r3, r0
 8003f84:	823b      	strh	r3, [r7, #16]
	data.channel4 = AS7341_GetChannelData(3);
 8003f86:	2003      	movs	r0, #3
 8003f88:	f7ff ffbe 	bl	8003f08 <AS7341_GetChannelData>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	827b      	strh	r3, [r7, #18]
	data.CLEAR = AS7341_GetChannelData(4);
 8003f90:	2004      	movs	r0, #4
 8003f92:	f7ff ffb9 	bl	8003f08 <AS7341_GetChannelData>
 8003f96:	4603      	mov	r3, r0
 8003f98:	82bb      	strh	r3, [r7, #20]
	data.NIR = AS7341_GetChannelData(5);
 8003f9a:	2005      	movs	r0, #5
 8003f9c:	f7ff ffb4 	bl	8003f08 <AS7341_GetChannelData>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	82fb      	strh	r3, [r7, #22]
	return data;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	461c      	mov	r4, r3
 8003fa8:	f107 030c 	add.w	r3, r7, #12
 8003fac:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003fae:	6020      	str	r0, [r4, #0]
 8003fb0:	6061      	str	r1, [r4, #4]
 8003fb2:	60a2      	str	r2, [r4, #8]
}
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	371c      	adds	r7, #28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd90      	pop	{r4, r7, pc}

08003fbc <AS7341_ReadSpectralDataTwo>:
/******************************************************************************
 function:  Use SMUX to read data from the high channel
 info：
 ******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo() {
 8003fbc:	b590      	push	{r4, r7, lr}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
	sModeTwoData_t data;
	data.channel5 = AS7341_GetChannelData(0);
 8003fc4:	2000      	movs	r0, #0
 8003fc6:	f7ff ff9f 	bl	8003f08 <AS7341_GetChannelData>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	81bb      	strh	r3, [r7, #12]
	data.channel6 = AS7341_GetChannelData(1);
 8003fce:	2001      	movs	r0, #1
 8003fd0:	f7ff ff9a 	bl	8003f08 <AS7341_GetChannelData>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	81fb      	strh	r3, [r7, #14]
	data.channel7 = AS7341_GetChannelData(2);
 8003fd8:	2002      	movs	r0, #2
 8003fda:	f7ff ff95 	bl	8003f08 <AS7341_GetChannelData>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	823b      	strh	r3, [r7, #16]
	data.channel8 = AS7341_GetChannelData(3);
 8003fe2:	2003      	movs	r0, #3
 8003fe4:	f7ff ff90 	bl	8003f08 <AS7341_GetChannelData>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	827b      	strh	r3, [r7, #18]
	data.CLEAR = AS7341_GetChannelData(4);
 8003fec:	2004      	movs	r0, #4
 8003fee:	f7ff ff8b 	bl	8003f08 <AS7341_GetChannelData>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	82bb      	strh	r3, [r7, #20]
	data.NIR = AS7341_GetChannelData(5);
 8003ff6:	2005      	movs	r0, #5
 8003ff8:	f7ff ff86 	bl	8003f08 <AS7341_GetChannelData>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	82fb      	strh	r3, [r7, #22]
	return data;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	461c      	mov	r4, r3
 8004004:	f107 030c 	add.w	r3, r7, #12
 8004008:	cb07      	ldmia	r3!, {r0, r1, r2}
 800400a:	6020      	str	r0, [r4, #0]
 800400c:	6061      	str	r1, [r4, #4]
 800400e:	60a2      	str	r2, [r4, #8]
}
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	371c      	adds	r7, #28
 8004014:	46bd      	mov	sp, r7
 8004016:	bd90      	pop	{r4, r7, pc}

08004018 <AS7341_SetGpioMode>:

/******************************************************************************
 function:	Set GPIO to input or output mode
 info：
 ******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
	UBYTE data;

	data = AS7341_Read_Byte(AS7341_GPIO_2);
 8004022:	20be      	movs	r0, #190	; 0xbe
 8004024:	f7ff fd78 	bl	8003b18 <AS7341_Read_Byte>
 8004028:	4603      	mov	r3, r0
 800402a:	73fb      	strb	r3, [r7, #15]
	if (mode == INPUT) {
 800402c:	79fb      	ldrb	r3, [r7, #7]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d103      	bne.n	800403a <AS7341_SetGpioMode+0x22>
		data = data | (1 << 2);
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	f043 0304 	orr.w	r3, r3, #4
 8004038:	73fb      	strb	r3, [r7, #15]
	}

	if (mode == OUTPUT) {
 800403a:	79fb      	ldrb	r3, [r7, #7]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d103      	bne.n	8004048 <AS7341_SetGpioMode+0x30>
		data = data & (~(1 << 2));
 8004040:	7bfb      	ldrb	r3, [r7, #15]
 8004042:	f023 0304 	bic.w	r3, r3, #4
 8004046:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_GPIO_2, data);
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	4619      	mov	r1, r3
 800404c:	20be      	movs	r0, #190	; 0xbe
 800404e:	f7ff fd72 	bl	8003b36 <AS7341_Write_Byte>
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <AS7341_ATIME_config>:

/******************************************************************************
 function:	Configure the ATIME register
 info：
 ******************************************************************************/
void AS7341_ATIME_config(UBYTE value) {
 800405a:	b580      	push	{r7, lr}
 800405c:	b082      	sub	sp, #8
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	71fb      	strb	r3, [r7, #7]
	AS7341_Write_Byte(AS7341_ATIME, value);
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	4619      	mov	r1, r3
 8004068:	2081      	movs	r0, #129	; 0x81
 800406a:	f7ff fd64 	bl	8003b36 <AS7341_Write_Byte>
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}

08004076 <AS7341_ASTEP_config>:

/******************************************************************************
 function:	Configure the ASTEP register
 info：
 ******************************************************************************/
void AS7341_ASTEP_config(UWORD value) {
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	4603      	mov	r3, r0
 800407e:	80fb      	strh	r3, [r7, #6]
	UBYTE highValue, lowValue;
	lowValue = value & 0x00ff;
 8004080:	88fb      	ldrh	r3, [r7, #6]
 8004082:	73fb      	strb	r3, [r7, #15]
	highValue = value >> 8;
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	0a1b      	lsrs	r3, r3, #8
 8004088:	b29b      	uxth	r3, r3
 800408a:	73bb      	strb	r3, [r7, #14]
	AS7341_Write_Byte(AS7341_ASTEP_L, lowValue);
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	4619      	mov	r1, r3
 8004090:	20ca      	movs	r0, #202	; 0xca
 8004092:	f7ff fd50 	bl	8003b36 <AS7341_Write_Byte>
	AS7341_Write_Byte(AS7341_ASTEP_H, highValue);
 8004096:	7bbb      	ldrb	r3, [r7, #14]
 8004098:	4619      	mov	r1, r3
 800409a:	20cb      	movs	r0, #203	; 0xcb
 800409c:	f7ff fd4b 	bl	8003b36 <AS7341_Write_Byte>
}
 80040a0:	bf00      	nop
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <AS7341_AGAIN_config>:
/******************************************************************************
 function:	Configure the AGAIN register
 value:    0    1    2    3    4    5      6     7     8     9      10
 gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
 ******************************************************************************/
void AS7341_AGAIN_config(UBYTE value) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	71fb      	strb	r3, [r7, #7]
	if (value > 10)
 80040b2:	79fb      	ldrb	r3, [r7, #7]
 80040b4:	2b0a      	cmp	r3, #10
 80040b6:	d901      	bls.n	80040bc <AS7341_AGAIN_config+0x14>
		value = 10;
 80040b8:	230a      	movs	r3, #10
 80040ba:	71fb      	strb	r3, [r7, #7]
	AS7341_Write_Byte(AS7341_CFG_1, value);
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	4619      	mov	r1, r3
 80040c0:	20aa      	movs	r0, #170	; 0xaa
 80040c2:	f7ff fd38 	bl	8003b36 <AS7341_Write_Byte>
}
 80040c6:	bf00      	nop
 80040c8:	3708      	adds	r7, #8
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <AS7341_SetBank>:
/******************************************************************************
 function:	set REG_BANK
 info：	0: Register access to register 0x80 and above
 1: Register access to register 0x60 to 0x74
 ******************************************************************************/
void AS7341_SetBank(UBYTE addr) {
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b084      	sub	sp, #16
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	4603      	mov	r3, r0
 80040d6:	71fb      	strb	r3, [r7, #7]
	UBYTE data = 0;
 80040d8:	2300      	movs	r3, #0
 80040da:	73fb      	strb	r3, [r7, #15]
	data = AS7341_Read_Byte(AS7341_CFG_0);
 80040dc:	20a9      	movs	r0, #169	; 0xa9
 80040de:	f7ff fd1b 	bl	8003b18 <AS7341_Read_Byte>
 80040e2:	4603      	mov	r3, r0
 80040e4:	73fb      	strb	r3, [r7, #15]
	if (addr == 1) {
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d103      	bne.n	80040f4 <AS7341_SetBank+0x26>

		data = data | (1 << 4);
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
 80040ee:	f043 0310 	orr.w	r3, r3, #16
 80040f2:	73fb      	strb	r3, [r7, #15]
	}

	if (addr == 0) {
 80040f4:	79fb      	ldrb	r3, [r7, #7]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d103      	bne.n	8004102 <AS7341_SetBank+0x34>

		data = data & (~(1 << 4));
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	f023 0310 	bic.w	r3, r3, #16
 8004100:	73fb      	strb	r3, [r7, #15]
	}
	AS7341_Write_Byte(AS7341_CFG_0, data);
 8004102:	7bfb      	ldrb	r3, [r7, #15]
 8004104:	4619      	mov	r1, r3
 8004106:	20a9      	movs	r0, #169	; 0xa9
 8004108:	f7ff fd15 	bl	8003b36 <AS7341_Write_Byte>
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <PCA9847_Initialise>:
#include "PCA9847.h"

uint8_t PCA9847_Initialise(PCA9847 *dev, I2C_HandleTypeDef *i2cHandle) {
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	601a      	str	r2, [r3, #0]

	/* Store number of transaction errors */
	uint8_t regData;
	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	73fb      	strb	r3, [r7, #15]

	/* Set to reset default state (all channels disabled) */
	regData = DISABLE_CHANNELS;
 8004128:	2300      	movs	r3, #0
 800412a:	737b      	strb	r3, [r7, #13]
	status = PCA9847_Write(dev, &regData);
 800412c:	f107 030d 	add.w	r3, r7, #13
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f858 	bl	80041e8 <PCA9847_Write>
 8004138:	4603      	mov	r3, r0
 800413a:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 800413c:	7bbb      	ldrb	r3, [r7, #14]
 800413e:	2b00      	cmp	r3, #0
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	7bfb      	ldrb	r3, [r7, #15]
 800414c:	4413      	add	r3, r2
 800414e:	73fb      	strb	r3, [r7, #15]

	return errNum;
 8004150:	7bfb      	ldrb	r3, [r7, #15]
}
 8004152:	4618      	mov	r0, r3
 8004154:	3710      	adds	r7, #16
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <PCA9847_SetChannel>:

void PCA9847_SetChannel(PCA9847 *dev, uint8_t channelNumber) {
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	switch (channelNumber) {
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	2b07      	cmp	r3, #7
 800416c:	d82a      	bhi.n	80041c4 <PCA9847_SetChannel+0x68>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <PCA9847_SetChannel+0x18>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004195 	.word	0x08004195
 8004178:	0800419b 	.word	0x0800419b
 800417c:	080041a1 	.word	0x080041a1
 8004180:	080041a7 	.word	0x080041a7
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041b3 	.word	0x080041b3
 800418c:	080041b9 	.word	0x080041b9
 8004190:	080041bf 	.word	0x080041bf
	case 0:
		regData = ENABLE_CHANNEL_0;
 8004194:	2308      	movs	r3, #8
 8004196:	73fb      	strb	r3, [r7, #15]
		break;
 8004198:	e01a      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 1:
		regData = ENABLE_CHANNEL_1;
 800419a:	2309      	movs	r3, #9
 800419c:	73fb      	strb	r3, [r7, #15]
		break;
 800419e:	e017      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 2:
		regData = ENABLE_CHANNEL_2;
 80041a0:	230a      	movs	r3, #10
 80041a2:	73fb      	strb	r3, [r7, #15]
		break;
 80041a4:	e014      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 3:
		regData = ENABLE_CHANNEL_3;
 80041a6:	230b      	movs	r3, #11
 80041a8:	73fb      	strb	r3, [r7, #15]
		break;
 80041aa:	e011      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 4:
		regData = ENABLE_CHANNEL_4;
 80041ac:	230c      	movs	r3, #12
 80041ae:	73fb      	strb	r3, [r7, #15]
		break;
 80041b0:	e00e      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 5:
		regData = ENABLE_CHANNEL_5;
 80041b2:	230d      	movs	r3, #13
 80041b4:	73fb      	strb	r3, [r7, #15]
		break;
 80041b6:	e00b      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 6:
		regData = ENABLE_CHANNEL_6;
 80041b8:	230e      	movs	r3, #14
 80041ba:	73fb      	strb	r3, [r7, #15]
		break;
 80041bc:	e008      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	case 7:
		regData = ENABLE_CHANNEL_7;
 80041be:	230f      	movs	r3, #15
 80041c0:	73fb      	strb	r3, [r7, #15]
		break;
 80041c2:	e005      	b.n	80041d0 <PCA9847_SetChannel+0x74>
	default:
		printf("Channelnumber should be 0-7 but is %d \r\n", channelNumber);
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	4619      	mov	r1, r3
 80041c8:	4806      	ldr	r0, [pc, #24]	; (80041e4 <PCA9847_SetChannel+0x88>)
 80041ca:	f008 fc4d 	bl	800ca68 <iprintf>
 80041ce:	e005      	b.n	80041dc <PCA9847_SetChannel+0x80>
		return;
	}
	PCA9847_Write(dev, &regData);
 80041d0:	f107 030f 	add.w	r3, r7, #15
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f806 	bl	80041e8 <PCA9847_Write>
}
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	0800f200 	.word	0x0800f200

080041e8 <PCA9847_Write>:

/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef PCA9847_Write(PCA9847 *dev, uint8_t *data) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af02      	add	r7, sp, #8
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Master_Transmit(dev->i2cHandle, PCA9847_I2C_ADDR, data, 1,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	230a      	movs	r3, #10
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	2301      	movs	r3, #1
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	21e2      	movs	r1, #226	; 0xe2
 8004200:	f000 fcd2 	bl	8004ba8 <HAL_I2C_Master_Transmit>
 8004204:	4603      	mov	r3, r0
			10);
}
 8004206:	4618      	mov	r0, r3
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <SHT41_read>:

#include "SHT41.h"
#include <stdbool.h>


bool SHT41_read(SHT41 *dev) {
 8004210:	b580      	push	{r7, lr}
 8004212:	b08e      	sub	sp, #56	; 0x38
 8004214:	af02      	add	r7, sp, #8
 8004216:	6078      	str	r0, [r7, #4]
	//PCA9847_SetChannel(dev->multiplexer, dev->Multiplexer_Channel);
	HAL_StatusTypeDef status;
	uint8_t value[6] = { 0 };
 8004218:	2300      	movs	r3, #0
 800421a:	60fb      	str	r3, [r7, #12]
 800421c:	2300      	movs	r3, #0
 800421e:	823b      	strh	r3, [r7, #16]
	status = HAL_I2C_Master_Transmit(dev->i2cHandle, SHT41_I2C_ADDR, MEASURE_HIGHP, 1, MIN_TIMEOUT);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6818      	ldr	r0, [r3, #0]
 8004224:	230a      	movs	r3, #10
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	2301      	movs	r3, #1
 800422a:	22fd      	movs	r2, #253	; 0xfd
 800422c:	2188      	movs	r1, #136	; 0x88
 800422e:	f000 fcbb 	bl	8004ba8 <HAL_I2C_Master_Transmit>
 8004232:	4603      	mov	r3, r0
 8004234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (status != HAL_OK) {
 8004238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800423c:	2b00      	cmp	r3, #0
 800423e:	d001      	beq.n	8004244 <SHT41_read+0x34>
		return false;
 8004240:	2300      	movs	r3, #0
 8004242:	e073      	b.n	800432c <SHT41_read+0x11c>
	}
	HAL_Delay(MIN_TIMEOUT);
 8004244:	200a      	movs	r0, #10
 8004246:	f000 f8f5 	bl	8004434 <HAL_Delay>
	//status = HAL_I2C_Master_Receive(dev->i2cHandle, SHT41_I2C_ADDR, value, 6, MIN_TIMEOUT);
	status = HAL_I2C_Master_Receive(dev->i2cHandle, 0x44 << 1, value, 6, 10);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	f107 020c 	add.w	r2, r7, #12
 8004252:	230a      	movs	r3, #10
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	2306      	movs	r3, #6
 8004258:	2188      	movs	r1, #136	; 0x88
 800425a:	f000 fd99 	bl	8004d90 <HAL_I2C_Master_Receive>
 800425e:	4603      	mov	r3, r0
 8004260:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	if (status != HAL_OK) {
 8004264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SHT41_read+0x60>
		return false;
 800426c:	2300      	movs	r3, #0
 800426e:	e05d      	b.n	800432c <SHT41_read+0x11c>
	}

	float t_ticks = value[0] * 256 + value[1];
 8004270:	7b3b      	ldrb	r3, [r7, #12]
 8004272:	021b      	lsls	r3, r3, #8
 8004274:	7b7a      	ldrb	r2, [r7, #13]
 8004276:	4413      	add	r3, r2
 8004278:	ee07 3a90 	vmov	s15, r3
 800427c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004280:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float checksum_t = value[2];
 8004284:	7bbb      	ldrb	r3, [r7, #14]
 8004286:	ee07 3a90 	vmov	s15, r3
 800428a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800428e:	edc7 7a08 	vstr	s15, [r7, #32]
	float rh_ticks = value[3] * 256 + value[4];
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	021b      	lsls	r3, r3, #8
 8004296:	7c3a      	ldrb	r2, [r7, #16]
 8004298:	4413      	add	r3, r2
 800429a:	ee07 3a90 	vmov	s15, r3
 800429e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042a2:	edc7 7a07 	vstr	s15, [r7, #28]
	float checksum_rh = value[5];
 80042a6:	7c7b      	ldrb	r3, [r7, #17]
 80042a8:	ee07 3a90 	vmov	s15, r3
 80042ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042b0:	edc7 7a06 	vstr	s15, [r7, #24]
	float t_degC = -45 + 175 * t_ticks / 65535;
 80042b4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80042b8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004334 <SHT41_read+0x124>
 80042bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042c0:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004338 <SHT41_read+0x128>
 80042c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042c8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800433c <SHT41_read+0x12c>
 80042cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042d0:	edc7 7a05 	vstr	s15, [r7, #20]
	float rh_pRH = -6 + 125 * rh_ticks / 65535;
 80042d4:	edd7 7a07 	vldr	s15, [r7, #28]
 80042d8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8004340 <SHT41_read+0x130>
 80042dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042e0:	eddf 6a15 	vldr	s13, [pc, #84]	; 8004338 <SHT41_read+0x128>
 80042e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042e8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80042ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042f0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	if (rh_pRH > 100) {
 80042f4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80042f8:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004344 <SHT41_read+0x134>
 80042fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	dd01      	ble.n	800430a <SHT41_read+0xfa>
		rh_pRH = 100;
 8004306:	4b10      	ldr	r3, [pc, #64]	; (8004348 <SHT41_read+0x138>)
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	if (rh_pRH < 0) {
 800430a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800430e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004316:	d502      	bpl.n	800431e <SHT41_read+0x10e>
		rh_pRH = 0;
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	dev->t_degC = t_degC;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	609a      	str	r2, [r3, #8]
	dev->rh_pRH = rh_pRH;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004328:	60da      	str	r2, [r3, #12]
	return true;
 800432a:	2301      	movs	r3, #1
}
 800432c:	4618      	mov	r0, r3
 800432e:	3730      	adds	r7, #48	; 0x30
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	432f0000 	.word	0x432f0000
 8004338:	477fff00 	.word	0x477fff00
 800433c:	42340000 	.word	0x42340000
 8004340:	42fa0000 	.word	0x42fa0000
 8004344:	42c80000 	.word	0x42c80000
 8004348:	42c80000 	.word	0x42c80000

0800434c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004352:	2300      	movs	r3, #0
 8004354:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004356:	2003      	movs	r0, #3
 8004358:	f000 f960 	bl	800461c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800435c:	200f      	movs	r0, #15
 800435e:	f000 f80d 	bl	800437c <HAL_InitTick>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	71fb      	strb	r3, [r7, #7]
 800436c:	e001      	b.n	8004372 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800436e:	f7ff f8c7 	bl	8003500 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004372:	79fb      	ldrb	r3, [r7, #7]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004388:	4b17      	ldr	r3, [pc, #92]	; (80043e8 <HAL_InitTick+0x6c>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d023      	beq.n	80043d8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004390:	4b16      	ldr	r3, [pc, #88]	; (80043ec <HAL_InitTick+0x70>)
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	4b14      	ldr	r3, [pc, #80]	; (80043e8 <HAL_InitTick+0x6c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4619      	mov	r1, r3
 800439a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800439e:	fbb3 f3f1 	udiv	r3, r3, r1
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 f96d 	bl	8004686 <HAL_SYSTICK_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b0f      	cmp	r3, #15
 80043b6:	d809      	bhi.n	80043cc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043b8:	2200      	movs	r2, #0
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f000 f937 	bl	8004632 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043c4:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <HAL_InitTick+0x74>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e007      	b.n	80043dc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
 80043d0:	e004      	b.n	80043dc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
 80043d6:	e001      	b.n	80043dc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3710      	adds	r7, #16
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}
 80043e6:	bf00      	nop
 80043e8:	2000020c 	.word	0x2000020c
 80043ec:	20000204 	.word	0x20000204
 80043f0:	20000208 	.word	0x20000208

080043f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043f4:	b480      	push	{r7}
 80043f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <HAL_IncTick+0x20>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_IncTick+0x24>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4413      	add	r3, r2
 8004404:	4a04      	ldr	r2, [pc, #16]	; (8004418 <HAL_IncTick+0x24>)
 8004406:	6013      	str	r3, [r2, #0]
}
 8004408:	bf00      	nop
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	2000020c 	.word	0x2000020c
 8004418:	20000748 	.word	0x20000748

0800441c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  return uwTick;
 8004420:	4b03      	ldr	r3, [pc, #12]	; (8004430 <HAL_GetTick+0x14>)
 8004422:	681b      	ldr	r3, [r3, #0]
}
 8004424:	4618      	mov	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	20000748 	.word	0x20000748

08004434 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800443c:	f7ff ffee 	bl	800441c <HAL_GetTick>
 8004440:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444c:	d005      	beq.n	800445a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800444e:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <HAL_Delay+0x44>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4413      	add	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800445a:	bf00      	nop
 800445c:	f7ff ffde 	bl	800441c <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	429a      	cmp	r2, r3
 800446a:	d8f7      	bhi.n	800445c <HAL_Delay+0x28>
  {
  }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	2000020c 	.word	0x2000020c

0800447c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f003 0307 	and.w	r3, r3, #7
 800448a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800448c:	4b0c      	ldr	r3, [pc, #48]	; (80044c0 <__NVIC_SetPriorityGrouping+0x44>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004498:	4013      	ands	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80044a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044ae:	4a04      	ldr	r2, [pc, #16]	; (80044c0 <__NVIC_SetPriorityGrouping+0x44>)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	60d3      	str	r3, [r2, #12]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	e000ed00 	.word	0xe000ed00

080044c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <__NVIC_GetPriorityGrouping+0x18>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	0a1b      	lsrs	r3, r3, #8
 80044ce:	f003 0307 	and.w	r3, r3, #7
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	db0b      	blt.n	800450a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	f003 021f 	and.w	r2, r3, #31
 80044f8:	4907      	ldr	r1, [pc, #28]	; (8004518 <__NVIC_EnableIRQ+0x38>)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2001      	movs	r0, #1
 8004502:	fa00 f202 	lsl.w	r2, r0, r2
 8004506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800450a:	bf00      	nop
 800450c:	370c      	adds	r7, #12
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	e000e100 	.word	0xe000e100

0800451c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	4603      	mov	r3, r0
 8004524:	6039      	str	r1, [r7, #0]
 8004526:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800452c:	2b00      	cmp	r3, #0
 800452e:	db0a      	blt.n	8004546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	b2da      	uxtb	r2, r3
 8004534:	490c      	ldr	r1, [pc, #48]	; (8004568 <__NVIC_SetPriority+0x4c>)
 8004536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800453a:	0112      	lsls	r2, r2, #4
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	440b      	add	r3, r1
 8004540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004544:	e00a      	b.n	800455c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	b2da      	uxtb	r2, r3
 800454a:	4908      	ldr	r1, [pc, #32]	; (800456c <__NVIC_SetPriority+0x50>)
 800454c:	79fb      	ldrb	r3, [r7, #7]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	3b04      	subs	r3, #4
 8004554:	0112      	lsls	r2, r2, #4
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	440b      	add	r3, r1
 800455a:	761a      	strb	r2, [r3, #24]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	e000e100 	.word	0xe000e100
 800456c:	e000ed00 	.word	0xe000ed00

08004570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004570:	b480      	push	{r7}
 8004572:	b089      	sub	sp, #36	; 0x24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f1c3 0307 	rsb	r3, r3, #7
 800458a:	2b04      	cmp	r3, #4
 800458c:	bf28      	it	cs
 800458e:	2304      	movcs	r3, #4
 8004590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3304      	adds	r3, #4
 8004596:	2b06      	cmp	r3, #6
 8004598:	d902      	bls.n	80045a0 <NVIC_EncodePriority+0x30>
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3b03      	subs	r3, #3
 800459e:	e000      	b.n	80045a2 <NVIC_EncodePriority+0x32>
 80045a0:	2300      	movs	r3, #0
 80045a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	401a      	ands	r2, r3
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045b8:	f04f 31ff 	mov.w	r1, #4294967295
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	fa01 f303 	lsl.w	r3, r1, r3
 80045c2:	43d9      	mvns	r1, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c8:	4313      	orrs	r3, r2
         );
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3724      	adds	r7, #36	; 0x24
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3b01      	subs	r3, #1
 80045e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045e8:	d301      	bcc.n	80045ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045ea:	2301      	movs	r3, #1
 80045ec:	e00f      	b.n	800460e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ee:	4a0a      	ldr	r2, [pc, #40]	; (8004618 <SysTick_Config+0x40>)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045f6:	210f      	movs	r1, #15
 80045f8:	f04f 30ff 	mov.w	r0, #4294967295
 80045fc:	f7ff ff8e 	bl	800451c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <SysTick_Config+0x40>)
 8004602:	2200      	movs	r2, #0
 8004604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004606:	4b04      	ldr	r3, [pc, #16]	; (8004618 <SysTick_Config+0x40>)
 8004608:	2207      	movs	r2, #7
 800460a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	e000e010 	.word	0xe000e010

0800461c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f7ff ff29 	bl	800447c <__NVIC_SetPriorityGrouping>
}
 800462a:	bf00      	nop
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af00      	add	r7, sp, #0
 8004638:	4603      	mov	r3, r0
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
 800463e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004644:	f7ff ff3e 	bl	80044c4 <__NVIC_GetPriorityGrouping>
 8004648:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	68b9      	ldr	r1, [r7, #8]
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	f7ff ff8e 	bl	8004570 <NVIC_EncodePriority>
 8004654:	4602      	mov	r2, r0
 8004656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465a:	4611      	mov	r1, r2
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff ff5d 	bl	800451c <__NVIC_SetPriority>
}
 8004662:	bf00      	nop
 8004664:	3718      	adds	r7, #24
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b082      	sub	sp, #8
 800466e:	af00      	add	r7, sp, #0
 8004670:	4603      	mov	r3, r0
 8004672:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff ff31 	bl	80044e0 <__NVIC_EnableIRQ>
}
 800467e:	bf00      	nop
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ffa2 	bl	80045d8 <SysTick_Config>
 8004694:	4603      	mov	r3, r0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
	...

080046a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046ae:	e17f      	b.n	80049b0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	2101      	movs	r1, #1
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	fa01 f303 	lsl.w	r3, r1, r3
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 8171 	beq.w	80049aa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d005      	beq.n	80046e0 <HAL_GPIO_Init+0x40>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d130      	bne.n	8004742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	2203      	movs	r2, #3
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	43db      	mvns	r3, r3
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4013      	ands	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	005b      	lsls	r3, r3, #1
 8004700:	fa02 f303 	lsl.w	r3, r2, r3
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004716:	2201      	movs	r2, #1
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	091b      	lsrs	r3, r3, #4
 800472c:	f003 0201 	and.w	r2, r3, #1
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	fa02 f303 	lsl.w	r3, r2, r3
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	693a      	ldr	r2, [r7, #16]
 8004740:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f003 0303 	and.w	r3, r3, #3
 800474a:	2b03      	cmp	r3, #3
 800474c:	d118      	bne.n	8004780 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004754:	2201      	movs	r2, #1
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	fa02 f303 	lsl.w	r3, r2, r3
 800475c:	43db      	mvns	r3, r3
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4013      	ands	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	08db      	lsrs	r3, r3, #3
 800476a:	f003 0201 	and.w	r2, r3, #1
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	fa02 f303 	lsl.w	r3, r2, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f003 0303 	and.w	r3, r3, #3
 8004788:	2b03      	cmp	r3, #3
 800478a:	d017      	beq.n	80047bc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	68db      	ldr	r3, [r3, #12]
 8004790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	005b      	lsls	r3, r3, #1
 8004796:	2203      	movs	r2, #3
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	43db      	mvns	r3, r3
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	4013      	ands	r3, r2
 80047a2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	689a      	ldr	r2, [r3, #8]
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	005b      	lsls	r3, r3, #1
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	f003 0303 	and.w	r3, r3, #3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d123      	bne.n	8004810 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	08da      	lsrs	r2, r3, #3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3208      	adds	r2, #8
 80047d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	220f      	movs	r2, #15
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	693a      	ldr	r2, [r7, #16]
 80047e8:	4013      	ands	r3, r2
 80047ea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	4313      	orrs	r3, r2
 8004800:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	08da      	lsrs	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3208      	adds	r2, #8
 800480a:	6939      	ldr	r1, [r7, #16]
 800480c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	2203      	movs	r2, #3
 800481c:	fa02 f303 	lsl.w	r3, r2, r3
 8004820:	43db      	mvns	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 0203 	and.w	r2, r3, #3
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	4313      	orrs	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80ac 	beq.w	80049aa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004852:	4b5f      	ldr	r3, [pc, #380]	; (80049d0 <HAL_GPIO_Init+0x330>)
 8004854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004856:	4a5e      	ldr	r2, [pc, #376]	; (80049d0 <HAL_GPIO_Init+0x330>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6613      	str	r3, [r2, #96]	; 0x60
 800485e:	4b5c      	ldr	r3, [pc, #368]	; (80049d0 <HAL_GPIO_Init+0x330>)
 8004860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800486a:	4a5a      	ldr	r2, [pc, #360]	; (80049d4 <HAL_GPIO_Init+0x334>)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	3302      	adds	r3, #2
 8004872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004876:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	220f      	movs	r2, #15
 8004882:	fa02 f303 	lsl.w	r3, r2, r3
 8004886:	43db      	mvns	r3, r3
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4013      	ands	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004894:	d025      	beq.n	80048e2 <HAL_GPIO_Init+0x242>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a4f      	ldr	r2, [pc, #316]	; (80049d8 <HAL_GPIO_Init+0x338>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d01f      	beq.n	80048de <HAL_GPIO_Init+0x23e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a4e      	ldr	r2, [pc, #312]	; (80049dc <HAL_GPIO_Init+0x33c>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d019      	beq.n	80048da <HAL_GPIO_Init+0x23a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a4d      	ldr	r2, [pc, #308]	; (80049e0 <HAL_GPIO_Init+0x340>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d013      	beq.n	80048d6 <HAL_GPIO_Init+0x236>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a4c      	ldr	r2, [pc, #304]	; (80049e4 <HAL_GPIO_Init+0x344>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00d      	beq.n	80048d2 <HAL_GPIO_Init+0x232>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a4b      	ldr	r2, [pc, #300]	; (80049e8 <HAL_GPIO_Init+0x348>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d007      	beq.n	80048ce <HAL_GPIO_Init+0x22e>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <HAL_GPIO_Init+0x34c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d101      	bne.n	80048ca <HAL_GPIO_Init+0x22a>
 80048c6:	2306      	movs	r3, #6
 80048c8:	e00c      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048ca:	2307      	movs	r3, #7
 80048cc:	e00a      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048ce:	2305      	movs	r3, #5
 80048d0:	e008      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048d2:	2304      	movs	r3, #4
 80048d4:	e006      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048d6:	2303      	movs	r3, #3
 80048d8:	e004      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048da:	2302      	movs	r3, #2
 80048dc:	e002      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <HAL_GPIO_Init+0x244>
 80048e2:	2300      	movs	r3, #0
 80048e4:	697a      	ldr	r2, [r7, #20]
 80048e6:	f002 0203 	and.w	r2, r2, #3
 80048ea:	0092      	lsls	r2, r2, #2
 80048ec:	4093      	lsls	r3, r2
 80048ee:	693a      	ldr	r2, [r7, #16]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048f4:	4937      	ldr	r1, [pc, #220]	; (80049d4 <HAL_GPIO_Init+0x334>)
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	089b      	lsrs	r3, r3, #2
 80048fa:	3302      	adds	r3, #2
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004902:	4b3b      	ldr	r3, [pc, #236]	; (80049f0 <HAL_GPIO_Init+0x350>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	43db      	mvns	r3, r3
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4013      	ands	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d003      	beq.n	8004926 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004926:	4a32      	ldr	r2, [pc, #200]	; (80049f0 <HAL_GPIO_Init+0x350>)
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800492c:	4b30      	ldr	r3, [pc, #192]	; (80049f0 <HAL_GPIO_Init+0x350>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	43db      	mvns	r3, r3
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	4013      	ands	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d003      	beq.n	8004950 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4313      	orrs	r3, r2
 800494e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004950:	4a27      	ldr	r2, [pc, #156]	; (80049f0 <HAL_GPIO_Init+0x350>)
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004956:	4b26      	ldr	r3, [pc, #152]	; (80049f0 <HAL_GPIO_Init+0x350>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	43db      	mvns	r3, r3
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	4013      	ands	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800497a:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <HAL_GPIO_Init+0x350>)
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004980:	4b1b      	ldr	r3, [pc, #108]	; (80049f0 <HAL_GPIO_Init+0x350>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	43db      	mvns	r3, r3
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	4013      	ands	r3, r2
 800498e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80049a4:	4a12      	ldr	r2, [pc, #72]	; (80049f0 <HAL_GPIO_Init+0x350>)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	3301      	adds	r3, #1
 80049ae:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	fa22 f303 	lsr.w	r3, r2, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	f47f ae78 	bne.w	80046b0 <HAL_GPIO_Init+0x10>
  }
}
 80049c0:	bf00      	nop
 80049c2:	bf00      	nop
 80049c4:	371c      	adds	r7, #28
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40010000 	.word	0x40010000
 80049d8:	48000400 	.word	0x48000400
 80049dc:	48000800 	.word	0x48000800
 80049e0:	48000c00 	.word	0x48000c00
 80049e4:	48001000 	.word	0x48001000
 80049e8:	48001400 	.word	0x48001400
 80049ec:	48001800 	.word	0x48001800
 80049f0:	40010400 	.word	0x40010400

080049f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	460b      	mov	r3, r1
 80049fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691a      	ldr	r2, [r3, #16]
 8004a04:	887b      	ldrh	r3, [r7, #2]
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	e001      	b.n	8004a16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a12:	2300      	movs	r3, #0
 8004a14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	807b      	strh	r3, [r7, #2]
 8004a30:	4613      	mov	r3, r2
 8004a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a34:	787b      	ldrb	r3, [r7, #1]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004a3a:	887a      	ldrh	r2, [r7, #2]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004a40:	e002      	b.n	8004a48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004a42:	887a      	ldrh	r2, [r7, #2]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a66:	887a      	ldrh	r2, [r7, #2]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	041a      	lsls	r2, r3, #16
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	43d9      	mvns	r1, r3
 8004a72:	887b      	ldrh	r3, [r7, #2]
 8004a74:	400b      	ands	r3, r1
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	619a      	str	r2, [r3, #24]
}
 8004a7c:	bf00      	nop
 8004a7e:	3714      	adds	r7, #20
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e081      	b.n	8004b9e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fe fd4a 	bl	8003548 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2224      	movs	r2, #36	; 0x24
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f022 0201 	bic.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ad8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ae8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d107      	bne.n	8004b02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689a      	ldr	r2, [r3, #8]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	e006      	b.n	8004b10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d104      	bne.n	8004b22 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	6812      	ldr	r2, [r2, #0]
 8004b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b34:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68da      	ldr	r2, [r3, #12]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b44:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f042 0201 	orr.w	r2, r2, #1
 8004b7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af02      	add	r7, sp, #8
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	607a      	str	r2, [r7, #4]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	817b      	strh	r3, [r7, #10]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	f040 80da 	bne.w	8004d7e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_I2C_Master_Transmit+0x30>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e0d3      	b.n	8004d80 <HAL_I2C_Master_Transmit+0x1d8>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004be0:	f7ff fc1c 	bl	800441c <HAL_GetTick>
 8004be4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	2319      	movs	r3, #25
 8004bec:	2201      	movs	r2, #1
 8004bee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fcbc 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e0be      	b.n	8004d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2221      	movs	r2, #33	; 0x21
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	893a      	ldrh	r2, [r7, #8]
 8004c22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	2bff      	cmp	r3, #255	; 0xff
 8004c32:	d90e      	bls.n	8004c52 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	22ff      	movs	r2, #255	; 0xff
 8004c38:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	8979      	ldrh	r1, [r7, #10]
 8004c42:	4b51      	ldr	r3, [pc, #324]	; (8004d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004c4a:	68f8      	ldr	r0, [r7, #12]
 8004c4c:	f000 feb2 	bl	80059b4 <I2C_TransferConfig>
 8004c50:	e06c      	b.n	8004d2c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	8979      	ldrh	r1, [r7, #10]
 8004c64:	4b48      	ldr	r3, [pc, #288]	; (8004d88 <HAL_I2C_Master_Transmit+0x1e0>)
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004c6c:	68f8      	ldr	r0, [r7, #12]
 8004c6e:	f000 fea1 	bl	80059b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004c72:	e05b      	b.n	8004d2c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	6a39      	ldr	r1, [r7, #32]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fcb9 	bl	80055f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e07b      	b.n	8004d80 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8c:	781a      	ldrb	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	b29a      	uxth	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d034      	beq.n	8004d2c <HAL_I2C_Master_Transmit+0x184>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d130      	bne.n	8004d2c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	9300      	str	r3, [sp, #0]
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fc4b 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e04d      	b.n	8004d80 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2bff      	cmp	r3, #255	; 0xff
 8004cec:	d90e      	bls.n	8004d0c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	22ff      	movs	r2, #255	; 0xff
 8004cf2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	8979      	ldrh	r1, [r7, #10]
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 fe55 	bl	80059b4 <I2C_TransferConfig>
 8004d0a:	e00f      	b.n	8004d2c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	8979      	ldrh	r1, [r7, #10]
 8004d1e:	2300      	movs	r3, #0
 8004d20:	9300      	str	r3, [sp, #0]
 8004d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 fe44 	bl	80059b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d19e      	bne.n	8004c74 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 fc98 	bl	8005670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e01a      	b.n	8004d80 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6859      	ldr	r1, [r3, #4]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <HAL_I2C_Master_Transmit+0x1e4>)
 8004d5e:	400b      	ands	r3, r1
 8004d60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	e000      	b.n	8004d80 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004d7e:	2302      	movs	r3, #2
  }
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	80002000 	.word	0x80002000
 8004d8c:	fe00e800 	.word	0xfe00e800

08004d90 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b088      	sub	sp, #32
 8004d94:	af02      	add	r7, sp, #8
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	607a      	str	r2, [r7, #4]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	817b      	strh	r3, [r7, #10]
 8004da0:	4613      	mov	r3, r2
 8004da2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	f040 80db 	bne.w	8004f68 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d101      	bne.n	8004dc0 <HAL_I2C_Master_Receive+0x30>
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	e0d4      	b.n	8004f6a <HAL_I2C_Master_Receive+0x1da>
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004dc8:	f7ff fb28 	bl	800441c <HAL_GetTick>
 8004dcc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	2319      	movs	r3, #25
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 fbc8 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e0bf      	b.n	8004f6a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2222      	movs	r2, #34	; 0x22
 8004dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2210      	movs	r2, #16
 8004df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	893a      	ldrh	r2, [r7, #8]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2bff      	cmp	r3, #255	; 0xff
 8004e1a:	d90e      	bls.n	8004e3a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	22ff      	movs	r2, #255	; 0xff
 8004e20:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e26:	b2da      	uxtb	r2, r3
 8004e28:	8979      	ldrh	r1, [r7, #10]
 8004e2a:	4b52      	ldr	r3, [pc, #328]	; (8004f74 <HAL_I2C_Master_Receive+0x1e4>)
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 fdbe 	bl	80059b4 <I2C_TransferConfig>
 8004e38:	e06d      	b.n	8004f16 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	8979      	ldrh	r1, [r7, #10]
 8004e4c:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_I2C_Master_Receive+0x1e4>)
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f000 fdad 	bl	80059b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004e5a:	e05c      	b.n	8004f16 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	6a39      	ldr	r1, [r7, #32]
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 fc41 	bl	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e07c      	b.n	8004f6a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d034      	beq.n	8004f16 <HAL_I2C_Master_Receive+0x186>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d130      	bne.n	8004f16 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2180      	movs	r1, #128	; 0x80
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fb56 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e04d      	b.n	8004f6a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	2bff      	cmp	r3, #255	; 0xff
 8004ed6:	d90e      	bls.n	8004ef6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	22ff      	movs	r2, #255	; 0xff
 8004edc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	8979      	ldrh	r1, [r7, #10]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f000 fd60 	bl	80059b4 <I2C_TransferConfig>
 8004ef4:	e00f      	b.n	8004f16 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	8979      	ldrh	r1, [r7, #10]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	9300      	str	r3, [sp, #0]
 8004f0c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 fd4f 	bl	80059b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d19d      	bne.n	8004e5c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	6a39      	ldr	r1, [r7, #32]
 8004f24:	68f8      	ldr	r0, [r7, #12]
 8004f26:	f000 fba3 	bl	8005670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e01a      	b.n	8004f6a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6859      	ldr	r1, [r3, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	4b0c      	ldr	r3, [pc, #48]	; (8004f78 <HAL_I2C_Master_Receive+0x1e8>)
 8004f48:	400b      	ands	r3, r1
 8004f4a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004f64:	2300      	movs	r3, #0
 8004f66:	e000      	b.n	8004f6a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004f68:	2302      	movs	r3, #2
  }
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3718      	adds	r7, #24
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	80002400 	.word	0x80002400
 8004f78:	fe00e800 	.word	0xfe00e800

08004f7c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af02      	add	r7, sp, #8
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	4608      	mov	r0, r1
 8004f86:	4611      	mov	r1, r2
 8004f88:	461a      	mov	r2, r3
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	817b      	strh	r3, [r7, #10]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	813b      	strh	r3, [r7, #8]
 8004f92:	4613      	mov	r3, r2
 8004f94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b20      	cmp	r3, #32
 8004fa0:	f040 80f9 	bne.w	8005196 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_I2C_Mem_Write+0x34>
 8004faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e0ed      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d101      	bne.n	8004fca <HAL_I2C_Mem_Write+0x4e>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	e0e6      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004fd2:	f7ff fa23 	bl	800441c <HAL_GetTick>
 8004fd6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004fd8:	697b      	ldr	r3, [r7, #20]
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2319      	movs	r3, #25
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f000 fac3 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e0d1      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2221      	movs	r2, #33	; 0x21
 8004ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2240      	movs	r2, #64	; 0x40
 8005000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005014:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800501c:	88f8      	ldrh	r0, [r7, #6]
 800501e:	893a      	ldrh	r2, [r7, #8]
 8005020:	8979      	ldrh	r1, [r7, #10]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	9301      	str	r3, [sp, #4]
 8005026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	4603      	mov	r3, r0
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f9d3 	bl	80053d8 <I2C_RequestMemoryWrite>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e0a9      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005048:	b29b      	uxth	r3, r3
 800504a:	2bff      	cmp	r3, #255	; 0xff
 800504c:	d90e      	bls.n	800506c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	22ff      	movs	r2, #255	; 0xff
 8005052:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005058:	b2da      	uxtb	r2, r3
 800505a:	8979      	ldrh	r1, [r7, #10]
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fca5 	bl	80059b4 <I2C_TransferConfig>
 800506a:	e00f      	b.n	800508c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005070:	b29a      	uxth	r2, r3
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800507a:	b2da      	uxtb	r2, r3
 800507c:	8979      	ldrh	r1, [r7, #10]
 800507e:	2300      	movs	r3, #0
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 fc94 	bl	80059b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 faad 	bl	80055f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005096:	4603      	mov	r3, r0
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e07b      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	781a      	ldrb	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	1c5a      	adds	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c8:	3b01      	subs	r3, #1
 80050ca:	b29a      	uxth	r2, r3
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d034      	beq.n	8005144 <HAL_I2C_Mem_Write+0x1c8>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d130      	bne.n	8005144 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	; 0x80
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f000 fa3f 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d001      	beq.n	80050fc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04d      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005100:	b29b      	uxth	r3, r3
 8005102:	2bff      	cmp	r3, #255	; 0xff
 8005104:	d90e      	bls.n	8005124 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	22ff      	movs	r2, #255	; 0xff
 800510a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005110:	b2da      	uxtb	r2, r3
 8005112:	8979      	ldrh	r1, [r7, #10]
 8005114:	2300      	movs	r3, #0
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f000 fc49 	bl	80059b4 <I2C_TransferConfig>
 8005122:	e00f      	b.n	8005144 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005132:	b2da      	uxtb	r2, r3
 8005134:	8979      	ldrh	r1, [r7, #10]
 8005136:	2300      	movs	r3, #0
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f000 fc38 	bl	80059b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d19e      	bne.n	800508c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f000 fa8c 	bl	8005670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e01a      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	2220      	movs	r2, #32
 8005168:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	6859      	ldr	r1, [r3, #4]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_I2C_Mem_Write+0x224>)
 8005176:	400b      	ands	r3, r1
 8005178:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	e000      	b.n	8005198 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005196:	2302      	movs	r3, #2
  }
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	fe00e800 	.word	0xfe00e800

080051a4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b20      	cmp	r3, #32
 80051c8:	f040 80fd 	bne.w	80053c6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80051cc:	6a3b      	ldr	r3, [r7, #32]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_I2C_Mem_Read+0x34>
 80051d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e0f1      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d101      	bne.n	80051f2 <HAL_I2C_Mem_Read+0x4e>
 80051ee:	2302      	movs	r3, #2
 80051f0:	e0ea      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80051fa:	f7ff f90f 	bl	800441c <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	2319      	movs	r3, #25
 8005206:	2201      	movs	r2, #1
 8005208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 f9af 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0d5      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2222      	movs	r2, #34	; 0x22
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2240      	movs	r2, #64	; 0x40
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a3a      	ldr	r2, [r7, #32]
 8005236:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800523c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005244:	88f8      	ldrh	r0, [r7, #6]
 8005246:	893a      	ldrh	r2, [r7, #8]
 8005248:	8979      	ldrh	r1, [r7, #10]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	9301      	str	r3, [sp, #4]
 800524e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	4603      	mov	r3, r0
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f913 	bl	8005480 <I2C_RequestMemoryRead>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	e0ad      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	2bff      	cmp	r3, #255	; 0xff
 8005274:	d90e      	bls.n	8005294 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	22ff      	movs	r2, #255	; 0xff
 800527a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005280:	b2da      	uxtb	r2, r3
 8005282:	8979      	ldrh	r1, [r7, #10]
 8005284:	4b52      	ldr	r3, [pc, #328]	; (80053d0 <HAL_I2C_Mem_Read+0x22c>)
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 fb91 	bl	80059b4 <I2C_TransferConfig>
 8005292:	e00f      	b.n	80052b4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	8979      	ldrh	r1, [r7, #10]
 80052a6:	4b4a      	ldr	r3, [pc, #296]	; (80053d0 <HAL_I2C_Mem_Read+0x22c>)
 80052a8:	9300      	str	r3, [sp, #0]
 80052aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f000 fb80 	bl	80059b4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ba:	2200      	movs	r2, #0
 80052bc:	2104      	movs	r1, #4
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 f956 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e07c      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d034      	beq.n	8005374 <HAL_I2C_Mem_Read+0x1d0>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	2b00      	cmp	r3, #0
 8005310:	d130      	bne.n	8005374 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	9300      	str	r3, [sp, #0]
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	2200      	movs	r2, #0
 800531a:	2180      	movs	r1, #128	; 0x80
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f000 f927 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e04d      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005330:	b29b      	uxth	r3, r3
 8005332:	2bff      	cmp	r3, #255	; 0xff
 8005334:	d90e      	bls.n	8005354 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	22ff      	movs	r2, #255	; 0xff
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005340:	b2da      	uxtb	r2, r3
 8005342:	8979      	ldrh	r1, [r7, #10]
 8005344:	2300      	movs	r3, #0
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f000 fb31 	bl	80059b4 <I2C_TransferConfig>
 8005352:	e00f      	b.n	8005374 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005362:	b2da      	uxtb	r2, r3
 8005364:	8979      	ldrh	r1, [r7, #10]
 8005366:	2300      	movs	r3, #0
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f000 fb20 	bl	80059b4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d19a      	bne.n	80052b4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005382:	68f8      	ldr	r0, [r7, #12]
 8005384:	f000 f974 	bl	8005670 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e01a      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2220      	movs	r2, #32
 8005398:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	6859      	ldr	r1, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <HAL_I2C_Mem_Read+0x230>)
 80053a6:	400b      	ands	r3, r1
 80053a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e000      	b.n	80053c8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	80002400 	.word	0x80002400
 80053d4:	fe00e800 	.word	0xfe00e800

080053d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	461a      	mov	r2, r3
 80053e6:	4603      	mov	r3, r0
 80053e8:	817b      	strh	r3, [r7, #10]
 80053ea:	460b      	mov	r3, r1
 80053ec:	813b      	strh	r3, [r7, #8]
 80053ee:	4613      	mov	r3, r2
 80053f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80053f2:	88fb      	ldrh	r3, [r7, #6]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	8979      	ldrh	r1, [r7, #10]
 80053f8:	4b20      	ldr	r3, [pc, #128]	; (800547c <I2C_RequestMemoryWrite+0xa4>)
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fad7 	bl	80059b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	69b9      	ldr	r1, [r7, #24]
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 f8f0 	bl	80055f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e02c      	b.n	8005474 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d105      	bne.n	800542c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005420:	893b      	ldrh	r3, [r7, #8]
 8005422:	b2da      	uxtb	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	629a      	str	r2, [r3, #40]	; 0x28
 800542a:	e015      	b.n	8005458 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800542c:	893b      	ldrh	r3, [r7, #8]
 800542e:	0a1b      	lsrs	r3, r3, #8
 8005430:	b29b      	uxth	r3, r3
 8005432:	b2da      	uxtb	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800543a:	69fa      	ldr	r2, [r7, #28]
 800543c:	69b9      	ldr	r1, [r7, #24]
 800543e:	68f8      	ldr	r0, [r7, #12]
 8005440:	f000 f8d6 	bl	80055f0 <I2C_WaitOnTXISFlagUntilTimeout>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e012      	b.n	8005474 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800544e:	893b      	ldrh	r3, [r7, #8]
 8005450:	b2da      	uxtb	r2, r3
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2200      	movs	r2, #0
 8005460:	2180      	movs	r1, #128	; 0x80
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f884 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	80002000 	.word	0x80002000

08005480 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af02      	add	r7, sp, #8
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	4608      	mov	r0, r1
 800548a:	4611      	mov	r1, r2
 800548c:	461a      	mov	r2, r3
 800548e:	4603      	mov	r3, r0
 8005490:	817b      	strh	r3, [r7, #10]
 8005492:	460b      	mov	r3, r1
 8005494:	813b      	strh	r3, [r7, #8]
 8005496:	4613      	mov	r3, r2
 8005498:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800549a:	88fb      	ldrh	r3, [r7, #6]
 800549c:	b2da      	uxtb	r2, r3
 800549e:	8979      	ldrh	r1, [r7, #10]
 80054a0:	4b20      	ldr	r3, [pc, #128]	; (8005524 <I2C_RequestMemoryRead+0xa4>)
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2300      	movs	r3, #0
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f000 fa84 	bl	80059b4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	69b9      	ldr	r1, [r7, #24]
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f89d 	bl	80055f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d001      	beq.n	80054c0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e02c      	b.n	800551a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d105      	bne.n	80054d2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054c6:	893b      	ldrh	r3, [r7, #8]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
 80054d0:	e015      	b.n	80054fe <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80054d2:	893b      	ldrh	r3, [r7, #8]
 80054d4:	0a1b      	lsrs	r3, r3, #8
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	b2da      	uxtb	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e0:	69fa      	ldr	r2, [r7, #28]
 80054e2:	69b9      	ldr	r1, [r7, #24]
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f883 	bl	80055f0 <I2C_WaitOnTXISFlagUntilTimeout>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e012      	b.n	800551a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80054f4:	893b      	ldrh	r3, [r7, #8]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2200      	movs	r2, #0
 8005506:	2140      	movs	r1, #64	; 0x40
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f831 	bl	8005570 <I2C_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	80002000 	.word	0x80002000

08005528 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d103      	bne.n	8005546 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2200      	movs	r2, #0
 8005544:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b01      	cmp	r3, #1
 8005552:	d007      	beq.n	8005564 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	619a      	str	r2, [r3, #24]
  }
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005580:	e022      	b.n	80055c8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005588:	d01e      	beq.n	80055c8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fe ff47 	bl	800441c <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	683a      	ldr	r2, [r7, #0]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d113      	bne.n	80055c8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a4:	f043 0220 	orr.w	r2, r3, #32
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2220      	movs	r2, #32
 80055b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2200      	movs	r2, #0
 80055c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e00f      	b.n	80055e8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699a      	ldr	r2, [r3, #24]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	4013      	ands	r3, r2
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	bf0c      	ite	eq
 80055d8:	2301      	moveq	r3, #1
 80055da:	2300      	movne	r3, #0
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	461a      	mov	r2, r3
 80055e0:	79fb      	ldrb	r3, [r7, #7]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d0cd      	beq.n	8005582 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3710      	adds	r7, #16
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055fc:	e02c      	b.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68b9      	ldr	r1, [r7, #8]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 f8ea 	bl	80057dc <I2C_IsErrorOccurred>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e02a      	b.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005618:	d01e      	beq.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7fe feff 	bl	800441c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d113      	bne.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	f043 0220 	orr.w	r2, r3, #32
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e007      	b.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d1cb      	bne.n	80055fe <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567c:	e028      	b.n	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f000 f8aa 	bl	80057dc <I2C_IsErrorOccurred>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e026      	b.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7fe fec3 	bl	800441c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d113      	bne.n	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	f043 0220 	orr.w	r2, r3, #32
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e007      	b.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	f003 0320 	and.w	r3, r3, #32
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d1cf      	bne.n	800567e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056f4:	e064      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68f8      	ldr	r0, [r7, #12]
 80056fc:	f000 f86e 	bl	80057dc <I2C_IsErrorOccurred>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e062      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	f003 0320 	and.w	r3, r3, #32
 8005714:	2b20      	cmp	r3, #32
 8005716:	d138      	bne.n	800578a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b04      	cmp	r3, #4
 8005724:	d105      	bne.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e04e      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	699b      	ldr	r3, [r3, #24]
 8005738:	f003 0310 	and.w	r3, r3, #16
 800573c:	2b10      	cmp	r3, #16
 800573e:	d107      	bne.n	8005750 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2210      	movs	r2, #16
 8005746:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2204      	movs	r2, #4
 800574c:	645a      	str	r2, [r3, #68]	; 0x44
 800574e:	e002      	b.n	8005756 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2220      	movs	r2, #32
 800575c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	6859      	ldr	r1, [r3, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681a      	ldr	r2, [r3, #0]
 8005768:	4b1b      	ldr	r3, [pc, #108]	; (80057d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800576a:	400b      	ands	r3, r1
 800576c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e022      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800578a:	f7fe fe47 	bl	800441c <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	68ba      	ldr	r2, [r7, #8]
 8005796:	429a      	cmp	r2, r3
 8005798:	d302      	bcc.n	80057a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d10f      	bne.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e007      	b.n	80057d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d193      	bne.n	80056f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	fe00e800 	.word	0xfe00e800

080057dc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08a      	sub	sp, #40	; 0x28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057e8:	2300      	movs	r3, #0
 80057ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	f003 0310 	and.w	r3, r3, #16
 8005804:	2b00      	cmp	r3, #0
 8005806:	d075      	beq.n	80058f4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2210      	movs	r2, #16
 800580e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005810:	e056      	b.n	80058c0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005818:	d052      	beq.n	80058c0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800581a:	f7fe fdff 	bl	800441c <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	429a      	cmp	r2, r3
 8005828:	d302      	bcc.n	8005830 <I2C_IsErrorOccurred+0x54>
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d147      	bne.n	80058c0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800583a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005842:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800584e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005852:	d12e      	bne.n	80058b2 <I2C_IsErrorOccurred+0xd6>
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800585a:	d02a      	beq.n	80058b2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800585c:	7cfb      	ldrb	r3, [r7, #19]
 800585e:	2b20      	cmp	r3, #32
 8005860:	d027      	beq.n	80058b2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005870:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005872:	f7fe fdd3 	bl	800441c <HAL_GetTick>
 8005876:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005878:	e01b      	b.n	80058b2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800587a:	f7fe fdcf 	bl	800441c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b19      	cmp	r3, #25
 8005886:	d914      	bls.n	80058b2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800588c:	f043 0220 	orr.w	r2, r3, #32
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2220      	movs	r2, #32
 8005898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b20      	cmp	r3, #32
 80058be:	d1dc      	bne.n	800587a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f003 0320 	and.w	r3, r3, #32
 80058ca:	2b20      	cmp	r3, #32
 80058cc:	d003      	beq.n	80058d6 <I2C_IsErrorOccurred+0xfa>
 80058ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d09d      	beq.n	8005812 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80058d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d103      	bne.n	80058e6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	2220      	movs	r2, #32
 80058e4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	f043 0304 	orr.w	r3, r3, #4
 80058ec:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005902:	2b00      	cmp	r3, #0
 8005904:	d00b      	beq.n	800591e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	f043 0301 	orr.w	r3, r3, #1
 800590c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005916:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00b      	beq.n	8005940 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	f043 0308 	orr.w	r3, r3, #8
 800592e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d00b      	beq.n	8005962 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	f043 0302 	orr.w	r3, r3, #2
 8005950:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800595a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8005962:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005966:	2b00      	cmp	r3, #0
 8005968:	d01c      	beq.n	80059a4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f7ff fddc 	bl	8005528 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6859      	ldr	r1, [r3, #4]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <I2C_IsErrorOccurred+0x1d4>)
 800597c:	400b      	ands	r3, r1
 800597e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005984:	6a3b      	ldr	r3, [r7, #32]
 8005986:	431a      	orrs	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2220      	movs	r2, #32
 8005990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2200      	movs	r2, #0
 80059a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80059a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3728      	adds	r7, #40	; 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	fe00e800 	.word	0xfe00e800

080059b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b087      	sub	sp, #28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	817b      	strh	r3, [r7, #10]
 80059c2:	4613      	mov	r3, r2
 80059c4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059c6:	897b      	ldrh	r3, [r7, #10]
 80059c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059cc:	7a7b      	ldrb	r3, [r7, #9]
 80059ce:	041b      	lsls	r3, r3, #16
 80059d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059d4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80059da:	6a3b      	ldr	r3, [r7, #32]
 80059dc:	4313      	orrs	r3, r2
 80059de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059e2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	6a3b      	ldr	r3, [r7, #32]
 80059ec:	0d5b      	lsrs	r3, r3, #21
 80059ee:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80059f2:	4b08      	ldr	r3, [pc, #32]	; (8005a14 <I2C_TransferConfig+0x60>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	43db      	mvns	r3, r3
 80059f8:	ea02 0103 	and.w	r1, r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	697a      	ldr	r2, [r7, #20]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	03ff63ff 	.word	0x03ff63ff

08005a18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d138      	bne.n	8005aa0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e032      	b.n	8005aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2224      	movs	r2, #36	; 0x24
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f022 0201 	bic.w	r2, r2, #1
 8005a5a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a6a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6819      	ldr	r1, [r3, #0]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f042 0201 	orr.w	r2, r2, #1
 8005a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2220      	movs	r2, #32
 8005a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	e000      	b.n	8005aa2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005aa0:	2302      	movs	r3, #2
  }
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b085      	sub	sp, #20
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b20      	cmp	r3, #32
 8005ac2:	d139      	bne.n	8005b38 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e033      	b.n	8005b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2224      	movs	r2, #36	; 0x24
 8005ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f022 0201 	bic.w	r2, r2, #1
 8005af0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005b00:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
	...

08005b48 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005b4c:	4b04      	ldr	r3, [pc, #16]	; (8005b60 <HAL_PWREx_GetVoltageRange+0x18>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40007000 	.word	0x40007000

08005b64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b72:	d130      	bne.n	8005bd6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005b74:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005b7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b80:	d038      	beq.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b82:	4b20      	ldr	r3, [pc, #128]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b90:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b92:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2232      	movs	r2, #50	; 0x32
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba2:	0c9b      	lsrs	r3, r3, #18
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ba8:	e002      	b.n	8005bb0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bb0:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bbc:	d102      	bne.n	8005bc4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f2      	bne.n	8005baa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	d110      	bne.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e00f      	b.n	8005bf6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005be2:	d007      	beq.n	8005bf4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005be4:	4b07      	ldr	r3, [pc, #28]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005bec:	4a05      	ldr	r2, [pc, #20]	; (8005c04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005bee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bf2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005bf4:	2300      	movs	r3, #0
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	40007000 	.word	0x40007000
 8005c08:	20000204 	.word	0x20000204
 8005c0c:	431bde83 	.word	0x431bde83

08005c10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b088      	sub	sp, #32
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e3ca      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c22:	4b97      	ldr	r3, [pc, #604]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f003 030c 	and.w	r3, r3, #12
 8005c2a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c2c:	4b94      	ldr	r3, [pc, #592]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f003 0303 	and.w	r3, r3, #3
 8005c34:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0310 	and.w	r3, r3, #16
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 80e4 	beq.w	8005e0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d007      	beq.n	8005c5a <HAL_RCC_OscConfig+0x4a>
 8005c4a:	69bb      	ldr	r3, [r7, #24]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	f040 808b 	bne.w	8005d68 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	f040 8087 	bne.w	8005d68 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005c5a:	4b89      	ldr	r3, [pc, #548]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d005      	beq.n	8005c72 <HAL_RCC_OscConfig+0x62>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d101      	bne.n	8005c72 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	e3a2      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1a      	ldr	r2, [r3, #32]
 8005c76:	4b82      	ldr	r3, [pc, #520]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0308 	and.w	r3, r3, #8
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d004      	beq.n	8005c8c <HAL_RCC_OscConfig+0x7c>
 8005c82:	4b7f      	ldr	r3, [pc, #508]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c8a:	e005      	b.n	8005c98 <HAL_RCC_OscConfig+0x88>
 8005c8c:	4b7c      	ldr	r3, [pc, #496]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d223      	bcs.n	8005ce4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 fd55 	bl	8006750 <RCC_SetFlashLatencyFromMSIRange>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e383      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cb0:	4b73      	ldr	r3, [pc, #460]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a72      	ldr	r2, [pc, #456]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cb6:	f043 0308 	orr.w	r3, r3, #8
 8005cba:	6013      	str	r3, [r2, #0]
 8005cbc:	4b70      	ldr	r3, [pc, #448]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	496d      	ldr	r1, [pc, #436]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cce:	4b6c      	ldr	r3, [pc, #432]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	69db      	ldr	r3, [r3, #28]
 8005cda:	021b      	lsls	r3, r3, #8
 8005cdc:	4968      	ldr	r1, [pc, #416]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	604b      	str	r3, [r1, #4]
 8005ce2:	e025      	b.n	8005d30 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005ce4:	4b66      	ldr	r3, [pc, #408]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a65      	ldr	r2, [pc, #404]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cea:	f043 0308 	orr.w	r3, r3, #8
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	4b63      	ldr	r3, [pc, #396]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a1b      	ldr	r3, [r3, #32]
 8005cfc:	4960      	ldr	r1, [pc, #384]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d02:	4b5f      	ldr	r3, [pc, #380]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	021b      	lsls	r3, r3, #8
 8005d10:	495b      	ldr	r1, [pc, #364]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d109      	bne.n	8005d30 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f000 fd15 	bl	8006750 <RCC_SetFlashLatencyFromMSIRange>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e343      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d30:	f000 fc4a 	bl	80065c8 <HAL_RCC_GetSysClockFreq>
 8005d34:	4602      	mov	r2, r0
 8005d36:	4b52      	ldr	r3, [pc, #328]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 030f 	and.w	r3, r3, #15
 8005d40:	4950      	ldr	r1, [pc, #320]	; (8005e84 <HAL_RCC_OscConfig+0x274>)
 8005d42:	5ccb      	ldrb	r3, [r1, r3]
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4c:	4a4e      	ldr	r2, [pc, #312]	; (8005e88 <HAL_RCC_OscConfig+0x278>)
 8005d4e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005d50:	4b4e      	ldr	r3, [pc, #312]	; (8005e8c <HAL_RCC_OscConfig+0x27c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4618      	mov	r0, r3
 8005d56:	f7fe fb11 	bl	800437c <HAL_InitTick>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d052      	beq.n	8005e0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
 8005d66:	e327      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	699b      	ldr	r3, [r3, #24]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d032      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d70:	4b43      	ldr	r3, [pc, #268]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a42      	ldr	r2, [pc, #264]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005d76:	f043 0301 	orr.w	r3, r3, #1
 8005d7a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005d7c:	f7fe fb4e 	bl	800441c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d84:	f7fe fb4a 	bl	800441c <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e310      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d96:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d0f0      	beq.n	8005d84 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005da2:	4b37      	ldr	r3, [pc, #220]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a36      	ldr	r2, [pc, #216]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b34      	ldr	r3, [pc, #208]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	4931      	ldr	r1, [pc, #196]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dc0:	4b2f      	ldr	r3, [pc, #188]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	021b      	lsls	r3, r3, #8
 8005dce:	492c      	ldr	r1, [pc, #176]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	604b      	str	r3, [r1, #4]
 8005dd4:	e01a      	b.n	8005e0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005dd6:	4b2a      	ldr	r3, [pc, #168]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a29      	ldr	r2, [pc, #164]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005ddc:	f023 0301 	bic.w	r3, r3, #1
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005de2:	f7fe fb1b 	bl	800441c <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005de8:	e008      	b.n	8005dfc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005dea:	f7fe fb17 	bl	800441c <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d901      	bls.n	8005dfc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e2dd      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005dfc:	4b20      	ldr	r3, [pc, #128]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0302 	and.w	r3, r3, #2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d1f0      	bne.n	8005dea <HAL_RCC_OscConfig+0x1da>
 8005e08:	e000      	b.n	8005e0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d074      	beq.n	8005f02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b08      	cmp	r3, #8
 8005e1c:	d005      	beq.n	8005e2a <HAL_RCC_OscConfig+0x21a>
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	d10e      	bne.n	8005e42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b03      	cmp	r3, #3
 8005e28:	d10b      	bne.n	8005e42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e2a:	4b15      	ldr	r3, [pc, #84]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d064      	beq.n	8005f00 <HAL_RCC_OscConfig+0x2f0>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d160      	bne.n	8005f00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e2ba      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e4a:	d106      	bne.n	8005e5a <HAL_RCC_OscConfig+0x24a>
 8005e4c:	4b0c      	ldr	r3, [pc, #48]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a0b      	ldr	r2, [pc, #44]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e026      	b.n	8005ea8 <HAL_RCC_OscConfig+0x298>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005e62:	d115      	bne.n	8005e90 <HAL_RCC_OscConfig+0x280>
 8005e64:	4b06      	ldr	r3, [pc, #24]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a05      	ldr	r2, [pc, #20]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	4b03      	ldr	r3, [pc, #12]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a02      	ldr	r2, [pc, #8]	; (8005e80 <HAL_RCC_OscConfig+0x270>)
 8005e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e7a:	6013      	str	r3, [r2, #0]
 8005e7c:	e014      	b.n	8005ea8 <HAL_RCC_OscConfig+0x298>
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	0800f2fc 	.word	0x0800f2fc
 8005e88:	20000204 	.word	0x20000204
 8005e8c:	20000208 	.word	0x20000208
 8005e90:	4ba0      	ldr	r3, [pc, #640]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a9f      	ldr	r2, [pc, #636]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	4b9d      	ldr	r3, [pc, #628]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a9c      	ldr	r2, [pc, #624]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb0:	f7fe fab4 	bl	800441c <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eb6:	e008      	b.n	8005eca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb8:	f7fe fab0 	bl	800441c <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b64      	cmp	r3, #100	; 0x64
 8005ec4:	d901      	bls.n	8005eca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005ec6:	2303      	movs	r3, #3
 8005ec8:	e276      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eca:	4b92      	ldr	r3, [pc, #584]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0f0      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x2a8>
 8005ed6:	e014      	b.n	8005f02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed8:	f7fe faa0 	bl	800441c <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ede:	e008      	b.n	8005ef2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ee0:	f7fe fa9c 	bl	800441c <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b64      	cmp	r3, #100	; 0x64
 8005eec:	d901      	bls.n	8005ef2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e262      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005ef2:	4b88      	ldr	r3, [pc, #544]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1f0      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x2d0>
 8005efe:	e000      	b.n	8005f02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d060      	beq.n	8005fd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b04      	cmp	r3, #4
 8005f12:	d005      	beq.n	8005f20 <HAL_RCC_OscConfig+0x310>
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b0c      	cmp	r3, #12
 8005f18:	d119      	bne.n	8005f4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2b02      	cmp	r3, #2
 8005f1e:	d116      	bne.n	8005f4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f20:	4b7c      	ldr	r3, [pc, #496]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_RCC_OscConfig+0x328>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d101      	bne.n	8005f38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e23f      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f38:	4b76      	ldr	r3, [pc, #472]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	061b      	lsls	r3, r3, #24
 8005f46:	4973      	ldr	r1, [pc, #460]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f4c:	e040      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d023      	beq.n	8005f9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f56:	4b6f      	ldr	r3, [pc, #444]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a6e      	ldr	r2, [pc, #440]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f62:	f7fe fa5b 	bl	800441c <HAL_GetTick>
 8005f66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f68:	e008      	b.n	8005f7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f6a:	f7fe fa57 	bl	800441c <HAL_GetTick>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	1ad3      	subs	r3, r2, r3
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e21d      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005f7c:	4b65      	ldr	r3, [pc, #404]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d0f0      	beq.n	8005f6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f88:	4b62      	ldr	r3, [pc, #392]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	061b      	lsls	r3, r3, #24
 8005f96:	495f      	ldr	r1, [pc, #380]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	604b      	str	r3, [r1, #4]
 8005f9c:	e018      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9e:	4b5d      	ldr	r3, [pc, #372]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a5c      	ldr	r2, [pc, #368]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005fa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005faa:	f7fe fa37 	bl	800441c <HAL_GetTick>
 8005fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fb0:	e008      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb2:	f7fe fa33 	bl	800441c <HAL_GetTick>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	2b02      	cmp	r3, #2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e1f9      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005fc4:	4b53      	ldr	r3, [pc, #332]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f0      	bne.n	8005fb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0308 	and.w	r3, r3, #8
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d03c      	beq.n	8006056 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d01c      	beq.n	800601e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe4:	4b4b      	ldr	r3, [pc, #300]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005fea:	4a4a      	ldr	r2, [pc, #296]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8005fec:	f043 0301 	orr.w	r3, r3, #1
 8005ff0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ff4:	f7fe fa12 	bl	800441c <HAL_GetTick>
 8005ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ffa:	e008      	b.n	800600e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ffc:	f7fe fa0e 	bl	800441c <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	2b02      	cmp	r3, #2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e1d4      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800600e:	4b41      	ldr	r3, [pc, #260]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006014:	f003 0302 	and.w	r3, r3, #2
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0ef      	beq.n	8005ffc <HAL_RCC_OscConfig+0x3ec>
 800601c:	e01b      	b.n	8006056 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800601e:	4b3d      	ldr	r3, [pc, #244]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006024:	4a3b      	ldr	r2, [pc, #236]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006026:	f023 0301 	bic.w	r3, r3, #1
 800602a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602e:	f7fe f9f5 	bl	800441c <HAL_GetTick>
 8006032:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006034:	e008      	b.n	8006048 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006036:	f7fe f9f1 	bl	800441c <HAL_GetTick>
 800603a:	4602      	mov	r2, r0
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	1ad3      	subs	r3, r2, r3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d901      	bls.n	8006048 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006044:	2303      	movs	r3, #3
 8006046:	e1b7      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006048:	4b32      	ldr	r3, [pc, #200]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 800604a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1ef      	bne.n	8006036 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80a6 	beq.w	80061b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006064:	2300      	movs	r3, #0
 8006066:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006068:	4b2a      	ldr	r3, [pc, #168]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 800606a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800606c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10d      	bne.n	8006090 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006074:	4b27      	ldr	r3, [pc, #156]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	4a26      	ldr	r2, [pc, #152]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 800607a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800607e:	6593      	str	r3, [r2, #88]	; 0x58
 8006080:	4b24      	ldr	r3, [pc, #144]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800608c:	2301      	movs	r3, #1
 800608e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006090:	4b21      	ldr	r3, [pc, #132]	; (8006118 <HAL_RCC_OscConfig+0x508>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d118      	bne.n	80060ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800609c:	4b1e      	ldr	r3, [pc, #120]	; (8006118 <HAL_RCC_OscConfig+0x508>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1d      	ldr	r2, [pc, #116]	; (8006118 <HAL_RCC_OscConfig+0x508>)
 80060a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060a8:	f7fe f9b8 	bl	800441c <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b0:	f7fe f9b4 	bl	800441c <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e17a      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80060c2:	4b15      	ldr	r3, [pc, #84]	; (8006118 <HAL_RCC_OscConfig+0x508>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d0f0      	beq.n	80060b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d108      	bne.n	80060e8 <HAL_RCC_OscConfig+0x4d8>
 80060d6:	4b0f      	ldr	r3, [pc, #60]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 80060d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060dc:	4a0d      	ldr	r2, [pc, #52]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 80060de:	f043 0301 	orr.w	r3, r3, #1
 80060e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80060e6:	e029      	b.n	800613c <HAL_RCC_OscConfig+0x52c>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	2b05      	cmp	r3, #5
 80060ee:	d115      	bne.n	800611c <HAL_RCC_OscConfig+0x50c>
 80060f0:	4b08      	ldr	r3, [pc, #32]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 80060f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060f6:	4a07      	ldr	r2, [pc, #28]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 80060f8:	f043 0304 	orr.w	r3, r3, #4
 80060fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006100:	4b04      	ldr	r3, [pc, #16]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006106:	4a03      	ldr	r2, [pc, #12]	; (8006114 <HAL_RCC_OscConfig+0x504>)
 8006108:	f043 0301 	orr.w	r3, r3, #1
 800610c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006110:	e014      	b.n	800613c <HAL_RCC_OscConfig+0x52c>
 8006112:	bf00      	nop
 8006114:	40021000 	.word	0x40021000
 8006118:	40007000 	.word	0x40007000
 800611c:	4b9c      	ldr	r3, [pc, #624]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800611e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006122:	4a9b      	ldr	r2, [pc, #620]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006124:	f023 0301 	bic.w	r3, r3, #1
 8006128:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800612c:	4b98      	ldr	r3, [pc, #608]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800612e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006132:	4a97      	ldr	r2, [pc, #604]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006134:	f023 0304 	bic.w	r3, r3, #4
 8006138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d016      	beq.n	8006172 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006144:	f7fe f96a 	bl	800441c <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800614a:	e00a      	b.n	8006162 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800614c:	f7fe f966 	bl	800441c <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	f241 3288 	movw	r2, #5000	; 0x1388
 800615a:	4293      	cmp	r3, r2
 800615c:	d901      	bls.n	8006162 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800615e:	2303      	movs	r3, #3
 8006160:	e12a      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006162:	4b8b      	ldr	r3, [pc, #556]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006168:	f003 0302 	and.w	r3, r3, #2
 800616c:	2b00      	cmp	r3, #0
 800616e:	d0ed      	beq.n	800614c <HAL_RCC_OscConfig+0x53c>
 8006170:	e015      	b.n	800619e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006172:	f7fe f953 	bl	800441c <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006178:	e00a      	b.n	8006190 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800617a:	f7fe f94f 	bl	800441c <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	f241 3288 	movw	r2, #5000	; 0x1388
 8006188:	4293      	cmp	r3, r2
 800618a:	d901      	bls.n	8006190 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e113      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006190:	4b7f      	ldr	r3, [pc, #508]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1ed      	bne.n	800617a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800619e:	7ffb      	ldrb	r3, [r7, #31]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d105      	bne.n	80061b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061a4:	4b7a      	ldr	r3, [pc, #488]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80061a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061a8:	4a79      	ldr	r2, [pc, #484]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80061aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 80fe 	beq.w	80063b6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061be:	2b02      	cmp	r3, #2
 80061c0:	f040 80d0 	bne.w	8006364 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80061c4:	4b72      	ldr	r3, [pc, #456]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f003 0203 	and.w	r2, r3, #3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d130      	bne.n	800623a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e2:	3b01      	subs	r3, #1
 80061e4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d127      	bne.n	800623a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d11f      	bne.n	800623a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006204:	2a07      	cmp	r2, #7
 8006206:	bf14      	ite	ne
 8006208:	2201      	movne	r2, #1
 800620a:	2200      	moveq	r2, #0
 800620c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800620e:	4293      	cmp	r3, r2
 8006210:	d113      	bne.n	800623a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800621c:	085b      	lsrs	r3, r3, #1
 800621e:	3b01      	subs	r3, #1
 8006220:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006222:	429a      	cmp	r2, r3
 8006224:	d109      	bne.n	800623a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	085b      	lsrs	r3, r3, #1
 8006232:	3b01      	subs	r3, #1
 8006234:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006236:	429a      	cmp	r2, r3
 8006238:	d06e      	beq.n	8006318 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b0c      	cmp	r3, #12
 800623e:	d069      	beq.n	8006314 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006240:	4b53      	ldr	r3, [pc, #332]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d105      	bne.n	8006258 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800624c:	4b50      	ldr	r3, [pc, #320]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e0ad      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800625c:	4b4c      	ldr	r3, [pc, #304]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a4b      	ldr	r2, [pc, #300]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006266:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006268:	f7fe f8d8 	bl	800441c <HAL_GetTick>
 800626c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fe f8d4 	bl	800441c <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e09a      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006282:	4b43      	ldr	r3, [pc, #268]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d1f0      	bne.n	8006270 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800628e:	4b40      	ldr	r3, [pc, #256]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	4b40      	ldr	r3, [pc, #256]	; (8006394 <HAL_RCC_OscConfig+0x784>)
 8006294:	4013      	ands	r3, r2
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800629e:	3a01      	subs	r2, #1
 80062a0:	0112      	lsls	r2, r2, #4
 80062a2:	4311      	orrs	r1, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80062a8:	0212      	lsls	r2, r2, #8
 80062aa:	4311      	orrs	r1, r2
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80062b0:	0852      	lsrs	r2, r2, #1
 80062b2:	3a01      	subs	r2, #1
 80062b4:	0552      	lsls	r2, r2, #21
 80062b6:	4311      	orrs	r1, r2
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80062bc:	0852      	lsrs	r2, r2, #1
 80062be:	3a01      	subs	r2, #1
 80062c0:	0652      	lsls	r2, r2, #25
 80062c2:	4311      	orrs	r1, r2
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062c8:	0912      	lsrs	r2, r2, #4
 80062ca:	0452      	lsls	r2, r2, #17
 80062cc:	430a      	orrs	r2, r1
 80062ce:	4930      	ldr	r1, [pc, #192]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80062d4:	4b2e      	ldr	r3, [pc, #184]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a2d      	ldr	r2, [pc, #180]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80062da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80062e0:	4b2b      	ldr	r3, [pc, #172]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	4a2a      	ldr	r2, [pc, #168]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 80062e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80062ec:	f7fe f896 	bl	800441c <HAL_GetTick>
 80062f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062f4:	f7fe f892 	bl	800441c <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e058      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006306:	4b22      	ldr	r3, [pc, #136]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006312:	e050      	b.n	80063b6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e04f      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006318:	4b1d      	ldr	r3, [pc, #116]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d148      	bne.n	80063b6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006324:	4b1a      	ldr	r3, [pc, #104]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a19      	ldr	r2, [pc, #100]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800632a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800632e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006330:	4b17      	ldr	r3, [pc, #92]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	4a16      	ldr	r2, [pc, #88]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800633a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800633c:	f7fe f86e 	bl	800441c <HAL_GetTick>
 8006340:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006342:	e008      	b.n	8006356 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006344:	f7fe f86a 	bl	800441c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e030      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006356:	4b0e      	ldr	r3, [pc, #56]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0x734>
 8006362:	e028      	b.n	80063b6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	2b0c      	cmp	r3, #12
 8006368:	d023      	beq.n	80063b2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800636a:	4b09      	ldr	r3, [pc, #36]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a08      	ldr	r2, [pc, #32]	; (8006390 <HAL_RCC_OscConfig+0x780>)
 8006370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006374:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fe f851 	bl	800441c <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800637c:	e00c      	b.n	8006398 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800637e:	f7fe f84d 	bl	800441c <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d905      	bls.n	8006398 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e013      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
 8006390:	40021000 	.word	0x40021000
 8006394:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006398:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCC_OscConfig+0x7b0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1ec      	bne.n	800637e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <HAL_RCC_OscConfig+0x7b0>)
 80063a6:	68da      	ldr	r2, [r3, #12]
 80063a8:	4905      	ldr	r1, [pc, #20]	; (80063c0 <HAL_RCC_OscConfig+0x7b0>)
 80063aa:	4b06      	ldr	r3, [pc, #24]	; (80063c4 <HAL_RCC_OscConfig+0x7b4>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	60cb      	str	r3, [r1, #12]
 80063b0:	e001      	b.n	80063b6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80063b6:	2300      	movs	r3, #0
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3720      	adds	r7, #32
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	40021000 	.word	0x40021000
 80063c4:	feeefffc 	.word	0xfeeefffc

080063c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	e0e7      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063dc:	4b75      	ldr	r3, [pc, #468]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0307 	and.w	r3, r3, #7
 80063e4:	683a      	ldr	r2, [r7, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d910      	bls.n	800640c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ea:	4b72      	ldr	r3, [pc, #456]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f023 0207 	bic.w	r2, r3, #7
 80063f2:	4970      	ldr	r1, [pc, #448]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	4313      	orrs	r3, r2
 80063f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063fa:	4b6e      	ldr	r3, [pc, #440]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d001      	beq.n	800640c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006408:	2301      	movs	r3, #1
 800640a:	e0cf      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f003 0302 	and.w	r3, r3, #2
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	689a      	ldr	r2, [r3, #8]
 800641c:	4b66      	ldr	r3, [pc, #408]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006424:	429a      	cmp	r2, r3
 8006426:	d908      	bls.n	800643a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006428:	4b63      	ldr	r3, [pc, #396]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	4960      	ldr	r1, [pc, #384]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006436:	4313      	orrs	r3, r2
 8006438:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 0301 	and.w	r3, r3, #1
 8006442:	2b00      	cmp	r3, #0
 8006444:	d04c      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b03      	cmp	r3, #3
 800644c:	d107      	bne.n	800645e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800644e:	4b5a      	ldr	r3, [pc, #360]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006456:	2b00      	cmp	r3, #0
 8006458:	d121      	bne.n	800649e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e0a6      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b02      	cmp	r3, #2
 8006464:	d107      	bne.n	8006476 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006466:	4b54      	ldr	r3, [pc, #336]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d115      	bne.n	800649e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e09a      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d107      	bne.n	800648e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800647e:	4b4e      	ldr	r3, [pc, #312]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	2b00      	cmp	r3, #0
 8006488:	d109      	bne.n	800649e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e08e      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800648e:	4b4a      	ldr	r3, [pc, #296]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e086      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800649e:	4b46      	ldr	r3, [pc, #280]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 80064a0:	689b      	ldr	r3, [r3, #8]
 80064a2:	f023 0203 	bic.w	r2, r3, #3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	4943      	ldr	r1, [pc, #268]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064b0:	f7fd ffb4 	bl	800441c <HAL_GetTick>
 80064b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b6:	e00a      	b.n	80064ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064b8:	f7fd ffb0 	bl	800441c <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d901      	bls.n	80064ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e06e      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064ce:	4b3a      	ldr	r3, [pc, #232]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	f003 020c 	and.w	r2, r3, #12
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	429a      	cmp	r2, r3
 80064de:	d1eb      	bne.n	80064b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d010      	beq.n	800650e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d208      	bcs.n	800650e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80064fc:	4b2e      	ldr	r3, [pc, #184]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	492b      	ldr	r1, [pc, #172]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 800650a:	4313      	orrs	r3, r2
 800650c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800650e:	4b29      	ldr	r3, [pc, #164]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d210      	bcs.n	800653e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651c:	4b25      	ldr	r3, [pc, #148]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 0207 	bic.w	r2, r3, #7
 8006524:	4923      	ldr	r1, [pc, #140]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	4313      	orrs	r3, r2
 800652a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800652c:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <HAL_RCC_ClockConfig+0x1ec>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	683a      	ldr	r2, [r7, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d001      	beq.n	800653e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e036      	b.n	80065ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	2b00      	cmp	r3, #0
 8006548:	d008      	beq.n	800655c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800654a:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	4918      	ldr	r1, [pc, #96]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006558:	4313      	orrs	r3, r2
 800655a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f003 0308 	and.w	r3, r3, #8
 8006564:	2b00      	cmp	r3, #0
 8006566:	d009      	beq.n	800657c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006568:	4b13      	ldr	r3, [pc, #76]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	00db      	lsls	r3, r3, #3
 8006576:	4910      	ldr	r1, [pc, #64]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006578:	4313      	orrs	r3, r2
 800657a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800657c:	f000 f824 	bl	80065c8 <HAL_RCC_GetSysClockFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b0d      	ldr	r3, [pc, #52]	; (80065b8 <HAL_RCC_ClockConfig+0x1f0>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	091b      	lsrs	r3, r3, #4
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	490b      	ldr	r1, [pc, #44]	; (80065bc <HAL_RCC_ClockConfig+0x1f4>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	f003 031f 	and.w	r3, r3, #31
 8006594:	fa22 f303 	lsr.w	r3, r2, r3
 8006598:	4a09      	ldr	r2, [pc, #36]	; (80065c0 <HAL_RCC_ClockConfig+0x1f8>)
 800659a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800659c:	4b09      	ldr	r3, [pc, #36]	; (80065c4 <HAL_RCC_ClockConfig+0x1fc>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fd feeb 	bl	800437c <HAL_InitTick>
 80065a6:	4603      	mov	r3, r0
 80065a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80065aa:	7afb      	ldrb	r3, [r7, #11]
}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3710      	adds	r7, #16
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}
 80065b4:	40022000 	.word	0x40022000
 80065b8:	40021000 	.word	0x40021000
 80065bc:	0800f2fc 	.word	0x0800f2fc
 80065c0:	20000204 	.word	0x20000204
 80065c4:	20000208 	.word	0x20000208

080065c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b089      	sub	sp, #36	; 0x24
 80065cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80065ce:	2300      	movs	r3, #0
 80065d0:	61fb      	str	r3, [r7, #28]
 80065d2:	2300      	movs	r3, #0
 80065d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065d6:	4b3e      	ldr	r3, [pc, #248]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80065e0:	4b3b      	ldr	r3, [pc, #236]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0303 	and.w	r3, r3, #3
 80065e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <HAL_RCC_GetSysClockFreq+0x34>
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2b0c      	cmp	r3, #12
 80065f4:	d121      	bne.n	800663a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d11e      	bne.n	800663a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80065fc:	4b34      	ldr	r3, [pc, #208]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f003 0308 	and.w	r3, r3, #8
 8006604:	2b00      	cmp	r3, #0
 8006606:	d107      	bne.n	8006618 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006608:	4b31      	ldr	r3, [pc, #196]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800660a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660e:	0a1b      	lsrs	r3, r3, #8
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	e005      	b.n	8006624 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006618:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	091b      	lsrs	r3, r3, #4
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006624:	4a2b      	ldr	r2, [pc, #172]	; (80066d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10d      	bne.n	8006650 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006638:	e00a      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800663a:	693b      	ldr	r3, [r7, #16]
 800663c:	2b04      	cmp	r3, #4
 800663e:	d102      	bne.n	8006646 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006640:	4b25      	ldr	r3, [pc, #148]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	e004      	b.n	8006650 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b08      	cmp	r3, #8
 800664a:	d101      	bne.n	8006650 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800664c:	4b23      	ldr	r3, [pc, #140]	; (80066dc <HAL_RCC_GetSysClockFreq+0x114>)
 800664e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b0c      	cmp	r3, #12
 8006654:	d134      	bne.n	80066c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006656:	4b1e      	ldr	r3, [pc, #120]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006658:	68db      	ldr	r3, [r3, #12]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	2b02      	cmp	r3, #2
 8006664:	d003      	beq.n	800666e <HAL_RCC_GetSysClockFreq+0xa6>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b03      	cmp	r3, #3
 800666a:	d003      	beq.n	8006674 <HAL_RCC_GetSysClockFreq+0xac>
 800666c:	e005      	b.n	800667a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800666e:	4b1a      	ldr	r3, [pc, #104]	; (80066d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8006670:	617b      	str	r3, [r7, #20]
      break;
 8006672:	e005      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006674:	4b19      	ldr	r3, [pc, #100]	; (80066dc <HAL_RCC_GetSysClockFreq+0x114>)
 8006676:	617b      	str	r3, [r7, #20]
      break;
 8006678:	e002      	b.n	8006680 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	617b      	str	r3, [r7, #20]
      break;
 800667e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006680:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006682:	68db      	ldr	r3, [r3, #12]
 8006684:	091b      	lsrs	r3, r3, #4
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	3301      	adds	r3, #1
 800668c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800668e:	4b10      	ldr	r3, [pc, #64]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	fb03 f202 	mul.w	r2, r3, r2
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80066a6:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	0e5b      	lsrs	r3, r3, #25
 80066ac:	f003 0303 	and.w	r3, r3, #3
 80066b0:	3301      	adds	r3, #1
 80066b2:	005b      	lsls	r3, r3, #1
 80066b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80066b6:	697a      	ldr	r2, [r7, #20]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80066c0:	69bb      	ldr	r3, [r7, #24]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3724      	adds	r7, #36	; 0x24
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0800f314 	.word	0x0800f314
 80066d8:	00f42400 	.word	0x00f42400
 80066dc:	007a1200 	.word	0x007a1200

080066e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80066e4:	4b03      	ldr	r3, [pc, #12]	; (80066f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80066e6:	681b      	ldr	r3, [r3, #0]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000204 	.word	0x20000204

080066f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80066fc:	f7ff fff0 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 8006700:	4602      	mov	r2, r0
 8006702:	4b06      	ldr	r3, [pc, #24]	; (800671c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	0a1b      	lsrs	r3, r3, #8
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	4904      	ldr	r1, [pc, #16]	; (8006720 <HAL_RCC_GetPCLK1Freq+0x28>)
 800670e:	5ccb      	ldrb	r3, [r1, r3]
 8006710:	f003 031f 	and.w	r3, r3, #31
 8006714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006718:	4618      	mov	r0, r3
 800671a:	bd80      	pop	{r7, pc}
 800671c:	40021000 	.word	0x40021000
 8006720:	0800f30c 	.word	0x0800f30c

08006724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006728:	f7ff ffda 	bl	80066e0 <HAL_RCC_GetHCLKFreq>
 800672c:	4602      	mov	r2, r0
 800672e:	4b06      	ldr	r3, [pc, #24]	; (8006748 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	0adb      	lsrs	r3, r3, #11
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	4904      	ldr	r1, [pc, #16]	; (800674c <HAL_RCC_GetPCLK2Freq+0x28>)
 800673a:	5ccb      	ldrb	r3, [r1, r3]
 800673c:	f003 031f 	and.w	r3, r3, #31
 8006740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006744:	4618      	mov	r0, r3
 8006746:	bd80      	pop	{r7, pc}
 8006748:	40021000 	.word	0x40021000
 800674c:	0800f30c 	.word	0x0800f30c

08006750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800675c:	4b2a      	ldr	r3, [pc, #168]	; (8006808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006768:	f7ff f9ee 	bl	8005b48 <HAL_PWREx_GetVoltageRange>
 800676c:	6178      	str	r0, [r7, #20]
 800676e:	e014      	b.n	800679a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006770:	4b25      	ldr	r3, [pc, #148]	; (8006808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006772:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006774:	4a24      	ldr	r2, [pc, #144]	; (8006808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800677a:	6593      	str	r3, [r2, #88]	; 0x58
 800677c:	4b22      	ldr	r3, [pc, #136]	; (8006808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800677e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006788:	f7ff f9de 	bl	8005b48 <HAL_PWREx_GetVoltageRange>
 800678c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800678e:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006792:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006798:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a0:	d10b      	bne.n	80067ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d919      	bls.n	80067dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2ba0      	cmp	r3, #160	; 0xa0
 80067ac:	d902      	bls.n	80067b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067ae:	2302      	movs	r3, #2
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	e013      	b.n	80067dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067b4:	2301      	movs	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]
 80067b8:	e010      	b.n	80067dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d902      	bls.n	80067c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80067c0:	2303      	movs	r3, #3
 80067c2:	613b      	str	r3, [r7, #16]
 80067c4:	e00a      	b.n	80067dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	d102      	bne.n	80067d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80067cc:	2302      	movs	r3, #2
 80067ce:	613b      	str	r3, [r7, #16]
 80067d0:	e004      	b.n	80067dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b70      	cmp	r3, #112	; 0x70
 80067d6:	d101      	bne.n	80067dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80067d8:	2301      	movs	r3, #1
 80067da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80067dc:	4b0b      	ldr	r3, [pc, #44]	; (800680c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f023 0207 	bic.w	r2, r3, #7
 80067e4:	4909      	ldr	r1, [pc, #36]	; (800680c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80067ec:	4b07      	ldr	r3, [pc, #28]	; (800680c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d001      	beq.n	80067fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e000      	b.n	8006800 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	3718      	adds	r7, #24
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	40021000 	.word	0x40021000
 800680c:	40022000 	.word	0x40022000

08006810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006818:	2300      	movs	r3, #0
 800681a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800681c:	2300      	movs	r3, #0
 800681e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006828:	2b00      	cmp	r3, #0
 800682a:	d041      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006830:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006834:	d02a      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006836:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800683a:	d824      	bhi.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800683c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006840:	d008      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006842:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006846:	d81e      	bhi.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00a      	beq.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800684c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006850:	d010      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006852:	e018      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006854:	4b86      	ldr	r3, [pc, #536]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a85      	ldr	r2, [pc, #532]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800685a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800685e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006860:	e015      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3304      	adds	r3, #4
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f000 fa8b 	bl	8006d84 <RCCEx_PLLSAI1_Config>
 800686e:	4603      	mov	r3, r0
 8006870:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006872:	e00c      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	3320      	adds	r3, #32
 8006878:	2100      	movs	r1, #0
 800687a:	4618      	mov	r0, r3
 800687c:	f000 fb76 	bl	8006f6c <RCCEx_PLLSAI2_Config>
 8006880:	4603      	mov	r3, r0
 8006882:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006884:	e003      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	74fb      	strb	r3, [r7, #19]
      break;
 800688a:	e000      	b.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800688c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688e:	7cfb      	ldrb	r3, [r7, #19]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10b      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006894:	4b76      	ldr	r3, [pc, #472]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068a2:	4973      	ldr	r1, [pc, #460]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068a4:	4313      	orrs	r3, r2
 80068a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80068aa:	e001      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ac:	7cfb      	ldrb	r3, [r7, #19]
 80068ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d041      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068c4:	d02a      	beq.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80068c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80068ca:	d824      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80068cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d0:	d008      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80068d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068d6:	d81e      	bhi.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00a      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80068dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068e0:	d010      	beq.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80068e2:	e018      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80068e4:	4b62      	ldr	r3, [pc, #392]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4a61      	ldr	r2, [pc, #388]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80068ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80068f0:	e015      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	3304      	adds	r3, #4
 80068f6:	2100      	movs	r1, #0
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fa43 	bl	8006d84 <RCCEx_PLLSAI1_Config>
 80068fe:	4603      	mov	r3, r0
 8006900:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006902:	e00c      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	3320      	adds	r3, #32
 8006908:	2100      	movs	r1, #0
 800690a:	4618      	mov	r0, r3
 800690c:	f000 fb2e 	bl	8006f6c <RCCEx_PLLSAI2_Config>
 8006910:	4603      	mov	r3, r0
 8006912:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006914:	e003      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	74fb      	strb	r3, [r7, #19]
      break;
 800691a:	e000      	b.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800691c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800691e:	7cfb      	ldrb	r3, [r7, #19]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006924:	4b52      	ldr	r3, [pc, #328]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800692a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006932:	494f      	ldr	r1, [pc, #316]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006934:	4313      	orrs	r3, r2
 8006936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800693a:	e001      	b.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	7cfb      	ldrb	r3, [r7, #19]
 800693e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80a0 	beq.w	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694e:	2300      	movs	r3, #0
 8006950:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006952:	4b47      	ldr	r3, [pc, #284]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800695e:	2301      	movs	r3, #1
 8006960:	e000      	b.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8006962:	2300      	movs	r3, #0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00d      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006968:	4b41      	ldr	r3, [pc, #260]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800696a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696c:	4a40      	ldr	r2, [pc, #256]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800696e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006972:	6593      	str	r3, [r2, #88]	; 0x58
 8006974:	4b3e      	ldr	r3, [pc, #248]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006980:	2301      	movs	r3, #1
 8006982:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006984:	4b3b      	ldr	r3, [pc, #236]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a3a      	ldr	r2, [pc, #232]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800698a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006990:	f7fd fd44 	bl	800441c <HAL_GetTick>
 8006994:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006996:	e009      	b.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006998:	f7fd fd40 	bl	800441c <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d902      	bls.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	74fb      	strb	r3, [r7, #19]
        break;
 80069aa:	e005      	b.n	80069b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80069ac:	4b31      	ldr	r3, [pc, #196]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0ef      	beq.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80069b8:	7cfb      	ldrb	r3, [r7, #19]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d15c      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069be:	4b2c      	ldr	r3, [pc, #176]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d01f      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d019      	beq.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069dc:	4b24      	ldr	r3, [pc, #144]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069e8:	4b21      	ldr	r3, [pc, #132]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	4a20      	ldr	r2, [pc, #128]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80069fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069fe:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a08:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d016      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a1a:	f7fd fcff 	bl	800441c <HAL_GetTick>
 8006a1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a20:	e00b      	b.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fd fcfb 	bl	800441c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d902      	bls.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	74fb      	strb	r3, [r7, #19]
            break;
 8006a38:	e006      	b.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a3a:	4b0d      	ldr	r3, [pc, #52]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a40:	f003 0302 	and.w	r3, r3, #2
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d0ec      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8006a48:	7cfb      	ldrb	r3, [r7, #19]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10c      	bne.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a4e:	4b08      	ldr	r3, [pc, #32]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006a5e:	4904      	ldr	r1, [pc, #16]	; (8006a70 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a66:	e009      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a68:	7cfb      	ldrb	r3, [r7, #19]
 8006a6a:	74bb      	strb	r3, [r7, #18]
 8006a6c:	e006      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8006a6e:	bf00      	nop
 8006a70:	40021000 	.word	0x40021000
 8006a74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a78:	7cfb      	ldrb	r3, [r7, #19]
 8006a7a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a7c:	7c7b      	ldrb	r3, [r7, #17]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d105      	bne.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a82:	4ba1      	ldr	r3, [pc, #644]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a86:	4aa0      	ldr	r2, [pc, #640]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a8c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d00a      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a9a:	4b9b      	ldr	r3, [pc, #620]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aa0:	f023 0203 	bic.w	r2, r3, #3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa8:	4997      	ldr	r1, [pc, #604]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006abc:	4b92      	ldr	r3, [pc, #584]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ac2:	f023 020c 	bic.w	r2, r3, #12
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aca:	498f      	ldr	r1, [pc, #572]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006acc:	4313      	orrs	r3, r2
 8006ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 0304 	and.w	r3, r3, #4
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006ade:	4b8a      	ldr	r3, [pc, #552]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	4986      	ldr	r1, [pc, #536]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006aee:	4313      	orrs	r3, r2
 8006af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b00:	4b81      	ldr	r3, [pc, #516]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b0e:	497e      	ldr	r1, [pc, #504]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b22:	4b79      	ldr	r3, [pc, #484]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b30:	4975      	ldr	r1, [pc, #468]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b44:	4b70      	ldr	r3, [pc, #448]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b52:	496d      	ldr	r1, [pc, #436]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b54:	4313      	orrs	r3, r2
 8006b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006b66:	4b68      	ldr	r3, [pc, #416]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b74:	4964      	ldr	r1, [pc, #400]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006b88:	4b5f      	ldr	r3, [pc, #380]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b96:	495c      	ldr	r1, [pc, #368]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006baa:	4b57      	ldr	r3, [pc, #348]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb8:	4953      	ldr	r1, [pc, #332]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bcc:	4b4e      	ldr	r3, [pc, #312]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bda:	494b      	ldr	r1, [pc, #300]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006bee:	4b46      	ldr	r3, [pc, #280]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bfc:	4942      	ldr	r1, [pc, #264]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d028      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006c10:	4b3d      	ldr	r3, [pc, #244]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c16:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1e:	493a      	ldr	r1, [pc, #232]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c2e:	d106      	bne.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c30:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4a34      	ldr	r2, [pc, #208]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c3a:	60d3      	str	r3, [r2, #12]
 8006c3c:	e011      	b.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c42:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c46:	d10c      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	2101      	movs	r1, #1
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f000 f898 	bl	8006d84 <RCCEx_PLLSAI1_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006c58:	7cfb      	ldrb	r3, [r7, #19]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8006c5e:	7cfb      	ldrb	r3, [r7, #19]
 8006c60:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d028      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006c6e:	4b26      	ldr	r3, [pc, #152]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c74:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4922      	ldr	r1, [pc, #136]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c8c:	d106      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c8e:	4b1e      	ldr	r3, [pc, #120]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	4a1d      	ldr	r2, [pc, #116]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006c94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c98:	60d3      	str	r3, [r2, #12]
 8006c9a:	e011      	b.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ca4:	d10c      	bne.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3304      	adds	r3, #4
 8006caa:	2101      	movs	r1, #1
 8006cac:	4618      	mov	r0, r3
 8006cae:	f000 f869 	bl	8006d84 <RCCEx_PLLSAI1_Config>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cb6:	7cfb      	ldrb	r3, [r7, #19]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8006cbc:	7cfb      	ldrb	r3, [r7, #19]
 8006cbe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d031      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ccc:	4b0e      	ldr	r3, [pc, #56]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cd2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cda:	490b      	ldr	r1, [pc, #44]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006cea:	d10f      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	2102      	movs	r1, #2
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f000 f846 	bl	8006d84 <RCCEx_PLLSAI1_Config>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006cfc:	7cfb      	ldrb	r3, [r7, #19]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d016      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8006d02:	7cfb      	ldrb	r3, [r7, #19]
 8006d04:	74bb      	strb	r3, [r7, #18]
 8006d06:	e013      	b.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006d08:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d14:	d10c      	bne.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	3320      	adds	r3, #32
 8006d1a:	2102      	movs	r1, #2
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	f000 f925 	bl	8006f6c <RCCEx_PLLSAI2_Config>
 8006d22:	4603      	mov	r3, r0
 8006d24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006d26:	7cfb      	ldrb	r3, [r7, #19]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8006d2c:	7cfb      	ldrb	r3, [r7, #19]
 8006d2e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00a      	beq.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8006d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d42:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d4a:	490d      	ldr	r1, [pc, #52]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00a      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d5e:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8006d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d6c:	4904      	ldr	r1, [pc, #16]	; (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006d74:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	40021000 	.word	0x40021000

08006d84 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006d92:	4b75      	ldr	r3, [pc, #468]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	f003 0303 	and.w	r3, r3, #3
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d018      	beq.n	8006dd0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006d9e:	4b72      	ldr	r3, [pc, #456]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0203 	and.w	r2, r3, #3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d10d      	bne.n	8006dca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
       ||
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006db6:	4b6c      	ldr	r3, [pc, #432]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	091b      	lsrs	r3, r3, #4
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
       ||
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d047      	beq.n	8006e5a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	e044      	b.n	8006e5a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b03      	cmp	r3, #3
 8006dd6:	d018      	beq.n	8006e0a <RCCEx_PLLSAI1_Config+0x86>
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d825      	bhi.n	8006e28 <RCCEx_PLLSAI1_Config+0xa4>
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d002      	beq.n	8006de6 <RCCEx_PLLSAI1_Config+0x62>
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d009      	beq.n	8006df8 <RCCEx_PLLSAI1_Config+0x74>
 8006de4:	e020      	b.n	8006e28 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006de6:	4b60      	ldr	r3, [pc, #384]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0302 	and.w	r3, r3, #2
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d11d      	bne.n	8006e2e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df6:	e01a      	b.n	8006e2e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006df8:	4b5b      	ldr	r3, [pc, #364]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d116      	bne.n	8006e32 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e08:	e013      	b.n	8006e32 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006e0a:	4b57      	ldr	r3, [pc, #348]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006e16:	4b54      	ldr	r3, [pc, #336]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d109      	bne.n	8006e36 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006e26:	e006      	b.n	8006e36 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e2c:	e004      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e2e:	bf00      	nop
 8006e30:	e002      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e32:	bf00      	nop
 8006e34:	e000      	b.n	8006e38 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006e36:	bf00      	nop
    }

    if(status == HAL_OK)
 8006e38:	7bfb      	ldrb	r3, [r7, #15]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d10d      	bne.n	8006e5a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6819      	ldr	r1, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	430b      	orrs	r3, r1
 8006e54:	4944      	ldr	r1, [pc, #272]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d17d      	bne.n	8006f5c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006e60:	4b41      	ldr	r3, [pc, #260]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a40      	ldr	r2, [pc, #256]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e6c:	f7fd fad6 	bl	800441c <HAL_GetTick>
 8006e70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e72:	e009      	b.n	8006e88 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006e74:	f7fd fad2 	bl	800441c <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d902      	bls.n	8006e88 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	73fb      	strb	r3, [r7, #15]
        break;
 8006e86:	e005      	b.n	8006e94 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006e88:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1ef      	bne.n	8006e74 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d160      	bne.n	8006f5c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d111      	bne.n	8006ec4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ea0:	4b31      	ldr	r3, [pc, #196]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	6892      	ldr	r2, [r2, #8]
 8006eb0:	0211      	lsls	r1, r2, #8
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	68d2      	ldr	r2, [r2, #12]
 8006eb6:	0912      	lsrs	r2, r2, #4
 8006eb8:	0452      	lsls	r2, r2, #17
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	492a      	ldr	r1, [pc, #168]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	610b      	str	r3, [r1, #16]
 8006ec2:	e027      	b.n	8006f14 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d112      	bne.n	8006ef0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006eca:	4b27      	ldr	r3, [pc, #156]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006ed2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	6892      	ldr	r2, [r2, #8]
 8006eda:	0211      	lsls	r1, r2, #8
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	6912      	ldr	r2, [r2, #16]
 8006ee0:	0852      	lsrs	r2, r2, #1
 8006ee2:	3a01      	subs	r2, #1
 8006ee4:	0552      	lsls	r2, r2, #21
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	491f      	ldr	r1, [pc, #124]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	610b      	str	r3, [r1, #16]
 8006eee:	e011      	b.n	8006f14 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006ef0:	4b1d      	ldr	r3, [pc, #116]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006ef2:	691b      	ldr	r3, [r3, #16]
 8006ef4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006ef8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6892      	ldr	r2, [r2, #8]
 8006f00:	0211      	lsls	r1, r2, #8
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6952      	ldr	r2, [r2, #20]
 8006f06:	0852      	lsrs	r2, r2, #1
 8006f08:	3a01      	subs	r2, #1
 8006f0a:	0652      	lsls	r2, r2, #25
 8006f0c:	430a      	orrs	r2, r1
 8006f0e:	4916      	ldr	r1, [pc, #88]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006f14:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a13      	ldr	r2, [pc, #76]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006f1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f20:	f7fd fa7c 	bl	800441c <HAL_GetTick>
 8006f24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f26:	e009      	b.n	8006f3c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006f28:	f7fd fa78 	bl	800441c <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d902      	bls.n	8006f3c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	73fb      	strb	r3, [r7, #15]
          break;
 8006f3a:	e005      	b.n	8006f48 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006f3c:	4b0a      	ldr	r3, [pc, #40]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d0ef      	beq.n	8006f28 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006f48:	7bfb      	ldrb	r3, [r7, #15]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d106      	bne.n	8006f5c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006f4e:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f50:	691a      	ldr	r2, [r3, #16]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	4904      	ldr	r1, [pc, #16]	; (8006f68 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40021000 	.word	0x40021000

08006f6c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006f7a:	4b6a      	ldr	r3, [pc, #424]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f003 0303 	and.w	r3, r3, #3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d018      	beq.n	8006fb8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006f86:	4b67      	ldr	r3, [pc, #412]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	f003 0203 	and.w	r2, r3, #3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d10d      	bne.n	8006fb2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
       ||
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006f9e:	4b61      	ldr	r3, [pc, #388]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	091b      	lsrs	r3, r3, #4
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
       ||
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d047      	beq.n	8007042 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	73fb      	strb	r3, [r7, #15]
 8006fb6:	e044      	b.n	8007042 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2b03      	cmp	r3, #3
 8006fbe:	d018      	beq.n	8006ff2 <RCCEx_PLLSAI2_Config+0x86>
 8006fc0:	2b03      	cmp	r3, #3
 8006fc2:	d825      	bhi.n	8007010 <RCCEx_PLLSAI2_Config+0xa4>
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d002      	beq.n	8006fce <RCCEx_PLLSAI2_Config+0x62>
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d009      	beq.n	8006fe0 <RCCEx_PLLSAI2_Config+0x74>
 8006fcc:	e020      	b.n	8007010 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006fce:	4b55      	ldr	r3, [pc, #340]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d11d      	bne.n	8007016 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fde:	e01a      	b.n	8007016 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006fe0:	4b50      	ldr	r3, [pc, #320]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d116      	bne.n	800701a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ff0:	e013      	b.n	800701a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006ff2:	4b4c      	ldr	r3, [pc, #304]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10f      	bne.n	800701e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006ffe:	4b49      	ldr	r3, [pc, #292]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d109      	bne.n	800701e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800700e:	e006      	b.n	800701e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	73fb      	strb	r3, [r7, #15]
      break;
 8007014:	e004      	b.n	8007020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007016:	bf00      	nop
 8007018:	e002      	b.n	8007020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800701a:	bf00      	nop
 800701c:	e000      	b.n	8007020 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800701e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d10d      	bne.n	8007042 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007026:	4b3f      	ldr	r3, [pc, #252]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6819      	ldr	r1, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	3b01      	subs	r3, #1
 8007038:	011b      	lsls	r3, r3, #4
 800703a:	430b      	orrs	r3, r1
 800703c:	4939      	ldr	r1, [pc, #228]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800703e:	4313      	orrs	r3, r2
 8007040:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d167      	bne.n	8007118 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007048:	4b36      	ldr	r3, [pc, #216]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a35      	ldr	r2, [pc, #212]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800704e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007052:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007054:	f7fd f9e2 	bl	800441c <HAL_GetTick>
 8007058:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800705a:	e009      	b.n	8007070 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800705c:	f7fd f9de 	bl	800441c <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d902      	bls.n	8007070 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	73fb      	strb	r3, [r7, #15]
        break;
 800706e:	e005      	b.n	800707c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007070:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1ef      	bne.n	800705c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800707c:	7bfb      	ldrb	r3, [r7, #15]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d14a      	bne.n	8007118 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d111      	bne.n	80070ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007088:	4b26      	ldr	r3, [pc, #152]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800708a:	695b      	ldr	r3, [r3, #20]
 800708c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6892      	ldr	r2, [r2, #8]
 8007098:	0211      	lsls	r1, r2, #8
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	68d2      	ldr	r2, [r2, #12]
 800709e:	0912      	lsrs	r2, r2, #4
 80070a0:	0452      	lsls	r2, r2, #17
 80070a2:	430a      	orrs	r2, r1
 80070a4:	491f      	ldr	r1, [pc, #124]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	614b      	str	r3, [r1, #20]
 80070aa:	e011      	b.n	80070d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80070ac:	4b1d      	ldr	r3, [pc, #116]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80070b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	6892      	ldr	r2, [r2, #8]
 80070bc:	0211      	lsls	r1, r2, #8
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6912      	ldr	r2, [r2, #16]
 80070c2:	0852      	lsrs	r2, r2, #1
 80070c4:	3a01      	subs	r2, #1
 80070c6:	0652      	lsls	r2, r2, #25
 80070c8:	430a      	orrs	r2, r1
 80070ca:	4916      	ldr	r1, [pc, #88]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070cc:	4313      	orrs	r3, r2
 80070ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80070d0:	4b14      	ldr	r3, [pc, #80]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a13      	ldr	r2, [pc, #76]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070dc:	f7fd f99e 	bl	800441c <HAL_GetTick>
 80070e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070e2:	e009      	b.n	80070f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80070e4:	f7fd f99a 	bl	800441c <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	68bb      	ldr	r3, [r7, #8]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d902      	bls.n	80070f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	73fb      	strb	r3, [r7, #15]
          break;
 80070f6:	e005      	b.n	8007104 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80070f8:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007100:	2b00      	cmp	r3, #0
 8007102:	d0ef      	beq.n	80070e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007104:	7bfb      	ldrb	r3, [r7, #15]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800710a:	4b06      	ldr	r3, [pc, #24]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 800710c:	695a      	ldr	r2, [r3, #20]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	4904      	ldr	r1, [pc, #16]	; (8007124 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007114:	4313      	orrs	r3, r2
 8007116:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	40021000 	.word	0x40021000

08007128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e095      	b.n	8007266 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800713e:	2b00      	cmp	r3, #0
 8007140:	d108      	bne.n	8007154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800714a:	d009      	beq.n	8007160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	61da      	str	r2, [r3, #28]
 8007152:	e005      	b.n	8007160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800716c:	b2db      	uxtb	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d106      	bne.n	8007180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7fc fa42 	bl	8003604 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2202      	movs	r2, #2
 8007184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071a0:	d902      	bls.n	80071a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
 80071a6:	e002      	b.n	80071ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80071a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80071b6:	d007      	beq.n	80071c8 <HAL_SPI_Init+0xa0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80071c0:	d002      	beq.n	80071c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2200      	movs	r2, #0
 80071c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80071d8:	431a      	orrs	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	f003 0301 	and.w	r3, r3, #1
 80071ec:	431a      	orrs	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f6:	431a      	orrs	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	69db      	ldr	r3, [r3, #28]
 80071fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007200:	431a      	orrs	r2, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800720a:	ea42 0103 	orr.w	r1, r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	430a      	orrs	r2, r1
 800721c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	0c1b      	lsrs	r3, r3, #16
 8007224:	f003 0204 	and.w	r2, r3, #4
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	f003 0310 	and.w	r3, r3, #16
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007244:	ea42 0103 	orr.w	r1, r2, r3
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	430a      	orrs	r2, r1
 8007254:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3710      	adds	r7, #16
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b088      	sub	sp, #32
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	603b      	str	r3, [r7, #0]
 800727a:	4613      	mov	r3, r2
 800727c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800727e:	2300      	movs	r3, #0
 8007280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d101      	bne.n	8007290 <HAL_SPI_Transmit+0x22>
 800728c:	2302      	movs	r3, #2
 800728e:	e158      	b.n	8007542 <HAL_SPI_Transmit+0x2d4>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007298:	f7fd f8c0 	bl	800441c <HAL_GetTick>
 800729c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800729e:	88fb      	ldrh	r3, [r7, #6]
 80072a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d002      	beq.n	80072b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80072ae:	2302      	movs	r3, #2
 80072b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072b2:	e13d      	b.n	8007530 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d002      	beq.n	80072c0 <HAL_SPI_Transmit+0x52>
 80072ba:	88fb      	ldrh	r3, [r7, #6]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d102      	bne.n	80072c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80072c4:	e134      	b.n	8007530 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2203      	movs	r2, #3
 80072ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	88fa      	ldrh	r2, [r7, #6]
 80072de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	88fa      	ldrh	r2, [r7, #6]
 80072e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	2200      	movs	r2, #0
 80072f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	2200      	movs	r2, #0
 8007300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007310:	d10f      	bne.n	8007332 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733c:	2b40      	cmp	r3, #64	; 0x40
 800733e:	d007      	beq.n	8007350 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800734e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007358:	d94b      	bls.n	80073f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d002      	beq.n	8007368 <HAL_SPI_Transmit+0xfa>
 8007362:	8afb      	ldrh	r3, [r7, #22]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d13e      	bne.n	80073e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800736c:	881a      	ldrh	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007378:	1c9a      	adds	r2, r3, #2
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	3b01      	subs	r3, #1
 8007386:	b29a      	uxth	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800738c:	e02b      	b.n	80073e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	2b02      	cmp	r3, #2
 800739a:	d112      	bne.n	80073c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a0:	881a      	ldrh	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ac:	1c9a      	adds	r2, r3, #2
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	3b01      	subs	r3, #1
 80073ba:	b29a      	uxth	r2, r3
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073c0:	e011      	b.n	80073e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c2:	f7fd f82b 	bl	800441c <HAL_GetTick>
 80073c6:	4602      	mov	r2, r0
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	1ad3      	subs	r3, r2, r3
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d803      	bhi.n	80073da <HAL_SPI_Transmit+0x16c>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d8:	d102      	bne.n	80073e0 <HAL_SPI_Transmit+0x172>
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d102      	bne.n	80073e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80073e0:	2303      	movs	r3, #3
 80073e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073e4:	e0a4      	b.n	8007530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ea:	b29b      	uxth	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d1ce      	bne.n	800738e <HAL_SPI_Transmit+0x120>
 80073f0:	e07c      	b.n	80074ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <HAL_SPI_Transmit+0x192>
 80073fa:	8afb      	ldrh	r3, [r7, #22]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d170      	bne.n	80074e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b01      	cmp	r3, #1
 8007408:	d912      	bls.n	8007430 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740e:	881a      	ldrh	r2, [r3, #0]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800741a:	1c9a      	adds	r2, r3, #2
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007424:	b29b      	uxth	r3, r3
 8007426:	3b02      	subs	r3, #2
 8007428:	b29a      	uxth	r2, r3
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800742e:	e058      	b.n	80074e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	330c      	adds	r3, #12
 800743a:	7812      	ldrb	r2, [r2, #0]
 800743c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007442:	1c5a      	adds	r2, r3, #1
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	b29a      	uxth	r2, r3
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8007456:	e044      	b.n	80074e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	f003 0302 	and.w	r3, r3, #2
 8007462:	2b02      	cmp	r3, #2
 8007464:	d12b      	bne.n	80074be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800746a:	b29b      	uxth	r3, r3
 800746c:	2b01      	cmp	r3, #1
 800746e:	d912      	bls.n	8007496 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007474:	881a      	ldrh	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	1c9a      	adds	r2, r3, #2
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b02      	subs	r3, #2
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007494:	e025      	b.n	80074e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	7812      	ldrb	r2, [r2, #0]
 80074a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	3b01      	subs	r3, #1
 80074b6:	b29a      	uxth	r2, r3
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80074bc:	e011      	b.n	80074e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80074be:	f7fc ffad 	bl	800441c <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	683a      	ldr	r2, [r7, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d803      	bhi.n	80074d6 <HAL_SPI_Transmit+0x268>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d102      	bne.n	80074dc <HAL_SPI_Transmit+0x26e>
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d102      	bne.n	80074e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80074e0:	e026      	b.n	8007530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1b5      	bne.n	8007458 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 fce3 	bl	8007ebc <SPI_EndRxTxTransaction>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d002      	beq.n	8007502 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2220      	movs	r2, #32
 8007500:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d10a      	bne.n	8007520 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800750a:	2300      	movs	r3, #0
 800750c:	613b      	str	r3, [r7, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	613b      	str	r3, [r7, #16]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689b      	ldr	r3, [r3, #8]
 800751c:	613b      	str	r3, [r7, #16]
 800751e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e000      	b.n	8007530 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800752e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2201      	movs	r2, #1
 8007534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007540:	7ffb      	ldrb	r3, [r7, #31]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b088      	sub	sp, #32
 800754e:	af02      	add	r7, sp, #8
 8007550:	60f8      	str	r0, [r7, #12]
 8007552:	60b9      	str	r1, [r7, #8]
 8007554:	603b      	str	r3, [r7, #0]
 8007556:	4613      	mov	r3, r2
 8007558:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007566:	d112      	bne.n	800758e <HAL_SPI_Receive+0x44>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10e      	bne.n	800758e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2204      	movs	r2, #4
 8007574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	9300      	str	r3, [sp, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	68ba      	ldr	r2, [r7, #8]
 8007582:	68b9      	ldr	r1, [r7, #8]
 8007584:	68f8      	ldr	r0, [r7, #12]
 8007586:	f000 f910 	bl	80077aa <HAL_SPI_TransmitReceive>
 800758a:	4603      	mov	r3, r0
 800758c:	e109      	b.n	80077a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_SPI_Receive+0x52>
 8007598:	2302      	movs	r3, #2
 800759a:	e102      	b.n	80077a2 <HAL_SPI_Receive+0x258>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80075a4:	f7fc ff3a 	bl	800441c <HAL_GetTick>
 80075a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d002      	beq.n	80075bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
 80075b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075ba:	e0e9      	b.n	8007790 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_SPI_Receive+0x7e>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80075cc:	e0e0      	b.n	8007790 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2204      	movs	r2, #4
 80075d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2200      	movs	r2, #0
 80075da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	68ba      	ldr	r2, [r7, #8]
 80075e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	88fa      	ldrh	r2, [r7, #6]
 80075e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	88fa      	ldrh	r2, [r7, #6]
 80075ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007618:	d908      	bls.n	800762c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007628:	605a      	str	r2, [r3, #4]
 800762a:	e007      	b.n	800763c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685a      	ldr	r2, [r3, #4]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800763a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007644:	d10f      	bne.n	8007666 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007664:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	d007      	beq.n	8007684 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007682:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800768c:	d867      	bhi.n	800775e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800768e:	e030      	b.n	80076f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	2b01      	cmp	r3, #1
 800769c:	d117      	bne.n	80076ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f103 020c 	add.w	r2, r3, #12
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076aa:	7812      	ldrb	r2, [r2, #0]
 80076ac:	b2d2      	uxtb	r2, r2
 80076ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b4:	1c5a      	adds	r2, r3, #1
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b29a      	uxth	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80076cc:	e011      	b.n	80076f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076ce:	f7fc fea5 	bl	800441c <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d803      	bhi.n	80076e6 <HAL_SPI_Receive+0x19c>
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e4:	d102      	bne.n	80076ec <HAL_SPI_Receive+0x1a2>
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d102      	bne.n	80076f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80076f0:	e04e      	b.n	8007790 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1c8      	bne.n	8007690 <HAL_SPI_Receive+0x146>
 80076fe:	e034      	b.n	800776a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b01      	cmp	r3, #1
 800770c:	d115      	bne.n	800773a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007718:	b292      	uxth	r2, r2
 800771a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007720:	1c9a      	adds	r2, r3, #2
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8007738:	e011      	b.n	800775e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800773a:	f7fc fe6f 	bl	800441c <HAL_GetTick>
 800773e:	4602      	mov	r2, r0
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	1ad3      	subs	r3, r2, r3
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d803      	bhi.n	8007752 <HAL_SPI_Receive+0x208>
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007750:	d102      	bne.n	8007758 <HAL_SPI_Receive+0x20e>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d102      	bne.n	800775e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800775c:	e018      	b.n	8007790 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007764:	b29b      	uxth	r3, r3
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1ca      	bne.n	8007700 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	6839      	ldr	r1, [r7, #0]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 fb4c 	bl	8007e0c <SPI_EndRxTransaction>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	2220      	movs	r2, #32
 800777e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8007788:	2301      	movs	r3, #1
 800778a:	75fb      	strb	r3, [r7, #23]
 800778c:	e000      	b.n	8007790 <HAL_SPI_Receive+0x246>
  }

error :
 800778e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3718      	adds	r7, #24
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b08a      	sub	sp, #40	; 0x28
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
 80077b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80077b8:	2301      	movs	r3, #1
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80077bc:	2300      	movs	r3, #0
 80077be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d101      	bne.n	80077d0 <HAL_SPI_TransmitReceive+0x26>
 80077cc:	2302      	movs	r3, #2
 80077ce:	e1fb      	b.n	8007bc8 <HAL_SPI_TransmitReceive+0x41e>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077d8:	f7fc fe20 	bl	800441c <HAL_GetTick>
 80077dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80077e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80077ec:	887b      	ldrh	r3, [r7, #2]
 80077ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80077f0:	887b      	ldrh	r3, [r7, #2]
 80077f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80077f4:	7efb      	ldrb	r3, [r7, #27]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d00e      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x6e>
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007800:	d106      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d102      	bne.n	8007810 <HAL_SPI_TransmitReceive+0x66>
 800780a:	7efb      	ldrb	r3, [r7, #27]
 800780c:	2b04      	cmp	r3, #4
 800780e:	d003      	beq.n	8007818 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007810:	2302      	movs	r3, #2
 8007812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007816:	e1cd      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d005      	beq.n	800782a <HAL_SPI_TransmitReceive+0x80>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d002      	beq.n	800782a <HAL_SPI_TransmitReceive+0x80>
 8007824:	887b      	ldrh	r3, [r7, #2]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800782a:	2301      	movs	r3, #1
 800782c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007830:	e1c0      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b04      	cmp	r3, #4
 800783c:	d003      	beq.n	8007846 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2205      	movs	r2, #5
 8007842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2200      	movs	r2, #0
 800784a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	687a      	ldr	r2, [r7, #4]
 8007850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	887a      	ldrh	r2, [r7, #2]
 8007856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	887a      	ldrh	r2, [r7, #2]
 800785e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	887a      	ldrh	r2, [r7, #2]
 800786c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	887a      	ldrh	r2, [r7, #2]
 8007872:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007888:	d802      	bhi.n	8007890 <HAL_SPI_TransmitReceive+0xe6>
 800788a:	8a3b      	ldrh	r3, [r7, #16]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d908      	bls.n	80078a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685a      	ldr	r2, [r3, #4]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800789e:	605a      	str	r2, [r3, #4]
 80078a0:	e007      	b.n	80078b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078bc:	2b40      	cmp	r3, #64	; 0x40
 80078be:	d007      	beq.n	80078d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80078d8:	d97c      	bls.n	80079d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d002      	beq.n	80078e8 <HAL_SPI_TransmitReceive+0x13e>
 80078e2:	8a7b      	ldrh	r3, [r7, #18]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d169      	bne.n	80079bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	881a      	ldrh	r2, [r3, #0]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	1c9a      	adds	r2, r3, #2
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007902:	b29b      	uxth	r3, r3
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800790c:	e056      	b.n	80079bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	689b      	ldr	r3, [r3, #8]
 8007914:	f003 0302 	and.w	r3, r3, #2
 8007918:	2b02      	cmp	r3, #2
 800791a:	d11b      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x1aa>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007920:	b29b      	uxth	r3, r3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d016      	beq.n	8007954 <HAL_SPI_TransmitReceive+0x1aa>
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	2b01      	cmp	r3, #1
 800792a:	d113      	bne.n	8007954 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	881a      	ldrh	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	1c9a      	adds	r2, r3, #2
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007946:	b29b      	uxth	r3, r3
 8007948:	3b01      	subs	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b01      	cmp	r3, #1
 8007960:	d11c      	bne.n	800799c <HAL_SPI_TransmitReceive+0x1f2>
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	d016      	beq.n	800799c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68da      	ldr	r2, [r3, #12]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007978:	b292      	uxth	r2, r2
 800797a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	1c9a      	adds	r2, r3, #2
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800798c:	b29b      	uxth	r3, r3
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007998:	2301      	movs	r3, #1
 800799a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800799c:	f7fc fd3e 	bl	800441c <HAL_GetTick>
 80079a0:	4602      	mov	r2, r0
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	1ad3      	subs	r3, r2, r3
 80079a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d807      	bhi.n	80079bc <HAL_SPI_TransmitReceive+0x212>
 80079ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d003      	beq.n	80079bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80079ba:	e0fb      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079c0:	b29b      	uxth	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1a3      	bne.n	800790e <HAL_SPI_TransmitReceive+0x164>
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d19d      	bne.n	800790e <HAL_SPI_TransmitReceive+0x164>
 80079d2:	e0df      	b.n	8007b94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d003      	beq.n	80079e4 <HAL_SPI_TransmitReceive+0x23a>
 80079dc:	8a7b      	ldrh	r3, [r7, #18]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	f040 80cb 	bne.w	8007b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d912      	bls.n	8007a14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f2:	881a      	ldrh	r2, [r3, #0]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	1c9a      	adds	r2, r3, #2
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	3b02      	subs	r3, #2
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a12:	e0b2      	b.n	8007b7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	7812      	ldrb	r2, [r2, #0]
 8007a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	3b01      	subs	r3, #1
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a3a:	e09e      	b.n	8007b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d134      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x30a>
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d02f      	beq.n	8007ab4 <HAL_SPI_TransmitReceive+0x30a>
 8007a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d12c      	bne.n	8007ab4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a5e:	b29b      	uxth	r3, r3
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d912      	bls.n	8007a8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	881a      	ldrh	r2, [r3, #0]
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	1c9a      	adds	r2, r3, #2
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b02      	subs	r3, #2
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007a88:	e012      	b.n	8007ab0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	330c      	adds	r3, #12
 8007a94:	7812      	ldrb	r2, [r2, #0]
 8007a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	689b      	ldr	r3, [r3, #8]
 8007aba:	f003 0301 	and.w	r3, r3, #1
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d148      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x3aa>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d042      	beq.n	8007b54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d923      	bls.n	8007b22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68da      	ldr	r2, [r3, #12]
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae4:	b292      	uxth	r2, r2
 8007ae6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aec:	1c9a      	adds	r2, r3, #2
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	3b02      	subs	r3, #2
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d81f      	bhi.n	8007b50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007b1e:	605a      	str	r2, [r3, #4]
 8007b20:	e016      	b.n	8007b50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f103 020c 	add.w	r2, r3, #12
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	7812      	ldrb	r2, [r2, #0]
 8007b30:	b2d2      	uxtb	r2, r2
 8007b32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	1c5a      	adds	r2, r3, #1
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b50:	2301      	movs	r3, #1
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b54:	f7fc fc62 	bl	800441c <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d803      	bhi.n	8007b6c <HAL_SPI_TransmitReceive+0x3c2>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b6a:	d102      	bne.n	8007b72 <HAL_SPI_TransmitReceive+0x3c8>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d103      	bne.n	8007b7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8007b72:	2303      	movs	r3, #3
 8007b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8007b78:	e01c      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f47f af5b 	bne.w	8007a3c <HAL_SPI_TransmitReceive+0x292>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	f47f af54 	bne.w	8007a3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b94:	69fa      	ldr	r2, [r7, #28]
 8007b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b98:	68f8      	ldr	r0, [r7, #12]
 8007b9a:	f000 f98f 	bl	8007ebc <SPI_EndRxTxTransaction>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2220      	movs	r2, #32
 8007bae:	661a      	str	r2, [r3, #96]	; 0x60
 8007bb0:	e000      	b.n	8007bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	3728      	adds	r7, #40	; 0x28
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}

08007bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b088      	sub	sp, #32
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	60f8      	str	r0, [r7, #12]
 8007bd8:	60b9      	str	r1, [r7, #8]
 8007bda:	603b      	str	r3, [r7, #0]
 8007bdc:	4613      	mov	r3, r2
 8007bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007be0:	f7fc fc1c 	bl	800441c <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be8:	1a9b      	subs	r3, r3, r2
 8007bea:	683a      	ldr	r2, [r7, #0]
 8007bec:	4413      	add	r3, r2
 8007bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007bf0:	f7fc fc14 	bl	800441c <HAL_GetTick>
 8007bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007bf6:	4b39      	ldr	r3, [pc, #228]	; (8007cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	015b      	lsls	r3, r3, #5
 8007bfc:	0d1b      	lsrs	r3, r3, #20
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	fb02 f303 	mul.w	r3, r2, r3
 8007c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007c06:	e054      	b.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c0e:	d050      	beq.n	8007cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007c10:	f7fc fc04 	bl	800441c <HAL_GetTick>
 8007c14:	4602      	mov	r2, r0
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d902      	bls.n	8007c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d13d      	bne.n	8007ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007c3e:	d111      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c48:	d004      	beq.n	8007c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689b      	ldr	r3, [r3, #8]
 8007c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c52:	d107      	bne.n	8007c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c6c:	d10f      	bne.n	8007c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e017      	b.n	8007cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689a      	ldr	r2, [r3, #8]
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	68ba      	ldr	r2, [r7, #8]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	bf0c      	ite	eq
 8007cc2:	2301      	moveq	r3, #1
 8007cc4:	2300      	movne	r3, #0
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	461a      	mov	r2, r3
 8007cca:	79fb      	ldrb	r3, [r7, #7]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d19b      	bne.n	8007c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3720      	adds	r7, #32
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	bf00      	nop
 8007cdc:	20000204 	.word	0x20000204

08007ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b08a      	sub	sp, #40	; 0x28
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007cf2:	f7fc fb93 	bl	800441c <HAL_GetTick>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfa:	1a9b      	subs	r3, r3, r2
 8007cfc:	683a      	ldr	r2, [r7, #0]
 8007cfe:	4413      	add	r3, r2
 8007d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007d02:	f7fc fb8b 	bl	800441c <HAL_GetTick>
 8007d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	330c      	adds	r3, #12
 8007d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007d10:	4b3d      	ldr	r3, [pc, #244]	; (8007e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	4613      	mov	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	00da      	lsls	r2, r3, #3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	0d1b      	lsrs	r3, r3, #20
 8007d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d22:	fb02 f303 	mul.w	r3, r2, r3
 8007d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007d28:	e060      	b.n	8007dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8007d30:	d107      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d104      	bne.n	8007d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	b2db      	uxtb	r3, r3
 8007d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d48:	d050      	beq.n	8007dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d4a:	f7fc fb67 	bl	800441c <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d56:	429a      	cmp	r2, r3
 8007d58:	d902      	bls.n	8007d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d13d      	bne.n	8007ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007d78:	d111      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d82:	d004      	beq.n	8007d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d8c:	d107      	bne.n	8007d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007da6:	d10f      	bne.n	8007dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007db6:	601a      	str	r2, [r3, #0]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e010      	b.n	8007dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d101      	bne.n	8007de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	3b01      	subs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4013      	ands	r3, r2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d196      	bne.n	8007d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3728      	adds	r7, #40	; 0x28
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	20000204 	.word	0x20000204

08007e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b086      	sub	sp, #24
 8007e10:	af02      	add	r7, sp, #8
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e20:	d111      	bne.n	8007e46 <SPI_EndRxTransaction+0x3a>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2a:	d004      	beq.n	8007e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e34:	d107      	bne.n	8007e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	2180      	movs	r1, #128	; 0x80
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff febd 	bl	8007bd0 <SPI_WaitFlagStateUntilTimeout>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d007      	beq.n	8007e6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e60:	f043 0220 	orr.w	r2, r3, #32
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e023      	b.n	8007eb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e74:	d11d      	bne.n	8007eb2 <SPI_EndRxTransaction+0xa6>
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d004      	beq.n	8007e8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e88:	d113      	bne.n	8007eb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f7ff ff22 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d007      	beq.n	8007eb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ea6:	f043 0220 	orr.w	r2, r3, #32
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e000      	b.n	8007eb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3710      	adds	r7, #16
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff03 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d007      	beq.n	8007ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee4:	f043 0220 	orr.w	r2, r3, #32
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e027      	b.n	8007f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2180      	movs	r1, #128	; 0x80
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f7ff fe68 	bl	8007bd0 <SPI_WaitFlagStateUntilTimeout>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d007      	beq.n	8007f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f0a:	f043 0220 	orr.w	r2, r3, #32
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f12:	2303      	movs	r3, #3
 8007f14:	e014      	b.n	8007f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007f22:	68f8      	ldr	r0, [r7, #12]
 8007f24:	f7ff fedc 	bl	8007ce0 <SPI_WaitFifoStateUntilTimeout>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f32:	f043 0220 	orr.w	r2, r3, #32
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007f3a:	2303      	movs	r3, #3
 8007f3c:	e000      	b.n	8007f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b082      	sub	sp, #8
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e049      	b.n	8007fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d106      	bne.n	8007f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fb fbbe 	bl	80036f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2202      	movs	r2, #2
 8007f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	3304      	adds	r3, #4
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f000 f9ee 	bl	8008368 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2201      	movs	r2, #1
 8007f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2201      	movs	r2, #1
 8007fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
	...

08007ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b01      	cmp	r3, #1
 800800a:	d001      	beq.n	8008010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e04f      	b.n	80080b0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2202      	movs	r2, #2
 8008014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68da      	ldr	r2, [r3, #12]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f042 0201 	orr.w	r2, r2, #1
 8008026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a23      	ldr	r2, [pc, #140]	; (80080bc <HAL_TIM_Base_Start_IT+0xc4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d01d      	beq.n	800806e <HAL_TIM_Base_Start_IT+0x76>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800803a:	d018      	beq.n	800806e <HAL_TIM_Base_Start_IT+0x76>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a1f      	ldr	r2, [pc, #124]	; (80080c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d013      	beq.n	800806e <HAL_TIM_Base_Start_IT+0x76>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1e      	ldr	r2, [pc, #120]	; (80080c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00e      	beq.n	800806e <HAL_TIM_Base_Start_IT+0x76>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a1c      	ldr	r2, [pc, #112]	; (80080c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d009      	beq.n	800806e <HAL_TIM_Base_Start_IT+0x76>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a1b      	ldr	r2, [pc, #108]	; (80080cc <HAL_TIM_Base_Start_IT+0xd4>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d004      	beq.n	800806e <HAL_TIM_Base_Start_IT+0x76>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a19      	ldr	r2, [pc, #100]	; (80080d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d115      	bne.n	800809a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	689a      	ldr	r2, [r3, #8]
 8008074:	4b17      	ldr	r3, [pc, #92]	; (80080d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008076:	4013      	ands	r3, r2
 8008078:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b06      	cmp	r3, #6
 800807e:	d015      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0xb4>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008086:	d011      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f042 0201 	orr.w	r2, r2, #1
 8008096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008098:	e008      	b.n	80080ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f042 0201 	orr.w	r2, r2, #1
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	e000      	b.n	80080ae <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3714      	adds	r7, #20
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr
 80080bc:	40012c00 	.word	0x40012c00
 80080c0:	40000400 	.word	0x40000400
 80080c4:	40000800 	.word	0x40000800
 80080c8:	40000c00 	.word	0x40000c00
 80080cc:	40013400 	.word	0x40013400
 80080d0:	40014000 	.word	0x40014000
 80080d4:	00010007 	.word	0x00010007

080080d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0302 	and.w	r3, r3, #2
 80080ea:	2b02      	cmp	r3, #2
 80080ec:	d122      	bne.n	8008134 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0302 	and.w	r3, r3, #2
 80080f8:	2b02      	cmp	r3, #2
 80080fa:	d11b      	bne.n	8008134 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0202 	mvn.w	r2, #2
 8008104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f905 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f8f7 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f908 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0304 	and.w	r3, r3, #4
 800813e:	2b04      	cmp	r3, #4
 8008140:	d122      	bne.n	8008188 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0304 	and.w	r3, r3, #4
 800814c:	2b04      	cmp	r3, #4
 800814e:	d11b      	bne.n	8008188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0204 	mvn.w	r2, #4
 8008158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2202      	movs	r2, #2
 800815e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800816a:	2b00      	cmp	r3, #0
 800816c:	d003      	beq.n	8008176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f8db 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 8008174:	e005      	b.n	8008182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 f8cd 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f000 f8de 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b08      	cmp	r3, #8
 8008194:	d122      	bne.n	80081dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f003 0308 	and.w	r3, r3, #8
 80081a0:	2b08      	cmp	r3, #8
 80081a2:	d11b      	bne.n	80081dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f06f 0208 	mvn.w	r2, #8
 80081ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2204      	movs	r2, #4
 80081b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f003 0303 	and.w	r3, r3, #3
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f8b1 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 80081c8:	e005      	b.n	80081d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f8a3 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 f8b4 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	f003 0310 	and.w	r3, r3, #16
 80081e6:	2b10      	cmp	r3, #16
 80081e8:	d122      	bne.n	8008230 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b10      	cmp	r3, #16
 80081f6:	d11b      	bne.n	8008230 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f06f 0210 	mvn.w	r2, #16
 8008200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2208      	movs	r2, #8
 8008206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69db      	ldr	r3, [r3, #28]
 800820e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f887 	bl	800832a <HAL_TIM_IC_CaptureCallback>
 800821c:	e005      	b.n	800822a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f879 	bl	8008316 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008224:	6878      	ldr	r0, [r7, #4]
 8008226:	f000 f88a 	bl	800833e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	691b      	ldr	r3, [r3, #16]
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	2b01      	cmp	r3, #1
 800823c:	d10e      	bne.n	800825c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	68db      	ldr	r3, [r3, #12]
 8008244:	f003 0301 	and.w	r3, r3, #1
 8008248:	2b01      	cmp	r3, #1
 800824a:	d107      	bne.n	800825c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f06f 0201 	mvn.w	r2, #1
 8008254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f7fa fea6 	bl	8002fa8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008266:	2b80      	cmp	r3, #128	; 0x80
 8008268:	d10e      	bne.n	8008288 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008274:	2b80      	cmp	r3, #128	; 0x80
 8008276:	d107      	bne.n	8008288 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f914 	bl	80084b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008296:	d10e      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082a2:	2b80      	cmp	r3, #128	; 0x80
 80082a4:	d107      	bne.n	80082b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80082ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f907 	bl	80084c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c0:	2b40      	cmp	r3, #64	; 0x40
 80082c2:	d10e      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ce:	2b40      	cmp	r3, #64	; 0x40
 80082d0:	d107      	bne.n	80082e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 f838 	bl	8008352 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	691b      	ldr	r3, [r3, #16]
 80082e8:	f003 0320 	and.w	r3, r3, #32
 80082ec:	2b20      	cmp	r3, #32
 80082ee:	d10e      	bne.n	800830e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	f003 0320 	and.w	r3, r3, #32
 80082fa:	2b20      	cmp	r3, #32
 80082fc:	d107      	bne.n	800830e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f06f 0220 	mvn.w	r2, #32
 8008306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f8c7 	bl	800849c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800830e:	bf00      	nop
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008316:	b480      	push	{r7}
 8008318:	b083      	sub	sp, #12
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800831e:	bf00      	nop
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr

0800832a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800832a:	b480      	push	{r7}
 800832c:	b083      	sub	sp, #12
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008332:	bf00      	nop
 8008334:	370c      	adds	r7, #12
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800833e:	b480      	push	{r7}
 8008340:	b083      	sub	sp, #12
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008346:	bf00      	nop
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008352:	b480      	push	{r7}
 8008354:	b083      	sub	sp, #12
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
	...

08008368 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a40      	ldr	r2, [pc, #256]	; (800847c <TIM_Base_SetConfig+0x114>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d013      	beq.n	80083a8 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008386:	d00f      	beq.n	80083a8 <TIM_Base_SetConfig+0x40>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a3d      	ldr	r2, [pc, #244]	; (8008480 <TIM_Base_SetConfig+0x118>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d00b      	beq.n	80083a8 <TIM_Base_SetConfig+0x40>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3c      	ldr	r2, [pc, #240]	; (8008484 <TIM_Base_SetConfig+0x11c>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d007      	beq.n	80083a8 <TIM_Base_SetConfig+0x40>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a3b      	ldr	r2, [pc, #236]	; (8008488 <TIM_Base_SetConfig+0x120>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d003      	beq.n	80083a8 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a3a      	ldr	r2, [pc, #232]	; (800848c <TIM_Base_SetConfig+0x124>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d108      	bne.n	80083ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2f      	ldr	r2, [pc, #188]	; (800847c <TIM_Base_SetConfig+0x114>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d01f      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083c8:	d01b      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2c      	ldr	r2, [pc, #176]	; (8008480 <TIM_Base_SetConfig+0x118>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d017      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a2b      	ldr	r2, [pc, #172]	; (8008484 <TIM_Base_SetConfig+0x11c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2a      	ldr	r2, [pc, #168]	; (8008488 <TIM_Base_SetConfig+0x120>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00f      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a29      	ldr	r2, [pc, #164]	; (800848c <TIM_Base_SetConfig+0x124>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00b      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a28      	ldr	r2, [pc, #160]	; (8008490 <TIM_Base_SetConfig+0x128>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d007      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a27      	ldr	r2, [pc, #156]	; (8008494 <TIM_Base_SetConfig+0x12c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d003      	beq.n	8008402 <TIM_Base_SetConfig+0x9a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a26      	ldr	r2, [pc, #152]	; (8008498 <TIM_Base_SetConfig+0x130>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d108      	bne.n	8008414 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	689a      	ldr	r2, [r3, #8]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a10      	ldr	r2, [pc, #64]	; (800847c <TIM_Base_SetConfig+0x114>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d00f      	beq.n	8008460 <TIM_Base_SetConfig+0xf8>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a12      	ldr	r2, [pc, #72]	; (800848c <TIM_Base_SetConfig+0x124>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00b      	beq.n	8008460 <TIM_Base_SetConfig+0xf8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a11      	ldr	r2, [pc, #68]	; (8008490 <TIM_Base_SetConfig+0x128>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d007      	beq.n	8008460 <TIM_Base_SetConfig+0xf8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a10      	ldr	r2, [pc, #64]	; (8008494 <TIM_Base_SetConfig+0x12c>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d003      	beq.n	8008460 <TIM_Base_SetConfig+0xf8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0f      	ldr	r2, [pc, #60]	; (8008498 <TIM_Base_SetConfig+0x130>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d103      	bne.n	8008468 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	691a      	ldr	r2, [r3, #16]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	615a      	str	r2, [r3, #20]
}
 800846e:	bf00      	nop
 8008470:	3714      	adds	r7, #20
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40012c00 	.word	0x40012c00
 8008480:	40000400 	.word	0x40000400
 8008484:	40000800 	.word	0x40000800
 8008488:	40000c00 	.word	0x40000c00
 800848c:	40013400 	.word	0x40013400
 8008490:	40014000 	.word	0x40014000
 8008494:	40014400 	.word	0x40014400
 8008498:	40014800 	.word	0x40014800

0800849c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800849c:	b480      	push	{r7}
 800849e:	b083      	sub	sp, #12
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084a4:	bf00      	nop
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084b8:	bf00      	nop
 80084ba:	370c      	adds	r7, #12
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d101      	bne.n	80084ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e040      	b.n	800856c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d106      	bne.n	8008500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7fb f91e 	bl	800373c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2224      	movs	r2, #36	; 0x24
 8008504:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f022 0201 	bic.w	r2, r2, #1
 8008514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8fe 	bl	8008718 <UART_SetConfig>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d101      	bne.n	8008526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e022      	b.n	800856c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852a:	2b00      	cmp	r3, #0
 800852c:	d002      	beq.n	8008534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 fbaa 	bl	8008c88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685a      	ldr	r2, [r3, #4]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc31 	bl	8008dcc <UART_CheckIdleState>
 800856a:	4603      	mov	r3, r0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b08a      	sub	sp, #40	; 0x28
 8008578:	af02      	add	r7, sp, #8
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	603b      	str	r3, [r7, #0]
 8008580:	4613      	mov	r3, r2
 8008582:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008588:	2b20      	cmp	r3, #32
 800858a:	f040 80bf 	bne.w	800870c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d002      	beq.n	800859a <HAL_UART_Receive+0x26>
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d101      	bne.n	800859e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e0b7      	b.n	800870e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d101      	bne.n	80085ac <HAL_UART_Receive+0x38>
 80085a8:	2302      	movs	r3, #2
 80085aa:	e0b0      	b.n	800870e <HAL_UART_Receive+0x19a>
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2222      	movs	r2, #34	; 0x22
 80085c0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2200      	movs	r2, #0
 80085c6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80085c8:	f7fb ff28 	bl	800441c <HAL_GetTick>
 80085cc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	88fa      	ldrh	r2, [r7, #6]
 80085d2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	88fa      	ldrh	r2, [r7, #6]
 80085da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e6:	d10e      	bne.n	8008606 <HAL_UART_Receive+0x92>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d105      	bne.n	80085fc <HAL_UART_Receive+0x88>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80085f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80085fa:	e02d      	b.n	8008658 <HAL_UART_Receive+0xe4>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	22ff      	movs	r2, #255	; 0xff
 8008600:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008604:	e028      	b.n	8008658 <HAL_UART_Receive+0xe4>
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10d      	bne.n	800862a <HAL_UART_Receive+0xb6>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d104      	bne.n	8008620 <HAL_UART_Receive+0xac>
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	22ff      	movs	r2, #255	; 0xff
 800861a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800861e:	e01b      	b.n	8008658 <HAL_UART_Receive+0xe4>
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	227f      	movs	r2, #127	; 0x7f
 8008624:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008628:	e016      	b.n	8008658 <HAL_UART_Receive+0xe4>
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008632:	d10d      	bne.n	8008650 <HAL_UART_Receive+0xdc>
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d104      	bne.n	8008646 <HAL_UART_Receive+0xd2>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	227f      	movs	r2, #127	; 0x7f
 8008640:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008644:	e008      	b.n	8008658 <HAL_UART_Receive+0xe4>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	223f      	movs	r2, #63	; 0x3f
 800864a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800864e:	e003      	b.n	8008658 <HAL_UART_Receive+0xe4>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800865e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008668:	d108      	bne.n	800867c <HAL_UART_Receive+0x108>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d104      	bne.n	800867c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008672:	2300      	movs	r3, #0
 8008674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	61bb      	str	r3, [r7, #24]
 800867a:	e003      	b.n	8008684 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008680:	2300      	movs	r3, #0
 8008682:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	2200      	movs	r2, #0
 8008688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800868c:	e033      	b.n	80086f6 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	9300      	str	r3, [sp, #0]
 8008692:	697b      	ldr	r3, [r7, #20]
 8008694:	2200      	movs	r2, #0
 8008696:	2120      	movs	r1, #32
 8008698:	68f8      	ldr	r0, [r7, #12]
 800869a:	f000 fbe0 	bl	8008e5e <UART_WaitOnFlagUntilTimeout>
 800869e:	4603      	mov	r3, r0
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d001      	beq.n	80086a8 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e032      	b.n	800870e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d10c      	bne.n	80086c8 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086b4:	b29a      	uxth	r2, r3
 80086b6:	8a7b      	ldrh	r3, [r7, #18]
 80086b8:	4013      	ands	r3, r2
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80086c0:	69bb      	ldr	r3, [r7, #24]
 80086c2:	3302      	adds	r3, #2
 80086c4:	61bb      	str	r3, [r7, #24]
 80086c6:	e00d      	b.n	80086e4 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	8a7b      	ldrh	r3, [r7, #18]
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	4013      	ands	r3, r2
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3301      	adds	r3, #1
 80086e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1c5      	bne.n	800868e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	e000      	b.n	800870e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800870c:	2302      	movs	r3, #2
  }
}
 800870e:	4618      	mov	r0, r3
 8008710:	3720      	adds	r7, #32
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
	...

08008718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800871c:	b08a      	sub	sp, #40	; 0x28
 800871e:	af00      	add	r7, sp, #0
 8008720:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	689a      	ldr	r2, [r3, #8]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	431a      	orrs	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	431a      	orrs	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	69db      	ldr	r3, [r3, #28]
 800873c:	4313      	orrs	r3, r2
 800873e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	681a      	ldr	r2, [r3, #0]
 8008746:	4ba4      	ldr	r3, [pc, #656]	; (80089d8 <UART_SetConfig+0x2c0>)
 8008748:	4013      	ands	r3, r2
 800874a:	68fa      	ldr	r2, [r7, #12]
 800874c:	6812      	ldr	r2, [r2, #0]
 800874e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008750:	430b      	orrs	r3, r1
 8008752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a99      	ldr	r2, [pc, #612]	; (80089dc <UART_SetConfig+0x2c4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008780:	4313      	orrs	r3, r2
 8008782:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008794:	430a      	orrs	r2, r1
 8008796:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a90      	ldr	r2, [pc, #576]	; (80089e0 <UART_SetConfig+0x2c8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d126      	bne.n	80087f0 <UART_SetConfig+0xd8>
 80087a2:	4b90      	ldr	r3, [pc, #576]	; (80089e4 <UART_SetConfig+0x2cc>)
 80087a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a8:	f003 0303 	and.w	r3, r3, #3
 80087ac:	2b03      	cmp	r3, #3
 80087ae:	d81b      	bhi.n	80087e8 <UART_SetConfig+0xd0>
 80087b0:	a201      	add	r2, pc, #4	; (adr r2, 80087b8 <UART_SetConfig+0xa0>)
 80087b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b6:	bf00      	nop
 80087b8:	080087c9 	.word	0x080087c9
 80087bc:	080087d9 	.word	0x080087d9
 80087c0:	080087d1 	.word	0x080087d1
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	2301      	movs	r3, #1
 80087ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ce:	e116      	b.n	80089fe <UART_SetConfig+0x2e6>
 80087d0:	2302      	movs	r3, #2
 80087d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087d6:	e112      	b.n	80089fe <UART_SetConfig+0x2e6>
 80087d8:	2304      	movs	r3, #4
 80087da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087de:	e10e      	b.n	80089fe <UART_SetConfig+0x2e6>
 80087e0:	2308      	movs	r3, #8
 80087e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087e6:	e10a      	b.n	80089fe <UART_SetConfig+0x2e6>
 80087e8:	2310      	movs	r3, #16
 80087ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087ee:	e106      	b.n	80089fe <UART_SetConfig+0x2e6>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a7c      	ldr	r2, [pc, #496]	; (80089e8 <UART_SetConfig+0x2d0>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d138      	bne.n	800886c <UART_SetConfig+0x154>
 80087fa:	4b7a      	ldr	r3, [pc, #488]	; (80089e4 <UART_SetConfig+0x2cc>)
 80087fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008800:	f003 030c 	and.w	r3, r3, #12
 8008804:	2b0c      	cmp	r3, #12
 8008806:	d82d      	bhi.n	8008864 <UART_SetConfig+0x14c>
 8008808:	a201      	add	r2, pc, #4	; (adr r2, 8008810 <UART_SetConfig+0xf8>)
 800880a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800880e:	bf00      	nop
 8008810:	08008845 	.word	0x08008845
 8008814:	08008865 	.word	0x08008865
 8008818:	08008865 	.word	0x08008865
 800881c:	08008865 	.word	0x08008865
 8008820:	08008855 	.word	0x08008855
 8008824:	08008865 	.word	0x08008865
 8008828:	08008865 	.word	0x08008865
 800882c:	08008865 	.word	0x08008865
 8008830:	0800884d 	.word	0x0800884d
 8008834:	08008865 	.word	0x08008865
 8008838:	08008865 	.word	0x08008865
 800883c:	08008865 	.word	0x08008865
 8008840:	0800885d 	.word	0x0800885d
 8008844:	2300      	movs	r3, #0
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884a:	e0d8      	b.n	80089fe <UART_SetConfig+0x2e6>
 800884c:	2302      	movs	r3, #2
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008852:	e0d4      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008854:	2304      	movs	r3, #4
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885a:	e0d0      	b.n	80089fe <UART_SetConfig+0x2e6>
 800885c:	2308      	movs	r3, #8
 800885e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008862:	e0cc      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008864:	2310      	movs	r3, #16
 8008866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800886a:	e0c8      	b.n	80089fe <UART_SetConfig+0x2e6>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a5e      	ldr	r2, [pc, #376]	; (80089ec <UART_SetConfig+0x2d4>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d125      	bne.n	80088c2 <UART_SetConfig+0x1aa>
 8008876:	4b5b      	ldr	r3, [pc, #364]	; (80089e4 <UART_SetConfig+0x2cc>)
 8008878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800887c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008880:	2b30      	cmp	r3, #48	; 0x30
 8008882:	d016      	beq.n	80088b2 <UART_SetConfig+0x19a>
 8008884:	2b30      	cmp	r3, #48	; 0x30
 8008886:	d818      	bhi.n	80088ba <UART_SetConfig+0x1a2>
 8008888:	2b20      	cmp	r3, #32
 800888a:	d00a      	beq.n	80088a2 <UART_SetConfig+0x18a>
 800888c:	2b20      	cmp	r3, #32
 800888e:	d814      	bhi.n	80088ba <UART_SetConfig+0x1a2>
 8008890:	2b00      	cmp	r3, #0
 8008892:	d002      	beq.n	800889a <UART_SetConfig+0x182>
 8008894:	2b10      	cmp	r3, #16
 8008896:	d008      	beq.n	80088aa <UART_SetConfig+0x192>
 8008898:	e00f      	b.n	80088ba <UART_SetConfig+0x1a2>
 800889a:	2300      	movs	r3, #0
 800889c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a0:	e0ad      	b.n	80089fe <UART_SetConfig+0x2e6>
 80088a2:	2302      	movs	r3, #2
 80088a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088a8:	e0a9      	b.n	80089fe <UART_SetConfig+0x2e6>
 80088aa:	2304      	movs	r3, #4
 80088ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b0:	e0a5      	b.n	80089fe <UART_SetConfig+0x2e6>
 80088b2:	2308      	movs	r3, #8
 80088b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b8:	e0a1      	b.n	80089fe <UART_SetConfig+0x2e6>
 80088ba:	2310      	movs	r3, #16
 80088bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c0:	e09d      	b.n	80089fe <UART_SetConfig+0x2e6>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a4a      	ldr	r2, [pc, #296]	; (80089f0 <UART_SetConfig+0x2d8>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d125      	bne.n	8008918 <UART_SetConfig+0x200>
 80088cc:	4b45      	ldr	r3, [pc, #276]	; (80089e4 <UART_SetConfig+0x2cc>)
 80088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80088d6:	2bc0      	cmp	r3, #192	; 0xc0
 80088d8:	d016      	beq.n	8008908 <UART_SetConfig+0x1f0>
 80088da:	2bc0      	cmp	r3, #192	; 0xc0
 80088dc:	d818      	bhi.n	8008910 <UART_SetConfig+0x1f8>
 80088de:	2b80      	cmp	r3, #128	; 0x80
 80088e0:	d00a      	beq.n	80088f8 <UART_SetConfig+0x1e0>
 80088e2:	2b80      	cmp	r3, #128	; 0x80
 80088e4:	d814      	bhi.n	8008910 <UART_SetConfig+0x1f8>
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d002      	beq.n	80088f0 <UART_SetConfig+0x1d8>
 80088ea:	2b40      	cmp	r3, #64	; 0x40
 80088ec:	d008      	beq.n	8008900 <UART_SetConfig+0x1e8>
 80088ee:	e00f      	b.n	8008910 <UART_SetConfig+0x1f8>
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088f6:	e082      	b.n	80089fe <UART_SetConfig+0x2e6>
 80088f8:	2302      	movs	r3, #2
 80088fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088fe:	e07e      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008900:	2304      	movs	r3, #4
 8008902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008906:	e07a      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008908:	2308      	movs	r3, #8
 800890a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800890e:	e076      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008910:	2310      	movs	r3, #16
 8008912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008916:	e072      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a35      	ldr	r2, [pc, #212]	; (80089f4 <UART_SetConfig+0x2dc>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d12a      	bne.n	8008978 <UART_SetConfig+0x260>
 8008922:	4b30      	ldr	r3, [pc, #192]	; (80089e4 <UART_SetConfig+0x2cc>)
 8008924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008928:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800892c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008930:	d01a      	beq.n	8008968 <UART_SetConfig+0x250>
 8008932:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008936:	d81b      	bhi.n	8008970 <UART_SetConfig+0x258>
 8008938:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800893c:	d00c      	beq.n	8008958 <UART_SetConfig+0x240>
 800893e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008942:	d815      	bhi.n	8008970 <UART_SetConfig+0x258>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d003      	beq.n	8008950 <UART_SetConfig+0x238>
 8008948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800894c:	d008      	beq.n	8008960 <UART_SetConfig+0x248>
 800894e:	e00f      	b.n	8008970 <UART_SetConfig+0x258>
 8008950:	2300      	movs	r3, #0
 8008952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008956:	e052      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008958:	2302      	movs	r3, #2
 800895a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800895e:	e04e      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008960:	2304      	movs	r3, #4
 8008962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008966:	e04a      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008968:	2308      	movs	r3, #8
 800896a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800896e:	e046      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008970:	2310      	movs	r3, #16
 8008972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008976:	e042      	b.n	80089fe <UART_SetConfig+0x2e6>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a17      	ldr	r2, [pc, #92]	; (80089dc <UART_SetConfig+0x2c4>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d13a      	bne.n	80089f8 <UART_SetConfig+0x2e0>
 8008982:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <UART_SetConfig+0x2cc>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800898c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008990:	d01a      	beq.n	80089c8 <UART_SetConfig+0x2b0>
 8008992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008996:	d81b      	bhi.n	80089d0 <UART_SetConfig+0x2b8>
 8008998:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800899c:	d00c      	beq.n	80089b8 <UART_SetConfig+0x2a0>
 800899e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a2:	d815      	bhi.n	80089d0 <UART_SetConfig+0x2b8>
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d003      	beq.n	80089b0 <UART_SetConfig+0x298>
 80089a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80089ac:	d008      	beq.n	80089c0 <UART_SetConfig+0x2a8>
 80089ae:	e00f      	b.n	80089d0 <UART_SetConfig+0x2b8>
 80089b0:	2300      	movs	r3, #0
 80089b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089b6:	e022      	b.n	80089fe <UART_SetConfig+0x2e6>
 80089b8:	2302      	movs	r3, #2
 80089ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089be:	e01e      	b.n	80089fe <UART_SetConfig+0x2e6>
 80089c0:	2304      	movs	r3, #4
 80089c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089c6:	e01a      	b.n	80089fe <UART_SetConfig+0x2e6>
 80089c8:	2308      	movs	r3, #8
 80089ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089ce:	e016      	b.n	80089fe <UART_SetConfig+0x2e6>
 80089d0:	2310      	movs	r3, #16
 80089d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80089d6:	e012      	b.n	80089fe <UART_SetConfig+0x2e6>
 80089d8:	efff69f3 	.word	0xefff69f3
 80089dc:	40008000 	.word	0x40008000
 80089e0:	40013800 	.word	0x40013800
 80089e4:	40021000 	.word	0x40021000
 80089e8:	40004400 	.word	0x40004400
 80089ec:	40004800 	.word	0x40004800
 80089f0:	40004c00 	.word	0x40004c00
 80089f4:	40005000 	.word	0x40005000
 80089f8:	2310      	movs	r3, #16
 80089fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a9f      	ldr	r2, [pc, #636]	; (8008c80 <UART_SetConfig+0x568>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d17a      	bne.n	8008afe <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008a08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d824      	bhi.n	8008a5a <UART_SetConfig+0x342>
 8008a10:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <UART_SetConfig+0x300>)
 8008a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a16:	bf00      	nop
 8008a18:	08008a3d 	.word	0x08008a3d
 8008a1c:	08008a5b 	.word	0x08008a5b
 8008a20:	08008a45 	.word	0x08008a45
 8008a24:	08008a5b 	.word	0x08008a5b
 8008a28:	08008a4b 	.word	0x08008a4b
 8008a2c:	08008a5b 	.word	0x08008a5b
 8008a30:	08008a5b 	.word	0x08008a5b
 8008a34:	08008a5b 	.word	0x08008a5b
 8008a38:	08008a53 	.word	0x08008a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a3c:	f7fd fe5c 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008a40:	61f8      	str	r0, [r7, #28]
        break;
 8008a42:	e010      	b.n	8008a66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a44:	4b8f      	ldr	r3, [pc, #572]	; (8008c84 <UART_SetConfig+0x56c>)
 8008a46:	61fb      	str	r3, [r7, #28]
        break;
 8008a48:	e00d      	b.n	8008a66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a4a:	f7fd fdbd 	bl	80065c8 <HAL_RCC_GetSysClockFreq>
 8008a4e:	61f8      	str	r0, [r7, #28]
        break;
 8008a50:	e009      	b.n	8008a66 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a56:	61fb      	str	r3, [r7, #28]
        break;
 8008a58:	e005      	b.n	8008a66 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008a64:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	f000 80fb 	beq.w	8008c64 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	685a      	ldr	r2, [r3, #4]
 8008a72:	4613      	mov	r3, r2
 8008a74:	005b      	lsls	r3, r3, #1
 8008a76:	4413      	add	r3, r2
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d305      	bcc.n	8008a8a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d903      	bls.n	8008a92 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a90:	e0e8      	b.n	8008c64 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	2200      	movs	r2, #0
 8008a96:	461c      	mov	r4, r3
 8008a98:	4615      	mov	r5, r2
 8008a9a:	f04f 0200 	mov.w	r2, #0
 8008a9e:	f04f 0300 	mov.w	r3, #0
 8008aa2:	022b      	lsls	r3, r5, #8
 8008aa4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008aa8:	0222      	lsls	r2, r4, #8
 8008aaa:	68f9      	ldr	r1, [r7, #12]
 8008aac:	6849      	ldr	r1, [r1, #4]
 8008aae:	0849      	lsrs	r1, r1, #1
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	4688      	mov	r8, r1
 8008ab4:	4681      	mov	r9, r0
 8008ab6:	eb12 0a08 	adds.w	sl, r2, r8
 8008aba:	eb43 0b09 	adc.w	fp, r3, r9
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	603b      	str	r3, [r7, #0]
 8008ac6:	607a      	str	r2, [r7, #4]
 8008ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008acc:	4650      	mov	r0, sl
 8008ace:	4659      	mov	r1, fp
 8008ad0:	f7f8 f86a 	bl	8000ba8 <__aeabi_uldivmod>
 8008ad4:	4602      	mov	r2, r0
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	4613      	mov	r3, r2
 8008ada:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ae2:	d308      	bcc.n	8008af6 <UART_SetConfig+0x3de>
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aea:	d204      	bcs.n	8008af6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	60da      	str	r2, [r3, #12]
 8008af4:	e0b6      	b.n	8008c64 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008afc:	e0b2      	b.n	8008c64 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b06:	d15e      	bne.n	8008bc6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008b08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b0c:	2b08      	cmp	r3, #8
 8008b0e:	d828      	bhi.n	8008b62 <UART_SetConfig+0x44a>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <UART_SetConfig+0x400>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b45 	.word	0x08008b45
 8008b20:	08008b4d 	.word	0x08008b4d
 8008b24:	08008b63 	.word	0x08008b63
 8008b28:	08008b53 	.word	0x08008b53
 8008b2c:	08008b63 	.word	0x08008b63
 8008b30:	08008b63 	.word	0x08008b63
 8008b34:	08008b63 	.word	0x08008b63
 8008b38:	08008b5b 	.word	0x08008b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b3c:	f7fd fddc 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008b40:	61f8      	str	r0, [r7, #28]
        break;
 8008b42:	e014      	b.n	8008b6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b44:	f7fd fdee 	bl	8006724 <HAL_RCC_GetPCLK2Freq>
 8008b48:	61f8      	str	r0, [r7, #28]
        break;
 8008b4a:	e010      	b.n	8008b6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b4c:	4b4d      	ldr	r3, [pc, #308]	; (8008c84 <UART_SetConfig+0x56c>)
 8008b4e:	61fb      	str	r3, [r7, #28]
        break;
 8008b50:	e00d      	b.n	8008b6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b52:	f7fd fd39 	bl	80065c8 <HAL_RCC_GetSysClockFreq>
 8008b56:	61f8      	str	r0, [r7, #28]
        break;
 8008b58:	e009      	b.n	8008b6e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b5e:	61fb      	str	r3, [r7, #28]
        break;
 8008b60:	e005      	b.n	8008b6e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d077      	beq.n	8008c64 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008b74:	69fb      	ldr	r3, [r7, #28]
 8008b76:	005a      	lsls	r2, r3, #1
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	441a      	add	r2, r3
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	685b      	ldr	r3, [r3, #4]
 8008b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b88:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b8a:	69bb      	ldr	r3, [r7, #24]
 8008b8c:	2b0f      	cmp	r3, #15
 8008b8e:	d916      	bls.n	8008bbe <UART_SetConfig+0x4a6>
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b96:	d212      	bcs.n	8008bbe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	b29b      	uxth	r3, r3
 8008b9c:	f023 030f 	bic.w	r3, r3, #15
 8008ba0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	085b      	lsrs	r3, r3, #1
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	8afb      	ldrh	r3, [r7, #22]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	8afa      	ldrh	r2, [r7, #22]
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	e052      	b.n	8008c64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008bbe:	2301      	movs	r3, #1
 8008bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008bc4:	e04e      	b.n	8008c64 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008bc6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008bca:	2b08      	cmp	r3, #8
 8008bcc:	d827      	bhi.n	8008c1e <UART_SetConfig+0x506>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x4bc>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bf9 	.word	0x08008bf9
 8008bd8:	08008c01 	.word	0x08008c01
 8008bdc:	08008c09 	.word	0x08008c09
 8008be0:	08008c1f 	.word	0x08008c1f
 8008be4:	08008c0f 	.word	0x08008c0f
 8008be8:	08008c1f 	.word	0x08008c1f
 8008bec:	08008c1f 	.word	0x08008c1f
 8008bf0:	08008c1f 	.word	0x08008c1f
 8008bf4:	08008c17 	.word	0x08008c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008bf8:	f7fd fd7e 	bl	80066f8 <HAL_RCC_GetPCLK1Freq>
 8008bfc:	61f8      	str	r0, [r7, #28]
        break;
 8008bfe:	e014      	b.n	8008c2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008c00:	f7fd fd90 	bl	8006724 <HAL_RCC_GetPCLK2Freq>
 8008c04:	61f8      	str	r0, [r7, #28]
        break;
 8008c06:	e010      	b.n	8008c2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008c08:	4b1e      	ldr	r3, [pc, #120]	; (8008c84 <UART_SetConfig+0x56c>)
 8008c0a:	61fb      	str	r3, [r7, #28]
        break;
 8008c0c:	e00d      	b.n	8008c2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008c0e:	f7fd fcdb 	bl	80065c8 <HAL_RCC_GetSysClockFreq>
 8008c12:	61f8      	str	r0, [r7, #28]
        break;
 8008c14:	e009      	b.n	8008c2a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c1a:	61fb      	str	r3, [r7, #28]
        break;
 8008c1c:	e005      	b.n	8008c2a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008c22:	2301      	movs	r3, #1
 8008c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008c28:	bf00      	nop
    }

    if (pclk != 0U)
 8008c2a:	69fb      	ldr	r3, [r7, #28]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d019      	beq.n	8008c64 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	085a      	lsrs	r2, r3, #1
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	441a      	add	r2, r3
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d909      	bls.n	8008c5e <UART_SetConfig+0x546>
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d205      	bcs.n	8008c5e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60da      	str	r2, [r3, #12]
 8008c5c:	e002      	b.n	8008c64 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008c70:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3728      	adds	r7, #40	; 0x28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c7e:	bf00      	nop
 8008c80:	40008000 	.word	0x40008000
 8008c84:	00f42400 	.word	0x00f42400

08008c88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00a      	beq.n	8008cb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	430a      	orrs	r2, r1
 8008cb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	f003 0302 	and.w	r3, r3, #2
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00a      	beq.n	8008cd4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	430a      	orrs	r2, r1
 8008cd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd8:	f003 0304 	and.w	r3, r3, #4
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00a      	beq.n	8008cf6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfa:	f003 0308 	and.w	r3, r3, #8
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	430a      	orrs	r2, r1
 8008d16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d1c:	f003 0310 	and.w	r3, r3, #16
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00a      	beq.n	8008d3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	430a      	orrs	r2, r1
 8008d38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d00a      	beq.n	8008d5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	430a      	orrs	r2, r1
 8008d5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01a      	beq.n	8008d9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	430a      	orrs	r2, r1
 8008d7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d86:	d10a      	bne.n	8008d9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	430a      	orrs	r2, r1
 8008d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d00a      	beq.n	8008dc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	605a      	str	r2, [r3, #4]
  }
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af02      	add	r7, sp, #8
 8008dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ddc:	f7fb fb1e 	bl	800441c <HAL_GetTick>
 8008de0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f003 0308 	and.w	r3, r3, #8
 8008dec:	2b08      	cmp	r3, #8
 8008dee:	d10e      	bne.n	8008e0e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008df0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f82d 	bl	8008e5e <UART_WaitOnFlagUntilTimeout>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d001      	beq.n	8008e0e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e023      	b.n	8008e56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0304 	and.w	r3, r3, #4
 8008e18:	2b04      	cmp	r3, #4
 8008e1a:	d10e      	bne.n	8008e3a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f817 	bl	8008e5e <UART_WaitOnFlagUntilTimeout>
 8008e30:	4603      	mov	r3, r0
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d001      	beq.n	8008e3a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e00d      	b.n	8008e56 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2220      	movs	r2, #32
 8008e3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2220      	movs	r2, #32
 8008e44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}

08008e5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008e5e:	b580      	push	{r7, lr}
 8008e60:	b09c      	sub	sp, #112	; 0x70
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	60f8      	str	r0, [r7, #12]
 8008e66:	60b9      	str	r1, [r7, #8]
 8008e68:	603b      	str	r3, [r7, #0]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e6e:	e0a5      	b.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e76:	f000 80a1 	beq.w	8008fbc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e7a:	f7fb facf 	bl	800441c <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d302      	bcc.n	8008e90 <UART_WaitOnFlagUntilTimeout+0x32>
 8008e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d13e      	bne.n	8008f0e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ea0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ea4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008eb0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eb4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008ebc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e6      	bne.n	8008e90 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	663b      	str	r3, [r7, #96]	; 0x60
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008ee2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e5      	bne.n	8008ec2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008f0a:	2303      	movs	r3, #3
 8008f0c:	e067      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0304 	and.w	r3, r3, #4
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d04f      	beq.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	69db      	ldr	r3, [r3, #28]
 8008f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f2a:	d147      	bne.n	8008fbc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f34:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	e853 3f00 	ldrex	r3, [r3]
 8008f42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f46:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008f4a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	461a      	mov	r2, r3
 8008f52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f54:	637b      	str	r3, [r7, #52]	; 0x34
 8008f56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e6      	bne.n	8008f36 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	e853 3f00 	ldrex	r3, [r3]
 8008f76:	613b      	str	r3, [r7, #16]
   return(result);
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3308      	adds	r3, #8
 8008f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f88:	623a      	str	r2, [r7, #32]
 8008f8a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	69f9      	ldr	r1, [r7, #28]
 8008f8e:	6a3a      	ldr	r2, [r7, #32]
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e5      	bne.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2220      	movs	r2, #32
 8008fa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2220      	movs	r2, #32
 8008fac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	e010      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	69da      	ldr	r2, [r3, #28]
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	bf0c      	ite	eq
 8008fcc:	2301      	moveq	r3, #1
 8008fce:	2300      	movne	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	f43f af4a 	beq.w	8008e70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fdc:	2300      	movs	r3, #0
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3770      	adds	r7, #112	; 0x70
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
	...

08008fe8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008fec:	4904      	ldr	r1, [pc, #16]	; (8009000 <MX_FATFS_Init+0x18>)
 8008fee:	4805      	ldr	r0, [pc, #20]	; (8009004 <MX_FATFS_Init+0x1c>)
 8008ff0:	f002 fef2 	bl	800bdd8 <FATFS_LinkDriver>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	4b03      	ldr	r3, [pc, #12]	; (8009008 <MX_FATFS_Init+0x20>)
 8008ffa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008ffc:	bf00      	nop
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	20000750 	.word	0x20000750
 8009004:	20000210 	.word	0x20000210
 8009008:	2000074c 	.word	0x2000074c

0800900c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800900c:	b480      	push	{r7}
 800900e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009010:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8009012:	4618      	mov	r0, r3
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b082      	sub	sp, #8
 8009020:	af00      	add	r7, sp, #0
 8009022:	4603      	mov	r3, r0
 8009024:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	4618      	mov	r0, r3
 800902a:	f000 f9d7 	bl	80093dc <USER_SPI_initialize>
 800902e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8009030:	4618      	mov	r0, r3
 8009032:	3708      	adds	r7, #8
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	4603      	mov	r3, r0
 8009040:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	4618      	mov	r0, r3
 8009046:	f000 fab3 	bl	80095b0 <USER_SPI_status>
 800904a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	60b9      	str	r1, [r7, #8]
 800905c:	607a      	str	r2, [r7, #4]
 800905e:	603b      	str	r3, [r7, #0]
 8009060:	4603      	mov	r3, r0
 8009062:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 8009064:	7bf8      	ldrb	r0, [r7, #15]
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	68b9      	ldr	r1, [r7, #8]
 800906c:	f000 fab6 	bl	80095dc <USER_SPI_read>
 8009070:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}

0800907a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800907a:	b580      	push	{r7, lr}
 800907c:	b084      	sub	sp, #16
 800907e:	af00      	add	r7, sp, #0
 8009080:	60b9      	str	r1, [r7, #8]
 8009082:	607a      	str	r2, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
 8009086:	4603      	mov	r3, r0
 8009088:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 800908a:	7bf8      	ldrb	r0, [r7, #15]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	68b9      	ldr	r1, [r7, #8]
 8009092:	f000 fb09 	bl	80096a8 <USER_SPI_write>
 8009096:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	603a      	str	r2, [r7, #0]
 80090aa:	71fb      	strb	r3, [r7, #7]
 80090ac:	460b      	mov	r3, r1
 80090ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 80090b0:	79b9      	ldrb	r1, [r7, #6]
 80090b2:	79fb      	ldrb	r3, [r7, #7]
 80090b4:	683a      	ldr	r2, [r7, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f000 fb72 	bl	80097a0 <USER_SPI_ioctl>
 80090bc:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3708      	adds	r7, #8
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
	...

080090c8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b082      	sub	sp, #8
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80090d0:	f7fb f9a4 	bl	800441c <HAL_GetTick>
 80090d4:	4603      	mov	r3, r0
 80090d6:	4a04      	ldr	r2, [pc, #16]	; (80090e8 <SPI_Timer_On+0x20>)
 80090d8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80090da:	4a04      	ldr	r2, [pc, #16]	; (80090ec <SPI_Timer_On+0x24>)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6013      	str	r3, [r2, #0]
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	20000758 	.word	0x20000758
 80090ec:	2000075c 	.word	0x2000075c

080090f0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80090f4:	f7fb f992 	bl	800441c <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	4b06      	ldr	r3, [pc, #24]	; (8009114 <SPI_Timer_Status+0x24>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	1ad2      	subs	r2, r2, r3
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <SPI_Timer_Status+0x28>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	429a      	cmp	r2, r3
 8009106:	bf34      	ite	cc
 8009108:	2301      	movcc	r3, #1
 800910a:	2300      	movcs	r3, #0
 800910c:	b2db      	uxtb	r3, r3
}
 800910e:	4618      	mov	r0, r3
 8009110:	bd80      	pop	{r7, pc}
 8009112:	bf00      	nop
 8009114:	20000758 	.word	0x20000758
 8009118:	2000075c 	.word	0x2000075c

0800911c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af02      	add	r7, sp, #8
 8009122:	4603      	mov	r3, r0
 8009124:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8009126:	f107 020f 	add.w	r2, r7, #15
 800912a:	1df9      	adds	r1, r7, #7
 800912c:	2332      	movs	r3, #50	; 0x32
 800912e:	9300      	str	r3, [sp, #0]
 8009130:	2301      	movs	r3, #1
 8009132:	4804      	ldr	r0, [pc, #16]	; (8009144 <xchg_spi+0x28>)
 8009134:	f7fe fb39 	bl	80077aa <HAL_SPI_TransmitReceive>
    return rxDat;
 8009138:	7bfb      	ldrb	r3, [r7, #15]
}
 800913a:	4618      	mov	r0, r3
 800913c:	3710      	adds	r7, #16
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}
 8009142:	bf00      	nop
 8009144:	200004a0 	.word	0x200004a0

08009148 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
 8009150:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8009152:	2300      	movs	r3, #0
 8009154:	60fb      	str	r3, [r7, #12]
 8009156:	e00a      	b.n	800916e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8009158:	687a      	ldr	r2, [r7, #4]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	18d4      	adds	r4, r2, r3
 800915e:	20ff      	movs	r0, #255	; 0xff
 8009160:	f7ff ffdc 	bl	800911c <xchg_spi>
 8009164:	4603      	mov	r3, r0
 8009166:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	3301      	adds	r3, #1
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	429a      	cmp	r2, r3
 8009174:	d3f0      	bcc.n	8009158 <rcvr_spi_multi+0x10>
	}
}
 8009176:	bf00      	nop
 8009178:	bf00      	nop
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	bd90      	pop	{r4, r7, pc}

08009180 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b084      	sub	sp, #16
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
 800918e:	e009      	b.n	80091a4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	4413      	add	r3, r2
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	4618      	mov	r0, r3
 800919a:	f7ff ffbf 	bl	800911c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3301      	adds	r3, #1
 80091a2:	60fb      	str	r3, [r7, #12]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d3f1      	bcc.n	8009190 <xmit_spi_multi+0x10>
	}
}
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b086      	sub	sp, #24
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80091be:	f7fb f92d 	bl	800441c <HAL_GetTick>
 80091c2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80091c8:	20ff      	movs	r0, #255	; 0xff
 80091ca:	f7ff ffa7 	bl	800911c <xchg_spi>
 80091ce:	4603      	mov	r3, r0
 80091d0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80091d2:	7bfb      	ldrb	r3, [r7, #15]
 80091d4:	2bff      	cmp	r3, #255	; 0xff
 80091d6:	d007      	beq.n	80091e8 <wait_ready+0x32>
 80091d8:	f7fb f920 	bl	800441c <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	429a      	cmp	r2, r3
 80091e6:	d8ef      	bhi.n	80091c8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 80091e8:	7bfb      	ldrb	r3, [r7, #15]
 80091ea:	2bff      	cmp	r3, #255	; 0xff
 80091ec:	bf0c      	ite	eq
 80091ee:	2301      	moveq	r3, #1
 80091f0:	2300      	movne	r3, #0
 80091f2:	b2db      	uxtb	r3, r3
}
 80091f4:	4618      	mov	r0, r3
 80091f6:	3718      	adds	r7, #24
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8009200:	2201      	movs	r2, #1
 8009202:	2110      	movs	r1, #16
 8009204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009208:	f7fb fc0c 	bl	8004a24 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800920c:	20ff      	movs	r0, #255	; 0xff
 800920e:	f7ff ff85 	bl	800911c <xchg_spi>

}
 8009212:	bf00      	nop
 8009214:	bd80      	pop	{r7, pc}

08009216 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8009216:	b580      	push	{r7, lr}
 8009218:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800921a:	2200      	movs	r2, #0
 800921c:	2110      	movs	r1, #16
 800921e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009222:	f7fb fbff 	bl	8004a24 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8009226:	20ff      	movs	r0, #255	; 0xff
 8009228:	f7ff ff78 	bl	800911c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800922c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009230:	f7ff ffc1 	bl	80091b6 <wait_ready>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <spiselect+0x28>
 800923a:	2301      	movs	r3, #1
 800923c:	e002      	b.n	8009244 <spiselect+0x2e>

	despiselect();
 800923e:	f7ff ffdd 	bl	80091fc <despiselect>
	return 0;	/* Timeout */
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	bd80      	pop	{r7, pc}

08009248 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8009252:	20c8      	movs	r0, #200	; 0xc8
 8009254:	f7ff ff38 	bl	80090c8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8009258:	20ff      	movs	r0, #255	; 0xff
 800925a:	f7ff ff5f 	bl	800911c <xchg_spi>
 800925e:	4603      	mov	r3, r0
 8009260:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8009262:	7bfb      	ldrb	r3, [r7, #15]
 8009264:	2bff      	cmp	r3, #255	; 0xff
 8009266:	d104      	bne.n	8009272 <rcvr_datablock+0x2a>
 8009268:	f7ff ff42 	bl	80090f0 <SPI_Timer_Status>
 800926c:	4603      	mov	r3, r0
 800926e:	2b00      	cmp	r3, #0
 8009270:	d1f2      	bne.n	8009258 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8009272:	7bfb      	ldrb	r3, [r7, #15]
 8009274:	2bfe      	cmp	r3, #254	; 0xfe
 8009276:	d001      	beq.n	800927c <rcvr_datablock+0x34>
 8009278:	2300      	movs	r3, #0
 800927a:	e00a      	b.n	8009292 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ff62 	bl	8009148 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8009284:	20ff      	movs	r0, #255	; 0xff
 8009286:	f7ff ff49 	bl	800911c <xchg_spi>
 800928a:	20ff      	movs	r0, #255	; 0xff
 800928c:	f7ff ff46 	bl	800911c <xchg_spi>

	return 1;						/* Function succeeded */
 8009290:	2301      	movs	r3, #1
}
 8009292:	4618      	mov	r0, r3
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}

0800929a <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800929a:	b580      	push	{r7, lr}
 800929c:	b084      	sub	sp, #16
 800929e:	af00      	add	r7, sp, #0
 80092a0:	6078      	str	r0, [r7, #4]
 80092a2:	460b      	mov	r3, r1
 80092a4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80092a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092aa:	f7ff ff84 	bl	80091b6 <wait_ready>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <xmit_datablock+0x1e>
 80092b4:	2300      	movs	r3, #0
 80092b6:	e01e      	b.n	80092f6 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80092b8:	78fb      	ldrb	r3, [r7, #3]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f7ff ff2e 	bl	800911c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	2bfd      	cmp	r3, #253	; 0xfd
 80092c4:	d016      	beq.n	80092f4 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80092c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f7ff ff58 	bl	8009180 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80092d0:	20ff      	movs	r0, #255	; 0xff
 80092d2:	f7ff ff23 	bl	800911c <xchg_spi>
 80092d6:	20ff      	movs	r0, #255	; 0xff
 80092d8:	f7ff ff20 	bl	800911c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 80092dc:	20ff      	movs	r0, #255	; 0xff
 80092de:	f7ff ff1d 	bl	800911c <xchg_spi>
 80092e2:	4603      	mov	r3, r0
 80092e4:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 80092e6:	7bfb      	ldrb	r3, [r7, #15]
 80092e8:	f003 031f 	and.w	r3, r3, #31
 80092ec:	2b05      	cmp	r3, #5
 80092ee:	d001      	beq.n	80092f4 <xmit_datablock+0x5a>
 80092f0:	2300      	movs	r3, #0
 80092f2:	e000      	b.n	80092f6 <xmit_datablock+0x5c>
	}
	return 1;
 80092f4:	2301      	movs	r3, #1
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	4603      	mov	r3, r0
 8009306:	6039      	str	r1, [r7, #0]
 8009308:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800930a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	da0e      	bge.n	8009330 <send_cmd+0x32>
		cmd &= 0x7F;
 8009312:	79fb      	ldrb	r3, [r7, #7]
 8009314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009318:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800931a:	2100      	movs	r1, #0
 800931c:	2037      	movs	r0, #55	; 0x37
 800931e:	f7ff ffee 	bl	80092fe <send_cmd>
 8009322:	4603      	mov	r3, r0
 8009324:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8009326:	7bbb      	ldrb	r3, [r7, #14]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d901      	bls.n	8009330 <send_cmd+0x32>
 800932c:	7bbb      	ldrb	r3, [r7, #14]
 800932e:	e051      	b.n	80093d4 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b0c      	cmp	r3, #12
 8009334:	d008      	beq.n	8009348 <send_cmd+0x4a>
		despiselect();
 8009336:	f7ff ff61 	bl	80091fc <despiselect>
		if (!spiselect()) return 0xFF;
 800933a:	f7ff ff6c 	bl	8009216 <spiselect>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d101      	bne.n	8009348 <send_cmd+0x4a>
 8009344:	23ff      	movs	r3, #255	; 0xff
 8009346:	e045      	b.n	80093d4 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800934e:	b2db      	uxtb	r3, r3
 8009350:	4618      	mov	r0, r3
 8009352:	f7ff fee3 	bl	800911c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	0e1b      	lsrs	r3, r3, #24
 800935a:	b2db      	uxtb	r3, r3
 800935c:	4618      	mov	r0, r3
 800935e:	f7ff fedd 	bl	800911c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	0c1b      	lsrs	r3, r3, #16
 8009366:	b2db      	uxtb	r3, r3
 8009368:	4618      	mov	r0, r3
 800936a:	f7ff fed7 	bl	800911c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	0a1b      	lsrs	r3, r3, #8
 8009372:	b2db      	uxtb	r3, r3
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fed1 	bl	800911c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff fecc 	bl	800911c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <send_cmd+0x94>
 800938e:	2395      	movs	r3, #149	; 0x95
 8009390:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8009392:	79fb      	ldrb	r3, [r7, #7]
 8009394:	2b08      	cmp	r3, #8
 8009396:	d101      	bne.n	800939c <send_cmd+0x9e>
 8009398:	2387      	movs	r3, #135	; 0x87
 800939a:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800939c:	7bfb      	ldrb	r3, [r7, #15]
 800939e:	4618      	mov	r0, r3
 80093a0:	f7ff febc 	bl	800911c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b0c      	cmp	r3, #12
 80093a8:	d102      	bne.n	80093b0 <send_cmd+0xb2>
 80093aa:	20ff      	movs	r0, #255	; 0xff
 80093ac:	f7ff feb6 	bl	800911c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80093b0:	230a      	movs	r3, #10
 80093b2:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80093b4:	20ff      	movs	r0, #255	; 0xff
 80093b6:	f7ff feb1 	bl	800911c <xchg_spi>
 80093ba:	4603      	mov	r3, r0
 80093bc:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80093be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	da05      	bge.n	80093d2 <send_cmd+0xd4>
 80093c6:	7bfb      	ldrb	r3, [r7, #15]
 80093c8:	3b01      	subs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
 80093cc:	7bfb      	ldrb	r3, [r7, #15]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1f0      	bne.n	80093b4 <send_cmd+0xb6>

	return res;							/* Return received response */
 80093d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3710      	adds	r7, #16
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 80093dc:	b590      	push	{r4, r7, lr}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	4603      	mov	r3, r0
 80093e4:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 80093e6:	79fb      	ldrb	r3, [r7, #7]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d001      	beq.n	80093f0 <USER_SPI_initialize+0x14>
 80093ec:	2301      	movs	r3, #1
 80093ee:	e0d4      	b.n	800959a <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 80093f0:	4b6c      	ldr	r3, [pc, #432]	; (80095a4 <USER_SPI_initialize+0x1c8>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b2db      	uxtb	r3, r3
 80093f6:	f003 0302 	and.w	r3, r3, #2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <USER_SPI_initialize+0x2a>
 80093fe:	4b69      	ldr	r3, [pc, #420]	; (80095a4 <USER_SPI_initialize+0x1c8>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	b2db      	uxtb	r3, r3
 8009404:	e0c9      	b.n	800959a <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8009406:	4b68      	ldr	r3, [pc, #416]	; (80095a8 <USER_SPI_initialize+0x1cc>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009410:	4b65      	ldr	r3, [pc, #404]	; (80095a8 <USER_SPI_initialize+0x1cc>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f042 0218 	orr.w	r2, r2, #24
 8009418:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800941a:	230a      	movs	r3, #10
 800941c:	73fb      	strb	r3, [r7, #15]
 800941e:	e005      	b.n	800942c <USER_SPI_initialize+0x50>
 8009420:	20ff      	movs	r0, #255	; 0xff
 8009422:	f7ff fe7b 	bl	800911c <xchg_spi>
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	3b01      	subs	r3, #1
 800942a:	73fb      	strb	r3, [r7, #15]
 800942c:	7bfb      	ldrb	r3, [r7, #15]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d1f6      	bne.n	8009420 <USER_SPI_initialize+0x44>

	ty = 0;
 8009432:	2300      	movs	r3, #0
 8009434:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8009436:	2100      	movs	r1, #0
 8009438:	2000      	movs	r0, #0
 800943a:	f7ff ff60 	bl	80092fe <send_cmd>
 800943e:	4603      	mov	r3, r0
 8009440:	2b01      	cmp	r3, #1
 8009442:	f040 808b 	bne.w	800955c <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8009446:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800944a:	f7ff fe3d 	bl	80090c8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800944e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009452:	2008      	movs	r0, #8
 8009454:	f7ff ff53 	bl	80092fe <send_cmd>
 8009458:	4603      	mov	r3, r0
 800945a:	2b01      	cmp	r3, #1
 800945c:	d151      	bne.n	8009502 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800945e:	2300      	movs	r3, #0
 8009460:	73fb      	strb	r3, [r7, #15]
 8009462:	e00d      	b.n	8009480 <USER_SPI_initialize+0xa4>
 8009464:	7bfc      	ldrb	r4, [r7, #15]
 8009466:	20ff      	movs	r0, #255	; 0xff
 8009468:	f7ff fe58 	bl	800911c <xchg_spi>
 800946c:	4603      	mov	r3, r0
 800946e:	461a      	mov	r2, r3
 8009470:	f104 0310 	add.w	r3, r4, #16
 8009474:	443b      	add	r3, r7
 8009476:	f803 2c08 	strb.w	r2, [r3, #-8]
 800947a:	7bfb      	ldrb	r3, [r7, #15]
 800947c:	3301      	adds	r3, #1
 800947e:	73fb      	strb	r3, [r7, #15]
 8009480:	7bfb      	ldrb	r3, [r7, #15]
 8009482:	2b03      	cmp	r3, #3
 8009484:	d9ee      	bls.n	8009464 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8009486:	7abb      	ldrb	r3, [r7, #10]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d167      	bne.n	800955c <USER_SPI_initialize+0x180>
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	2baa      	cmp	r3, #170	; 0xaa
 8009490:	d164      	bne.n	800955c <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8009492:	bf00      	nop
 8009494:	f7ff fe2c 	bl	80090f0 <SPI_Timer_Status>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d007      	beq.n	80094ae <USER_SPI_initialize+0xd2>
 800949e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80094a2:	20a9      	movs	r0, #169	; 0xa9
 80094a4:	f7ff ff2b 	bl	80092fe <send_cmd>
 80094a8:	4603      	mov	r3, r0
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1f2      	bne.n	8009494 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80094ae:	f7ff fe1f 	bl	80090f0 <SPI_Timer_Status>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d051      	beq.n	800955c <USER_SPI_initialize+0x180>
 80094b8:	2100      	movs	r1, #0
 80094ba:	203a      	movs	r0, #58	; 0x3a
 80094bc:	f7ff ff1f 	bl	80092fe <send_cmd>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d14a      	bne.n	800955c <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80094c6:	2300      	movs	r3, #0
 80094c8:	73fb      	strb	r3, [r7, #15]
 80094ca:	e00d      	b.n	80094e8 <USER_SPI_initialize+0x10c>
 80094cc:	7bfc      	ldrb	r4, [r7, #15]
 80094ce:	20ff      	movs	r0, #255	; 0xff
 80094d0:	f7ff fe24 	bl	800911c <xchg_spi>
 80094d4:	4603      	mov	r3, r0
 80094d6:	461a      	mov	r2, r3
 80094d8:	f104 0310 	add.w	r3, r4, #16
 80094dc:	443b      	add	r3, r7
 80094de:	f803 2c08 	strb.w	r2, [r3, #-8]
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	3301      	adds	r3, #1
 80094e6:	73fb      	strb	r3, [r7, #15]
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b03      	cmp	r3, #3
 80094ec:	d9ee      	bls.n	80094cc <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 80094ee:	7a3b      	ldrb	r3, [r7, #8]
 80094f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d001      	beq.n	80094fc <USER_SPI_initialize+0x120>
 80094f8:	230c      	movs	r3, #12
 80094fa:	e000      	b.n	80094fe <USER_SPI_initialize+0x122>
 80094fc:	2304      	movs	r3, #4
 80094fe:	737b      	strb	r3, [r7, #13]
 8009500:	e02c      	b.n	800955c <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8009502:	2100      	movs	r1, #0
 8009504:	20a9      	movs	r0, #169	; 0xa9
 8009506:	f7ff fefa 	bl	80092fe <send_cmd>
 800950a:	4603      	mov	r3, r0
 800950c:	2b01      	cmp	r3, #1
 800950e:	d804      	bhi.n	800951a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8009510:	2302      	movs	r3, #2
 8009512:	737b      	strb	r3, [r7, #13]
 8009514:	23a9      	movs	r3, #169	; 0xa9
 8009516:	73bb      	strb	r3, [r7, #14]
 8009518:	e003      	b.n	8009522 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800951a:	2301      	movs	r3, #1
 800951c:	737b      	strb	r3, [r7, #13]
 800951e:	2301      	movs	r3, #1
 8009520:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8009522:	bf00      	nop
 8009524:	f7ff fde4 	bl	80090f0 <SPI_Timer_Status>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d007      	beq.n	800953e <USER_SPI_initialize+0x162>
 800952e:	7bbb      	ldrb	r3, [r7, #14]
 8009530:	2100      	movs	r1, #0
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fee3 	bl	80092fe <send_cmd>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1f2      	bne.n	8009524 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800953e:	f7ff fdd7 	bl	80090f0 <SPI_Timer_Status>
 8009542:	4603      	mov	r3, r0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d007      	beq.n	8009558 <USER_SPI_initialize+0x17c>
 8009548:	f44f 7100 	mov.w	r1, #512	; 0x200
 800954c:	2010      	movs	r0, #16
 800954e:	f7ff fed6 	bl	80092fe <send_cmd>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <USER_SPI_initialize+0x180>
				ty = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800955c:	4a13      	ldr	r2, [pc, #76]	; (80095ac <USER_SPI_initialize+0x1d0>)
 800955e:	7b7b      	ldrb	r3, [r7, #13]
 8009560:	7013      	strb	r3, [r2, #0]
	despiselect();
 8009562:	f7ff fe4b 	bl	80091fc <despiselect>

	if (ty) {			/* OK */
 8009566:	7b7b      	ldrb	r3, [r7, #13]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d010      	beq.n	800958e <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 800956c:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <USER_SPI_initialize+0x1cc>)
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b0d      	ldr	r3, [pc, #52]	; (80095a8 <USER_SPI_initialize+0x1cc>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 800957a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800957c:	4b09      	ldr	r3, [pc, #36]	; (80095a4 <USER_SPI_initialize+0x1c8>)
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	b2db      	uxtb	r3, r3
 8009582:	f023 0301 	bic.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	4b06      	ldr	r3, [pc, #24]	; (80095a4 <USER_SPI_initialize+0x1c8>)
 800958a:	701a      	strb	r2, [r3, #0]
 800958c:	e002      	b.n	8009594 <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <USER_SPI_initialize+0x1c8>)
 8009590:	2201      	movs	r2, #1
 8009592:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8009594:	4b03      	ldr	r3, [pc, #12]	; (80095a4 <USER_SPI_initialize+0x1c8>)
 8009596:	781b      	ldrb	r3, [r3, #0]
 8009598:	b2db      	uxtb	r3, r3
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd90      	pop	{r4, r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20000224 	.word	0x20000224
 80095a8:	200004a0 	.word	0x200004a0
 80095ac:	20000754 	.word	0x20000754

080095b0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <USER_SPI_status+0x14>
 80095c0:	2301      	movs	r3, #1
 80095c2:	e002      	b.n	80095ca <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 80095c4:	4b04      	ldr	r3, [pc, #16]	; (80095d8 <USER_SPI_status+0x28>)
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	b2db      	uxtb	r3, r3
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	370c      	adds	r7, #12
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	20000224 	.word	0x20000224

080095dc <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60b9      	str	r1, [r7, #8]
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	4603      	mov	r3, r0
 80095ea:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80095ec:	7bfb      	ldrb	r3, [r7, #15]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d102      	bne.n	80095f8 <USER_SPI_read+0x1c>
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d101      	bne.n	80095fc <USER_SPI_read+0x20>
 80095f8:	2304      	movs	r3, #4
 80095fa:	e04d      	b.n	8009698 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80095fc:	4b28      	ldr	r3, [pc, #160]	; (80096a0 <USER_SPI_read+0xc4>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <USER_SPI_read+0x32>
 800960a:	2303      	movs	r3, #3
 800960c:	e044      	b.n	8009698 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800960e:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <USER_SPI_read+0xc8>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	f003 0308 	and.w	r3, r3, #8
 8009616:	2b00      	cmp	r3, #0
 8009618:	d102      	bne.n	8009620 <USER_SPI_read+0x44>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	025b      	lsls	r3, r3, #9
 800961e:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d111      	bne.n	800964a <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8009626:	6879      	ldr	r1, [r7, #4]
 8009628:	2011      	movs	r0, #17
 800962a:	f7ff fe68 	bl	80092fe <send_cmd>
 800962e:	4603      	mov	r3, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	d129      	bne.n	8009688 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8009634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009638:	68b8      	ldr	r0, [r7, #8]
 800963a:	f7ff fe05 	bl	8009248 <rcvr_datablock>
 800963e:	4603      	mov	r3, r0
 8009640:	2b00      	cmp	r3, #0
 8009642:	d021      	beq.n	8009688 <USER_SPI_read+0xac>
			count = 0;
 8009644:	2300      	movs	r3, #0
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	e01e      	b.n	8009688 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800964a:	6879      	ldr	r1, [r7, #4]
 800964c:	2012      	movs	r0, #18
 800964e:	f7ff fe56 	bl	80092fe <send_cmd>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d117      	bne.n	8009688 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8009658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800965c:	68b8      	ldr	r0, [r7, #8]
 800965e:	f7ff fdf3 	bl	8009248 <rcvr_datablock>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00a      	beq.n	800967e <USER_SPI_read+0xa2>
				buff += 512;
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800966e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	3b01      	subs	r3, #1
 8009674:	603b      	str	r3, [r7, #0]
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1ed      	bne.n	8009658 <USER_SPI_read+0x7c>
 800967c:	e000      	b.n	8009680 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800967e:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8009680:	2100      	movs	r1, #0
 8009682:	200c      	movs	r0, #12
 8009684:	f7ff fe3b 	bl	80092fe <send_cmd>
		}
	}
	despiselect();
 8009688:	f7ff fdb8 	bl	80091fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	bf14      	ite	ne
 8009692:	2301      	movne	r3, #1
 8009694:	2300      	moveq	r3, #0
 8009696:	b2db      	uxtb	r3, r3
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	20000224 	.word	0x20000224
 80096a4:	20000754 	.word	0x20000754

080096a8 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b084      	sub	sp, #16
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
 80096b2:	603b      	str	r3, [r7, #0]
 80096b4:	4603      	mov	r3, r0
 80096b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 80096b8:	7bfb      	ldrb	r3, [r7, #15]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d102      	bne.n	80096c4 <USER_SPI_write+0x1c>
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d101      	bne.n	80096c8 <USER_SPI_write+0x20>
 80096c4:	2304      	movs	r3, #4
 80096c6:	e063      	b.n	8009790 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 80096c8:	4b33      	ldr	r3, [pc, #204]	; (8009798 <USER_SPI_write+0xf0>)
 80096ca:	781b      	ldrb	r3, [r3, #0]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	f003 0301 	and.w	r3, r3, #1
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <USER_SPI_write+0x32>
 80096d6:	2303      	movs	r3, #3
 80096d8:	e05a      	b.n	8009790 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 80096da:	4b2f      	ldr	r3, [pc, #188]	; (8009798 <USER_SPI_write+0xf0>)
 80096dc:	781b      	ldrb	r3, [r3, #0]
 80096de:	b2db      	uxtb	r3, r3
 80096e0:	f003 0304 	and.w	r3, r3, #4
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <USER_SPI_write+0x44>
 80096e8:	2302      	movs	r3, #2
 80096ea:	e051      	b.n	8009790 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 80096ec:	4b2b      	ldr	r3, [pc, #172]	; (800979c <USER_SPI_write+0xf4>)
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d102      	bne.n	80096fe <USER_SPI_write+0x56>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	025b      	lsls	r3, r3, #9
 80096fc:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	2b01      	cmp	r3, #1
 8009702:	d110      	bne.n	8009726 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8009704:	6879      	ldr	r1, [r7, #4]
 8009706:	2018      	movs	r0, #24
 8009708:	f7ff fdf9 	bl	80092fe <send_cmd>
 800970c:	4603      	mov	r3, r0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d136      	bne.n	8009780 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8009712:	21fe      	movs	r1, #254	; 0xfe
 8009714:	68b8      	ldr	r0, [r7, #8]
 8009716:	f7ff fdc0 	bl	800929a <xmit_datablock>
 800971a:	4603      	mov	r3, r0
 800971c:	2b00      	cmp	r3, #0
 800971e:	d02f      	beq.n	8009780 <USER_SPI_write+0xd8>
			count = 0;
 8009720:	2300      	movs	r3, #0
 8009722:	603b      	str	r3, [r7, #0]
 8009724:	e02c      	b.n	8009780 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8009726:	4b1d      	ldr	r3, [pc, #116]	; (800979c <USER_SPI_write+0xf4>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	f003 0306 	and.w	r3, r3, #6
 800972e:	2b00      	cmp	r3, #0
 8009730:	d003      	beq.n	800973a <USER_SPI_write+0x92>
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	2097      	movs	r0, #151	; 0x97
 8009736:	f7ff fde2 	bl	80092fe <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800973a:	6879      	ldr	r1, [r7, #4]
 800973c:	2019      	movs	r0, #25
 800973e:	f7ff fdde 	bl	80092fe <send_cmd>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d11b      	bne.n	8009780 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8009748:	21fc      	movs	r1, #252	; 0xfc
 800974a:	68b8      	ldr	r0, [r7, #8]
 800974c:	f7ff fda5 	bl	800929a <xmit_datablock>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <USER_SPI_write+0xc4>
				buff += 512;
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800975c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	3b01      	subs	r3, #1
 8009762:	603b      	str	r3, [r7, #0]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d1ee      	bne.n	8009748 <USER_SPI_write+0xa0>
 800976a:	e000      	b.n	800976e <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800976c:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800976e:	21fd      	movs	r1, #253	; 0xfd
 8009770:	2000      	movs	r0, #0
 8009772:	f7ff fd92 	bl	800929a <xmit_datablock>
 8009776:	4603      	mov	r3, r0
 8009778:	2b00      	cmp	r3, #0
 800977a:	d101      	bne.n	8009780 <USER_SPI_write+0xd8>
 800977c:	2301      	movs	r3, #1
 800977e:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8009780:	f7ff fd3c 	bl	80091fc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bf14      	ite	ne
 800978a:	2301      	movne	r3, #1
 800978c:	2300      	moveq	r3, #0
 800978e:	b2db      	uxtb	r3, r3
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000224 	.word	0x20000224
 800979c:	20000754 	.word	0x20000754

080097a0 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08c      	sub	sp, #48	; 0x30
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	603a      	str	r2, [r7, #0]
 80097aa:	71fb      	strb	r3, [r7, #7]
 80097ac:	460b      	mov	r3, r1
 80097ae:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 80097b0:	79fb      	ldrb	r3, [r7, #7]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d001      	beq.n	80097ba <USER_SPI_ioctl+0x1a>
 80097b6:	2304      	movs	r3, #4
 80097b8:	e15a      	b.n	8009a70 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 80097ba:	4baf      	ldr	r3, [pc, #700]	; (8009a78 <USER_SPI_ioctl+0x2d8>)
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	b2db      	uxtb	r3, r3
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d001      	beq.n	80097cc <USER_SPI_ioctl+0x2c>
 80097c8:	2303      	movs	r3, #3
 80097ca:	e151      	b.n	8009a70 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80097cc:	2301      	movs	r3, #1
 80097ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80097d2:	79bb      	ldrb	r3, [r7, #6]
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	f200 8136 	bhi.w	8009a46 <USER_SPI_ioctl+0x2a6>
 80097da:	a201      	add	r2, pc, #4	; (adr r2, 80097e0 <USER_SPI_ioctl+0x40>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f5 	.word	0x080097f5
 80097e4:	08009809 	.word	0x08009809
 80097e8:	08009a47 	.word	0x08009a47
 80097ec:	080098b5 	.word	0x080098b5
 80097f0:	080099ab 	.word	0x080099ab
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80097f4:	f7ff fd0f 	bl	8009216 <spiselect>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8127 	beq.w	8009a4e <USER_SPI_ioctl+0x2ae>
 8009800:	2300      	movs	r3, #0
 8009802:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8009806:	e122      	b.n	8009a4e <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8009808:	2100      	movs	r1, #0
 800980a:	2009      	movs	r0, #9
 800980c:	f7ff fd77 	bl	80092fe <send_cmd>
 8009810:	4603      	mov	r3, r0
 8009812:	2b00      	cmp	r3, #0
 8009814:	f040 811d 	bne.w	8009a52 <USER_SPI_ioctl+0x2b2>
 8009818:	f107 030c 	add.w	r3, r7, #12
 800981c:	2110      	movs	r1, #16
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fd12 	bl	8009248 <rcvr_datablock>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	f000 8113 	beq.w	8009a52 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800982c:	7b3b      	ldrb	r3, [r7, #12]
 800982e:	099b      	lsrs	r3, r3, #6
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b01      	cmp	r3, #1
 8009834:	d111      	bne.n	800985a <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8009836:	7d7b      	ldrb	r3, [r7, #21]
 8009838:	461a      	mov	r2, r3
 800983a:	7d3b      	ldrb	r3, [r7, #20]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	4413      	add	r3, r2
 8009840:	461a      	mov	r2, r3
 8009842:	7cfb      	ldrb	r3, [r7, #19]
 8009844:	041b      	lsls	r3, r3, #16
 8009846:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800984a:	4413      	add	r3, r2
 800984c:	3301      	adds	r3, #1
 800984e:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	029a      	lsls	r2, r3, #10
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	601a      	str	r2, [r3, #0]
 8009858:	e028      	b.n	80098ac <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800985a:	7c7b      	ldrb	r3, [r7, #17]
 800985c:	f003 030f 	and.w	r3, r3, #15
 8009860:	b2da      	uxtb	r2, r3
 8009862:	7dbb      	ldrb	r3, [r7, #22]
 8009864:	09db      	lsrs	r3, r3, #7
 8009866:	b2db      	uxtb	r3, r3
 8009868:	4413      	add	r3, r2
 800986a:	b2da      	uxtb	r2, r3
 800986c:	7d7b      	ldrb	r3, [r7, #21]
 800986e:	005b      	lsls	r3, r3, #1
 8009870:	b2db      	uxtb	r3, r3
 8009872:	f003 0306 	and.w	r3, r3, #6
 8009876:	b2db      	uxtb	r3, r3
 8009878:	4413      	add	r3, r2
 800987a:	b2db      	uxtb	r3, r3
 800987c:	3302      	adds	r3, #2
 800987e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8009882:	7d3b      	ldrb	r3, [r7, #20]
 8009884:	099b      	lsrs	r3, r3, #6
 8009886:	b2db      	uxtb	r3, r3
 8009888:	461a      	mov	r2, r3
 800988a:	7cfb      	ldrb	r3, [r7, #19]
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	441a      	add	r2, r3
 8009890:	7cbb      	ldrb	r3, [r7, #18]
 8009892:	029b      	lsls	r3, r3, #10
 8009894:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009898:	4413      	add	r3, r2
 800989a:	3301      	adds	r3, #1
 800989c:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800989e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098a2:	3b09      	subs	r3, #9
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	409a      	lsls	r2, r3
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 80098ac:	2300      	movs	r3, #0
 80098ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80098b2:	e0ce      	b.n	8009a52 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 80098b4:	4b71      	ldr	r3, [pc, #452]	; (8009a7c <USER_SPI_ioctl+0x2dc>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	f003 0304 	and.w	r3, r3, #4
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d031      	beq.n	8009924 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 80098c0:	2100      	movs	r1, #0
 80098c2:	208d      	movs	r0, #141	; 0x8d
 80098c4:	f7ff fd1b 	bl	80092fe <send_cmd>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f040 80c3 	bne.w	8009a56 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80098d0:	20ff      	movs	r0, #255	; 0xff
 80098d2:	f7ff fc23 	bl	800911c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80098d6:	f107 030c 	add.w	r3, r7, #12
 80098da:	2110      	movs	r1, #16
 80098dc:	4618      	mov	r0, r3
 80098de:	f7ff fcb3 	bl	8009248 <rcvr_datablock>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 80b6 	beq.w	8009a56 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80098ea:	2330      	movs	r3, #48	; 0x30
 80098ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80098f0:	e007      	b.n	8009902 <USER_SPI_ioctl+0x162>
 80098f2:	20ff      	movs	r0, #255	; 0xff
 80098f4:	f7ff fc12 	bl	800911c <xchg_spi>
 80098f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80098fc:	3b01      	subs	r3, #1
 80098fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8009902:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f3      	bne.n	80098f2 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800990a:	7dbb      	ldrb	r3, [r7, #22]
 800990c:	091b      	lsrs	r3, r3, #4
 800990e:	b2db      	uxtb	r3, r3
 8009910:	461a      	mov	r2, r3
 8009912:	2310      	movs	r3, #16
 8009914:	fa03 f202 	lsl.w	r2, r3, r2
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8009922:	e098      	b.n	8009a56 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8009924:	2100      	movs	r1, #0
 8009926:	2009      	movs	r0, #9
 8009928:	f7ff fce9 	bl	80092fe <send_cmd>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	f040 8091 	bne.w	8009a56 <USER_SPI_ioctl+0x2b6>
 8009934:	f107 030c 	add.w	r3, r7, #12
 8009938:	2110      	movs	r1, #16
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fc84 	bl	8009248 <rcvr_datablock>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8087 	beq.w	8009a56 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8009948:	4b4c      	ldr	r3, [pc, #304]	; (8009a7c <USER_SPI_ioctl+0x2dc>)
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	f003 0302 	and.w	r3, r3, #2
 8009950:	2b00      	cmp	r3, #0
 8009952:	d012      	beq.n	800997a <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8009954:	7dbb      	ldrb	r3, [r7, #22]
 8009956:	005b      	lsls	r3, r3, #1
 8009958:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800995c:	7dfa      	ldrb	r2, [r7, #23]
 800995e:	09d2      	lsrs	r2, r2, #7
 8009960:	b2d2      	uxtb	r2, r2
 8009962:	4413      	add	r3, r2
 8009964:	1c5a      	adds	r2, r3, #1
 8009966:	7e7b      	ldrb	r3, [r7, #25]
 8009968:	099b      	lsrs	r3, r3, #6
 800996a:	b2db      	uxtb	r3, r3
 800996c:	3b01      	subs	r3, #1
 800996e:	fa02 f303 	lsl.w	r3, r2, r3
 8009972:	461a      	mov	r2, r3
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	601a      	str	r2, [r3, #0]
 8009978:	e013      	b.n	80099a2 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800997a:	7dbb      	ldrb	r3, [r7, #22]
 800997c:	109b      	asrs	r3, r3, #2
 800997e:	b29b      	uxth	r3, r3
 8009980:	f003 031f 	and.w	r3, r3, #31
 8009984:	3301      	adds	r3, #1
 8009986:	7dfa      	ldrb	r2, [r7, #23]
 8009988:	00d2      	lsls	r2, r2, #3
 800998a:	f002 0218 	and.w	r2, r2, #24
 800998e:	7df9      	ldrb	r1, [r7, #23]
 8009990:	0949      	lsrs	r1, r1, #5
 8009992:	b2c9      	uxtb	r1, r1
 8009994:	440a      	add	r2, r1
 8009996:	3201      	adds	r2, #1
 8009998:	fb02 f303 	mul.w	r3, r2, r3
 800999c:	461a      	mov	r2, r3
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80099a8:	e055      	b.n	8009a56 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80099aa:	4b34      	ldr	r3, [pc, #208]	; (8009a7c <USER_SPI_ioctl+0x2dc>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	f003 0306 	and.w	r3, r3, #6
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d051      	beq.n	8009a5a <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80099b6:	f107 020c 	add.w	r2, r7, #12
 80099ba:	79fb      	ldrb	r3, [r7, #7]
 80099bc:	210b      	movs	r1, #11
 80099be:	4618      	mov	r0, r3
 80099c0:	f7ff feee 	bl	80097a0 <USER_SPI_ioctl>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d149      	bne.n	8009a5e <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80099ca:	7b3b      	ldrb	r3, [r7, #12]
 80099cc:	099b      	lsrs	r3, r3, #6
 80099ce:	b2db      	uxtb	r3, r3
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d104      	bne.n	80099de <USER_SPI_ioctl+0x23e>
 80099d4:	7dbb      	ldrb	r3, [r7, #22]
 80099d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d041      	beq.n	8009a62 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	623b      	str	r3, [r7, #32]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	685b      	ldr	r3, [r3, #4]
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80099ee:	4b23      	ldr	r3, [pc, #140]	; (8009a7c <USER_SPI_ioctl+0x2dc>)
 80099f0:	781b      	ldrb	r3, [r3, #0]
 80099f2:	f003 0308 	and.w	r3, r3, #8
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d105      	bne.n	8009a06 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	025b      	lsls	r3, r3, #9
 80099fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a02:	025b      	lsls	r3, r3, #9
 8009a04:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8009a06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a08:	2020      	movs	r0, #32
 8009a0a:	f7ff fc78 	bl	80092fe <send_cmd>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d128      	bne.n	8009a66 <USER_SPI_ioctl+0x2c6>
 8009a14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a16:	2021      	movs	r0, #33	; 0x21
 8009a18:	f7ff fc71 	bl	80092fe <send_cmd>
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d121      	bne.n	8009a66 <USER_SPI_ioctl+0x2c6>
 8009a22:	2100      	movs	r1, #0
 8009a24:	2026      	movs	r0, #38	; 0x26
 8009a26:	f7ff fc6a 	bl	80092fe <send_cmd>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d11a      	bne.n	8009a66 <USER_SPI_ioctl+0x2c6>
 8009a30:	f247 5030 	movw	r0, #30000	; 0x7530
 8009a34:	f7ff fbbf 	bl	80091b6 <wait_ready>
 8009a38:	4603      	mov	r3, r0
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d013      	beq.n	8009a66 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8009a3e:	2300      	movs	r3, #0
 8009a40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8009a44:	e00f      	b.n	8009a66 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8009a46:	2304      	movs	r3, #4
 8009a48:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009a4c:	e00c      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		break;
 8009a4e:	bf00      	nop
 8009a50:	e00a      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		break;
 8009a52:	bf00      	nop
 8009a54:	e008      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		break;
 8009a56:	bf00      	nop
 8009a58:	e006      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8009a5a:	bf00      	nop
 8009a5c:	e004      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8009a5e:	bf00      	nop
 8009a60:	e002      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8009a62:	bf00      	nop
 8009a64:	e000      	b.n	8009a68 <USER_SPI_ioctl+0x2c8>
		break;
 8009a66:	bf00      	nop
	}

	despiselect();
 8009a68:	f7ff fbc8 	bl	80091fc <despiselect>

	return res;
 8009a6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3730      	adds	r7, #48	; 0x30
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	20000224 	.word	0x20000224
 8009a7c:	20000754 	.word	0x20000754

08009a80 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b084      	sub	sp, #16
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009a8a:	79fb      	ldrb	r3, [r7, #7]
 8009a8c:	4a08      	ldr	r2, [pc, #32]	; (8009ab0 <disk_status+0x30>)
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	79fa      	ldrb	r2, [r7, #7]
 8009a98:	4905      	ldr	r1, [pc, #20]	; (8009ab0 <disk_status+0x30>)
 8009a9a:	440a      	add	r2, r1
 8009a9c:	7a12      	ldrb	r2, [r2, #8]
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	4798      	blx	r3
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	20000788 	.word	0x20000788

08009ab4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009ac2:	79fb      	ldrb	r3, [r7, #7]
 8009ac4:	4a0d      	ldr	r2, [pc, #52]	; (8009afc <disk_initialize+0x48>)
 8009ac6:	5cd3      	ldrb	r3, [r2, r3]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d111      	bne.n	8009af0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009acc:	79fb      	ldrb	r3, [r7, #7]
 8009ace:	4a0b      	ldr	r2, [pc, #44]	; (8009afc <disk_initialize+0x48>)
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009ad4:	79fb      	ldrb	r3, [r7, #7]
 8009ad6:	4a09      	ldr	r2, [pc, #36]	; (8009afc <disk_initialize+0x48>)
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	79fa      	ldrb	r2, [r7, #7]
 8009ae2:	4906      	ldr	r1, [pc, #24]	; (8009afc <disk_initialize+0x48>)
 8009ae4:	440a      	add	r2, r1
 8009ae6:	7a12      	ldrb	r2, [r2, #8]
 8009ae8:	4610      	mov	r0, r2
 8009aea:	4798      	blx	r3
 8009aec:	4603      	mov	r3, r0
 8009aee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}
 8009afa:	bf00      	nop
 8009afc:	20000788 	.word	0x20000788

08009b00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b00:	b590      	push	{r4, r7, lr}
 8009b02:	b087      	sub	sp, #28
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	603b      	str	r3, [r7, #0]
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	4a0a      	ldr	r2, [pc, #40]	; (8009b3c <disk_read+0x3c>)
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	4413      	add	r3, r2
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	689c      	ldr	r4, [r3, #8]
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	4a07      	ldr	r2, [pc, #28]	; (8009b3c <disk_read+0x3c>)
 8009b20:	4413      	add	r3, r2
 8009b22:	7a18      	ldrb	r0, [r3, #8]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	68b9      	ldr	r1, [r7, #8]
 8009b2a:	47a0      	blx	r4
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b30:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	371c      	adds	r7, #28
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd90      	pop	{r4, r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	20000788 	.word	0x20000788

08009b40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b40:	b590      	push	{r4, r7, lr}
 8009b42:	b087      	sub	sp, #28
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60b9      	str	r1, [r7, #8]
 8009b48:	607a      	str	r2, [r7, #4]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009b50:	7bfb      	ldrb	r3, [r7, #15]
 8009b52:	4a0a      	ldr	r2, [pc, #40]	; (8009b7c <disk_write+0x3c>)
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	68dc      	ldr	r4, [r3, #12]
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4a07      	ldr	r2, [pc, #28]	; (8009b7c <disk_write+0x3c>)
 8009b60:	4413      	add	r3, r2
 8009b62:	7a18      	ldrb	r0, [r3, #8]
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	68b9      	ldr	r1, [r7, #8]
 8009b6a:	47a0      	blx	r4
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	371c      	adds	r7, #28
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd90      	pop	{r4, r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000788 	.word	0x20000788

08009b80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	4603      	mov	r3, r0
 8009b88:	603a      	str	r2, [r7, #0]
 8009b8a:	71fb      	strb	r3, [r7, #7]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	4a09      	ldr	r2, [pc, #36]	; (8009bb8 <disk_ioctl+0x38>)
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	685b      	ldr	r3, [r3, #4]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	79fa      	ldrb	r2, [r7, #7]
 8009b9e:	4906      	ldr	r1, [pc, #24]	; (8009bb8 <disk_ioctl+0x38>)
 8009ba0:	440a      	add	r2, r1
 8009ba2:	7a10      	ldrb	r0, [r2, #8]
 8009ba4:	79b9      	ldrb	r1, [r7, #6]
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4798      	blx	r3
 8009baa:	4603      	mov	r3, r0
 8009bac:	73fb      	strb	r3, [r7, #15]
  return res;
 8009bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	20000788 	.word	0x20000788

08009bbc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009bcc:	89fb      	ldrh	r3, [r7, #14]
 8009bce:	021b      	lsls	r3, r3, #8
 8009bd0:	b21a      	sxth	r2, r3
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	b21b      	sxth	r3, r3
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	b21b      	sxth	r3, r3
 8009bdc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009bde:	89fb      	ldrh	r3, [r7, #14]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	3303      	adds	r3, #3
 8009bf8:	781b      	ldrb	r3, [r3, #0]
 8009bfa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	021b      	lsls	r3, r3, #8
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	3202      	adds	r2, #2
 8009c04:	7812      	ldrb	r2, [r2, #0]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	021b      	lsls	r3, r3, #8
 8009c0e:	687a      	ldr	r2, [r7, #4]
 8009c10:	3201      	adds	r2, #1
 8009c12:	7812      	ldrb	r2, [r2, #0]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	021b      	lsls	r3, r3, #8
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	7812      	ldrb	r2, [r2, #0]
 8009c20:	4313      	orrs	r3, r2
 8009c22:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c24:	68fb      	ldr	r3, [r7, #12]
}
 8009c26:	4618      	mov	r0, r3
 8009c28:	3714      	adds	r7, #20
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009c32:	b480      	push	{r7}
 8009c34:	b083      	sub	sp, #12
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	6078      	str	r0, [r7, #4]
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	1c5a      	adds	r2, r3, #1
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	887a      	ldrh	r2, [r7, #2]
 8009c46:	b2d2      	uxtb	r2, r2
 8009c48:	701a      	strb	r2, [r3, #0]
 8009c4a:	887b      	ldrh	r3, [r7, #2]
 8009c4c:	0a1b      	lsrs	r3, r3, #8
 8009c4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	607a      	str	r2, [r7, #4]
 8009c56:	887a      	ldrh	r2, [r7, #2]
 8009c58:	b2d2      	uxtb	r2, r2
 8009c5a:	701a      	strb	r2, [r3, #0]
}
 8009c5c:	bf00      	nop
 8009c5e:	370c      	adds	r7, #12
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr

08009c68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	1c5a      	adds	r2, r3, #1
 8009c76:	607a      	str	r2, [r7, #4]
 8009c78:	683a      	ldr	r2, [r7, #0]
 8009c7a:	b2d2      	uxtb	r2, r2
 8009c7c:	701a      	strb	r2, [r3, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	0a1b      	lsrs	r3, r3, #8
 8009c82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	1c5a      	adds	r2, r3, #1
 8009c88:	607a      	str	r2, [r7, #4]
 8009c8a:	683a      	ldr	r2, [r7, #0]
 8009c8c:	b2d2      	uxtb	r2, r2
 8009c8e:	701a      	strb	r2, [r3, #0]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	0a1b      	lsrs	r3, r3, #8
 8009c94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	607a      	str	r2, [r7, #4]
 8009c9c:	683a      	ldr	r2, [r7, #0]
 8009c9e:	b2d2      	uxtb	r2, r2
 8009ca0:	701a      	strb	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	0a1b      	lsrs	r3, r3, #8
 8009ca6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	1c5a      	adds	r2, r3, #1
 8009cac:	607a      	str	r2, [r7, #4]
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	b2d2      	uxtb	r2, r2
 8009cb2:	701a      	strb	r2, [r3, #0]
}
 8009cb4:	bf00      	nop
 8009cb6:	370c      	adds	r7, #12
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr

08009cc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009cc0:	b480      	push	{r7}
 8009cc2:	b087      	sub	sp, #28
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	60f8      	str	r0, [r7, #12]
 8009cc8:	60b9      	str	r1, [r7, #8]
 8009cca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00d      	beq.n	8009cf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009cda:	693a      	ldr	r2, [r7, #16]
 8009cdc:	1c53      	adds	r3, r2, #1
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	1c59      	adds	r1, r3, #1
 8009ce4:	6179      	str	r1, [r7, #20]
 8009ce6:	7812      	ldrb	r2, [r2, #0]
 8009ce8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	3b01      	subs	r3, #1
 8009cee:	607b      	str	r3, [r7, #4]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1f1      	bne.n	8009cda <mem_cpy+0x1a>
	}
}
 8009cf6:	bf00      	nop
 8009cf8:	371c      	adds	r7, #28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d00:	4770      	bx	lr

08009d02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d02:	b480      	push	{r7}
 8009d04:	b087      	sub	sp, #28
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	60f8      	str	r0, [r7, #12]
 8009d0a:	60b9      	str	r1, [r7, #8]
 8009d0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	1c5a      	adds	r2, r3, #1
 8009d16:	617a      	str	r2, [r7, #20]
 8009d18:	68ba      	ldr	r2, [r7, #8]
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	607b      	str	r3, [r7, #4]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d1f3      	bne.n	8009d12 <mem_set+0x10>
}
 8009d2a:	bf00      	nop
 8009d2c:	bf00      	nop
 8009d2e:	371c      	adds	r7, #28
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009d38:	b480      	push	{r7}
 8009d3a:	b089      	sub	sp, #36	; 0x24
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60f8      	str	r0, [r7, #12]
 8009d40:	60b9      	str	r1, [r7, #8]
 8009d42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	61fb      	str	r3, [r7, #28]
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	1c5a      	adds	r2, r3, #1
 8009d54:	61fa      	str	r2, [r7, #28]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	4619      	mov	r1, r3
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	61ba      	str	r2, [r7, #24]
 8009d60:	781b      	ldrb	r3, [r3, #0]
 8009d62:	1acb      	subs	r3, r1, r3
 8009d64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	607b      	str	r3, [r7, #4]
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d002      	beq.n	8009d78 <mem_cmp+0x40>
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d0eb      	beq.n	8009d50 <mem_cmp+0x18>

	return r;
 8009d78:	697b      	ldr	r3, [r7, #20]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3724      	adds	r7, #36	; 0x24
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009d86:	b480      	push	{r7}
 8009d88:	b083      	sub	sp, #12
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
 8009d8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009d90:	e002      	b.n	8009d98 <chk_chr+0x12>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	3301      	adds	r3, #1
 8009d96:	607b      	str	r3, [r7, #4]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d005      	beq.n	8009dac <chk_chr+0x26>
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	781b      	ldrb	r3, [r3, #0]
 8009da4:	461a      	mov	r2, r3
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d1f2      	bne.n	8009d92 <chk_chr+0xc>
	return *str;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	781b      	ldrb	r3, [r3, #0]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
 8009dc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	60bb      	str	r3, [r7, #8]
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	e029      	b.n	8009e24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009dd0:	4a27      	ldr	r2, [pc, #156]	; (8009e70 <chk_lock+0xb4>)
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	011b      	lsls	r3, r3, #4
 8009dd6:	4413      	add	r3, r2
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d01d      	beq.n	8009e1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009dde:	4a24      	ldr	r2, [pc, #144]	; (8009e70 <chk_lock+0xb4>)
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	011b      	lsls	r3, r3, #4
 8009de4:	4413      	add	r3, r2
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d116      	bne.n	8009e1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009df0:	4a1f      	ldr	r2, [pc, #124]	; (8009e70 <chk_lock+0xb4>)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	011b      	lsls	r3, r3, #4
 8009df6:	4413      	add	r3, r2
 8009df8:	3304      	adds	r3, #4
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d10c      	bne.n	8009e1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e04:	4a1a      	ldr	r2, [pc, #104]	; (8009e70 <chk_lock+0xb4>)
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	011b      	lsls	r3, r3, #4
 8009e0a:	4413      	add	r3, r2
 8009e0c:	3308      	adds	r3, #8
 8009e0e:	681a      	ldr	r2, [r3, #0]
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e14:	429a      	cmp	r2, r3
 8009e16:	d102      	bne.n	8009e1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e18:	e007      	b.n	8009e2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	3301      	adds	r3, #1
 8009e22:	60fb      	str	r3, [r7, #12]
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2b01      	cmp	r3, #1
 8009e28:	d9d2      	bls.n	8009dd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d109      	bne.n	8009e44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d102      	bne.n	8009e3c <chk_lock+0x80>
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	2b02      	cmp	r3, #2
 8009e3a:	d101      	bne.n	8009e40 <chk_lock+0x84>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e010      	b.n	8009e62 <chk_lock+0xa6>
 8009e40:	2312      	movs	r3, #18
 8009e42:	e00e      	b.n	8009e62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d108      	bne.n	8009e5c <chk_lock+0xa0>
 8009e4a:	4a09      	ldr	r2, [pc, #36]	; (8009e70 <chk_lock+0xb4>)
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	4413      	add	r3, r2
 8009e52:	330c      	adds	r3, #12
 8009e54:	881b      	ldrh	r3, [r3, #0]
 8009e56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5a:	d101      	bne.n	8009e60 <chk_lock+0xa4>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	e000      	b.n	8009e62 <chk_lock+0xa6>
 8009e60:	2300      	movs	r3, #0
}
 8009e62:	4618      	mov	r0, r3
 8009e64:	3714      	adds	r7, #20
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	20000768 	.word	0x20000768

08009e74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	607b      	str	r3, [r7, #4]
 8009e7e:	e002      	b.n	8009e86 <enq_lock+0x12>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3301      	adds	r3, #1
 8009e84:	607b      	str	r3, [r7, #4]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d806      	bhi.n	8009e9a <enq_lock+0x26>
 8009e8c:	4a09      	ldr	r2, [pc, #36]	; (8009eb4 <enq_lock+0x40>)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	011b      	lsls	r3, r3, #4
 8009e92:	4413      	add	r3, r2
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d1f2      	bne.n	8009e80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	bf14      	ite	ne
 8009ea0:	2301      	movne	r3, #1
 8009ea2:	2300      	moveq	r3, #0
 8009ea4:	b2db      	uxtb	r3, r3
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop
 8009eb4:	20000768 	.word	0x20000768

08009eb8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b085      	sub	sp, #20
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	60fb      	str	r3, [r7, #12]
 8009ec6:	e01f      	b.n	8009f08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ec8:	4a41      	ldr	r2, [pc, #260]	; (8009fd0 <inc_lock+0x118>)
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	011b      	lsls	r3, r3, #4
 8009ece:	4413      	add	r3, r2
 8009ed0:	681a      	ldr	r2, [r3, #0]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	429a      	cmp	r2, r3
 8009ed8:	d113      	bne.n	8009f02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009eda:	4a3d      	ldr	r2, [pc, #244]	; (8009fd0 <inc_lock+0x118>)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	011b      	lsls	r3, r3, #4
 8009ee0:	4413      	add	r3, r2
 8009ee2:	3304      	adds	r3, #4
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d109      	bne.n	8009f02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009eee:	4a38      	ldr	r2, [pc, #224]	; (8009fd0 <inc_lock+0x118>)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	011b      	lsls	r3, r3, #4
 8009ef4:	4413      	add	r3, r2
 8009ef6:	3308      	adds	r3, #8
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d006      	beq.n	8009f10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	3301      	adds	r3, #1
 8009f06:	60fb      	str	r3, [r7, #12]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d9dc      	bls.n	8009ec8 <inc_lock+0x10>
 8009f0e:	e000      	b.n	8009f12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b02      	cmp	r3, #2
 8009f16:	d132      	bne.n	8009f7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
 8009f1c:	e002      	b.n	8009f24 <inc_lock+0x6c>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	3301      	adds	r3, #1
 8009f22:	60fb      	str	r3, [r7, #12]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d806      	bhi.n	8009f38 <inc_lock+0x80>
 8009f2a:	4a29      	ldr	r2, [pc, #164]	; (8009fd0 <inc_lock+0x118>)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	4413      	add	r3, r2
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d1f2      	bne.n	8009f1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d101      	bne.n	8009f42 <inc_lock+0x8a>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	e040      	b.n	8009fc4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	4922      	ldr	r1, [pc, #136]	; (8009fd0 <inc_lock+0x118>)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	011b      	lsls	r3, r3, #4
 8009f4c:	440b      	add	r3, r1
 8009f4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	689a      	ldr	r2, [r3, #8]
 8009f54:	491e      	ldr	r1, [pc, #120]	; (8009fd0 <inc_lock+0x118>)
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	011b      	lsls	r3, r3, #4
 8009f5a:	440b      	add	r3, r1
 8009f5c:	3304      	adds	r3, #4
 8009f5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	695a      	ldr	r2, [r3, #20]
 8009f64:	491a      	ldr	r1, [pc, #104]	; (8009fd0 <inc_lock+0x118>)
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	011b      	lsls	r3, r3, #4
 8009f6a:	440b      	add	r3, r1
 8009f6c:	3308      	adds	r3, #8
 8009f6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009f70:	4a17      	ldr	r2, [pc, #92]	; (8009fd0 <inc_lock+0x118>)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	011b      	lsls	r3, r3, #4
 8009f76:	4413      	add	r3, r2
 8009f78:	330c      	adds	r3, #12
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d009      	beq.n	8009f98 <inc_lock+0xe0>
 8009f84:	4a12      	ldr	r2, [pc, #72]	; (8009fd0 <inc_lock+0x118>)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	4413      	add	r3, r2
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	881b      	ldrh	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d001      	beq.n	8009f98 <inc_lock+0xe0>
 8009f94:	2300      	movs	r3, #0
 8009f96:	e015      	b.n	8009fc4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d108      	bne.n	8009fb0 <inc_lock+0xf8>
 8009f9e:	4a0c      	ldr	r2, [pc, #48]	; (8009fd0 <inc_lock+0x118>)
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	4413      	add	r3, r2
 8009fa6:	330c      	adds	r3, #12
 8009fa8:	881b      	ldrh	r3, [r3, #0]
 8009faa:	3301      	adds	r3, #1
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	e001      	b.n	8009fb4 <inc_lock+0xfc>
 8009fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009fb4:	4906      	ldr	r1, [pc, #24]	; (8009fd0 <inc_lock+0x118>)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	011b      	lsls	r3, r3, #4
 8009fba:	440b      	add	r3, r1
 8009fbc:	330c      	adds	r3, #12
 8009fbe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	3301      	adds	r3, #1
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3714      	adds	r7, #20
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fce:	4770      	bx	lr
 8009fd0:	20000768 	.word	0x20000768

08009fd4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	3b01      	subs	r3, #1
 8009fe0:	607b      	str	r3, [r7, #4]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d825      	bhi.n	800a034 <dec_lock+0x60>
		n = Files[i].ctr;
 8009fe8:	4a17      	ldr	r2, [pc, #92]	; (800a048 <dec_lock+0x74>)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	011b      	lsls	r3, r3, #4
 8009fee:	4413      	add	r3, r2
 8009ff0:	330c      	adds	r3, #12
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009ff6:	89fb      	ldrh	r3, [r7, #14]
 8009ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ffc:	d101      	bne.n	800a002 <dec_lock+0x2e>
 8009ffe:	2300      	movs	r3, #0
 800a000:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a002:	89fb      	ldrh	r3, [r7, #14]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d002      	beq.n	800a00e <dec_lock+0x3a>
 800a008:	89fb      	ldrh	r3, [r7, #14]
 800a00a:	3b01      	subs	r3, #1
 800a00c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a00e:	4a0e      	ldr	r2, [pc, #56]	; (800a048 <dec_lock+0x74>)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	4413      	add	r3, r2
 800a016:	330c      	adds	r3, #12
 800a018:	89fa      	ldrh	r2, [r7, #14]
 800a01a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a01c:	89fb      	ldrh	r3, [r7, #14]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d105      	bne.n	800a02e <dec_lock+0x5a>
 800a022:	4a09      	ldr	r2, [pc, #36]	; (800a048 <dec_lock+0x74>)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	4413      	add	r3, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	737b      	strb	r3, [r7, #13]
 800a032:	e001      	b.n	800a038 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a034:	2302      	movs	r3, #2
 800a036:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a038:	7b7b      	ldrb	r3, [r7, #13]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	20000768 	.word	0x20000768

0800a04c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a04c:	b480      	push	{r7}
 800a04e:	b085      	sub	sp, #20
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
 800a058:	e010      	b.n	800a07c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a05a:	4a0d      	ldr	r2, [pc, #52]	; (800a090 <clear_lock+0x44>)
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	011b      	lsls	r3, r3, #4
 800a060:	4413      	add	r3, r2
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	687a      	ldr	r2, [r7, #4]
 800a066:	429a      	cmp	r2, r3
 800a068:	d105      	bne.n	800a076 <clear_lock+0x2a>
 800a06a:	4a09      	ldr	r2, [pc, #36]	; (800a090 <clear_lock+0x44>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	011b      	lsls	r3, r3, #4
 800a070:	4413      	add	r3, r2
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3301      	adds	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2b01      	cmp	r3, #1
 800a080:	d9eb      	bls.n	800a05a <clear_lock+0xe>
	}
}
 800a082:	bf00      	nop
 800a084:	bf00      	nop
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	20000768 	.word	0x20000768

0800a094 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	78db      	ldrb	r3, [r3, #3]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d034      	beq.n	800a112 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	7858      	ldrb	r0, [r3, #1]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	697a      	ldr	r2, [r7, #20]
 800a0bc:	f7ff fd40 	bl	8009b40 <disk_write>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d002      	beq.n	800a0cc <sync_window+0x38>
			res = FR_DISK_ERR;
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	73fb      	strb	r3, [r7, #15]
 800a0ca:	e022      	b.n	800a112 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a1b      	ldr	r3, [r3, #32]
 800a0d6:	697a      	ldr	r2, [r7, #20]
 800a0d8:	1ad2      	subs	r2, r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	699b      	ldr	r3, [r3, #24]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d217      	bcs.n	800a112 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	789b      	ldrb	r3, [r3, #2]
 800a0e6:	613b      	str	r3, [r7, #16]
 800a0e8:	e010      	b.n	800a10c <sync_window+0x78>
					wsect += fs->fsize;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	697a      	ldr	r2, [r7, #20]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	7858      	ldrb	r0, [r3, #1]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a0fe:	2301      	movs	r3, #1
 800a100:	697a      	ldr	r2, [r7, #20]
 800a102:	f7ff fd1d 	bl	8009b40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	3b01      	subs	r3, #1
 800a10a:	613b      	str	r3, [r7, #16]
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d8eb      	bhi.n	800a0ea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a112:	7bfb      	ldrb	r3, [r7, #15]
}
 800a114:	4618      	mov	r0, r3
 800a116:	3718      	adds	r7, #24
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b084      	sub	sp, #16
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a12e:	683a      	ldr	r2, [r7, #0]
 800a130:	429a      	cmp	r2, r3
 800a132:	d01b      	beq.n	800a16c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff ffad 	bl	800a094 <sync_window>
 800a13a:	4603      	mov	r3, r0
 800a13c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a13e:	7bfb      	ldrb	r3, [r7, #15]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d113      	bne.n	800a16c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	7858      	ldrb	r0, [r3, #1]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a14e:	2301      	movs	r3, #1
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	f7ff fcd5 	bl	8009b00 <disk_read>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d004      	beq.n	800a166 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a15c:	f04f 33ff 	mov.w	r3, #4294967295
 800a160:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a162:	2301      	movs	r3, #1
 800a164:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800a16c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
	...

0800a178 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f7ff ff87 	bl	800a094 <sync_window>
 800a186:	4603      	mov	r3, r0
 800a188:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a18a:	7bfb      	ldrb	r3, [r7, #15]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d158      	bne.n	800a242 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	2b03      	cmp	r3, #3
 800a196:	d148      	bne.n	800a22a <sync_fs+0xb2>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	791b      	ldrb	r3, [r3, #4]
 800a19c:	2b01      	cmp	r3, #1
 800a19e:	d144      	bne.n	800a22a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	3330      	adds	r3, #48	; 0x30
 800a1a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	4618      	mov	r0, r3
 800a1ac:	f7ff fda9 	bl	8009d02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	3330      	adds	r3, #48	; 0x30
 800a1b4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a1b8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7ff fd38 	bl	8009c32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	3330      	adds	r3, #48	; 0x30
 800a1c6:	4921      	ldr	r1, [pc, #132]	; (800a24c <sync_fs+0xd4>)
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f7ff fd4d 	bl	8009c68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	3330      	adds	r3, #48	; 0x30
 800a1d2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a1d6:	491e      	ldr	r1, [pc, #120]	; (800a250 <sync_fs+0xd8>)
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f7ff fd45 	bl	8009c68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	3330      	adds	r3, #48	; 0x30
 800a1e2:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	4610      	mov	r0, r2
 800a1ee:	f7ff fd3b 	bl	8009c68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	3330      	adds	r3, #48	; 0x30
 800a1f6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	4619      	mov	r1, r3
 800a200:	4610      	mov	r0, r2
 800a202:	f7ff fd31 	bl	8009c68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	7858      	ldrb	r0, [r3, #1]
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a21e:	2301      	movs	r3, #1
 800a220:	f7ff fc8e 	bl	8009b40 <disk_write>
			fs->fsi_flag = 0;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	785b      	ldrb	r3, [r3, #1]
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	4618      	mov	r0, r3
 800a234:	f7ff fca4 	bl	8009b80 <disk_ioctl>
 800a238:	4603      	mov	r3, r0
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <sync_fs+0xca>
 800a23e:	2301      	movs	r3, #1
 800a240:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a242:	7bfb      	ldrb	r3, [r7, #15]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	41615252 	.word	0x41615252
 800a250:	61417272 	.word	0x61417272

0800a254 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a254:	b480      	push	{r7}
 800a256:	b083      	sub	sp, #12
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]
 800a25c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	3b02      	subs	r3, #2
 800a262:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	695b      	ldr	r3, [r3, #20]
 800a268:	3b02      	subs	r3, #2
 800a26a:	683a      	ldr	r2, [r7, #0]
 800a26c:	429a      	cmp	r2, r3
 800a26e:	d301      	bcc.n	800a274 <clust2sect+0x20>
 800a270:	2300      	movs	r3, #0
 800a272:	e008      	b.n	800a286 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	895b      	ldrh	r3, [r3, #10]
 800a278:	461a      	mov	r2, r3
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	fb03 f202 	mul.w	r2, r3, r2
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a284:	4413      	add	r3, r2
}
 800a286:	4618      	mov	r0, r3
 800a288:	370c      	adds	r7, #12
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr

0800a292 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a292:	b580      	push	{r7, lr}
 800a294:	b086      	sub	sp, #24
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
 800a29a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d904      	bls.n	800a2b2 <get_fat+0x20>
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	695b      	ldr	r3, [r3, #20]
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d302      	bcc.n	800a2b8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	617b      	str	r3, [r7, #20]
 800a2b6:	e08f      	b.n	800a3d8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a2b8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2bc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	781b      	ldrb	r3, [r3, #0]
 800a2c2:	2b03      	cmp	r3, #3
 800a2c4:	d062      	beq.n	800a38c <get_fat+0xfa>
 800a2c6:	2b03      	cmp	r3, #3
 800a2c8:	dc7c      	bgt.n	800a3c4 <get_fat+0x132>
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d002      	beq.n	800a2d4 <get_fat+0x42>
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d042      	beq.n	800a358 <get_fat+0xc6>
 800a2d2:	e077      	b.n	800a3c4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	085b      	lsrs	r3, r3, #1
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4413      	add	r3, r2
 800a2e0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	6a1a      	ldr	r2, [r3, #32]
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	0a5b      	lsrs	r3, r3, #9
 800a2ea:	4413      	add	r3, r2
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6938      	ldr	r0, [r7, #16]
 800a2f0:	f7ff ff14 	bl	800a11c <move_window>
 800a2f4:	4603      	mov	r3, r0
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d167      	bne.n	800a3ca <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	1c5a      	adds	r2, r3, #1
 800a2fe:	60fa      	str	r2, [r7, #12]
 800a300:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a304:	693a      	ldr	r2, [r7, #16]
 800a306:	4413      	add	r3, r2
 800a308:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a30c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	6a1a      	ldr	r2, [r3, #32]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	0a5b      	lsrs	r3, r3, #9
 800a316:	4413      	add	r3, r2
 800a318:	4619      	mov	r1, r3
 800a31a:	6938      	ldr	r0, [r7, #16]
 800a31c:	f7ff fefe 	bl	800a11c <move_window>
 800a320:	4603      	mov	r3, r0
 800a322:	2b00      	cmp	r3, #0
 800a324:	d153      	bne.n	800a3ce <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a32c:	693a      	ldr	r2, [r7, #16]
 800a32e:	4413      	add	r3, r2
 800a330:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	461a      	mov	r2, r3
 800a338:	68bb      	ldr	r3, [r7, #8]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	f003 0301 	and.w	r3, r3, #1
 800a344:	2b00      	cmp	r3, #0
 800a346:	d002      	beq.n	800a34e <get_fat+0xbc>
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	091b      	lsrs	r3, r3, #4
 800a34c:	e002      	b.n	800a354 <get_fat+0xc2>
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a354:	617b      	str	r3, [r7, #20]
			break;
 800a356:	e03f      	b.n	800a3d8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	6a1a      	ldr	r2, [r3, #32]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	0a1b      	lsrs	r3, r3, #8
 800a360:	4413      	add	r3, r2
 800a362:	4619      	mov	r1, r3
 800a364:	6938      	ldr	r0, [r7, #16]
 800a366:	f7ff fed9 	bl	800a11c <move_window>
 800a36a:	4603      	mov	r3, r0
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d130      	bne.n	800a3d2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	005b      	lsls	r3, r3, #1
 800a37a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a37e:	4413      	add	r3, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff fc1b 	bl	8009bbc <ld_word>
 800a386:	4603      	mov	r3, r0
 800a388:	617b      	str	r3, [r7, #20]
			break;
 800a38a:	e025      	b.n	800a3d8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	6a1a      	ldr	r2, [r3, #32]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	09db      	lsrs	r3, r3, #7
 800a394:	4413      	add	r3, r2
 800a396:	4619      	mov	r1, r3
 800a398:	6938      	ldr	r0, [r7, #16]
 800a39a:	f7ff febf 	bl	800a11c <move_window>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d118      	bne.n	800a3d6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a3b2:	4413      	add	r3, r2
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f7ff fc19 	bl	8009bec <ld_dword>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a3c0:	617b      	str	r3, [r7, #20]
			break;
 800a3c2:	e009      	b.n	800a3d8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	617b      	str	r3, [r7, #20]
 800a3c8:	e006      	b.n	800a3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3ca:	bf00      	nop
 800a3cc:	e004      	b.n	800a3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a3ce:	bf00      	nop
 800a3d0:	e002      	b.n	800a3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3d2:	bf00      	nop
 800a3d4:	e000      	b.n	800a3d8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3d6:	bf00      	nop
		}
	}

	return val;
 800a3d8:	697b      	ldr	r3, [r7, #20]
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3718      	adds	r7, #24
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a3e2:	b590      	push	{r4, r7, lr}
 800a3e4:	b089      	sub	sp, #36	; 0x24
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	60f8      	str	r0, [r7, #12]
 800a3ea:	60b9      	str	r1, [r7, #8]
 800a3ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a3ee:	2302      	movs	r3, #2
 800a3f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	f240 80d2 	bls.w	800a59e <put_fat+0x1bc>
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	695b      	ldr	r3, [r3, #20]
 800a3fe:	68ba      	ldr	r2, [r7, #8]
 800a400:	429a      	cmp	r2, r3
 800a402:	f080 80cc 	bcs.w	800a59e <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	f000 8096 	beq.w	800a53c <put_fat+0x15a>
 800a410:	2b03      	cmp	r3, #3
 800a412:	f300 80cd 	bgt.w	800a5b0 <put_fat+0x1ce>
 800a416:	2b01      	cmp	r3, #1
 800a418:	d002      	beq.n	800a420 <put_fat+0x3e>
 800a41a:	2b02      	cmp	r3, #2
 800a41c:	d06e      	beq.n	800a4fc <put_fat+0x11a>
 800a41e:	e0c7      	b.n	800a5b0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	61bb      	str	r3, [r7, #24]
 800a424:	69bb      	ldr	r3, [r7, #24]
 800a426:	085b      	lsrs	r3, r3, #1
 800a428:	69ba      	ldr	r2, [r7, #24]
 800a42a:	4413      	add	r3, r2
 800a42c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	6a1a      	ldr	r2, [r3, #32]
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	0a5b      	lsrs	r3, r3, #9
 800a436:	4413      	add	r3, r2
 800a438:	4619      	mov	r1, r3
 800a43a:	68f8      	ldr	r0, [r7, #12]
 800a43c:	f7ff fe6e 	bl	800a11c <move_window>
 800a440:	4603      	mov	r3, r0
 800a442:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a444:	7ffb      	ldrb	r3, [r7, #31]
 800a446:	2b00      	cmp	r3, #0
 800a448:	f040 80ab 	bne.w	800a5a2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	1c59      	adds	r1, r3, #1
 800a456:	61b9      	str	r1, [r7, #24]
 800a458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a45c:	4413      	add	r3, r2
 800a45e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	f003 0301 	and.w	r3, r3, #1
 800a466:	2b00      	cmp	r3, #0
 800a468:	d00d      	beq.n	800a486 <put_fat+0xa4>
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	b25b      	sxtb	r3, r3
 800a470:	f003 030f 	and.w	r3, r3, #15
 800a474:	b25a      	sxtb	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	011b      	lsls	r3, r3, #4
 800a47c:	b25b      	sxtb	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b25b      	sxtb	r3, r3
 800a482:	b2db      	uxtb	r3, r3
 800a484:	e001      	b.n	800a48a <put_fat+0xa8>
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	b2db      	uxtb	r3, r3
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	2201      	movs	r2, #1
 800a492:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6a1a      	ldr	r2, [r3, #32]
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	0a5b      	lsrs	r3, r3, #9
 800a49c:	4413      	add	r3, r2
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f7ff fe3b 	bl	800a11c <move_window>
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4aa:	7ffb      	ldrb	r3, [r7, #31]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d17a      	bne.n	800a5a6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a4b6:	69bb      	ldr	r3, [r7, #24]
 800a4b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4bc:	4413      	add	r3, r2
 800a4be:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d003      	beq.n	800a4d2 <put_fat+0xf0>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	091b      	lsrs	r3, r3, #4
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	e00e      	b.n	800a4f0 <put_fat+0x10e>
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	f023 030f 	bic.w	r3, r3, #15
 800a4dc:	b25a      	sxtb	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	0a1b      	lsrs	r3, r3, #8
 800a4e2:	b25b      	sxtb	r3, r3
 800a4e4:	f003 030f 	and.w	r3, r3, #15
 800a4e8:	b25b      	sxtb	r3, r3
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	b25b      	sxtb	r3, r3
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	697a      	ldr	r2, [r7, #20]
 800a4f2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	70da      	strb	r2, [r3, #3]
			break;
 800a4fa:	e059      	b.n	800a5b0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a1a      	ldr	r2, [r3, #32]
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	0a1b      	lsrs	r3, r3, #8
 800a504:	4413      	add	r3, r2
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff fe07 	bl	800a11c <move_window>
 800a50e:	4603      	mov	r3, r0
 800a510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a512:	7ffb      	ldrb	r3, [r7, #31]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d148      	bne.n	800a5aa <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	005b      	lsls	r3, r3, #1
 800a522:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a526:	4413      	add	r3, r2
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	b292      	uxth	r2, r2
 800a52c:	4611      	mov	r1, r2
 800a52e:	4618      	mov	r0, r3
 800a530:	f7ff fb7f 	bl	8009c32 <st_word>
			fs->wflag = 1;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2201      	movs	r2, #1
 800a538:	70da      	strb	r2, [r3, #3]
			break;
 800a53a:	e039      	b.n	800a5b0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	6a1a      	ldr	r2, [r3, #32]
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	09db      	lsrs	r3, r3, #7
 800a544:	4413      	add	r3, r2
 800a546:	4619      	mov	r1, r3
 800a548:	68f8      	ldr	r0, [r7, #12]
 800a54a:	f7ff fde7 	bl	800a11c <move_window>
 800a54e:	4603      	mov	r3, r0
 800a550:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a552:	7ffb      	ldrb	r3, [r7, #31]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d12a      	bne.n	800a5ae <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a56c:	4413      	add	r3, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff fb3c 	bl	8009bec <ld_dword>
 800a574:	4603      	mov	r3, r0
 800a576:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a57a:	4323      	orrs	r3, r4
 800a57c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	009b      	lsls	r3, r3, #2
 800a588:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a58c:	4413      	add	r3, r2
 800a58e:	6879      	ldr	r1, [r7, #4]
 800a590:	4618      	mov	r0, r3
 800a592:	f7ff fb69 	bl	8009c68 <st_dword>
			fs->wflag = 1;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	2201      	movs	r2, #1
 800a59a:	70da      	strb	r2, [r3, #3]
			break;
 800a59c:	e008      	b.n	800a5b0 <put_fat+0x1ce>
		}
	}
 800a59e:	bf00      	nop
 800a5a0:	e006      	b.n	800a5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5a2:	bf00      	nop
 800a5a4:	e004      	b.n	800a5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5a6:	bf00      	nop
 800a5a8:	e002      	b.n	800a5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5aa:	bf00      	nop
 800a5ac:	e000      	b.n	800a5b0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a5ae:	bf00      	nop
	return res;
 800a5b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3724      	adds	r7, #36	; 0x24
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd90      	pop	{r4, r7, pc}

0800a5ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b088      	sub	sp, #32
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	60f8      	str	r0, [r7, #12]
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	d904      	bls.n	800a5e0 <remove_chain+0x26>
 800a5d6:	69bb      	ldr	r3, [r7, #24]
 800a5d8:	695b      	ldr	r3, [r3, #20]
 800a5da:	68ba      	ldr	r2, [r7, #8]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	d301      	bcc.n	800a5e4 <remove_chain+0x2a>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e04b      	b.n	800a67c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00c      	beq.n	800a604 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a5ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ee:	6879      	ldr	r1, [r7, #4]
 800a5f0:	69b8      	ldr	r0, [r7, #24]
 800a5f2:	f7ff fef6 	bl	800a3e2 <put_fat>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a5fa:	7ffb      	ldrb	r3, [r7, #31]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <remove_chain+0x4a>
 800a600:	7ffb      	ldrb	r3, [r7, #31]
 800a602:	e03b      	b.n	800a67c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a604:	68b9      	ldr	r1, [r7, #8]
 800a606:	68f8      	ldr	r0, [r7, #12]
 800a608:	f7ff fe43 	bl	800a292 <get_fat>
 800a60c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d031      	beq.n	800a678 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	2b01      	cmp	r3, #1
 800a618:	d101      	bne.n	800a61e <remove_chain+0x64>
 800a61a:	2302      	movs	r3, #2
 800a61c:	e02e      	b.n	800a67c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a624:	d101      	bne.n	800a62a <remove_chain+0x70>
 800a626:	2301      	movs	r3, #1
 800a628:	e028      	b.n	800a67c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a62a:	2200      	movs	r2, #0
 800a62c:	68b9      	ldr	r1, [r7, #8]
 800a62e:	69b8      	ldr	r0, [r7, #24]
 800a630:	f7ff fed7 	bl	800a3e2 <put_fat>
 800a634:	4603      	mov	r3, r0
 800a636:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a638:	7ffb      	ldrb	r3, [r7, #31]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d001      	beq.n	800a642 <remove_chain+0x88>
 800a63e:	7ffb      	ldrb	r3, [r7, #31]
 800a640:	e01c      	b.n	800a67c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	691a      	ldr	r2, [r3, #16]
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	695b      	ldr	r3, [r3, #20]
 800a64a:	3b02      	subs	r3, #2
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d20b      	bcs.n	800a668 <remove_chain+0xae>
			fs->free_clst++;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	691b      	ldr	r3, [r3, #16]
 800a654:	1c5a      	adds	r2, r3, #1
 800a656:	69bb      	ldr	r3, [r7, #24]
 800a658:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	791b      	ldrb	r3, [r3, #4]
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	b2da      	uxtb	r2, r3
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	695b      	ldr	r3, [r3, #20]
 800a670:	68ba      	ldr	r2, [r7, #8]
 800a672:	429a      	cmp	r2, r3
 800a674:	d3c6      	bcc.n	800a604 <remove_chain+0x4a>
 800a676:	e000      	b.n	800a67a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a678:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	3720      	adds	r7, #32
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b088      	sub	sp, #32
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
 800a68c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d10d      	bne.n	800a6b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d004      	beq.n	800a6b0 <create_chain+0x2c>
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	695b      	ldr	r3, [r3, #20]
 800a6aa:	69ba      	ldr	r2, [r7, #24]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d31b      	bcc.n	800a6e8 <create_chain+0x64>
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	61bb      	str	r3, [r7, #24]
 800a6b4:	e018      	b.n	800a6e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f7ff fdea 	bl	800a292 <get_fat>
 800a6be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2b01      	cmp	r3, #1
 800a6c4:	d801      	bhi.n	800a6ca <create_chain+0x46>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e070      	b.n	800a7ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6d0:	d101      	bne.n	800a6d6 <create_chain+0x52>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	e06a      	b.n	800a7ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	695b      	ldr	r3, [r3, #20]
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d201      	bcs.n	800a6e4 <create_chain+0x60>
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	e063      	b.n	800a7ac <create_chain+0x128>
		scl = clst;
 800a6e4:	683b      	ldr	r3, [r7, #0]
 800a6e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	695b      	ldr	r3, [r3, #20]
 800a6f6:	69fa      	ldr	r2, [r7, #28]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d307      	bcc.n	800a70c <create_chain+0x88>
				ncl = 2;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a700:	69fa      	ldr	r2, [r7, #28]
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	429a      	cmp	r2, r3
 800a706:	d901      	bls.n	800a70c <create_chain+0x88>
 800a708:	2300      	movs	r3, #0
 800a70a:	e04f      	b.n	800a7ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a70c:	69f9      	ldr	r1, [r7, #28]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7ff fdbf 	bl	800a292 <get_fat>
 800a714:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d00e      	beq.n	800a73a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d003      	beq.n	800a72a <create_chain+0xa6>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a728:	d101      	bne.n	800a72e <create_chain+0xaa>
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	e03e      	b.n	800a7ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a72e:	69fa      	ldr	r2, [r7, #28]
 800a730:	69bb      	ldr	r3, [r7, #24]
 800a732:	429a      	cmp	r2, r3
 800a734:	d1da      	bne.n	800a6ec <create_chain+0x68>
 800a736:	2300      	movs	r3, #0
 800a738:	e038      	b.n	800a7ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a73a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a73c:	f04f 32ff 	mov.w	r2, #4294967295
 800a740:	69f9      	ldr	r1, [r7, #28]
 800a742:	6938      	ldr	r0, [r7, #16]
 800a744:	f7ff fe4d 	bl	800a3e2 <put_fat>
 800a748:	4603      	mov	r3, r0
 800a74a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a74c:	7dfb      	ldrb	r3, [r7, #23]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d109      	bne.n	800a766 <create_chain+0xe2>
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a758:	69fa      	ldr	r2, [r7, #28]
 800a75a:	6839      	ldr	r1, [r7, #0]
 800a75c:	6938      	ldr	r0, [r7, #16]
 800a75e:	f7ff fe40 	bl	800a3e2 <put_fat>
 800a762:	4603      	mov	r3, r0
 800a764:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a766:	7dfb      	ldrb	r3, [r7, #23]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d116      	bne.n	800a79a <create_chain+0x116>
		fs->last_clst = ncl;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	69fa      	ldr	r2, [r7, #28]
 800a770:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	691a      	ldr	r2, [r3, #16]
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	3b02      	subs	r3, #2
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d804      	bhi.n	800a78a <create_chain+0x106>
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	1e5a      	subs	r2, r3, #1
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	791b      	ldrb	r3, [r3, #4]
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	b2da      	uxtb	r2, r3
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	711a      	strb	r2, [r3, #4]
 800a798:	e007      	b.n	800a7aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d102      	bne.n	800a7a6 <create_chain+0x122>
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	e000      	b.n	800a7a8 <create_chain+0x124>
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a7aa:	69fb      	ldr	r3, [r7, #28]
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	3720      	adds	r7, #32
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	bd80      	pop	{r7, pc}

0800a7b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b087      	sub	sp, #28
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
 800a7bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c8:	3304      	adds	r3, #4
 800a7ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	0a5b      	lsrs	r3, r3, #9
 800a7d0:	68fa      	ldr	r2, [r7, #12]
 800a7d2:	8952      	ldrh	r2, [r2, #10]
 800a7d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	1d1a      	adds	r2, r3, #4
 800a7de:	613a      	str	r2, [r7, #16]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d101      	bne.n	800a7ee <clmt_clust+0x3a>
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	e010      	b.n	800a810 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a7ee:	697a      	ldr	r2, [r7, #20]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d307      	bcc.n	800a806 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a7f6:	697a      	ldr	r2, [r7, #20]
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	1ad3      	subs	r3, r2, r3
 800a7fc:	617b      	str	r3, [r7, #20]
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	3304      	adds	r3, #4
 800a802:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a804:	e7e9      	b.n	800a7da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a806:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	681a      	ldr	r2, [r3, #0]
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4413      	add	r3, r2
}
 800a810:	4618      	mov	r0, r3
 800a812:	371c      	adds	r7, #28
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a832:	d204      	bcs.n	800a83e <dir_sdi+0x22>
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	f003 031f 	and.w	r3, r3, #31
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d001      	beq.n	800a842 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a83e:	2302      	movs	r3, #2
 800a840:	e063      	b.n	800a90a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	683a      	ldr	r2, [r7, #0]
 800a846:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d106      	bne.n	800a862 <dir_sdi+0x46>
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	2b02      	cmp	r3, #2
 800a85a:	d902      	bls.n	800a862 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a860:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10c      	bne.n	800a882 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	095b      	lsrs	r3, r3, #5
 800a86c:	693a      	ldr	r2, [r7, #16]
 800a86e:	8912      	ldrh	r2, [r2, #8]
 800a870:	4293      	cmp	r3, r2
 800a872:	d301      	bcc.n	800a878 <dir_sdi+0x5c>
 800a874:	2302      	movs	r3, #2
 800a876:	e048      	b.n	800a90a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	61da      	str	r2, [r3, #28]
 800a880:	e029      	b.n	800a8d6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	895b      	ldrh	r3, [r3, #10]
 800a886:	025b      	lsls	r3, r3, #9
 800a888:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a88a:	e019      	b.n	800a8c0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6979      	ldr	r1, [r7, #20]
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff fcfe 	bl	800a292 <get_fat>
 800a896:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a89e:	d101      	bne.n	800a8a4 <dir_sdi+0x88>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	e032      	b.n	800a90a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d904      	bls.n	800a8b4 <dir_sdi+0x98>
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	695b      	ldr	r3, [r3, #20]
 800a8ae:	697a      	ldr	r2, [r7, #20]
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	d301      	bcc.n	800a8b8 <dir_sdi+0x9c>
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	e028      	b.n	800a90a <dir_sdi+0xee>
			ofs -= csz;
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	1ad3      	subs	r3, r2, r3
 800a8be:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8c0:	683a      	ldr	r2, [r7, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d2e1      	bcs.n	800a88c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a8c8:	6979      	ldr	r1, [r7, #20]
 800a8ca:	6938      	ldr	r0, [r7, #16]
 800a8cc:	f7ff fcc2 	bl	800a254 <clust2sect>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d101      	bne.n	800a8e8 <dir_sdi+0xcc>
 800a8e4:	2302      	movs	r3, #2
 800a8e6:	e010      	b.n	800a90a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	69da      	ldr	r2, [r3, #28]
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	0a5b      	lsrs	r3, r3, #9
 800a8f0:	441a      	add	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a902:	441a      	add	r2, r3
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}

0800a912 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a912:	b580      	push	{r7, lr}
 800a914:	b086      	sub	sp, #24
 800a916:	af00      	add	r7, sp, #0
 800a918:	6078      	str	r0, [r7, #4]
 800a91a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	3320      	adds	r3, #32
 800a928:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	69db      	ldr	r3, [r3, #28]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d003      	beq.n	800a93a <dir_next+0x28>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a938:	d301      	bcc.n	800a93e <dir_next+0x2c>
 800a93a:	2304      	movs	r3, #4
 800a93c:	e0aa      	b.n	800aa94 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a944:	2b00      	cmp	r3, #0
 800a946:	f040 8098 	bne.w	800aa7a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	69db      	ldr	r3, [r3, #28]
 800a94e:	1c5a      	adds	r2, r3, #1
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	699b      	ldr	r3, [r3, #24]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10b      	bne.n	800a974 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	095b      	lsrs	r3, r3, #5
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	8912      	ldrh	r2, [r2, #8]
 800a964:	4293      	cmp	r3, r2
 800a966:	f0c0 8088 	bcc.w	800aa7a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	61da      	str	r2, [r3, #28]
 800a970:	2304      	movs	r3, #4
 800a972:	e08f      	b.n	800aa94 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	0a5b      	lsrs	r3, r3, #9
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	8952      	ldrh	r2, [r2, #10]
 800a97c:	3a01      	subs	r2, #1
 800a97e:	4013      	ands	r3, r2
 800a980:	2b00      	cmp	r3, #0
 800a982:	d17a      	bne.n	800aa7a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	699b      	ldr	r3, [r3, #24]
 800a98a:	4619      	mov	r1, r3
 800a98c:	4610      	mov	r0, r2
 800a98e:	f7ff fc80 	bl	800a292 <get_fat>
 800a992:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2b01      	cmp	r3, #1
 800a998:	d801      	bhi.n	800a99e <dir_next+0x8c>
 800a99a:	2302      	movs	r3, #2
 800a99c:	e07a      	b.n	800aa94 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9a4:	d101      	bne.n	800a9aa <dir_next+0x98>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e074      	b.n	800aa94 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d358      	bcc.n	800aa66 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	61da      	str	r2, [r3, #28]
 800a9c0:	2304      	movs	r3, #4
 800a9c2:	e067      	b.n	800aa94 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	4619      	mov	r1, r3
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	f7ff fe59 	bl	800a684 <create_chain>
 800a9d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a9d4:	697b      	ldr	r3, [r7, #20]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <dir_next+0xcc>
 800a9da:	2307      	movs	r3, #7
 800a9dc:	e05a      	b.n	800aa94 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	2b01      	cmp	r3, #1
 800a9e2:	d101      	bne.n	800a9e8 <dir_next+0xd6>
 800a9e4:	2302      	movs	r3, #2
 800a9e6:	e055      	b.n	800aa94 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ee:	d101      	bne.n	800a9f4 <dir_next+0xe2>
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	e04f      	b.n	800aa94 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff fb4d 	bl	800a094 <sync_window>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <dir_next+0xf2>
 800aa00:	2301      	movs	r3, #1
 800aa02:	e047      	b.n	800aa94 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	3330      	adds	r3, #48	; 0x30
 800aa08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7ff f977 	bl	8009d02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa14:	2300      	movs	r3, #0
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	6979      	ldr	r1, [r7, #20]
 800aa1a:	68f8      	ldr	r0, [r7, #12]
 800aa1c:	f7ff fc1a 	bl	800a254 <clust2sect>
 800aa20:	4602      	mov	r2, r0
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa26:	e012      	b.n	800aa4e <dir_next+0x13c>
						fs->wflag = 1;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa2e:	68f8      	ldr	r0, [r7, #12]
 800aa30:	f7ff fb30 	bl	800a094 <sync_window>
 800aa34:	4603      	mov	r3, r0
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d001      	beq.n	800aa3e <dir_next+0x12c>
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e02a      	b.n	800aa94 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa3e:	693b      	ldr	r3, [r7, #16]
 800aa40:	3301      	adds	r3, #1
 800aa42:	613b      	str	r3, [r7, #16]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa48:	1c5a      	adds	r2, r3, #1
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	895b      	ldrh	r3, [r3, #10]
 800aa52:	461a      	mov	r2, r3
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d3e6      	bcc.n	800aa28 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	1ad2      	subs	r2, r2, r3
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aa6c:	6979      	ldr	r1, [r7, #20]
 800aa6e:	68f8      	ldr	r0, [r7, #12]
 800aa70:	f7ff fbf0 	bl	800a254 <clust2sect>
 800aa74:	4602      	mov	r2, r0
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8c:	441a      	add	r2, r3
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aa92:	2300      	movs	r3, #0
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	3718      	adds	r7, #24
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
 800aaa4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800aaac:	2100      	movs	r1, #0
 800aaae:	6878      	ldr	r0, [r7, #4]
 800aab0:	f7ff feb4 	bl	800a81c <dir_sdi>
 800aab4:	4603      	mov	r3, r0
 800aab6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800aab8:	7dfb      	ldrb	r3, [r7, #23]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d12b      	bne.n	800ab16 <dir_alloc+0x7a>
		n = 0;
 800aabe:	2300      	movs	r3, #0
 800aac0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	69db      	ldr	r3, [r3, #28]
 800aac6:	4619      	mov	r1, r3
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff fb27 	bl	800a11c <move_window>
 800aace:	4603      	mov	r3, r0
 800aad0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11d      	bne.n	800ab14 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6a1b      	ldr	r3, [r3, #32]
 800aadc:	781b      	ldrb	r3, [r3, #0]
 800aade:	2be5      	cmp	r3, #229	; 0xe5
 800aae0:	d004      	beq.n	800aaec <dir_alloc+0x50>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6a1b      	ldr	r3, [r3, #32]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d107      	bne.n	800aafc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	3301      	adds	r3, #1
 800aaf0:	613b      	str	r3, [r7, #16]
 800aaf2:	693a      	ldr	r2, [r7, #16]
 800aaf4:	683b      	ldr	r3, [r7, #0]
 800aaf6:	429a      	cmp	r2, r3
 800aaf8:	d102      	bne.n	800ab00 <dir_alloc+0x64>
 800aafa:	e00c      	b.n	800ab16 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aafc:	2300      	movs	r3, #0
 800aafe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab00:	2101      	movs	r1, #1
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7ff ff05 	bl	800a912 <dir_next>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d0d7      	beq.n	800aac2 <dir_alloc+0x26>
 800ab12:	e000      	b.n	800ab16 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab14:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab16:	7dfb      	ldrb	r3, [r7, #23]
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d101      	bne.n	800ab20 <dir_alloc+0x84>
 800ab1c:	2307      	movs	r3, #7
 800ab1e:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3718      	adds	r7, #24
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab2a:	b580      	push	{r7, lr}
 800ab2c:	b084      	sub	sp, #16
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]
 800ab32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	331a      	adds	r3, #26
 800ab38:	4618      	mov	r0, r3
 800ab3a:	f7ff f83f 	bl	8009bbc <ld_word>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2b03      	cmp	r3, #3
 800ab48:	d109      	bne.n	800ab5e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ab4a:	683b      	ldr	r3, [r7, #0]
 800ab4c:	3314      	adds	r3, #20
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7ff f834 	bl	8009bbc <ld_word>
 800ab54:	4603      	mov	r3, r0
 800ab56:	041b      	lsls	r3, r3, #16
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	3710      	adds	r7, #16
 800ab64:	46bd      	mov	sp, r7
 800ab66:	bd80      	pop	{r7, pc}

0800ab68 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ab68:	b580      	push	{r7, lr}
 800ab6a:	b084      	sub	sp, #16
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	60f8      	str	r0, [r7, #12]
 800ab70:	60b9      	str	r1, [r7, #8]
 800ab72:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	331a      	adds	r3, #26
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	b292      	uxth	r2, r2
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff f857 	bl	8009c32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	2b03      	cmp	r3, #3
 800ab8a:	d109      	bne.n	800aba0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f103 0214 	add.w	r2, r3, #20
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	0c1b      	lsrs	r3, r3, #16
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	4619      	mov	r1, r3
 800ab9a:	4610      	mov	r0, r2
 800ab9c:	f7ff f849 	bl	8009c32 <st_word>
	}
}
 800aba0:	bf00      	nop
 800aba2:	3710      	adds	r7, #16
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b086      	sub	sp, #24
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800abb6:	2100      	movs	r1, #0
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f7ff fe2f 	bl	800a81c <dir_sdi>
 800abbe:	4603      	mov	r3, r0
 800abc0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800abc2:	7dfb      	ldrb	r3, [r7, #23]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d001      	beq.n	800abcc <dir_find+0x24>
 800abc8:	7dfb      	ldrb	r3, [r7, #23]
 800abca:	e03e      	b.n	800ac4a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	69db      	ldr	r3, [r3, #28]
 800abd0:	4619      	mov	r1, r3
 800abd2:	6938      	ldr	r0, [r7, #16]
 800abd4:	f7ff faa2 	bl	800a11c <move_window>
 800abd8:	4603      	mov	r3, r0
 800abda:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abdc:	7dfb      	ldrb	r3, [r7, #23]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d12f      	bne.n	800ac42 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a1b      	ldr	r3, [r3, #32]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800abea:	7bfb      	ldrb	r3, [r7, #15]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d102      	bne.n	800abf6 <dir_find+0x4e>
 800abf0:	2304      	movs	r3, #4
 800abf2:	75fb      	strb	r3, [r7, #23]
 800abf4:	e028      	b.n	800ac48 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6a1b      	ldr	r3, [r3, #32]
 800abfa:	330b      	adds	r3, #11
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	6a1b      	ldr	r3, [r3, #32]
 800ac0c:	330b      	adds	r3, #11
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	f003 0308 	and.w	r3, r3, #8
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10a      	bne.n	800ac2e <dir_find+0x86>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6a18      	ldr	r0, [r3, #32]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3324      	adds	r3, #36	; 0x24
 800ac20:	220b      	movs	r2, #11
 800ac22:	4619      	mov	r1, r3
 800ac24:	f7ff f888 	bl	8009d38 <mem_cmp>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d00b      	beq.n	800ac46 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ac2e:	2100      	movs	r1, #0
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fe6e 	bl	800a912 <dir_next>
 800ac36:	4603      	mov	r3, r0
 800ac38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0c5      	beq.n	800abcc <dir_find+0x24>
 800ac40:	e002      	b.n	800ac48 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ac42:	bf00      	nop
 800ac44:	e000      	b.n	800ac48 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ac46:	bf00      	nop

	return res;
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ac52:	b580      	push	{r7, lr}
 800ac54:	b084      	sub	sp, #16
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ac60:	2101      	movs	r1, #1
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f7ff ff1a 	bl	800aa9c <dir_alloc>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ac6c:	7bfb      	ldrb	r3, [r7, #15]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d11c      	bne.n	800acac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	69db      	ldr	r3, [r3, #28]
 800ac76:	4619      	mov	r1, r3
 800ac78:	68b8      	ldr	r0, [r7, #8]
 800ac7a:	f7ff fa4f 	bl	800a11c <move_window>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ac82:	7bfb      	ldrb	r3, [r7, #15]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d111      	bne.n	800acac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	6a1b      	ldr	r3, [r3, #32]
 800ac8c:	2220      	movs	r2, #32
 800ac8e:	2100      	movs	r1, #0
 800ac90:	4618      	mov	r0, r3
 800ac92:	f7ff f836 	bl	8009d02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6a18      	ldr	r0, [r3, #32]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3324      	adds	r3, #36	; 0x24
 800ac9e:	220b      	movs	r2, #11
 800aca0:	4619      	mov	r1, r3
 800aca2:	f7ff f80d 	bl	8009cc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2201      	movs	r2, #1
 800acaa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800acac:	7bfb      	ldrb	r3, [r7, #15]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3710      	adds	r7, #16
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
	...

0800acb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b088      	sub	sp, #32
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	60fb      	str	r3, [r7, #12]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	3324      	adds	r3, #36	; 0x24
 800accc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800acce:	220b      	movs	r2, #11
 800acd0:	2120      	movs	r1, #32
 800acd2:	68b8      	ldr	r0, [r7, #8]
 800acd4:	f7ff f815 	bl	8009d02 <mem_set>
	si = i = 0; ni = 8;
 800acd8:	2300      	movs	r3, #0
 800acda:	613b      	str	r3, [r7, #16]
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	61fb      	str	r3, [r7, #28]
 800ace0:	2308      	movs	r3, #8
 800ace2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	61fa      	str	r2, [r7, #28]
 800acea:	68fa      	ldr	r2, [r7, #12]
 800acec:	4413      	add	r3, r2
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800acf2:	7efb      	ldrb	r3, [r7, #27]
 800acf4:	2b20      	cmp	r3, #32
 800acf6:	d94e      	bls.n	800ad96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800acf8:	7efb      	ldrb	r3, [r7, #27]
 800acfa:	2b2f      	cmp	r3, #47	; 0x2f
 800acfc:	d006      	beq.n	800ad0c <create_name+0x54>
 800acfe:	7efb      	ldrb	r3, [r7, #27]
 800ad00:	2b5c      	cmp	r3, #92	; 0x5c
 800ad02:	d110      	bne.n	800ad26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ad04:	e002      	b.n	800ad0c <create_name+0x54>
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	61fb      	str	r3, [r7, #28]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	2b2f      	cmp	r3, #47	; 0x2f
 800ad16:	d0f6      	beq.n	800ad06 <create_name+0x4e>
 800ad18:	68fa      	ldr	r2, [r7, #12]
 800ad1a:	69fb      	ldr	r3, [r7, #28]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	2b5c      	cmp	r3, #92	; 0x5c
 800ad22:	d0f0      	beq.n	800ad06 <create_name+0x4e>
			break;
 800ad24:	e038      	b.n	800ad98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800ad26:	7efb      	ldrb	r3, [r7, #27]
 800ad28:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2a:	d003      	beq.n	800ad34 <create_name+0x7c>
 800ad2c:	693a      	ldr	r2, [r7, #16]
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d30c      	bcc.n	800ad4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	2b0b      	cmp	r3, #11
 800ad38:	d002      	beq.n	800ad40 <create_name+0x88>
 800ad3a:	7efb      	ldrb	r3, [r7, #27]
 800ad3c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad3e:	d001      	beq.n	800ad44 <create_name+0x8c>
 800ad40:	2306      	movs	r3, #6
 800ad42:	e044      	b.n	800adce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800ad44:	2308      	movs	r3, #8
 800ad46:	613b      	str	r3, [r7, #16]
 800ad48:	230b      	movs	r3, #11
 800ad4a:	617b      	str	r3, [r7, #20]
			continue;
 800ad4c:	e022      	b.n	800ad94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800ad4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	da04      	bge.n	800ad60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800ad56:	7efb      	ldrb	r3, [r7, #27]
 800ad58:	3b80      	subs	r3, #128	; 0x80
 800ad5a:	4a1f      	ldr	r2, [pc, #124]	; (800add8 <create_name+0x120>)
 800ad5c:	5cd3      	ldrb	r3, [r2, r3]
 800ad5e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ad60:	7efb      	ldrb	r3, [r7, #27]
 800ad62:	4619      	mov	r1, r3
 800ad64:	481d      	ldr	r0, [pc, #116]	; (800addc <create_name+0x124>)
 800ad66:	f7ff f80e 	bl	8009d86 <chk_chr>
 800ad6a:	4603      	mov	r3, r0
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d001      	beq.n	800ad74 <create_name+0xbc>
 800ad70:	2306      	movs	r3, #6
 800ad72:	e02c      	b.n	800adce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ad74:	7efb      	ldrb	r3, [r7, #27]
 800ad76:	2b60      	cmp	r3, #96	; 0x60
 800ad78:	d905      	bls.n	800ad86 <create_name+0xce>
 800ad7a:	7efb      	ldrb	r3, [r7, #27]
 800ad7c:	2b7a      	cmp	r3, #122	; 0x7a
 800ad7e:	d802      	bhi.n	800ad86 <create_name+0xce>
 800ad80:	7efb      	ldrb	r3, [r7, #27]
 800ad82:	3b20      	subs	r3, #32
 800ad84:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	1c5a      	adds	r2, r3, #1
 800ad8a:	613a      	str	r2, [r7, #16]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	4413      	add	r3, r2
 800ad90:	7efa      	ldrb	r2, [r7, #27]
 800ad92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ad94:	e7a6      	b.n	800ace4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ad96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ad98:	68fa      	ldr	r2, [r7, #12]
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	441a      	add	r2, r3
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d101      	bne.n	800adac <create_name+0xf4>
 800ada8:	2306      	movs	r3, #6
 800adaa:	e010      	b.n	800adce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	781b      	ldrb	r3, [r3, #0]
 800adb0:	2be5      	cmp	r3, #229	; 0xe5
 800adb2:	d102      	bne.n	800adba <create_name+0x102>
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	2205      	movs	r2, #5
 800adb8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800adba:	7efb      	ldrb	r3, [r7, #27]
 800adbc:	2b20      	cmp	r3, #32
 800adbe:	d801      	bhi.n	800adc4 <create_name+0x10c>
 800adc0:	2204      	movs	r2, #4
 800adc2:	e000      	b.n	800adc6 <create_name+0x10e>
 800adc4:	2200      	movs	r2, #0
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	330b      	adds	r3, #11
 800adca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800adcc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800adce:	4618      	mov	r0, r3
 800add0:	3720      	adds	r7, #32
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
 800add6:	bf00      	nop
 800add8:	0800f344 	.word	0x0800f344
 800addc:	0800f25c 	.word	0x0800f25c

0800ade0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800adf4:	e002      	b.n	800adfc <follow_path+0x1c>
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	3301      	adds	r3, #1
 800adfa:	603b      	str	r3, [r7, #0]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	2b2f      	cmp	r3, #47	; 0x2f
 800ae02:	d0f8      	beq.n	800adf6 <follow_path+0x16>
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b5c      	cmp	r3, #92	; 0x5c
 800ae0a:	d0f4      	beq.n	800adf6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	781b      	ldrb	r3, [r3, #0]
 800ae16:	2b1f      	cmp	r3, #31
 800ae18:	d80a      	bhi.n	800ae30 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2280      	movs	r2, #128	; 0x80
 800ae1e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ae22:	2100      	movs	r1, #0
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff fcf9 	bl	800a81c <dir_sdi>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]
 800ae2e:	e043      	b.n	800aeb8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ae30:	463b      	mov	r3, r7
 800ae32:	4619      	mov	r1, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f7ff ff3f 	bl	800acb8 <create_name>
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ae3e:	7dfb      	ldrb	r3, [r7, #23]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d134      	bne.n	800aeae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff feaf 	bl	800aba8 <dir_find>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae54:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ae56:	7dfb      	ldrb	r3, [r7, #23]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d00a      	beq.n	800ae72 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d127      	bne.n	800aeb2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ae62:	7afb      	ldrb	r3, [r7, #11]
 800ae64:	f003 0304 	and.w	r3, r3, #4
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d122      	bne.n	800aeb2 <follow_path+0xd2>
 800ae6c:	2305      	movs	r3, #5
 800ae6e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ae70:	e01f      	b.n	800aeb2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ae72:	7afb      	ldrb	r3, [r7, #11]
 800ae74:	f003 0304 	and.w	r3, r3, #4
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d11c      	bne.n	800aeb6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	799b      	ldrb	r3, [r3, #6]
 800ae80:	f003 0310 	and.w	r3, r3, #16
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d102      	bne.n	800ae8e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ae88:	2305      	movs	r3, #5
 800ae8a:	75fb      	strb	r3, [r7, #23]
 800ae8c:	e014      	b.n	800aeb8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	695b      	ldr	r3, [r3, #20]
 800ae98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae9c:	4413      	add	r3, r2
 800ae9e:	4619      	mov	r1, r3
 800aea0:	68f8      	ldr	r0, [r7, #12]
 800aea2:	f7ff fe42 	bl	800ab2a <ld_clust>
 800aea6:	4602      	mov	r2, r0
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aeac:	e7c0      	b.n	800ae30 <follow_path+0x50>
			if (res != FR_OK) break;
 800aeae:	bf00      	nop
 800aeb0:	e002      	b.n	800aeb8 <follow_path+0xd8>
				break;
 800aeb2:	bf00      	nop
 800aeb4:	e000      	b.n	800aeb8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800aeb6:	bf00      	nop
			}
		}
	}

	return res;
 800aeb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3718      	adds	r7, #24
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}

0800aec2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800aec2:	b480      	push	{r7}
 800aec4:	b087      	sub	sp, #28
 800aec6:	af00      	add	r7, sp, #0
 800aec8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800aeca:	f04f 33ff 	mov.w	r3, #4294967295
 800aece:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d031      	beq.n	800af3c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	617b      	str	r3, [r7, #20]
 800aede:	e002      	b.n	800aee6 <get_ldnumber+0x24>
 800aee0:	697b      	ldr	r3, [r7, #20]
 800aee2:	3301      	adds	r3, #1
 800aee4:	617b      	str	r3, [r7, #20]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	2b20      	cmp	r3, #32
 800aeec:	d903      	bls.n	800aef6 <get_ldnumber+0x34>
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	2b3a      	cmp	r3, #58	; 0x3a
 800aef4:	d1f4      	bne.n	800aee0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	2b3a      	cmp	r3, #58	; 0x3a
 800aefc:	d11c      	bne.n	800af38 <get_ldnumber+0x76>
			tp = *path;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	1c5a      	adds	r2, r3, #1
 800af08:	60fa      	str	r2, [r7, #12]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	3b30      	subs	r3, #48	; 0x30
 800af0e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2b09      	cmp	r3, #9
 800af14:	d80e      	bhi.n	800af34 <get_ldnumber+0x72>
 800af16:	68fa      	ldr	r2, [r7, #12]
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d10a      	bne.n	800af34 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b00      	cmp	r3, #0
 800af22:	d107      	bne.n	800af34 <get_ldnumber+0x72>
					vol = (int)i;
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	3301      	adds	r3, #1
 800af2c:	617b      	str	r3, [r7, #20]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	697a      	ldr	r2, [r7, #20]
 800af32:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	e002      	b.n	800af3e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800af38:	2300      	movs	r3, #0
 800af3a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800af3c:	693b      	ldr	r3, [r7, #16]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	371c      	adds	r7, #28
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr
	...

0800af4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	70da      	strb	r2, [r3, #3]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f04f 32ff 	mov.w	r2, #4294967295
 800af62:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800af64:	6839      	ldr	r1, [r7, #0]
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff f8d8 	bl	800a11c <move_window>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <check_fs+0x2a>
 800af72:	2304      	movs	r3, #4
 800af74:	e038      	b.n	800afe8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	3330      	adds	r3, #48	; 0x30
 800af7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800af7e:	4618      	mov	r0, r3
 800af80:	f7fe fe1c 	bl	8009bbc <ld_word>
 800af84:	4603      	mov	r3, r0
 800af86:	461a      	mov	r2, r3
 800af88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d001      	beq.n	800af94 <check_fs+0x48>
 800af90:	2303      	movs	r3, #3
 800af92:	e029      	b.n	800afe8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800af9a:	2be9      	cmp	r3, #233	; 0xe9
 800af9c:	d009      	beq.n	800afb2 <check_fs+0x66>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800afa4:	2beb      	cmp	r3, #235	; 0xeb
 800afa6:	d11e      	bne.n	800afe6 <check_fs+0x9a>
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800afae:	2b90      	cmp	r3, #144	; 0x90
 800afb0:	d119      	bne.n	800afe6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	3330      	adds	r3, #48	; 0x30
 800afb6:	3336      	adds	r3, #54	; 0x36
 800afb8:	4618      	mov	r0, r3
 800afba:	f7fe fe17 	bl	8009bec <ld_dword>
 800afbe:	4603      	mov	r3, r0
 800afc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800afc4:	4a0a      	ldr	r2, [pc, #40]	; (800aff0 <check_fs+0xa4>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d101      	bne.n	800afce <check_fs+0x82>
 800afca:	2300      	movs	r3, #0
 800afcc:	e00c      	b.n	800afe8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3330      	adds	r3, #48	; 0x30
 800afd2:	3352      	adds	r3, #82	; 0x52
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fe fe09 	bl	8009bec <ld_dword>
 800afda:	4603      	mov	r3, r0
 800afdc:	4a05      	ldr	r2, [pc, #20]	; (800aff4 <check_fs+0xa8>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d101      	bne.n	800afe6 <check_fs+0x9a>
 800afe2:	2300      	movs	r3, #0
 800afe4:	e000      	b.n	800afe8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800afe6:	2302      	movs	r3, #2
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	00544146 	.word	0x00544146
 800aff4:	33544146 	.word	0x33544146

0800aff8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800aff8:	b580      	push	{r7, lr}
 800affa:	b096      	sub	sp, #88	; 0x58
 800affc:	af00      	add	r7, sp, #0
 800affe:	60f8      	str	r0, [r7, #12]
 800b000:	60b9      	str	r1, [r7, #8]
 800b002:	4613      	mov	r3, r2
 800b004:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2200      	movs	r2, #0
 800b00a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b00c:	68f8      	ldr	r0, [r7, #12]
 800b00e:	f7ff ff58 	bl	800aec2 <get_ldnumber>
 800b012:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b016:	2b00      	cmp	r3, #0
 800b018:	da01      	bge.n	800b01e <find_volume+0x26>
 800b01a:	230b      	movs	r3, #11
 800b01c:	e22d      	b.n	800b47a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b01e:	4aa1      	ldr	r2, [pc, #644]	; (800b2a4 <find_volume+0x2ac>)
 800b020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b026:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d101      	bne.n	800b032 <find_volume+0x3a>
 800b02e:	230c      	movs	r3, #12
 800b030:	e223      	b.n	800b47a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b036:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b038:	79fb      	ldrb	r3, [r7, #7]
 800b03a:	f023 0301 	bic.w	r3, r3, #1
 800b03e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01a      	beq.n	800b07e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b04a:	785b      	ldrb	r3, [r3, #1]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f7fe fd17 	bl	8009a80 <disk_status>
 800b052:	4603      	mov	r3, r0
 800b054:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b05c:	f003 0301 	and.w	r3, r3, #1
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10c      	bne.n	800b07e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d007      	beq.n	800b07a <find_volume+0x82>
 800b06a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b06e:	f003 0304 	and.w	r3, r3, #4
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b076:	230a      	movs	r3, #10
 800b078:	e1ff      	b.n	800b47a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b07a:	2300      	movs	r3, #0
 800b07c:	e1fd      	b.n	800b47a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b080:	2200      	movs	r2, #0
 800b082:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b086:	b2da      	uxtb	r2, r3
 800b088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b08c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b08e:	785b      	ldrb	r3, [r3, #1]
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fd0f 	bl	8009ab4 <disk_initialize>
 800b096:	4603      	mov	r3, r0
 800b098:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b09c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0a0:	f003 0301 	and.w	r3, r3, #1
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d001      	beq.n	800b0ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b0a8:	2303      	movs	r3, #3
 800b0aa:	e1e6      	b.n	800b47a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b0ac:	79fb      	ldrb	r3, [r7, #7]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d007      	beq.n	800b0c2 <find_volume+0xca>
 800b0b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b0b6:	f003 0304 	and.w	r3, r3, #4
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b0be:	230a      	movs	r3, #10
 800b0c0:	e1db      	b.n	800b47a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b0c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b0c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0ca:	f7ff ff3f 	bl	800af4c <check_fs>
 800b0ce:	4603      	mov	r3, r0
 800b0d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b0d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d149      	bne.n	800b170 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b0dc:	2300      	movs	r3, #0
 800b0de:	643b      	str	r3, [r7, #64]	; 0x40
 800b0e0:	e01e      	b.n	800b120 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b0e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0ea:	011b      	lsls	r3, r3, #4
 800b0ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b0f0:	4413      	add	r3, r2
 800b0f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f6:	3304      	adds	r3, #4
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d006      	beq.n	800b10c <find_volume+0x114>
 800b0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b100:	3308      	adds	r3, #8
 800b102:	4618      	mov	r0, r3
 800b104:	f7fe fd72 	bl	8009bec <ld_dword>
 800b108:	4602      	mov	r2, r0
 800b10a:	e000      	b.n	800b10e <find_volume+0x116>
 800b10c:	2200      	movs	r2, #0
 800b10e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	3358      	adds	r3, #88	; 0x58
 800b114:	443b      	add	r3, r7
 800b116:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b11a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b11c:	3301      	adds	r3, #1
 800b11e:	643b      	str	r3, [r7, #64]	; 0x40
 800b120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b122:	2b03      	cmp	r3, #3
 800b124:	d9dd      	bls.n	800b0e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b126:	2300      	movs	r3, #0
 800b128:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b12a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <find_volume+0x13e>
 800b130:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b132:	3b01      	subs	r3, #1
 800b134:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	3358      	adds	r3, #88	; 0x58
 800b13c:	443b      	add	r3, r7
 800b13e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b142:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b146:	2b00      	cmp	r3, #0
 800b148:	d005      	beq.n	800b156 <find_volume+0x15e>
 800b14a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b14c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b14e:	f7ff fefd 	bl	800af4c <check_fs>
 800b152:	4603      	mov	r3, r0
 800b154:	e000      	b.n	800b158 <find_volume+0x160>
 800b156:	2303      	movs	r3, #3
 800b158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b15c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b160:	2b01      	cmp	r3, #1
 800b162:	d905      	bls.n	800b170 <find_volume+0x178>
 800b164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b166:	3301      	adds	r3, #1
 800b168:	643b      	str	r3, [r7, #64]	; 0x40
 800b16a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d9e2      	bls.n	800b136 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b174:	2b04      	cmp	r3, #4
 800b176:	d101      	bne.n	800b17c <find_volume+0x184>
 800b178:	2301      	movs	r3, #1
 800b17a:	e17e      	b.n	800b47a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b17c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b180:	2b01      	cmp	r3, #1
 800b182:	d901      	bls.n	800b188 <find_volume+0x190>
 800b184:	230d      	movs	r3, #13
 800b186:	e178      	b.n	800b47a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b18a:	3330      	adds	r3, #48	; 0x30
 800b18c:	330b      	adds	r3, #11
 800b18e:	4618      	mov	r0, r3
 800b190:	f7fe fd14 	bl	8009bbc <ld_word>
 800b194:	4603      	mov	r3, r0
 800b196:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b19a:	d001      	beq.n	800b1a0 <find_volume+0x1a8>
 800b19c:	230d      	movs	r3, #13
 800b19e:	e16c      	b.n	800b47a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a2:	3330      	adds	r3, #48	; 0x30
 800b1a4:	3316      	adds	r3, #22
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f7fe fd08 	bl	8009bbc <ld_word>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b1b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d106      	bne.n	800b1c4 <find_volume+0x1cc>
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	3330      	adds	r3, #48	; 0x30
 800b1ba:	3324      	adds	r3, #36	; 0x24
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f7fe fd15 	bl	8009bec <ld_dword>
 800b1c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	789b      	ldrb	r3, [r3, #2]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d005      	beq.n	800b1e8 <find_volume+0x1f0>
 800b1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1de:	789b      	ldrb	r3, [r3, #2]
 800b1e0:	2b02      	cmp	r3, #2
 800b1e2:	d001      	beq.n	800b1e8 <find_volume+0x1f0>
 800b1e4:	230d      	movs	r3, #13
 800b1e6:	e148      	b.n	800b47a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ea:	789b      	ldrb	r3, [r3, #2]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1f0:	fb02 f303 	mul.w	r3, r2, r3
 800b1f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b200:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b204:	895b      	ldrh	r3, [r3, #10]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d008      	beq.n	800b21c <find_volume+0x224>
 800b20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b20c:	895b      	ldrh	r3, [r3, #10]
 800b20e:	461a      	mov	r2, r3
 800b210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b212:	895b      	ldrh	r3, [r3, #10]
 800b214:	3b01      	subs	r3, #1
 800b216:	4013      	ands	r3, r2
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <find_volume+0x228>
 800b21c:	230d      	movs	r3, #13
 800b21e:	e12c      	b.n	800b47a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b222:	3330      	adds	r3, #48	; 0x30
 800b224:	3311      	adds	r3, #17
 800b226:	4618      	mov	r0, r3
 800b228:	f7fe fcc8 	bl	8009bbc <ld_word>
 800b22c:	4603      	mov	r3, r0
 800b22e:	461a      	mov	r2, r3
 800b230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b232:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b236:	891b      	ldrh	r3, [r3, #8]
 800b238:	f003 030f 	and.w	r3, r3, #15
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d001      	beq.n	800b246 <find_volume+0x24e>
 800b242:	230d      	movs	r3, #13
 800b244:	e119      	b.n	800b47a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b248:	3330      	adds	r3, #48	; 0x30
 800b24a:	3313      	adds	r3, #19
 800b24c:	4618      	mov	r0, r3
 800b24e:	f7fe fcb5 	bl	8009bbc <ld_word>
 800b252:	4603      	mov	r3, r0
 800b254:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d106      	bne.n	800b26a <find_volume+0x272>
 800b25c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b25e:	3330      	adds	r3, #48	; 0x30
 800b260:	3320      	adds	r3, #32
 800b262:	4618      	mov	r0, r3
 800b264:	f7fe fcc2 	bl	8009bec <ld_dword>
 800b268:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b26c:	3330      	adds	r3, #48	; 0x30
 800b26e:	330e      	adds	r3, #14
 800b270:	4618      	mov	r0, r3
 800b272:	f7fe fca3 	bl	8009bbc <ld_word>
 800b276:	4603      	mov	r3, r0
 800b278:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b27a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d101      	bne.n	800b284 <find_volume+0x28c>
 800b280:	230d      	movs	r3, #13
 800b282:	e0fa      	b.n	800b47a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b284:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b288:	4413      	add	r3, r2
 800b28a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b28c:	8912      	ldrh	r2, [r2, #8]
 800b28e:	0912      	lsrs	r2, r2, #4
 800b290:	b292      	uxth	r2, r2
 800b292:	4413      	add	r3, r2
 800b294:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b296:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d204      	bcs.n	800b2a8 <find_volume+0x2b0>
 800b29e:	230d      	movs	r3, #13
 800b2a0:	e0eb      	b.n	800b47a <find_volume+0x482>
 800b2a2:	bf00      	nop
 800b2a4:	20000760 	.word	0x20000760
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b2a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2b0:	8952      	ldrh	r2, [r2, #10]
 800b2b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <find_volume+0x2ca>
 800b2be:	230d      	movs	r3, #13
 800b2c0:	e0db      	b.n	800b47a <find_volume+0x482>
		fmt = FS_FAT32;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d802      	bhi.n	800b2d8 <find_volume+0x2e0>
 800b2d2:	2302      	movs	r3, #2
 800b2d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d802      	bhi.n	800b2e8 <find_volume+0x2f0>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	1c9a      	adds	r2, r3, #2
 800b2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b2f4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b2f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2fa:	441a      	add	r2, r3
 800b2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800b300:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b304:	441a      	add	r2, r3
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800b30a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d11e      	bne.n	800b350 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b314:	3330      	adds	r3, #48	; 0x30
 800b316:	332a      	adds	r3, #42	; 0x2a
 800b318:	4618      	mov	r0, r3
 800b31a:	f7fe fc4f 	bl	8009bbc <ld_word>
 800b31e:	4603      	mov	r3, r0
 800b320:	2b00      	cmp	r3, #0
 800b322:	d001      	beq.n	800b328 <find_volume+0x330>
 800b324:	230d      	movs	r3, #13
 800b326:	e0a8      	b.n	800b47a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b32a:	891b      	ldrh	r3, [r3, #8]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <find_volume+0x33c>
 800b330:	230d      	movs	r3, #13
 800b332:	e0a2      	b.n	800b47a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b336:	3330      	adds	r3, #48	; 0x30
 800b338:	332c      	adds	r3, #44	; 0x2c
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7fe fc56 	bl	8009bec <ld_dword>
 800b340:	4602      	mov	r2, r0
 800b342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b344:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	647b      	str	r3, [r7, #68]	; 0x44
 800b34e:	e01f      	b.n	800b390 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b352:	891b      	ldrh	r3, [r3, #8]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <find_volume+0x364>
 800b358:	230d      	movs	r3, #13
 800b35a:	e08e      	b.n	800b47a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b35e:	6a1a      	ldr	r2, [r3, #32]
 800b360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b362:	441a      	add	r2, r3
 800b364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b366:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b368:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d103      	bne.n	800b378 <find_volume+0x380>
 800b370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	005b      	lsls	r3, r3, #1
 800b376:	e00a      	b.n	800b38e <find_volume+0x396>
 800b378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b37a:	695a      	ldr	r2, [r3, #20]
 800b37c:	4613      	mov	r3, r2
 800b37e:	005b      	lsls	r3, r3, #1
 800b380:	4413      	add	r3, r2
 800b382:	085a      	lsrs	r2, r3, #1
 800b384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	f003 0301 	and.w	r3, r3, #1
 800b38c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b38e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b392:	699a      	ldr	r2, [r3, #24]
 800b394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b396:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800b39a:	0a5b      	lsrs	r3, r3, #9
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d201      	bcs.n	800b3a4 <find_volume+0x3ac>
 800b3a0:	230d      	movs	r3, #13
 800b3a2:	e06a      	b.n	800b47a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b3aa:	611a      	str	r2, [r3, #16]
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ae:	691a      	ldr	r2, [r3, #16]
 800b3b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800b3b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3b6:	2280      	movs	r2, #128	; 0x80
 800b3b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b3ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d149      	bne.n	800b456 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3c4:	3330      	adds	r3, #48	; 0x30
 800b3c6:	3330      	adds	r3, #48	; 0x30
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7fe fbf7 	bl	8009bbc <ld_word>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d140      	bne.n	800b456 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b3d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	4619      	mov	r1, r3
 800b3da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b3dc:	f7fe fe9e 	bl	800a11c <move_window>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d137      	bne.n	800b456 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800b3e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ee:	3330      	adds	r3, #48	; 0x30
 800b3f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f7fe fbe1 	bl	8009bbc <ld_word>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	461a      	mov	r2, r3
 800b3fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b402:	429a      	cmp	r2, r3
 800b404:	d127      	bne.n	800b456 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	3330      	adds	r3, #48	; 0x30
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7fe fbee 	bl	8009bec <ld_dword>
 800b410:	4603      	mov	r3, r0
 800b412:	4a1c      	ldr	r2, [pc, #112]	; (800b484 <find_volume+0x48c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d11e      	bne.n	800b456 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41a:	3330      	adds	r3, #48	; 0x30
 800b41c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b420:	4618      	mov	r0, r3
 800b422:	f7fe fbe3 	bl	8009bec <ld_dword>
 800b426:	4603      	mov	r3, r0
 800b428:	4a17      	ldr	r2, [pc, #92]	; (800b488 <find_volume+0x490>)
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d113      	bne.n	800b456 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b42e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b430:	3330      	adds	r3, #48	; 0x30
 800b432:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800b436:	4618      	mov	r0, r3
 800b438:	f7fe fbd8 	bl	8009bec <ld_dword>
 800b43c:	4602      	mov	r2, r0
 800b43e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b440:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	3330      	adds	r3, #48	; 0x30
 800b446:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fe fbce 	bl	8009bec <ld_dword>
 800b450:	4602      	mov	r2, r0
 800b452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b454:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b458:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800b45c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b45e:	4b0b      	ldr	r3, [pc, #44]	; (800b48c <find_volume+0x494>)
 800b460:	881b      	ldrh	r3, [r3, #0]
 800b462:	3301      	adds	r3, #1
 800b464:	b29a      	uxth	r2, r3
 800b466:	4b09      	ldr	r3, [pc, #36]	; (800b48c <find_volume+0x494>)
 800b468:	801a      	strh	r2, [r3, #0]
 800b46a:	4b08      	ldr	r3, [pc, #32]	; (800b48c <find_volume+0x494>)
 800b46c:	881a      	ldrh	r2, [r3, #0]
 800b46e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b470:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b472:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b474:	f7fe fdea 	bl	800a04c <clear_lock>
#endif
	return FR_OK;
 800b478:	2300      	movs	r3, #0
}
 800b47a:	4618      	mov	r0, r3
 800b47c:	3758      	adds	r7, #88	; 0x58
 800b47e:	46bd      	mov	sp, r7
 800b480:	bd80      	pop	{r7, pc}
 800b482:	bf00      	nop
 800b484:	41615252 	.word	0x41615252
 800b488:	61417272 	.word	0x61417272
 800b48c:	20000764 	.word	0x20000764

0800b490 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b49a:	2309      	movs	r3, #9
 800b49c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d01c      	beq.n	800b4de <validate+0x4e>
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d018      	beq.n	800b4de <validate+0x4e>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	781b      	ldrb	r3, [r3, #0]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d013      	beq.n	800b4de <validate+0x4e>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	889a      	ldrh	r2, [r3, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	88db      	ldrh	r3, [r3, #6]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d10c      	bne.n	800b4de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	785b      	ldrb	r3, [r3, #1]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe fad8 	bl	8009a80 <disk_status>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	f003 0301 	and.w	r3, r3, #1
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d101      	bne.n	800b4de <validate+0x4e>
			res = FR_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b4de:	7bfb      	ldrb	r3, [r7, #15]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d102      	bne.n	800b4ea <validate+0x5a>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	e000      	b.n	800b4ec <validate+0x5c>
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	683a      	ldr	r2, [r7, #0]
 800b4ee:	6013      	str	r3, [r2, #0]
	return res;
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
	...

0800b4fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b088      	sub	sp, #32
 800b500:	af00      	add	r7, sp, #0
 800b502:	60f8      	str	r0, [r7, #12]
 800b504:	60b9      	str	r1, [r7, #8]
 800b506:	4613      	mov	r3, r2
 800b508:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b50e:	f107 0310 	add.w	r3, r7, #16
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff fcd5 	bl	800aec2 <get_ldnumber>
 800b518:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	da01      	bge.n	800b524 <f_mount+0x28>
 800b520:	230b      	movs	r3, #11
 800b522:	e02b      	b.n	800b57c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b524:	4a17      	ldr	r2, [pc, #92]	; (800b584 <f_mount+0x88>)
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b52c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d005      	beq.n	800b540 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b534:	69b8      	ldr	r0, [r7, #24]
 800b536:	f7fe fd89 	bl	800a04c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	2200      	movs	r2, #0
 800b53e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d002      	beq.n	800b54c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	490d      	ldr	r1, [pc, #52]	; (800b584 <f_mount+0x88>)
 800b550:	69fb      	ldr	r3, [r7, #28]
 800b552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d002      	beq.n	800b562 <f_mount+0x66>
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d001      	beq.n	800b566 <f_mount+0x6a>
 800b562:	2300      	movs	r3, #0
 800b564:	e00a      	b.n	800b57c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b566:	f107 010c 	add.w	r1, r7, #12
 800b56a:	f107 0308 	add.w	r3, r7, #8
 800b56e:	2200      	movs	r2, #0
 800b570:	4618      	mov	r0, r3
 800b572:	f7ff fd41 	bl	800aff8 <find_volume>
 800b576:	4603      	mov	r3, r0
 800b578:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b57a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	3720      	adds	r7, #32
 800b580:	46bd      	mov	sp, r7
 800b582:	bd80      	pop	{r7, pc}
 800b584:	20000760 	.word	0x20000760

0800b588 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b098      	sub	sp, #96	; 0x60
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	60f8      	str	r0, [r7, #12]
 800b590:	60b9      	str	r1, [r7, #8]
 800b592:	4613      	mov	r3, r2
 800b594:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d101      	bne.n	800b5a0 <f_open+0x18>
 800b59c:	2309      	movs	r3, #9
 800b59e:	e1ad      	b.n	800b8fc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b5a0:	79fb      	ldrb	r3, [r7, #7]
 800b5a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b5a8:	79fa      	ldrb	r2, [r7, #7]
 800b5aa:	f107 0110 	add.w	r1, r7, #16
 800b5ae:	f107 0308 	add.w	r3, r7, #8
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fd20 	bl	800aff8 <find_volume>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800b5be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	f040 8191 	bne.w	800b8ea <f_open+0x362>
		dj.obj.fs = fs;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	f107 0314 	add.w	r3, r7, #20
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff fc03 	bl	800ade0 <follow_path>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b5e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d11a      	bne.n	800b61e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b5e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5ec:	b25b      	sxtb	r3, r3
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	da03      	bge.n	800b5fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800b5f2:	2306      	movs	r3, #6
 800b5f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b5f8:	e011      	b.n	800b61e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b5fa:	79fb      	ldrb	r3, [r7, #7]
 800b5fc:	f023 0301 	bic.w	r3, r3, #1
 800b600:	2b00      	cmp	r3, #0
 800b602:	bf14      	ite	ne
 800b604:	2301      	movne	r3, #1
 800b606:	2300      	moveq	r3, #0
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	461a      	mov	r2, r3
 800b60c:	f107 0314 	add.w	r3, r7, #20
 800b610:	4611      	mov	r1, r2
 800b612:	4618      	mov	r0, r3
 800b614:	f7fe fbd2 	bl	8009dbc <chk_lock>
 800b618:	4603      	mov	r3, r0
 800b61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b61e:	79fb      	ldrb	r3, [r7, #7]
 800b620:	f003 031c 	and.w	r3, r3, #28
 800b624:	2b00      	cmp	r3, #0
 800b626:	d07f      	beq.n	800b728 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800b628:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d017      	beq.n	800b660 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b634:	2b04      	cmp	r3, #4
 800b636:	d10e      	bne.n	800b656 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b638:	f7fe fc1c 	bl	8009e74 <enq_lock>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d006      	beq.n	800b650 <f_open+0xc8>
 800b642:	f107 0314 	add.w	r3, r7, #20
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fb03 	bl	800ac52 <dir_register>
 800b64c:	4603      	mov	r3, r0
 800b64e:	e000      	b.n	800b652 <f_open+0xca>
 800b650:	2312      	movs	r3, #18
 800b652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b656:	79fb      	ldrb	r3, [r7, #7]
 800b658:	f043 0308 	orr.w	r3, r3, #8
 800b65c:	71fb      	strb	r3, [r7, #7]
 800b65e:	e010      	b.n	800b682 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b660:	7ebb      	ldrb	r3, [r7, #26]
 800b662:	f003 0311 	and.w	r3, r3, #17
 800b666:	2b00      	cmp	r3, #0
 800b668:	d003      	beq.n	800b672 <f_open+0xea>
					res = FR_DENIED;
 800b66a:	2307      	movs	r3, #7
 800b66c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b670:	e007      	b.n	800b682 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b672:	79fb      	ldrb	r3, [r7, #7]
 800b674:	f003 0304 	and.w	r3, r3, #4
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d002      	beq.n	800b682 <f_open+0xfa>
 800b67c:	2308      	movs	r3, #8
 800b67e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b686:	2b00      	cmp	r3, #0
 800b688:	d168      	bne.n	800b75c <f_open+0x1d4>
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	f003 0308 	and.w	r3, r3, #8
 800b690:	2b00      	cmp	r3, #0
 800b692:	d063      	beq.n	800b75c <f_open+0x1d4>
				dw = GET_FATTIME();
 800b694:	f7fd fcba 	bl	800900c <get_fattime>
 800b698:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	330e      	adds	r3, #14
 800b69e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f7fe fae1 	bl	8009c68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b6a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6a8:	3316      	adds	r3, #22
 800b6aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe fadb 	bl	8009c68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b4:	330b      	adds	r3, #11
 800b6b6:	2220      	movs	r2, #32
 800b6b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f7ff fa32 	bl	800ab2a <ld_clust>
 800b6c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff fa4a 	bl	800ab68 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d6:	331c      	adds	r3, #28
 800b6d8:	2100      	movs	r1, #0
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f7fe fac4 	bl	8009c68 <st_dword>
					fs->wflag = 1;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	2201      	movs	r2, #1
 800b6e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d037      	beq.n	800b75c <f_open+0x1d4>
						dw = fs->winsect;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b6f2:	f107 0314 	add.w	r3, r7, #20
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fe ff5d 	bl	800a5ba <remove_chain>
 800b700:	4603      	mov	r3, r0
 800b702:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800b706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d126      	bne.n	800b75c <f_open+0x1d4>
							res = move_window(fs, dw);
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fd02 	bl	800a11c <move_window>
 800b718:	4603      	mov	r3, r0
 800b71a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b722:	3a01      	subs	r2, #1
 800b724:	60da      	str	r2, [r3, #12]
 800b726:	e019      	b.n	800b75c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b728:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d115      	bne.n	800b75c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b730:	7ebb      	ldrb	r3, [r7, #26]
 800b732:	f003 0310 	and.w	r3, r3, #16
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <f_open+0x1ba>
					res = FR_NO_FILE;
 800b73a:	2304      	movs	r3, #4
 800b73c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b740:	e00c      	b.n	800b75c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b742:	79fb      	ldrb	r3, [r7, #7]
 800b744:	f003 0302 	and.w	r3, r3, #2
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d007      	beq.n	800b75c <f_open+0x1d4>
 800b74c:	7ebb      	ldrb	r3, [r7, #26]
 800b74e:	f003 0301 	and.w	r3, r3, #1
 800b752:	2b00      	cmp	r3, #0
 800b754:	d002      	beq.n	800b75c <f_open+0x1d4>
						res = FR_DENIED;
 800b756:	2307      	movs	r3, #7
 800b758:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b75c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b760:	2b00      	cmp	r3, #0
 800b762:	d128      	bne.n	800b7b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	f003 0308 	and.w	r3, r3, #8
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d003      	beq.n	800b776 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800b76e:	79fb      	ldrb	r3, [r7, #7]
 800b770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b774:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800b77e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	f023 0301 	bic.w	r3, r3, #1
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	bf14      	ite	ne
 800b78e:	2301      	movne	r3, #1
 800b790:	2300      	moveq	r3, #0
 800b792:	b2db      	uxtb	r3, r3
 800b794:	461a      	mov	r2, r3
 800b796:	f107 0314 	add.w	r3, r7, #20
 800b79a:	4611      	mov	r1, r2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe fb8b 	bl	8009eb8 <inc_lock>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	691b      	ldr	r3, [r3, #16]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d102      	bne.n	800b7b6 <f_open+0x22e>
 800b7b0:	2302      	movs	r3, #2
 800b7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b7b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f040 8095 	bne.w	800b8ea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff f9af 	bl	800ab2a <ld_clust>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b7d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d4:	331c      	adds	r3, #28
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f7fe fa08 	bl	8009bec <ld_dword>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800b7e8:	693a      	ldr	r2, [r7, #16]
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	88da      	ldrh	r2, [r3, #6]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	79fa      	ldrb	r2, [r7, #7]
 800b7fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	2200      	movs	r2, #0
 800b806:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2200      	movs	r2, #0
 800b80c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	3330      	adds	r3, #48	; 0x30
 800b812:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b816:	2100      	movs	r1, #0
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fe fa72 	bl	8009d02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800b81e:	79fb      	ldrb	r3, [r7, #7]
 800b820:	f003 0320 	and.w	r3, r3, #32
 800b824:	2b00      	cmp	r3, #0
 800b826:	d060      	beq.n	800b8ea <f_open+0x362>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d05c      	beq.n	800b8ea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	68da      	ldr	r2, [r3, #12]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	895b      	ldrh	r3, [r3, #10]
 800b83c:	025b      	lsls	r3, r3, #9
 800b83e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	68db      	ldr	r3, [r3, #12]
 800b84a:	657b      	str	r3, [r7, #84]	; 0x54
 800b84c:	e016      	b.n	800b87c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fd1d 	bl	800a292 <get_fat>
 800b858:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800b85a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b85c:	2b01      	cmp	r3, #1
 800b85e:	d802      	bhi.n	800b866 <f_open+0x2de>
 800b860:	2302      	movs	r3, #2
 800b862:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800b866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b86c:	d102      	bne.n	800b874 <f_open+0x2ec>
 800b86e:	2301      	movs	r3, #1
 800b870:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800b874:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	657b      	str	r3, [r7, #84]	; 0x54
 800b87c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b880:	2b00      	cmp	r3, #0
 800b882:	d103      	bne.n	800b88c <f_open+0x304>
 800b884:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b888:	429a      	cmp	r2, r3
 800b88a:	d8e0      	bhi.n	800b84e <f_open+0x2c6>
				}
				fp->clust = clst;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b890:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800b892:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b896:	2b00      	cmp	r3, #0
 800b898:	d127      	bne.n	800b8ea <f_open+0x362>
 800b89a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b89c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d022      	beq.n	800b8ea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f7fe fcd3 	bl	800a254 <clust2sect>
 800b8ae:	6478      	str	r0, [r7, #68]	; 0x44
 800b8b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d103      	bne.n	800b8be <f_open+0x336>
						res = FR_INT_ERR;
 800b8b6:	2302      	movs	r3, #2
 800b8b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800b8bc:	e015      	b.n	800b8ea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800b8be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b8c0:	0a5a      	lsrs	r2, r3, #9
 800b8c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8c4:	441a      	add	r2, r3
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	7858      	ldrb	r0, [r3, #1]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	6a1a      	ldr	r2, [r3, #32]
 800b8d8:	2301      	movs	r3, #1
 800b8da:	f7fe f911 	bl	8009b00 <disk_read>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d002      	beq.n	800b8ea <f_open+0x362>
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800b8ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d002      	beq.n	800b8f8 <f_open+0x370>
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800b8f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3760      	adds	r7, #96	; 0x60
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}

0800b904 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08c      	sub	sp, #48	; 0x30
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
 800b910:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2200      	movs	r2, #0
 800b91a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f107 0210 	add.w	r2, r7, #16
 800b922:	4611      	mov	r1, r2
 800b924:	4618      	mov	r0, r3
 800b926:	f7ff fdb3 	bl	800b490 <validate>
 800b92a:	4603      	mov	r3, r0
 800b92c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800b930:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b934:	2b00      	cmp	r3, #0
 800b936:	d107      	bne.n	800b948 <f_write+0x44>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	7d5b      	ldrb	r3, [r3, #21]
 800b93c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800b940:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <f_write+0x4a>
 800b948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b94c:	e14b      	b.n	800bbe6 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	7d1b      	ldrb	r3, [r3, #20]
 800b952:	f003 0302 	and.w	r3, r3, #2
 800b956:	2b00      	cmp	r3, #0
 800b958:	d101      	bne.n	800b95e <f_write+0x5a>
 800b95a:	2307      	movs	r3, #7
 800b95c:	e143      	b.n	800bbe6 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	699a      	ldr	r2, [r3, #24]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	441a      	add	r2, r3
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	699b      	ldr	r3, [r3, #24]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	f080 812d 	bcs.w	800bbca <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	43db      	mvns	r3, r3
 800b976:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800b978:	e127      	b.n	800bbca <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	699b      	ldr	r3, [r3, #24]
 800b97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b982:	2b00      	cmp	r3, #0
 800b984:	f040 80e3 	bne.w	800bb4e <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	699b      	ldr	r3, [r3, #24]
 800b98c:	0a5b      	lsrs	r3, r3, #9
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	8952      	ldrh	r2, [r2, #10]
 800b992:	3a01      	subs	r2, #1
 800b994:	4013      	ands	r3, r2
 800b996:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d143      	bne.n	800ba26 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	699b      	ldr	r3, [r3, #24]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10c      	bne.n	800b9c0 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	689b      	ldr	r3, [r3, #8]
 800b9aa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800b9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d11a      	bne.n	800b9e8 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	2100      	movs	r1, #0
 800b9b6:	4618      	mov	r0, r3
 800b9b8:	f7fe fe64 	bl	800a684 <create_chain>
 800b9bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9be:	e013      	b.n	800b9e8 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d007      	beq.n	800b9d8 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	f7fe fef0 	bl	800a7b4 <clmt_clust>
 800b9d4:	62b8      	str	r0, [r7, #40]	; 0x28
 800b9d6:	e007      	b.n	800b9e8 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800b9d8:	68fa      	ldr	r2, [r7, #12]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	69db      	ldr	r3, [r3, #28]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	f7fe fe4f 	bl	800a684 <create_chain>
 800b9e6:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800b9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	f000 80f2 	beq.w	800bbd4 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	2b01      	cmp	r3, #1
 800b9f4:	d104      	bne.n	800ba00 <f_write+0xfc>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2202      	movs	r2, #2
 800b9fa:	755a      	strb	r2, [r3, #21]
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e0f2      	b.n	800bbe6 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ba00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba06:	d104      	bne.n	800ba12 <f_write+0x10e>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	755a      	strb	r2, [r3, #21]
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e0e9      	b.n	800bbe6 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba16:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d102      	bne.n	800ba26 <f_write+0x122>
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba24:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	7d1b      	ldrb	r3, [r3, #20]
 800ba2a:	b25b      	sxtb	r3, r3
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	da18      	bge.n	800ba62 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	7858      	ldrb	r0, [r3, #1]
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	6a1a      	ldr	r2, [r3, #32]
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f7fe f87e 	bl	8009b40 <disk_write>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d004      	beq.n	800ba54 <f_write+0x150>
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	755a      	strb	r2, [r3, #21]
 800ba50:	2301      	movs	r3, #1
 800ba52:	e0c8      	b.n	800bbe6 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	7d1b      	ldrb	r3, [r3, #20]
 800ba58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba5c:	b2da      	uxtb	r2, r3
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ba62:	693a      	ldr	r2, [r7, #16]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	69db      	ldr	r3, [r3, #28]
 800ba68:	4619      	mov	r1, r3
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	f7fe fbf2 	bl	800a254 <clust2sect>
 800ba70:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ba72:	697b      	ldr	r3, [r7, #20]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d104      	bne.n	800ba82 <f_write+0x17e>
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2202      	movs	r2, #2
 800ba7c:	755a      	strb	r2, [r3, #21]
 800ba7e:	2302      	movs	r3, #2
 800ba80:	e0b1      	b.n	800bbe6 <f_write+0x2e2>
			sect += csect;
 800ba82:	697a      	ldr	r2, [r7, #20]
 800ba84:	69bb      	ldr	r3, [r7, #24]
 800ba86:	4413      	add	r3, r2
 800ba88:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	0a5b      	lsrs	r3, r3, #9
 800ba8e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ba90:	6a3b      	ldr	r3, [r7, #32]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d03c      	beq.n	800bb10 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ba96:	69ba      	ldr	r2, [r7, #24]
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	693a      	ldr	r2, [r7, #16]
 800ba9e:	8952      	ldrh	r2, [r2, #10]
 800baa0:	4293      	cmp	r3, r2
 800baa2:	d905      	bls.n	800bab0 <f_write+0x1ac>
					cc = fs->csize - csect;
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	895b      	ldrh	r3, [r3, #10]
 800baa8:	461a      	mov	r2, r3
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	7858      	ldrb	r0, [r3, #1]
 800bab4:	6a3b      	ldr	r3, [r7, #32]
 800bab6:	697a      	ldr	r2, [r7, #20]
 800bab8:	69f9      	ldr	r1, [r7, #28]
 800baba:	f7fe f841 	bl	8009b40 <disk_write>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d004      	beq.n	800bace <f_write+0x1ca>
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2201      	movs	r2, #1
 800bac8:	755a      	strb	r2, [r3, #21]
 800baca:	2301      	movs	r3, #1
 800bacc:	e08b      	b.n	800bbe6 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	6a1a      	ldr	r2, [r3, #32]
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	1ad3      	subs	r3, r2, r3
 800bad6:	6a3a      	ldr	r2, [r7, #32]
 800bad8:	429a      	cmp	r2, r3
 800bada:	d915      	bls.n	800bb08 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a1a      	ldr	r2, [r3, #32]
 800bae6:	697b      	ldr	r3, [r7, #20]
 800bae8:	1ad3      	subs	r3, r2, r3
 800baea:	025b      	lsls	r3, r3, #9
 800baec:	69fa      	ldr	r2, [r7, #28]
 800baee:	4413      	add	r3, r2
 800baf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800baf4:	4619      	mov	r1, r3
 800baf6:	f7fe f8e3 	bl	8009cc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	7d1b      	ldrb	r3, [r3, #20]
 800bafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	025b      	lsls	r3, r3, #9
 800bb0c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800bb0e:	e03f      	b.n	800bb90 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	6a1b      	ldr	r3, [r3, #32]
 800bb14:	697a      	ldr	r2, [r7, #20]
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d016      	beq.n	800bb48 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	699a      	ldr	r2, [r3, #24]
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d210      	bcs.n	800bb48 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	7858      	ldrb	r0, [r3, #1]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bb30:	2301      	movs	r3, #1
 800bb32:	697a      	ldr	r2, [r7, #20]
 800bb34:	f7fd ffe4 	bl	8009b00 <disk_read>
 800bb38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d004      	beq.n	800bb48 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2201      	movs	r2, #1
 800bb42:	755a      	strb	r2, [r3, #21]
 800bb44:	2301      	movs	r3, #1
 800bb46:	e04e      	b.n	800bbe6 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb56:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800bb5a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800bb5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d901      	bls.n	800bb68 <f_write+0x264>
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	699b      	ldr	r3, [r3, #24]
 800bb72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb76:	4413      	add	r3, r2
 800bb78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bb7a:	69f9      	ldr	r1, [r7, #28]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7fe f89f 	bl	8009cc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	7d1b      	ldrb	r3, [r3, #20]
 800bb86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800bb90:	69fa      	ldr	r2, [r7, #28]
 800bb92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb94:	4413      	add	r3, r2
 800bb96:	61fb      	str	r3, [r7, #28]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	699a      	ldr	r2, [r3, #24]
 800bb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb9e:	441a      	add	r2, r3
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	619a      	str	r2, [r3, #24]
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	68da      	ldr	r2, [r3, #12]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	699b      	ldr	r3, [r3, #24]
 800bbac:	429a      	cmp	r2, r3
 800bbae:	bf38      	it	cc
 800bbb0:	461a      	movcc	r2, r3
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	60da      	str	r2, [r3, #12]
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbc:	441a      	add	r2, r3
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	601a      	str	r2, [r3, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	f47f aed4 	bne.w	800b97a <f_write+0x76>
 800bbd2:	e000      	b.n	800bbd6 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bbd4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	7d1b      	ldrb	r3, [r3, #20]
 800bbda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3730      	adds	r7, #48	; 0x30
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b086      	sub	sp, #24
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f107 0208 	add.w	r2, r7, #8
 800bbfc:	4611      	mov	r1, r2
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7ff fc46 	bl	800b490 <validate>
 800bc04:	4603      	mov	r3, r0
 800bc06:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bc08:	7dfb      	ldrb	r3, [r7, #23]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d168      	bne.n	800bce0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	7d1b      	ldrb	r3, [r3, #20]
 800bc12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d062      	beq.n	800bce0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	7d1b      	ldrb	r3, [r3, #20]
 800bc1e:	b25b      	sxtb	r3, r3
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	da15      	bge.n	800bc50 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	7858      	ldrb	r0, [r3, #1]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6a1a      	ldr	r2, [r3, #32]
 800bc32:	2301      	movs	r3, #1
 800bc34:	f7fd ff84 	bl	8009b40 <disk_write>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <f_sync+0x54>
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e04f      	b.n	800bce2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7d1b      	ldrb	r3, [r3, #20]
 800bc46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc4a:	b2da      	uxtb	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800bc50:	f7fd f9dc 	bl	800900c <get_fattime>
 800bc54:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800bc56:	68ba      	ldr	r2, [r7, #8]
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	4610      	mov	r0, r2
 800bc60:	f7fe fa5c 	bl	800a11c <move_window>
 800bc64:	4603      	mov	r3, r0
 800bc66:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800bc68:	7dfb      	ldrb	r3, [r7, #23]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d138      	bne.n	800bce0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	330b      	adds	r3, #11
 800bc78:	781a      	ldrb	r2, [r3, #0]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	330b      	adds	r3, #11
 800bc7e:	f042 0220 	orr.w	r2, r2, #32
 800bc82:	b2d2      	uxtb	r2, r2
 800bc84:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	461a      	mov	r2, r3
 800bc90:	68f9      	ldr	r1, [r7, #12]
 800bc92:	f7fe ff69 	bl	800ab68 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f103 021c 	add.w	r2, r3, #28
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fd ffe0 	bl	8009c68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	3316      	adds	r3, #22
 800bcac:	6939      	ldr	r1, [r7, #16]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fd ffda 	bl	8009c68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	3312      	adds	r3, #18
 800bcb8:	2100      	movs	r1, #0
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7fd ffb9 	bl	8009c32 <st_word>
					fs->wflag = 1;
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fa55 	bl	800a178 <sync_fs>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	7d1b      	ldrb	r3, [r3, #20]
 800bcd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcda:	b2da      	uxtb	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800bce0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3718      	adds	r7, #24
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b084      	sub	sp, #16
 800bcee:	af00      	add	r7, sp, #0
 800bcf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff ff7b 	bl	800bbee <f_sync>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d118      	bne.n	800bd34 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f107 0208 	add.w	r2, r7, #8
 800bd08:	4611      	mov	r1, r2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7ff fbc0 	bl	800b490 <validate>
 800bd10:	4603      	mov	r3, r0
 800bd12:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bd14:	7bfb      	ldrb	r3, [r7, #15]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10c      	bne.n	800bd34 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7fe f958 	bl	8009fd4 <dec_lock>
 800bd24:	4603      	mov	r3, r0
 800bd26:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
	...

0800bd40 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800bd40:	b480      	push	{r7}
 800bd42:	b087      	sub	sp, #28
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800bd52:	2300      	movs	r3, #0
 800bd54:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800bd56:	4b1f      	ldr	r3, [pc, #124]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd58:	7a5b      	ldrb	r3, [r3, #9]
 800bd5a:	b2db      	uxtb	r3, r3
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d131      	bne.n	800bdc4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800bd60:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd62:	7a5b      	ldrb	r3, [r3, #9]
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	461a      	mov	r2, r3
 800bd68:	4b1a      	ldr	r3, [pc, #104]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800bd6e:	4b19      	ldr	r3, [pc, #100]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd70:	7a5b      	ldrb	r3, [r3, #9]
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	4a17      	ldr	r2, [pc, #92]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd76:	009b      	lsls	r3, r3, #2
 800bd78:	4413      	add	r3, r2
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800bd7e:	4b15      	ldr	r3, [pc, #84]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd80:	7a5b      	ldrb	r3, [r3, #9]
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	461a      	mov	r2, r3
 800bd86:	4b13      	ldr	r3, [pc, #76]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd88:	4413      	add	r3, r2
 800bd8a:	79fa      	ldrb	r2, [r7, #7]
 800bd8c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800bd8e:	4b11      	ldr	r3, [pc, #68]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd90:	7a5b      	ldrb	r3, [r3, #9]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	1c5a      	adds	r2, r3, #1
 800bd96:	b2d1      	uxtb	r1, r2
 800bd98:	4a0e      	ldr	r2, [pc, #56]	; (800bdd4 <FATFS_LinkDriverEx+0x94>)
 800bd9a:	7251      	strb	r1, [r2, #9]
 800bd9c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800bd9e:	7dbb      	ldrb	r3, [r7, #22]
 800bda0:	3330      	adds	r3, #48	; 0x30
 800bda2:	b2da      	uxtb	r2, r3
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	223a      	movs	r2, #58	; 0x3a
 800bdae:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	3302      	adds	r3, #2
 800bdb4:	222f      	movs	r2, #47	; 0x2f
 800bdb6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	3303      	adds	r3, #3
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800bdc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	371c      	adds	r7, #28
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr
 800bdd2:	bf00      	nop
 800bdd4:	20000788 	.word	0x20000788

0800bdd8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b082      	sub	sp, #8
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
 800bde0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800bde2:	2200      	movs	r2, #0
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f7ff ffaa 	bl	800bd40 <FATFS_LinkDriverEx>
 800bdec:	4603      	mov	r3, r0
}
 800bdee:	4618      	mov	r0, r3
 800bdf0:	3708      	adds	r7, #8
 800bdf2:	46bd      	mov	sp, r7
 800bdf4:	bd80      	pop	{r7, pc}
	...

0800bdf8 <__assert_func>:
 800bdf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdfa:	4614      	mov	r4, r2
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4b09      	ldr	r3, [pc, #36]	; (800be24 <__assert_func+0x2c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4605      	mov	r5, r0
 800be04:	68d8      	ldr	r0, [r3, #12]
 800be06:	b14c      	cbz	r4, 800be1c <__assert_func+0x24>
 800be08:	4b07      	ldr	r3, [pc, #28]	; (800be28 <__assert_func+0x30>)
 800be0a:	9100      	str	r1, [sp, #0]
 800be0c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be10:	4906      	ldr	r1, [pc, #24]	; (800be2c <__assert_func+0x34>)
 800be12:	462b      	mov	r3, r5
 800be14:	f000 f818 	bl	800be48 <fiprintf>
 800be18:	f001 f86e 	bl	800cef8 <abort>
 800be1c:	4b04      	ldr	r3, [pc, #16]	; (800be30 <__assert_func+0x38>)
 800be1e:	461c      	mov	r4, r3
 800be20:	e7f3      	b.n	800be0a <__assert_func+0x12>
 800be22:	bf00      	nop
 800be24:	20000228 	.word	0x20000228
 800be28:	0800f3c4 	.word	0x0800f3c4
 800be2c:	0800f3d1 	.word	0x0800f3d1
 800be30:	0800f3ff 	.word	0x0800f3ff

0800be34 <atoi>:
 800be34:	220a      	movs	r2, #10
 800be36:	2100      	movs	r1, #0
 800be38:	f000 bf5a 	b.w	800ccf0 <strtol>

0800be3c <__errno>:
 800be3c:	4b01      	ldr	r3, [pc, #4]	; (800be44 <__errno+0x8>)
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	4770      	bx	lr
 800be42:	bf00      	nop
 800be44:	20000228 	.word	0x20000228

0800be48 <fiprintf>:
 800be48:	b40e      	push	{r1, r2, r3}
 800be4a:	b503      	push	{r0, r1, lr}
 800be4c:	4601      	mov	r1, r0
 800be4e:	ab03      	add	r3, sp, #12
 800be50:	4805      	ldr	r0, [pc, #20]	; (800be68 <fiprintf+0x20>)
 800be52:	f853 2b04 	ldr.w	r2, [r3], #4
 800be56:	6800      	ldr	r0, [r0, #0]
 800be58:	9301      	str	r3, [sp, #4]
 800be5a:	f000 f86b 	bl	800bf34 <_vfiprintf_r>
 800be5e:	b002      	add	sp, #8
 800be60:	f85d eb04 	ldr.w	lr, [sp], #4
 800be64:	b003      	add	sp, #12
 800be66:	4770      	bx	lr
 800be68:	20000228 	.word	0x20000228

0800be6c <__libc_init_array>:
 800be6c:	b570      	push	{r4, r5, r6, lr}
 800be6e:	4d0d      	ldr	r5, [pc, #52]	; (800bea4 <__libc_init_array+0x38>)
 800be70:	4c0d      	ldr	r4, [pc, #52]	; (800bea8 <__libc_init_array+0x3c>)
 800be72:	1b64      	subs	r4, r4, r5
 800be74:	10a4      	asrs	r4, r4, #2
 800be76:	2600      	movs	r6, #0
 800be78:	42a6      	cmp	r6, r4
 800be7a:	d109      	bne.n	800be90 <__libc_init_array+0x24>
 800be7c:	4d0b      	ldr	r5, [pc, #44]	; (800beac <__libc_init_array+0x40>)
 800be7e:	4c0c      	ldr	r4, [pc, #48]	; (800beb0 <__libc_init_array+0x44>)
 800be80:	f003 f83a 	bl	800eef8 <_init>
 800be84:	1b64      	subs	r4, r4, r5
 800be86:	10a4      	asrs	r4, r4, #2
 800be88:	2600      	movs	r6, #0
 800be8a:	42a6      	cmp	r6, r4
 800be8c:	d105      	bne.n	800be9a <__libc_init_array+0x2e>
 800be8e:	bd70      	pop	{r4, r5, r6, pc}
 800be90:	f855 3b04 	ldr.w	r3, [r5], #4
 800be94:	4798      	blx	r3
 800be96:	3601      	adds	r6, #1
 800be98:	e7ee      	b.n	800be78 <__libc_init_array+0xc>
 800be9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800be9e:	4798      	blx	r3
 800bea0:	3601      	adds	r6, #1
 800bea2:	e7f2      	b.n	800be8a <__libc_init_array+0x1e>
 800bea4:	0800f7a8 	.word	0x0800f7a8
 800bea8:	0800f7a8 	.word	0x0800f7a8
 800beac:	0800f7a8 	.word	0x0800f7a8
 800beb0:	0800f7ac 	.word	0x0800f7ac

0800beb4 <memcpy>:
 800beb4:	440a      	add	r2, r1
 800beb6:	4291      	cmp	r1, r2
 800beb8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bebc:	d100      	bne.n	800bec0 <memcpy+0xc>
 800bebe:	4770      	bx	lr
 800bec0:	b510      	push	{r4, lr}
 800bec2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bec6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800beca:	4291      	cmp	r1, r2
 800becc:	d1f9      	bne.n	800bec2 <memcpy+0xe>
 800bece:	bd10      	pop	{r4, pc}

0800bed0 <memset>:
 800bed0:	4402      	add	r2, r0
 800bed2:	4603      	mov	r3, r0
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d100      	bne.n	800beda <memset+0xa>
 800bed8:	4770      	bx	lr
 800beda:	f803 1b01 	strb.w	r1, [r3], #1
 800bede:	e7f9      	b.n	800bed4 <memset+0x4>

0800bee0 <__sfputc_r>:
 800bee0:	6893      	ldr	r3, [r2, #8]
 800bee2:	3b01      	subs	r3, #1
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	b410      	push	{r4}
 800bee8:	6093      	str	r3, [r2, #8]
 800beea:	da08      	bge.n	800befe <__sfputc_r+0x1e>
 800beec:	6994      	ldr	r4, [r2, #24]
 800beee:	42a3      	cmp	r3, r4
 800bef0:	db01      	blt.n	800bef6 <__sfputc_r+0x16>
 800bef2:	290a      	cmp	r1, #10
 800bef4:	d103      	bne.n	800befe <__sfputc_r+0x1e>
 800bef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800befa:	f000 bf3d 	b.w	800cd78 <__swbuf_r>
 800befe:	6813      	ldr	r3, [r2, #0]
 800bf00:	1c58      	adds	r0, r3, #1
 800bf02:	6010      	str	r0, [r2, #0]
 800bf04:	7019      	strb	r1, [r3, #0]
 800bf06:	4608      	mov	r0, r1
 800bf08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <__sfputs_r>:
 800bf0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf10:	4606      	mov	r6, r0
 800bf12:	460f      	mov	r7, r1
 800bf14:	4614      	mov	r4, r2
 800bf16:	18d5      	adds	r5, r2, r3
 800bf18:	42ac      	cmp	r4, r5
 800bf1a:	d101      	bne.n	800bf20 <__sfputs_r+0x12>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	e007      	b.n	800bf30 <__sfputs_r+0x22>
 800bf20:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf24:	463a      	mov	r2, r7
 800bf26:	4630      	mov	r0, r6
 800bf28:	f7ff ffda 	bl	800bee0 <__sfputc_r>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d1f3      	bne.n	800bf18 <__sfputs_r+0xa>
 800bf30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bf34 <_vfiprintf_r>:
 800bf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf38:	460d      	mov	r5, r1
 800bf3a:	b09d      	sub	sp, #116	; 0x74
 800bf3c:	4614      	mov	r4, r2
 800bf3e:	4698      	mov	r8, r3
 800bf40:	4606      	mov	r6, r0
 800bf42:	b118      	cbz	r0, 800bf4c <_vfiprintf_r+0x18>
 800bf44:	6983      	ldr	r3, [r0, #24]
 800bf46:	b90b      	cbnz	r3, 800bf4c <_vfiprintf_r+0x18>
 800bf48:	f001 ff72 	bl	800de30 <__sinit>
 800bf4c:	4b89      	ldr	r3, [pc, #548]	; (800c174 <_vfiprintf_r+0x240>)
 800bf4e:	429d      	cmp	r5, r3
 800bf50:	d11b      	bne.n	800bf8a <_vfiprintf_r+0x56>
 800bf52:	6875      	ldr	r5, [r6, #4]
 800bf54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf56:	07d9      	lsls	r1, r3, #31
 800bf58:	d405      	bmi.n	800bf66 <_vfiprintf_r+0x32>
 800bf5a:	89ab      	ldrh	r3, [r5, #12]
 800bf5c:	059a      	lsls	r2, r3, #22
 800bf5e:	d402      	bmi.n	800bf66 <_vfiprintf_r+0x32>
 800bf60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf62:	f002 f808 	bl	800df76 <__retarget_lock_acquire_recursive>
 800bf66:	89ab      	ldrh	r3, [r5, #12]
 800bf68:	071b      	lsls	r3, r3, #28
 800bf6a:	d501      	bpl.n	800bf70 <_vfiprintf_r+0x3c>
 800bf6c:	692b      	ldr	r3, [r5, #16]
 800bf6e:	b9eb      	cbnz	r3, 800bfac <_vfiprintf_r+0x78>
 800bf70:	4629      	mov	r1, r5
 800bf72:	4630      	mov	r0, r6
 800bf74:	f000 ff52 	bl	800ce1c <__swsetup_r>
 800bf78:	b1c0      	cbz	r0, 800bfac <_vfiprintf_r+0x78>
 800bf7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf7c:	07dc      	lsls	r4, r3, #31
 800bf7e:	d50e      	bpl.n	800bf9e <_vfiprintf_r+0x6a>
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	b01d      	add	sp, #116	; 0x74
 800bf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf8a:	4b7b      	ldr	r3, [pc, #492]	; (800c178 <_vfiprintf_r+0x244>)
 800bf8c:	429d      	cmp	r5, r3
 800bf8e:	d101      	bne.n	800bf94 <_vfiprintf_r+0x60>
 800bf90:	68b5      	ldr	r5, [r6, #8]
 800bf92:	e7df      	b.n	800bf54 <_vfiprintf_r+0x20>
 800bf94:	4b79      	ldr	r3, [pc, #484]	; (800c17c <_vfiprintf_r+0x248>)
 800bf96:	429d      	cmp	r5, r3
 800bf98:	bf08      	it	eq
 800bf9a:	68f5      	ldreq	r5, [r6, #12]
 800bf9c:	e7da      	b.n	800bf54 <_vfiprintf_r+0x20>
 800bf9e:	89ab      	ldrh	r3, [r5, #12]
 800bfa0:	0598      	lsls	r0, r3, #22
 800bfa2:	d4ed      	bmi.n	800bf80 <_vfiprintf_r+0x4c>
 800bfa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bfa6:	f001 ffe7 	bl	800df78 <__retarget_lock_release_recursive>
 800bfaa:	e7e9      	b.n	800bf80 <_vfiprintf_r+0x4c>
 800bfac:	2300      	movs	r3, #0
 800bfae:	9309      	str	r3, [sp, #36]	; 0x24
 800bfb0:	2320      	movs	r3, #32
 800bfb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfba:	2330      	movs	r3, #48	; 0x30
 800bfbc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c180 <_vfiprintf_r+0x24c>
 800bfc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfc4:	f04f 0901 	mov.w	r9, #1
 800bfc8:	4623      	mov	r3, r4
 800bfca:	469a      	mov	sl, r3
 800bfcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfd0:	b10a      	cbz	r2, 800bfd6 <_vfiprintf_r+0xa2>
 800bfd2:	2a25      	cmp	r2, #37	; 0x25
 800bfd4:	d1f9      	bne.n	800bfca <_vfiprintf_r+0x96>
 800bfd6:	ebba 0b04 	subs.w	fp, sl, r4
 800bfda:	d00b      	beq.n	800bff4 <_vfiprintf_r+0xc0>
 800bfdc:	465b      	mov	r3, fp
 800bfde:	4622      	mov	r2, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	4630      	mov	r0, r6
 800bfe4:	f7ff ff93 	bl	800bf0e <__sfputs_r>
 800bfe8:	3001      	adds	r0, #1
 800bfea:	f000 80aa 	beq.w	800c142 <_vfiprintf_r+0x20e>
 800bfee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bff0:	445a      	add	r2, fp
 800bff2:	9209      	str	r2, [sp, #36]	; 0x24
 800bff4:	f89a 3000 	ldrb.w	r3, [sl]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	f000 80a2 	beq.w	800c142 <_vfiprintf_r+0x20e>
 800bffe:	2300      	movs	r3, #0
 800c000:	f04f 32ff 	mov.w	r2, #4294967295
 800c004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c008:	f10a 0a01 	add.w	sl, sl, #1
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	9307      	str	r3, [sp, #28]
 800c010:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c014:	931a      	str	r3, [sp, #104]	; 0x68
 800c016:	4654      	mov	r4, sl
 800c018:	2205      	movs	r2, #5
 800c01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c01e:	4858      	ldr	r0, [pc, #352]	; (800c180 <_vfiprintf_r+0x24c>)
 800c020:	f7f4 f8de 	bl	80001e0 <memchr>
 800c024:	9a04      	ldr	r2, [sp, #16]
 800c026:	b9d8      	cbnz	r0, 800c060 <_vfiprintf_r+0x12c>
 800c028:	06d1      	lsls	r1, r2, #27
 800c02a:	bf44      	itt	mi
 800c02c:	2320      	movmi	r3, #32
 800c02e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c032:	0713      	lsls	r3, r2, #28
 800c034:	bf44      	itt	mi
 800c036:	232b      	movmi	r3, #43	; 0x2b
 800c038:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c03c:	f89a 3000 	ldrb.w	r3, [sl]
 800c040:	2b2a      	cmp	r3, #42	; 0x2a
 800c042:	d015      	beq.n	800c070 <_vfiprintf_r+0x13c>
 800c044:	9a07      	ldr	r2, [sp, #28]
 800c046:	4654      	mov	r4, sl
 800c048:	2000      	movs	r0, #0
 800c04a:	f04f 0c0a 	mov.w	ip, #10
 800c04e:	4621      	mov	r1, r4
 800c050:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c054:	3b30      	subs	r3, #48	; 0x30
 800c056:	2b09      	cmp	r3, #9
 800c058:	d94e      	bls.n	800c0f8 <_vfiprintf_r+0x1c4>
 800c05a:	b1b0      	cbz	r0, 800c08a <_vfiprintf_r+0x156>
 800c05c:	9207      	str	r2, [sp, #28]
 800c05e:	e014      	b.n	800c08a <_vfiprintf_r+0x156>
 800c060:	eba0 0308 	sub.w	r3, r0, r8
 800c064:	fa09 f303 	lsl.w	r3, r9, r3
 800c068:	4313      	orrs	r3, r2
 800c06a:	9304      	str	r3, [sp, #16]
 800c06c:	46a2      	mov	sl, r4
 800c06e:	e7d2      	b.n	800c016 <_vfiprintf_r+0xe2>
 800c070:	9b03      	ldr	r3, [sp, #12]
 800c072:	1d19      	adds	r1, r3, #4
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	9103      	str	r1, [sp, #12]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	bfbb      	ittet	lt
 800c07c:	425b      	neglt	r3, r3
 800c07e:	f042 0202 	orrlt.w	r2, r2, #2
 800c082:	9307      	strge	r3, [sp, #28]
 800c084:	9307      	strlt	r3, [sp, #28]
 800c086:	bfb8      	it	lt
 800c088:	9204      	strlt	r2, [sp, #16]
 800c08a:	7823      	ldrb	r3, [r4, #0]
 800c08c:	2b2e      	cmp	r3, #46	; 0x2e
 800c08e:	d10c      	bne.n	800c0aa <_vfiprintf_r+0x176>
 800c090:	7863      	ldrb	r3, [r4, #1]
 800c092:	2b2a      	cmp	r3, #42	; 0x2a
 800c094:	d135      	bne.n	800c102 <_vfiprintf_r+0x1ce>
 800c096:	9b03      	ldr	r3, [sp, #12]
 800c098:	1d1a      	adds	r2, r3, #4
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	9203      	str	r2, [sp, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	bfb8      	it	lt
 800c0a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800c0a6:	3402      	adds	r4, #2
 800c0a8:	9305      	str	r3, [sp, #20]
 800c0aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c190 <_vfiprintf_r+0x25c>
 800c0ae:	7821      	ldrb	r1, [r4, #0]
 800c0b0:	2203      	movs	r2, #3
 800c0b2:	4650      	mov	r0, sl
 800c0b4:	f7f4 f894 	bl	80001e0 <memchr>
 800c0b8:	b140      	cbz	r0, 800c0cc <_vfiprintf_r+0x198>
 800c0ba:	2340      	movs	r3, #64	; 0x40
 800c0bc:	eba0 000a 	sub.w	r0, r0, sl
 800c0c0:	fa03 f000 	lsl.w	r0, r3, r0
 800c0c4:	9b04      	ldr	r3, [sp, #16]
 800c0c6:	4303      	orrs	r3, r0
 800c0c8:	3401      	adds	r4, #1
 800c0ca:	9304      	str	r3, [sp, #16]
 800c0cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d0:	482c      	ldr	r0, [pc, #176]	; (800c184 <_vfiprintf_r+0x250>)
 800c0d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0d6:	2206      	movs	r2, #6
 800c0d8:	f7f4 f882 	bl	80001e0 <memchr>
 800c0dc:	2800      	cmp	r0, #0
 800c0de:	d03f      	beq.n	800c160 <_vfiprintf_r+0x22c>
 800c0e0:	4b29      	ldr	r3, [pc, #164]	; (800c188 <_vfiprintf_r+0x254>)
 800c0e2:	bb1b      	cbnz	r3, 800c12c <_vfiprintf_r+0x1f8>
 800c0e4:	9b03      	ldr	r3, [sp, #12]
 800c0e6:	3307      	adds	r3, #7
 800c0e8:	f023 0307 	bic.w	r3, r3, #7
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	9303      	str	r3, [sp, #12]
 800c0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0f2:	443b      	add	r3, r7
 800c0f4:	9309      	str	r3, [sp, #36]	; 0x24
 800c0f6:	e767      	b.n	800bfc8 <_vfiprintf_r+0x94>
 800c0f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0fc:	460c      	mov	r4, r1
 800c0fe:	2001      	movs	r0, #1
 800c100:	e7a5      	b.n	800c04e <_vfiprintf_r+0x11a>
 800c102:	2300      	movs	r3, #0
 800c104:	3401      	adds	r4, #1
 800c106:	9305      	str	r3, [sp, #20]
 800c108:	4619      	mov	r1, r3
 800c10a:	f04f 0c0a 	mov.w	ip, #10
 800c10e:	4620      	mov	r0, r4
 800c110:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c114:	3a30      	subs	r2, #48	; 0x30
 800c116:	2a09      	cmp	r2, #9
 800c118:	d903      	bls.n	800c122 <_vfiprintf_r+0x1ee>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d0c5      	beq.n	800c0aa <_vfiprintf_r+0x176>
 800c11e:	9105      	str	r1, [sp, #20]
 800c120:	e7c3      	b.n	800c0aa <_vfiprintf_r+0x176>
 800c122:	fb0c 2101 	mla	r1, ip, r1, r2
 800c126:	4604      	mov	r4, r0
 800c128:	2301      	movs	r3, #1
 800c12a:	e7f0      	b.n	800c10e <_vfiprintf_r+0x1da>
 800c12c:	ab03      	add	r3, sp, #12
 800c12e:	9300      	str	r3, [sp, #0]
 800c130:	462a      	mov	r2, r5
 800c132:	4b16      	ldr	r3, [pc, #88]	; (800c18c <_vfiprintf_r+0x258>)
 800c134:	a904      	add	r1, sp, #16
 800c136:	4630      	mov	r0, r6
 800c138:	f000 f8cc 	bl	800c2d4 <_printf_float>
 800c13c:	4607      	mov	r7, r0
 800c13e:	1c78      	adds	r0, r7, #1
 800c140:	d1d6      	bne.n	800c0f0 <_vfiprintf_r+0x1bc>
 800c142:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c144:	07d9      	lsls	r1, r3, #31
 800c146:	d405      	bmi.n	800c154 <_vfiprintf_r+0x220>
 800c148:	89ab      	ldrh	r3, [r5, #12]
 800c14a:	059a      	lsls	r2, r3, #22
 800c14c:	d402      	bmi.n	800c154 <_vfiprintf_r+0x220>
 800c14e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c150:	f001 ff12 	bl	800df78 <__retarget_lock_release_recursive>
 800c154:	89ab      	ldrh	r3, [r5, #12]
 800c156:	065b      	lsls	r3, r3, #25
 800c158:	f53f af12 	bmi.w	800bf80 <_vfiprintf_r+0x4c>
 800c15c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c15e:	e711      	b.n	800bf84 <_vfiprintf_r+0x50>
 800c160:	ab03      	add	r3, sp, #12
 800c162:	9300      	str	r3, [sp, #0]
 800c164:	462a      	mov	r2, r5
 800c166:	4b09      	ldr	r3, [pc, #36]	; (800c18c <_vfiprintf_r+0x258>)
 800c168:	a904      	add	r1, sp, #16
 800c16a:	4630      	mov	r0, r6
 800c16c:	f000 fb56 	bl	800c81c <_printf_i>
 800c170:	e7e4      	b.n	800c13c <_vfiprintf_r+0x208>
 800c172:	bf00      	nop
 800c174:	0800f5fc 	.word	0x0800f5fc
 800c178:	0800f61c 	.word	0x0800f61c
 800c17c:	0800f5dc 	.word	0x0800f5dc
 800c180:	0800f404 	.word	0x0800f404
 800c184:	0800f40e 	.word	0x0800f40e
 800c188:	0800c2d5 	.word	0x0800c2d5
 800c18c:	0800bf0f 	.word	0x0800bf0f
 800c190:	0800f40a 	.word	0x0800f40a

0800c194 <__cvt>:
 800c194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c198:	ec55 4b10 	vmov	r4, r5, d0
 800c19c:	2d00      	cmp	r5, #0
 800c19e:	460e      	mov	r6, r1
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	462b      	mov	r3, r5
 800c1a4:	bfbb      	ittet	lt
 800c1a6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c1aa:	461d      	movlt	r5, r3
 800c1ac:	2300      	movge	r3, #0
 800c1ae:	232d      	movlt	r3, #45	; 0x2d
 800c1b0:	700b      	strb	r3, [r1, #0]
 800c1b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1b4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c1b8:	4691      	mov	r9, r2
 800c1ba:	f023 0820 	bic.w	r8, r3, #32
 800c1be:	bfbc      	itt	lt
 800c1c0:	4622      	movlt	r2, r4
 800c1c2:	4614      	movlt	r4, r2
 800c1c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1c8:	d005      	beq.n	800c1d6 <__cvt+0x42>
 800c1ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c1ce:	d100      	bne.n	800c1d2 <__cvt+0x3e>
 800c1d0:	3601      	adds	r6, #1
 800c1d2:	2102      	movs	r1, #2
 800c1d4:	e000      	b.n	800c1d8 <__cvt+0x44>
 800c1d6:	2103      	movs	r1, #3
 800c1d8:	ab03      	add	r3, sp, #12
 800c1da:	9301      	str	r3, [sp, #4]
 800c1dc:	ab02      	add	r3, sp, #8
 800c1de:	9300      	str	r3, [sp, #0]
 800c1e0:	ec45 4b10 	vmov	d0, r4, r5
 800c1e4:	4653      	mov	r3, sl
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	f000 ff1a 	bl	800d020 <_dtoa_r>
 800c1ec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c1f0:	4607      	mov	r7, r0
 800c1f2:	d102      	bne.n	800c1fa <__cvt+0x66>
 800c1f4:	f019 0f01 	tst.w	r9, #1
 800c1f8:	d022      	beq.n	800c240 <__cvt+0xac>
 800c1fa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c1fe:	eb07 0906 	add.w	r9, r7, r6
 800c202:	d110      	bne.n	800c226 <__cvt+0x92>
 800c204:	783b      	ldrb	r3, [r7, #0]
 800c206:	2b30      	cmp	r3, #48	; 0x30
 800c208:	d10a      	bne.n	800c220 <__cvt+0x8c>
 800c20a:	2200      	movs	r2, #0
 800c20c:	2300      	movs	r3, #0
 800c20e:	4620      	mov	r0, r4
 800c210:	4629      	mov	r1, r5
 800c212:	f7f4 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800c216:	b918      	cbnz	r0, 800c220 <__cvt+0x8c>
 800c218:	f1c6 0601 	rsb	r6, r6, #1
 800c21c:	f8ca 6000 	str.w	r6, [sl]
 800c220:	f8da 3000 	ldr.w	r3, [sl]
 800c224:	4499      	add	r9, r3
 800c226:	2200      	movs	r2, #0
 800c228:	2300      	movs	r3, #0
 800c22a:	4620      	mov	r0, r4
 800c22c:	4629      	mov	r1, r5
 800c22e:	f7f4 fc4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c232:	b108      	cbz	r0, 800c238 <__cvt+0xa4>
 800c234:	f8cd 900c 	str.w	r9, [sp, #12]
 800c238:	2230      	movs	r2, #48	; 0x30
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	454b      	cmp	r3, r9
 800c23e:	d307      	bcc.n	800c250 <__cvt+0xbc>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c244:	1bdb      	subs	r3, r3, r7
 800c246:	4638      	mov	r0, r7
 800c248:	6013      	str	r3, [r2, #0]
 800c24a:	b004      	add	sp, #16
 800c24c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c250:	1c59      	adds	r1, r3, #1
 800c252:	9103      	str	r1, [sp, #12]
 800c254:	701a      	strb	r2, [r3, #0]
 800c256:	e7f0      	b.n	800c23a <__cvt+0xa6>

0800c258 <__exponent>:
 800c258:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c25a:	4603      	mov	r3, r0
 800c25c:	2900      	cmp	r1, #0
 800c25e:	bfb8      	it	lt
 800c260:	4249      	neglt	r1, r1
 800c262:	f803 2b02 	strb.w	r2, [r3], #2
 800c266:	bfb4      	ite	lt
 800c268:	222d      	movlt	r2, #45	; 0x2d
 800c26a:	222b      	movge	r2, #43	; 0x2b
 800c26c:	2909      	cmp	r1, #9
 800c26e:	7042      	strb	r2, [r0, #1]
 800c270:	dd2a      	ble.n	800c2c8 <__exponent+0x70>
 800c272:	f10d 0407 	add.w	r4, sp, #7
 800c276:	46a4      	mov	ip, r4
 800c278:	270a      	movs	r7, #10
 800c27a:	46a6      	mov	lr, r4
 800c27c:	460a      	mov	r2, r1
 800c27e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c282:	fb07 1516 	mls	r5, r7, r6, r1
 800c286:	3530      	adds	r5, #48	; 0x30
 800c288:	2a63      	cmp	r2, #99	; 0x63
 800c28a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c28e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c292:	4631      	mov	r1, r6
 800c294:	dcf1      	bgt.n	800c27a <__exponent+0x22>
 800c296:	3130      	adds	r1, #48	; 0x30
 800c298:	f1ae 0502 	sub.w	r5, lr, #2
 800c29c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c2a0:	1c44      	adds	r4, r0, #1
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	4561      	cmp	r1, ip
 800c2a6:	d30a      	bcc.n	800c2be <__exponent+0x66>
 800c2a8:	f10d 0209 	add.w	r2, sp, #9
 800c2ac:	eba2 020e 	sub.w	r2, r2, lr
 800c2b0:	4565      	cmp	r5, ip
 800c2b2:	bf88      	it	hi
 800c2b4:	2200      	movhi	r2, #0
 800c2b6:	4413      	add	r3, r2
 800c2b8:	1a18      	subs	r0, r3, r0
 800c2ba:	b003      	add	sp, #12
 800c2bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c2c2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c2c6:	e7ed      	b.n	800c2a4 <__exponent+0x4c>
 800c2c8:	2330      	movs	r3, #48	; 0x30
 800c2ca:	3130      	adds	r1, #48	; 0x30
 800c2cc:	7083      	strb	r3, [r0, #2]
 800c2ce:	70c1      	strb	r1, [r0, #3]
 800c2d0:	1d03      	adds	r3, r0, #4
 800c2d2:	e7f1      	b.n	800c2b8 <__exponent+0x60>

0800c2d4 <_printf_float>:
 800c2d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2d8:	ed2d 8b02 	vpush	{d8}
 800c2dc:	b08d      	sub	sp, #52	; 0x34
 800c2de:	460c      	mov	r4, r1
 800c2e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c2e4:	4616      	mov	r6, r2
 800c2e6:	461f      	mov	r7, r3
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	f001 fe3f 	bl	800df6c <_localeconv_r>
 800c2ee:	f8d0 a000 	ldr.w	sl, [r0]
 800c2f2:	4650      	mov	r0, sl
 800c2f4:	f7f3 ff6c 	bl	80001d0 <strlen>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800c2fc:	6823      	ldr	r3, [r4, #0]
 800c2fe:	9305      	str	r3, [sp, #20]
 800c300:	f8d8 3000 	ldr.w	r3, [r8]
 800c304:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c308:	3307      	adds	r3, #7
 800c30a:	f023 0307 	bic.w	r3, r3, #7
 800c30e:	f103 0208 	add.w	r2, r3, #8
 800c312:	f8c8 2000 	str.w	r2, [r8]
 800c316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c31e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c322:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c326:	9307      	str	r3, [sp, #28]
 800c328:	f8cd 8018 	str.w	r8, [sp, #24]
 800c32c:	ee08 0a10 	vmov	s16, r0
 800c330:	4b9f      	ldr	r3, [pc, #636]	; (800c5b0 <_printf_float+0x2dc>)
 800c332:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c336:	f04f 32ff 	mov.w	r2, #4294967295
 800c33a:	f7f4 fbf7 	bl	8000b2c <__aeabi_dcmpun>
 800c33e:	bb88      	cbnz	r0, 800c3a4 <_printf_float+0xd0>
 800c340:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c344:	4b9a      	ldr	r3, [pc, #616]	; (800c5b0 <_printf_float+0x2dc>)
 800c346:	f04f 32ff 	mov.w	r2, #4294967295
 800c34a:	f7f4 fbd1 	bl	8000af0 <__aeabi_dcmple>
 800c34e:	bb48      	cbnz	r0, 800c3a4 <_printf_float+0xd0>
 800c350:	2200      	movs	r2, #0
 800c352:	2300      	movs	r3, #0
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f4 fbc0 	bl	8000adc <__aeabi_dcmplt>
 800c35c:	b110      	cbz	r0, 800c364 <_printf_float+0x90>
 800c35e:	232d      	movs	r3, #45	; 0x2d
 800c360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c364:	4b93      	ldr	r3, [pc, #588]	; (800c5b4 <_printf_float+0x2e0>)
 800c366:	4894      	ldr	r0, [pc, #592]	; (800c5b8 <_printf_float+0x2e4>)
 800c368:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c36c:	bf94      	ite	ls
 800c36e:	4698      	movls	r8, r3
 800c370:	4680      	movhi	r8, r0
 800c372:	2303      	movs	r3, #3
 800c374:	6123      	str	r3, [r4, #16]
 800c376:	9b05      	ldr	r3, [sp, #20]
 800c378:	f023 0204 	bic.w	r2, r3, #4
 800c37c:	6022      	str	r2, [r4, #0]
 800c37e:	f04f 0900 	mov.w	r9, #0
 800c382:	9700      	str	r7, [sp, #0]
 800c384:	4633      	mov	r3, r6
 800c386:	aa0b      	add	r2, sp, #44	; 0x2c
 800c388:	4621      	mov	r1, r4
 800c38a:	4628      	mov	r0, r5
 800c38c:	f000 f9d8 	bl	800c740 <_printf_common>
 800c390:	3001      	adds	r0, #1
 800c392:	f040 8090 	bne.w	800c4b6 <_printf_float+0x1e2>
 800c396:	f04f 30ff 	mov.w	r0, #4294967295
 800c39a:	b00d      	add	sp, #52	; 0x34
 800c39c:	ecbd 8b02 	vpop	{d8}
 800c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3a4:	4642      	mov	r2, r8
 800c3a6:	464b      	mov	r3, r9
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	4649      	mov	r1, r9
 800c3ac:	f7f4 fbbe 	bl	8000b2c <__aeabi_dcmpun>
 800c3b0:	b140      	cbz	r0, 800c3c4 <_printf_float+0xf0>
 800c3b2:	464b      	mov	r3, r9
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	bfbc      	itt	lt
 800c3b8:	232d      	movlt	r3, #45	; 0x2d
 800c3ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c3be:	487f      	ldr	r0, [pc, #508]	; (800c5bc <_printf_float+0x2e8>)
 800c3c0:	4b7f      	ldr	r3, [pc, #508]	; (800c5c0 <_printf_float+0x2ec>)
 800c3c2:	e7d1      	b.n	800c368 <_printf_float+0x94>
 800c3c4:	6863      	ldr	r3, [r4, #4]
 800c3c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c3ca:	9206      	str	r2, [sp, #24]
 800c3cc:	1c5a      	adds	r2, r3, #1
 800c3ce:	d13f      	bne.n	800c450 <_printf_float+0x17c>
 800c3d0:	2306      	movs	r3, #6
 800c3d2:	6063      	str	r3, [r4, #4]
 800c3d4:	9b05      	ldr	r3, [sp, #20]
 800c3d6:	6861      	ldr	r1, [r4, #4]
 800c3d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c3dc:	2300      	movs	r3, #0
 800c3de:	9303      	str	r3, [sp, #12]
 800c3e0:	ab0a      	add	r3, sp, #40	; 0x28
 800c3e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c3e6:	ab09      	add	r3, sp, #36	; 0x24
 800c3e8:	ec49 8b10 	vmov	d0, r8, r9
 800c3ec:	9300      	str	r3, [sp, #0]
 800c3ee:	6022      	str	r2, [r4, #0]
 800c3f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c3f4:	4628      	mov	r0, r5
 800c3f6:	f7ff fecd 	bl	800c194 <__cvt>
 800c3fa:	9b06      	ldr	r3, [sp, #24]
 800c3fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c3fe:	2b47      	cmp	r3, #71	; 0x47
 800c400:	4680      	mov	r8, r0
 800c402:	d108      	bne.n	800c416 <_printf_float+0x142>
 800c404:	1cc8      	adds	r0, r1, #3
 800c406:	db02      	blt.n	800c40e <_printf_float+0x13a>
 800c408:	6863      	ldr	r3, [r4, #4]
 800c40a:	4299      	cmp	r1, r3
 800c40c:	dd41      	ble.n	800c492 <_printf_float+0x1be>
 800c40e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c412:	fa5f fb8b 	uxtb.w	fp, fp
 800c416:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c41a:	d820      	bhi.n	800c45e <_printf_float+0x18a>
 800c41c:	3901      	subs	r1, #1
 800c41e:	465a      	mov	r2, fp
 800c420:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c424:	9109      	str	r1, [sp, #36]	; 0x24
 800c426:	f7ff ff17 	bl	800c258 <__exponent>
 800c42a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c42c:	1813      	adds	r3, r2, r0
 800c42e:	2a01      	cmp	r2, #1
 800c430:	4681      	mov	r9, r0
 800c432:	6123      	str	r3, [r4, #16]
 800c434:	dc02      	bgt.n	800c43c <_printf_float+0x168>
 800c436:	6822      	ldr	r2, [r4, #0]
 800c438:	07d2      	lsls	r2, r2, #31
 800c43a:	d501      	bpl.n	800c440 <_printf_float+0x16c>
 800c43c:	3301      	adds	r3, #1
 800c43e:	6123      	str	r3, [r4, #16]
 800c440:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c444:	2b00      	cmp	r3, #0
 800c446:	d09c      	beq.n	800c382 <_printf_float+0xae>
 800c448:	232d      	movs	r3, #45	; 0x2d
 800c44a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c44e:	e798      	b.n	800c382 <_printf_float+0xae>
 800c450:	9a06      	ldr	r2, [sp, #24]
 800c452:	2a47      	cmp	r2, #71	; 0x47
 800c454:	d1be      	bne.n	800c3d4 <_printf_float+0x100>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1bc      	bne.n	800c3d4 <_printf_float+0x100>
 800c45a:	2301      	movs	r3, #1
 800c45c:	e7b9      	b.n	800c3d2 <_printf_float+0xfe>
 800c45e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c462:	d118      	bne.n	800c496 <_printf_float+0x1c2>
 800c464:	2900      	cmp	r1, #0
 800c466:	6863      	ldr	r3, [r4, #4]
 800c468:	dd0b      	ble.n	800c482 <_printf_float+0x1ae>
 800c46a:	6121      	str	r1, [r4, #16]
 800c46c:	b913      	cbnz	r3, 800c474 <_printf_float+0x1a0>
 800c46e:	6822      	ldr	r2, [r4, #0]
 800c470:	07d0      	lsls	r0, r2, #31
 800c472:	d502      	bpl.n	800c47a <_printf_float+0x1a6>
 800c474:	3301      	adds	r3, #1
 800c476:	440b      	add	r3, r1
 800c478:	6123      	str	r3, [r4, #16]
 800c47a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c47c:	f04f 0900 	mov.w	r9, #0
 800c480:	e7de      	b.n	800c440 <_printf_float+0x16c>
 800c482:	b913      	cbnz	r3, 800c48a <_printf_float+0x1b6>
 800c484:	6822      	ldr	r2, [r4, #0]
 800c486:	07d2      	lsls	r2, r2, #31
 800c488:	d501      	bpl.n	800c48e <_printf_float+0x1ba>
 800c48a:	3302      	adds	r3, #2
 800c48c:	e7f4      	b.n	800c478 <_printf_float+0x1a4>
 800c48e:	2301      	movs	r3, #1
 800c490:	e7f2      	b.n	800c478 <_printf_float+0x1a4>
 800c492:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c498:	4299      	cmp	r1, r3
 800c49a:	db05      	blt.n	800c4a8 <_printf_float+0x1d4>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	6121      	str	r1, [r4, #16]
 800c4a0:	07d8      	lsls	r0, r3, #31
 800c4a2:	d5ea      	bpl.n	800c47a <_printf_float+0x1a6>
 800c4a4:	1c4b      	adds	r3, r1, #1
 800c4a6:	e7e7      	b.n	800c478 <_printf_float+0x1a4>
 800c4a8:	2900      	cmp	r1, #0
 800c4aa:	bfd4      	ite	le
 800c4ac:	f1c1 0202 	rsble	r2, r1, #2
 800c4b0:	2201      	movgt	r2, #1
 800c4b2:	4413      	add	r3, r2
 800c4b4:	e7e0      	b.n	800c478 <_printf_float+0x1a4>
 800c4b6:	6823      	ldr	r3, [r4, #0]
 800c4b8:	055a      	lsls	r2, r3, #21
 800c4ba:	d407      	bmi.n	800c4cc <_printf_float+0x1f8>
 800c4bc:	6923      	ldr	r3, [r4, #16]
 800c4be:	4642      	mov	r2, r8
 800c4c0:	4631      	mov	r1, r6
 800c4c2:	4628      	mov	r0, r5
 800c4c4:	47b8      	blx	r7
 800c4c6:	3001      	adds	r0, #1
 800c4c8:	d12c      	bne.n	800c524 <_printf_float+0x250>
 800c4ca:	e764      	b.n	800c396 <_printf_float+0xc2>
 800c4cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c4d0:	f240 80e0 	bls.w	800c694 <_printf_float+0x3c0>
 800c4d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c4d8:	2200      	movs	r2, #0
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f7f4 faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d034      	beq.n	800c54e <_printf_float+0x27a>
 800c4e4:	4a37      	ldr	r2, [pc, #220]	; (800c5c4 <_printf_float+0x2f0>)
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4631      	mov	r1, r6
 800c4ea:	4628      	mov	r0, r5
 800c4ec:	47b8      	blx	r7
 800c4ee:	3001      	adds	r0, #1
 800c4f0:	f43f af51 	beq.w	800c396 <_printf_float+0xc2>
 800c4f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4f8:	429a      	cmp	r2, r3
 800c4fa:	db02      	blt.n	800c502 <_printf_float+0x22e>
 800c4fc:	6823      	ldr	r3, [r4, #0]
 800c4fe:	07d8      	lsls	r0, r3, #31
 800c500:	d510      	bpl.n	800c524 <_printf_float+0x250>
 800c502:	ee18 3a10 	vmov	r3, s16
 800c506:	4652      	mov	r2, sl
 800c508:	4631      	mov	r1, r6
 800c50a:	4628      	mov	r0, r5
 800c50c:	47b8      	blx	r7
 800c50e:	3001      	adds	r0, #1
 800c510:	f43f af41 	beq.w	800c396 <_printf_float+0xc2>
 800c514:	f04f 0800 	mov.w	r8, #0
 800c518:	f104 091a 	add.w	r9, r4, #26
 800c51c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c51e:	3b01      	subs	r3, #1
 800c520:	4543      	cmp	r3, r8
 800c522:	dc09      	bgt.n	800c538 <_printf_float+0x264>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	079b      	lsls	r3, r3, #30
 800c528:	f100 8105 	bmi.w	800c736 <_printf_float+0x462>
 800c52c:	68e0      	ldr	r0, [r4, #12]
 800c52e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c530:	4298      	cmp	r0, r3
 800c532:	bfb8      	it	lt
 800c534:	4618      	movlt	r0, r3
 800c536:	e730      	b.n	800c39a <_printf_float+0xc6>
 800c538:	2301      	movs	r3, #1
 800c53a:	464a      	mov	r2, r9
 800c53c:	4631      	mov	r1, r6
 800c53e:	4628      	mov	r0, r5
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	f43f af27 	beq.w	800c396 <_printf_float+0xc2>
 800c548:	f108 0801 	add.w	r8, r8, #1
 800c54c:	e7e6      	b.n	800c51c <_printf_float+0x248>
 800c54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c550:	2b00      	cmp	r3, #0
 800c552:	dc39      	bgt.n	800c5c8 <_printf_float+0x2f4>
 800c554:	4a1b      	ldr	r2, [pc, #108]	; (800c5c4 <_printf_float+0x2f0>)
 800c556:	2301      	movs	r3, #1
 800c558:	4631      	mov	r1, r6
 800c55a:	4628      	mov	r0, r5
 800c55c:	47b8      	blx	r7
 800c55e:	3001      	adds	r0, #1
 800c560:	f43f af19 	beq.w	800c396 <_printf_float+0xc2>
 800c564:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c568:	4313      	orrs	r3, r2
 800c56a:	d102      	bne.n	800c572 <_printf_float+0x29e>
 800c56c:	6823      	ldr	r3, [r4, #0]
 800c56e:	07d9      	lsls	r1, r3, #31
 800c570:	d5d8      	bpl.n	800c524 <_printf_float+0x250>
 800c572:	ee18 3a10 	vmov	r3, s16
 800c576:	4652      	mov	r2, sl
 800c578:	4631      	mov	r1, r6
 800c57a:	4628      	mov	r0, r5
 800c57c:	47b8      	blx	r7
 800c57e:	3001      	adds	r0, #1
 800c580:	f43f af09 	beq.w	800c396 <_printf_float+0xc2>
 800c584:	f04f 0900 	mov.w	r9, #0
 800c588:	f104 0a1a 	add.w	sl, r4, #26
 800c58c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c58e:	425b      	negs	r3, r3
 800c590:	454b      	cmp	r3, r9
 800c592:	dc01      	bgt.n	800c598 <_printf_float+0x2c4>
 800c594:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c596:	e792      	b.n	800c4be <_printf_float+0x1ea>
 800c598:	2301      	movs	r3, #1
 800c59a:	4652      	mov	r2, sl
 800c59c:	4631      	mov	r1, r6
 800c59e:	4628      	mov	r0, r5
 800c5a0:	47b8      	blx	r7
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	f43f aef7 	beq.w	800c396 <_printf_float+0xc2>
 800c5a8:	f109 0901 	add.w	r9, r9, #1
 800c5ac:	e7ee      	b.n	800c58c <_printf_float+0x2b8>
 800c5ae:	bf00      	nop
 800c5b0:	7fefffff 	.word	0x7fefffff
 800c5b4:	0800f415 	.word	0x0800f415
 800c5b8:	0800f419 	.word	0x0800f419
 800c5bc:	0800f421 	.word	0x0800f421
 800c5c0:	0800f41d 	.word	0x0800f41d
 800c5c4:	0800f425 	.word	0x0800f425
 800c5c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c5ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	bfa8      	it	ge
 800c5d0:	461a      	movge	r2, r3
 800c5d2:	2a00      	cmp	r2, #0
 800c5d4:	4691      	mov	r9, r2
 800c5d6:	dc37      	bgt.n	800c648 <_printf_float+0x374>
 800c5d8:	f04f 0b00 	mov.w	fp, #0
 800c5dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5e0:	f104 021a 	add.w	r2, r4, #26
 800c5e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c5e6:	9305      	str	r3, [sp, #20]
 800c5e8:	eba3 0309 	sub.w	r3, r3, r9
 800c5ec:	455b      	cmp	r3, fp
 800c5ee:	dc33      	bgt.n	800c658 <_printf_float+0x384>
 800c5f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c5f4:	429a      	cmp	r2, r3
 800c5f6:	db3b      	blt.n	800c670 <_printf_float+0x39c>
 800c5f8:	6823      	ldr	r3, [r4, #0]
 800c5fa:	07da      	lsls	r2, r3, #31
 800c5fc:	d438      	bmi.n	800c670 <_printf_float+0x39c>
 800c5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c600:	9a05      	ldr	r2, [sp, #20]
 800c602:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c604:	1a9a      	subs	r2, r3, r2
 800c606:	eba3 0901 	sub.w	r9, r3, r1
 800c60a:	4591      	cmp	r9, r2
 800c60c:	bfa8      	it	ge
 800c60e:	4691      	movge	r9, r2
 800c610:	f1b9 0f00 	cmp.w	r9, #0
 800c614:	dc35      	bgt.n	800c682 <_printf_float+0x3ae>
 800c616:	f04f 0800 	mov.w	r8, #0
 800c61a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c61e:	f104 0a1a 	add.w	sl, r4, #26
 800c622:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c626:	1a9b      	subs	r3, r3, r2
 800c628:	eba3 0309 	sub.w	r3, r3, r9
 800c62c:	4543      	cmp	r3, r8
 800c62e:	f77f af79 	ble.w	800c524 <_printf_float+0x250>
 800c632:	2301      	movs	r3, #1
 800c634:	4652      	mov	r2, sl
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
 800c63a:	47b8      	blx	r7
 800c63c:	3001      	adds	r0, #1
 800c63e:	f43f aeaa 	beq.w	800c396 <_printf_float+0xc2>
 800c642:	f108 0801 	add.w	r8, r8, #1
 800c646:	e7ec      	b.n	800c622 <_printf_float+0x34e>
 800c648:	4613      	mov	r3, r2
 800c64a:	4631      	mov	r1, r6
 800c64c:	4642      	mov	r2, r8
 800c64e:	4628      	mov	r0, r5
 800c650:	47b8      	blx	r7
 800c652:	3001      	adds	r0, #1
 800c654:	d1c0      	bne.n	800c5d8 <_printf_float+0x304>
 800c656:	e69e      	b.n	800c396 <_printf_float+0xc2>
 800c658:	2301      	movs	r3, #1
 800c65a:	4631      	mov	r1, r6
 800c65c:	4628      	mov	r0, r5
 800c65e:	9205      	str	r2, [sp, #20]
 800c660:	47b8      	blx	r7
 800c662:	3001      	adds	r0, #1
 800c664:	f43f ae97 	beq.w	800c396 <_printf_float+0xc2>
 800c668:	9a05      	ldr	r2, [sp, #20]
 800c66a:	f10b 0b01 	add.w	fp, fp, #1
 800c66e:	e7b9      	b.n	800c5e4 <_printf_float+0x310>
 800c670:	ee18 3a10 	vmov	r3, s16
 800c674:	4652      	mov	r2, sl
 800c676:	4631      	mov	r1, r6
 800c678:	4628      	mov	r0, r5
 800c67a:	47b8      	blx	r7
 800c67c:	3001      	adds	r0, #1
 800c67e:	d1be      	bne.n	800c5fe <_printf_float+0x32a>
 800c680:	e689      	b.n	800c396 <_printf_float+0xc2>
 800c682:	9a05      	ldr	r2, [sp, #20]
 800c684:	464b      	mov	r3, r9
 800c686:	4442      	add	r2, r8
 800c688:	4631      	mov	r1, r6
 800c68a:	4628      	mov	r0, r5
 800c68c:	47b8      	blx	r7
 800c68e:	3001      	adds	r0, #1
 800c690:	d1c1      	bne.n	800c616 <_printf_float+0x342>
 800c692:	e680      	b.n	800c396 <_printf_float+0xc2>
 800c694:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c696:	2a01      	cmp	r2, #1
 800c698:	dc01      	bgt.n	800c69e <_printf_float+0x3ca>
 800c69a:	07db      	lsls	r3, r3, #31
 800c69c:	d538      	bpl.n	800c710 <_printf_float+0x43c>
 800c69e:	2301      	movs	r3, #1
 800c6a0:	4642      	mov	r2, r8
 800c6a2:	4631      	mov	r1, r6
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	47b8      	blx	r7
 800c6a8:	3001      	adds	r0, #1
 800c6aa:	f43f ae74 	beq.w	800c396 <_printf_float+0xc2>
 800c6ae:	ee18 3a10 	vmov	r3, s16
 800c6b2:	4652      	mov	r2, sl
 800c6b4:	4631      	mov	r1, r6
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	47b8      	blx	r7
 800c6ba:	3001      	adds	r0, #1
 800c6bc:	f43f ae6b 	beq.w	800c396 <_printf_float+0xc2>
 800c6c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	f7f4 f9fe 	bl	8000ac8 <__aeabi_dcmpeq>
 800c6cc:	b9d8      	cbnz	r0, 800c706 <_printf_float+0x432>
 800c6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d0:	f108 0201 	add.w	r2, r8, #1
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	4631      	mov	r1, r6
 800c6d8:	4628      	mov	r0, r5
 800c6da:	47b8      	blx	r7
 800c6dc:	3001      	adds	r0, #1
 800c6de:	d10e      	bne.n	800c6fe <_printf_float+0x42a>
 800c6e0:	e659      	b.n	800c396 <_printf_float+0xc2>
 800c6e2:	2301      	movs	r3, #1
 800c6e4:	4652      	mov	r2, sl
 800c6e6:	4631      	mov	r1, r6
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	47b8      	blx	r7
 800c6ec:	3001      	adds	r0, #1
 800c6ee:	f43f ae52 	beq.w	800c396 <_printf_float+0xc2>
 800c6f2:	f108 0801 	add.w	r8, r8, #1
 800c6f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6f8:	3b01      	subs	r3, #1
 800c6fa:	4543      	cmp	r3, r8
 800c6fc:	dcf1      	bgt.n	800c6e2 <_printf_float+0x40e>
 800c6fe:	464b      	mov	r3, r9
 800c700:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c704:	e6dc      	b.n	800c4c0 <_printf_float+0x1ec>
 800c706:	f04f 0800 	mov.w	r8, #0
 800c70a:	f104 0a1a 	add.w	sl, r4, #26
 800c70e:	e7f2      	b.n	800c6f6 <_printf_float+0x422>
 800c710:	2301      	movs	r3, #1
 800c712:	4642      	mov	r2, r8
 800c714:	e7df      	b.n	800c6d6 <_printf_float+0x402>
 800c716:	2301      	movs	r3, #1
 800c718:	464a      	mov	r2, r9
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	f43f ae38 	beq.w	800c396 <_printf_float+0xc2>
 800c726:	f108 0801 	add.w	r8, r8, #1
 800c72a:	68e3      	ldr	r3, [r4, #12]
 800c72c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c72e:	1a5b      	subs	r3, r3, r1
 800c730:	4543      	cmp	r3, r8
 800c732:	dcf0      	bgt.n	800c716 <_printf_float+0x442>
 800c734:	e6fa      	b.n	800c52c <_printf_float+0x258>
 800c736:	f04f 0800 	mov.w	r8, #0
 800c73a:	f104 0919 	add.w	r9, r4, #25
 800c73e:	e7f4      	b.n	800c72a <_printf_float+0x456>

0800c740 <_printf_common>:
 800c740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c744:	4616      	mov	r6, r2
 800c746:	4699      	mov	r9, r3
 800c748:	688a      	ldr	r2, [r1, #8]
 800c74a:	690b      	ldr	r3, [r1, #16]
 800c74c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c750:	4293      	cmp	r3, r2
 800c752:	bfb8      	it	lt
 800c754:	4613      	movlt	r3, r2
 800c756:	6033      	str	r3, [r6, #0]
 800c758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c75c:	4607      	mov	r7, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	b10a      	cbz	r2, 800c766 <_printf_common+0x26>
 800c762:	3301      	adds	r3, #1
 800c764:	6033      	str	r3, [r6, #0]
 800c766:	6823      	ldr	r3, [r4, #0]
 800c768:	0699      	lsls	r1, r3, #26
 800c76a:	bf42      	ittt	mi
 800c76c:	6833      	ldrmi	r3, [r6, #0]
 800c76e:	3302      	addmi	r3, #2
 800c770:	6033      	strmi	r3, [r6, #0]
 800c772:	6825      	ldr	r5, [r4, #0]
 800c774:	f015 0506 	ands.w	r5, r5, #6
 800c778:	d106      	bne.n	800c788 <_printf_common+0x48>
 800c77a:	f104 0a19 	add.w	sl, r4, #25
 800c77e:	68e3      	ldr	r3, [r4, #12]
 800c780:	6832      	ldr	r2, [r6, #0]
 800c782:	1a9b      	subs	r3, r3, r2
 800c784:	42ab      	cmp	r3, r5
 800c786:	dc26      	bgt.n	800c7d6 <_printf_common+0x96>
 800c788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c78c:	1e13      	subs	r3, r2, #0
 800c78e:	6822      	ldr	r2, [r4, #0]
 800c790:	bf18      	it	ne
 800c792:	2301      	movne	r3, #1
 800c794:	0692      	lsls	r2, r2, #26
 800c796:	d42b      	bmi.n	800c7f0 <_printf_common+0xb0>
 800c798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c79c:	4649      	mov	r1, r9
 800c79e:	4638      	mov	r0, r7
 800c7a0:	47c0      	blx	r8
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d01e      	beq.n	800c7e4 <_printf_common+0xa4>
 800c7a6:	6823      	ldr	r3, [r4, #0]
 800c7a8:	68e5      	ldr	r5, [r4, #12]
 800c7aa:	6832      	ldr	r2, [r6, #0]
 800c7ac:	f003 0306 	and.w	r3, r3, #6
 800c7b0:	2b04      	cmp	r3, #4
 800c7b2:	bf08      	it	eq
 800c7b4:	1aad      	subeq	r5, r5, r2
 800c7b6:	68a3      	ldr	r3, [r4, #8]
 800c7b8:	6922      	ldr	r2, [r4, #16]
 800c7ba:	bf0c      	ite	eq
 800c7bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c7c0:	2500      	movne	r5, #0
 800c7c2:	4293      	cmp	r3, r2
 800c7c4:	bfc4      	itt	gt
 800c7c6:	1a9b      	subgt	r3, r3, r2
 800c7c8:	18ed      	addgt	r5, r5, r3
 800c7ca:	2600      	movs	r6, #0
 800c7cc:	341a      	adds	r4, #26
 800c7ce:	42b5      	cmp	r5, r6
 800c7d0:	d11a      	bne.n	800c808 <_printf_common+0xc8>
 800c7d2:	2000      	movs	r0, #0
 800c7d4:	e008      	b.n	800c7e8 <_printf_common+0xa8>
 800c7d6:	2301      	movs	r3, #1
 800c7d8:	4652      	mov	r2, sl
 800c7da:	4649      	mov	r1, r9
 800c7dc:	4638      	mov	r0, r7
 800c7de:	47c0      	blx	r8
 800c7e0:	3001      	adds	r0, #1
 800c7e2:	d103      	bne.n	800c7ec <_printf_common+0xac>
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ec:	3501      	adds	r5, #1
 800c7ee:	e7c6      	b.n	800c77e <_printf_common+0x3e>
 800c7f0:	18e1      	adds	r1, r4, r3
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	2030      	movs	r0, #48	; 0x30
 800c7f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c7fa:	4422      	add	r2, r4
 800c7fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c804:	3302      	adds	r3, #2
 800c806:	e7c7      	b.n	800c798 <_printf_common+0x58>
 800c808:	2301      	movs	r3, #1
 800c80a:	4622      	mov	r2, r4
 800c80c:	4649      	mov	r1, r9
 800c80e:	4638      	mov	r0, r7
 800c810:	47c0      	blx	r8
 800c812:	3001      	adds	r0, #1
 800c814:	d0e6      	beq.n	800c7e4 <_printf_common+0xa4>
 800c816:	3601      	adds	r6, #1
 800c818:	e7d9      	b.n	800c7ce <_printf_common+0x8e>
	...

0800c81c <_printf_i>:
 800c81c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c820:	7e0f      	ldrb	r7, [r1, #24]
 800c822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c824:	2f78      	cmp	r7, #120	; 0x78
 800c826:	4691      	mov	r9, r2
 800c828:	4680      	mov	r8, r0
 800c82a:	460c      	mov	r4, r1
 800c82c:	469a      	mov	sl, r3
 800c82e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c832:	d807      	bhi.n	800c844 <_printf_i+0x28>
 800c834:	2f62      	cmp	r7, #98	; 0x62
 800c836:	d80a      	bhi.n	800c84e <_printf_i+0x32>
 800c838:	2f00      	cmp	r7, #0
 800c83a:	f000 80d8 	beq.w	800c9ee <_printf_i+0x1d2>
 800c83e:	2f58      	cmp	r7, #88	; 0x58
 800c840:	f000 80a3 	beq.w	800c98a <_printf_i+0x16e>
 800c844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c84c:	e03a      	b.n	800c8c4 <_printf_i+0xa8>
 800c84e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c852:	2b15      	cmp	r3, #21
 800c854:	d8f6      	bhi.n	800c844 <_printf_i+0x28>
 800c856:	a101      	add	r1, pc, #4	; (adr r1, 800c85c <_printf_i+0x40>)
 800c858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c85c:	0800c8b5 	.word	0x0800c8b5
 800c860:	0800c8c9 	.word	0x0800c8c9
 800c864:	0800c845 	.word	0x0800c845
 800c868:	0800c845 	.word	0x0800c845
 800c86c:	0800c845 	.word	0x0800c845
 800c870:	0800c845 	.word	0x0800c845
 800c874:	0800c8c9 	.word	0x0800c8c9
 800c878:	0800c845 	.word	0x0800c845
 800c87c:	0800c845 	.word	0x0800c845
 800c880:	0800c845 	.word	0x0800c845
 800c884:	0800c845 	.word	0x0800c845
 800c888:	0800c9d5 	.word	0x0800c9d5
 800c88c:	0800c8f9 	.word	0x0800c8f9
 800c890:	0800c9b7 	.word	0x0800c9b7
 800c894:	0800c845 	.word	0x0800c845
 800c898:	0800c845 	.word	0x0800c845
 800c89c:	0800c9f7 	.word	0x0800c9f7
 800c8a0:	0800c845 	.word	0x0800c845
 800c8a4:	0800c8f9 	.word	0x0800c8f9
 800c8a8:	0800c845 	.word	0x0800c845
 800c8ac:	0800c845 	.word	0x0800c845
 800c8b0:	0800c9bf 	.word	0x0800c9bf
 800c8b4:	682b      	ldr	r3, [r5, #0]
 800c8b6:	1d1a      	adds	r2, r3, #4
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	602a      	str	r2, [r5, #0]
 800c8bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e0a3      	b.n	800ca10 <_printf_i+0x1f4>
 800c8c8:	6820      	ldr	r0, [r4, #0]
 800c8ca:	6829      	ldr	r1, [r5, #0]
 800c8cc:	0606      	lsls	r6, r0, #24
 800c8ce:	f101 0304 	add.w	r3, r1, #4
 800c8d2:	d50a      	bpl.n	800c8ea <_printf_i+0xce>
 800c8d4:	680e      	ldr	r6, [r1, #0]
 800c8d6:	602b      	str	r3, [r5, #0]
 800c8d8:	2e00      	cmp	r6, #0
 800c8da:	da03      	bge.n	800c8e4 <_printf_i+0xc8>
 800c8dc:	232d      	movs	r3, #45	; 0x2d
 800c8de:	4276      	negs	r6, r6
 800c8e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8e4:	485e      	ldr	r0, [pc, #376]	; (800ca60 <_printf_i+0x244>)
 800c8e6:	230a      	movs	r3, #10
 800c8e8:	e019      	b.n	800c91e <_printf_i+0x102>
 800c8ea:	680e      	ldr	r6, [r1, #0]
 800c8ec:	602b      	str	r3, [r5, #0]
 800c8ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c8f2:	bf18      	it	ne
 800c8f4:	b236      	sxthne	r6, r6
 800c8f6:	e7ef      	b.n	800c8d8 <_printf_i+0xbc>
 800c8f8:	682b      	ldr	r3, [r5, #0]
 800c8fa:	6820      	ldr	r0, [r4, #0]
 800c8fc:	1d19      	adds	r1, r3, #4
 800c8fe:	6029      	str	r1, [r5, #0]
 800c900:	0601      	lsls	r1, r0, #24
 800c902:	d501      	bpl.n	800c908 <_printf_i+0xec>
 800c904:	681e      	ldr	r6, [r3, #0]
 800c906:	e002      	b.n	800c90e <_printf_i+0xf2>
 800c908:	0646      	lsls	r6, r0, #25
 800c90a:	d5fb      	bpl.n	800c904 <_printf_i+0xe8>
 800c90c:	881e      	ldrh	r6, [r3, #0]
 800c90e:	4854      	ldr	r0, [pc, #336]	; (800ca60 <_printf_i+0x244>)
 800c910:	2f6f      	cmp	r7, #111	; 0x6f
 800c912:	bf0c      	ite	eq
 800c914:	2308      	moveq	r3, #8
 800c916:	230a      	movne	r3, #10
 800c918:	2100      	movs	r1, #0
 800c91a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c91e:	6865      	ldr	r5, [r4, #4]
 800c920:	60a5      	str	r5, [r4, #8]
 800c922:	2d00      	cmp	r5, #0
 800c924:	bfa2      	ittt	ge
 800c926:	6821      	ldrge	r1, [r4, #0]
 800c928:	f021 0104 	bicge.w	r1, r1, #4
 800c92c:	6021      	strge	r1, [r4, #0]
 800c92e:	b90e      	cbnz	r6, 800c934 <_printf_i+0x118>
 800c930:	2d00      	cmp	r5, #0
 800c932:	d04d      	beq.n	800c9d0 <_printf_i+0x1b4>
 800c934:	4615      	mov	r5, r2
 800c936:	fbb6 f1f3 	udiv	r1, r6, r3
 800c93a:	fb03 6711 	mls	r7, r3, r1, r6
 800c93e:	5dc7      	ldrb	r7, [r0, r7]
 800c940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c944:	4637      	mov	r7, r6
 800c946:	42bb      	cmp	r3, r7
 800c948:	460e      	mov	r6, r1
 800c94a:	d9f4      	bls.n	800c936 <_printf_i+0x11a>
 800c94c:	2b08      	cmp	r3, #8
 800c94e:	d10b      	bne.n	800c968 <_printf_i+0x14c>
 800c950:	6823      	ldr	r3, [r4, #0]
 800c952:	07de      	lsls	r6, r3, #31
 800c954:	d508      	bpl.n	800c968 <_printf_i+0x14c>
 800c956:	6923      	ldr	r3, [r4, #16]
 800c958:	6861      	ldr	r1, [r4, #4]
 800c95a:	4299      	cmp	r1, r3
 800c95c:	bfde      	ittt	le
 800c95e:	2330      	movle	r3, #48	; 0x30
 800c960:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c964:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c968:	1b52      	subs	r2, r2, r5
 800c96a:	6122      	str	r2, [r4, #16]
 800c96c:	f8cd a000 	str.w	sl, [sp]
 800c970:	464b      	mov	r3, r9
 800c972:	aa03      	add	r2, sp, #12
 800c974:	4621      	mov	r1, r4
 800c976:	4640      	mov	r0, r8
 800c978:	f7ff fee2 	bl	800c740 <_printf_common>
 800c97c:	3001      	adds	r0, #1
 800c97e:	d14c      	bne.n	800ca1a <_printf_i+0x1fe>
 800c980:	f04f 30ff 	mov.w	r0, #4294967295
 800c984:	b004      	add	sp, #16
 800c986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c98a:	4835      	ldr	r0, [pc, #212]	; (800ca60 <_printf_i+0x244>)
 800c98c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c990:	6829      	ldr	r1, [r5, #0]
 800c992:	6823      	ldr	r3, [r4, #0]
 800c994:	f851 6b04 	ldr.w	r6, [r1], #4
 800c998:	6029      	str	r1, [r5, #0]
 800c99a:	061d      	lsls	r5, r3, #24
 800c99c:	d514      	bpl.n	800c9c8 <_printf_i+0x1ac>
 800c99e:	07df      	lsls	r7, r3, #31
 800c9a0:	bf44      	itt	mi
 800c9a2:	f043 0320 	orrmi.w	r3, r3, #32
 800c9a6:	6023      	strmi	r3, [r4, #0]
 800c9a8:	b91e      	cbnz	r6, 800c9b2 <_printf_i+0x196>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	f023 0320 	bic.w	r3, r3, #32
 800c9b0:	6023      	str	r3, [r4, #0]
 800c9b2:	2310      	movs	r3, #16
 800c9b4:	e7b0      	b.n	800c918 <_printf_i+0xfc>
 800c9b6:	6823      	ldr	r3, [r4, #0]
 800c9b8:	f043 0320 	orr.w	r3, r3, #32
 800c9bc:	6023      	str	r3, [r4, #0]
 800c9be:	2378      	movs	r3, #120	; 0x78
 800c9c0:	4828      	ldr	r0, [pc, #160]	; (800ca64 <_printf_i+0x248>)
 800c9c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c9c6:	e7e3      	b.n	800c990 <_printf_i+0x174>
 800c9c8:	0659      	lsls	r1, r3, #25
 800c9ca:	bf48      	it	mi
 800c9cc:	b2b6      	uxthmi	r6, r6
 800c9ce:	e7e6      	b.n	800c99e <_printf_i+0x182>
 800c9d0:	4615      	mov	r5, r2
 800c9d2:	e7bb      	b.n	800c94c <_printf_i+0x130>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	6826      	ldr	r6, [r4, #0]
 800c9d8:	6961      	ldr	r1, [r4, #20]
 800c9da:	1d18      	adds	r0, r3, #4
 800c9dc:	6028      	str	r0, [r5, #0]
 800c9de:	0635      	lsls	r5, r6, #24
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	d501      	bpl.n	800c9e8 <_printf_i+0x1cc>
 800c9e4:	6019      	str	r1, [r3, #0]
 800c9e6:	e002      	b.n	800c9ee <_printf_i+0x1d2>
 800c9e8:	0670      	lsls	r0, r6, #25
 800c9ea:	d5fb      	bpl.n	800c9e4 <_printf_i+0x1c8>
 800c9ec:	8019      	strh	r1, [r3, #0]
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	6123      	str	r3, [r4, #16]
 800c9f2:	4615      	mov	r5, r2
 800c9f4:	e7ba      	b.n	800c96c <_printf_i+0x150>
 800c9f6:	682b      	ldr	r3, [r5, #0]
 800c9f8:	1d1a      	adds	r2, r3, #4
 800c9fa:	602a      	str	r2, [r5, #0]
 800c9fc:	681d      	ldr	r5, [r3, #0]
 800c9fe:	6862      	ldr	r2, [r4, #4]
 800ca00:	2100      	movs	r1, #0
 800ca02:	4628      	mov	r0, r5
 800ca04:	f7f3 fbec 	bl	80001e0 <memchr>
 800ca08:	b108      	cbz	r0, 800ca0e <_printf_i+0x1f2>
 800ca0a:	1b40      	subs	r0, r0, r5
 800ca0c:	6060      	str	r0, [r4, #4]
 800ca0e:	6863      	ldr	r3, [r4, #4]
 800ca10:	6123      	str	r3, [r4, #16]
 800ca12:	2300      	movs	r3, #0
 800ca14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca18:	e7a8      	b.n	800c96c <_printf_i+0x150>
 800ca1a:	6923      	ldr	r3, [r4, #16]
 800ca1c:	462a      	mov	r2, r5
 800ca1e:	4649      	mov	r1, r9
 800ca20:	4640      	mov	r0, r8
 800ca22:	47d0      	blx	sl
 800ca24:	3001      	adds	r0, #1
 800ca26:	d0ab      	beq.n	800c980 <_printf_i+0x164>
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	079b      	lsls	r3, r3, #30
 800ca2c:	d413      	bmi.n	800ca56 <_printf_i+0x23a>
 800ca2e:	68e0      	ldr	r0, [r4, #12]
 800ca30:	9b03      	ldr	r3, [sp, #12]
 800ca32:	4298      	cmp	r0, r3
 800ca34:	bfb8      	it	lt
 800ca36:	4618      	movlt	r0, r3
 800ca38:	e7a4      	b.n	800c984 <_printf_i+0x168>
 800ca3a:	2301      	movs	r3, #1
 800ca3c:	4632      	mov	r2, r6
 800ca3e:	4649      	mov	r1, r9
 800ca40:	4640      	mov	r0, r8
 800ca42:	47d0      	blx	sl
 800ca44:	3001      	adds	r0, #1
 800ca46:	d09b      	beq.n	800c980 <_printf_i+0x164>
 800ca48:	3501      	adds	r5, #1
 800ca4a:	68e3      	ldr	r3, [r4, #12]
 800ca4c:	9903      	ldr	r1, [sp, #12]
 800ca4e:	1a5b      	subs	r3, r3, r1
 800ca50:	42ab      	cmp	r3, r5
 800ca52:	dcf2      	bgt.n	800ca3a <_printf_i+0x21e>
 800ca54:	e7eb      	b.n	800ca2e <_printf_i+0x212>
 800ca56:	2500      	movs	r5, #0
 800ca58:	f104 0619 	add.w	r6, r4, #25
 800ca5c:	e7f5      	b.n	800ca4a <_printf_i+0x22e>
 800ca5e:	bf00      	nop
 800ca60:	0800f427 	.word	0x0800f427
 800ca64:	0800f438 	.word	0x0800f438

0800ca68 <iprintf>:
 800ca68:	b40f      	push	{r0, r1, r2, r3}
 800ca6a:	4b0a      	ldr	r3, [pc, #40]	; (800ca94 <iprintf+0x2c>)
 800ca6c:	b513      	push	{r0, r1, r4, lr}
 800ca6e:	681c      	ldr	r4, [r3, #0]
 800ca70:	b124      	cbz	r4, 800ca7c <iprintf+0x14>
 800ca72:	69a3      	ldr	r3, [r4, #24]
 800ca74:	b913      	cbnz	r3, 800ca7c <iprintf+0x14>
 800ca76:	4620      	mov	r0, r4
 800ca78:	f001 f9da 	bl	800de30 <__sinit>
 800ca7c:	ab05      	add	r3, sp, #20
 800ca7e:	9a04      	ldr	r2, [sp, #16]
 800ca80:	68a1      	ldr	r1, [r4, #8]
 800ca82:	9301      	str	r3, [sp, #4]
 800ca84:	4620      	mov	r0, r4
 800ca86:	f7ff fa55 	bl	800bf34 <_vfiprintf_r>
 800ca8a:	b002      	add	sp, #8
 800ca8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca90:	b004      	add	sp, #16
 800ca92:	4770      	bx	lr
 800ca94:	20000228 	.word	0x20000228

0800ca98 <_puts_r>:
 800ca98:	b570      	push	{r4, r5, r6, lr}
 800ca9a:	460e      	mov	r6, r1
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	b118      	cbz	r0, 800caa8 <_puts_r+0x10>
 800caa0:	6983      	ldr	r3, [r0, #24]
 800caa2:	b90b      	cbnz	r3, 800caa8 <_puts_r+0x10>
 800caa4:	f001 f9c4 	bl	800de30 <__sinit>
 800caa8:	69ab      	ldr	r3, [r5, #24]
 800caaa:	68ac      	ldr	r4, [r5, #8]
 800caac:	b913      	cbnz	r3, 800cab4 <_puts_r+0x1c>
 800caae:	4628      	mov	r0, r5
 800cab0:	f001 f9be 	bl	800de30 <__sinit>
 800cab4:	4b2c      	ldr	r3, [pc, #176]	; (800cb68 <_puts_r+0xd0>)
 800cab6:	429c      	cmp	r4, r3
 800cab8:	d120      	bne.n	800cafc <_puts_r+0x64>
 800caba:	686c      	ldr	r4, [r5, #4]
 800cabc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cabe:	07db      	lsls	r3, r3, #31
 800cac0:	d405      	bmi.n	800cace <_puts_r+0x36>
 800cac2:	89a3      	ldrh	r3, [r4, #12]
 800cac4:	0598      	lsls	r0, r3, #22
 800cac6:	d402      	bmi.n	800cace <_puts_r+0x36>
 800cac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800caca:	f001 fa54 	bl	800df76 <__retarget_lock_acquire_recursive>
 800cace:	89a3      	ldrh	r3, [r4, #12]
 800cad0:	0719      	lsls	r1, r3, #28
 800cad2:	d51d      	bpl.n	800cb10 <_puts_r+0x78>
 800cad4:	6923      	ldr	r3, [r4, #16]
 800cad6:	b1db      	cbz	r3, 800cb10 <_puts_r+0x78>
 800cad8:	3e01      	subs	r6, #1
 800cada:	68a3      	ldr	r3, [r4, #8]
 800cadc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cae0:	3b01      	subs	r3, #1
 800cae2:	60a3      	str	r3, [r4, #8]
 800cae4:	bb39      	cbnz	r1, 800cb36 <_puts_r+0x9e>
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	da38      	bge.n	800cb5c <_puts_r+0xc4>
 800caea:	4622      	mov	r2, r4
 800caec:	210a      	movs	r1, #10
 800caee:	4628      	mov	r0, r5
 800caf0:	f000 f942 	bl	800cd78 <__swbuf_r>
 800caf4:	3001      	adds	r0, #1
 800caf6:	d011      	beq.n	800cb1c <_puts_r+0x84>
 800caf8:	250a      	movs	r5, #10
 800cafa:	e011      	b.n	800cb20 <_puts_r+0x88>
 800cafc:	4b1b      	ldr	r3, [pc, #108]	; (800cb6c <_puts_r+0xd4>)
 800cafe:	429c      	cmp	r4, r3
 800cb00:	d101      	bne.n	800cb06 <_puts_r+0x6e>
 800cb02:	68ac      	ldr	r4, [r5, #8]
 800cb04:	e7da      	b.n	800cabc <_puts_r+0x24>
 800cb06:	4b1a      	ldr	r3, [pc, #104]	; (800cb70 <_puts_r+0xd8>)
 800cb08:	429c      	cmp	r4, r3
 800cb0a:	bf08      	it	eq
 800cb0c:	68ec      	ldreq	r4, [r5, #12]
 800cb0e:	e7d5      	b.n	800cabc <_puts_r+0x24>
 800cb10:	4621      	mov	r1, r4
 800cb12:	4628      	mov	r0, r5
 800cb14:	f000 f982 	bl	800ce1c <__swsetup_r>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d0dd      	beq.n	800cad8 <_puts_r+0x40>
 800cb1c:	f04f 35ff 	mov.w	r5, #4294967295
 800cb20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb22:	07da      	lsls	r2, r3, #31
 800cb24:	d405      	bmi.n	800cb32 <_puts_r+0x9a>
 800cb26:	89a3      	ldrh	r3, [r4, #12]
 800cb28:	059b      	lsls	r3, r3, #22
 800cb2a:	d402      	bmi.n	800cb32 <_puts_r+0x9a>
 800cb2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb2e:	f001 fa23 	bl	800df78 <__retarget_lock_release_recursive>
 800cb32:	4628      	mov	r0, r5
 800cb34:	bd70      	pop	{r4, r5, r6, pc}
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	da04      	bge.n	800cb44 <_puts_r+0xac>
 800cb3a:	69a2      	ldr	r2, [r4, #24]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	dc06      	bgt.n	800cb4e <_puts_r+0xb6>
 800cb40:	290a      	cmp	r1, #10
 800cb42:	d004      	beq.n	800cb4e <_puts_r+0xb6>
 800cb44:	6823      	ldr	r3, [r4, #0]
 800cb46:	1c5a      	adds	r2, r3, #1
 800cb48:	6022      	str	r2, [r4, #0]
 800cb4a:	7019      	strb	r1, [r3, #0]
 800cb4c:	e7c5      	b.n	800cada <_puts_r+0x42>
 800cb4e:	4622      	mov	r2, r4
 800cb50:	4628      	mov	r0, r5
 800cb52:	f000 f911 	bl	800cd78 <__swbuf_r>
 800cb56:	3001      	adds	r0, #1
 800cb58:	d1bf      	bne.n	800cada <_puts_r+0x42>
 800cb5a:	e7df      	b.n	800cb1c <_puts_r+0x84>
 800cb5c:	6823      	ldr	r3, [r4, #0]
 800cb5e:	250a      	movs	r5, #10
 800cb60:	1c5a      	adds	r2, r3, #1
 800cb62:	6022      	str	r2, [r4, #0]
 800cb64:	701d      	strb	r5, [r3, #0]
 800cb66:	e7db      	b.n	800cb20 <_puts_r+0x88>
 800cb68:	0800f5fc 	.word	0x0800f5fc
 800cb6c:	0800f61c 	.word	0x0800f61c
 800cb70:	0800f5dc 	.word	0x0800f5dc

0800cb74 <puts>:
 800cb74:	4b02      	ldr	r3, [pc, #8]	; (800cb80 <puts+0xc>)
 800cb76:	4601      	mov	r1, r0
 800cb78:	6818      	ldr	r0, [r3, #0]
 800cb7a:	f7ff bf8d 	b.w	800ca98 <_puts_r>
 800cb7e:	bf00      	nop
 800cb80:	20000228 	.word	0x20000228

0800cb84 <sniprintf>:
 800cb84:	b40c      	push	{r2, r3}
 800cb86:	b530      	push	{r4, r5, lr}
 800cb88:	4b17      	ldr	r3, [pc, #92]	; (800cbe8 <sniprintf+0x64>)
 800cb8a:	1e0c      	subs	r4, r1, #0
 800cb8c:	681d      	ldr	r5, [r3, #0]
 800cb8e:	b09d      	sub	sp, #116	; 0x74
 800cb90:	da08      	bge.n	800cba4 <sniprintf+0x20>
 800cb92:	238b      	movs	r3, #139	; 0x8b
 800cb94:	602b      	str	r3, [r5, #0]
 800cb96:	f04f 30ff 	mov.w	r0, #4294967295
 800cb9a:	b01d      	add	sp, #116	; 0x74
 800cb9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cba0:	b002      	add	sp, #8
 800cba2:	4770      	bx	lr
 800cba4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cba8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cbac:	bf14      	ite	ne
 800cbae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cbb2:	4623      	moveq	r3, r4
 800cbb4:	9304      	str	r3, [sp, #16]
 800cbb6:	9307      	str	r3, [sp, #28]
 800cbb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cbbc:	9002      	str	r0, [sp, #8]
 800cbbe:	9006      	str	r0, [sp, #24]
 800cbc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbc4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cbc6:	ab21      	add	r3, sp, #132	; 0x84
 800cbc8:	a902      	add	r1, sp, #8
 800cbca:	4628      	mov	r0, r5
 800cbcc:	9301      	str	r3, [sp, #4]
 800cbce:	f001 ff5f 	bl	800ea90 <_svfiprintf_r>
 800cbd2:	1c43      	adds	r3, r0, #1
 800cbd4:	bfbc      	itt	lt
 800cbd6:	238b      	movlt	r3, #139	; 0x8b
 800cbd8:	602b      	strlt	r3, [r5, #0]
 800cbda:	2c00      	cmp	r4, #0
 800cbdc:	d0dd      	beq.n	800cb9a <sniprintf+0x16>
 800cbde:	9b02      	ldr	r3, [sp, #8]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	701a      	strb	r2, [r3, #0]
 800cbe4:	e7d9      	b.n	800cb9a <sniprintf+0x16>
 800cbe6:	bf00      	nop
 800cbe8:	20000228 	.word	0x20000228

0800cbec <_strtol_l.constprop.0>:
 800cbec:	2b01      	cmp	r3, #1
 800cbee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbf2:	d001      	beq.n	800cbf8 <_strtol_l.constprop.0+0xc>
 800cbf4:	2b24      	cmp	r3, #36	; 0x24
 800cbf6:	d906      	bls.n	800cc06 <_strtol_l.constprop.0+0x1a>
 800cbf8:	f7ff f920 	bl	800be3c <__errno>
 800cbfc:	2316      	movs	r3, #22
 800cbfe:	6003      	str	r3, [r0, #0]
 800cc00:	2000      	movs	r0, #0
 800cc02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc06:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ccec <_strtol_l.constprop.0+0x100>
 800cc0a:	460d      	mov	r5, r1
 800cc0c:	462e      	mov	r6, r5
 800cc0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc12:	f814 700c 	ldrb.w	r7, [r4, ip]
 800cc16:	f017 0708 	ands.w	r7, r7, #8
 800cc1a:	d1f7      	bne.n	800cc0c <_strtol_l.constprop.0+0x20>
 800cc1c:	2c2d      	cmp	r4, #45	; 0x2d
 800cc1e:	d132      	bne.n	800cc86 <_strtol_l.constprop.0+0x9a>
 800cc20:	782c      	ldrb	r4, [r5, #0]
 800cc22:	2701      	movs	r7, #1
 800cc24:	1cb5      	adds	r5, r6, #2
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d05b      	beq.n	800cce2 <_strtol_l.constprop.0+0xf6>
 800cc2a:	2b10      	cmp	r3, #16
 800cc2c:	d109      	bne.n	800cc42 <_strtol_l.constprop.0+0x56>
 800cc2e:	2c30      	cmp	r4, #48	; 0x30
 800cc30:	d107      	bne.n	800cc42 <_strtol_l.constprop.0+0x56>
 800cc32:	782c      	ldrb	r4, [r5, #0]
 800cc34:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cc38:	2c58      	cmp	r4, #88	; 0x58
 800cc3a:	d14d      	bne.n	800ccd8 <_strtol_l.constprop.0+0xec>
 800cc3c:	786c      	ldrb	r4, [r5, #1]
 800cc3e:	2310      	movs	r3, #16
 800cc40:	3502      	adds	r5, #2
 800cc42:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cc46:	f108 38ff 	add.w	r8, r8, #4294967295
 800cc4a:	f04f 0c00 	mov.w	ip, #0
 800cc4e:	fbb8 f9f3 	udiv	r9, r8, r3
 800cc52:	4666      	mov	r6, ip
 800cc54:	fb03 8a19 	mls	sl, r3, r9, r8
 800cc58:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800cc5c:	f1be 0f09 	cmp.w	lr, #9
 800cc60:	d816      	bhi.n	800cc90 <_strtol_l.constprop.0+0xa4>
 800cc62:	4674      	mov	r4, lr
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	dd24      	ble.n	800ccb2 <_strtol_l.constprop.0+0xc6>
 800cc68:	f1bc 0f00 	cmp.w	ip, #0
 800cc6c:	db1e      	blt.n	800ccac <_strtol_l.constprop.0+0xc0>
 800cc6e:	45b1      	cmp	r9, r6
 800cc70:	d31c      	bcc.n	800ccac <_strtol_l.constprop.0+0xc0>
 800cc72:	d101      	bne.n	800cc78 <_strtol_l.constprop.0+0x8c>
 800cc74:	45a2      	cmp	sl, r4
 800cc76:	db19      	blt.n	800ccac <_strtol_l.constprop.0+0xc0>
 800cc78:	fb06 4603 	mla	r6, r6, r3, r4
 800cc7c:	f04f 0c01 	mov.w	ip, #1
 800cc80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cc84:	e7e8      	b.n	800cc58 <_strtol_l.constprop.0+0x6c>
 800cc86:	2c2b      	cmp	r4, #43	; 0x2b
 800cc88:	bf04      	itt	eq
 800cc8a:	782c      	ldrbeq	r4, [r5, #0]
 800cc8c:	1cb5      	addeq	r5, r6, #2
 800cc8e:	e7ca      	b.n	800cc26 <_strtol_l.constprop.0+0x3a>
 800cc90:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800cc94:	f1be 0f19 	cmp.w	lr, #25
 800cc98:	d801      	bhi.n	800cc9e <_strtol_l.constprop.0+0xb2>
 800cc9a:	3c37      	subs	r4, #55	; 0x37
 800cc9c:	e7e2      	b.n	800cc64 <_strtol_l.constprop.0+0x78>
 800cc9e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800cca2:	f1be 0f19 	cmp.w	lr, #25
 800cca6:	d804      	bhi.n	800ccb2 <_strtol_l.constprop.0+0xc6>
 800cca8:	3c57      	subs	r4, #87	; 0x57
 800ccaa:	e7db      	b.n	800cc64 <_strtol_l.constprop.0+0x78>
 800ccac:	f04f 3cff 	mov.w	ip, #4294967295
 800ccb0:	e7e6      	b.n	800cc80 <_strtol_l.constprop.0+0x94>
 800ccb2:	f1bc 0f00 	cmp.w	ip, #0
 800ccb6:	da05      	bge.n	800ccc4 <_strtol_l.constprop.0+0xd8>
 800ccb8:	2322      	movs	r3, #34	; 0x22
 800ccba:	6003      	str	r3, [r0, #0]
 800ccbc:	4646      	mov	r6, r8
 800ccbe:	b942      	cbnz	r2, 800ccd2 <_strtol_l.constprop.0+0xe6>
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	e79e      	b.n	800cc02 <_strtol_l.constprop.0+0x16>
 800ccc4:	b107      	cbz	r7, 800ccc8 <_strtol_l.constprop.0+0xdc>
 800ccc6:	4276      	negs	r6, r6
 800ccc8:	2a00      	cmp	r2, #0
 800ccca:	d0f9      	beq.n	800ccc0 <_strtol_l.constprop.0+0xd4>
 800cccc:	f1bc 0f00 	cmp.w	ip, #0
 800ccd0:	d000      	beq.n	800ccd4 <_strtol_l.constprop.0+0xe8>
 800ccd2:	1e69      	subs	r1, r5, #1
 800ccd4:	6011      	str	r1, [r2, #0]
 800ccd6:	e7f3      	b.n	800ccc0 <_strtol_l.constprop.0+0xd4>
 800ccd8:	2430      	movs	r4, #48	; 0x30
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1b1      	bne.n	800cc42 <_strtol_l.constprop.0+0x56>
 800ccde:	2308      	movs	r3, #8
 800cce0:	e7af      	b.n	800cc42 <_strtol_l.constprop.0+0x56>
 800cce2:	2c30      	cmp	r4, #48	; 0x30
 800cce4:	d0a5      	beq.n	800cc32 <_strtol_l.constprop.0+0x46>
 800cce6:	230a      	movs	r3, #10
 800cce8:	e7ab      	b.n	800cc42 <_strtol_l.constprop.0+0x56>
 800ccea:	bf00      	nop
 800ccec:	0800f44a 	.word	0x0800f44a

0800ccf0 <strtol>:
 800ccf0:	4613      	mov	r3, r2
 800ccf2:	460a      	mov	r2, r1
 800ccf4:	4601      	mov	r1, r0
 800ccf6:	4802      	ldr	r0, [pc, #8]	; (800cd00 <strtol+0x10>)
 800ccf8:	6800      	ldr	r0, [r0, #0]
 800ccfa:	f7ff bf77 	b.w	800cbec <_strtol_l.constprop.0>
 800ccfe:	bf00      	nop
 800cd00:	20000228 	.word	0x20000228

0800cd04 <_vsniprintf_r>:
 800cd04:	b530      	push	{r4, r5, lr}
 800cd06:	4614      	mov	r4, r2
 800cd08:	2c00      	cmp	r4, #0
 800cd0a:	b09b      	sub	sp, #108	; 0x6c
 800cd0c:	4605      	mov	r5, r0
 800cd0e:	461a      	mov	r2, r3
 800cd10:	da05      	bge.n	800cd1e <_vsniprintf_r+0x1a>
 800cd12:	238b      	movs	r3, #139	; 0x8b
 800cd14:	6003      	str	r3, [r0, #0]
 800cd16:	f04f 30ff 	mov.w	r0, #4294967295
 800cd1a:	b01b      	add	sp, #108	; 0x6c
 800cd1c:	bd30      	pop	{r4, r5, pc}
 800cd1e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd22:	f8ad 300c 	strh.w	r3, [sp, #12]
 800cd26:	bf14      	ite	ne
 800cd28:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd2c:	4623      	moveq	r3, r4
 800cd2e:	9302      	str	r3, [sp, #8]
 800cd30:	9305      	str	r3, [sp, #20]
 800cd32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd36:	9100      	str	r1, [sp, #0]
 800cd38:	9104      	str	r1, [sp, #16]
 800cd3a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800cd3e:	4669      	mov	r1, sp
 800cd40:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800cd42:	f001 fea5 	bl	800ea90 <_svfiprintf_r>
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	bfbc      	itt	lt
 800cd4a:	238b      	movlt	r3, #139	; 0x8b
 800cd4c:	602b      	strlt	r3, [r5, #0]
 800cd4e:	2c00      	cmp	r4, #0
 800cd50:	d0e3      	beq.n	800cd1a <_vsniprintf_r+0x16>
 800cd52:	9b00      	ldr	r3, [sp, #0]
 800cd54:	2200      	movs	r2, #0
 800cd56:	701a      	strb	r2, [r3, #0]
 800cd58:	e7df      	b.n	800cd1a <_vsniprintf_r+0x16>
	...

0800cd5c <vsniprintf>:
 800cd5c:	b507      	push	{r0, r1, r2, lr}
 800cd5e:	9300      	str	r3, [sp, #0]
 800cd60:	4613      	mov	r3, r2
 800cd62:	460a      	mov	r2, r1
 800cd64:	4601      	mov	r1, r0
 800cd66:	4803      	ldr	r0, [pc, #12]	; (800cd74 <vsniprintf+0x18>)
 800cd68:	6800      	ldr	r0, [r0, #0]
 800cd6a:	f7ff ffcb 	bl	800cd04 <_vsniprintf_r>
 800cd6e:	b003      	add	sp, #12
 800cd70:	f85d fb04 	ldr.w	pc, [sp], #4
 800cd74:	20000228 	.word	0x20000228

0800cd78 <__swbuf_r>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	460e      	mov	r6, r1
 800cd7c:	4614      	mov	r4, r2
 800cd7e:	4605      	mov	r5, r0
 800cd80:	b118      	cbz	r0, 800cd8a <__swbuf_r+0x12>
 800cd82:	6983      	ldr	r3, [r0, #24]
 800cd84:	b90b      	cbnz	r3, 800cd8a <__swbuf_r+0x12>
 800cd86:	f001 f853 	bl	800de30 <__sinit>
 800cd8a:	4b21      	ldr	r3, [pc, #132]	; (800ce10 <__swbuf_r+0x98>)
 800cd8c:	429c      	cmp	r4, r3
 800cd8e:	d12b      	bne.n	800cde8 <__swbuf_r+0x70>
 800cd90:	686c      	ldr	r4, [r5, #4]
 800cd92:	69a3      	ldr	r3, [r4, #24]
 800cd94:	60a3      	str	r3, [r4, #8]
 800cd96:	89a3      	ldrh	r3, [r4, #12]
 800cd98:	071a      	lsls	r2, r3, #28
 800cd9a:	d52f      	bpl.n	800cdfc <__swbuf_r+0x84>
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	b36b      	cbz	r3, 800cdfc <__swbuf_r+0x84>
 800cda0:	6923      	ldr	r3, [r4, #16]
 800cda2:	6820      	ldr	r0, [r4, #0]
 800cda4:	1ac0      	subs	r0, r0, r3
 800cda6:	6963      	ldr	r3, [r4, #20]
 800cda8:	b2f6      	uxtb	r6, r6
 800cdaa:	4283      	cmp	r3, r0
 800cdac:	4637      	mov	r7, r6
 800cdae:	dc04      	bgt.n	800cdba <__swbuf_r+0x42>
 800cdb0:	4621      	mov	r1, r4
 800cdb2:	4628      	mov	r0, r5
 800cdb4:	f000 ffa8 	bl	800dd08 <_fflush_r>
 800cdb8:	bb30      	cbnz	r0, 800ce08 <__swbuf_r+0x90>
 800cdba:	68a3      	ldr	r3, [r4, #8]
 800cdbc:	3b01      	subs	r3, #1
 800cdbe:	60a3      	str	r3, [r4, #8]
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	6022      	str	r2, [r4, #0]
 800cdc6:	701e      	strb	r6, [r3, #0]
 800cdc8:	6963      	ldr	r3, [r4, #20]
 800cdca:	3001      	adds	r0, #1
 800cdcc:	4283      	cmp	r3, r0
 800cdce:	d004      	beq.n	800cdda <__swbuf_r+0x62>
 800cdd0:	89a3      	ldrh	r3, [r4, #12]
 800cdd2:	07db      	lsls	r3, r3, #31
 800cdd4:	d506      	bpl.n	800cde4 <__swbuf_r+0x6c>
 800cdd6:	2e0a      	cmp	r6, #10
 800cdd8:	d104      	bne.n	800cde4 <__swbuf_r+0x6c>
 800cdda:	4621      	mov	r1, r4
 800cddc:	4628      	mov	r0, r5
 800cdde:	f000 ff93 	bl	800dd08 <_fflush_r>
 800cde2:	b988      	cbnz	r0, 800ce08 <__swbuf_r+0x90>
 800cde4:	4638      	mov	r0, r7
 800cde6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cde8:	4b0a      	ldr	r3, [pc, #40]	; (800ce14 <__swbuf_r+0x9c>)
 800cdea:	429c      	cmp	r4, r3
 800cdec:	d101      	bne.n	800cdf2 <__swbuf_r+0x7a>
 800cdee:	68ac      	ldr	r4, [r5, #8]
 800cdf0:	e7cf      	b.n	800cd92 <__swbuf_r+0x1a>
 800cdf2:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <__swbuf_r+0xa0>)
 800cdf4:	429c      	cmp	r4, r3
 800cdf6:	bf08      	it	eq
 800cdf8:	68ec      	ldreq	r4, [r5, #12]
 800cdfa:	e7ca      	b.n	800cd92 <__swbuf_r+0x1a>
 800cdfc:	4621      	mov	r1, r4
 800cdfe:	4628      	mov	r0, r5
 800ce00:	f000 f80c 	bl	800ce1c <__swsetup_r>
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d0cb      	beq.n	800cda0 <__swbuf_r+0x28>
 800ce08:	f04f 37ff 	mov.w	r7, #4294967295
 800ce0c:	e7ea      	b.n	800cde4 <__swbuf_r+0x6c>
 800ce0e:	bf00      	nop
 800ce10:	0800f5fc 	.word	0x0800f5fc
 800ce14:	0800f61c 	.word	0x0800f61c
 800ce18:	0800f5dc 	.word	0x0800f5dc

0800ce1c <__swsetup_r>:
 800ce1c:	4b32      	ldr	r3, [pc, #200]	; (800cee8 <__swsetup_r+0xcc>)
 800ce1e:	b570      	push	{r4, r5, r6, lr}
 800ce20:	681d      	ldr	r5, [r3, #0]
 800ce22:	4606      	mov	r6, r0
 800ce24:	460c      	mov	r4, r1
 800ce26:	b125      	cbz	r5, 800ce32 <__swsetup_r+0x16>
 800ce28:	69ab      	ldr	r3, [r5, #24]
 800ce2a:	b913      	cbnz	r3, 800ce32 <__swsetup_r+0x16>
 800ce2c:	4628      	mov	r0, r5
 800ce2e:	f000 ffff 	bl	800de30 <__sinit>
 800ce32:	4b2e      	ldr	r3, [pc, #184]	; (800ceec <__swsetup_r+0xd0>)
 800ce34:	429c      	cmp	r4, r3
 800ce36:	d10f      	bne.n	800ce58 <__swsetup_r+0x3c>
 800ce38:	686c      	ldr	r4, [r5, #4]
 800ce3a:	89a3      	ldrh	r3, [r4, #12]
 800ce3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ce40:	0719      	lsls	r1, r3, #28
 800ce42:	d42c      	bmi.n	800ce9e <__swsetup_r+0x82>
 800ce44:	06dd      	lsls	r5, r3, #27
 800ce46:	d411      	bmi.n	800ce6c <__swsetup_r+0x50>
 800ce48:	2309      	movs	r3, #9
 800ce4a:	6033      	str	r3, [r6, #0]
 800ce4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ce50:	81a3      	strh	r3, [r4, #12]
 800ce52:	f04f 30ff 	mov.w	r0, #4294967295
 800ce56:	e03e      	b.n	800ced6 <__swsetup_r+0xba>
 800ce58:	4b25      	ldr	r3, [pc, #148]	; (800cef0 <__swsetup_r+0xd4>)
 800ce5a:	429c      	cmp	r4, r3
 800ce5c:	d101      	bne.n	800ce62 <__swsetup_r+0x46>
 800ce5e:	68ac      	ldr	r4, [r5, #8]
 800ce60:	e7eb      	b.n	800ce3a <__swsetup_r+0x1e>
 800ce62:	4b24      	ldr	r3, [pc, #144]	; (800cef4 <__swsetup_r+0xd8>)
 800ce64:	429c      	cmp	r4, r3
 800ce66:	bf08      	it	eq
 800ce68:	68ec      	ldreq	r4, [r5, #12]
 800ce6a:	e7e6      	b.n	800ce3a <__swsetup_r+0x1e>
 800ce6c:	0758      	lsls	r0, r3, #29
 800ce6e:	d512      	bpl.n	800ce96 <__swsetup_r+0x7a>
 800ce70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce72:	b141      	cbz	r1, 800ce86 <__swsetup_r+0x6a>
 800ce74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ce78:	4299      	cmp	r1, r3
 800ce7a:	d002      	beq.n	800ce82 <__swsetup_r+0x66>
 800ce7c:	4630      	mov	r0, r6
 800ce7e:	f001 fc9d 	bl	800e7bc <_free_r>
 800ce82:	2300      	movs	r3, #0
 800ce84:	6363      	str	r3, [r4, #52]	; 0x34
 800ce86:	89a3      	ldrh	r3, [r4, #12]
 800ce88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ce8c:	81a3      	strh	r3, [r4, #12]
 800ce8e:	2300      	movs	r3, #0
 800ce90:	6063      	str	r3, [r4, #4]
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	6023      	str	r3, [r4, #0]
 800ce96:	89a3      	ldrh	r3, [r4, #12]
 800ce98:	f043 0308 	orr.w	r3, r3, #8
 800ce9c:	81a3      	strh	r3, [r4, #12]
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	b94b      	cbnz	r3, 800ceb6 <__swsetup_r+0x9a>
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ceac:	d003      	beq.n	800ceb6 <__swsetup_r+0x9a>
 800ceae:	4621      	mov	r1, r4
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f001 f887 	bl	800dfc4 <__smakebuf_r>
 800ceb6:	89a0      	ldrh	r0, [r4, #12]
 800ceb8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cebc:	f010 0301 	ands.w	r3, r0, #1
 800cec0:	d00a      	beq.n	800ced8 <__swsetup_r+0xbc>
 800cec2:	2300      	movs	r3, #0
 800cec4:	60a3      	str	r3, [r4, #8]
 800cec6:	6963      	ldr	r3, [r4, #20]
 800cec8:	425b      	negs	r3, r3
 800ceca:	61a3      	str	r3, [r4, #24]
 800cecc:	6923      	ldr	r3, [r4, #16]
 800cece:	b943      	cbnz	r3, 800cee2 <__swsetup_r+0xc6>
 800ced0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ced4:	d1ba      	bne.n	800ce4c <__swsetup_r+0x30>
 800ced6:	bd70      	pop	{r4, r5, r6, pc}
 800ced8:	0781      	lsls	r1, r0, #30
 800ceda:	bf58      	it	pl
 800cedc:	6963      	ldrpl	r3, [r4, #20]
 800cede:	60a3      	str	r3, [r4, #8]
 800cee0:	e7f4      	b.n	800cecc <__swsetup_r+0xb0>
 800cee2:	2000      	movs	r0, #0
 800cee4:	e7f7      	b.n	800ced6 <__swsetup_r+0xba>
 800cee6:	bf00      	nop
 800cee8:	20000228 	.word	0x20000228
 800ceec:	0800f5fc 	.word	0x0800f5fc
 800cef0:	0800f61c 	.word	0x0800f61c
 800cef4:	0800f5dc 	.word	0x0800f5dc

0800cef8 <abort>:
 800cef8:	b508      	push	{r3, lr}
 800cefa:	2006      	movs	r0, #6
 800cefc:	f001 ff00 	bl	800ed00 <raise>
 800cf00:	2001      	movs	r0, #1
 800cf02:	f7f6 fcc3 	bl	800388c <_exit>

0800cf06 <quorem>:
 800cf06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf0a:	6903      	ldr	r3, [r0, #16]
 800cf0c:	690c      	ldr	r4, [r1, #16]
 800cf0e:	42a3      	cmp	r3, r4
 800cf10:	4607      	mov	r7, r0
 800cf12:	f2c0 8081 	blt.w	800d018 <quorem+0x112>
 800cf16:	3c01      	subs	r4, #1
 800cf18:	f101 0814 	add.w	r8, r1, #20
 800cf1c:	f100 0514 	add.w	r5, r0, #20
 800cf20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cf2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	429a      	cmp	r2, r3
 800cf32:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cf36:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cf3a:	fbb2 f6f3 	udiv	r6, r2, r3
 800cf3e:	d331      	bcc.n	800cfa4 <quorem+0x9e>
 800cf40:	f04f 0e00 	mov.w	lr, #0
 800cf44:	4640      	mov	r0, r8
 800cf46:	46ac      	mov	ip, r5
 800cf48:	46f2      	mov	sl, lr
 800cf4a:	f850 2b04 	ldr.w	r2, [r0], #4
 800cf4e:	b293      	uxth	r3, r2
 800cf50:	fb06 e303 	mla	r3, r6, r3, lr
 800cf54:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cf58:	b29b      	uxth	r3, r3
 800cf5a:	ebaa 0303 	sub.w	r3, sl, r3
 800cf5e:	f8dc a000 	ldr.w	sl, [ip]
 800cf62:	0c12      	lsrs	r2, r2, #16
 800cf64:	fa13 f38a 	uxtah	r3, r3, sl
 800cf68:	fb06 e202 	mla	r2, r6, r2, lr
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	9b00      	ldr	r3, [sp, #0]
 800cf70:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf74:	b292      	uxth	r2, r2
 800cf76:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf7e:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf82:	4581      	cmp	r9, r0
 800cf84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf88:	f84c 3b04 	str.w	r3, [ip], #4
 800cf8c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf90:	d2db      	bcs.n	800cf4a <quorem+0x44>
 800cf92:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf96:	b92b      	cbnz	r3, 800cfa4 <quorem+0x9e>
 800cf98:	9b01      	ldr	r3, [sp, #4]
 800cf9a:	3b04      	subs	r3, #4
 800cf9c:	429d      	cmp	r5, r3
 800cf9e:	461a      	mov	r2, r3
 800cfa0:	d32e      	bcc.n	800d000 <quorem+0xfa>
 800cfa2:	613c      	str	r4, [r7, #16]
 800cfa4:	4638      	mov	r0, r7
 800cfa6:	f001 faf1 	bl	800e58c <__mcmp>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	db24      	blt.n	800cff8 <quorem+0xf2>
 800cfae:	3601      	adds	r6, #1
 800cfb0:	4628      	mov	r0, r5
 800cfb2:	f04f 0c00 	mov.w	ip, #0
 800cfb6:	f858 2b04 	ldr.w	r2, [r8], #4
 800cfba:	f8d0 e000 	ldr.w	lr, [r0]
 800cfbe:	b293      	uxth	r3, r2
 800cfc0:	ebac 0303 	sub.w	r3, ip, r3
 800cfc4:	0c12      	lsrs	r2, r2, #16
 800cfc6:	fa13 f38e 	uxtah	r3, r3, lr
 800cfca:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cfce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cfd8:	45c1      	cmp	r9, r8
 800cfda:	f840 3b04 	str.w	r3, [r0], #4
 800cfde:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cfe2:	d2e8      	bcs.n	800cfb6 <quorem+0xb0>
 800cfe4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cfe8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cfec:	b922      	cbnz	r2, 800cff8 <quorem+0xf2>
 800cfee:	3b04      	subs	r3, #4
 800cff0:	429d      	cmp	r5, r3
 800cff2:	461a      	mov	r2, r3
 800cff4:	d30a      	bcc.n	800d00c <quorem+0x106>
 800cff6:	613c      	str	r4, [r7, #16]
 800cff8:	4630      	mov	r0, r6
 800cffa:	b003      	add	sp, #12
 800cffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d000:	6812      	ldr	r2, [r2, #0]
 800d002:	3b04      	subs	r3, #4
 800d004:	2a00      	cmp	r2, #0
 800d006:	d1cc      	bne.n	800cfa2 <quorem+0x9c>
 800d008:	3c01      	subs	r4, #1
 800d00a:	e7c7      	b.n	800cf9c <quorem+0x96>
 800d00c:	6812      	ldr	r2, [r2, #0]
 800d00e:	3b04      	subs	r3, #4
 800d010:	2a00      	cmp	r2, #0
 800d012:	d1f0      	bne.n	800cff6 <quorem+0xf0>
 800d014:	3c01      	subs	r4, #1
 800d016:	e7eb      	b.n	800cff0 <quorem+0xea>
 800d018:	2000      	movs	r0, #0
 800d01a:	e7ee      	b.n	800cffa <quorem+0xf4>
 800d01c:	0000      	movs	r0, r0
	...

0800d020 <_dtoa_r>:
 800d020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	ed2d 8b04 	vpush	{d8-d9}
 800d028:	ec57 6b10 	vmov	r6, r7, d0
 800d02c:	b093      	sub	sp, #76	; 0x4c
 800d02e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d030:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d034:	9106      	str	r1, [sp, #24]
 800d036:	ee10 aa10 	vmov	sl, s0
 800d03a:	4604      	mov	r4, r0
 800d03c:	9209      	str	r2, [sp, #36]	; 0x24
 800d03e:	930c      	str	r3, [sp, #48]	; 0x30
 800d040:	46bb      	mov	fp, r7
 800d042:	b975      	cbnz	r5, 800d062 <_dtoa_r+0x42>
 800d044:	2010      	movs	r0, #16
 800d046:	f000 fffd 	bl	800e044 <malloc>
 800d04a:	4602      	mov	r2, r0
 800d04c:	6260      	str	r0, [r4, #36]	; 0x24
 800d04e:	b920      	cbnz	r0, 800d05a <_dtoa_r+0x3a>
 800d050:	4ba7      	ldr	r3, [pc, #668]	; (800d2f0 <_dtoa_r+0x2d0>)
 800d052:	21ea      	movs	r1, #234	; 0xea
 800d054:	48a7      	ldr	r0, [pc, #668]	; (800d2f4 <_dtoa_r+0x2d4>)
 800d056:	f7fe fecf 	bl	800bdf8 <__assert_func>
 800d05a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d05e:	6005      	str	r5, [r0, #0]
 800d060:	60c5      	str	r5, [r0, #12]
 800d062:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d064:	6819      	ldr	r1, [r3, #0]
 800d066:	b151      	cbz	r1, 800d07e <_dtoa_r+0x5e>
 800d068:	685a      	ldr	r2, [r3, #4]
 800d06a:	604a      	str	r2, [r1, #4]
 800d06c:	2301      	movs	r3, #1
 800d06e:	4093      	lsls	r3, r2
 800d070:	608b      	str	r3, [r1, #8]
 800d072:	4620      	mov	r0, r4
 800d074:	f001 f848 	bl	800e108 <_Bfree>
 800d078:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d07a:	2200      	movs	r2, #0
 800d07c:	601a      	str	r2, [r3, #0]
 800d07e:	1e3b      	subs	r3, r7, #0
 800d080:	bfaa      	itet	ge
 800d082:	2300      	movge	r3, #0
 800d084:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d088:	f8c8 3000 	strge.w	r3, [r8]
 800d08c:	4b9a      	ldr	r3, [pc, #616]	; (800d2f8 <_dtoa_r+0x2d8>)
 800d08e:	bfbc      	itt	lt
 800d090:	2201      	movlt	r2, #1
 800d092:	f8c8 2000 	strlt.w	r2, [r8]
 800d096:	ea33 030b 	bics.w	r3, r3, fp
 800d09a:	d11b      	bne.n	800d0d4 <_dtoa_r+0xb4>
 800d09c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d09e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d0a2:	6013      	str	r3, [r2, #0]
 800d0a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d0a8:	4333      	orrs	r3, r6
 800d0aa:	f000 8592 	beq.w	800dbd2 <_dtoa_r+0xbb2>
 800d0ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0b0:	b963      	cbnz	r3, 800d0cc <_dtoa_r+0xac>
 800d0b2:	4b92      	ldr	r3, [pc, #584]	; (800d2fc <_dtoa_r+0x2dc>)
 800d0b4:	e022      	b.n	800d0fc <_dtoa_r+0xdc>
 800d0b6:	4b92      	ldr	r3, [pc, #584]	; (800d300 <_dtoa_r+0x2e0>)
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	3308      	adds	r3, #8
 800d0bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0be:	6013      	str	r3, [r2, #0]
 800d0c0:	9801      	ldr	r0, [sp, #4]
 800d0c2:	b013      	add	sp, #76	; 0x4c
 800d0c4:	ecbd 8b04 	vpop	{d8-d9}
 800d0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0cc:	4b8b      	ldr	r3, [pc, #556]	; (800d2fc <_dtoa_r+0x2dc>)
 800d0ce:	9301      	str	r3, [sp, #4]
 800d0d0:	3303      	adds	r3, #3
 800d0d2:	e7f3      	b.n	800d0bc <_dtoa_r+0x9c>
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	4650      	mov	r0, sl
 800d0da:	4659      	mov	r1, fp
 800d0dc:	f7f3 fcf4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0e0:	ec4b ab19 	vmov	d9, sl, fp
 800d0e4:	4680      	mov	r8, r0
 800d0e6:	b158      	cbz	r0, 800d100 <_dtoa_r+0xe0>
 800d0e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	f000 856b 	beq.w	800dbcc <_dtoa_r+0xbac>
 800d0f6:	4883      	ldr	r0, [pc, #524]	; (800d304 <_dtoa_r+0x2e4>)
 800d0f8:	6018      	str	r0, [r3, #0]
 800d0fa:	1e43      	subs	r3, r0, #1
 800d0fc:	9301      	str	r3, [sp, #4]
 800d0fe:	e7df      	b.n	800d0c0 <_dtoa_r+0xa0>
 800d100:	ec4b ab10 	vmov	d0, sl, fp
 800d104:	aa10      	add	r2, sp, #64	; 0x40
 800d106:	a911      	add	r1, sp, #68	; 0x44
 800d108:	4620      	mov	r0, r4
 800d10a:	f001 fae5 	bl	800e6d8 <__d2b>
 800d10e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d112:	ee08 0a10 	vmov	s16, r0
 800d116:	2d00      	cmp	r5, #0
 800d118:	f000 8084 	beq.w	800d224 <_dtoa_r+0x204>
 800d11c:	ee19 3a90 	vmov	r3, s19
 800d120:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d124:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d128:	4656      	mov	r6, sl
 800d12a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d12e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d132:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d136:	4b74      	ldr	r3, [pc, #464]	; (800d308 <_dtoa_r+0x2e8>)
 800d138:	2200      	movs	r2, #0
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 f8a3 	bl	8000288 <__aeabi_dsub>
 800d142:	a365      	add	r3, pc, #404	; (adr r3, 800d2d8 <_dtoa_r+0x2b8>)
 800d144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d148:	f7f3 fa56 	bl	80005f8 <__aeabi_dmul>
 800d14c:	a364      	add	r3, pc, #400	; (adr r3, 800d2e0 <_dtoa_r+0x2c0>)
 800d14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d152:	f7f3 f89b 	bl	800028c <__adddf3>
 800d156:	4606      	mov	r6, r0
 800d158:	4628      	mov	r0, r5
 800d15a:	460f      	mov	r7, r1
 800d15c:	f7f3 f9e2 	bl	8000524 <__aeabi_i2d>
 800d160:	a361      	add	r3, pc, #388	; (adr r3, 800d2e8 <_dtoa_r+0x2c8>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 fa47 	bl	80005f8 <__aeabi_dmul>
 800d16a:	4602      	mov	r2, r0
 800d16c:	460b      	mov	r3, r1
 800d16e:	4630      	mov	r0, r6
 800d170:	4639      	mov	r1, r7
 800d172:	f7f3 f88b 	bl	800028c <__adddf3>
 800d176:	4606      	mov	r6, r0
 800d178:	460f      	mov	r7, r1
 800d17a:	f7f3 fced 	bl	8000b58 <__aeabi_d2iz>
 800d17e:	2200      	movs	r2, #0
 800d180:	9000      	str	r0, [sp, #0]
 800d182:	2300      	movs	r3, #0
 800d184:	4630      	mov	r0, r6
 800d186:	4639      	mov	r1, r7
 800d188:	f7f3 fca8 	bl	8000adc <__aeabi_dcmplt>
 800d18c:	b150      	cbz	r0, 800d1a4 <_dtoa_r+0x184>
 800d18e:	9800      	ldr	r0, [sp, #0]
 800d190:	f7f3 f9c8 	bl	8000524 <__aeabi_i2d>
 800d194:	4632      	mov	r2, r6
 800d196:	463b      	mov	r3, r7
 800d198:	f7f3 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800d19c:	b910      	cbnz	r0, 800d1a4 <_dtoa_r+0x184>
 800d19e:	9b00      	ldr	r3, [sp, #0]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	9b00      	ldr	r3, [sp, #0]
 800d1a6:	2b16      	cmp	r3, #22
 800d1a8:	d85a      	bhi.n	800d260 <_dtoa_r+0x240>
 800d1aa:	9a00      	ldr	r2, [sp, #0]
 800d1ac:	4b57      	ldr	r3, [pc, #348]	; (800d30c <_dtoa_r+0x2ec>)
 800d1ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1b6:	ec51 0b19 	vmov	r0, r1, d9
 800d1ba:	f7f3 fc8f 	bl	8000adc <__aeabi_dcmplt>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d050      	beq.n	800d264 <_dtoa_r+0x244>
 800d1c2:	9b00      	ldr	r3, [sp, #0]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	9300      	str	r3, [sp, #0]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d1ce:	1b5d      	subs	r5, r3, r5
 800d1d0:	1e6b      	subs	r3, r5, #1
 800d1d2:	9305      	str	r3, [sp, #20]
 800d1d4:	bf45      	ittet	mi
 800d1d6:	f1c5 0301 	rsbmi	r3, r5, #1
 800d1da:	9304      	strmi	r3, [sp, #16]
 800d1dc:	2300      	movpl	r3, #0
 800d1de:	2300      	movmi	r3, #0
 800d1e0:	bf4c      	ite	mi
 800d1e2:	9305      	strmi	r3, [sp, #20]
 800d1e4:	9304      	strpl	r3, [sp, #16]
 800d1e6:	9b00      	ldr	r3, [sp, #0]
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	db3d      	blt.n	800d268 <_dtoa_r+0x248>
 800d1ec:	9b05      	ldr	r3, [sp, #20]
 800d1ee:	9a00      	ldr	r2, [sp, #0]
 800d1f0:	920a      	str	r2, [sp, #40]	; 0x28
 800d1f2:	4413      	add	r3, r2
 800d1f4:	9305      	str	r3, [sp, #20]
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	9307      	str	r3, [sp, #28]
 800d1fa:	9b06      	ldr	r3, [sp, #24]
 800d1fc:	2b09      	cmp	r3, #9
 800d1fe:	f200 8089 	bhi.w	800d314 <_dtoa_r+0x2f4>
 800d202:	2b05      	cmp	r3, #5
 800d204:	bfc4      	itt	gt
 800d206:	3b04      	subgt	r3, #4
 800d208:	9306      	strgt	r3, [sp, #24]
 800d20a:	9b06      	ldr	r3, [sp, #24]
 800d20c:	f1a3 0302 	sub.w	r3, r3, #2
 800d210:	bfcc      	ite	gt
 800d212:	2500      	movgt	r5, #0
 800d214:	2501      	movle	r5, #1
 800d216:	2b03      	cmp	r3, #3
 800d218:	f200 8087 	bhi.w	800d32a <_dtoa_r+0x30a>
 800d21c:	e8df f003 	tbb	[pc, r3]
 800d220:	59383a2d 	.word	0x59383a2d
 800d224:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d228:	441d      	add	r5, r3
 800d22a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d22e:	2b20      	cmp	r3, #32
 800d230:	bfc1      	itttt	gt
 800d232:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d236:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d23a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d23e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d242:	bfda      	itte	le
 800d244:	f1c3 0320 	rsble	r3, r3, #32
 800d248:	fa06 f003 	lslle.w	r0, r6, r3
 800d24c:	4318      	orrgt	r0, r3
 800d24e:	f7f3 f959 	bl	8000504 <__aeabi_ui2d>
 800d252:	2301      	movs	r3, #1
 800d254:	4606      	mov	r6, r0
 800d256:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d25a:	3d01      	subs	r5, #1
 800d25c:	930e      	str	r3, [sp, #56]	; 0x38
 800d25e:	e76a      	b.n	800d136 <_dtoa_r+0x116>
 800d260:	2301      	movs	r3, #1
 800d262:	e7b2      	b.n	800d1ca <_dtoa_r+0x1aa>
 800d264:	900b      	str	r0, [sp, #44]	; 0x2c
 800d266:	e7b1      	b.n	800d1cc <_dtoa_r+0x1ac>
 800d268:	9b04      	ldr	r3, [sp, #16]
 800d26a:	9a00      	ldr	r2, [sp, #0]
 800d26c:	1a9b      	subs	r3, r3, r2
 800d26e:	9304      	str	r3, [sp, #16]
 800d270:	4253      	negs	r3, r2
 800d272:	9307      	str	r3, [sp, #28]
 800d274:	2300      	movs	r3, #0
 800d276:	930a      	str	r3, [sp, #40]	; 0x28
 800d278:	e7bf      	b.n	800d1fa <_dtoa_r+0x1da>
 800d27a:	2300      	movs	r3, #0
 800d27c:	9308      	str	r3, [sp, #32]
 800d27e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d280:	2b00      	cmp	r3, #0
 800d282:	dc55      	bgt.n	800d330 <_dtoa_r+0x310>
 800d284:	2301      	movs	r3, #1
 800d286:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d28a:	461a      	mov	r2, r3
 800d28c:	9209      	str	r2, [sp, #36]	; 0x24
 800d28e:	e00c      	b.n	800d2aa <_dtoa_r+0x28a>
 800d290:	2301      	movs	r3, #1
 800d292:	e7f3      	b.n	800d27c <_dtoa_r+0x25c>
 800d294:	2300      	movs	r3, #0
 800d296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d298:	9308      	str	r3, [sp, #32]
 800d29a:	9b00      	ldr	r3, [sp, #0]
 800d29c:	4413      	add	r3, r2
 800d29e:	9302      	str	r3, [sp, #8]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	9303      	str	r3, [sp, #12]
 800d2a6:	bfb8      	it	lt
 800d2a8:	2301      	movlt	r3, #1
 800d2aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	6042      	str	r2, [r0, #4]
 800d2b0:	2204      	movs	r2, #4
 800d2b2:	f102 0614 	add.w	r6, r2, #20
 800d2b6:	429e      	cmp	r6, r3
 800d2b8:	6841      	ldr	r1, [r0, #4]
 800d2ba:	d93d      	bls.n	800d338 <_dtoa_r+0x318>
 800d2bc:	4620      	mov	r0, r4
 800d2be:	f000 fee3 	bl	800e088 <_Balloc>
 800d2c2:	9001      	str	r0, [sp, #4]
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d13b      	bne.n	800d340 <_dtoa_r+0x320>
 800d2c8:	4b11      	ldr	r3, [pc, #68]	; (800d310 <_dtoa_r+0x2f0>)
 800d2ca:	4602      	mov	r2, r0
 800d2cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d2d0:	e6c0      	b.n	800d054 <_dtoa_r+0x34>
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	e7df      	b.n	800d296 <_dtoa_r+0x276>
 800d2d6:	bf00      	nop
 800d2d8:	636f4361 	.word	0x636f4361
 800d2dc:	3fd287a7 	.word	0x3fd287a7
 800d2e0:	8b60c8b3 	.word	0x8b60c8b3
 800d2e4:	3fc68a28 	.word	0x3fc68a28
 800d2e8:	509f79fb 	.word	0x509f79fb
 800d2ec:	3fd34413 	.word	0x3fd34413
 800d2f0:	0800f557 	.word	0x0800f557
 800d2f4:	0800f56e 	.word	0x0800f56e
 800d2f8:	7ff00000 	.word	0x7ff00000
 800d2fc:	0800f553 	.word	0x0800f553
 800d300:	0800f54a 	.word	0x0800f54a
 800d304:	0800f426 	.word	0x0800f426
 800d308:	3ff80000 	.word	0x3ff80000
 800d30c:	0800f6c0 	.word	0x0800f6c0
 800d310:	0800f5c9 	.word	0x0800f5c9
 800d314:	2501      	movs	r5, #1
 800d316:	2300      	movs	r3, #0
 800d318:	9306      	str	r3, [sp, #24]
 800d31a:	9508      	str	r5, [sp, #32]
 800d31c:	f04f 33ff 	mov.w	r3, #4294967295
 800d320:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d324:	2200      	movs	r2, #0
 800d326:	2312      	movs	r3, #18
 800d328:	e7b0      	b.n	800d28c <_dtoa_r+0x26c>
 800d32a:	2301      	movs	r3, #1
 800d32c:	9308      	str	r3, [sp, #32]
 800d32e:	e7f5      	b.n	800d31c <_dtoa_r+0x2fc>
 800d330:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d332:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d336:	e7b8      	b.n	800d2aa <_dtoa_r+0x28a>
 800d338:	3101      	adds	r1, #1
 800d33a:	6041      	str	r1, [r0, #4]
 800d33c:	0052      	lsls	r2, r2, #1
 800d33e:	e7b8      	b.n	800d2b2 <_dtoa_r+0x292>
 800d340:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d342:	9a01      	ldr	r2, [sp, #4]
 800d344:	601a      	str	r2, [r3, #0]
 800d346:	9b03      	ldr	r3, [sp, #12]
 800d348:	2b0e      	cmp	r3, #14
 800d34a:	f200 809d 	bhi.w	800d488 <_dtoa_r+0x468>
 800d34e:	2d00      	cmp	r5, #0
 800d350:	f000 809a 	beq.w	800d488 <_dtoa_r+0x468>
 800d354:	9b00      	ldr	r3, [sp, #0]
 800d356:	2b00      	cmp	r3, #0
 800d358:	dd32      	ble.n	800d3c0 <_dtoa_r+0x3a0>
 800d35a:	4ab7      	ldr	r2, [pc, #732]	; (800d638 <_dtoa_r+0x618>)
 800d35c:	f003 030f 	and.w	r3, r3, #15
 800d360:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d364:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d368:	9b00      	ldr	r3, [sp, #0]
 800d36a:	05d8      	lsls	r0, r3, #23
 800d36c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d370:	d516      	bpl.n	800d3a0 <_dtoa_r+0x380>
 800d372:	4bb2      	ldr	r3, [pc, #712]	; (800d63c <_dtoa_r+0x61c>)
 800d374:	ec51 0b19 	vmov	r0, r1, d9
 800d378:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d37c:	f7f3 fa66 	bl	800084c <__aeabi_ddiv>
 800d380:	f007 070f 	and.w	r7, r7, #15
 800d384:	4682      	mov	sl, r0
 800d386:	468b      	mov	fp, r1
 800d388:	2503      	movs	r5, #3
 800d38a:	4eac      	ldr	r6, [pc, #688]	; (800d63c <_dtoa_r+0x61c>)
 800d38c:	b957      	cbnz	r7, 800d3a4 <_dtoa_r+0x384>
 800d38e:	4642      	mov	r2, r8
 800d390:	464b      	mov	r3, r9
 800d392:	4650      	mov	r0, sl
 800d394:	4659      	mov	r1, fp
 800d396:	f7f3 fa59 	bl	800084c <__aeabi_ddiv>
 800d39a:	4682      	mov	sl, r0
 800d39c:	468b      	mov	fp, r1
 800d39e:	e028      	b.n	800d3f2 <_dtoa_r+0x3d2>
 800d3a0:	2502      	movs	r5, #2
 800d3a2:	e7f2      	b.n	800d38a <_dtoa_r+0x36a>
 800d3a4:	07f9      	lsls	r1, r7, #31
 800d3a6:	d508      	bpl.n	800d3ba <_dtoa_r+0x39a>
 800d3a8:	4640      	mov	r0, r8
 800d3aa:	4649      	mov	r1, r9
 800d3ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d3b0:	f7f3 f922 	bl	80005f8 <__aeabi_dmul>
 800d3b4:	3501      	adds	r5, #1
 800d3b6:	4680      	mov	r8, r0
 800d3b8:	4689      	mov	r9, r1
 800d3ba:	107f      	asrs	r7, r7, #1
 800d3bc:	3608      	adds	r6, #8
 800d3be:	e7e5      	b.n	800d38c <_dtoa_r+0x36c>
 800d3c0:	f000 809b 	beq.w	800d4fa <_dtoa_r+0x4da>
 800d3c4:	9b00      	ldr	r3, [sp, #0]
 800d3c6:	4f9d      	ldr	r7, [pc, #628]	; (800d63c <_dtoa_r+0x61c>)
 800d3c8:	425e      	negs	r6, r3
 800d3ca:	4b9b      	ldr	r3, [pc, #620]	; (800d638 <_dtoa_r+0x618>)
 800d3cc:	f006 020f 	and.w	r2, r6, #15
 800d3d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3d8:	ec51 0b19 	vmov	r0, r1, d9
 800d3dc:	f7f3 f90c 	bl	80005f8 <__aeabi_dmul>
 800d3e0:	1136      	asrs	r6, r6, #4
 800d3e2:	4682      	mov	sl, r0
 800d3e4:	468b      	mov	fp, r1
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	2502      	movs	r5, #2
 800d3ea:	2e00      	cmp	r6, #0
 800d3ec:	d17a      	bne.n	800d4e4 <_dtoa_r+0x4c4>
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d1d3      	bne.n	800d39a <_dtoa_r+0x37a>
 800d3f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	f000 8082 	beq.w	800d4fe <_dtoa_r+0x4de>
 800d3fa:	4b91      	ldr	r3, [pc, #580]	; (800d640 <_dtoa_r+0x620>)
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	4650      	mov	r0, sl
 800d400:	4659      	mov	r1, fp
 800d402:	f7f3 fb6b 	bl	8000adc <__aeabi_dcmplt>
 800d406:	2800      	cmp	r0, #0
 800d408:	d079      	beq.n	800d4fe <_dtoa_r+0x4de>
 800d40a:	9b03      	ldr	r3, [sp, #12]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d076      	beq.n	800d4fe <_dtoa_r+0x4de>
 800d410:	9b02      	ldr	r3, [sp, #8]
 800d412:	2b00      	cmp	r3, #0
 800d414:	dd36      	ble.n	800d484 <_dtoa_r+0x464>
 800d416:	9b00      	ldr	r3, [sp, #0]
 800d418:	4650      	mov	r0, sl
 800d41a:	4659      	mov	r1, fp
 800d41c:	1e5f      	subs	r7, r3, #1
 800d41e:	2200      	movs	r2, #0
 800d420:	4b88      	ldr	r3, [pc, #544]	; (800d644 <_dtoa_r+0x624>)
 800d422:	f7f3 f8e9 	bl	80005f8 <__aeabi_dmul>
 800d426:	9e02      	ldr	r6, [sp, #8]
 800d428:	4682      	mov	sl, r0
 800d42a:	468b      	mov	fp, r1
 800d42c:	3501      	adds	r5, #1
 800d42e:	4628      	mov	r0, r5
 800d430:	f7f3 f878 	bl	8000524 <__aeabi_i2d>
 800d434:	4652      	mov	r2, sl
 800d436:	465b      	mov	r3, fp
 800d438:	f7f3 f8de 	bl	80005f8 <__aeabi_dmul>
 800d43c:	4b82      	ldr	r3, [pc, #520]	; (800d648 <_dtoa_r+0x628>)
 800d43e:	2200      	movs	r2, #0
 800d440:	f7f2 ff24 	bl	800028c <__adddf3>
 800d444:	46d0      	mov	r8, sl
 800d446:	46d9      	mov	r9, fp
 800d448:	4682      	mov	sl, r0
 800d44a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d44e:	2e00      	cmp	r6, #0
 800d450:	d158      	bne.n	800d504 <_dtoa_r+0x4e4>
 800d452:	4b7e      	ldr	r3, [pc, #504]	; (800d64c <_dtoa_r+0x62c>)
 800d454:	2200      	movs	r2, #0
 800d456:	4640      	mov	r0, r8
 800d458:	4649      	mov	r1, r9
 800d45a:	f7f2 ff15 	bl	8000288 <__aeabi_dsub>
 800d45e:	4652      	mov	r2, sl
 800d460:	465b      	mov	r3, fp
 800d462:	4680      	mov	r8, r0
 800d464:	4689      	mov	r9, r1
 800d466:	f7f3 fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f040 8295 	bne.w	800d99a <_dtoa_r+0x97a>
 800d470:	4652      	mov	r2, sl
 800d472:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d476:	4640      	mov	r0, r8
 800d478:	4649      	mov	r1, r9
 800d47a:	f7f3 fb2f 	bl	8000adc <__aeabi_dcmplt>
 800d47e:	2800      	cmp	r0, #0
 800d480:	f040 8289 	bne.w	800d996 <_dtoa_r+0x976>
 800d484:	ec5b ab19 	vmov	sl, fp, d9
 800d488:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f2c0 8148 	blt.w	800d720 <_dtoa_r+0x700>
 800d490:	9a00      	ldr	r2, [sp, #0]
 800d492:	2a0e      	cmp	r2, #14
 800d494:	f300 8144 	bgt.w	800d720 <_dtoa_r+0x700>
 800d498:	4b67      	ldr	r3, [pc, #412]	; (800d638 <_dtoa_r+0x618>)
 800d49a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d49e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d4a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	f280 80d5 	bge.w	800d654 <_dtoa_r+0x634>
 800d4aa:	9b03      	ldr	r3, [sp, #12]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	f300 80d1 	bgt.w	800d654 <_dtoa_r+0x634>
 800d4b2:	f040 826f 	bne.w	800d994 <_dtoa_r+0x974>
 800d4b6:	4b65      	ldr	r3, [pc, #404]	; (800d64c <_dtoa_r+0x62c>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4640      	mov	r0, r8
 800d4bc:	4649      	mov	r1, r9
 800d4be:	f7f3 f89b 	bl	80005f8 <__aeabi_dmul>
 800d4c2:	4652      	mov	r2, sl
 800d4c4:	465b      	mov	r3, fp
 800d4c6:	f7f3 fb1d 	bl	8000b04 <__aeabi_dcmpge>
 800d4ca:	9e03      	ldr	r6, [sp, #12]
 800d4cc:	4637      	mov	r7, r6
 800d4ce:	2800      	cmp	r0, #0
 800d4d0:	f040 8245 	bne.w	800d95e <_dtoa_r+0x93e>
 800d4d4:	9d01      	ldr	r5, [sp, #4]
 800d4d6:	2331      	movs	r3, #49	; 0x31
 800d4d8:	f805 3b01 	strb.w	r3, [r5], #1
 800d4dc:	9b00      	ldr	r3, [sp, #0]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	9300      	str	r3, [sp, #0]
 800d4e2:	e240      	b.n	800d966 <_dtoa_r+0x946>
 800d4e4:	07f2      	lsls	r2, r6, #31
 800d4e6:	d505      	bpl.n	800d4f4 <_dtoa_r+0x4d4>
 800d4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4ec:	f7f3 f884 	bl	80005f8 <__aeabi_dmul>
 800d4f0:	3501      	adds	r5, #1
 800d4f2:	2301      	movs	r3, #1
 800d4f4:	1076      	asrs	r6, r6, #1
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	e777      	b.n	800d3ea <_dtoa_r+0x3ca>
 800d4fa:	2502      	movs	r5, #2
 800d4fc:	e779      	b.n	800d3f2 <_dtoa_r+0x3d2>
 800d4fe:	9f00      	ldr	r7, [sp, #0]
 800d500:	9e03      	ldr	r6, [sp, #12]
 800d502:	e794      	b.n	800d42e <_dtoa_r+0x40e>
 800d504:	9901      	ldr	r1, [sp, #4]
 800d506:	4b4c      	ldr	r3, [pc, #304]	; (800d638 <_dtoa_r+0x618>)
 800d508:	4431      	add	r1, r6
 800d50a:	910d      	str	r1, [sp, #52]	; 0x34
 800d50c:	9908      	ldr	r1, [sp, #32]
 800d50e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d512:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d516:	2900      	cmp	r1, #0
 800d518:	d043      	beq.n	800d5a2 <_dtoa_r+0x582>
 800d51a:	494d      	ldr	r1, [pc, #308]	; (800d650 <_dtoa_r+0x630>)
 800d51c:	2000      	movs	r0, #0
 800d51e:	f7f3 f995 	bl	800084c <__aeabi_ddiv>
 800d522:	4652      	mov	r2, sl
 800d524:	465b      	mov	r3, fp
 800d526:	f7f2 feaf 	bl	8000288 <__aeabi_dsub>
 800d52a:	9d01      	ldr	r5, [sp, #4]
 800d52c:	4682      	mov	sl, r0
 800d52e:	468b      	mov	fp, r1
 800d530:	4649      	mov	r1, r9
 800d532:	4640      	mov	r0, r8
 800d534:	f7f3 fb10 	bl	8000b58 <__aeabi_d2iz>
 800d538:	4606      	mov	r6, r0
 800d53a:	f7f2 fff3 	bl	8000524 <__aeabi_i2d>
 800d53e:	4602      	mov	r2, r0
 800d540:	460b      	mov	r3, r1
 800d542:	4640      	mov	r0, r8
 800d544:	4649      	mov	r1, r9
 800d546:	f7f2 fe9f 	bl	8000288 <__aeabi_dsub>
 800d54a:	3630      	adds	r6, #48	; 0x30
 800d54c:	f805 6b01 	strb.w	r6, [r5], #1
 800d550:	4652      	mov	r2, sl
 800d552:	465b      	mov	r3, fp
 800d554:	4680      	mov	r8, r0
 800d556:	4689      	mov	r9, r1
 800d558:	f7f3 fac0 	bl	8000adc <__aeabi_dcmplt>
 800d55c:	2800      	cmp	r0, #0
 800d55e:	d163      	bne.n	800d628 <_dtoa_r+0x608>
 800d560:	4642      	mov	r2, r8
 800d562:	464b      	mov	r3, r9
 800d564:	4936      	ldr	r1, [pc, #216]	; (800d640 <_dtoa_r+0x620>)
 800d566:	2000      	movs	r0, #0
 800d568:	f7f2 fe8e 	bl	8000288 <__aeabi_dsub>
 800d56c:	4652      	mov	r2, sl
 800d56e:	465b      	mov	r3, fp
 800d570:	f7f3 fab4 	bl	8000adc <__aeabi_dcmplt>
 800d574:	2800      	cmp	r0, #0
 800d576:	f040 80b5 	bne.w	800d6e4 <_dtoa_r+0x6c4>
 800d57a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d57c:	429d      	cmp	r5, r3
 800d57e:	d081      	beq.n	800d484 <_dtoa_r+0x464>
 800d580:	4b30      	ldr	r3, [pc, #192]	; (800d644 <_dtoa_r+0x624>)
 800d582:	2200      	movs	r2, #0
 800d584:	4650      	mov	r0, sl
 800d586:	4659      	mov	r1, fp
 800d588:	f7f3 f836 	bl	80005f8 <__aeabi_dmul>
 800d58c:	4b2d      	ldr	r3, [pc, #180]	; (800d644 <_dtoa_r+0x624>)
 800d58e:	4682      	mov	sl, r0
 800d590:	468b      	mov	fp, r1
 800d592:	4640      	mov	r0, r8
 800d594:	4649      	mov	r1, r9
 800d596:	2200      	movs	r2, #0
 800d598:	f7f3 f82e 	bl	80005f8 <__aeabi_dmul>
 800d59c:	4680      	mov	r8, r0
 800d59e:	4689      	mov	r9, r1
 800d5a0:	e7c6      	b.n	800d530 <_dtoa_r+0x510>
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	4659      	mov	r1, fp
 800d5a6:	f7f3 f827 	bl	80005f8 <__aeabi_dmul>
 800d5aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5ac:	9d01      	ldr	r5, [sp, #4]
 800d5ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5b0:	4682      	mov	sl, r0
 800d5b2:	468b      	mov	fp, r1
 800d5b4:	4649      	mov	r1, r9
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	f7f3 face 	bl	8000b58 <__aeabi_d2iz>
 800d5bc:	4606      	mov	r6, r0
 800d5be:	f7f2 ffb1 	bl	8000524 <__aeabi_i2d>
 800d5c2:	3630      	adds	r6, #48	; 0x30
 800d5c4:	4602      	mov	r2, r0
 800d5c6:	460b      	mov	r3, r1
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	4649      	mov	r1, r9
 800d5cc:	f7f2 fe5c 	bl	8000288 <__aeabi_dsub>
 800d5d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d5d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5d6:	429d      	cmp	r5, r3
 800d5d8:	4680      	mov	r8, r0
 800d5da:	4689      	mov	r9, r1
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	d124      	bne.n	800d62c <_dtoa_r+0x60c>
 800d5e2:	4b1b      	ldr	r3, [pc, #108]	; (800d650 <_dtoa_r+0x630>)
 800d5e4:	4650      	mov	r0, sl
 800d5e6:	4659      	mov	r1, fp
 800d5e8:	f7f2 fe50 	bl	800028c <__adddf3>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	4640      	mov	r0, r8
 800d5f2:	4649      	mov	r1, r9
 800d5f4:	f7f3 fa90 	bl	8000b18 <__aeabi_dcmpgt>
 800d5f8:	2800      	cmp	r0, #0
 800d5fa:	d173      	bne.n	800d6e4 <_dtoa_r+0x6c4>
 800d5fc:	4652      	mov	r2, sl
 800d5fe:	465b      	mov	r3, fp
 800d600:	4913      	ldr	r1, [pc, #76]	; (800d650 <_dtoa_r+0x630>)
 800d602:	2000      	movs	r0, #0
 800d604:	f7f2 fe40 	bl	8000288 <__aeabi_dsub>
 800d608:	4602      	mov	r2, r0
 800d60a:	460b      	mov	r3, r1
 800d60c:	4640      	mov	r0, r8
 800d60e:	4649      	mov	r1, r9
 800d610:	f7f3 fa64 	bl	8000adc <__aeabi_dcmplt>
 800d614:	2800      	cmp	r0, #0
 800d616:	f43f af35 	beq.w	800d484 <_dtoa_r+0x464>
 800d61a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d61c:	1e6b      	subs	r3, r5, #1
 800d61e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d620:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d624:	2b30      	cmp	r3, #48	; 0x30
 800d626:	d0f8      	beq.n	800d61a <_dtoa_r+0x5fa>
 800d628:	9700      	str	r7, [sp, #0]
 800d62a:	e049      	b.n	800d6c0 <_dtoa_r+0x6a0>
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <_dtoa_r+0x624>)
 800d62e:	f7f2 ffe3 	bl	80005f8 <__aeabi_dmul>
 800d632:	4680      	mov	r8, r0
 800d634:	4689      	mov	r9, r1
 800d636:	e7bd      	b.n	800d5b4 <_dtoa_r+0x594>
 800d638:	0800f6c0 	.word	0x0800f6c0
 800d63c:	0800f698 	.word	0x0800f698
 800d640:	3ff00000 	.word	0x3ff00000
 800d644:	40240000 	.word	0x40240000
 800d648:	401c0000 	.word	0x401c0000
 800d64c:	40140000 	.word	0x40140000
 800d650:	3fe00000 	.word	0x3fe00000
 800d654:	9d01      	ldr	r5, [sp, #4]
 800d656:	4656      	mov	r6, sl
 800d658:	465f      	mov	r7, fp
 800d65a:	4642      	mov	r2, r8
 800d65c:	464b      	mov	r3, r9
 800d65e:	4630      	mov	r0, r6
 800d660:	4639      	mov	r1, r7
 800d662:	f7f3 f8f3 	bl	800084c <__aeabi_ddiv>
 800d666:	f7f3 fa77 	bl	8000b58 <__aeabi_d2iz>
 800d66a:	4682      	mov	sl, r0
 800d66c:	f7f2 ff5a 	bl	8000524 <__aeabi_i2d>
 800d670:	4642      	mov	r2, r8
 800d672:	464b      	mov	r3, r9
 800d674:	f7f2 ffc0 	bl	80005f8 <__aeabi_dmul>
 800d678:	4602      	mov	r2, r0
 800d67a:	460b      	mov	r3, r1
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d684:	f7f2 fe00 	bl	8000288 <__aeabi_dsub>
 800d688:	f805 6b01 	strb.w	r6, [r5], #1
 800d68c:	9e01      	ldr	r6, [sp, #4]
 800d68e:	9f03      	ldr	r7, [sp, #12]
 800d690:	1bae      	subs	r6, r5, r6
 800d692:	42b7      	cmp	r7, r6
 800d694:	4602      	mov	r2, r0
 800d696:	460b      	mov	r3, r1
 800d698:	d135      	bne.n	800d706 <_dtoa_r+0x6e6>
 800d69a:	f7f2 fdf7 	bl	800028c <__adddf3>
 800d69e:	4642      	mov	r2, r8
 800d6a0:	464b      	mov	r3, r9
 800d6a2:	4606      	mov	r6, r0
 800d6a4:	460f      	mov	r7, r1
 800d6a6:	f7f3 fa37 	bl	8000b18 <__aeabi_dcmpgt>
 800d6aa:	b9d0      	cbnz	r0, 800d6e2 <_dtoa_r+0x6c2>
 800d6ac:	4642      	mov	r2, r8
 800d6ae:	464b      	mov	r3, r9
 800d6b0:	4630      	mov	r0, r6
 800d6b2:	4639      	mov	r1, r7
 800d6b4:	f7f3 fa08 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6b8:	b110      	cbz	r0, 800d6c0 <_dtoa_r+0x6a0>
 800d6ba:	f01a 0f01 	tst.w	sl, #1
 800d6be:	d110      	bne.n	800d6e2 <_dtoa_r+0x6c2>
 800d6c0:	4620      	mov	r0, r4
 800d6c2:	ee18 1a10 	vmov	r1, s16
 800d6c6:	f000 fd1f 	bl	800e108 <_Bfree>
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	9800      	ldr	r0, [sp, #0]
 800d6ce:	702b      	strb	r3, [r5, #0]
 800d6d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d6d2:	3001      	adds	r0, #1
 800d6d4:	6018      	str	r0, [r3, #0]
 800d6d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	f43f acf1 	beq.w	800d0c0 <_dtoa_r+0xa0>
 800d6de:	601d      	str	r5, [r3, #0]
 800d6e0:	e4ee      	b.n	800d0c0 <_dtoa_r+0xa0>
 800d6e2:	9f00      	ldr	r7, [sp, #0]
 800d6e4:	462b      	mov	r3, r5
 800d6e6:	461d      	mov	r5, r3
 800d6e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6ec:	2a39      	cmp	r2, #57	; 0x39
 800d6ee:	d106      	bne.n	800d6fe <_dtoa_r+0x6de>
 800d6f0:	9a01      	ldr	r2, [sp, #4]
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d1f7      	bne.n	800d6e6 <_dtoa_r+0x6c6>
 800d6f6:	9901      	ldr	r1, [sp, #4]
 800d6f8:	2230      	movs	r2, #48	; 0x30
 800d6fa:	3701      	adds	r7, #1
 800d6fc:	700a      	strb	r2, [r1, #0]
 800d6fe:	781a      	ldrb	r2, [r3, #0]
 800d700:	3201      	adds	r2, #1
 800d702:	701a      	strb	r2, [r3, #0]
 800d704:	e790      	b.n	800d628 <_dtoa_r+0x608>
 800d706:	4ba6      	ldr	r3, [pc, #664]	; (800d9a0 <_dtoa_r+0x980>)
 800d708:	2200      	movs	r2, #0
 800d70a:	f7f2 ff75 	bl	80005f8 <__aeabi_dmul>
 800d70e:	2200      	movs	r2, #0
 800d710:	2300      	movs	r3, #0
 800d712:	4606      	mov	r6, r0
 800d714:	460f      	mov	r7, r1
 800d716:	f7f3 f9d7 	bl	8000ac8 <__aeabi_dcmpeq>
 800d71a:	2800      	cmp	r0, #0
 800d71c:	d09d      	beq.n	800d65a <_dtoa_r+0x63a>
 800d71e:	e7cf      	b.n	800d6c0 <_dtoa_r+0x6a0>
 800d720:	9a08      	ldr	r2, [sp, #32]
 800d722:	2a00      	cmp	r2, #0
 800d724:	f000 80d7 	beq.w	800d8d6 <_dtoa_r+0x8b6>
 800d728:	9a06      	ldr	r2, [sp, #24]
 800d72a:	2a01      	cmp	r2, #1
 800d72c:	f300 80ba 	bgt.w	800d8a4 <_dtoa_r+0x884>
 800d730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d732:	2a00      	cmp	r2, #0
 800d734:	f000 80b2 	beq.w	800d89c <_dtoa_r+0x87c>
 800d738:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d73c:	9e07      	ldr	r6, [sp, #28]
 800d73e:	9d04      	ldr	r5, [sp, #16]
 800d740:	9a04      	ldr	r2, [sp, #16]
 800d742:	441a      	add	r2, r3
 800d744:	9204      	str	r2, [sp, #16]
 800d746:	9a05      	ldr	r2, [sp, #20]
 800d748:	2101      	movs	r1, #1
 800d74a:	441a      	add	r2, r3
 800d74c:	4620      	mov	r0, r4
 800d74e:	9205      	str	r2, [sp, #20]
 800d750:	f000 fd92 	bl	800e278 <__i2b>
 800d754:	4607      	mov	r7, r0
 800d756:	2d00      	cmp	r5, #0
 800d758:	dd0c      	ble.n	800d774 <_dtoa_r+0x754>
 800d75a:	9b05      	ldr	r3, [sp, #20]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	dd09      	ble.n	800d774 <_dtoa_r+0x754>
 800d760:	42ab      	cmp	r3, r5
 800d762:	9a04      	ldr	r2, [sp, #16]
 800d764:	bfa8      	it	ge
 800d766:	462b      	movge	r3, r5
 800d768:	1ad2      	subs	r2, r2, r3
 800d76a:	9204      	str	r2, [sp, #16]
 800d76c:	9a05      	ldr	r2, [sp, #20]
 800d76e:	1aed      	subs	r5, r5, r3
 800d770:	1ad3      	subs	r3, r2, r3
 800d772:	9305      	str	r3, [sp, #20]
 800d774:	9b07      	ldr	r3, [sp, #28]
 800d776:	b31b      	cbz	r3, 800d7c0 <_dtoa_r+0x7a0>
 800d778:	9b08      	ldr	r3, [sp, #32]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	f000 80af 	beq.w	800d8de <_dtoa_r+0x8be>
 800d780:	2e00      	cmp	r6, #0
 800d782:	dd13      	ble.n	800d7ac <_dtoa_r+0x78c>
 800d784:	4639      	mov	r1, r7
 800d786:	4632      	mov	r2, r6
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 fe35 	bl	800e3f8 <__pow5mult>
 800d78e:	ee18 2a10 	vmov	r2, s16
 800d792:	4601      	mov	r1, r0
 800d794:	4607      	mov	r7, r0
 800d796:	4620      	mov	r0, r4
 800d798:	f000 fd84 	bl	800e2a4 <__multiply>
 800d79c:	ee18 1a10 	vmov	r1, s16
 800d7a0:	4680      	mov	r8, r0
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	f000 fcb0 	bl	800e108 <_Bfree>
 800d7a8:	ee08 8a10 	vmov	s16, r8
 800d7ac:	9b07      	ldr	r3, [sp, #28]
 800d7ae:	1b9a      	subs	r2, r3, r6
 800d7b0:	d006      	beq.n	800d7c0 <_dtoa_r+0x7a0>
 800d7b2:	ee18 1a10 	vmov	r1, s16
 800d7b6:	4620      	mov	r0, r4
 800d7b8:	f000 fe1e 	bl	800e3f8 <__pow5mult>
 800d7bc:	ee08 0a10 	vmov	s16, r0
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	f000 fd58 	bl	800e278 <__i2b>
 800d7c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	4606      	mov	r6, r0
 800d7ce:	f340 8088 	ble.w	800d8e2 <_dtoa_r+0x8c2>
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	4601      	mov	r1, r0
 800d7d6:	4620      	mov	r0, r4
 800d7d8:	f000 fe0e 	bl	800e3f8 <__pow5mult>
 800d7dc:	9b06      	ldr	r3, [sp, #24]
 800d7de:	2b01      	cmp	r3, #1
 800d7e0:	4606      	mov	r6, r0
 800d7e2:	f340 8081 	ble.w	800d8e8 <_dtoa_r+0x8c8>
 800d7e6:	f04f 0800 	mov.w	r8, #0
 800d7ea:	6933      	ldr	r3, [r6, #16]
 800d7ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7f0:	6918      	ldr	r0, [r3, #16]
 800d7f2:	f000 fcf1 	bl	800e1d8 <__hi0bits>
 800d7f6:	f1c0 0020 	rsb	r0, r0, #32
 800d7fa:	9b05      	ldr	r3, [sp, #20]
 800d7fc:	4418      	add	r0, r3
 800d7fe:	f010 001f 	ands.w	r0, r0, #31
 800d802:	f000 8092 	beq.w	800d92a <_dtoa_r+0x90a>
 800d806:	f1c0 0320 	rsb	r3, r0, #32
 800d80a:	2b04      	cmp	r3, #4
 800d80c:	f340 808a 	ble.w	800d924 <_dtoa_r+0x904>
 800d810:	f1c0 001c 	rsb	r0, r0, #28
 800d814:	9b04      	ldr	r3, [sp, #16]
 800d816:	4403      	add	r3, r0
 800d818:	9304      	str	r3, [sp, #16]
 800d81a:	9b05      	ldr	r3, [sp, #20]
 800d81c:	4403      	add	r3, r0
 800d81e:	4405      	add	r5, r0
 800d820:	9305      	str	r3, [sp, #20]
 800d822:	9b04      	ldr	r3, [sp, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	dd07      	ble.n	800d838 <_dtoa_r+0x818>
 800d828:	ee18 1a10 	vmov	r1, s16
 800d82c:	461a      	mov	r2, r3
 800d82e:	4620      	mov	r0, r4
 800d830:	f000 fe3c 	bl	800e4ac <__lshift>
 800d834:	ee08 0a10 	vmov	s16, r0
 800d838:	9b05      	ldr	r3, [sp, #20]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	dd05      	ble.n	800d84a <_dtoa_r+0x82a>
 800d83e:	4631      	mov	r1, r6
 800d840:	461a      	mov	r2, r3
 800d842:	4620      	mov	r0, r4
 800d844:	f000 fe32 	bl	800e4ac <__lshift>
 800d848:	4606      	mov	r6, r0
 800d84a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d06e      	beq.n	800d92e <_dtoa_r+0x90e>
 800d850:	ee18 0a10 	vmov	r0, s16
 800d854:	4631      	mov	r1, r6
 800d856:	f000 fe99 	bl	800e58c <__mcmp>
 800d85a:	2800      	cmp	r0, #0
 800d85c:	da67      	bge.n	800d92e <_dtoa_r+0x90e>
 800d85e:	9b00      	ldr	r3, [sp, #0]
 800d860:	3b01      	subs	r3, #1
 800d862:	ee18 1a10 	vmov	r1, s16
 800d866:	9300      	str	r3, [sp, #0]
 800d868:	220a      	movs	r2, #10
 800d86a:	2300      	movs	r3, #0
 800d86c:	4620      	mov	r0, r4
 800d86e:	f000 fc6d 	bl	800e14c <__multadd>
 800d872:	9b08      	ldr	r3, [sp, #32]
 800d874:	ee08 0a10 	vmov	s16, r0
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 81b1 	beq.w	800dbe0 <_dtoa_r+0xbc0>
 800d87e:	2300      	movs	r3, #0
 800d880:	4639      	mov	r1, r7
 800d882:	220a      	movs	r2, #10
 800d884:	4620      	mov	r0, r4
 800d886:	f000 fc61 	bl	800e14c <__multadd>
 800d88a:	9b02      	ldr	r3, [sp, #8]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	4607      	mov	r7, r0
 800d890:	f300 808e 	bgt.w	800d9b0 <_dtoa_r+0x990>
 800d894:	9b06      	ldr	r3, [sp, #24]
 800d896:	2b02      	cmp	r3, #2
 800d898:	dc51      	bgt.n	800d93e <_dtoa_r+0x91e>
 800d89a:	e089      	b.n	800d9b0 <_dtoa_r+0x990>
 800d89c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d8a2:	e74b      	b.n	800d73c <_dtoa_r+0x71c>
 800d8a4:	9b03      	ldr	r3, [sp, #12]
 800d8a6:	1e5e      	subs	r6, r3, #1
 800d8a8:	9b07      	ldr	r3, [sp, #28]
 800d8aa:	42b3      	cmp	r3, r6
 800d8ac:	bfbf      	itttt	lt
 800d8ae:	9b07      	ldrlt	r3, [sp, #28]
 800d8b0:	9607      	strlt	r6, [sp, #28]
 800d8b2:	1af2      	sublt	r2, r6, r3
 800d8b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d8b6:	bfb6      	itet	lt
 800d8b8:	189b      	addlt	r3, r3, r2
 800d8ba:	1b9e      	subge	r6, r3, r6
 800d8bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d8be:	9b03      	ldr	r3, [sp, #12]
 800d8c0:	bfb8      	it	lt
 800d8c2:	2600      	movlt	r6, #0
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	bfb7      	itett	lt
 800d8c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d8cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d8d0:	1a9d      	sublt	r5, r3, r2
 800d8d2:	2300      	movlt	r3, #0
 800d8d4:	e734      	b.n	800d740 <_dtoa_r+0x720>
 800d8d6:	9e07      	ldr	r6, [sp, #28]
 800d8d8:	9d04      	ldr	r5, [sp, #16]
 800d8da:	9f08      	ldr	r7, [sp, #32]
 800d8dc:	e73b      	b.n	800d756 <_dtoa_r+0x736>
 800d8de:	9a07      	ldr	r2, [sp, #28]
 800d8e0:	e767      	b.n	800d7b2 <_dtoa_r+0x792>
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	dc18      	bgt.n	800d91a <_dtoa_r+0x8fa>
 800d8e8:	f1ba 0f00 	cmp.w	sl, #0
 800d8ec:	d115      	bne.n	800d91a <_dtoa_r+0x8fa>
 800d8ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8f2:	b993      	cbnz	r3, 800d91a <_dtoa_r+0x8fa>
 800d8f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d8f8:	0d1b      	lsrs	r3, r3, #20
 800d8fa:	051b      	lsls	r3, r3, #20
 800d8fc:	b183      	cbz	r3, 800d920 <_dtoa_r+0x900>
 800d8fe:	9b04      	ldr	r3, [sp, #16]
 800d900:	3301      	adds	r3, #1
 800d902:	9304      	str	r3, [sp, #16]
 800d904:	9b05      	ldr	r3, [sp, #20]
 800d906:	3301      	adds	r3, #1
 800d908:	9305      	str	r3, [sp, #20]
 800d90a:	f04f 0801 	mov.w	r8, #1
 800d90e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d910:	2b00      	cmp	r3, #0
 800d912:	f47f af6a 	bne.w	800d7ea <_dtoa_r+0x7ca>
 800d916:	2001      	movs	r0, #1
 800d918:	e76f      	b.n	800d7fa <_dtoa_r+0x7da>
 800d91a:	f04f 0800 	mov.w	r8, #0
 800d91e:	e7f6      	b.n	800d90e <_dtoa_r+0x8ee>
 800d920:	4698      	mov	r8, r3
 800d922:	e7f4      	b.n	800d90e <_dtoa_r+0x8ee>
 800d924:	f43f af7d 	beq.w	800d822 <_dtoa_r+0x802>
 800d928:	4618      	mov	r0, r3
 800d92a:	301c      	adds	r0, #28
 800d92c:	e772      	b.n	800d814 <_dtoa_r+0x7f4>
 800d92e:	9b03      	ldr	r3, [sp, #12]
 800d930:	2b00      	cmp	r3, #0
 800d932:	dc37      	bgt.n	800d9a4 <_dtoa_r+0x984>
 800d934:	9b06      	ldr	r3, [sp, #24]
 800d936:	2b02      	cmp	r3, #2
 800d938:	dd34      	ble.n	800d9a4 <_dtoa_r+0x984>
 800d93a:	9b03      	ldr	r3, [sp, #12]
 800d93c:	9302      	str	r3, [sp, #8]
 800d93e:	9b02      	ldr	r3, [sp, #8]
 800d940:	b96b      	cbnz	r3, 800d95e <_dtoa_r+0x93e>
 800d942:	4631      	mov	r1, r6
 800d944:	2205      	movs	r2, #5
 800d946:	4620      	mov	r0, r4
 800d948:	f000 fc00 	bl	800e14c <__multadd>
 800d94c:	4601      	mov	r1, r0
 800d94e:	4606      	mov	r6, r0
 800d950:	ee18 0a10 	vmov	r0, s16
 800d954:	f000 fe1a 	bl	800e58c <__mcmp>
 800d958:	2800      	cmp	r0, #0
 800d95a:	f73f adbb 	bgt.w	800d4d4 <_dtoa_r+0x4b4>
 800d95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d960:	9d01      	ldr	r5, [sp, #4]
 800d962:	43db      	mvns	r3, r3
 800d964:	9300      	str	r3, [sp, #0]
 800d966:	f04f 0800 	mov.w	r8, #0
 800d96a:	4631      	mov	r1, r6
 800d96c:	4620      	mov	r0, r4
 800d96e:	f000 fbcb 	bl	800e108 <_Bfree>
 800d972:	2f00      	cmp	r7, #0
 800d974:	f43f aea4 	beq.w	800d6c0 <_dtoa_r+0x6a0>
 800d978:	f1b8 0f00 	cmp.w	r8, #0
 800d97c:	d005      	beq.n	800d98a <_dtoa_r+0x96a>
 800d97e:	45b8      	cmp	r8, r7
 800d980:	d003      	beq.n	800d98a <_dtoa_r+0x96a>
 800d982:	4641      	mov	r1, r8
 800d984:	4620      	mov	r0, r4
 800d986:	f000 fbbf 	bl	800e108 <_Bfree>
 800d98a:	4639      	mov	r1, r7
 800d98c:	4620      	mov	r0, r4
 800d98e:	f000 fbbb 	bl	800e108 <_Bfree>
 800d992:	e695      	b.n	800d6c0 <_dtoa_r+0x6a0>
 800d994:	2600      	movs	r6, #0
 800d996:	4637      	mov	r7, r6
 800d998:	e7e1      	b.n	800d95e <_dtoa_r+0x93e>
 800d99a:	9700      	str	r7, [sp, #0]
 800d99c:	4637      	mov	r7, r6
 800d99e:	e599      	b.n	800d4d4 <_dtoa_r+0x4b4>
 800d9a0:	40240000 	.word	0x40240000
 800d9a4:	9b08      	ldr	r3, [sp, #32]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	f000 80ca 	beq.w	800db40 <_dtoa_r+0xb20>
 800d9ac:	9b03      	ldr	r3, [sp, #12]
 800d9ae:	9302      	str	r3, [sp, #8]
 800d9b0:	2d00      	cmp	r5, #0
 800d9b2:	dd05      	ble.n	800d9c0 <_dtoa_r+0x9a0>
 800d9b4:	4639      	mov	r1, r7
 800d9b6:	462a      	mov	r2, r5
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f000 fd77 	bl	800e4ac <__lshift>
 800d9be:	4607      	mov	r7, r0
 800d9c0:	f1b8 0f00 	cmp.w	r8, #0
 800d9c4:	d05b      	beq.n	800da7e <_dtoa_r+0xa5e>
 800d9c6:	6879      	ldr	r1, [r7, #4]
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fb5d 	bl	800e088 <_Balloc>
 800d9ce:	4605      	mov	r5, r0
 800d9d0:	b928      	cbnz	r0, 800d9de <_dtoa_r+0x9be>
 800d9d2:	4b87      	ldr	r3, [pc, #540]	; (800dbf0 <_dtoa_r+0xbd0>)
 800d9d4:	4602      	mov	r2, r0
 800d9d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d9da:	f7ff bb3b 	b.w	800d054 <_dtoa_r+0x34>
 800d9de:	693a      	ldr	r2, [r7, #16]
 800d9e0:	3202      	adds	r2, #2
 800d9e2:	0092      	lsls	r2, r2, #2
 800d9e4:	f107 010c 	add.w	r1, r7, #12
 800d9e8:	300c      	adds	r0, #12
 800d9ea:	f7fe fa63 	bl	800beb4 <memcpy>
 800d9ee:	2201      	movs	r2, #1
 800d9f0:	4629      	mov	r1, r5
 800d9f2:	4620      	mov	r0, r4
 800d9f4:	f000 fd5a 	bl	800e4ac <__lshift>
 800d9f8:	9b01      	ldr	r3, [sp, #4]
 800d9fa:	f103 0901 	add.w	r9, r3, #1
 800d9fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800da02:	4413      	add	r3, r2
 800da04:	9305      	str	r3, [sp, #20]
 800da06:	f00a 0301 	and.w	r3, sl, #1
 800da0a:	46b8      	mov	r8, r7
 800da0c:	9304      	str	r3, [sp, #16]
 800da0e:	4607      	mov	r7, r0
 800da10:	4631      	mov	r1, r6
 800da12:	ee18 0a10 	vmov	r0, s16
 800da16:	f7ff fa76 	bl	800cf06 <quorem>
 800da1a:	4641      	mov	r1, r8
 800da1c:	9002      	str	r0, [sp, #8]
 800da1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800da22:	ee18 0a10 	vmov	r0, s16
 800da26:	f000 fdb1 	bl	800e58c <__mcmp>
 800da2a:	463a      	mov	r2, r7
 800da2c:	9003      	str	r0, [sp, #12]
 800da2e:	4631      	mov	r1, r6
 800da30:	4620      	mov	r0, r4
 800da32:	f000 fdc7 	bl	800e5c4 <__mdiff>
 800da36:	68c2      	ldr	r2, [r0, #12]
 800da38:	f109 3bff 	add.w	fp, r9, #4294967295
 800da3c:	4605      	mov	r5, r0
 800da3e:	bb02      	cbnz	r2, 800da82 <_dtoa_r+0xa62>
 800da40:	4601      	mov	r1, r0
 800da42:	ee18 0a10 	vmov	r0, s16
 800da46:	f000 fda1 	bl	800e58c <__mcmp>
 800da4a:	4602      	mov	r2, r0
 800da4c:	4629      	mov	r1, r5
 800da4e:	4620      	mov	r0, r4
 800da50:	9207      	str	r2, [sp, #28]
 800da52:	f000 fb59 	bl	800e108 <_Bfree>
 800da56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800da5a:	ea43 0102 	orr.w	r1, r3, r2
 800da5e:	9b04      	ldr	r3, [sp, #16]
 800da60:	430b      	orrs	r3, r1
 800da62:	464d      	mov	r5, r9
 800da64:	d10f      	bne.n	800da86 <_dtoa_r+0xa66>
 800da66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800da6a:	d02a      	beq.n	800dac2 <_dtoa_r+0xaa2>
 800da6c:	9b03      	ldr	r3, [sp, #12]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	dd02      	ble.n	800da78 <_dtoa_r+0xa58>
 800da72:	9b02      	ldr	r3, [sp, #8]
 800da74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800da78:	f88b a000 	strb.w	sl, [fp]
 800da7c:	e775      	b.n	800d96a <_dtoa_r+0x94a>
 800da7e:	4638      	mov	r0, r7
 800da80:	e7ba      	b.n	800d9f8 <_dtoa_r+0x9d8>
 800da82:	2201      	movs	r2, #1
 800da84:	e7e2      	b.n	800da4c <_dtoa_r+0xa2c>
 800da86:	9b03      	ldr	r3, [sp, #12]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	db04      	blt.n	800da96 <_dtoa_r+0xa76>
 800da8c:	9906      	ldr	r1, [sp, #24]
 800da8e:	430b      	orrs	r3, r1
 800da90:	9904      	ldr	r1, [sp, #16]
 800da92:	430b      	orrs	r3, r1
 800da94:	d122      	bne.n	800dadc <_dtoa_r+0xabc>
 800da96:	2a00      	cmp	r2, #0
 800da98:	ddee      	ble.n	800da78 <_dtoa_r+0xa58>
 800da9a:	ee18 1a10 	vmov	r1, s16
 800da9e:	2201      	movs	r2, #1
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fd03 	bl	800e4ac <__lshift>
 800daa6:	4631      	mov	r1, r6
 800daa8:	ee08 0a10 	vmov	s16, r0
 800daac:	f000 fd6e 	bl	800e58c <__mcmp>
 800dab0:	2800      	cmp	r0, #0
 800dab2:	dc03      	bgt.n	800dabc <_dtoa_r+0xa9c>
 800dab4:	d1e0      	bne.n	800da78 <_dtoa_r+0xa58>
 800dab6:	f01a 0f01 	tst.w	sl, #1
 800daba:	d0dd      	beq.n	800da78 <_dtoa_r+0xa58>
 800dabc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dac0:	d1d7      	bne.n	800da72 <_dtoa_r+0xa52>
 800dac2:	2339      	movs	r3, #57	; 0x39
 800dac4:	f88b 3000 	strb.w	r3, [fp]
 800dac8:	462b      	mov	r3, r5
 800daca:	461d      	mov	r5, r3
 800dacc:	3b01      	subs	r3, #1
 800dace:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dad2:	2a39      	cmp	r2, #57	; 0x39
 800dad4:	d071      	beq.n	800dbba <_dtoa_r+0xb9a>
 800dad6:	3201      	adds	r2, #1
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	e746      	b.n	800d96a <_dtoa_r+0x94a>
 800dadc:	2a00      	cmp	r2, #0
 800dade:	dd07      	ble.n	800daf0 <_dtoa_r+0xad0>
 800dae0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dae4:	d0ed      	beq.n	800dac2 <_dtoa_r+0xaa2>
 800dae6:	f10a 0301 	add.w	r3, sl, #1
 800daea:	f88b 3000 	strb.w	r3, [fp]
 800daee:	e73c      	b.n	800d96a <_dtoa_r+0x94a>
 800daf0:	9b05      	ldr	r3, [sp, #20]
 800daf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800daf6:	4599      	cmp	r9, r3
 800daf8:	d047      	beq.n	800db8a <_dtoa_r+0xb6a>
 800dafa:	ee18 1a10 	vmov	r1, s16
 800dafe:	2300      	movs	r3, #0
 800db00:	220a      	movs	r2, #10
 800db02:	4620      	mov	r0, r4
 800db04:	f000 fb22 	bl	800e14c <__multadd>
 800db08:	45b8      	cmp	r8, r7
 800db0a:	ee08 0a10 	vmov	s16, r0
 800db0e:	f04f 0300 	mov.w	r3, #0
 800db12:	f04f 020a 	mov.w	r2, #10
 800db16:	4641      	mov	r1, r8
 800db18:	4620      	mov	r0, r4
 800db1a:	d106      	bne.n	800db2a <_dtoa_r+0xb0a>
 800db1c:	f000 fb16 	bl	800e14c <__multadd>
 800db20:	4680      	mov	r8, r0
 800db22:	4607      	mov	r7, r0
 800db24:	f109 0901 	add.w	r9, r9, #1
 800db28:	e772      	b.n	800da10 <_dtoa_r+0x9f0>
 800db2a:	f000 fb0f 	bl	800e14c <__multadd>
 800db2e:	4639      	mov	r1, r7
 800db30:	4680      	mov	r8, r0
 800db32:	2300      	movs	r3, #0
 800db34:	220a      	movs	r2, #10
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fb08 	bl	800e14c <__multadd>
 800db3c:	4607      	mov	r7, r0
 800db3e:	e7f1      	b.n	800db24 <_dtoa_r+0xb04>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	9302      	str	r3, [sp, #8]
 800db44:	9d01      	ldr	r5, [sp, #4]
 800db46:	ee18 0a10 	vmov	r0, s16
 800db4a:	4631      	mov	r1, r6
 800db4c:	f7ff f9db 	bl	800cf06 <quorem>
 800db50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800db54:	9b01      	ldr	r3, [sp, #4]
 800db56:	f805 ab01 	strb.w	sl, [r5], #1
 800db5a:	1aea      	subs	r2, r5, r3
 800db5c:	9b02      	ldr	r3, [sp, #8]
 800db5e:	4293      	cmp	r3, r2
 800db60:	dd09      	ble.n	800db76 <_dtoa_r+0xb56>
 800db62:	ee18 1a10 	vmov	r1, s16
 800db66:	2300      	movs	r3, #0
 800db68:	220a      	movs	r2, #10
 800db6a:	4620      	mov	r0, r4
 800db6c:	f000 faee 	bl	800e14c <__multadd>
 800db70:	ee08 0a10 	vmov	s16, r0
 800db74:	e7e7      	b.n	800db46 <_dtoa_r+0xb26>
 800db76:	9b02      	ldr	r3, [sp, #8]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	bfc8      	it	gt
 800db7c:	461d      	movgt	r5, r3
 800db7e:	9b01      	ldr	r3, [sp, #4]
 800db80:	bfd8      	it	le
 800db82:	2501      	movle	r5, #1
 800db84:	441d      	add	r5, r3
 800db86:	f04f 0800 	mov.w	r8, #0
 800db8a:	ee18 1a10 	vmov	r1, s16
 800db8e:	2201      	movs	r2, #1
 800db90:	4620      	mov	r0, r4
 800db92:	f000 fc8b 	bl	800e4ac <__lshift>
 800db96:	4631      	mov	r1, r6
 800db98:	ee08 0a10 	vmov	s16, r0
 800db9c:	f000 fcf6 	bl	800e58c <__mcmp>
 800dba0:	2800      	cmp	r0, #0
 800dba2:	dc91      	bgt.n	800dac8 <_dtoa_r+0xaa8>
 800dba4:	d102      	bne.n	800dbac <_dtoa_r+0xb8c>
 800dba6:	f01a 0f01 	tst.w	sl, #1
 800dbaa:	d18d      	bne.n	800dac8 <_dtoa_r+0xaa8>
 800dbac:	462b      	mov	r3, r5
 800dbae:	461d      	mov	r5, r3
 800dbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb4:	2a30      	cmp	r2, #48	; 0x30
 800dbb6:	d0fa      	beq.n	800dbae <_dtoa_r+0xb8e>
 800dbb8:	e6d7      	b.n	800d96a <_dtoa_r+0x94a>
 800dbba:	9a01      	ldr	r2, [sp, #4]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d184      	bne.n	800daca <_dtoa_r+0xaaa>
 800dbc0:	9b00      	ldr	r3, [sp, #0]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	9300      	str	r3, [sp, #0]
 800dbc6:	2331      	movs	r3, #49	; 0x31
 800dbc8:	7013      	strb	r3, [r2, #0]
 800dbca:	e6ce      	b.n	800d96a <_dtoa_r+0x94a>
 800dbcc:	4b09      	ldr	r3, [pc, #36]	; (800dbf4 <_dtoa_r+0xbd4>)
 800dbce:	f7ff ba95 	b.w	800d0fc <_dtoa_r+0xdc>
 800dbd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f47f aa6e 	bne.w	800d0b6 <_dtoa_r+0x96>
 800dbda:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <_dtoa_r+0xbd8>)
 800dbdc:	f7ff ba8e 	b.w	800d0fc <_dtoa_r+0xdc>
 800dbe0:	9b02      	ldr	r3, [sp, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	dcae      	bgt.n	800db44 <_dtoa_r+0xb24>
 800dbe6:	9b06      	ldr	r3, [sp, #24]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	f73f aea8 	bgt.w	800d93e <_dtoa_r+0x91e>
 800dbee:	e7a9      	b.n	800db44 <_dtoa_r+0xb24>
 800dbf0:	0800f5c9 	.word	0x0800f5c9
 800dbf4:	0800f425 	.word	0x0800f425
 800dbf8:	0800f54a 	.word	0x0800f54a

0800dbfc <__sflush_r>:
 800dbfc:	898a      	ldrh	r2, [r1, #12]
 800dbfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	4605      	mov	r5, r0
 800dc04:	0710      	lsls	r0, r2, #28
 800dc06:	460c      	mov	r4, r1
 800dc08:	d458      	bmi.n	800dcbc <__sflush_r+0xc0>
 800dc0a:	684b      	ldr	r3, [r1, #4]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	dc05      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	dc02      	bgt.n	800dc1c <__sflush_r+0x20>
 800dc16:	2000      	movs	r0, #0
 800dc18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc1e:	2e00      	cmp	r6, #0
 800dc20:	d0f9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc28:	682f      	ldr	r7, [r5, #0]
 800dc2a:	602b      	str	r3, [r5, #0]
 800dc2c:	d032      	beq.n	800dc94 <__sflush_r+0x98>
 800dc2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc30:	89a3      	ldrh	r3, [r4, #12]
 800dc32:	075a      	lsls	r2, r3, #29
 800dc34:	d505      	bpl.n	800dc42 <__sflush_r+0x46>
 800dc36:	6863      	ldr	r3, [r4, #4]
 800dc38:	1ac0      	subs	r0, r0, r3
 800dc3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc3c:	b10b      	cbz	r3, 800dc42 <__sflush_r+0x46>
 800dc3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc40:	1ac0      	subs	r0, r0, r3
 800dc42:	2300      	movs	r3, #0
 800dc44:	4602      	mov	r2, r0
 800dc46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc48:	6a21      	ldr	r1, [r4, #32]
 800dc4a:	4628      	mov	r0, r5
 800dc4c:	47b0      	blx	r6
 800dc4e:	1c43      	adds	r3, r0, #1
 800dc50:	89a3      	ldrh	r3, [r4, #12]
 800dc52:	d106      	bne.n	800dc62 <__sflush_r+0x66>
 800dc54:	6829      	ldr	r1, [r5, #0]
 800dc56:	291d      	cmp	r1, #29
 800dc58:	d82c      	bhi.n	800dcb4 <__sflush_r+0xb8>
 800dc5a:	4a2a      	ldr	r2, [pc, #168]	; (800dd04 <__sflush_r+0x108>)
 800dc5c:	40ca      	lsrs	r2, r1
 800dc5e:	07d6      	lsls	r6, r2, #31
 800dc60:	d528      	bpl.n	800dcb4 <__sflush_r+0xb8>
 800dc62:	2200      	movs	r2, #0
 800dc64:	6062      	str	r2, [r4, #4]
 800dc66:	04d9      	lsls	r1, r3, #19
 800dc68:	6922      	ldr	r2, [r4, #16]
 800dc6a:	6022      	str	r2, [r4, #0]
 800dc6c:	d504      	bpl.n	800dc78 <__sflush_r+0x7c>
 800dc6e:	1c42      	adds	r2, r0, #1
 800dc70:	d101      	bne.n	800dc76 <__sflush_r+0x7a>
 800dc72:	682b      	ldr	r3, [r5, #0]
 800dc74:	b903      	cbnz	r3, 800dc78 <__sflush_r+0x7c>
 800dc76:	6560      	str	r0, [r4, #84]	; 0x54
 800dc78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc7a:	602f      	str	r7, [r5, #0]
 800dc7c:	2900      	cmp	r1, #0
 800dc7e:	d0ca      	beq.n	800dc16 <__sflush_r+0x1a>
 800dc80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc84:	4299      	cmp	r1, r3
 800dc86:	d002      	beq.n	800dc8e <__sflush_r+0x92>
 800dc88:	4628      	mov	r0, r5
 800dc8a:	f000 fd97 	bl	800e7bc <_free_r>
 800dc8e:	2000      	movs	r0, #0
 800dc90:	6360      	str	r0, [r4, #52]	; 0x34
 800dc92:	e7c1      	b.n	800dc18 <__sflush_r+0x1c>
 800dc94:	6a21      	ldr	r1, [r4, #32]
 800dc96:	2301      	movs	r3, #1
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b0      	blx	r6
 800dc9c:	1c41      	adds	r1, r0, #1
 800dc9e:	d1c7      	bne.n	800dc30 <__sflush_r+0x34>
 800dca0:	682b      	ldr	r3, [r5, #0]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d0c4      	beq.n	800dc30 <__sflush_r+0x34>
 800dca6:	2b1d      	cmp	r3, #29
 800dca8:	d001      	beq.n	800dcae <__sflush_r+0xb2>
 800dcaa:	2b16      	cmp	r3, #22
 800dcac:	d101      	bne.n	800dcb2 <__sflush_r+0xb6>
 800dcae:	602f      	str	r7, [r5, #0]
 800dcb0:	e7b1      	b.n	800dc16 <__sflush_r+0x1a>
 800dcb2:	89a3      	ldrh	r3, [r4, #12]
 800dcb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	e7ad      	b.n	800dc18 <__sflush_r+0x1c>
 800dcbc:	690f      	ldr	r7, [r1, #16]
 800dcbe:	2f00      	cmp	r7, #0
 800dcc0:	d0a9      	beq.n	800dc16 <__sflush_r+0x1a>
 800dcc2:	0793      	lsls	r3, r2, #30
 800dcc4:	680e      	ldr	r6, [r1, #0]
 800dcc6:	bf08      	it	eq
 800dcc8:	694b      	ldreq	r3, [r1, #20]
 800dcca:	600f      	str	r7, [r1, #0]
 800dccc:	bf18      	it	ne
 800dcce:	2300      	movne	r3, #0
 800dcd0:	eba6 0807 	sub.w	r8, r6, r7
 800dcd4:	608b      	str	r3, [r1, #8]
 800dcd6:	f1b8 0f00 	cmp.w	r8, #0
 800dcda:	dd9c      	ble.n	800dc16 <__sflush_r+0x1a>
 800dcdc:	6a21      	ldr	r1, [r4, #32]
 800dcde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dce0:	4643      	mov	r3, r8
 800dce2:	463a      	mov	r2, r7
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b0      	blx	r6
 800dce8:	2800      	cmp	r0, #0
 800dcea:	dc06      	bgt.n	800dcfa <__sflush_r+0xfe>
 800dcec:	89a3      	ldrh	r3, [r4, #12]
 800dcee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcf2:	81a3      	strh	r3, [r4, #12]
 800dcf4:	f04f 30ff 	mov.w	r0, #4294967295
 800dcf8:	e78e      	b.n	800dc18 <__sflush_r+0x1c>
 800dcfa:	4407      	add	r7, r0
 800dcfc:	eba8 0800 	sub.w	r8, r8, r0
 800dd00:	e7e9      	b.n	800dcd6 <__sflush_r+0xda>
 800dd02:	bf00      	nop
 800dd04:	20400001 	.word	0x20400001

0800dd08 <_fflush_r>:
 800dd08:	b538      	push	{r3, r4, r5, lr}
 800dd0a:	690b      	ldr	r3, [r1, #16]
 800dd0c:	4605      	mov	r5, r0
 800dd0e:	460c      	mov	r4, r1
 800dd10:	b913      	cbnz	r3, 800dd18 <_fflush_r+0x10>
 800dd12:	2500      	movs	r5, #0
 800dd14:	4628      	mov	r0, r5
 800dd16:	bd38      	pop	{r3, r4, r5, pc}
 800dd18:	b118      	cbz	r0, 800dd22 <_fflush_r+0x1a>
 800dd1a:	6983      	ldr	r3, [r0, #24]
 800dd1c:	b90b      	cbnz	r3, 800dd22 <_fflush_r+0x1a>
 800dd1e:	f000 f887 	bl	800de30 <__sinit>
 800dd22:	4b14      	ldr	r3, [pc, #80]	; (800dd74 <_fflush_r+0x6c>)
 800dd24:	429c      	cmp	r4, r3
 800dd26:	d11b      	bne.n	800dd60 <_fflush_r+0x58>
 800dd28:	686c      	ldr	r4, [r5, #4]
 800dd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d0ef      	beq.n	800dd12 <_fflush_r+0xa>
 800dd32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd34:	07d0      	lsls	r0, r2, #31
 800dd36:	d404      	bmi.n	800dd42 <_fflush_r+0x3a>
 800dd38:	0599      	lsls	r1, r3, #22
 800dd3a:	d402      	bmi.n	800dd42 <_fflush_r+0x3a>
 800dd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd3e:	f000 f91a 	bl	800df76 <__retarget_lock_acquire_recursive>
 800dd42:	4628      	mov	r0, r5
 800dd44:	4621      	mov	r1, r4
 800dd46:	f7ff ff59 	bl	800dbfc <__sflush_r>
 800dd4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd4c:	07da      	lsls	r2, r3, #31
 800dd4e:	4605      	mov	r5, r0
 800dd50:	d4e0      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd52:	89a3      	ldrh	r3, [r4, #12]
 800dd54:	059b      	lsls	r3, r3, #22
 800dd56:	d4dd      	bmi.n	800dd14 <_fflush_r+0xc>
 800dd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5a:	f000 f90d 	bl	800df78 <__retarget_lock_release_recursive>
 800dd5e:	e7d9      	b.n	800dd14 <_fflush_r+0xc>
 800dd60:	4b05      	ldr	r3, [pc, #20]	; (800dd78 <_fflush_r+0x70>)
 800dd62:	429c      	cmp	r4, r3
 800dd64:	d101      	bne.n	800dd6a <_fflush_r+0x62>
 800dd66:	68ac      	ldr	r4, [r5, #8]
 800dd68:	e7df      	b.n	800dd2a <_fflush_r+0x22>
 800dd6a:	4b04      	ldr	r3, [pc, #16]	; (800dd7c <_fflush_r+0x74>)
 800dd6c:	429c      	cmp	r4, r3
 800dd6e:	bf08      	it	eq
 800dd70:	68ec      	ldreq	r4, [r5, #12]
 800dd72:	e7da      	b.n	800dd2a <_fflush_r+0x22>
 800dd74:	0800f5fc 	.word	0x0800f5fc
 800dd78:	0800f61c 	.word	0x0800f61c
 800dd7c:	0800f5dc 	.word	0x0800f5dc

0800dd80 <std>:
 800dd80:	2300      	movs	r3, #0
 800dd82:	b510      	push	{r4, lr}
 800dd84:	4604      	mov	r4, r0
 800dd86:	e9c0 3300 	strd	r3, r3, [r0]
 800dd8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd8e:	6083      	str	r3, [r0, #8]
 800dd90:	8181      	strh	r1, [r0, #12]
 800dd92:	6643      	str	r3, [r0, #100]	; 0x64
 800dd94:	81c2      	strh	r2, [r0, #14]
 800dd96:	6183      	str	r3, [r0, #24]
 800dd98:	4619      	mov	r1, r3
 800dd9a:	2208      	movs	r2, #8
 800dd9c:	305c      	adds	r0, #92	; 0x5c
 800dd9e:	f7fe f897 	bl	800bed0 <memset>
 800dda2:	4b05      	ldr	r3, [pc, #20]	; (800ddb8 <std+0x38>)
 800dda4:	6263      	str	r3, [r4, #36]	; 0x24
 800dda6:	4b05      	ldr	r3, [pc, #20]	; (800ddbc <std+0x3c>)
 800dda8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddaa:	4b05      	ldr	r3, [pc, #20]	; (800ddc0 <std+0x40>)
 800ddac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ddae:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <std+0x44>)
 800ddb0:	6224      	str	r4, [r4, #32]
 800ddb2:	6323      	str	r3, [r4, #48]	; 0x30
 800ddb4:	bd10      	pop	{r4, pc}
 800ddb6:	bf00      	nop
 800ddb8:	0800ed39 	.word	0x0800ed39
 800ddbc:	0800ed5b 	.word	0x0800ed5b
 800ddc0:	0800ed93 	.word	0x0800ed93
 800ddc4:	0800edb7 	.word	0x0800edb7

0800ddc8 <_cleanup_r>:
 800ddc8:	4901      	ldr	r1, [pc, #4]	; (800ddd0 <_cleanup_r+0x8>)
 800ddca:	f000 b8af 	b.w	800df2c <_fwalk_reent>
 800ddce:	bf00      	nop
 800ddd0:	0800dd09 	.word	0x0800dd09

0800ddd4 <__sfmoreglue>:
 800ddd4:	b570      	push	{r4, r5, r6, lr}
 800ddd6:	2268      	movs	r2, #104	; 0x68
 800ddd8:	1e4d      	subs	r5, r1, #1
 800ddda:	4355      	muls	r5, r2
 800dddc:	460e      	mov	r6, r1
 800ddde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dde2:	f000 fd57 	bl	800e894 <_malloc_r>
 800dde6:	4604      	mov	r4, r0
 800dde8:	b140      	cbz	r0, 800ddfc <__sfmoreglue+0x28>
 800ddea:	2100      	movs	r1, #0
 800ddec:	e9c0 1600 	strd	r1, r6, [r0]
 800ddf0:	300c      	adds	r0, #12
 800ddf2:	60a0      	str	r0, [r4, #8]
 800ddf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ddf8:	f7fe f86a 	bl	800bed0 <memset>
 800ddfc:	4620      	mov	r0, r4
 800ddfe:	bd70      	pop	{r4, r5, r6, pc}

0800de00 <__sfp_lock_acquire>:
 800de00:	4801      	ldr	r0, [pc, #4]	; (800de08 <__sfp_lock_acquire+0x8>)
 800de02:	f000 b8b8 	b.w	800df76 <__retarget_lock_acquire_recursive>
 800de06:	bf00      	nop
 800de08:	20000795 	.word	0x20000795

0800de0c <__sfp_lock_release>:
 800de0c:	4801      	ldr	r0, [pc, #4]	; (800de14 <__sfp_lock_release+0x8>)
 800de0e:	f000 b8b3 	b.w	800df78 <__retarget_lock_release_recursive>
 800de12:	bf00      	nop
 800de14:	20000795 	.word	0x20000795

0800de18 <__sinit_lock_acquire>:
 800de18:	4801      	ldr	r0, [pc, #4]	; (800de20 <__sinit_lock_acquire+0x8>)
 800de1a:	f000 b8ac 	b.w	800df76 <__retarget_lock_acquire_recursive>
 800de1e:	bf00      	nop
 800de20:	20000796 	.word	0x20000796

0800de24 <__sinit_lock_release>:
 800de24:	4801      	ldr	r0, [pc, #4]	; (800de2c <__sinit_lock_release+0x8>)
 800de26:	f000 b8a7 	b.w	800df78 <__retarget_lock_release_recursive>
 800de2a:	bf00      	nop
 800de2c:	20000796 	.word	0x20000796

0800de30 <__sinit>:
 800de30:	b510      	push	{r4, lr}
 800de32:	4604      	mov	r4, r0
 800de34:	f7ff fff0 	bl	800de18 <__sinit_lock_acquire>
 800de38:	69a3      	ldr	r3, [r4, #24]
 800de3a:	b11b      	cbz	r3, 800de44 <__sinit+0x14>
 800de3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de40:	f7ff bff0 	b.w	800de24 <__sinit_lock_release>
 800de44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de48:	6523      	str	r3, [r4, #80]	; 0x50
 800de4a:	4b13      	ldr	r3, [pc, #76]	; (800de98 <__sinit+0x68>)
 800de4c:	4a13      	ldr	r2, [pc, #76]	; (800de9c <__sinit+0x6c>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	62a2      	str	r2, [r4, #40]	; 0x28
 800de52:	42a3      	cmp	r3, r4
 800de54:	bf04      	itt	eq
 800de56:	2301      	moveq	r3, #1
 800de58:	61a3      	streq	r3, [r4, #24]
 800de5a:	4620      	mov	r0, r4
 800de5c:	f000 f820 	bl	800dea0 <__sfp>
 800de60:	6060      	str	r0, [r4, #4]
 800de62:	4620      	mov	r0, r4
 800de64:	f000 f81c 	bl	800dea0 <__sfp>
 800de68:	60a0      	str	r0, [r4, #8]
 800de6a:	4620      	mov	r0, r4
 800de6c:	f000 f818 	bl	800dea0 <__sfp>
 800de70:	2200      	movs	r2, #0
 800de72:	60e0      	str	r0, [r4, #12]
 800de74:	2104      	movs	r1, #4
 800de76:	6860      	ldr	r0, [r4, #4]
 800de78:	f7ff ff82 	bl	800dd80 <std>
 800de7c:	68a0      	ldr	r0, [r4, #8]
 800de7e:	2201      	movs	r2, #1
 800de80:	2109      	movs	r1, #9
 800de82:	f7ff ff7d 	bl	800dd80 <std>
 800de86:	68e0      	ldr	r0, [r4, #12]
 800de88:	2202      	movs	r2, #2
 800de8a:	2112      	movs	r1, #18
 800de8c:	f7ff ff78 	bl	800dd80 <std>
 800de90:	2301      	movs	r3, #1
 800de92:	61a3      	str	r3, [r4, #24]
 800de94:	e7d2      	b.n	800de3c <__sinit+0xc>
 800de96:	bf00      	nop
 800de98:	0800f400 	.word	0x0800f400
 800de9c:	0800ddc9 	.word	0x0800ddc9

0800dea0 <__sfp>:
 800dea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dea2:	4607      	mov	r7, r0
 800dea4:	f7ff ffac 	bl	800de00 <__sfp_lock_acquire>
 800dea8:	4b1e      	ldr	r3, [pc, #120]	; (800df24 <__sfp+0x84>)
 800deaa:	681e      	ldr	r6, [r3, #0]
 800deac:	69b3      	ldr	r3, [r6, #24]
 800deae:	b913      	cbnz	r3, 800deb6 <__sfp+0x16>
 800deb0:	4630      	mov	r0, r6
 800deb2:	f7ff ffbd 	bl	800de30 <__sinit>
 800deb6:	3648      	adds	r6, #72	; 0x48
 800deb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800debc:	3b01      	subs	r3, #1
 800debe:	d503      	bpl.n	800dec8 <__sfp+0x28>
 800dec0:	6833      	ldr	r3, [r6, #0]
 800dec2:	b30b      	cbz	r3, 800df08 <__sfp+0x68>
 800dec4:	6836      	ldr	r6, [r6, #0]
 800dec6:	e7f7      	b.n	800deb8 <__sfp+0x18>
 800dec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800decc:	b9d5      	cbnz	r5, 800df04 <__sfp+0x64>
 800dece:	4b16      	ldr	r3, [pc, #88]	; (800df28 <__sfp+0x88>)
 800ded0:	60e3      	str	r3, [r4, #12]
 800ded2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ded6:	6665      	str	r5, [r4, #100]	; 0x64
 800ded8:	f000 f84c 	bl	800df74 <__retarget_lock_init_recursive>
 800dedc:	f7ff ff96 	bl	800de0c <__sfp_lock_release>
 800dee0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dee4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dee8:	6025      	str	r5, [r4, #0]
 800deea:	61a5      	str	r5, [r4, #24]
 800deec:	2208      	movs	r2, #8
 800deee:	4629      	mov	r1, r5
 800def0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800def4:	f7fd ffec 	bl	800bed0 <memset>
 800def8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800defc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df00:	4620      	mov	r0, r4
 800df02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df04:	3468      	adds	r4, #104	; 0x68
 800df06:	e7d9      	b.n	800debc <__sfp+0x1c>
 800df08:	2104      	movs	r1, #4
 800df0a:	4638      	mov	r0, r7
 800df0c:	f7ff ff62 	bl	800ddd4 <__sfmoreglue>
 800df10:	4604      	mov	r4, r0
 800df12:	6030      	str	r0, [r6, #0]
 800df14:	2800      	cmp	r0, #0
 800df16:	d1d5      	bne.n	800dec4 <__sfp+0x24>
 800df18:	f7ff ff78 	bl	800de0c <__sfp_lock_release>
 800df1c:	230c      	movs	r3, #12
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	e7ee      	b.n	800df00 <__sfp+0x60>
 800df22:	bf00      	nop
 800df24:	0800f400 	.word	0x0800f400
 800df28:	ffff0001 	.word	0xffff0001

0800df2c <_fwalk_reent>:
 800df2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df30:	4606      	mov	r6, r0
 800df32:	4688      	mov	r8, r1
 800df34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df38:	2700      	movs	r7, #0
 800df3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df3e:	f1b9 0901 	subs.w	r9, r9, #1
 800df42:	d505      	bpl.n	800df50 <_fwalk_reent+0x24>
 800df44:	6824      	ldr	r4, [r4, #0]
 800df46:	2c00      	cmp	r4, #0
 800df48:	d1f7      	bne.n	800df3a <_fwalk_reent+0xe>
 800df4a:	4638      	mov	r0, r7
 800df4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df50:	89ab      	ldrh	r3, [r5, #12]
 800df52:	2b01      	cmp	r3, #1
 800df54:	d907      	bls.n	800df66 <_fwalk_reent+0x3a>
 800df56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df5a:	3301      	adds	r3, #1
 800df5c:	d003      	beq.n	800df66 <_fwalk_reent+0x3a>
 800df5e:	4629      	mov	r1, r5
 800df60:	4630      	mov	r0, r6
 800df62:	47c0      	blx	r8
 800df64:	4307      	orrs	r7, r0
 800df66:	3568      	adds	r5, #104	; 0x68
 800df68:	e7e9      	b.n	800df3e <_fwalk_reent+0x12>
	...

0800df6c <_localeconv_r>:
 800df6c:	4800      	ldr	r0, [pc, #0]	; (800df70 <_localeconv_r+0x4>)
 800df6e:	4770      	bx	lr
 800df70:	2000037c 	.word	0x2000037c

0800df74 <__retarget_lock_init_recursive>:
 800df74:	4770      	bx	lr

0800df76 <__retarget_lock_acquire_recursive>:
 800df76:	4770      	bx	lr

0800df78 <__retarget_lock_release_recursive>:
 800df78:	4770      	bx	lr

0800df7a <__swhatbuf_r>:
 800df7a:	b570      	push	{r4, r5, r6, lr}
 800df7c:	460e      	mov	r6, r1
 800df7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df82:	2900      	cmp	r1, #0
 800df84:	b096      	sub	sp, #88	; 0x58
 800df86:	4614      	mov	r4, r2
 800df88:	461d      	mov	r5, r3
 800df8a:	da08      	bge.n	800df9e <__swhatbuf_r+0x24>
 800df8c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df90:	2200      	movs	r2, #0
 800df92:	602a      	str	r2, [r5, #0]
 800df94:	061a      	lsls	r2, r3, #24
 800df96:	d410      	bmi.n	800dfba <__swhatbuf_r+0x40>
 800df98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df9c:	e00e      	b.n	800dfbc <__swhatbuf_r+0x42>
 800df9e:	466a      	mov	r2, sp
 800dfa0:	f000 ff30 	bl	800ee04 <_fstat_r>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	dbf1      	blt.n	800df8c <__swhatbuf_r+0x12>
 800dfa8:	9a01      	ldr	r2, [sp, #4]
 800dfaa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dfae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dfb2:	425a      	negs	r2, r3
 800dfb4:	415a      	adcs	r2, r3
 800dfb6:	602a      	str	r2, [r5, #0]
 800dfb8:	e7ee      	b.n	800df98 <__swhatbuf_r+0x1e>
 800dfba:	2340      	movs	r3, #64	; 0x40
 800dfbc:	2000      	movs	r0, #0
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	b016      	add	sp, #88	; 0x58
 800dfc2:	bd70      	pop	{r4, r5, r6, pc}

0800dfc4 <__smakebuf_r>:
 800dfc4:	898b      	ldrh	r3, [r1, #12]
 800dfc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfc8:	079d      	lsls	r5, r3, #30
 800dfca:	4606      	mov	r6, r0
 800dfcc:	460c      	mov	r4, r1
 800dfce:	d507      	bpl.n	800dfe0 <__smakebuf_r+0x1c>
 800dfd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	6123      	str	r3, [r4, #16]
 800dfd8:	2301      	movs	r3, #1
 800dfda:	6163      	str	r3, [r4, #20]
 800dfdc:	b002      	add	sp, #8
 800dfde:	bd70      	pop	{r4, r5, r6, pc}
 800dfe0:	ab01      	add	r3, sp, #4
 800dfe2:	466a      	mov	r2, sp
 800dfe4:	f7ff ffc9 	bl	800df7a <__swhatbuf_r>
 800dfe8:	9900      	ldr	r1, [sp, #0]
 800dfea:	4605      	mov	r5, r0
 800dfec:	4630      	mov	r0, r6
 800dfee:	f000 fc51 	bl	800e894 <_malloc_r>
 800dff2:	b948      	cbnz	r0, 800e008 <__smakebuf_r+0x44>
 800dff4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dff8:	059a      	lsls	r2, r3, #22
 800dffa:	d4ef      	bmi.n	800dfdc <__smakebuf_r+0x18>
 800dffc:	f023 0303 	bic.w	r3, r3, #3
 800e000:	f043 0302 	orr.w	r3, r3, #2
 800e004:	81a3      	strh	r3, [r4, #12]
 800e006:	e7e3      	b.n	800dfd0 <__smakebuf_r+0xc>
 800e008:	4b0d      	ldr	r3, [pc, #52]	; (800e040 <__smakebuf_r+0x7c>)
 800e00a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	6020      	str	r0, [r4, #0]
 800e010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e014:	81a3      	strh	r3, [r4, #12]
 800e016:	9b00      	ldr	r3, [sp, #0]
 800e018:	6163      	str	r3, [r4, #20]
 800e01a:	9b01      	ldr	r3, [sp, #4]
 800e01c:	6120      	str	r0, [r4, #16]
 800e01e:	b15b      	cbz	r3, 800e038 <__smakebuf_r+0x74>
 800e020:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e024:	4630      	mov	r0, r6
 800e026:	f000 feff 	bl	800ee28 <_isatty_r>
 800e02a:	b128      	cbz	r0, 800e038 <__smakebuf_r+0x74>
 800e02c:	89a3      	ldrh	r3, [r4, #12]
 800e02e:	f023 0303 	bic.w	r3, r3, #3
 800e032:	f043 0301 	orr.w	r3, r3, #1
 800e036:	81a3      	strh	r3, [r4, #12]
 800e038:	89a0      	ldrh	r0, [r4, #12]
 800e03a:	4305      	orrs	r5, r0
 800e03c:	81a5      	strh	r5, [r4, #12]
 800e03e:	e7cd      	b.n	800dfdc <__smakebuf_r+0x18>
 800e040:	0800ddc9 	.word	0x0800ddc9

0800e044 <malloc>:
 800e044:	4b02      	ldr	r3, [pc, #8]	; (800e050 <malloc+0xc>)
 800e046:	4601      	mov	r1, r0
 800e048:	6818      	ldr	r0, [r3, #0]
 800e04a:	f000 bc23 	b.w	800e894 <_malloc_r>
 800e04e:	bf00      	nop
 800e050:	20000228 	.word	0x20000228

0800e054 <memmove>:
 800e054:	4288      	cmp	r0, r1
 800e056:	b510      	push	{r4, lr}
 800e058:	eb01 0402 	add.w	r4, r1, r2
 800e05c:	d902      	bls.n	800e064 <memmove+0x10>
 800e05e:	4284      	cmp	r4, r0
 800e060:	4623      	mov	r3, r4
 800e062:	d807      	bhi.n	800e074 <memmove+0x20>
 800e064:	1e43      	subs	r3, r0, #1
 800e066:	42a1      	cmp	r1, r4
 800e068:	d008      	beq.n	800e07c <memmove+0x28>
 800e06a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e06e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e072:	e7f8      	b.n	800e066 <memmove+0x12>
 800e074:	4402      	add	r2, r0
 800e076:	4601      	mov	r1, r0
 800e078:	428a      	cmp	r2, r1
 800e07a:	d100      	bne.n	800e07e <memmove+0x2a>
 800e07c:	bd10      	pop	{r4, pc}
 800e07e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e086:	e7f7      	b.n	800e078 <memmove+0x24>

0800e088 <_Balloc>:
 800e088:	b570      	push	{r4, r5, r6, lr}
 800e08a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e08c:	4604      	mov	r4, r0
 800e08e:	460d      	mov	r5, r1
 800e090:	b976      	cbnz	r6, 800e0b0 <_Balloc+0x28>
 800e092:	2010      	movs	r0, #16
 800e094:	f7ff ffd6 	bl	800e044 <malloc>
 800e098:	4602      	mov	r2, r0
 800e09a:	6260      	str	r0, [r4, #36]	; 0x24
 800e09c:	b920      	cbnz	r0, 800e0a8 <_Balloc+0x20>
 800e09e:	4b18      	ldr	r3, [pc, #96]	; (800e100 <_Balloc+0x78>)
 800e0a0:	4818      	ldr	r0, [pc, #96]	; (800e104 <_Balloc+0x7c>)
 800e0a2:	2166      	movs	r1, #102	; 0x66
 800e0a4:	f7fd fea8 	bl	800bdf8 <__assert_func>
 800e0a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e0ac:	6006      	str	r6, [r0, #0]
 800e0ae:	60c6      	str	r6, [r0, #12]
 800e0b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e0b2:	68f3      	ldr	r3, [r6, #12]
 800e0b4:	b183      	cbz	r3, 800e0d8 <_Balloc+0x50>
 800e0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e0be:	b9b8      	cbnz	r0, 800e0f0 <_Balloc+0x68>
 800e0c0:	2101      	movs	r1, #1
 800e0c2:	fa01 f605 	lsl.w	r6, r1, r5
 800e0c6:	1d72      	adds	r2, r6, #5
 800e0c8:	0092      	lsls	r2, r2, #2
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 fb60 	bl	800e790 <_calloc_r>
 800e0d0:	b160      	cbz	r0, 800e0ec <_Balloc+0x64>
 800e0d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e0d6:	e00e      	b.n	800e0f6 <_Balloc+0x6e>
 800e0d8:	2221      	movs	r2, #33	; 0x21
 800e0da:	2104      	movs	r1, #4
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f000 fb57 	bl	800e790 <_calloc_r>
 800e0e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0e4:	60f0      	str	r0, [r6, #12]
 800e0e6:	68db      	ldr	r3, [r3, #12]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1e4      	bne.n	800e0b6 <_Balloc+0x2e>
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	bd70      	pop	{r4, r5, r6, pc}
 800e0f0:	6802      	ldr	r2, [r0, #0]
 800e0f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e0fc:	e7f7      	b.n	800e0ee <_Balloc+0x66>
 800e0fe:	bf00      	nop
 800e100:	0800f557 	.word	0x0800f557
 800e104:	0800f63c 	.word	0x0800f63c

0800e108 <_Bfree>:
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e10c:	4605      	mov	r5, r0
 800e10e:	460c      	mov	r4, r1
 800e110:	b976      	cbnz	r6, 800e130 <_Bfree+0x28>
 800e112:	2010      	movs	r0, #16
 800e114:	f7ff ff96 	bl	800e044 <malloc>
 800e118:	4602      	mov	r2, r0
 800e11a:	6268      	str	r0, [r5, #36]	; 0x24
 800e11c:	b920      	cbnz	r0, 800e128 <_Bfree+0x20>
 800e11e:	4b09      	ldr	r3, [pc, #36]	; (800e144 <_Bfree+0x3c>)
 800e120:	4809      	ldr	r0, [pc, #36]	; (800e148 <_Bfree+0x40>)
 800e122:	218a      	movs	r1, #138	; 0x8a
 800e124:	f7fd fe68 	bl	800bdf8 <__assert_func>
 800e128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e12c:	6006      	str	r6, [r0, #0]
 800e12e:	60c6      	str	r6, [r0, #12]
 800e130:	b13c      	cbz	r4, 800e142 <_Bfree+0x3a>
 800e132:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e134:	6862      	ldr	r2, [r4, #4]
 800e136:	68db      	ldr	r3, [r3, #12]
 800e138:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e13c:	6021      	str	r1, [r4, #0]
 800e13e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e142:	bd70      	pop	{r4, r5, r6, pc}
 800e144:	0800f557 	.word	0x0800f557
 800e148:	0800f63c 	.word	0x0800f63c

0800e14c <__multadd>:
 800e14c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e150:	690d      	ldr	r5, [r1, #16]
 800e152:	4607      	mov	r7, r0
 800e154:	460c      	mov	r4, r1
 800e156:	461e      	mov	r6, r3
 800e158:	f101 0c14 	add.w	ip, r1, #20
 800e15c:	2000      	movs	r0, #0
 800e15e:	f8dc 3000 	ldr.w	r3, [ip]
 800e162:	b299      	uxth	r1, r3
 800e164:	fb02 6101 	mla	r1, r2, r1, r6
 800e168:	0c1e      	lsrs	r6, r3, #16
 800e16a:	0c0b      	lsrs	r3, r1, #16
 800e16c:	fb02 3306 	mla	r3, r2, r6, r3
 800e170:	b289      	uxth	r1, r1
 800e172:	3001      	adds	r0, #1
 800e174:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e178:	4285      	cmp	r5, r0
 800e17a:	f84c 1b04 	str.w	r1, [ip], #4
 800e17e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e182:	dcec      	bgt.n	800e15e <__multadd+0x12>
 800e184:	b30e      	cbz	r6, 800e1ca <__multadd+0x7e>
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	42ab      	cmp	r3, r5
 800e18a:	dc19      	bgt.n	800e1c0 <__multadd+0x74>
 800e18c:	6861      	ldr	r1, [r4, #4]
 800e18e:	4638      	mov	r0, r7
 800e190:	3101      	adds	r1, #1
 800e192:	f7ff ff79 	bl	800e088 <_Balloc>
 800e196:	4680      	mov	r8, r0
 800e198:	b928      	cbnz	r0, 800e1a6 <__multadd+0x5a>
 800e19a:	4602      	mov	r2, r0
 800e19c:	4b0c      	ldr	r3, [pc, #48]	; (800e1d0 <__multadd+0x84>)
 800e19e:	480d      	ldr	r0, [pc, #52]	; (800e1d4 <__multadd+0x88>)
 800e1a0:	21b5      	movs	r1, #181	; 0xb5
 800e1a2:	f7fd fe29 	bl	800bdf8 <__assert_func>
 800e1a6:	6922      	ldr	r2, [r4, #16]
 800e1a8:	3202      	adds	r2, #2
 800e1aa:	f104 010c 	add.w	r1, r4, #12
 800e1ae:	0092      	lsls	r2, r2, #2
 800e1b0:	300c      	adds	r0, #12
 800e1b2:	f7fd fe7f 	bl	800beb4 <memcpy>
 800e1b6:	4621      	mov	r1, r4
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	f7ff ffa5 	bl	800e108 <_Bfree>
 800e1be:	4644      	mov	r4, r8
 800e1c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e1c4:	3501      	adds	r5, #1
 800e1c6:	615e      	str	r6, [r3, #20]
 800e1c8:	6125      	str	r5, [r4, #16]
 800e1ca:	4620      	mov	r0, r4
 800e1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d0:	0800f5c9 	.word	0x0800f5c9
 800e1d4:	0800f63c 	.word	0x0800f63c

0800e1d8 <__hi0bits>:
 800e1d8:	0c03      	lsrs	r3, r0, #16
 800e1da:	041b      	lsls	r3, r3, #16
 800e1dc:	b9d3      	cbnz	r3, 800e214 <__hi0bits+0x3c>
 800e1de:	0400      	lsls	r0, r0, #16
 800e1e0:	2310      	movs	r3, #16
 800e1e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e1e6:	bf04      	itt	eq
 800e1e8:	0200      	lsleq	r0, r0, #8
 800e1ea:	3308      	addeq	r3, #8
 800e1ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e1f0:	bf04      	itt	eq
 800e1f2:	0100      	lsleq	r0, r0, #4
 800e1f4:	3304      	addeq	r3, #4
 800e1f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e1fa:	bf04      	itt	eq
 800e1fc:	0080      	lsleq	r0, r0, #2
 800e1fe:	3302      	addeq	r3, #2
 800e200:	2800      	cmp	r0, #0
 800e202:	db05      	blt.n	800e210 <__hi0bits+0x38>
 800e204:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e208:	f103 0301 	add.w	r3, r3, #1
 800e20c:	bf08      	it	eq
 800e20e:	2320      	moveq	r3, #32
 800e210:	4618      	mov	r0, r3
 800e212:	4770      	bx	lr
 800e214:	2300      	movs	r3, #0
 800e216:	e7e4      	b.n	800e1e2 <__hi0bits+0xa>

0800e218 <__lo0bits>:
 800e218:	6803      	ldr	r3, [r0, #0]
 800e21a:	f013 0207 	ands.w	r2, r3, #7
 800e21e:	4601      	mov	r1, r0
 800e220:	d00b      	beq.n	800e23a <__lo0bits+0x22>
 800e222:	07da      	lsls	r2, r3, #31
 800e224:	d423      	bmi.n	800e26e <__lo0bits+0x56>
 800e226:	0798      	lsls	r0, r3, #30
 800e228:	bf49      	itett	mi
 800e22a:	085b      	lsrmi	r3, r3, #1
 800e22c:	089b      	lsrpl	r3, r3, #2
 800e22e:	2001      	movmi	r0, #1
 800e230:	600b      	strmi	r3, [r1, #0]
 800e232:	bf5c      	itt	pl
 800e234:	600b      	strpl	r3, [r1, #0]
 800e236:	2002      	movpl	r0, #2
 800e238:	4770      	bx	lr
 800e23a:	b298      	uxth	r0, r3
 800e23c:	b9a8      	cbnz	r0, 800e26a <__lo0bits+0x52>
 800e23e:	0c1b      	lsrs	r3, r3, #16
 800e240:	2010      	movs	r0, #16
 800e242:	b2da      	uxtb	r2, r3
 800e244:	b90a      	cbnz	r2, 800e24a <__lo0bits+0x32>
 800e246:	3008      	adds	r0, #8
 800e248:	0a1b      	lsrs	r3, r3, #8
 800e24a:	071a      	lsls	r2, r3, #28
 800e24c:	bf04      	itt	eq
 800e24e:	091b      	lsreq	r3, r3, #4
 800e250:	3004      	addeq	r0, #4
 800e252:	079a      	lsls	r2, r3, #30
 800e254:	bf04      	itt	eq
 800e256:	089b      	lsreq	r3, r3, #2
 800e258:	3002      	addeq	r0, #2
 800e25a:	07da      	lsls	r2, r3, #31
 800e25c:	d403      	bmi.n	800e266 <__lo0bits+0x4e>
 800e25e:	085b      	lsrs	r3, r3, #1
 800e260:	f100 0001 	add.w	r0, r0, #1
 800e264:	d005      	beq.n	800e272 <__lo0bits+0x5a>
 800e266:	600b      	str	r3, [r1, #0]
 800e268:	4770      	bx	lr
 800e26a:	4610      	mov	r0, r2
 800e26c:	e7e9      	b.n	800e242 <__lo0bits+0x2a>
 800e26e:	2000      	movs	r0, #0
 800e270:	4770      	bx	lr
 800e272:	2020      	movs	r0, #32
 800e274:	4770      	bx	lr
	...

0800e278 <__i2b>:
 800e278:	b510      	push	{r4, lr}
 800e27a:	460c      	mov	r4, r1
 800e27c:	2101      	movs	r1, #1
 800e27e:	f7ff ff03 	bl	800e088 <_Balloc>
 800e282:	4602      	mov	r2, r0
 800e284:	b928      	cbnz	r0, 800e292 <__i2b+0x1a>
 800e286:	4b05      	ldr	r3, [pc, #20]	; (800e29c <__i2b+0x24>)
 800e288:	4805      	ldr	r0, [pc, #20]	; (800e2a0 <__i2b+0x28>)
 800e28a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e28e:	f7fd fdb3 	bl	800bdf8 <__assert_func>
 800e292:	2301      	movs	r3, #1
 800e294:	6144      	str	r4, [r0, #20]
 800e296:	6103      	str	r3, [r0, #16]
 800e298:	bd10      	pop	{r4, pc}
 800e29a:	bf00      	nop
 800e29c:	0800f5c9 	.word	0x0800f5c9
 800e2a0:	0800f63c 	.word	0x0800f63c

0800e2a4 <__multiply>:
 800e2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2a8:	4691      	mov	r9, r2
 800e2aa:	690a      	ldr	r2, [r1, #16]
 800e2ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	bfb8      	it	lt
 800e2b4:	460b      	movlt	r3, r1
 800e2b6:	460c      	mov	r4, r1
 800e2b8:	bfbc      	itt	lt
 800e2ba:	464c      	movlt	r4, r9
 800e2bc:	4699      	movlt	r9, r3
 800e2be:	6927      	ldr	r7, [r4, #16]
 800e2c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e2c4:	68a3      	ldr	r3, [r4, #8]
 800e2c6:	6861      	ldr	r1, [r4, #4]
 800e2c8:	eb07 060a 	add.w	r6, r7, sl
 800e2cc:	42b3      	cmp	r3, r6
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	bfb8      	it	lt
 800e2d2:	3101      	addlt	r1, #1
 800e2d4:	f7ff fed8 	bl	800e088 <_Balloc>
 800e2d8:	b930      	cbnz	r0, 800e2e8 <__multiply+0x44>
 800e2da:	4602      	mov	r2, r0
 800e2dc:	4b44      	ldr	r3, [pc, #272]	; (800e3f0 <__multiply+0x14c>)
 800e2de:	4845      	ldr	r0, [pc, #276]	; (800e3f4 <__multiply+0x150>)
 800e2e0:	f240 115d 	movw	r1, #349	; 0x15d
 800e2e4:	f7fd fd88 	bl	800bdf8 <__assert_func>
 800e2e8:	f100 0514 	add.w	r5, r0, #20
 800e2ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e2f0:	462b      	mov	r3, r5
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	4543      	cmp	r3, r8
 800e2f6:	d321      	bcc.n	800e33c <__multiply+0x98>
 800e2f8:	f104 0314 	add.w	r3, r4, #20
 800e2fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e300:	f109 0314 	add.w	r3, r9, #20
 800e304:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e308:	9202      	str	r2, [sp, #8]
 800e30a:	1b3a      	subs	r2, r7, r4
 800e30c:	3a15      	subs	r2, #21
 800e30e:	f022 0203 	bic.w	r2, r2, #3
 800e312:	3204      	adds	r2, #4
 800e314:	f104 0115 	add.w	r1, r4, #21
 800e318:	428f      	cmp	r7, r1
 800e31a:	bf38      	it	cc
 800e31c:	2204      	movcc	r2, #4
 800e31e:	9201      	str	r2, [sp, #4]
 800e320:	9a02      	ldr	r2, [sp, #8]
 800e322:	9303      	str	r3, [sp, #12]
 800e324:	429a      	cmp	r2, r3
 800e326:	d80c      	bhi.n	800e342 <__multiply+0x9e>
 800e328:	2e00      	cmp	r6, #0
 800e32a:	dd03      	ble.n	800e334 <__multiply+0x90>
 800e32c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e330:	2b00      	cmp	r3, #0
 800e332:	d05a      	beq.n	800e3ea <__multiply+0x146>
 800e334:	6106      	str	r6, [r0, #16]
 800e336:	b005      	add	sp, #20
 800e338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e33c:	f843 2b04 	str.w	r2, [r3], #4
 800e340:	e7d8      	b.n	800e2f4 <__multiply+0x50>
 800e342:	f8b3 a000 	ldrh.w	sl, [r3]
 800e346:	f1ba 0f00 	cmp.w	sl, #0
 800e34a:	d024      	beq.n	800e396 <__multiply+0xf2>
 800e34c:	f104 0e14 	add.w	lr, r4, #20
 800e350:	46a9      	mov	r9, r5
 800e352:	f04f 0c00 	mov.w	ip, #0
 800e356:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e35a:	f8d9 1000 	ldr.w	r1, [r9]
 800e35e:	fa1f fb82 	uxth.w	fp, r2
 800e362:	b289      	uxth	r1, r1
 800e364:	fb0a 110b 	mla	r1, sl, fp, r1
 800e368:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e36c:	f8d9 2000 	ldr.w	r2, [r9]
 800e370:	4461      	add	r1, ip
 800e372:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e376:	fb0a c20b 	mla	r2, sl, fp, ip
 800e37a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e37e:	b289      	uxth	r1, r1
 800e380:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e384:	4577      	cmp	r7, lr
 800e386:	f849 1b04 	str.w	r1, [r9], #4
 800e38a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e38e:	d8e2      	bhi.n	800e356 <__multiply+0xb2>
 800e390:	9a01      	ldr	r2, [sp, #4]
 800e392:	f845 c002 	str.w	ip, [r5, r2]
 800e396:	9a03      	ldr	r2, [sp, #12]
 800e398:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e39c:	3304      	adds	r3, #4
 800e39e:	f1b9 0f00 	cmp.w	r9, #0
 800e3a2:	d020      	beq.n	800e3e6 <__multiply+0x142>
 800e3a4:	6829      	ldr	r1, [r5, #0]
 800e3a6:	f104 0c14 	add.w	ip, r4, #20
 800e3aa:	46ae      	mov	lr, r5
 800e3ac:	f04f 0a00 	mov.w	sl, #0
 800e3b0:	f8bc b000 	ldrh.w	fp, [ip]
 800e3b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e3b8:	fb09 220b 	mla	r2, r9, fp, r2
 800e3bc:	4492      	add	sl, r2
 800e3be:	b289      	uxth	r1, r1
 800e3c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e3c4:	f84e 1b04 	str.w	r1, [lr], #4
 800e3c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e3cc:	f8be 1000 	ldrh.w	r1, [lr]
 800e3d0:	0c12      	lsrs	r2, r2, #16
 800e3d2:	fb09 1102 	mla	r1, r9, r2, r1
 800e3d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e3da:	4567      	cmp	r7, ip
 800e3dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e3e0:	d8e6      	bhi.n	800e3b0 <__multiply+0x10c>
 800e3e2:	9a01      	ldr	r2, [sp, #4]
 800e3e4:	50a9      	str	r1, [r5, r2]
 800e3e6:	3504      	adds	r5, #4
 800e3e8:	e79a      	b.n	800e320 <__multiply+0x7c>
 800e3ea:	3e01      	subs	r6, #1
 800e3ec:	e79c      	b.n	800e328 <__multiply+0x84>
 800e3ee:	bf00      	nop
 800e3f0:	0800f5c9 	.word	0x0800f5c9
 800e3f4:	0800f63c 	.word	0x0800f63c

0800e3f8 <__pow5mult>:
 800e3f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3fc:	4615      	mov	r5, r2
 800e3fe:	f012 0203 	ands.w	r2, r2, #3
 800e402:	4606      	mov	r6, r0
 800e404:	460f      	mov	r7, r1
 800e406:	d007      	beq.n	800e418 <__pow5mult+0x20>
 800e408:	4c25      	ldr	r4, [pc, #148]	; (800e4a0 <__pow5mult+0xa8>)
 800e40a:	3a01      	subs	r2, #1
 800e40c:	2300      	movs	r3, #0
 800e40e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e412:	f7ff fe9b 	bl	800e14c <__multadd>
 800e416:	4607      	mov	r7, r0
 800e418:	10ad      	asrs	r5, r5, #2
 800e41a:	d03d      	beq.n	800e498 <__pow5mult+0xa0>
 800e41c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e41e:	b97c      	cbnz	r4, 800e440 <__pow5mult+0x48>
 800e420:	2010      	movs	r0, #16
 800e422:	f7ff fe0f 	bl	800e044 <malloc>
 800e426:	4602      	mov	r2, r0
 800e428:	6270      	str	r0, [r6, #36]	; 0x24
 800e42a:	b928      	cbnz	r0, 800e438 <__pow5mult+0x40>
 800e42c:	4b1d      	ldr	r3, [pc, #116]	; (800e4a4 <__pow5mult+0xac>)
 800e42e:	481e      	ldr	r0, [pc, #120]	; (800e4a8 <__pow5mult+0xb0>)
 800e430:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e434:	f7fd fce0 	bl	800bdf8 <__assert_func>
 800e438:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e43c:	6004      	str	r4, [r0, #0]
 800e43e:	60c4      	str	r4, [r0, #12]
 800e440:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e444:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e448:	b94c      	cbnz	r4, 800e45e <__pow5mult+0x66>
 800e44a:	f240 2171 	movw	r1, #625	; 0x271
 800e44e:	4630      	mov	r0, r6
 800e450:	f7ff ff12 	bl	800e278 <__i2b>
 800e454:	2300      	movs	r3, #0
 800e456:	f8c8 0008 	str.w	r0, [r8, #8]
 800e45a:	4604      	mov	r4, r0
 800e45c:	6003      	str	r3, [r0, #0]
 800e45e:	f04f 0900 	mov.w	r9, #0
 800e462:	07eb      	lsls	r3, r5, #31
 800e464:	d50a      	bpl.n	800e47c <__pow5mult+0x84>
 800e466:	4639      	mov	r1, r7
 800e468:	4622      	mov	r2, r4
 800e46a:	4630      	mov	r0, r6
 800e46c:	f7ff ff1a 	bl	800e2a4 <__multiply>
 800e470:	4639      	mov	r1, r7
 800e472:	4680      	mov	r8, r0
 800e474:	4630      	mov	r0, r6
 800e476:	f7ff fe47 	bl	800e108 <_Bfree>
 800e47a:	4647      	mov	r7, r8
 800e47c:	106d      	asrs	r5, r5, #1
 800e47e:	d00b      	beq.n	800e498 <__pow5mult+0xa0>
 800e480:	6820      	ldr	r0, [r4, #0]
 800e482:	b938      	cbnz	r0, 800e494 <__pow5mult+0x9c>
 800e484:	4622      	mov	r2, r4
 800e486:	4621      	mov	r1, r4
 800e488:	4630      	mov	r0, r6
 800e48a:	f7ff ff0b 	bl	800e2a4 <__multiply>
 800e48e:	6020      	str	r0, [r4, #0]
 800e490:	f8c0 9000 	str.w	r9, [r0]
 800e494:	4604      	mov	r4, r0
 800e496:	e7e4      	b.n	800e462 <__pow5mult+0x6a>
 800e498:	4638      	mov	r0, r7
 800e49a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e49e:	bf00      	nop
 800e4a0:	0800f788 	.word	0x0800f788
 800e4a4:	0800f557 	.word	0x0800f557
 800e4a8:	0800f63c 	.word	0x0800f63c

0800e4ac <__lshift>:
 800e4ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4b0:	460c      	mov	r4, r1
 800e4b2:	6849      	ldr	r1, [r1, #4]
 800e4b4:	6923      	ldr	r3, [r4, #16]
 800e4b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e4ba:	68a3      	ldr	r3, [r4, #8]
 800e4bc:	4607      	mov	r7, r0
 800e4be:	4691      	mov	r9, r2
 800e4c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e4c4:	f108 0601 	add.w	r6, r8, #1
 800e4c8:	42b3      	cmp	r3, r6
 800e4ca:	db0b      	blt.n	800e4e4 <__lshift+0x38>
 800e4cc:	4638      	mov	r0, r7
 800e4ce:	f7ff fddb 	bl	800e088 <_Balloc>
 800e4d2:	4605      	mov	r5, r0
 800e4d4:	b948      	cbnz	r0, 800e4ea <__lshift+0x3e>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	4b2a      	ldr	r3, [pc, #168]	; (800e584 <__lshift+0xd8>)
 800e4da:	482b      	ldr	r0, [pc, #172]	; (800e588 <__lshift+0xdc>)
 800e4dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e4e0:	f7fd fc8a 	bl	800bdf8 <__assert_func>
 800e4e4:	3101      	adds	r1, #1
 800e4e6:	005b      	lsls	r3, r3, #1
 800e4e8:	e7ee      	b.n	800e4c8 <__lshift+0x1c>
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	f100 0114 	add.w	r1, r0, #20
 800e4f0:	f100 0210 	add.w	r2, r0, #16
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	4553      	cmp	r3, sl
 800e4f8:	db37      	blt.n	800e56a <__lshift+0xbe>
 800e4fa:	6920      	ldr	r0, [r4, #16]
 800e4fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e500:	f104 0314 	add.w	r3, r4, #20
 800e504:	f019 091f 	ands.w	r9, r9, #31
 800e508:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e50c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e510:	d02f      	beq.n	800e572 <__lshift+0xc6>
 800e512:	f1c9 0e20 	rsb	lr, r9, #32
 800e516:	468a      	mov	sl, r1
 800e518:	f04f 0c00 	mov.w	ip, #0
 800e51c:	681a      	ldr	r2, [r3, #0]
 800e51e:	fa02 f209 	lsl.w	r2, r2, r9
 800e522:	ea42 020c 	orr.w	r2, r2, ip
 800e526:	f84a 2b04 	str.w	r2, [sl], #4
 800e52a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e52e:	4298      	cmp	r0, r3
 800e530:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e534:	d8f2      	bhi.n	800e51c <__lshift+0x70>
 800e536:	1b03      	subs	r3, r0, r4
 800e538:	3b15      	subs	r3, #21
 800e53a:	f023 0303 	bic.w	r3, r3, #3
 800e53e:	3304      	adds	r3, #4
 800e540:	f104 0215 	add.w	r2, r4, #21
 800e544:	4290      	cmp	r0, r2
 800e546:	bf38      	it	cc
 800e548:	2304      	movcc	r3, #4
 800e54a:	f841 c003 	str.w	ip, [r1, r3]
 800e54e:	f1bc 0f00 	cmp.w	ip, #0
 800e552:	d001      	beq.n	800e558 <__lshift+0xac>
 800e554:	f108 0602 	add.w	r6, r8, #2
 800e558:	3e01      	subs	r6, #1
 800e55a:	4638      	mov	r0, r7
 800e55c:	612e      	str	r6, [r5, #16]
 800e55e:	4621      	mov	r1, r4
 800e560:	f7ff fdd2 	bl	800e108 <_Bfree>
 800e564:	4628      	mov	r0, r5
 800e566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e56e:	3301      	adds	r3, #1
 800e570:	e7c1      	b.n	800e4f6 <__lshift+0x4a>
 800e572:	3904      	subs	r1, #4
 800e574:	f853 2b04 	ldr.w	r2, [r3], #4
 800e578:	f841 2f04 	str.w	r2, [r1, #4]!
 800e57c:	4298      	cmp	r0, r3
 800e57e:	d8f9      	bhi.n	800e574 <__lshift+0xc8>
 800e580:	e7ea      	b.n	800e558 <__lshift+0xac>
 800e582:	bf00      	nop
 800e584:	0800f5c9 	.word	0x0800f5c9
 800e588:	0800f63c 	.word	0x0800f63c

0800e58c <__mcmp>:
 800e58c:	b530      	push	{r4, r5, lr}
 800e58e:	6902      	ldr	r2, [r0, #16]
 800e590:	690c      	ldr	r4, [r1, #16]
 800e592:	1b12      	subs	r2, r2, r4
 800e594:	d10e      	bne.n	800e5b4 <__mcmp+0x28>
 800e596:	f100 0314 	add.w	r3, r0, #20
 800e59a:	3114      	adds	r1, #20
 800e59c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e5a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e5a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e5a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e5ac:	42a5      	cmp	r5, r4
 800e5ae:	d003      	beq.n	800e5b8 <__mcmp+0x2c>
 800e5b0:	d305      	bcc.n	800e5be <__mcmp+0x32>
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	bd30      	pop	{r4, r5, pc}
 800e5b8:	4283      	cmp	r3, r0
 800e5ba:	d3f3      	bcc.n	800e5a4 <__mcmp+0x18>
 800e5bc:	e7fa      	b.n	800e5b4 <__mcmp+0x28>
 800e5be:	f04f 32ff 	mov.w	r2, #4294967295
 800e5c2:	e7f7      	b.n	800e5b4 <__mcmp+0x28>

0800e5c4 <__mdiff>:
 800e5c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c8:	460c      	mov	r4, r1
 800e5ca:	4606      	mov	r6, r0
 800e5cc:	4611      	mov	r1, r2
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	4690      	mov	r8, r2
 800e5d2:	f7ff ffdb 	bl	800e58c <__mcmp>
 800e5d6:	1e05      	subs	r5, r0, #0
 800e5d8:	d110      	bne.n	800e5fc <__mdiff+0x38>
 800e5da:	4629      	mov	r1, r5
 800e5dc:	4630      	mov	r0, r6
 800e5de:	f7ff fd53 	bl	800e088 <_Balloc>
 800e5e2:	b930      	cbnz	r0, 800e5f2 <__mdiff+0x2e>
 800e5e4:	4b3a      	ldr	r3, [pc, #232]	; (800e6d0 <__mdiff+0x10c>)
 800e5e6:	4602      	mov	r2, r0
 800e5e8:	f240 2132 	movw	r1, #562	; 0x232
 800e5ec:	4839      	ldr	r0, [pc, #228]	; (800e6d4 <__mdiff+0x110>)
 800e5ee:	f7fd fc03 	bl	800bdf8 <__assert_func>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e5f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5fc:	bfa4      	itt	ge
 800e5fe:	4643      	movge	r3, r8
 800e600:	46a0      	movge	r8, r4
 800e602:	4630      	mov	r0, r6
 800e604:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e608:	bfa6      	itte	ge
 800e60a:	461c      	movge	r4, r3
 800e60c:	2500      	movge	r5, #0
 800e60e:	2501      	movlt	r5, #1
 800e610:	f7ff fd3a 	bl	800e088 <_Balloc>
 800e614:	b920      	cbnz	r0, 800e620 <__mdiff+0x5c>
 800e616:	4b2e      	ldr	r3, [pc, #184]	; (800e6d0 <__mdiff+0x10c>)
 800e618:	4602      	mov	r2, r0
 800e61a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e61e:	e7e5      	b.n	800e5ec <__mdiff+0x28>
 800e620:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e624:	6926      	ldr	r6, [r4, #16]
 800e626:	60c5      	str	r5, [r0, #12]
 800e628:	f104 0914 	add.w	r9, r4, #20
 800e62c:	f108 0514 	add.w	r5, r8, #20
 800e630:	f100 0e14 	add.w	lr, r0, #20
 800e634:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e638:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e63c:	f108 0210 	add.w	r2, r8, #16
 800e640:	46f2      	mov	sl, lr
 800e642:	2100      	movs	r1, #0
 800e644:	f859 3b04 	ldr.w	r3, [r9], #4
 800e648:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e64c:	fa1f f883 	uxth.w	r8, r3
 800e650:	fa11 f18b 	uxtah	r1, r1, fp
 800e654:	0c1b      	lsrs	r3, r3, #16
 800e656:	eba1 0808 	sub.w	r8, r1, r8
 800e65a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e65e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e662:	fa1f f888 	uxth.w	r8, r8
 800e666:	1419      	asrs	r1, r3, #16
 800e668:	454e      	cmp	r6, r9
 800e66a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e66e:	f84a 3b04 	str.w	r3, [sl], #4
 800e672:	d8e7      	bhi.n	800e644 <__mdiff+0x80>
 800e674:	1b33      	subs	r3, r6, r4
 800e676:	3b15      	subs	r3, #21
 800e678:	f023 0303 	bic.w	r3, r3, #3
 800e67c:	3304      	adds	r3, #4
 800e67e:	3415      	adds	r4, #21
 800e680:	42a6      	cmp	r6, r4
 800e682:	bf38      	it	cc
 800e684:	2304      	movcc	r3, #4
 800e686:	441d      	add	r5, r3
 800e688:	4473      	add	r3, lr
 800e68a:	469e      	mov	lr, r3
 800e68c:	462e      	mov	r6, r5
 800e68e:	4566      	cmp	r6, ip
 800e690:	d30e      	bcc.n	800e6b0 <__mdiff+0xec>
 800e692:	f10c 0203 	add.w	r2, ip, #3
 800e696:	1b52      	subs	r2, r2, r5
 800e698:	f022 0203 	bic.w	r2, r2, #3
 800e69c:	3d03      	subs	r5, #3
 800e69e:	45ac      	cmp	ip, r5
 800e6a0:	bf38      	it	cc
 800e6a2:	2200      	movcc	r2, #0
 800e6a4:	441a      	add	r2, r3
 800e6a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e6aa:	b17b      	cbz	r3, 800e6cc <__mdiff+0x108>
 800e6ac:	6107      	str	r7, [r0, #16]
 800e6ae:	e7a3      	b.n	800e5f8 <__mdiff+0x34>
 800e6b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e6b4:	fa11 f288 	uxtah	r2, r1, r8
 800e6b8:	1414      	asrs	r4, r2, #16
 800e6ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e6be:	b292      	uxth	r2, r2
 800e6c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e6c4:	f84e 2b04 	str.w	r2, [lr], #4
 800e6c8:	1421      	asrs	r1, r4, #16
 800e6ca:	e7e0      	b.n	800e68e <__mdiff+0xca>
 800e6cc:	3f01      	subs	r7, #1
 800e6ce:	e7ea      	b.n	800e6a6 <__mdiff+0xe2>
 800e6d0:	0800f5c9 	.word	0x0800f5c9
 800e6d4:	0800f63c 	.word	0x0800f63c

0800e6d8 <__d2b>:
 800e6d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6dc:	4689      	mov	r9, r1
 800e6de:	2101      	movs	r1, #1
 800e6e0:	ec57 6b10 	vmov	r6, r7, d0
 800e6e4:	4690      	mov	r8, r2
 800e6e6:	f7ff fccf 	bl	800e088 <_Balloc>
 800e6ea:	4604      	mov	r4, r0
 800e6ec:	b930      	cbnz	r0, 800e6fc <__d2b+0x24>
 800e6ee:	4602      	mov	r2, r0
 800e6f0:	4b25      	ldr	r3, [pc, #148]	; (800e788 <__d2b+0xb0>)
 800e6f2:	4826      	ldr	r0, [pc, #152]	; (800e78c <__d2b+0xb4>)
 800e6f4:	f240 310a 	movw	r1, #778	; 0x30a
 800e6f8:	f7fd fb7e 	bl	800bdf8 <__assert_func>
 800e6fc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e700:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e704:	bb35      	cbnz	r5, 800e754 <__d2b+0x7c>
 800e706:	2e00      	cmp	r6, #0
 800e708:	9301      	str	r3, [sp, #4]
 800e70a:	d028      	beq.n	800e75e <__d2b+0x86>
 800e70c:	4668      	mov	r0, sp
 800e70e:	9600      	str	r6, [sp, #0]
 800e710:	f7ff fd82 	bl	800e218 <__lo0bits>
 800e714:	9900      	ldr	r1, [sp, #0]
 800e716:	b300      	cbz	r0, 800e75a <__d2b+0x82>
 800e718:	9a01      	ldr	r2, [sp, #4]
 800e71a:	f1c0 0320 	rsb	r3, r0, #32
 800e71e:	fa02 f303 	lsl.w	r3, r2, r3
 800e722:	430b      	orrs	r3, r1
 800e724:	40c2      	lsrs	r2, r0
 800e726:	6163      	str	r3, [r4, #20]
 800e728:	9201      	str	r2, [sp, #4]
 800e72a:	9b01      	ldr	r3, [sp, #4]
 800e72c:	61a3      	str	r3, [r4, #24]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	bf14      	ite	ne
 800e732:	2202      	movne	r2, #2
 800e734:	2201      	moveq	r2, #1
 800e736:	6122      	str	r2, [r4, #16]
 800e738:	b1d5      	cbz	r5, 800e770 <__d2b+0x98>
 800e73a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e73e:	4405      	add	r5, r0
 800e740:	f8c9 5000 	str.w	r5, [r9]
 800e744:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e748:	f8c8 0000 	str.w	r0, [r8]
 800e74c:	4620      	mov	r0, r4
 800e74e:	b003      	add	sp, #12
 800e750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e758:	e7d5      	b.n	800e706 <__d2b+0x2e>
 800e75a:	6161      	str	r1, [r4, #20]
 800e75c:	e7e5      	b.n	800e72a <__d2b+0x52>
 800e75e:	a801      	add	r0, sp, #4
 800e760:	f7ff fd5a 	bl	800e218 <__lo0bits>
 800e764:	9b01      	ldr	r3, [sp, #4]
 800e766:	6163      	str	r3, [r4, #20]
 800e768:	2201      	movs	r2, #1
 800e76a:	6122      	str	r2, [r4, #16]
 800e76c:	3020      	adds	r0, #32
 800e76e:	e7e3      	b.n	800e738 <__d2b+0x60>
 800e770:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e774:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e778:	f8c9 0000 	str.w	r0, [r9]
 800e77c:	6918      	ldr	r0, [r3, #16]
 800e77e:	f7ff fd2b 	bl	800e1d8 <__hi0bits>
 800e782:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e786:	e7df      	b.n	800e748 <__d2b+0x70>
 800e788:	0800f5c9 	.word	0x0800f5c9
 800e78c:	0800f63c 	.word	0x0800f63c

0800e790 <_calloc_r>:
 800e790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e792:	fba1 2402 	umull	r2, r4, r1, r2
 800e796:	b94c      	cbnz	r4, 800e7ac <_calloc_r+0x1c>
 800e798:	4611      	mov	r1, r2
 800e79a:	9201      	str	r2, [sp, #4]
 800e79c:	f000 f87a 	bl	800e894 <_malloc_r>
 800e7a0:	9a01      	ldr	r2, [sp, #4]
 800e7a2:	4605      	mov	r5, r0
 800e7a4:	b930      	cbnz	r0, 800e7b4 <_calloc_r+0x24>
 800e7a6:	4628      	mov	r0, r5
 800e7a8:	b003      	add	sp, #12
 800e7aa:	bd30      	pop	{r4, r5, pc}
 800e7ac:	220c      	movs	r2, #12
 800e7ae:	6002      	str	r2, [r0, #0]
 800e7b0:	2500      	movs	r5, #0
 800e7b2:	e7f8      	b.n	800e7a6 <_calloc_r+0x16>
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	f7fd fb8b 	bl	800bed0 <memset>
 800e7ba:	e7f4      	b.n	800e7a6 <_calloc_r+0x16>

0800e7bc <_free_r>:
 800e7bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e7be:	2900      	cmp	r1, #0
 800e7c0:	d044      	beq.n	800e84c <_free_r+0x90>
 800e7c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7c6:	9001      	str	r0, [sp, #4]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	f1a1 0404 	sub.w	r4, r1, #4
 800e7ce:	bfb8      	it	lt
 800e7d0:	18e4      	addlt	r4, r4, r3
 800e7d2:	f000 fb5d 	bl	800ee90 <__malloc_lock>
 800e7d6:	4a1e      	ldr	r2, [pc, #120]	; (800e850 <_free_r+0x94>)
 800e7d8:	9801      	ldr	r0, [sp, #4]
 800e7da:	6813      	ldr	r3, [r2, #0]
 800e7dc:	b933      	cbnz	r3, 800e7ec <_free_r+0x30>
 800e7de:	6063      	str	r3, [r4, #4]
 800e7e0:	6014      	str	r4, [r2, #0]
 800e7e2:	b003      	add	sp, #12
 800e7e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e7e8:	f000 bb58 	b.w	800ee9c <__malloc_unlock>
 800e7ec:	42a3      	cmp	r3, r4
 800e7ee:	d908      	bls.n	800e802 <_free_r+0x46>
 800e7f0:	6825      	ldr	r5, [r4, #0]
 800e7f2:	1961      	adds	r1, r4, r5
 800e7f4:	428b      	cmp	r3, r1
 800e7f6:	bf01      	itttt	eq
 800e7f8:	6819      	ldreq	r1, [r3, #0]
 800e7fa:	685b      	ldreq	r3, [r3, #4]
 800e7fc:	1949      	addeq	r1, r1, r5
 800e7fe:	6021      	streq	r1, [r4, #0]
 800e800:	e7ed      	b.n	800e7de <_free_r+0x22>
 800e802:	461a      	mov	r2, r3
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	b10b      	cbz	r3, 800e80c <_free_r+0x50>
 800e808:	42a3      	cmp	r3, r4
 800e80a:	d9fa      	bls.n	800e802 <_free_r+0x46>
 800e80c:	6811      	ldr	r1, [r2, #0]
 800e80e:	1855      	adds	r5, r2, r1
 800e810:	42a5      	cmp	r5, r4
 800e812:	d10b      	bne.n	800e82c <_free_r+0x70>
 800e814:	6824      	ldr	r4, [r4, #0]
 800e816:	4421      	add	r1, r4
 800e818:	1854      	adds	r4, r2, r1
 800e81a:	42a3      	cmp	r3, r4
 800e81c:	6011      	str	r1, [r2, #0]
 800e81e:	d1e0      	bne.n	800e7e2 <_free_r+0x26>
 800e820:	681c      	ldr	r4, [r3, #0]
 800e822:	685b      	ldr	r3, [r3, #4]
 800e824:	6053      	str	r3, [r2, #4]
 800e826:	4421      	add	r1, r4
 800e828:	6011      	str	r1, [r2, #0]
 800e82a:	e7da      	b.n	800e7e2 <_free_r+0x26>
 800e82c:	d902      	bls.n	800e834 <_free_r+0x78>
 800e82e:	230c      	movs	r3, #12
 800e830:	6003      	str	r3, [r0, #0]
 800e832:	e7d6      	b.n	800e7e2 <_free_r+0x26>
 800e834:	6825      	ldr	r5, [r4, #0]
 800e836:	1961      	adds	r1, r4, r5
 800e838:	428b      	cmp	r3, r1
 800e83a:	bf04      	itt	eq
 800e83c:	6819      	ldreq	r1, [r3, #0]
 800e83e:	685b      	ldreq	r3, [r3, #4]
 800e840:	6063      	str	r3, [r4, #4]
 800e842:	bf04      	itt	eq
 800e844:	1949      	addeq	r1, r1, r5
 800e846:	6021      	streq	r1, [r4, #0]
 800e848:	6054      	str	r4, [r2, #4]
 800e84a:	e7ca      	b.n	800e7e2 <_free_r+0x26>
 800e84c:	b003      	add	sp, #12
 800e84e:	bd30      	pop	{r4, r5, pc}
 800e850:	20000798 	.word	0x20000798

0800e854 <sbrk_aligned>:
 800e854:	b570      	push	{r4, r5, r6, lr}
 800e856:	4e0e      	ldr	r6, [pc, #56]	; (800e890 <sbrk_aligned+0x3c>)
 800e858:	460c      	mov	r4, r1
 800e85a:	6831      	ldr	r1, [r6, #0]
 800e85c:	4605      	mov	r5, r0
 800e85e:	b911      	cbnz	r1, 800e866 <sbrk_aligned+0x12>
 800e860:	f000 fa16 	bl	800ec90 <_sbrk_r>
 800e864:	6030      	str	r0, [r6, #0]
 800e866:	4621      	mov	r1, r4
 800e868:	4628      	mov	r0, r5
 800e86a:	f000 fa11 	bl	800ec90 <_sbrk_r>
 800e86e:	1c43      	adds	r3, r0, #1
 800e870:	d00a      	beq.n	800e888 <sbrk_aligned+0x34>
 800e872:	1cc4      	adds	r4, r0, #3
 800e874:	f024 0403 	bic.w	r4, r4, #3
 800e878:	42a0      	cmp	r0, r4
 800e87a:	d007      	beq.n	800e88c <sbrk_aligned+0x38>
 800e87c:	1a21      	subs	r1, r4, r0
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 fa06 	bl	800ec90 <_sbrk_r>
 800e884:	3001      	adds	r0, #1
 800e886:	d101      	bne.n	800e88c <sbrk_aligned+0x38>
 800e888:	f04f 34ff 	mov.w	r4, #4294967295
 800e88c:	4620      	mov	r0, r4
 800e88e:	bd70      	pop	{r4, r5, r6, pc}
 800e890:	2000079c 	.word	0x2000079c

0800e894 <_malloc_r>:
 800e894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e898:	1ccd      	adds	r5, r1, #3
 800e89a:	f025 0503 	bic.w	r5, r5, #3
 800e89e:	3508      	adds	r5, #8
 800e8a0:	2d0c      	cmp	r5, #12
 800e8a2:	bf38      	it	cc
 800e8a4:	250c      	movcc	r5, #12
 800e8a6:	2d00      	cmp	r5, #0
 800e8a8:	4607      	mov	r7, r0
 800e8aa:	db01      	blt.n	800e8b0 <_malloc_r+0x1c>
 800e8ac:	42a9      	cmp	r1, r5
 800e8ae:	d905      	bls.n	800e8bc <_malloc_r+0x28>
 800e8b0:	230c      	movs	r3, #12
 800e8b2:	603b      	str	r3, [r7, #0]
 800e8b4:	2600      	movs	r6, #0
 800e8b6:	4630      	mov	r0, r6
 800e8b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8bc:	4e2e      	ldr	r6, [pc, #184]	; (800e978 <_malloc_r+0xe4>)
 800e8be:	f000 fae7 	bl	800ee90 <__malloc_lock>
 800e8c2:	6833      	ldr	r3, [r6, #0]
 800e8c4:	461c      	mov	r4, r3
 800e8c6:	bb34      	cbnz	r4, 800e916 <_malloc_r+0x82>
 800e8c8:	4629      	mov	r1, r5
 800e8ca:	4638      	mov	r0, r7
 800e8cc:	f7ff ffc2 	bl	800e854 <sbrk_aligned>
 800e8d0:	1c43      	adds	r3, r0, #1
 800e8d2:	4604      	mov	r4, r0
 800e8d4:	d14d      	bne.n	800e972 <_malloc_r+0xde>
 800e8d6:	6834      	ldr	r4, [r6, #0]
 800e8d8:	4626      	mov	r6, r4
 800e8da:	2e00      	cmp	r6, #0
 800e8dc:	d140      	bne.n	800e960 <_malloc_r+0xcc>
 800e8de:	6823      	ldr	r3, [r4, #0]
 800e8e0:	4631      	mov	r1, r6
 800e8e2:	4638      	mov	r0, r7
 800e8e4:	eb04 0803 	add.w	r8, r4, r3
 800e8e8:	f000 f9d2 	bl	800ec90 <_sbrk_r>
 800e8ec:	4580      	cmp	r8, r0
 800e8ee:	d13a      	bne.n	800e966 <_malloc_r+0xd2>
 800e8f0:	6821      	ldr	r1, [r4, #0]
 800e8f2:	3503      	adds	r5, #3
 800e8f4:	1a6d      	subs	r5, r5, r1
 800e8f6:	f025 0503 	bic.w	r5, r5, #3
 800e8fa:	3508      	adds	r5, #8
 800e8fc:	2d0c      	cmp	r5, #12
 800e8fe:	bf38      	it	cc
 800e900:	250c      	movcc	r5, #12
 800e902:	4629      	mov	r1, r5
 800e904:	4638      	mov	r0, r7
 800e906:	f7ff ffa5 	bl	800e854 <sbrk_aligned>
 800e90a:	3001      	adds	r0, #1
 800e90c:	d02b      	beq.n	800e966 <_malloc_r+0xd2>
 800e90e:	6823      	ldr	r3, [r4, #0]
 800e910:	442b      	add	r3, r5
 800e912:	6023      	str	r3, [r4, #0]
 800e914:	e00e      	b.n	800e934 <_malloc_r+0xa0>
 800e916:	6822      	ldr	r2, [r4, #0]
 800e918:	1b52      	subs	r2, r2, r5
 800e91a:	d41e      	bmi.n	800e95a <_malloc_r+0xc6>
 800e91c:	2a0b      	cmp	r2, #11
 800e91e:	d916      	bls.n	800e94e <_malloc_r+0xba>
 800e920:	1961      	adds	r1, r4, r5
 800e922:	42a3      	cmp	r3, r4
 800e924:	6025      	str	r5, [r4, #0]
 800e926:	bf18      	it	ne
 800e928:	6059      	strne	r1, [r3, #4]
 800e92a:	6863      	ldr	r3, [r4, #4]
 800e92c:	bf08      	it	eq
 800e92e:	6031      	streq	r1, [r6, #0]
 800e930:	5162      	str	r2, [r4, r5]
 800e932:	604b      	str	r3, [r1, #4]
 800e934:	4638      	mov	r0, r7
 800e936:	f104 060b 	add.w	r6, r4, #11
 800e93a:	f000 faaf 	bl	800ee9c <__malloc_unlock>
 800e93e:	f026 0607 	bic.w	r6, r6, #7
 800e942:	1d23      	adds	r3, r4, #4
 800e944:	1af2      	subs	r2, r6, r3
 800e946:	d0b6      	beq.n	800e8b6 <_malloc_r+0x22>
 800e948:	1b9b      	subs	r3, r3, r6
 800e94a:	50a3      	str	r3, [r4, r2]
 800e94c:	e7b3      	b.n	800e8b6 <_malloc_r+0x22>
 800e94e:	6862      	ldr	r2, [r4, #4]
 800e950:	42a3      	cmp	r3, r4
 800e952:	bf0c      	ite	eq
 800e954:	6032      	streq	r2, [r6, #0]
 800e956:	605a      	strne	r2, [r3, #4]
 800e958:	e7ec      	b.n	800e934 <_malloc_r+0xa0>
 800e95a:	4623      	mov	r3, r4
 800e95c:	6864      	ldr	r4, [r4, #4]
 800e95e:	e7b2      	b.n	800e8c6 <_malloc_r+0x32>
 800e960:	4634      	mov	r4, r6
 800e962:	6876      	ldr	r6, [r6, #4]
 800e964:	e7b9      	b.n	800e8da <_malloc_r+0x46>
 800e966:	230c      	movs	r3, #12
 800e968:	603b      	str	r3, [r7, #0]
 800e96a:	4638      	mov	r0, r7
 800e96c:	f000 fa96 	bl	800ee9c <__malloc_unlock>
 800e970:	e7a1      	b.n	800e8b6 <_malloc_r+0x22>
 800e972:	6025      	str	r5, [r4, #0]
 800e974:	e7de      	b.n	800e934 <_malloc_r+0xa0>
 800e976:	bf00      	nop
 800e978:	20000798 	.word	0x20000798

0800e97c <_realloc_r>:
 800e97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e980:	4680      	mov	r8, r0
 800e982:	4614      	mov	r4, r2
 800e984:	460e      	mov	r6, r1
 800e986:	b921      	cbnz	r1, 800e992 <_realloc_r+0x16>
 800e988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e98c:	4611      	mov	r1, r2
 800e98e:	f7ff bf81 	b.w	800e894 <_malloc_r>
 800e992:	b92a      	cbnz	r2, 800e9a0 <_realloc_r+0x24>
 800e994:	f7ff ff12 	bl	800e7bc <_free_r>
 800e998:	4625      	mov	r5, r4
 800e99a:	4628      	mov	r0, r5
 800e99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9a0:	f000 fa82 	bl	800eea8 <_malloc_usable_size_r>
 800e9a4:	4284      	cmp	r4, r0
 800e9a6:	4607      	mov	r7, r0
 800e9a8:	d802      	bhi.n	800e9b0 <_realloc_r+0x34>
 800e9aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9ae:	d812      	bhi.n	800e9d6 <_realloc_r+0x5a>
 800e9b0:	4621      	mov	r1, r4
 800e9b2:	4640      	mov	r0, r8
 800e9b4:	f7ff ff6e 	bl	800e894 <_malloc_r>
 800e9b8:	4605      	mov	r5, r0
 800e9ba:	2800      	cmp	r0, #0
 800e9bc:	d0ed      	beq.n	800e99a <_realloc_r+0x1e>
 800e9be:	42bc      	cmp	r4, r7
 800e9c0:	4622      	mov	r2, r4
 800e9c2:	4631      	mov	r1, r6
 800e9c4:	bf28      	it	cs
 800e9c6:	463a      	movcs	r2, r7
 800e9c8:	f7fd fa74 	bl	800beb4 <memcpy>
 800e9cc:	4631      	mov	r1, r6
 800e9ce:	4640      	mov	r0, r8
 800e9d0:	f7ff fef4 	bl	800e7bc <_free_r>
 800e9d4:	e7e1      	b.n	800e99a <_realloc_r+0x1e>
 800e9d6:	4635      	mov	r5, r6
 800e9d8:	e7df      	b.n	800e99a <_realloc_r+0x1e>

0800e9da <__ssputs_r>:
 800e9da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9de:	688e      	ldr	r6, [r1, #8]
 800e9e0:	429e      	cmp	r6, r3
 800e9e2:	4682      	mov	sl, r0
 800e9e4:	460c      	mov	r4, r1
 800e9e6:	4690      	mov	r8, r2
 800e9e8:	461f      	mov	r7, r3
 800e9ea:	d838      	bhi.n	800ea5e <__ssputs_r+0x84>
 800e9ec:	898a      	ldrh	r2, [r1, #12]
 800e9ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e9f2:	d032      	beq.n	800ea5a <__ssputs_r+0x80>
 800e9f4:	6825      	ldr	r5, [r4, #0]
 800e9f6:	6909      	ldr	r1, [r1, #16]
 800e9f8:	eba5 0901 	sub.w	r9, r5, r1
 800e9fc:	6965      	ldr	r5, [r4, #20]
 800e9fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea06:	3301      	adds	r3, #1
 800ea08:	444b      	add	r3, r9
 800ea0a:	106d      	asrs	r5, r5, #1
 800ea0c:	429d      	cmp	r5, r3
 800ea0e:	bf38      	it	cc
 800ea10:	461d      	movcc	r5, r3
 800ea12:	0553      	lsls	r3, r2, #21
 800ea14:	d531      	bpl.n	800ea7a <__ssputs_r+0xa0>
 800ea16:	4629      	mov	r1, r5
 800ea18:	f7ff ff3c 	bl	800e894 <_malloc_r>
 800ea1c:	4606      	mov	r6, r0
 800ea1e:	b950      	cbnz	r0, 800ea36 <__ssputs_r+0x5c>
 800ea20:	230c      	movs	r3, #12
 800ea22:	f8ca 3000 	str.w	r3, [sl]
 800ea26:	89a3      	ldrh	r3, [r4, #12]
 800ea28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea2c:	81a3      	strh	r3, [r4, #12]
 800ea2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea36:	6921      	ldr	r1, [r4, #16]
 800ea38:	464a      	mov	r2, r9
 800ea3a:	f7fd fa3b 	bl	800beb4 <memcpy>
 800ea3e:	89a3      	ldrh	r3, [r4, #12]
 800ea40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	6126      	str	r6, [r4, #16]
 800ea4c:	6165      	str	r5, [r4, #20]
 800ea4e:	444e      	add	r6, r9
 800ea50:	eba5 0509 	sub.w	r5, r5, r9
 800ea54:	6026      	str	r6, [r4, #0]
 800ea56:	60a5      	str	r5, [r4, #8]
 800ea58:	463e      	mov	r6, r7
 800ea5a:	42be      	cmp	r6, r7
 800ea5c:	d900      	bls.n	800ea60 <__ssputs_r+0x86>
 800ea5e:	463e      	mov	r6, r7
 800ea60:	6820      	ldr	r0, [r4, #0]
 800ea62:	4632      	mov	r2, r6
 800ea64:	4641      	mov	r1, r8
 800ea66:	f7ff faf5 	bl	800e054 <memmove>
 800ea6a:	68a3      	ldr	r3, [r4, #8]
 800ea6c:	1b9b      	subs	r3, r3, r6
 800ea6e:	60a3      	str	r3, [r4, #8]
 800ea70:	6823      	ldr	r3, [r4, #0]
 800ea72:	4433      	add	r3, r6
 800ea74:	6023      	str	r3, [r4, #0]
 800ea76:	2000      	movs	r0, #0
 800ea78:	e7db      	b.n	800ea32 <__ssputs_r+0x58>
 800ea7a:	462a      	mov	r2, r5
 800ea7c:	f7ff ff7e 	bl	800e97c <_realloc_r>
 800ea80:	4606      	mov	r6, r0
 800ea82:	2800      	cmp	r0, #0
 800ea84:	d1e1      	bne.n	800ea4a <__ssputs_r+0x70>
 800ea86:	6921      	ldr	r1, [r4, #16]
 800ea88:	4650      	mov	r0, sl
 800ea8a:	f7ff fe97 	bl	800e7bc <_free_r>
 800ea8e:	e7c7      	b.n	800ea20 <__ssputs_r+0x46>

0800ea90 <_svfiprintf_r>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	4698      	mov	r8, r3
 800ea96:	898b      	ldrh	r3, [r1, #12]
 800ea98:	061b      	lsls	r3, r3, #24
 800ea9a:	b09d      	sub	sp, #116	; 0x74
 800ea9c:	4607      	mov	r7, r0
 800ea9e:	460d      	mov	r5, r1
 800eaa0:	4614      	mov	r4, r2
 800eaa2:	d50e      	bpl.n	800eac2 <_svfiprintf_r+0x32>
 800eaa4:	690b      	ldr	r3, [r1, #16]
 800eaa6:	b963      	cbnz	r3, 800eac2 <_svfiprintf_r+0x32>
 800eaa8:	2140      	movs	r1, #64	; 0x40
 800eaaa:	f7ff fef3 	bl	800e894 <_malloc_r>
 800eaae:	6028      	str	r0, [r5, #0]
 800eab0:	6128      	str	r0, [r5, #16]
 800eab2:	b920      	cbnz	r0, 800eabe <_svfiprintf_r+0x2e>
 800eab4:	230c      	movs	r3, #12
 800eab6:	603b      	str	r3, [r7, #0]
 800eab8:	f04f 30ff 	mov.w	r0, #4294967295
 800eabc:	e0d1      	b.n	800ec62 <_svfiprintf_r+0x1d2>
 800eabe:	2340      	movs	r3, #64	; 0x40
 800eac0:	616b      	str	r3, [r5, #20]
 800eac2:	2300      	movs	r3, #0
 800eac4:	9309      	str	r3, [sp, #36]	; 0x24
 800eac6:	2320      	movs	r3, #32
 800eac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eacc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ead0:	2330      	movs	r3, #48	; 0x30
 800ead2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ec7c <_svfiprintf_r+0x1ec>
 800ead6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eada:	f04f 0901 	mov.w	r9, #1
 800eade:	4623      	mov	r3, r4
 800eae0:	469a      	mov	sl, r3
 800eae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eae6:	b10a      	cbz	r2, 800eaec <_svfiprintf_r+0x5c>
 800eae8:	2a25      	cmp	r2, #37	; 0x25
 800eaea:	d1f9      	bne.n	800eae0 <_svfiprintf_r+0x50>
 800eaec:	ebba 0b04 	subs.w	fp, sl, r4
 800eaf0:	d00b      	beq.n	800eb0a <_svfiprintf_r+0x7a>
 800eaf2:	465b      	mov	r3, fp
 800eaf4:	4622      	mov	r2, r4
 800eaf6:	4629      	mov	r1, r5
 800eaf8:	4638      	mov	r0, r7
 800eafa:	f7ff ff6e 	bl	800e9da <__ssputs_r>
 800eafe:	3001      	adds	r0, #1
 800eb00:	f000 80aa 	beq.w	800ec58 <_svfiprintf_r+0x1c8>
 800eb04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb06:	445a      	add	r2, fp
 800eb08:	9209      	str	r2, [sp, #36]	; 0x24
 800eb0a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 80a2 	beq.w	800ec58 <_svfiprintf_r+0x1c8>
 800eb14:	2300      	movs	r3, #0
 800eb16:	f04f 32ff 	mov.w	r2, #4294967295
 800eb1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb1e:	f10a 0a01 	add.w	sl, sl, #1
 800eb22:	9304      	str	r3, [sp, #16]
 800eb24:	9307      	str	r3, [sp, #28]
 800eb26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb2a:	931a      	str	r3, [sp, #104]	; 0x68
 800eb2c:	4654      	mov	r4, sl
 800eb2e:	2205      	movs	r2, #5
 800eb30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb34:	4851      	ldr	r0, [pc, #324]	; (800ec7c <_svfiprintf_r+0x1ec>)
 800eb36:	f7f1 fb53 	bl	80001e0 <memchr>
 800eb3a:	9a04      	ldr	r2, [sp, #16]
 800eb3c:	b9d8      	cbnz	r0, 800eb76 <_svfiprintf_r+0xe6>
 800eb3e:	06d0      	lsls	r0, r2, #27
 800eb40:	bf44      	itt	mi
 800eb42:	2320      	movmi	r3, #32
 800eb44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb48:	0711      	lsls	r1, r2, #28
 800eb4a:	bf44      	itt	mi
 800eb4c:	232b      	movmi	r3, #43	; 0x2b
 800eb4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb52:	f89a 3000 	ldrb.w	r3, [sl]
 800eb56:	2b2a      	cmp	r3, #42	; 0x2a
 800eb58:	d015      	beq.n	800eb86 <_svfiprintf_r+0xf6>
 800eb5a:	9a07      	ldr	r2, [sp, #28]
 800eb5c:	4654      	mov	r4, sl
 800eb5e:	2000      	movs	r0, #0
 800eb60:	f04f 0c0a 	mov.w	ip, #10
 800eb64:	4621      	mov	r1, r4
 800eb66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb6a:	3b30      	subs	r3, #48	; 0x30
 800eb6c:	2b09      	cmp	r3, #9
 800eb6e:	d94e      	bls.n	800ec0e <_svfiprintf_r+0x17e>
 800eb70:	b1b0      	cbz	r0, 800eba0 <_svfiprintf_r+0x110>
 800eb72:	9207      	str	r2, [sp, #28]
 800eb74:	e014      	b.n	800eba0 <_svfiprintf_r+0x110>
 800eb76:	eba0 0308 	sub.w	r3, r0, r8
 800eb7a:	fa09 f303 	lsl.w	r3, r9, r3
 800eb7e:	4313      	orrs	r3, r2
 800eb80:	9304      	str	r3, [sp, #16]
 800eb82:	46a2      	mov	sl, r4
 800eb84:	e7d2      	b.n	800eb2c <_svfiprintf_r+0x9c>
 800eb86:	9b03      	ldr	r3, [sp, #12]
 800eb88:	1d19      	adds	r1, r3, #4
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	9103      	str	r1, [sp, #12]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	bfbb      	ittet	lt
 800eb92:	425b      	neglt	r3, r3
 800eb94:	f042 0202 	orrlt.w	r2, r2, #2
 800eb98:	9307      	strge	r3, [sp, #28]
 800eb9a:	9307      	strlt	r3, [sp, #28]
 800eb9c:	bfb8      	it	lt
 800eb9e:	9204      	strlt	r2, [sp, #16]
 800eba0:	7823      	ldrb	r3, [r4, #0]
 800eba2:	2b2e      	cmp	r3, #46	; 0x2e
 800eba4:	d10c      	bne.n	800ebc0 <_svfiprintf_r+0x130>
 800eba6:	7863      	ldrb	r3, [r4, #1]
 800eba8:	2b2a      	cmp	r3, #42	; 0x2a
 800ebaa:	d135      	bne.n	800ec18 <_svfiprintf_r+0x188>
 800ebac:	9b03      	ldr	r3, [sp, #12]
 800ebae:	1d1a      	adds	r2, r3, #4
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	9203      	str	r2, [sp, #12]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	bfb8      	it	lt
 800ebb8:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebbc:	3402      	adds	r4, #2
 800ebbe:	9305      	str	r3, [sp, #20]
 800ebc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ec8c <_svfiprintf_r+0x1fc>
 800ebc4:	7821      	ldrb	r1, [r4, #0]
 800ebc6:	2203      	movs	r2, #3
 800ebc8:	4650      	mov	r0, sl
 800ebca:	f7f1 fb09 	bl	80001e0 <memchr>
 800ebce:	b140      	cbz	r0, 800ebe2 <_svfiprintf_r+0x152>
 800ebd0:	2340      	movs	r3, #64	; 0x40
 800ebd2:	eba0 000a 	sub.w	r0, r0, sl
 800ebd6:	fa03 f000 	lsl.w	r0, r3, r0
 800ebda:	9b04      	ldr	r3, [sp, #16]
 800ebdc:	4303      	orrs	r3, r0
 800ebde:	3401      	adds	r4, #1
 800ebe0:	9304      	str	r3, [sp, #16]
 800ebe2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebe6:	4826      	ldr	r0, [pc, #152]	; (800ec80 <_svfiprintf_r+0x1f0>)
 800ebe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ebec:	2206      	movs	r2, #6
 800ebee:	f7f1 faf7 	bl	80001e0 <memchr>
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d038      	beq.n	800ec68 <_svfiprintf_r+0x1d8>
 800ebf6:	4b23      	ldr	r3, [pc, #140]	; (800ec84 <_svfiprintf_r+0x1f4>)
 800ebf8:	bb1b      	cbnz	r3, 800ec42 <_svfiprintf_r+0x1b2>
 800ebfa:	9b03      	ldr	r3, [sp, #12]
 800ebfc:	3307      	adds	r3, #7
 800ebfe:	f023 0307 	bic.w	r3, r3, #7
 800ec02:	3308      	adds	r3, #8
 800ec04:	9303      	str	r3, [sp, #12]
 800ec06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec08:	4433      	add	r3, r6
 800ec0a:	9309      	str	r3, [sp, #36]	; 0x24
 800ec0c:	e767      	b.n	800eade <_svfiprintf_r+0x4e>
 800ec0e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec12:	460c      	mov	r4, r1
 800ec14:	2001      	movs	r0, #1
 800ec16:	e7a5      	b.n	800eb64 <_svfiprintf_r+0xd4>
 800ec18:	2300      	movs	r3, #0
 800ec1a:	3401      	adds	r4, #1
 800ec1c:	9305      	str	r3, [sp, #20]
 800ec1e:	4619      	mov	r1, r3
 800ec20:	f04f 0c0a 	mov.w	ip, #10
 800ec24:	4620      	mov	r0, r4
 800ec26:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec2a:	3a30      	subs	r2, #48	; 0x30
 800ec2c:	2a09      	cmp	r2, #9
 800ec2e:	d903      	bls.n	800ec38 <_svfiprintf_r+0x1a8>
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d0c5      	beq.n	800ebc0 <_svfiprintf_r+0x130>
 800ec34:	9105      	str	r1, [sp, #20]
 800ec36:	e7c3      	b.n	800ebc0 <_svfiprintf_r+0x130>
 800ec38:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec3c:	4604      	mov	r4, r0
 800ec3e:	2301      	movs	r3, #1
 800ec40:	e7f0      	b.n	800ec24 <_svfiprintf_r+0x194>
 800ec42:	ab03      	add	r3, sp, #12
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	462a      	mov	r2, r5
 800ec48:	4b0f      	ldr	r3, [pc, #60]	; (800ec88 <_svfiprintf_r+0x1f8>)
 800ec4a:	a904      	add	r1, sp, #16
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f7fd fb41 	bl	800c2d4 <_printf_float>
 800ec52:	1c42      	adds	r2, r0, #1
 800ec54:	4606      	mov	r6, r0
 800ec56:	d1d6      	bne.n	800ec06 <_svfiprintf_r+0x176>
 800ec58:	89ab      	ldrh	r3, [r5, #12]
 800ec5a:	065b      	lsls	r3, r3, #25
 800ec5c:	f53f af2c 	bmi.w	800eab8 <_svfiprintf_r+0x28>
 800ec60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec62:	b01d      	add	sp, #116	; 0x74
 800ec64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec68:	ab03      	add	r3, sp, #12
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	462a      	mov	r2, r5
 800ec6e:	4b06      	ldr	r3, [pc, #24]	; (800ec88 <_svfiprintf_r+0x1f8>)
 800ec70:	a904      	add	r1, sp, #16
 800ec72:	4638      	mov	r0, r7
 800ec74:	f7fd fdd2 	bl	800c81c <_printf_i>
 800ec78:	e7eb      	b.n	800ec52 <_svfiprintf_r+0x1c2>
 800ec7a:	bf00      	nop
 800ec7c:	0800f404 	.word	0x0800f404
 800ec80:	0800f40e 	.word	0x0800f40e
 800ec84:	0800c2d5 	.word	0x0800c2d5
 800ec88:	0800e9db 	.word	0x0800e9db
 800ec8c:	0800f40a 	.word	0x0800f40a

0800ec90 <_sbrk_r>:
 800ec90:	b538      	push	{r3, r4, r5, lr}
 800ec92:	4d06      	ldr	r5, [pc, #24]	; (800ecac <_sbrk_r+0x1c>)
 800ec94:	2300      	movs	r3, #0
 800ec96:	4604      	mov	r4, r0
 800ec98:	4608      	mov	r0, r1
 800ec9a:	602b      	str	r3, [r5, #0]
 800ec9c:	f7f4 fe6e 	bl	800397c <_sbrk>
 800eca0:	1c43      	adds	r3, r0, #1
 800eca2:	d102      	bne.n	800ecaa <_sbrk_r+0x1a>
 800eca4:	682b      	ldr	r3, [r5, #0]
 800eca6:	b103      	cbz	r3, 800ecaa <_sbrk_r+0x1a>
 800eca8:	6023      	str	r3, [r4, #0]
 800ecaa:	bd38      	pop	{r3, r4, r5, pc}
 800ecac:	200007a0 	.word	0x200007a0

0800ecb0 <_raise_r>:
 800ecb0:	291f      	cmp	r1, #31
 800ecb2:	b538      	push	{r3, r4, r5, lr}
 800ecb4:	4604      	mov	r4, r0
 800ecb6:	460d      	mov	r5, r1
 800ecb8:	d904      	bls.n	800ecc4 <_raise_r+0x14>
 800ecba:	2316      	movs	r3, #22
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	f04f 30ff 	mov.w	r0, #4294967295
 800ecc2:	bd38      	pop	{r3, r4, r5, pc}
 800ecc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ecc6:	b112      	cbz	r2, 800ecce <_raise_r+0x1e>
 800ecc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eccc:	b94b      	cbnz	r3, 800ece2 <_raise_r+0x32>
 800ecce:	4620      	mov	r0, r4
 800ecd0:	f000 f830 	bl	800ed34 <_getpid_r>
 800ecd4:	462a      	mov	r2, r5
 800ecd6:	4601      	mov	r1, r0
 800ecd8:	4620      	mov	r0, r4
 800ecda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecde:	f000 b817 	b.w	800ed10 <_kill_r>
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d00a      	beq.n	800ecfc <_raise_r+0x4c>
 800ece6:	1c59      	adds	r1, r3, #1
 800ece8:	d103      	bne.n	800ecf2 <_raise_r+0x42>
 800ecea:	2316      	movs	r3, #22
 800ecec:	6003      	str	r3, [r0, #0]
 800ecee:	2001      	movs	r0, #1
 800ecf0:	e7e7      	b.n	800ecc2 <_raise_r+0x12>
 800ecf2:	2400      	movs	r4, #0
 800ecf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecf8:	4628      	mov	r0, r5
 800ecfa:	4798      	blx	r3
 800ecfc:	2000      	movs	r0, #0
 800ecfe:	e7e0      	b.n	800ecc2 <_raise_r+0x12>

0800ed00 <raise>:
 800ed00:	4b02      	ldr	r3, [pc, #8]	; (800ed0c <raise+0xc>)
 800ed02:	4601      	mov	r1, r0
 800ed04:	6818      	ldr	r0, [r3, #0]
 800ed06:	f7ff bfd3 	b.w	800ecb0 <_raise_r>
 800ed0a:	bf00      	nop
 800ed0c:	20000228 	.word	0x20000228

0800ed10 <_kill_r>:
 800ed10:	b538      	push	{r3, r4, r5, lr}
 800ed12:	4d07      	ldr	r5, [pc, #28]	; (800ed30 <_kill_r+0x20>)
 800ed14:	2300      	movs	r3, #0
 800ed16:	4604      	mov	r4, r0
 800ed18:	4608      	mov	r0, r1
 800ed1a:	4611      	mov	r1, r2
 800ed1c:	602b      	str	r3, [r5, #0]
 800ed1e:	f7f4 fda5 	bl	800386c <_kill>
 800ed22:	1c43      	adds	r3, r0, #1
 800ed24:	d102      	bne.n	800ed2c <_kill_r+0x1c>
 800ed26:	682b      	ldr	r3, [r5, #0]
 800ed28:	b103      	cbz	r3, 800ed2c <_kill_r+0x1c>
 800ed2a:	6023      	str	r3, [r4, #0]
 800ed2c:	bd38      	pop	{r3, r4, r5, pc}
 800ed2e:	bf00      	nop
 800ed30:	200007a0 	.word	0x200007a0

0800ed34 <_getpid_r>:
 800ed34:	f7f4 bd92 	b.w	800385c <_getpid>

0800ed38 <__sread>:
 800ed38:	b510      	push	{r4, lr}
 800ed3a:	460c      	mov	r4, r1
 800ed3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed40:	f000 f8ba 	bl	800eeb8 <_read_r>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	bfab      	itete	ge
 800ed48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ed4a:	89a3      	ldrhlt	r3, [r4, #12]
 800ed4c:	181b      	addge	r3, r3, r0
 800ed4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ed52:	bfac      	ite	ge
 800ed54:	6563      	strge	r3, [r4, #84]	; 0x54
 800ed56:	81a3      	strhlt	r3, [r4, #12]
 800ed58:	bd10      	pop	{r4, pc}

0800ed5a <__swrite>:
 800ed5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed5e:	461f      	mov	r7, r3
 800ed60:	898b      	ldrh	r3, [r1, #12]
 800ed62:	05db      	lsls	r3, r3, #23
 800ed64:	4605      	mov	r5, r0
 800ed66:	460c      	mov	r4, r1
 800ed68:	4616      	mov	r6, r2
 800ed6a:	d505      	bpl.n	800ed78 <__swrite+0x1e>
 800ed6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed70:	2302      	movs	r3, #2
 800ed72:	2200      	movs	r2, #0
 800ed74:	f000 f868 	bl	800ee48 <_lseek_r>
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ed82:	81a3      	strh	r3, [r4, #12]
 800ed84:	4632      	mov	r2, r6
 800ed86:	463b      	mov	r3, r7
 800ed88:	4628      	mov	r0, r5
 800ed8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed8e:	f000 b817 	b.w	800edc0 <_write_r>

0800ed92 <__sseek>:
 800ed92:	b510      	push	{r4, lr}
 800ed94:	460c      	mov	r4, r1
 800ed96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed9a:	f000 f855 	bl	800ee48 <_lseek_r>
 800ed9e:	1c43      	adds	r3, r0, #1
 800eda0:	89a3      	ldrh	r3, [r4, #12]
 800eda2:	bf15      	itete	ne
 800eda4:	6560      	strne	r0, [r4, #84]	; 0x54
 800eda6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800edaa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800edae:	81a3      	strheq	r3, [r4, #12]
 800edb0:	bf18      	it	ne
 800edb2:	81a3      	strhne	r3, [r4, #12]
 800edb4:	bd10      	pop	{r4, pc}

0800edb6 <__sclose>:
 800edb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edba:	f000 b813 	b.w	800ede4 <_close_r>
	...

0800edc0 <_write_r>:
 800edc0:	b538      	push	{r3, r4, r5, lr}
 800edc2:	4d07      	ldr	r5, [pc, #28]	; (800ede0 <_write_r+0x20>)
 800edc4:	4604      	mov	r4, r0
 800edc6:	4608      	mov	r0, r1
 800edc8:	4611      	mov	r1, r2
 800edca:	2200      	movs	r2, #0
 800edcc:	602a      	str	r2, [r5, #0]
 800edce:	461a      	mov	r2, r3
 800edd0:	f7f4 fd83 	bl	80038da <_write>
 800edd4:	1c43      	adds	r3, r0, #1
 800edd6:	d102      	bne.n	800edde <_write_r+0x1e>
 800edd8:	682b      	ldr	r3, [r5, #0]
 800edda:	b103      	cbz	r3, 800edde <_write_r+0x1e>
 800eddc:	6023      	str	r3, [r4, #0]
 800edde:	bd38      	pop	{r3, r4, r5, pc}
 800ede0:	200007a0 	.word	0x200007a0

0800ede4 <_close_r>:
 800ede4:	b538      	push	{r3, r4, r5, lr}
 800ede6:	4d06      	ldr	r5, [pc, #24]	; (800ee00 <_close_r+0x1c>)
 800ede8:	2300      	movs	r3, #0
 800edea:	4604      	mov	r4, r0
 800edec:	4608      	mov	r0, r1
 800edee:	602b      	str	r3, [r5, #0]
 800edf0:	f7f4 fd8f 	bl	8003912 <_close>
 800edf4:	1c43      	adds	r3, r0, #1
 800edf6:	d102      	bne.n	800edfe <_close_r+0x1a>
 800edf8:	682b      	ldr	r3, [r5, #0]
 800edfa:	b103      	cbz	r3, 800edfe <_close_r+0x1a>
 800edfc:	6023      	str	r3, [r4, #0]
 800edfe:	bd38      	pop	{r3, r4, r5, pc}
 800ee00:	200007a0 	.word	0x200007a0

0800ee04 <_fstat_r>:
 800ee04:	b538      	push	{r3, r4, r5, lr}
 800ee06:	4d07      	ldr	r5, [pc, #28]	; (800ee24 <_fstat_r+0x20>)
 800ee08:	2300      	movs	r3, #0
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	4608      	mov	r0, r1
 800ee0e:	4611      	mov	r1, r2
 800ee10:	602b      	str	r3, [r5, #0]
 800ee12:	f7f4 fd8a 	bl	800392a <_fstat>
 800ee16:	1c43      	adds	r3, r0, #1
 800ee18:	d102      	bne.n	800ee20 <_fstat_r+0x1c>
 800ee1a:	682b      	ldr	r3, [r5, #0]
 800ee1c:	b103      	cbz	r3, 800ee20 <_fstat_r+0x1c>
 800ee1e:	6023      	str	r3, [r4, #0]
 800ee20:	bd38      	pop	{r3, r4, r5, pc}
 800ee22:	bf00      	nop
 800ee24:	200007a0 	.word	0x200007a0

0800ee28 <_isatty_r>:
 800ee28:	b538      	push	{r3, r4, r5, lr}
 800ee2a:	4d06      	ldr	r5, [pc, #24]	; (800ee44 <_isatty_r+0x1c>)
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	4604      	mov	r4, r0
 800ee30:	4608      	mov	r0, r1
 800ee32:	602b      	str	r3, [r5, #0]
 800ee34:	f7f4 fd89 	bl	800394a <_isatty>
 800ee38:	1c43      	adds	r3, r0, #1
 800ee3a:	d102      	bne.n	800ee42 <_isatty_r+0x1a>
 800ee3c:	682b      	ldr	r3, [r5, #0]
 800ee3e:	b103      	cbz	r3, 800ee42 <_isatty_r+0x1a>
 800ee40:	6023      	str	r3, [r4, #0]
 800ee42:	bd38      	pop	{r3, r4, r5, pc}
 800ee44:	200007a0 	.word	0x200007a0

0800ee48 <_lseek_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d07      	ldr	r5, [pc, #28]	; (800ee68 <_lseek_r+0x20>)
 800ee4c:	4604      	mov	r4, r0
 800ee4e:	4608      	mov	r0, r1
 800ee50:	4611      	mov	r1, r2
 800ee52:	2200      	movs	r2, #0
 800ee54:	602a      	str	r2, [r5, #0]
 800ee56:	461a      	mov	r2, r3
 800ee58:	f7f4 fd82 	bl	8003960 <_lseek>
 800ee5c:	1c43      	adds	r3, r0, #1
 800ee5e:	d102      	bne.n	800ee66 <_lseek_r+0x1e>
 800ee60:	682b      	ldr	r3, [r5, #0]
 800ee62:	b103      	cbz	r3, 800ee66 <_lseek_r+0x1e>
 800ee64:	6023      	str	r3, [r4, #0]
 800ee66:	bd38      	pop	{r3, r4, r5, pc}
 800ee68:	200007a0 	.word	0x200007a0

0800ee6c <__ascii_mbtowc>:
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	b901      	cbnz	r1, 800ee72 <__ascii_mbtowc+0x6>
 800ee70:	a901      	add	r1, sp, #4
 800ee72:	b142      	cbz	r2, 800ee86 <__ascii_mbtowc+0x1a>
 800ee74:	b14b      	cbz	r3, 800ee8a <__ascii_mbtowc+0x1e>
 800ee76:	7813      	ldrb	r3, [r2, #0]
 800ee78:	600b      	str	r3, [r1, #0]
 800ee7a:	7812      	ldrb	r2, [r2, #0]
 800ee7c:	1e10      	subs	r0, r2, #0
 800ee7e:	bf18      	it	ne
 800ee80:	2001      	movne	r0, #1
 800ee82:	b002      	add	sp, #8
 800ee84:	4770      	bx	lr
 800ee86:	4610      	mov	r0, r2
 800ee88:	e7fb      	b.n	800ee82 <__ascii_mbtowc+0x16>
 800ee8a:	f06f 0001 	mvn.w	r0, #1
 800ee8e:	e7f8      	b.n	800ee82 <__ascii_mbtowc+0x16>

0800ee90 <__malloc_lock>:
 800ee90:	4801      	ldr	r0, [pc, #4]	; (800ee98 <__malloc_lock+0x8>)
 800ee92:	f7ff b870 	b.w	800df76 <__retarget_lock_acquire_recursive>
 800ee96:	bf00      	nop
 800ee98:	20000794 	.word	0x20000794

0800ee9c <__malloc_unlock>:
 800ee9c:	4801      	ldr	r0, [pc, #4]	; (800eea4 <__malloc_unlock+0x8>)
 800ee9e:	f7ff b86b 	b.w	800df78 <__retarget_lock_release_recursive>
 800eea2:	bf00      	nop
 800eea4:	20000794 	.word	0x20000794

0800eea8 <_malloc_usable_size_r>:
 800eea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eeac:	1f18      	subs	r0, r3, #4
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	bfbc      	itt	lt
 800eeb2:	580b      	ldrlt	r3, [r1, r0]
 800eeb4:	18c0      	addlt	r0, r0, r3
 800eeb6:	4770      	bx	lr

0800eeb8 <_read_r>:
 800eeb8:	b538      	push	{r3, r4, r5, lr}
 800eeba:	4d07      	ldr	r5, [pc, #28]	; (800eed8 <_read_r+0x20>)
 800eebc:	4604      	mov	r4, r0
 800eebe:	4608      	mov	r0, r1
 800eec0:	4611      	mov	r1, r2
 800eec2:	2200      	movs	r2, #0
 800eec4:	602a      	str	r2, [r5, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	f7f4 fcea 	bl	80038a0 <_read>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_read_r+0x1e>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_read_r+0x1e>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	200007a0 	.word	0x200007a0

0800eedc <__ascii_wctomb>:
 800eedc:	b149      	cbz	r1, 800eef2 <__ascii_wctomb+0x16>
 800eede:	2aff      	cmp	r2, #255	; 0xff
 800eee0:	bf85      	ittet	hi
 800eee2:	238a      	movhi	r3, #138	; 0x8a
 800eee4:	6003      	strhi	r3, [r0, #0]
 800eee6:	700a      	strbls	r2, [r1, #0]
 800eee8:	f04f 30ff 	movhi.w	r0, #4294967295
 800eeec:	bf98      	it	ls
 800eeee:	2001      	movls	r0, #1
 800eef0:	4770      	bx	lr
 800eef2:	4608      	mov	r0, r1
 800eef4:	4770      	bx	lr
	...

0800eef8 <_init>:
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	bf00      	nop
 800eefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eefe:	bc08      	pop	{r3}
 800ef00:	469e      	mov	lr, r3
 800ef02:	4770      	bx	lr

0800ef04 <_fini>:
 800ef04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef06:	bf00      	nop
 800ef08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ef0a:	bc08      	pop	{r3}
 800ef0c:	469e      	mov	lr, r3
 800ef0e:	4770      	bx	lr
