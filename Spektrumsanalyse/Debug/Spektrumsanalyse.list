
Spektrumsanalyse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800b094  0800b094  0001b094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b734  0800b734  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800b734  0800b734  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b734  0800b734  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b734  0800b734  0001b734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b738  0800b738  0001b738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800b73c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  200001f4  0800b930  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  0800b930  0002051c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000193bb  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1a  00000000  00000000  000395df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017f8  00000000  00000000  0003d300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001610  00000000  00000000  0003eaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028251  00000000  00000000  00040108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e41f  00000000  00000000  00068359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e67c4  00000000  00000000  00086778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016cf3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e58  00000000  00000000  0016cf8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b07c 	.word	0x0800b07c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800b07c 	.word	0x0800b07c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800028a:	2300      	movs	r3, #0
 800028c:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800028e:	2300      	movs	r3, #0
 8000290:	777b      	strb	r3, [r7, #29]
 8000292:	e01b      	b.n	80002cc <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000294:	2300      	movs	r3, #0
 8000296:	77bb      	strb	r3, [r7, #30]
 8000298:	e012      	b.n	80002c0 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800029a:	7fba      	ldrb	r2, [r7, #30]
 800029c:	7f7b      	ldrb	r3, [r7, #29]
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	4413      	add	r3, r2
 80002a2:	461a      	mov	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	1899      	adds	r1, r3, r2
 80002a8:	7fba      	ldrb	r2, [r7, #30]
 80002aa:	7f7b      	ldrb	r3, [r7, #29]
 80002ac:	7808      	ldrb	r0, [r1, #0]
 80002ae:	4961      	ldr	r1, [pc, #388]	; (8000434 <AES_Encrypt+0x1b4>)
 80002b0:	0092      	lsls	r2, r2, #2
 80002b2:	440a      	add	r2, r1
 80002b4:	4413      	add	r3, r2
 80002b6:	4602      	mov	r2, r0
 80002b8:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80002ba:	7fbb      	ldrb	r3, [r7, #30]
 80002bc:	3301      	adds	r3, #1
 80002be:	77bb      	strb	r3, [r7, #30]
 80002c0:	7fbb      	ldrb	r3, [r7, #30]
 80002c2:	2b03      	cmp	r3, #3
 80002c4:	d9e9      	bls.n	800029a <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 80002c6:	7f7b      	ldrb	r3, [r7, #29]
 80002c8:	3301      	adds	r3, #1
 80002ca:	777b      	strb	r3, [r7, #29]
 80002cc:	7f7b      	ldrb	r3, [r7, #29]
 80002ce:	2b03      	cmp	r3, #3
 80002d0:	d9e0      	bls.n	8000294 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 80002d2:	2300      	movs	r3, #0
 80002d4:	77fb      	strb	r3, [r7, #31]
 80002d6:	e00b      	b.n	80002f0 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 80002d8:	7ffb      	ldrb	r3, [r7, #31]
 80002da:	683a      	ldr	r2, [r7, #0]
 80002dc:	441a      	add	r2, r3
 80002de:	7ffb      	ldrb	r3, [r7, #31]
 80002e0:	7812      	ldrb	r2, [r2, #0]
 80002e2:	3320      	adds	r3, #32
 80002e4:	443b      	add	r3, r7
 80002e6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 80002ea:	7ffb      	ldrb	r3, [r7, #31]
 80002ec:	3301      	adds	r3, #1
 80002ee:	77fb      	strb	r3, [r7, #31]
 80002f0:	7ffb      	ldrb	r3, [r7, #31]
 80002f2:	2b0f      	cmp	r3, #15
 80002f4:	d9f0      	bls.n	80002d8 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 80002f6:	f107 030c 	add.w	r3, r7, #12
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 f89c 	bl	8000438 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000300:	2301      	movs	r3, #1
 8000302:	773b      	strb	r3, [r7, #28]
 8000304:	e038      	b.n	8000378 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000306:	2300      	movs	r3, #0
 8000308:	777b      	strb	r3, [r7, #29]
 800030a:	e01f      	b.n	800034c <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 800030c:	2300      	movs	r3, #0
 800030e:	77bb      	strb	r3, [r7, #30]
 8000310:	e016      	b.n	8000340 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000312:	7fba      	ldrb	r2, [r7, #30]
 8000314:	7f7b      	ldrb	r3, [r7, #29]
 8000316:	4947      	ldr	r1, [pc, #284]	; (8000434 <AES_Encrypt+0x1b4>)
 8000318:	0092      	lsls	r2, r2, #2
 800031a:	440a      	add	r2, r1
 800031c:	4413      	add	r3, r2
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	7fbd      	ldrb	r5, [r7, #30]
 8000322:	7f7c      	ldrb	r4, [r7, #29]
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f8bf 	bl	80004a8 <AES_Sub_Byte>
 800032a:	4603      	mov	r3, r0
 800032c:	4619      	mov	r1, r3
 800032e:	4a41      	ldr	r2, [pc, #260]	; (8000434 <AES_Encrypt+0x1b4>)
 8000330:	00ab      	lsls	r3, r5, #2
 8000332:	4413      	add	r3, r2
 8000334:	4423      	add	r3, r4
 8000336:	460a      	mov	r2, r1
 8000338:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800033a:	7fbb      	ldrb	r3, [r7, #30]
 800033c:	3301      	adds	r3, #1
 800033e:	77bb      	strb	r3, [r7, #30]
 8000340:	7fbb      	ldrb	r3, [r7, #30]
 8000342:	2b03      	cmp	r3, #3
 8000344:	d9e5      	bls.n	8000312 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000346:	7f7b      	ldrb	r3, [r7, #29]
 8000348:	3301      	adds	r3, #1
 800034a:	777b      	strb	r3, [r7, #29]
 800034c:	7f7b      	ldrb	r3, [r7, #29]
 800034e:	2b03      	cmp	r3, #3
 8000350:	d9dc      	bls.n	800030c <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000352:	f000 f8c7 	bl	80004e4 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000356:	f000 f909 	bl	800056c <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800035a:	f107 020c 	add.w	r2, r7, #12
 800035e:	7f3b      	ldrb	r3, [r7, #28]
 8000360:	4611      	mov	r1, r2
 8000362:	4618      	mov	r0, r3
 8000364:	f000 f998 	bl	8000698 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000368:	f107 030c 	add.w	r3, r7, #12
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f863 	bl	8000438 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000372:	7f3b      	ldrb	r3, [r7, #28]
 8000374:	3301      	adds	r3, #1
 8000376:	773b      	strb	r3, [r7, #28]
 8000378:	7f3b      	ldrb	r3, [r7, #28]
 800037a:	2b09      	cmp	r3, #9
 800037c:	d9c3      	bls.n	8000306 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800037e:	2300      	movs	r3, #0
 8000380:	777b      	strb	r3, [r7, #29]
 8000382:	e01f      	b.n	80003c4 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000384:	2300      	movs	r3, #0
 8000386:	77bb      	strb	r3, [r7, #30]
 8000388:	e016      	b.n	80003b8 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800038a:	7fba      	ldrb	r2, [r7, #30]
 800038c:	7f7b      	ldrb	r3, [r7, #29]
 800038e:	4929      	ldr	r1, [pc, #164]	; (8000434 <AES_Encrypt+0x1b4>)
 8000390:	0092      	lsls	r2, r2, #2
 8000392:	440a      	add	r2, r1
 8000394:	4413      	add	r3, r2
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	7fbd      	ldrb	r5, [r7, #30]
 800039a:	7f7c      	ldrb	r4, [r7, #29]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f883 	bl	80004a8 <AES_Sub_Byte>
 80003a2:	4603      	mov	r3, r0
 80003a4:	4619      	mov	r1, r3
 80003a6:	4a23      	ldr	r2, [pc, #140]	; (8000434 <AES_Encrypt+0x1b4>)
 80003a8:	00ab      	lsls	r3, r5, #2
 80003aa:	4413      	add	r3, r2
 80003ac:	4423      	add	r3, r4
 80003ae:	460a      	mov	r2, r1
 80003b0:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80003b2:	7fbb      	ldrb	r3, [r7, #30]
 80003b4:	3301      	adds	r3, #1
 80003b6:	77bb      	strb	r3, [r7, #30]
 80003b8:	7fbb      	ldrb	r3, [r7, #30]
 80003ba:	2b03      	cmp	r3, #3
 80003bc:	d9e5      	bls.n	800038a <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 80003be:	7f7b      	ldrb	r3, [r7, #29]
 80003c0:	3301      	adds	r3, #1
 80003c2:	777b      	strb	r3, [r7, #29]
 80003c4:	7f7b      	ldrb	r3, [r7, #29]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d9dc      	bls.n	8000384 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 80003ca:	f000 f88b 	bl	80004e4 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 80003ce:	f107 020c 	add.w	r2, r7, #12
 80003d2:	7f3b      	ldrb	r3, [r7, #28]
 80003d4:	4611      	mov	r1, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f95e 	bl	8000698 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 f829 	bl	8000438 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80003e6:	2300      	movs	r3, #0
 80003e8:	777b      	strb	r3, [r7, #29]
 80003ea:	e01a      	b.n	8000422 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	77bb      	strb	r3, [r7, #30]
 80003f0:	e011      	b.n	8000416 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80003f2:	7fb9      	ldrb	r1, [r7, #30]
 80003f4:	7f7a      	ldrb	r2, [r7, #29]
 80003f6:	7fb8      	ldrb	r0, [r7, #30]
 80003f8:	7f7b      	ldrb	r3, [r7, #29]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	4403      	add	r3, r0
 80003fe:	4618      	mov	r0, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4403      	add	r3, r0
 8000404:	480b      	ldr	r0, [pc, #44]	; (8000434 <AES_Encrypt+0x1b4>)
 8000406:	0089      	lsls	r1, r1, #2
 8000408:	4401      	add	r1, r0
 800040a:	440a      	add	r2, r1
 800040c:	7812      	ldrb	r2, [r2, #0]
 800040e:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000410:	7fbb      	ldrb	r3, [r7, #30]
 8000412:	3301      	adds	r3, #1
 8000414:	77bb      	strb	r3, [r7, #30]
 8000416:	7fbb      	ldrb	r3, [r7, #30]
 8000418:	2b03      	cmp	r3, #3
 800041a:	d9ea      	bls.n	80003f2 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800041c:	7f7b      	ldrb	r3, [r7, #29]
 800041e:	3301      	adds	r3, #1
 8000420:	777b      	strb	r3, [r7, #29]
 8000422:	7f7b      	ldrb	r3, [r7, #29]
 8000424:	2b03      	cmp	r3, #3
 8000426:	d9e1      	bls.n	80003ec <AES_Encrypt+0x16c>
		}
	}

}
 8000428:	bf00      	nop
 800042a:	bf00      	nop
 800042c:	3720      	adds	r7, #32
 800042e:	46bd      	mov	sp, r7
 8000430:	bdb0      	pop	{r4, r5, r7, pc}
 8000432:	bf00      	nop
 8000434:	20000210 	.word	0x20000210

08000438 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000438:	b480      	push	{r7}
 800043a:	b085      	sub	sp, #20
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000440:	2300      	movs	r3, #0
 8000442:	73bb      	strb	r3, [r7, #14]
 8000444:	e024      	b.n	8000490 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8000446:	2300      	movs	r3, #0
 8000448:	73fb      	strb	r3, [r7, #15]
 800044a:	e01b      	b.n	8000484 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800044c:	7bfa      	ldrb	r2, [r7, #15]
 800044e:	7bbb      	ldrb	r3, [r7, #14]
 8000450:	4914      	ldr	r1, [pc, #80]	; (80004a4 <AES_Add_Round_Key+0x6c>)
 8000452:	0092      	lsls	r2, r2, #2
 8000454:	440a      	add	r2, r1
 8000456:	4413      	add	r3, r2
 8000458:	7818      	ldrb	r0, [r3, #0]
 800045a:	7bfa      	ldrb	r2, [r7, #15]
 800045c:	7bbb      	ldrb	r3, [r7, #14]
 800045e:	009b      	lsls	r3, r3, #2
 8000460:	4413      	add	r3, r2
 8000462:	461a      	mov	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4413      	add	r3, r2
 8000468:	7819      	ldrb	r1, [r3, #0]
 800046a:	7bfa      	ldrb	r2, [r7, #15]
 800046c:	7bbb      	ldrb	r3, [r7, #14]
 800046e:	4041      	eors	r1, r0
 8000470:	b2c8      	uxtb	r0, r1
 8000472:	490c      	ldr	r1, [pc, #48]	; (80004a4 <AES_Add_Round_Key+0x6c>)
 8000474:	0092      	lsls	r2, r2, #2
 8000476:	440a      	add	r2, r1
 8000478:	4413      	add	r3, r2
 800047a:	4602      	mov	r2, r0
 800047c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800047e:	7bfb      	ldrb	r3, [r7, #15]
 8000480:	3301      	adds	r3, #1
 8000482:	73fb      	strb	r3, [r7, #15]
 8000484:	7bfb      	ldrb	r3, [r7, #15]
 8000486:	2b03      	cmp	r3, #3
 8000488:	d9e0      	bls.n	800044c <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800048a:	7bbb      	ldrb	r3, [r7, #14]
 800048c:	3301      	adds	r3, #1
 800048e:	73bb      	strb	r3, [r7, #14]
 8000490:	7bbb      	ldrb	r3, [r7, #14]
 8000492:	2b03      	cmp	r3, #3
 8000494:	d9d7      	bls.n	8000446 <AES_Add_Round_Key+0xe>
		}
	}
}
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	20000210 	.word	0x20000210

080004a8 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b085      	sub	sp, #20
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	091b      	lsrs	r3, r3, #4
 80004b6:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 80004b8:	79fb      	ldrb	r3, [r7, #7]
 80004ba:	f003 030f 	and.w	r3, r3, #15
 80004be:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 80004c0:	7bfa      	ldrb	r2, [r7, #15]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	4906      	ldr	r1, [pc, #24]	; (80004e0 <AES_Sub_Byte+0x38>)
 80004c6:	0112      	lsls	r2, r2, #4
 80004c8:	440a      	add	r2, r1
 80004ca:	4413      	add	r3, r2
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 80004d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80004d2:	4618      	mov	r0, r3
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	20000000 	.word	0x20000000

080004e4 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80004ea:	4b1f      	ldr	r3, [pc, #124]	; (8000568 <AES_Shift_Rows+0x84>)
 80004ec:	791b      	ldrb	r3, [r3, #4]
 80004ee:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80004f0:	4b1d      	ldr	r3, [pc, #116]	; (8000568 <AES_Shift_Rows+0x84>)
 80004f2:	795a      	ldrb	r2, [r3, #5]
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <AES_Shift_Rows+0x84>)
 80004f6:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <AES_Shift_Rows+0x84>)
 80004fa:	799a      	ldrb	r2, [r3, #6]
 80004fc:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <AES_Shift_Rows+0x84>)
 80004fe:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <AES_Shift_Rows+0x84>)
 8000502:	79da      	ldrb	r2, [r3, #7]
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <AES_Shift_Rows+0x84>)
 8000506:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <AES_Shift_Rows+0x84>)
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <AES_Shift_Rows+0x84>)
 8000510:	7a1b      	ldrb	r3, [r3, #8]
 8000512:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8000514:	4b14      	ldr	r3, [pc, #80]	; (8000568 <AES_Shift_Rows+0x84>)
 8000516:	7a9a      	ldrb	r2, [r3, #10]
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <AES_Shift_Rows+0x84>)
 800051a:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800051c:	4a12      	ldr	r2, [pc, #72]	; (8000568 <AES_Shift_Rows+0x84>)
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <AES_Shift_Rows+0x84>)
 8000524:	7a5b      	ldrb	r3, [r3, #9]
 8000526:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <AES_Shift_Rows+0x84>)
 800052a:	7ada      	ldrb	r2, [r3, #11]
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <AES_Shift_Rows+0x84>)
 800052e:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000530:	4a0d      	ldr	r2, [pc, #52]	; (8000568 <AES_Shift_Rows+0x84>)
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <AES_Shift_Rows+0x84>)
 8000538:	7bdb      	ldrb	r3, [r3, #15]
 800053a:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <AES_Shift_Rows+0x84>)
 800053e:	7b9a      	ldrb	r2, [r3, #14]
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <AES_Shift_Rows+0x84>)
 8000542:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000544:	4b08      	ldr	r3, [pc, #32]	; (8000568 <AES_Shift_Rows+0x84>)
 8000546:	7b5a      	ldrb	r2, [r3, #13]
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <AES_Shift_Rows+0x84>)
 800054a:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <AES_Shift_Rows+0x84>)
 800054e:	7b1a      	ldrb	r2, [r3, #12]
 8000550:	4b05      	ldr	r3, [pc, #20]	; (8000568 <AES_Shift_Rows+0x84>)
 8000552:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <AES_Shift_Rows+0x84>)
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	7313      	strb	r3, [r2, #12]
}
 800055a:	bf00      	nop
 800055c:	370c      	adds	r7, #12
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000210 	.word	0x20000210

0800056c <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000572:	2300      	movs	r3, #0
 8000574:	73bb      	strb	r3, [r7, #14]
 8000576:	e082      	b.n	800067e <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 8000578:	2300      	movs	r3, #0
 800057a:	73fb      	strb	r3, [r7, #15]
 800057c:	e033      	b.n	80005e6 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800057e:	7bf9      	ldrb	r1, [r7, #15]
 8000580:	7bba      	ldrb	r2, [r7, #14]
 8000582:	7bfb      	ldrb	r3, [r7, #15]
 8000584:	4843      	ldr	r0, [pc, #268]	; (8000694 <AES_Mix_Collums+0x128>)
 8000586:	0089      	lsls	r1, r1, #2
 8000588:	4401      	add	r1, r0
 800058a:	440a      	add	r2, r1
 800058c:	7812      	ldrb	r2, [r2, #0]
 800058e:	3310      	adds	r3, #16
 8000590:	443b      	add	r3, r7
 8000592:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 8000596:	7bfa      	ldrb	r2, [r7, #15]
 8000598:	7bbb      	ldrb	r3, [r7, #14]
 800059a:	493e      	ldr	r1, [pc, #248]	; (8000694 <AES_Mix_Collums+0x128>)
 800059c:	0092      	lsls	r2, r2, #2
 800059e:	440a      	add	r2, r1
 80005a0:	4413      	add	r3, r2
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	0052      	lsls	r2, r2, #1
 80005a8:	b2d2      	uxtb	r2, r2
 80005aa:	3310      	adds	r3, #16
 80005ac:	443b      	add	r3, r7
 80005ae:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80005b2:	7bfa      	ldrb	r2, [r7, #15]
 80005b4:	7bbb      	ldrb	r3, [r7, #14]
 80005b6:	4937      	ldr	r1, [pc, #220]	; (8000694 <AES_Mix_Collums+0x128>)
 80005b8:	0092      	lsls	r2, r2, #2
 80005ba:	440a      	add	r2, r1
 80005bc:	4413      	add	r3, r2
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	b25b      	sxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	da0c      	bge.n	80005e0 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80005c6:	7bfb      	ldrb	r3, [r7, #15]
 80005c8:	3310      	adds	r3, #16
 80005ca:	443b      	add	r3, r7
 80005cc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	f082 021b 	eor.w	r2, r2, #27
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	3310      	adds	r3, #16
 80005da:	443b      	add	r3, r7
 80005dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80005e0:	7bfb      	ldrb	r3, [r7, #15]
 80005e2:	3301      	adds	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	7bfb      	ldrb	r3, [r7, #15]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d9c8      	bls.n	800057e <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80005ec:	793a      	ldrb	r2, [r7, #4]
 80005ee:	7a7b      	ldrb	r3, [r7, #9]
 80005f0:	4053      	eors	r3, r2
 80005f2:	b2da      	uxtb	r2, r3
 80005f4:	797b      	ldrb	r3, [r7, #5]
 80005f6:	4053      	eors	r3, r2
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	7abb      	ldrb	r3, [r7, #10]
 80005fc:	4053      	eors	r3, r2
 80005fe:	b2d9      	uxtb	r1, r3
 8000600:	7afa      	ldrb	r2, [r7, #11]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	404a      	eors	r2, r1
 8000606:	b2d1      	uxtb	r1, r2
 8000608:	4a22      	ldr	r2, [pc, #136]	; (8000694 <AES_Mix_Collums+0x128>)
 800060a:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800060c:	7a3a      	ldrb	r2, [r7, #8]
 800060e:	797b      	ldrb	r3, [r7, #5]
 8000610:	4053      	eors	r3, r2
 8000612:	b2da      	uxtb	r2, r3
 8000614:	7abb      	ldrb	r3, [r7, #10]
 8000616:	4053      	eors	r3, r2
 8000618:	b2da      	uxtb	r2, r3
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	4053      	eors	r3, r2
 800061e:	b2d9      	uxtb	r1, r3
 8000620:	7afa      	ldrb	r2, [r7, #11]
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	404a      	eors	r2, r1
 8000626:	b2d1      	uxtb	r1, r2
 8000628:	4a1a      	ldr	r2, [pc, #104]	; (8000694 <AES_Mix_Collums+0x128>)
 800062a:	4413      	add	r3, r2
 800062c:	460a      	mov	r2, r1
 800062e:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8000630:	7a3a      	ldrb	r2, [r7, #8]
 8000632:	7a7b      	ldrb	r3, [r7, #9]
 8000634:	4053      	eors	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	4053      	eors	r3, r2
 800063c:	b2da      	uxtb	r2, r3
 800063e:	7afb      	ldrb	r3, [r7, #11]
 8000640:	4053      	eors	r3, r2
 8000642:	b2d9      	uxtb	r1, r3
 8000644:	79fa      	ldrb	r2, [r7, #7]
 8000646:	7bbb      	ldrb	r3, [r7, #14]
 8000648:	404a      	eors	r2, r1
 800064a:	b2d1      	uxtb	r1, r2
 800064c:	4a11      	ldr	r2, [pc, #68]	; (8000694 <AES_Mix_Collums+0x128>)
 800064e:	4413      	add	r3, r2
 8000650:	460a      	mov	r2, r1
 8000652:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8000654:	7a3a      	ldrb	r2, [r7, #8]
 8000656:	793b      	ldrb	r3, [r7, #4]
 8000658:	4053      	eors	r3, r2
 800065a:	b2da      	uxtb	r2, r3
 800065c:	7a7b      	ldrb	r3, [r7, #9]
 800065e:	4053      	eors	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	7abb      	ldrb	r3, [r7, #10]
 8000664:	4053      	eors	r3, r2
 8000666:	b2d9      	uxtb	r1, r3
 8000668:	79fa      	ldrb	r2, [r7, #7]
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	404a      	eors	r2, r1
 800066e:	b2d1      	uxtb	r1, r2
 8000670:	4a08      	ldr	r2, [pc, #32]	; (8000694 <AES_Mix_Collums+0x128>)
 8000672:	4413      	add	r3, r2
 8000674:	460a      	mov	r2, r1
 8000676:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8000678:	7bbb      	ldrb	r3, [r7, #14]
 800067a:	3301      	adds	r3, #1
 800067c:	73bb      	strb	r3, [r7, #14]
 800067e:	7bbb      	ldrb	r3, [r7, #14]
 8000680:	2b03      	cmp	r3, #3
 8000682:	f67f af79 	bls.w	8000578 <AES_Mix_Collums+0xc>
	}
}
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	20000210 	.word	0x20000210

08000698 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8000698:	b590      	push	{r4, r7, lr}
 800069a:	b087      	sub	sp, #28
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	6039      	str	r1, [r7, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 80006a4:	2300      	movs	r3, #0
 80006a6:	75fb      	strb	r3, [r7, #23]
 80006a8:	e00c      	b.n	80006c4 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	330c      	adds	r3, #12
 80006ae:	683a      	ldr	r2, [r7, #0]
 80006b0:	441a      	add	r2, r3
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	7812      	ldrb	r2, [r2, #0]
 80006b6:	3318      	adds	r3, #24
 80006b8:	443b      	add	r3, r7
 80006ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	3301      	adds	r3, #1
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	7dfb      	ldrb	r3, [r7, #23]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d9ef      	bls.n	80006aa <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80006ca:	7b3b      	ldrb	r3, [r7, #12]
 80006cc:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
 80006d0:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80006d2:	7bbb      	ldrb	r3, [r7, #14]
 80006d4:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80006d6:	7bfb      	ldrb	r3, [r7, #15]
 80006d8:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80006da:	7d3b      	ldrb	r3, [r7, #20]
 80006dc:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80006de:	2300      	movs	r3, #0
 80006e0:	75fb      	strb	r3, [r7, #23]
 80006e2:	e012      	b.n	800070a <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80006e4:	7dfb      	ldrb	r3, [r7, #23]
 80006e6:	3318      	adds	r3, #24
 80006e8:	443b      	add	r3, r7
 80006ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006ee:	7dfc      	ldrb	r4, [r7, #23]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff fed9 	bl	80004a8 <AES_Sub_Byte>
 80006f6:	4603      	mov	r3, r0
 80006f8:	461a      	mov	r2, r3
 80006fa:	f104 0318 	add.w	r3, r4, #24
 80006fe:	443b      	add	r3, r7
 8000700:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8000704:	7dfb      	ldrb	r3, [r7, #23]
 8000706:	3301      	adds	r3, #1
 8000708:	75fb      	strb	r3, [r7, #23]
 800070a:	7dfb      	ldrb	r3, [r7, #23]
 800070c:	2b03      	cmp	r3, #3
 800070e:	d9e9      	bls.n	80006e4 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000710:	2301      	movs	r3, #1
 8000712:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000714:	e010      	b.n	8000738 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000716:	7d7b      	ldrb	r3, [r7, #21]
 8000718:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800071c:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800071e:	7d7b      	ldrb	r3, [r7, #21]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000724:	7cfb      	ldrb	r3, [r7, #19]
 8000726:	2b80      	cmp	r3, #128	; 0x80
 8000728:	d103      	bne.n	8000732 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800072a:	7d7b      	ldrb	r3, [r7, #21]
 800072c:	f083 031b 	eor.w	r3, r3, #27
 8000730:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	3b01      	subs	r3, #1
 8000736:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d1eb      	bne.n	8000716 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800073e:	7b3a      	ldrb	r2, [r7, #12]
 8000740:	7d7b      	ldrb	r3, [r7, #21]
 8000742:	4053      	eors	r3, r2
 8000744:	b2db      	uxtb	r3, r3
 8000746:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000748:	2300      	movs	r3, #0
 800074a:	75fb      	strb	r3, [r7, #23]
 800074c:	e02f      	b.n	80007ae <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800074e:	2300      	movs	r3, #0
 8000750:	75bb      	strb	r3, [r7, #22]
 8000752:	e026      	b.n	80007a2 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000754:	7dba      	ldrb	r2, [r7, #22]
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	4413      	add	r3, r2
 800075c:	461a      	mov	r2, r3
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	4413      	add	r3, r2
 8000762:	7819      	ldrb	r1, [r3, #0]
 8000764:	7dbb      	ldrb	r3, [r7, #22]
 8000766:	3318      	adds	r3, #24
 8000768:	443b      	add	r3, r7
 800076a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800076e:	7db8      	ldrb	r0, [r7, #22]
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	4403      	add	r3, r0
 8000776:	4618      	mov	r0, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	4403      	add	r3, r0
 800077c:	404a      	eors	r2, r1
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000782:	7dba      	ldrb	r2, [r7, #22]
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	4413      	add	r3, r2
 800078a:	461a      	mov	r2, r3
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	441a      	add	r2, r3
 8000790:	7dbb      	ldrb	r3, [r7, #22]
 8000792:	7812      	ldrb	r2, [r2, #0]
 8000794:	3318      	adds	r3, #24
 8000796:	443b      	add	r3, r7
 8000798:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800079c:	7dbb      	ldrb	r3, [r7, #22]
 800079e:	3301      	adds	r3, #1
 80007a0:	75bb      	strb	r3, [r7, #22]
 80007a2:	7dbb      	ldrb	r3, [r7, #22]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	d9d5      	bls.n	8000754 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 80007a8:	7dfb      	ldrb	r3, [r7, #23]
 80007aa:	3301      	adds	r3, #1
 80007ac:	75fb      	strb	r3, [r7, #23]
 80007ae:	7dfb      	ldrb	r3, [r7, #23]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	d9cc      	bls.n	800074e <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd90      	pop	{r4, r7, pc}
	...

080007c0 <Encrypt_Payload>:
extern unsigned char NwkSkey[16];
extern unsigned char AppSkey[16];
extern unsigned char DevAddr[4];

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	60f8      	str	r0, [r7, #12]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	461a      	mov	r2, r3
 80007cc:	460b      	mov	r3, r1
 80007ce:	72fb      	strb	r3, [r7, #11]
 80007d0:	4613      	mov	r3, r2
 80007d2:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 80007d4:	2300      	movs	r3, #0
 80007d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 80007da:	2300      	movs	r3, #0
 80007dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80007e0:	2300      	movs	r3, #0
 80007e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	091b      	lsrs	r3, r3, #4
 80007ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	f003 030f 	and.w	r3, r3, #15
 80007f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 80007f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d004      	beq.n	800080a <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 8000800:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000804:	3301      	adds	r3, #1
 8000806:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 800080a:	2301      	movs	r3, #1
 800080c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000810:	e07e      	b.n	8000910 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000812:	2301      	movs	r3, #1
 8000814:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000816:	2300      	movs	r3, #0
 8000818:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800081a:	2300      	movs	r3, #0
 800081c:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000822:	2300      	movs	r3, #0
 8000824:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000826:	7abb      	ldrb	r3, [r7, #10]
 8000828:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800082a:	4b3f      	ldr	r3, [pc, #252]	; (8000928 <Encrypt_Payload+0x168>)
 800082c:	78db      	ldrb	r3, [r3, #3]
 800082e:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000830:	4b3d      	ldr	r3, [pc, #244]	; (8000928 <Encrypt_Payload+0x168>)
 8000832:	789b      	ldrb	r3, [r3, #2]
 8000834:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000836:	4b3c      	ldr	r3, [pc, #240]	; (8000928 <Encrypt_Payload+0x168>)
 8000838:	785b      	ldrb	r3, [r3, #1]
 800083a:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800083c:	4b3a      	ldr	r3, [pc, #232]	; (8000928 <Encrypt_Payload+0x168>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	b2db      	uxtb	r3, r3
 8000846:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	0a1b      	lsrs	r3, r3, #8
 800084c:	b2db      	uxtb	r3, r3
 800084e:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000850:	2300      	movs	r3, #0
 8000852:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800085c:	2300      	movs	r3, #0
 800085e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000862:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000866:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A,AppSkey);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	492f      	ldr	r1, [pc, #188]	; (800092c <Encrypt_Payload+0x16c>)
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fd05 	bl	8000280 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000876:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800087a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800087e:	429a      	cmp	r2, r3
 8000880:	d01c      	beq.n	80008bc <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000888:	e013      	b.n	80008b2 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	781a      	ldrb	r2, [r3, #0]
 800088e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000892:	3328      	adds	r3, #40	; 0x28
 8000894:	443b      	add	r3, r7
 8000896:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800089a:	4053      	eors	r3, r2
 800089c:	b2da      	uxtb	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	701a      	strb	r2, [r3, #0]
				Data++;
 80008a2:	68fb      	ldr	r3, [r7, #12]
 80008a4:	3301      	adds	r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 80008a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008ac:	3301      	adds	r3, #1
 80008ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d9e7      	bls.n	800088a <Encrypt_Payload+0xca>
 80008ba:	e024      	b.n	8000906 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 80008bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 80008c4:	2310      	movs	r3, #16
 80008c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008d0:	e013      	b.n	80008fa <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008da:	3328      	adds	r3, #40	; 0x28
 80008dc:	443b      	add	r3, r7
 80008de:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008e2:	4053      	eors	r3, r2
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	701a      	strb	r2, [r3, #0]
				Data++;
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	3301      	adds	r3, #1
 80008ee:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80008f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008f4:	3301      	adds	r3, #1
 80008f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008fe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000902:	429a      	cmp	r2, r3
 8000904:	d3e5      	bcc.n	80008d2 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8000906:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800090a:	3301      	adds	r3, #1
 800090c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000910:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000914:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000918:	429a      	cmp	r2, r3
 800091a:	f67f af7a 	bls.w	8000812 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	; 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000240 	.word	0x20000240
 800092c:	20000230 	.word	0x20000230

08000930 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b09b      	sub	sp, #108	; 0x6c
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	4613      	mov	r3, r2
 800093e:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000940:	4bb8      	ldr	r3, [pc, #736]	; (8000c24 <Calculate_MIC+0x2f4>)
 8000942:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000946:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000948:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800094c:	4bb5      	ldr	r3, [pc, #724]	; (8000c24 <Calculate_MIC+0x2f4>)
 800094e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000952:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000954:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000958:	4bb2      	ldr	r3, [pc, #712]	; (8000c24 <Calculate_MIC+0x2f4>)
 800095a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800095e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000960:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000964:	4baf      	ldr	r3, [pc, #700]	; (8000c24 <Calculate_MIC+0x2f4>)
 8000966:	f107 0414 	add.w	r4, r7, #20
 800096a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800096c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000970:	2300      	movs	r3, #0
 8000972:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000976:	2300      	movs	r3, #0
 8000978:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 800097c:	2301      	movs	r3, #1
 800097e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000982:	2349      	movs	r3, #73	; 0x49
 8000984:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800098e:	2300      	movs	r3, #0
 8000990:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 800099a:	2300      	movs	r3, #0
 800099c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 80009a0:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 80009a4:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 80009a8:	4b9f      	ldr	r3, [pc, #636]	; (8000c28 <Calculate_MIC+0x2f8>)
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 80009b0:	4b9d      	ldr	r3, [pc, #628]	; (8000c28 <Calculate_MIC+0x2f8>)
 80009b2:	789b      	ldrb	r3, [r3, #2]
 80009b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 80009b8:	4b9b      	ldr	r3, [pc, #620]	; (8000c28 <Calculate_MIC+0x2f8>)
 80009ba:	785b      	ldrb	r3, [r3, #1]
 80009bc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 80009c0:	4b99      	ldr	r3, [pc, #612]	; (8000c28 <Calculate_MIC+0x2f8>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 80009e6:	2300      	movs	r3, #0
 80009e8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 80009ec:	79fb      	ldrb	r3, [r7, #7]
 80009ee:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	091b      	lsrs	r3, r3, #4
 80009f6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	f003 030f 	and.w	r3, r3, #15
 8000a00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 8000a04:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d004      	beq.n	8000a16 <Calculate_MIC+0xe6>
	{
		Number_of_Blocks++;
 8000a0c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000a10:	3301      	adds	r3, #1
 8000a12:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2);
 8000a16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000a1a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a1e:	4611      	mov	r1, r2
 8000a20:	4618      	mov	r0, r3
 8000a22:	f000 f905 	bl	8000c30 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B,NwkSkey);
 8000a26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a2a:	4980      	ldr	r1, [pc, #512]	; (8000c2c <Calculate_MIC+0x2fc>)
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fc27 	bl	8000280 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a38:	e010      	b.n	8000a5c <Calculate_MIC+0x12c>
	{
		Old_Data[i] = Block_B[i];
 8000a3a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a42:	3268      	adds	r2, #104	; 0x68
 8000a44:	443a      	add	r2, r7
 8000a46:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000a4a:	3368      	adds	r3, #104	; 0x68
 8000a4c:	443b      	add	r3, r7
 8000a4e:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000a52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a56:	3301      	adds	r3, #1
 8000a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a60:	2b0f      	cmp	r3, #15
 8000a62:	d9ea      	bls.n	8000a3a <Calculate_MIC+0x10a>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000a64:	e043      	b.n	8000aee <Calculate_MIC+0x1be>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000a66:	2300      	movs	r3, #0
 8000a68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a6c:	e00f      	b.n	8000a8e <Calculate_MIC+0x15e>
		{
			New_Data[i] = *Data;
 8000a6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	7812      	ldrb	r2, [r2, #0]
 8000a76:	3368      	adds	r3, #104	; 0x68
 8000a78:	443b      	add	r3, r7
 8000a7a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000a84:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a88:	3301      	adds	r3, #1
 8000a8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a92:	2b0f      	cmp	r3, #15
 8000a94:	d9eb      	bls.n	8000a6e <Calculate_MIC+0x13e>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000a96:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4611      	mov	r1, r2
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 f94f 	bl	8000d44 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data,NwkSkey);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4960      	ldr	r1, [pc, #384]	; (8000c2c <Calculate_MIC+0x2fc>)
 8000aac:	4618      	mov	r0, r3
 8000aae:	f7ff fbe7 	bl	8000280 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000ab8:	e010      	b.n	8000adc <Calculate_MIC+0x1ac>
		{
			Old_Data[i] = New_Data[i];
 8000aba:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000abe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac2:	3268      	adds	r2, #104	; 0x68
 8000ac4:	443a      	add	r2, r7
 8000ac6:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000aca:	3368      	adds	r3, #104	; 0x68
 8000acc:	443b      	add	r3, r7
 8000ace:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000ad2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ad6:	3301      	adds	r3, #1
 8000ad8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000adc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ae0:	2b0f      	cmp	r3, #15
 8000ae2:	d9ea      	bls.n	8000aba <Calculate_MIC+0x18a>
		}

		//Raise Block counter
		Block_Counter++;
 8000ae4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000ae8:	3301      	adds	r3, #1
 8000aea:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000aee:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000af2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d3b5      	bcc.n	8000a66 <Calculate_MIC+0x136>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000afa:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d12e      	bne.n	8000b60 <Calculate_MIC+0x230>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b08:	e00f      	b.n	8000b2a <Calculate_MIC+0x1fa>
		{
			New_Data[i] = *Data;
 8000b0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	7812      	ldrb	r2, [r2, #0]
 8000b12:	3368      	adds	r3, #104	; 0x68
 8000b14:	443b      	add	r3, r7
 8000b16:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000b20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b24:	3301      	adds	r3, #1
 8000b26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	d9eb      	bls.n	8000b0a <Calculate_MIC+0x1da>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000b32:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f901 	bl	8000d44 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000b42:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 f8f9 	bl	8000d44 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4935      	ldr	r1, [pc, #212]	; (8000c2c <Calculate_MIC+0x2fc>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff fb91 	bl	8000280 <AES_Encrypt>
 8000b5e:	e04d      	b.n	8000bfc <Calculate_MIC+0x2cc>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b66:	e02f      	b.n	8000bc8 <Calculate_MIC+0x298>
		{
			if(i < Incomplete_Block_Size)
 8000b68:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b6c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d20a      	bcs.n	8000b8a <Calculate_MIC+0x25a>
			{
				New_Data[i] = *Data;
 8000b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b78:	68fa      	ldr	r2, [r7, #12]
 8000b7a:	7812      	ldrb	r2, [r2, #0]
 8000b7c:	3368      	adds	r3, #104	; 0x68
 8000b7e:	443b      	add	r3, r7
 8000b80:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000b8a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b8e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d106      	bne.n	8000ba4 <Calculate_MIC+0x274>
			{
				New_Data[i] = 0x80;
 8000b96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b9a:	3368      	adds	r3, #104	; 0x68
 8000b9c:	443b      	add	r3, r7
 8000b9e:	2280      	movs	r2, #128	; 0x80
 8000ba0:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000ba4:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000ba8:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d906      	bls.n	8000bbe <Calculate_MIC+0x28e>
			{
				New_Data[i] = 0x00;
 8000bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bb4:	3368      	adds	r3, #104	; 0x68
 8000bb6:	443b      	add	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000bbe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000bc8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bcc:	2b0f      	cmp	r3, #15
 8000bce:	d9cb      	bls.n	8000b68 <Calculate_MIC+0x238>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000bd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f8b2 	bl	8000d44 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000be0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f8aa 	bl	8000d44 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	490d      	ldr	r1, [pc, #52]	; (8000c2c <Calculate_MIC+0x2fc>)
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fb42 	bl	8000280 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000bfc:	7d3a      	ldrb	r2, [r7, #20]
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	7d7a      	ldrb	r2, [r7, #21]
 8000c08:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	3302      	adds	r3, #2
 8000c0e:	7dba      	ldrb	r2, [r7, #22]
 8000c10:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	3303      	adds	r3, #3
 8000c16:	7dfa      	ldrb	r2, [r7, #23]
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	bf00      	nop
 8000c1c:	376c      	adds	r7, #108	; 0x6c
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	bf00      	nop
 8000c24:	0800b094 	.word	0x0800b094
 8000c28:	20000240 	.word	0x20000240
 8000c2c:	20000220 	.word	0x20000220

08000c30 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1,NwkSkey);
 8000c3a:	4926      	ldr	r1, [pc, #152]	; (8000cd4 <Generate_Keys+0xa4>)
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff fb1f 	bl	8000280 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	b25b      	sxtb	r3, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	da02      	bge.n	8000c52 <Generate_Keys+0x22>
	{
		MSB_Key = 1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	73bb      	strb	r3, [r7, #14]
 8000c50:	e001      	b.n	8000c56 <Generate_Keys+0x26>
	}
	else
	{
		MSB_Key = 0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000c56:	6878      	ldr	r0, [r7, #4]
 8000c58:	f000 f83e 	bl	8000cd8 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000c5c:	7bbb      	ldrb	r3, [r7, #14]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d109      	bne.n	8000c76 <Generate_Keys+0x46>
	{
		K1[15] = K1[15] ^ 0x87;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	330f      	adds	r3, #15
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	320f      	adds	r2, #15
 8000c6c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000c70:	43db      	mvns	r3, r3
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8000c76:	2300      	movs	r3, #0
 8000c78:	73fb      	strb	r3, [r7, #15]
 8000c7a:	e00a      	b.n	8000c92 <Generate_Keys+0x62>
	{
		K2[i] = K1[i];
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	441a      	add	r2, r3
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	6839      	ldr	r1, [r7, #0]
 8000c86:	440b      	add	r3, r1
 8000c88:	7812      	ldrb	r2, [r2, #0]
 8000c8a:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b0f      	cmp	r3, #15
 8000c96:	d9f1      	bls.n	8000c7c <Generate_Keys+0x4c>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b25b      	sxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	da02      	bge.n	8000ca8 <Generate_Keys+0x78>
	{
		MSB_Key = 1;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	73bb      	strb	r3, [r7, #14]
 8000ca6:	e001      	b.n	8000cac <Generate_Keys+0x7c>
	}
	else
	{
		MSB_Key = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8000cac:	6838      	ldr	r0, [r7, #0]
 8000cae:	f000 f813 	bl	8000cd8 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8000cb2:	7bbb      	ldrb	r3, [r7, #14]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d109      	bne.n	8000ccc <Generate_Keys+0x9c>
	{
		K2[15] = K2[15] ^ 0x87;
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	330f      	adds	r3, #15
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	683a      	ldr	r2, [r7, #0]
 8000cc0:	320f      	adds	r2, #15
 8000cc2:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	7013      	strb	r3, [r2, #0]
	}
}
 8000ccc:	bf00      	nop
 8000cce:	3710      	adds	r7, #16
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000220 	.word	0x20000220

08000cd8 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	73fb      	strb	r3, [r7, #15]
 8000ce8:	e022      	b.n	8000d30 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8000cea:	7bfb      	ldrb	r3, [r7, #15]
 8000cec:	2b0e      	cmp	r3, #14
 8000cee:	d80d      	bhi.n	8000d0c <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 8000cf0:	7bfb      	ldrb	r3, [r7, #15]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b25b      	sxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	da02      	bge.n	8000d06 <Shift_Left+0x2e>
			{
				Overflow = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	73bb      	strb	r3, [r7, #14]
 8000d04:	e004      	b.n	8000d10 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	73bb      	strb	r3, [r7, #14]
 8000d0a:	e001      	b.n	8000d10 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	b2d9      	uxtb	r1, r3
 8000d1c:	7bfb      	ldrb	r3, [r7, #15]
 8000d1e:	687a      	ldr	r2, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	7bba      	ldrb	r2, [r7, #14]
 8000d24:	440a      	add	r2, r1
 8000d26:	b2d2      	uxtb	r2, r2
 8000d28:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8000d2a:	7bfb      	ldrb	r3, [r7, #15]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	73fb      	strb	r3, [r7, #15]
 8000d30:	7bfb      	ldrb	r3, [r7, #15]
 8000d32:	2b0f      	cmp	r3, #15
 8000d34:	d9d9      	bls.n	8000cea <Shift_Left+0x12>
	}
}
 8000d36:	bf00      	nop
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8000d4e:	2300      	movs	r3, #0
 8000d50:	73fb      	strb	r3, [r7, #15]
 8000d52:	e010      	b.n	8000d76 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	4413      	add	r3, r2
 8000d5a:	7819      	ldrb	r1, [r3, #0]
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	781a      	ldrb	r2, [r3, #0]
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	4403      	add	r3, r0
 8000d6a:	404a      	eors	r2, r1
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8000d70:	7bfb      	ldrb	r3, [r7, #15]
 8000d72:	3301      	adds	r3, #1
 8000d74:	73fb      	strb	r3, [r7, #15]
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	2b0f      	cmp	r3, #15
 8000d7a:	d9eb      	bls.n	8000d54 <XOR+0x10>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3714      	adds	r7, #20
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <rfm95_read>:
unsigned char NwkSkey[16];
unsigned char AppSkey[16];
unsigned char DevAddr[4];

static bool rfm95_read(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t *buffer) {
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b086      	sub	sp, #24
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	60f8      	str	r0, [r7, #12]
 8000d92:	460b      	mov	r3, r1
 8000d94:	607a      	str	r2, [r7, #4]
 8000d96:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	6858      	ldr	r0, [r3, #4]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	891b      	ldrh	r3, [r3, #8]
 8000da0:	2200      	movs	r2, #0
 8000da2:	4619      	mov	r1, r3
 8000da4:	f002 f9da 	bl	800315c <HAL_GPIO_WritePin>

	//uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
	uint8_t transmit_buffer = (uint8_t) reg;
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	6818      	ldr	r0, [r3, #0]
 8000db0:	f107 0117 	add.w	r1, r7, #23
 8000db4:	230a      	movs	r3, #10
 8000db6:	2201      	movs	r2, #1
 8000db8:	f004 fc4d 	bl	8005656 <HAL_SPI_Transmit>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <rfm95_read+0x3c>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e014      	b.n	8000df0 <rfm95_read+0x66>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	6818      	ldr	r0, [r3, #0]
 8000dca:	230a      	movs	r3, #10
 8000dcc:	2201      	movs	r2, #1
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	f004 fdaf 	bl	8005932 <HAL_SPI_Receive>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <rfm95_read+0x54>
			!= HAL_OK) {
		return false;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e008      	b.n	8000df0 <rfm95_read+0x66>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6858      	ldr	r0, [r3, #4]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	891b      	ldrh	r3, [r3, #8]
 8000de6:	2201      	movs	r2, #1
 8000de8:	4619      	mov	r1, r3
 8000dea:	f002 f9b7 	bl	800315c <HAL_GPIO_WritePin>

	return true;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <rfm95_write>:

static bool rfm95_write(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t value) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
 8000e04:	4613      	mov	r3, r2
 8000e06:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6858      	ldr	r0, [r3, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	891b      	ldrh	r3, [r3, #8]
 8000e10:	2200      	movs	r2, #0
 8000e12:	4619      	mov	r1, r3
 8000e14:	f002 f9a2 	bl	800315c <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	733b      	strb	r3, [r7, #12]
 8000e22:	78bb      	ldrb	r3, [r7, #2]
 8000e24:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6818      	ldr	r0, [r3, #0]
 8000e2a:	f107 010c 	add.w	r1, r7, #12
 8000e2e:	230a      	movs	r3, #10
 8000e30:	2202      	movs	r2, #2
 8000e32:	f004 fc10 	bl	8005656 <HAL_SPI_Transmit>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <rfm95_write+0x48>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	e008      	b.n	8000e52 <rfm95_write+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6858      	ldr	r0, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	891b      	ldrh	r3, [r3, #8]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f002 f986 	bl	800315c <HAL_GPIO_WritePin>

	return true;
 8000e50:	2301      	movs	r3, #1
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <rfm95_reset>:

static void rfm95_reset(rfm95_handle_t *handle) {
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	68d8      	ldr	r0, [r3, #12]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	8a1b      	ldrh	r3, [r3, #16]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f002 f975 	bl	800315c <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000e72:	2001      	movs	r0, #1
 8000e74:	f001 fe7a 	bl	8002b6c <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68d8      	ldr	r0, [r3, #12]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8a1b      	ldrh	r3, [r3, #16]
 8000e80:	2201      	movs	r2, #1
 8000e82:	4619      	mov	r1, r3
 8000e84:	f002 f96a 	bl	800315c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000e88:	2005      	movs	r0, #5
 8000e8a:	f001 fe6f 	bl	8002b6c <HAL_Delay>
}
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000eaa:	d005      	beq.n	8000eb8 <rfm95_init+0x20>
 8000eac:	4b7f      	ldr	r3, [pc, #508]	; (80010ac <rfm95_init+0x214>)
 8000eae:	4a80      	ldr	r2, [pc, #512]	; (80010b0 <rfm95_init+0x218>)
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4880      	ldr	r0, [pc, #512]	; (80010b4 <rfm95_init+0x21c>)
 8000eb4:	f008 fe3c 	bl	8009b30 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <rfm95_init+0x36>
 8000ec2:	4b7d      	ldr	r3, [pc, #500]	; (80010b8 <rfm95_init+0x220>)
 8000ec4:	4a7a      	ldr	r2, [pc, #488]	; (80010b0 <rfm95_init+0x218>)
 8000ec6:	2181      	movs	r1, #129	; 0x81
 8000ec8:	487a      	ldr	r0, [pc, #488]	; (80010b4 <rfm95_init+0x21c>)
 8000eca:	f008 fe31 	bl	8009b30 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ed8:	d005      	beq.n	8000ee6 <rfm95_init+0x4e>
 8000eda:	4b78      	ldr	r3, [pc, #480]	; (80010bc <rfm95_init+0x224>)
 8000edc:	4a74      	ldr	r2, [pc, #464]	; (80010b0 <rfm95_init+0x218>)
 8000ede:	2182      	movs	r1, #130	; 0x82
 8000ee0:	4874      	ldr	r0, [pc, #464]	; (80010b4 <rfm95_init+0x21c>)
 8000ee2:	f008 fe25 	bl	8009b30 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	691b      	ldr	r3, [r3, #16]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <rfm95_init+0x64>
 8000ef0:	4b73      	ldr	r3, [pc, #460]	; (80010c0 <rfm95_init+0x228>)
 8000ef2:	4a6f      	ldr	r2, [pc, #444]	; (80010b0 <rfm95_init+0x218>)
 8000ef4:	2183      	movs	r1, #131	; 0x83
 8000ef6:	486f      	ldr	r0, [pc, #444]	; (80010b4 <rfm95_init+0x21c>)
 8000ef8:	f008 fe1a 	bl	8009b30 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	695b      	ldr	r3, [r3, #20]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <rfm95_init+0x7a>
 8000f06:	4b6f      	ldr	r3, [pc, #444]	; (80010c4 <rfm95_init+0x22c>)
 8000f08:	4a69      	ldr	r2, [pc, #420]	; (80010b0 <rfm95_init+0x218>)
 8000f0a:	2184      	movs	r1, #132	; 0x84
 8000f0c:	4869      	ldr	r0, [pc, #420]	; (80010b4 <rfm95_init+0x21c>)
 8000f0e:	f008 fe0f 	bl	8009b30 <__assert_func>

	rfm95_reset(handle);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ffa1 	bl	8000e5a <rfm95_reset>

	if (handle->reload_frame_counter != NULL) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d009      	beq.n	8000f34 <rfm95_init+0x9c>
		handle->reload_frame_counter(&handle->tx_frame_count,
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	f102 0052 	add.w	r0, r2, #82	; 0x52
 8000f2a:	687a      	ldr	r2, [r7, #4]
 8000f2c:	3250      	adds	r2, #80	; 0x50
 8000f2e:	4611      	mov	r1, r2
 8000f30:	4798      	blx	r3
 8000f32:	e007      	b.n	8000f44 <rfm95_init+0xac>
				&handle->rx_frame_count);
	} else {
		handle->tx_frame_count = 0;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		handle->rx_frame_count = 0;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}

	// Check for correct version.
	uint8_t version;
	if (!rfm95_read(handle, RFM95_REGISTER_VERSION, &version))
 8000f44:	f107 030f 	add.w	r3, r7, #15
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2142      	movs	r1, #66	; 0x42
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff ff1c 	bl	8000d8a <rfm95_read>
 8000f52:	4603      	mov	r3, r0
 8000f54:	f083 0301 	eor.w	r3, r3, #1
 8000f58:	b2db      	uxtb	r3, r3
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <rfm95_init+0xca>
		return false;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e0a0      	b.n	80010a4 <rfm95_init+0x20c>
	if (version != RFM9x_VER)
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	2b12      	cmp	r3, #18
 8000f66:	d001      	beq.n	8000f6c <rfm95_init+0xd4>
		return false;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	e09b      	b.n	80010a4 <rfm95_init+0x20c>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2101      	movs	r1, #1
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff41 	bl	8000df8 <rfm95_write>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f083 0301 	eor.w	r3, r3, #1
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <rfm95_init+0xee>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e08e      	b.n	80010a4 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000f86:	2280      	movs	r2, #128	; 0x80
 8000f88:	2101      	movs	r1, #1
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff34 	bl	8000df8 <rfm95_write>
 8000f90:	4603      	mov	r3, r0
 8000f92:	f083 0301 	eor.w	r3, r3, #1
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <rfm95_init+0x108>
	RFM95_REGISTER_OP_MODE_LORA))
		return false;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	e081      	b.n	80010a4 <rfm95_init+0x20c>

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8000fa0:	2111      	movs	r1, #17
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f890 	bl	80010c8 <rfm95_set_power>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	f083 0301 	eor.w	r3, r3, #1
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <rfm95_init+0x120>
		return false;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	e075      	b.n	80010a4 <rfm95_init+0x20c>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 37))
 8000fb8:	2225      	movs	r2, #37	; 0x25
 8000fba:	211f      	movs	r1, #31
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f7ff ff1b 	bl	8000df8 <rfm95_write>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	f083 0301 	eor.w	r3, r3, #1
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <rfm95_init+0x13a>
		return false;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e068      	b.n	80010a4 <rfm95_init+0x20c>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff0e 	bl	8000df8 <rfm95_write>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f083 0301 	eor.w	r3, r3, #1
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <rfm95_init+0x154>
		return false;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	e05b      	b.n	80010a4 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8000fec:	2208      	movs	r2, #8
 8000fee:	2121      	movs	r1, #33	; 0x21
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff01 	bl	8000df8 <rfm95_write>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	f083 0301 	eor.w	r3, r3, #1
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <rfm95_init+0x16e>
		return false;
 8001002:	2300      	movs	r3, #0
 8001004:	e04e      	b.n	80010a4 <rfm95_init+0x20c>

	// Turn on low data rate optimisation (for symbol lengths > 16ms) and automatic AGC
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3,
 8001006:	220c      	movs	r2, #12
 8001008:	2126      	movs	r1, #38	; 0x26
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff fef4 	bl	8000df8 <rfm95_write>
 8001010:	4603      	mov	r3, r0
 8001012:	f083 0301 	eor.w	r3, r3, #1
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <rfm95_init+0x188>
	RFM95_REGISTER_MODEM_CONFIG_3_LDR_OPTIM_AGC_AUTO_ON))
		return false;
 800101c:	2300      	movs	r3, #0
 800101e:	e041      	b.n	80010a4 <rfm95_init+0x20c>

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8001020:	2234      	movs	r2, #52	; 0x34
 8001022:	2139      	movs	r1, #57	; 0x39
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff fee7 	bl	8000df8 <rfm95_write>
 800102a:	4603      	mov	r3, r0
 800102c:	f083 0301 	eor.w	r3, r3, #1
 8001030:	b2db      	uxtb	r3, r3
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <rfm95_init+0x1a2>
		return false;
 8001036:	2300      	movs	r3, #0
 8001038:	e034      	b.n	80010a4 <rfm95_init+0x20c>

	// Set IQ inversion.
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_1,
 800103a:	2227      	movs	r2, #39	; 0x27
 800103c:	2133      	movs	r1, #51	; 0x33
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff feda 	bl	8000df8 <rfm95_write>
 8001044:	4603      	mov	r3, r0
 8001046:	f083 0301 	eor.w	r3, r3, #1
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <rfm95_init+0x1bc>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8001050:	2300      	movs	r3, #0
 8001052:	e027      	b.n	80010a4 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_2,
 8001054:	221d      	movs	r2, #29
 8001056:	213b      	movs	r1, #59	; 0x3b
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff fecd 	bl	8000df8 <rfm95_write>
 800105e:	4603      	mov	r3, r0
 8001060:	f083 0301 	eor.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <rfm95_init+0x1d6>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 800106a:	2300      	movs	r3, #0
 800106c:	e01a      	b.n	80010a4 <rfm95_init+0x20c>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 800106e:	2280      	movs	r2, #128	; 0x80
 8001070:	210e      	movs	r1, #14
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fec0 	bl	8000df8 <rfm95_write>
 8001078:	4603      	mov	r3, r0
 800107a:	f083 0301 	eor.w	r3, r3, #1
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <rfm95_init+0x1f0>
		return false;
 8001084:	2300      	movs	r3, #0
 8001086:	e00d      	b.n	80010a4 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001088:	2200      	movs	r2, #0
 800108a:	210f      	movs	r1, #15
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff feb3 	bl	8000df8 <rfm95_write>
 8001092:	4603      	mov	r3, r0
 8001094:	f083 0301 	eor.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <rfm95_init+0x20a>
		return false;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <rfm95_init+0x20c>

	return true;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	0800b0a4 	.word	0x0800b0a4
 80010b0:	0800b560 	.word	0x0800b560
 80010b4:	0800b0d8 	.word	0x0800b0d8
 80010b8:	0800b0fc 	.word	0x0800b0fc
 80010bc:	0800b138 	.word	0x0800b138
 80010c0:	0800b170 	.word	0x0800b170
 80010c4:	0800b1ac 	.word	0x0800b1ac

080010c8 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80010d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	dd03      	ble.n	80010e4 <rfm95_set_power+0x1c>
 80010dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010e0:	2b11      	cmp	r3, #17
 80010e2:	dd09      	ble.n	80010f8 <rfm95_set_power+0x30>
 80010e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010e8:	2b14      	cmp	r3, #20
 80010ea:	d005      	beq.n	80010f8 <rfm95_set_power+0x30>
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <rfm95_set_power+0xd8>)
 80010ee:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <rfm95_set_power+0xdc>)
 80010f0:	21c8      	movs	r1, #200	; 0xc8
 80010f2:	482d      	ldr	r0, [pc, #180]	; (80011a8 <rfm95_set_power+0xe0>)
 80010f4:	f008 fd1c 	bl	8009b30 <__assert_func>

	rfm95_register_pa_config_t pa_config = { 0 };
 80010f8:	2300      	movs	r3, #0
 80010fa:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001100:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001104:	2b01      	cmp	r3, #1
 8001106:	dd18      	ble.n	800113a <rfm95_set_power+0x72>
 8001108:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800110c:	2b11      	cmp	r3, #17
 800110e:	dc14      	bgt.n	800113a <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001110:	7b3b      	ldrb	r3, [r7, #12]
 8001112:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001116:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800111e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	3b02      	subs	r3, #2
 8001124:	b2db      	uxtb	r3, r3
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	b2da      	uxtb	r2, r3
 800112c:	7b3b      	ldrb	r3, [r7, #12]
 800112e:	f362 0303 	bfi	r3, r2, #0, #4
 8001132:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001134:	2384      	movs	r3, #132	; 0x84
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	e011      	b.n	800115e <rfm95_set_power+0x96>

	} else if (power == 20) {
 800113a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800113e:	2b14      	cmp	r3, #20
 8001140:	d10d      	bne.n	800115e <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001142:	7b3b      	ldrb	r3, [r7, #12]
 8001144:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001148:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 800114a:	7b3b      	ldrb	r3, [r7, #12]
 800114c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001150:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001152:	7b3b      	ldrb	r3, [r7, #12]
 8001154:	f043 030f 	orr.w	r3, r3, #15
 8001158:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800115a:	2387      	movs	r3, #135	; 0x87
 800115c:	73fb      	strb	r3, [r7, #15]
	}

	if (!rfm95_write(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 800115e:	7b3b      	ldrb	r3, [r7, #12]
 8001160:	461a      	mov	r2, r3
 8001162:	2109      	movs	r1, #9
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff fe47 	bl	8000df8 <rfm95_write>
 800116a:	4603      	mov	r3, r0
 800116c:	f083 0301 	eor.w	r3, r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <rfm95_set_power+0xb2>
		return false;
 8001176:	2300      	movs	r3, #0
 8001178:	e00e      	b.n	8001198 <rfm95_set_power+0xd0>
	if (!rfm95_write(handle, RFM95_REGISTER_PA_DAC, pa_dac_config))
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	461a      	mov	r2, r3
 800117e:	214d      	movs	r1, #77	; 0x4d
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f7ff fe39 	bl	8000df8 <rfm95_write>
 8001186:	4603      	mov	r3, r0
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <rfm95_set_power+0xce>
		return false;
 8001192:	2300      	movs	r3, #0
 8001194:	e000      	b.n	8001198 <rfm95_set_power+0xd0>

	return true;
 8001196:	2301      	movs	r3, #1
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	0800b1e4 	.word	0x0800b1e4
 80011a4:	0800b56c 	.word	0x0800b56c
 80011a8:	0800b0d8 	.word	0x0800b0d8

080011ac <rfm95_send_package>:

static bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data,
		size_t length, uint8_t channel) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	70fb      	strb	r3, [r7, #3]
	assert(channel < 8);
 80011ba:	78fb      	ldrb	r3, [r7, #3]
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d905      	bls.n	80011cc <rfm95_send_package+0x20>
 80011c0:	4b86      	ldr	r3, [pc, #536]	; (80013dc <rfm95_send_package+0x230>)
 80011c2:	4a87      	ldr	r2, [pc, #540]	; (80013e0 <rfm95_send_package+0x234>)
 80011c4:	21e4      	movs	r1, #228	; 0xe4
 80011c6:	4887      	ldr	r0, [pc, #540]	; (80013e4 <rfm95_send_package+0x238>)
 80011c8:	f008 fcb2 	bl	8009b30 <__assert_func>

	uint32_t tick_start;

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80011cc:	2281      	movs	r2, #129	; 0x81
 80011ce:	2101      	movs	r1, #1
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff fe11 	bl	8000df8 <rfm95_write>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <rfm95_send_package+0x3a>
	RFM95_REGISTER_OP_MODE_LORA_STANDBY))
		return false;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e0f6      	b.n	80013d4 <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 80011e6:	f001 fcb5 	bl	8002b54 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 80011ec:	e00d      	b.n	800120a <rfm95_send_package+0x5e>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - tick_start) >= RFM95_WAKEUP_TIMEOUT) {
 80011ee:	f001 fcb1 	bl	8002b54 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b09      	cmp	r3, #9
 80011fa:	d906      	bls.n	800120a <rfm95_send_package+0x5e>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80011fc:	2200      	movs	r2, #0
 80011fe:	2101      	movs	r1, #1
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff fdf9 	bl	8000df8 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8001206:	2300      	movs	r3, #0
 8001208:	e0e4      	b.n	80013d4 <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	69da      	ldr	r2, [r3, #28]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	8c1b      	ldrh	r3, [r3, #32]
 8001212:	4619      	mov	r1, r3
 8001214:	4610      	mov	r0, r2
 8001216:	f001 ff89 	bl	800312c <HAL_GPIO_ReadPin>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0e6      	beq.n	80011ee <rfm95_send_package+0x42>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_FR_MSB,
 8001220:	78fa      	ldrb	r2, [r7, #3]
 8001222:	4971      	ldr	r1, [pc, #452]	; (80013e8 <rfm95_send_package+0x23c>)
 8001224:	4613      	mov	r3, r2
 8001226:	005b      	lsls	r3, r3, #1
 8001228:	4413      	add	r3, r2
 800122a:	440b      	add	r3, r1
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	2106      	movs	r1, #6
 8001232:	68f8      	ldr	r0, [r7, #12]
 8001234:	f7ff fde0 	bl	8000df8 <rfm95_write>
 8001238:	4603      	mov	r3, r0
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <rfm95_send_package+0x9c>
			eu863_lora_frequency[channel][0]))
		return false;
 8001244:	2300      	movs	r3, #0
 8001246:	e0c5      	b.n	80013d4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_MID,
 8001248:	78fa      	ldrb	r2, [r7, #3]
 800124a:	4967      	ldr	r1, [pc, #412]	; (80013e8 <rfm95_send_package+0x23c>)
 800124c:	4613      	mov	r3, r2
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	4413      	add	r3, r2
 8001252:	440b      	add	r3, r1
 8001254:	3301      	adds	r3, #1
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	461a      	mov	r2, r3
 800125a:	2107      	movs	r1, #7
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f7ff fdcb 	bl	8000df8 <rfm95_write>
 8001262:	4603      	mov	r3, r0
 8001264:	f083 0301 	eor.w	r3, r3, #1
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <rfm95_send_package+0xc6>
			eu863_lora_frequency[channel][1]))
		return false;
 800126e:	2300      	movs	r3, #0
 8001270:	e0b0      	b.n	80013d4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_LSB,
 8001272:	78fa      	ldrb	r2, [r7, #3]
 8001274:	495c      	ldr	r1, [pc, #368]	; (80013e8 <rfm95_send_package+0x23c>)
 8001276:	4613      	mov	r3, r2
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	4413      	add	r3, r2
 800127c:	440b      	add	r3, r1
 800127e:	3302      	adds	r3, #2
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	2108      	movs	r1, #8
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	f7ff fdb6 	bl	8000df8 <rfm95_write>
 800128c:	4603      	mov	r3, r0
 800128e:	f083 0301 	eor.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <rfm95_send_package+0xf0>
			eu863_lora_frequency[channel][2]))
		return false;
 8001298:	2300      	movs	r3, #0
 800129a:	e09b      	b.n	80013d4 <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 800129c:	2272      	movs	r2, #114	; 0x72
 800129e:	211d      	movs	r1, #29
 80012a0:	68f8      	ldr	r0, [r7, #12]
 80012a2:	f7ff fda9 	bl	8000df8 <rfm95_write>
 80012a6:	4603      	mov	r3, r0
 80012a8:	f083 0301 	eor.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <rfm95_send_package+0x10a>
		return false;
 80012b2:	2300      	movs	r3, #0
 80012b4:	e08e      	b.n	80013d4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 80012b6:	2274      	movs	r2, #116	; 0x74
 80012b8:	211e      	movs	r1, #30
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff fd9c 	bl	8000df8 <rfm95_write>
 80012c0:	4603      	mov	r3, r0
 80012c2:	f083 0301 	eor.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <rfm95_send_package+0x124>
		return false;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e081      	b.n	80013d4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 80012d0:	2204      	movs	r2, #4
 80012d2:	2126      	movs	r1, #38	; 0x26
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f7ff fd8f 	bl	8000df8 <rfm95_write>
 80012da:	4603      	mov	r3, r0
 80012dc:	f083 0301 	eor.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <rfm95_send_package+0x13e>
		return false;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e074      	b.n	80013d4 <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	461a      	mov	r2, r3
 80012f0:	2122      	movs	r1, #34	; 0x22
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f7ff fd80 	bl	8000df8 <rfm95_write>
 80012f8:	4603      	mov	r3, r0
 80012fa:	f083 0301 	eor.w	r3, r3, #1
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <rfm95_send_package+0x15c>
		return false;
 8001304:	2300      	movs	r3, #0
 8001306:	e065      	b.n	80013d4 <rfm95_send_package+0x228>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8001308:	2280      	movs	r2, #128	; 0x80
 800130a:	210d      	movs	r1, #13
 800130c:	68f8      	ldr	r0, [r7, #12]
 800130e:	f7ff fd73 	bl	8000df8 <rfm95_write>
 8001312:	4603      	mov	r3, r0
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <rfm95_send_package+0x176>
		return false;
 800131e:	2300      	movs	r3, #0
 8001320:	e058      	b.n	80013d4 <rfm95_send_package+0x228>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	e00b      	b.n	8001340 <rfm95_send_package+0x194>
		rfm95_write(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	4413      	add	r3, r2
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f7ff fd5f 	bl	8000df8 <rfm95_write>
	for (size_t i = 0; i < length; i++) {
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	3301      	adds	r3, #1
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	697a      	ldr	r2, [r7, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	429a      	cmp	r2, r3
 8001346:	d3ef      	bcc.n	8001328 <rfm95_send_package+0x17c>
	}

	if (!rfm95_write(handle, RFM95_REGISTER_DIO_MAPPING_1,
 8001348:	2240      	movs	r2, #64	; 0x40
 800134a:	2140      	movs	r1, #64	; 0x40
 800134c:	68f8      	ldr	r0, [r7, #12]
 800134e:	f7ff fd53 	bl	8000df8 <rfm95_write>
 8001352:	4603      	mov	r3, r0
 8001354:	f083 0301 	eor.w	r3, r3, #1
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <rfm95_send_package+0x1b6>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 800135e:	2300      	movs	r3, #0
 8001360:	e038      	b.n	80013d4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001362:	2283      	movs	r2, #131	; 0x83
 8001364:	2101      	movs	r1, #1
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f7ff fd46 	bl	8000df8 <rfm95_write>
 800136c:	4603      	mov	r3, r0
 800136e:	f083 0301 	eor.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <rfm95_send_package+0x1d0>
	RFM95_REGISTER_OP_MODE_LORA_TX))
		return false;
 8001378:	2300      	movs	r3, #0
 800137a:	e02b      	b.n	80013d4 <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 800137c:	f001 fbea 	bl	8002b54 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8001382:	e00e      	b.n	80013a2 <rfm95_send_package+0x1f6>
		if ((HAL_GetTick() - tick_start) >= RFM95_SEND_TIMEOUT) {
 8001384:	f001 fbe6 	bl	8002b54 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001392:	d306      	bcc.n	80013a2 <rfm95_send_package+0x1f6>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001394:	2200      	movs	r2, #0
 8001396:	2101      	movs	r1, #1
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f7ff fd2d 	bl	8000df8 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 800139e:	2300      	movs	r3, #0
 80013a0:	e018      	b.n	80013d4 <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	8b1b      	ldrh	r3, [r3, #24]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4610      	mov	r0, r2
 80013ae:	f001 febd 	bl	800312c <HAL_GPIO_ReadPin>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0e5      	beq.n	8001384 <rfm95_send_package+0x1d8>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80013b8:	2200      	movs	r2, #0
 80013ba:	2101      	movs	r1, #1
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff fd1b 	bl	8000df8 <rfm95_write>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f083 0301 	eor.w	r3, r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <rfm95_send_package+0x226>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <rfm95_send_package+0x228>

	return true;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	0800b210 	.word	0x0800b210
 80013e0:	0800b57c 	.word	0x0800b57c
 80013e4:	0800b0d8 	.word	0x0800b0d8
 80013e8:	0800b548 	.word	0x0800b548

080013ec <rfm95_send_data_groundstation>:

bool rfm95_send_data_groundstation(rfm95_handle_t *handle) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	//size_t length = LENGHT_GROUNDSTATION;
//	uint8_t ident = IDENT;
//	uint8_t rfm_data[LENGHT_GROUNDSTATION];
//	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
	unsigned long latitude = handle->latitude;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f8:	617b      	str	r3, [r7, #20]
	unsigned long longitude = handle->longitude;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013fe:	613b      	str	r3, [r7, #16]
	unsigned altitude = handle->altitude;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001404:	60fb      	str	r3, [r7, #12]
//	for (int i = 0; i < 2; i++) {
//		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
//	}

		uint8_t rfm_data[3];
		uint8_t rfm_package_length = 3;
 8001406:	2303      	movs	r3, #3
 8001408:	72fb      	strb	r3, [r7, #11]
		rfm_data[0] = 0x53;
 800140a:	2353      	movs	r3, #83	; 0x53
 800140c:	723b      	strb	r3, [r7, #8]
		rfm_data[1] = 0x4f;
 800140e:	234f      	movs	r3, #79	; 0x4f
 8001410:	727b      	strb	r3, [r7, #9]
		rfm_data[2] = 0x53;
 8001412:	2353      	movs	r3, #83	; 0x53
 8001414:	72bb      	strb	r3, [r7, #10]


	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 8001416:	7afa      	ldrb	r2, [r7, #11]
 8001418:	f107 0108 	add.w	r1, r7, #8
 800141c:	2300      	movs	r3, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fec4 	bl	80011ac <rfm95_send_package>
 8001424:	4603      	mov	r3, r0
 8001426:	f083 0301 	eor.w	r3, r3, #1
 800142a:	b2db      	uxtb	r3, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <rfm95_send_data_groundstation+0x48>
			0)) {
		return false;
 8001430:	2300      	movs	r3, #0
 8001432:	e000      	b.n	8001436 <rfm95_send_data_groundstation+0x4a>
	}
	return true;
 8001434:	2301      	movs	r3, #1
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
	...

08001440 <rfm95_send_data>:

bool rfm95_send_data(rfm95_handle_t *handle, const uint8_t *data, size_t length) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b09d      	sub	sp, #116	; 0x74
 8001444:	af02      	add	r7, sp, #8
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
	// 64 bytes is maximum size of FIFO
	assert(length + 4 + 9 <= 64);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	330d      	adds	r3, #13
 8001450:	2b40      	cmp	r3, #64	; 0x40
 8001452:	d906      	bls.n	8001462 <rfm95_send_data+0x22>
 8001454:	4b6f      	ldr	r3, [pc, #444]	; (8001614 <rfm95_send_data+0x1d4>)
 8001456:	4a70      	ldr	r2, [pc, #448]	; (8001618 <rfm95_send_data+0x1d8>)
 8001458:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800145c:	486f      	ldr	r0, [pc, #444]	; (800161c <rfm95_send_data+0x1dc>)
 800145e:	f008 fb67 	bl	8009b30 <__assert_func>

	uint8_t direction = 0; // Up
 8001462:	2300      	movs	r3, #0
 8001464:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t frame_control = 0x00;
 8001468:	2300      	movs	r3, #0
 800146a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t frame_port = 0x01;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t mac_header = 0x40;
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	uint8_t rfm_data[64 + 4 + 9];
	uint8_t rfm_package_length = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t mic[4];

	rfm_data[0] = mac_header;
 8001480:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001484:	753b      	strb	r3, [r7, #20]
	rfm_data[1] = handle->device_address[3];
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800148c:	757b      	strb	r3, [r7, #21]
	rfm_data[2] = handle->device_address[2];
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001494:	75bb      	strb	r3, [r7, #22]
	rfm_data[3] = handle->device_address[1];
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800149c:	75fb      	strb	r3, [r7, #23]
	rfm_data[4] = handle->device_address[0];
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80014a4:	763b      	strb	r3, [r7, #24]
	rfm_data[5] = frame_control;
 80014a6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80014aa:	767b      	strb	r3, [r7, #25]
	rfm_data[6] = (handle->tx_frame_count & 0x00ffu);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	76bb      	strb	r3, [r7, #26]
	rfm_data[7] = ((uint16_t) (handle->tx_frame_count >> 8u) & 0x00ffu);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80014bc:	0a1b      	lsrs	r3, r3, #8
 80014be:	b29b      	uxth	r3, r3
 80014c0:	b2db      	uxtb	r3, r3
 80014c2:	76fb      	strb	r3, [r7, #27]
	rfm_data[8] = frame_port;
 80014c4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80014c8:	773b      	strb	r3, [r7, #28]
	rfm_package_length += 9;
 80014ca:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80014ce:	3309      	adds	r3, #9
 80014d0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Copy network and application session keys as well as device address to variables of encryption library
	memcpy(NwkSkey, handle->network_session_key,
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	3326      	adds	r3, #38	; 0x26
 80014d8:	4a51      	ldr	r2, [pc, #324]	; (8001620 <rfm95_send_data+0x1e0>)
 80014da:	4614      	mov	r4, r2
 80014dc:	6818      	ldr	r0, [r3, #0]
 80014de:	6859      	ldr	r1, [r3, #4]
 80014e0:	689a      	ldr	r2, [r3, #8]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->network_session_key));
	memcpy(AppSkey, handle->application_session_key,
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	3336      	adds	r3, #54	; 0x36
 80014ea:	4a4e      	ldr	r2, [pc, #312]	; (8001624 <rfm95_send_data+0x1e4>)
 80014ec:	4614      	mov	r4, r2
 80014ee:	6818      	ldr	r0, [r3, #0]
 80014f0:	6859      	ldr	r1, [r3, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->application_session_key));
	memcpy(DevAddr, handle->device_address, sizeof(handle->device_address));
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	3322      	adds	r3, #34	; 0x22
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b49      	ldr	r3, [pc, #292]	; (8001628 <rfm95_send_data+0x1e8>)
 8001502:	601a      	str	r2, [r3, #0]

	// Encrypt payload in place in package.
	memcpy(rfm_data + rfm_package_length, data, length);
 8001504:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001508:	f107 0214 	add.w	r2, r7, #20
 800150c:	4413      	add	r3, r2
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	68b9      	ldr	r1, [r7, #8]
 8001512:	4618      	mov	r0, r3
 8001514:	f008 fb66 	bl	8009be4 <memcpy>
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 8001518:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800151c:	f107 0214 	add.w	r2, r7, #20
 8001520:	18d0      	adds	r0, r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	b2d9      	uxtb	r1, r3
			handle->tx_frame_count, direction);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 800152c:	461a      	mov	r2, r3
 800152e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001532:	f7ff f945 	bl	80007c0 <Encrypt_Payload>
	rfm_package_length += length;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800153e:	4413      	add	r3, r2
 8001540:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Calculate MIC and copy to last 4 bytes of the package.
	Calculate_MIC(rfm_data, mic, rfm_package_length, handle->tx_frame_count,
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800154a:	461c      	mov	r4, r3
 800154c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8001550:	f107 0110 	add.w	r1, r7, #16
 8001554:	f107 0014 	add.w	r0, r7, #20
 8001558:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4623      	mov	r3, r4
 8001560:	f7ff f9e6 	bl	8000930 <Calculate_MIC>
			direction);
	for (uint8_t i = 0; i < 4; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800156a:	e013      	b.n	8001594 <rfm95_send_data+0x154>
		rfm_data[rfm_package_length + i] = mic[i];
 800156c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001570:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001574:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001578:	440b      	add	r3, r1
 800157a:	3268      	adds	r2, #104	; 0x68
 800157c:	443a      	add	r2, r7
 800157e:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8001582:	3368      	adds	r3, #104	; 0x68
 8001584:	443b      	add	r3, r7
 8001586:	f803 2c54 	strb.w	r2, [r3, #-84]
	for (uint8_t i = 0; i < 4; i++) {
 800158a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800158e:	3301      	adds	r3, #1
 8001590:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001594:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001598:	2b03      	cmp	r3, #3
 800159a:	d9e7      	bls.n	800156c <rfm95_send_data+0x12c>
	}
	rfm_package_length += 4;
 800159c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80015a0:	3304      	adds	r3, #4
 80015a2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	uint8_t pseudorandom_channel = rfm_data[rfm_package_length - 1] & 0x7u;
 80015a6:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80015aa:	3b01      	subs	r3, #1
 80015ac:	3368      	adds	r3, #104	; 0x68
 80015ae:	443b      	add	r3, r7
 80015b0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80015b4:	f003 0307 	and.w	r3, r3, #7
 80015b8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 80015bc:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80015c0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80015c4:	f107 0114 	add.w	r1, r7, #20
 80015c8:	68f8      	ldr	r0, [r7, #12]
 80015ca:	f7ff fdef 	bl	80011ac <rfm95_send_package>
 80015ce:	4603      	mov	r3, r0
 80015d0:	f083 0301 	eor.w	r3, r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <rfm95_send_data+0x19e>
			pseudorandom_channel)) {
		return false;
 80015da:	2300      	movs	r3, #0
 80015dc:	e016      	b.n	800160c <rfm95_send_data+0x1cc>
	}

	handle->tx_frame_count++;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80015e4:	3301      	adds	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if (handle->save_frame_counter != NULL) {
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <rfm95_send_data+0x1ca>
		handle->save_frame_counter(handle->tx_frame_count,
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	f8b2 0052 	ldrh.w	r0, [r2, #82]	; 0x52
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8001606:	4611      	mov	r1, r2
 8001608:	4798      	blx	r3
				handle->rx_frame_count);
	}
	return true;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	376c      	adds	r7, #108	; 0x6c
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	0800b21c 	.word	0x0800b21c
 8001618:	0800b590 	.word	0x0800b590
 800161c:	0800b0d8 	.word	0x0800b0d8
 8001620:	20000220 	.word	0x20000220
 8001624:	20000230 	.word	0x20000230
 8001628:	20000240 	.word	0x20000240

0800162c <FlowInit>:
		.network_session_key = { 0x0C, 0x78, 0xCE, 0x6F, 0xC4, 0x15, 0x29, 0x37, 0x2A, 0xE6, 0x52, 0x8B, 0x7E, 0x6F, 0xC6, 0x45 },
		.reload_frame_counter = NULL, .save_frame_counter = NULL, .longitude =
				8220250, .longitude_or = { 'E' }, .latitude = 47478520,
		.latitude_or[0] = { 'N' }, .altitude = 2461, .indent = 0 };

FlowInit() {
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
	// Initialise RFM95 module.
	if (!rfm95_init(&rfm95_handle)) {
 8001630:	4808      	ldr	r0, [pc, #32]	; (8001654 <FlowInit+0x28>)
 8001632:	f7ff fc31 	bl	8000e98 <rfm95_init>
 8001636:	4603      	mov	r3, r0
 8001638:	f083 0301 	eor.w	r3, r3, #1
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <FlowInit+0x1e>
		printf("RFM95 init failed\n\r");
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <FlowInit+0x2c>)
 8001644:	f008 fdd2 	bl	800a1ec <iprintf>
	}else {
		printf("RFM95 init sucess\n\r");
	}
}
 8001648:	e002      	b.n	8001650 <FlowInit+0x24>
		printf("RFM95 init sucess\n\r");
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <FlowInit+0x30>)
 800164c:	f008 fdce 	bl	800a1ec <iprintf>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000100 	.word	0x20000100
 8001658:	0800b234 	.word	0x0800b234
 800165c:	0800b248 	.word	0x0800b248

08001660 <Flow>:

Flow() {
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
	static uint8_t loraCounter;
	uint8_t data_packet[] = { 0x01, 0x02, 0x03, 0x4 };
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <Flow+0x64>)
 8001668:	607b      	str	r3, [r7, #4]
	uint8_t data_packet_ground[3];

//	if (loraCounter == LORAINTERVALL) {
		if (!rfm95_send_data(&rfm95_handle, data_packet, sizeof(data_packet))) {
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2204      	movs	r2, #4
 800166e:	4619      	mov	r1, r3
 8001670:	4815      	ldr	r0, [pc, #84]	; (80016c8 <Flow+0x68>)
 8001672:	f7ff fee5 	bl	8001440 <rfm95_send_data>
 8001676:	4603      	mov	r3, r0
 8001678:	f083 0301 	eor.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <Flow+0x2a>
			printf("RFM95 send failed\n\r");
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <Flow+0x6c>)
 8001684:	f008 fdb2 	bl	800a1ec <iprintf>
 8001688:	e012      	b.n	80016b0 <Flow+0x50>
		} else {
			printf("RFM95 send success\n\r");
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <Flow+0x70>)
 800168c:	f008 fdae 	bl	800a1ec <iprintf>

			if (!rfm95_send_data_groundstation(&rfm95_handle)) {
 8001690:	480d      	ldr	r0, [pc, #52]	; (80016c8 <Flow+0x68>)
 8001692:	f7ff feab 	bl	80013ec <rfm95_send_data_groundstation>
 8001696:	4603      	mov	r3, r0
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <Flow+0x4a>
				printf("RFM95 send failed\n\r");
 80016a2:	480a      	ldr	r0, [pc, #40]	; (80016cc <Flow+0x6c>)
 80016a4:	f008 fda2 	bl	800a1ec <iprintf>
 80016a8:	e002      	b.n	80016b0 <Flow+0x50>
			} else {
				printf("RFM95 send success\n\r");
 80016aa:	4809      	ldr	r0, [pc, #36]	; (80016d0 <Flow+0x70>)
 80016ac:	f008 fd9e 	bl	800a1ec <iprintf>
			}
		}

//	}

	loraCounter++;
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <Flow+0x74>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	3301      	adds	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <Flow+0x74>)
 80016ba:	701a      	strb	r2, [r3, #0]
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	04030201 	.word	0x04030201
 80016c8:	20000100 	.word	0x20000100
 80016cc:	0800b25c 	.word	0x0800b25c
 80016d0:	0800b270 	.word	0x0800b270
 80016d4:	20000244 	.word	0x20000244

080016d8 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 80016d8:	b40f      	push	{r0, r1, r2, r3}
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016ee:	4807      	ldr	r0, [pc, #28]	; (800170c <myprintf+0x34>)
 80016f0:	f008 fe36 	bl	800a360 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <myprintf+0x34>)
 80016f6:	f7fe fd6b 	bl	80001d0 <strlen>
 80016fa:	4603      	mov	r3, r0
 80016fc:	607b      	str	r3, [r7, #4]
  //HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);

}
 80016fe:	bf00      	nop
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001708:	b004      	add	sp, #16
 800170a:	4770      	bx	lr
 800170c:	200003b8 	.word	0x200003b8

08001710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	f5ad 6d94 	sub.w	sp, sp, #1184	; 0x4a0
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001718:	f001 f9b3 	bl	8002a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800171c:	f000 f92e 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001720:	f000 fa54 	bl	8001bcc <MX_GPIO_Init>
  MX_SPI2_Init();
 8001724:	f000 f9ec 	bl	8001b00 <MX_SPI2_Init>
  MX_TIM16_Init();
 8001728:	f000 fa28 	bl	8001b7c <MX_TIM16_Init>
  MX_I2C1_Init();
 800172c:	f000 f96c 	bl	8001a08 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001730:	f000 f9a8 	bl	8001a84 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001734:	f005 f8c4 	bl	80068c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  FlowInit();
 8001738:	f7ff ff78 	bl	800162c <FlowInit>


  errIni = PCA9847_Initialise(&multiplexer, &hi2c1);
 800173c:	497c      	ldr	r1, [pc, #496]	; (8001930 <main+0x220>)
 800173e:	487d      	ldr	r0, [pc, #500]	; (8001934 <main+0x224>)
 8001740:	f001 f922 	bl	8002988 <PCA9847_Initialise>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <main+0x228>)
 800174a:	701a      	strb	r2, [r3, #0]
  PCA9847_SetChannel(&multiplexer, 3);
 800174c:	2103      	movs	r1, #3
 800174e:	4879      	ldr	r0, [pc, #484]	; (8001934 <main+0x224>)
 8001750:	f001 f93e 	bl	80029d0 <PCA9847_SetChannel>
	AS7341_Init(eSpm);
 8001754:	2000      	movs	r0, #0
 8001756:	f000 fe53 	bl	8002400 <AS7341_Init>
	AS7341_ATIME_config(100);
 800175a:	2064      	movs	r0, #100	; 0x64
 800175c:	f001 f8b7 	bl	80028ce <AS7341_ATIME_config>
	AS7341_ASTEP_config(999);
 8001760:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001764:	f001 f8c1 	bl	80028ea <AS7341_ASTEP_config>
	AS7341_AGAIN_config(6);
 8001768:	2006      	movs	r0, #6
 800176a:	f001 f8d7 	bl	800291c <AS7341_AGAIN_config>


	HAL_TIM_Base_Start_IT(&htim16);
 800176e:	4873      	ldr	r0, [pc, #460]	; (800193c <main+0x22c>)
 8001770:	f004 fe36 	bl	80063e0 <HAL_TIM_Base_Start_IT>


	  myprintf("\r\n~ SD card demo by kiwih ~\r\n\r\n");
 8001774:	4872      	ldr	r0, [pc, #456]	; (8001940 <main+0x230>)
 8001776:	f7ff ffaf 	bl	80016d8 <myprintf>

	  HAL_Delay(1000); //a short delay is important to let the SD card settle
 800177a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800177e:	f001 f9f5 	bl	8002b6c <HAL_Delay>
	  FATFS FatFs; 	//Fatfs handle
	  FIL fil; 		//File handle
	  FRESULT fres; //Result after operations

	  //Open the file system
	  fres = f_mount(&FatFs, "", 1); //1=mount now
 8001782:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001786:	2201      	movs	r2, #1
 8001788:	496e      	ldr	r1, [pc, #440]	; (8001944 <main+0x234>)
 800178a:	4618      	mov	r0, r3
 800178c:	f007 fb22 	bl	8008dd4 <f_mount>
 8001790:	4603      	mov	r3, r0
 8001792:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK) {
 8001796:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 800179a:	2b00      	cmp	r3, #0
 800179c:	d006      	beq.n	80017ac <main+0x9c>
		myprintf("f_mount error (%i)\r\n", fres);
 800179e:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80017a2:	4619      	mov	r1, r3
 80017a4:	4868      	ldr	r0, [pc, #416]	; (8001948 <main+0x238>)
 80017a6:	f7ff ff97 	bl	80016d8 <myprintf>
		while(1);
 80017aa:	e7fe      	b.n	80017aa <main+0x9a>
	  //Let's get some statistics from the SD card
	  DWORD free_clusters, free_sectors, total_sectors;

	  FATFS* getFreeFs;

	  fres = f_getfree("", &free_clusters, &getFreeFs);
 80017ac:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80017b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017b4:	4619      	mov	r1, r3
 80017b6:	4863      	ldr	r0, [pc, #396]	; (8001944 <main+0x234>)
 80017b8:	f008 f86c 	bl	8009894 <f_getfree>
 80017bc:	4603      	mov	r3, r0
 80017be:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK) {
 80017c2:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <main+0xc8>
		myprintf("f_getfree error (%i)\r\n", fres);
 80017ca:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80017ce:	4619      	mov	r1, r3
 80017d0:	485e      	ldr	r0, [pc, #376]	; (800194c <main+0x23c>)
 80017d2:	f7ff ff81 	bl	80016d8 <myprintf>
		while(1);
 80017d6:	e7fe      	b.n	80017d6 <main+0xc6>
	  }

	  //Formula comes from ChaN's documentation
	  total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 80017d8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80017dc:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	695b      	ldr	r3, [r3, #20]
 80017e4:	3b02      	subs	r3, #2
 80017e6:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80017ea:	f5a2 628f 	sub.w	r2, r2, #1144	; 0x478
 80017ee:	6812      	ldr	r2, [r2, #0]
 80017f0:	8952      	ldrh	r2, [r2, #10]
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	f8c7 3498 	str.w	r3, [r7, #1176]	; 0x498
	  free_sectors = free_clusters * getFreeFs->csize;
 80017fa:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80017fe:	f5a3 638f 	sub.w	r3, r3, #1144	; 0x478
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	895b      	ldrh	r3, [r3, #10]
 8001806:	461a      	mov	r2, r3
 8001808:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800180c:	f2a3 4374 	subw	r3, r3, #1140	; 0x474
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494

	  myprintf("SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n", total_sectors / 2, free_sectors / 2);
 800181a:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 800181e:	0859      	lsrs	r1, r3, #1
 8001820:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	461a      	mov	r2, r3
 8001828:	4849      	ldr	r0, [pc, #292]	; (8001950 <main+0x240>)
 800182a:	f7ff ff55 	bl	80016d8 <myprintf>

	  //Now let's try to open file "test.txt"
	  fres = f_open(&fil, "test.txt", FA_READ);
 800182e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001832:	2201      	movs	r2, #1
 8001834:	4947      	ldr	r1, [pc, #284]	; (8001954 <main+0x244>)
 8001836:	4618      	mov	r0, r3
 8001838:	f007 fb12 	bl	8008e60 <f_open>
 800183c:	4603      	mov	r3, r0
 800183e:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if (fres != FR_OK) {
 8001842:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001846:	2b00      	cmp	r3, #0
 8001848:	d003      	beq.n	8001852 <main+0x142>
		myprintf("f_open error (%i)\r\n");
 800184a:	4843      	ldr	r0, [pc, #268]	; (8001958 <main+0x248>)
 800184c:	f7ff ff44 	bl	80016d8 <myprintf>
		while(1);
 8001850:	e7fe      	b.n	8001850 <main+0x140>
	  }
	  myprintf("I was able to open 'test.txt' for reading!\r\n");
 8001852:	4842      	ldr	r0, [pc, #264]	; (800195c <main+0x24c>)
 8001854:	f7ff ff40 	bl	80016d8 <myprintf>
	  //Read 30 bytes from "test.txt" on the SD card
	  BYTE readBuf[30];

	  //We can either use f_read OR f_gets to get data out of files
	  //f_gets is a wrapper on f_read that does some string formatting for us
	  TCHAR* rres = f_gets((TCHAR*)readBuf, 30, &fil);
 8001858:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	211e      	movs	r1, #30
 8001862:	4618      	mov	r0, r3
 8001864:	f008 f8cb 	bl	80099fe <f_gets>
 8001868:	f8c7 0490 	str.w	r0, [r7, #1168]	; 0x490
	  if(rres != 0) {
 800186c:	f8d7 3490 	ldr.w	r3, [r7, #1168]	; 0x490
 8001870:	2b00      	cmp	r3, #0
 8001872:	d006      	beq.n	8001882 <main+0x172>
		myprintf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 8001874:	f107 0308 	add.w	r3, r7, #8
 8001878:	4619      	mov	r1, r3
 800187a:	4839      	ldr	r0, [pc, #228]	; (8001960 <main+0x250>)
 800187c:	f7ff ff2c 	bl	80016d8 <myprintf>
 8001880:	e005      	b.n	800188e <main+0x17e>
	  } else {
		myprintf("f_gets error (%i)\r\n", fres);
 8001882:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 8001886:	4619      	mov	r1, r3
 8001888:	4836      	ldr	r0, [pc, #216]	; (8001964 <main+0x254>)
 800188a:	f7ff ff25 	bl	80016d8 <myprintf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 800188e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001892:	4618      	mov	r0, r3
 8001894:	f007 ffd4 	bl	8009840 <f_close>

	  //Now let's try and write a file "write.txt"
	  fres = f_open(&fil, "write.txt", FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
 8001898:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800189c:	221a      	movs	r2, #26
 800189e:	4932      	ldr	r1, [pc, #200]	; (8001968 <main+0x258>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fadd 	bl	8008e60 <f_open>
 80018a6:	4603      	mov	r3, r0
 80018a8:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if(fres == FR_OK) {
 80018ac:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <main+0x1ac>
		myprintf("I was able to open 'write.txt' for writing\r\n");
 80018b4:	482d      	ldr	r0, [pc, #180]	; (800196c <main+0x25c>)
 80018b6:	f7ff ff0f 	bl	80016d8 <myprintf>
 80018ba:	e005      	b.n	80018c8 <main+0x1b8>
	  } else {
		myprintf("f_open error (%i)\r\n", fres);
 80018bc:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80018c0:	4619      	mov	r1, r3
 80018c2:	4825      	ldr	r0, [pc, #148]	; (8001958 <main+0x248>)
 80018c4:	f7ff ff08 	bl	80016d8 <myprintf>
	  }

	  //Copy in a string
	  strncpy((char*)readBuf, "a new file is made!", 19);
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	4a28      	ldr	r2, [pc, #160]	; (8001970 <main+0x260>)
 80018ce:	461c      	mov	r4, r3
 80018d0:	4615      	mov	r5, r2
 80018d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018d6:	682b      	ldr	r3, [r5, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	8022      	strh	r2, [r4, #0]
 80018dc:	3402      	adds	r4, #2
 80018de:	0c1b      	lsrs	r3, r3, #16
 80018e0:	7023      	strb	r3, [r4, #0]
	  UINT bytesWrote;
	  fres = f_write(&fil, readBuf, 19, &bytesWrote);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	f107 0108 	add.w	r1, r7, #8
 80018e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80018ec:	2213      	movs	r2, #19
 80018ee:	f007 fdb4 	bl	800945a <f_write>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f887 349f 	strb.w	r3, [r7, #1183]	; 0x49f
	  if(fres == FR_OK) {
 80018f8:	f897 349f 	ldrb.w	r3, [r7, #1183]	; 0x49f
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d109      	bne.n	8001914 <main+0x204>
		myprintf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 8001900:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8001904:	f2a3 439c 	subw	r3, r3, #1180	; 0x49c
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	4819      	ldr	r0, [pc, #100]	; (8001974 <main+0x264>)
 800190e:	f7ff fee3 	bl	80016d8 <myprintf>
 8001912:	e002      	b.n	800191a <main+0x20a>
	  } else {
		myprintf("f_write error (%i)\r\n");
 8001914:	4818      	ldr	r0, [pc, #96]	; (8001978 <main+0x268>)
 8001916:	f7ff fedf 	bl	80016d8 <myprintf>
	  }

	  //Be a tidy kiwi - don't forget to close your file!
	  f_close(&fil);
 800191a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800191e:	4618      	mov	r0, r3
 8001920:	f007 ff8e 	bl	8009840 <f_close>

	  //We're done, so de-mount the drive
	  f_mount(NULL, "", 0);
 8001924:	2200      	movs	r2, #0
 8001926:	4907      	ldr	r1, [pc, #28]	; (8001944 <main+0x234>)
 8001928:	2000      	movs	r0, #0
 800192a:	f007 fa53 	bl	8008dd4 <f_mount>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800192e:	e7fe      	b.n	800192e <main+0x21e>
 8001930:	20000248 	.word	0x20000248
 8001934:	200003b0 	.word	0x200003b0
 8001938:	200003b4 	.word	0x200003b4
 800193c:	20000364 	.word	0x20000364
 8001940:	0800b288 	.word	0x0800b288
 8001944:	0800b2a8 	.word	0x0800b2a8
 8001948:	0800b2ac 	.word	0x0800b2ac
 800194c:	0800b2c4 	.word	0x0800b2c4
 8001950:	0800b2dc 	.word	0x0800b2dc
 8001954:	0800b324 	.word	0x0800b324
 8001958:	0800b330 	.word	0x0800b330
 800195c:	0800b344 	.word	0x0800b344
 8001960:	0800b374 	.word	0x0800b374
 8001964:	0800b3a0 	.word	0x0800b3a0
 8001968:	0800b3b4 	.word	0x0800b3b4
 800196c:	0800b3c0 	.word	0x0800b3c0
 8001970:	0800b3f0 	.word	0x0800b3f0
 8001974:	0800b404 	.word	0x0800b404
 8001978:	0800b428 	.word	0x0800b428

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b096      	sub	sp, #88	; 0x58
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	2244      	movs	r2, #68	; 0x44
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f008 f938 	bl	8009c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	463b      	mov	r3, r7
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800199e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80019a2:	f002 fb0b 	bl	8003fbc <HAL_PWREx_ControlVoltageScaling>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80019ac:	f000 fa50 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80019b0:	2310      	movs	r3, #16
 80019b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80019bc:	2360      	movs	r3, #96	; 0x60
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4618      	mov	r0, r3
 80019ca:	f002 fb4d 	bl	8004068 <HAL_RCC_OscConfig>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80019d4:	f000 fa3c 	bl	8001e50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d8:	230f      	movs	r3, #15
 80019da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80019dc:	2300      	movs	r3, #0
 80019de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	2100      	movs	r1, #0
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 ff15 	bl	8004820 <HAL_RCC_ClockConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80019fc:	f000 fa28 	bl	8001e50 <Error_Handler>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3758      	adds	r7, #88	; 0x58
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a0e:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <MX_I2C1_Init+0x78>)
 8001a10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a14:	f640 6214 	movw	r2, #3604	; 0xe14
 8001a18:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a32:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a46:	f001 fbbb 	bl	80031c0 <HAL_I2C_Init>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a50:	f000 f9fe 	bl	8001e50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a54:	2100      	movs	r1, #0
 8001a56:	4809      	ldr	r0, [pc, #36]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a58:	f002 fa0a 	bl	8003e70 <HAL_I2CEx_ConfigAnalogFilter>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001a62:	f000 f9f5 	bl	8001e50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001a66:	2100      	movs	r1, #0
 8001a68:	4804      	ldr	r0, [pc, #16]	; (8001a7c <MX_I2C1_Init+0x74>)
 8001a6a:	f002 fa4c 	bl	8003f06 <HAL_I2CEx_ConfigDigitalFilter>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001a74:	f000 f9ec 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a78:	bf00      	nop
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000248 	.word	0x20000248
 8001a80:	40005400 	.word	0x40005400

08001a84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a88:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001a8a:	4a1c      	ldr	r2, [pc, #112]	; (8001afc <MX_SPI1_Init+0x78>)
 8001a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a8e:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001a9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001aa2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ab2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ab6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001aca:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001adc:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ade:	2208      	movs	r2, #8
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ae2:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_SPI1_Init+0x74>)
 8001ae4:	f003 fd14 	bl	8005510 <HAL_SPI_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001aee:	f000 f9af 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	2000029c 	.word	0x2000029c
 8001afc:	40013000 	.word	0x40013000

08001b00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <MX_SPI2_Init+0x78>)
 8001b08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b0a:	4b1a      	ldr	r3, [pc, #104]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b10:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b12:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b20:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b26:	4b13      	ldr	r3, [pc, #76]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b2c:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b32:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b36:	2238      	movs	r2, #56	; 0x38
 8001b38:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b3a:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b46:	4b0b      	ldr	r3, [pc, #44]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b4e:	2207      	movs	r2, #7
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b5a:	2208      	movs	r2, #8
 8001b5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <MX_SPI2_Init+0x74>)
 8001b60:	f003 fcd6 	bl	8005510 <HAL_SPI_Init>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001b6a:	f000 f971 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000300 	.word	0x20000300
 8001b78:	40003800 	.word	0x40003800

08001b7c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b82:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <MX_TIM16_Init+0x4c>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 5000;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8e:	4b0d      	ldr	r3, [pc, #52]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000;
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b96:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001b9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <MX_TIM16_Init+0x48>)
 8001bb0:	f004 fbbe 	bl	8006330 <HAL_TIM_Base_Init>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001bba:	f000 f949 	bl	8001e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000364 	.word	0x20000364
 8001bc8:	40014400 	.word	0x40014400

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08a      	sub	sp, #40	; 0x28
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4a7f      	ldr	r2, [pc, #508]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4b7d      	ldr	r3, [pc, #500]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	4b7a      	ldr	r3, [pc, #488]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4a79      	ldr	r2, [pc, #484]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4b77      	ldr	r3, [pc, #476]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c12:	4b74      	ldr	r3, [pc, #464]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a73      	ldr	r2, [pc, #460]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b71      	ldr	r3, [pc, #452]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2a:	4b6e      	ldr	r3, [pc, #440]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	4a6d      	ldr	r2, [pc, #436]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c36:	4b6b      	ldr	r3, [pc, #428]	; (8001de4 <MX_GPIO_Init+0x218>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3|SD_LC_Pin, GPIO_PIN_SET);
 8001c42:	2201      	movs	r2, #1
 8001c44:	2118      	movs	r1, #24
 8001c46:	4868      	ldr	r0, [pc, #416]	; (8001de8 <MX_GPIO_Init+0x21c>)
 8001c48:	f001 fa88 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_GPS_Pin|SD_NSS_Pin, GPIO_PIN_RESET);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2118      	movs	r1, #24
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f001 fa82 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, POWER_SW_Pin|SS1_Pin|SS2_Pin, GPIO_PIN_RESET);
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 8001c5e:	4862      	ldr	r0, [pc, #392]	; (8001de8 <MX_GPIO_Init+0x21c>)
 8001c60:	f001 fa7c 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_LC2_GPIO_Port, LoRa_LC2_Pin, GPIO_PIN_SET);
 8001c64:	2201      	movs	r2, #1
 8001c66:	2104      	movs	r1, #4
 8001c68:	4860      	ldr	r0, [pc, #384]	; (8001dec <MX_GPIO_Init+0x220>)
 8001c6a:	f001 fa77 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, READY_LED_Pin|STATUS_LED_Pin|LORA_NSS_Pin|SS4_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 8001c74:	485d      	ldr	r0, [pc, #372]	; (8001dec <MX_GPIO_Init+0x220>)
 8001c76:	f001 fa71 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_LC3_Pin|LORA_LC1_Pin|RESET_n_MUX_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001c80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c84:	f001 fa6a 	bl	800315c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_3V3_Pin ADC_BATTERIE_Pin */
  GPIO_InitStruct.Pin = ADC_3V3_Pin|ADC_BATTERIE_Pin;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c8c:	230b      	movs	r3, #11
 8001c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 0314 	add.w	r3, r7, #20
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4853      	ldr	r0, [pc, #332]	; (8001de8 <MX_GPIO_Init+0x21c>)
 8001c9c:	f001 f89c 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3 SD_LC_Pin POWER_SW_Pin SS1_Pin
                           SS2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|SD_LC_Pin|POWER_SW_Pin|SS1_Pin
 8001ca0:	f241 4338 	movw	r3, #5176	; 0x1438
 8001ca4:	617b      	str	r3, [r7, #20]
                          |SS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	484b      	ldr	r0, [pc, #300]	; (8001de8 <MX_GPIO_Init+0x21c>)
 8001cba:	f001 f88d 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cce:	2308      	movs	r3, #8
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cdc:	f001 f87c 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_GPS_Pin LORA_DIO4_Pin LORA_DIO5_Pin Reset_LoRa_Pin */
  GPIO_InitStruct.Pin = INT_GPS_Pin|LORA_DIO4_Pin|LORA_DIO5_Pin|Reset_LoRa_Pin;
 8001ce0:	f240 7304 	movw	r3, #1796	; 0x704
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cf8:	f001 f86e 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_GPS_Pin SD_NSS_Pin RESET_n_MUX_Pin */
  GPIO_InitStruct.Pin = RESET_GPS_Pin|SD_NSS_Pin|RESET_n_MUX_Pin;
 8001cfc:	f248 0318 	movw	r3, #32792	; 0x8018
 8001d00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d0e:	f107 0314 	add.w	r3, r7, #20
 8001d12:	4619      	mov	r1, r3
 8001d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d18:	f001 f85e 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_AS_Pin INT2_AS_Pin INT_SS3_Pin INT_SS4_Pin */
  GPIO_InitStruct.Pin = INT1_AS_Pin|INT2_AS_Pin|INT_SS3_Pin|INT_SS4_Pin;
 8001d1c:	23a3      	movs	r3, #163	; 0xa3
 8001d1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	482f      	ldr	r0, [pc, #188]	; (8001dec <MX_GPIO_Init+0x220>)
 8001d30:	f001 f852 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_LC2_Pin */
  GPIO_InitStruct.Pin = LoRa_LC2_Pin;
 8001d34:	2304      	movs	r3, #4
 8001d36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d38:	2311      	movs	r3, #17
 8001d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LoRa_LC2_GPIO_Port, &GPIO_InitStruct);
 8001d44:	f107 0314 	add.w	r3, r7, #20
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4828      	ldr	r0, [pc, #160]	; (8001dec <MX_GPIO_Init+0x220>)
 8001d4c:	f001 f844 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_LED_Pin STATUS_LED_Pin LORA_NSS_Pin SS4_Pin */
  GPIO_InitStruct.Pin = READY_LED_Pin|STATUS_LED_Pin|LORA_NSS_Pin|SS4_Pin;
 8001d50:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 8001d54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d62:	f107 0314 	add.w	r3, r7, #20
 8001d66:	4619      	mov	r1, r3
 8001d68:	4820      	ldr	r0, [pc, #128]	; (8001dec <MX_GPIO_Init+0x220>)
 8001d6a:	f001 f835 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_DIO0_Pin LORA_DIO1_Pin LORA_DIO2_Pin LORA_DIO3_Pin
                           INT_SS1_Pin */
  GPIO_InitStruct.Pin = LORA_DIO0_Pin|LORA_DIO1_Pin|LORA_DIO2_Pin|LORA_DIO3_Pin
 8001d6e:	f44f 633c 	mov.w	r3, #3008	; 0xbc0
 8001d72:	617b      	str	r3, [r7, #20]
                          |INT_SS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	4619      	mov	r1, r3
 8001d82:	4819      	ldr	r0, [pc, #100]	; (8001de8 <MX_GPIO_Init+0x21c>)
 8001d84:	f001 f828 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_LC3_Pin LORA_LC1_Pin */
  GPIO_InitStruct.Pin = LORA_LC3_Pin|LORA_LC1_Pin;
 8001d88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001d8e:	2311      	movs	r3, #17
 8001d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f001 f818 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_SS2_Pin */
  GPIO_InitStruct.Pin = INT_SS2_Pin;
 8001da8:	2304      	movs	r3, #4
 8001daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_SS2_GPIO_Port, &GPIO_InitStruct);
 8001db4:	f107 0314 	add.w	r3, r7, #20
 8001db8:	4619      	mov	r1, r3
 8001dba:	480d      	ldr	r0, [pc, #52]	; (8001df0 <MX_GPIO_Init+0x224>)
 8001dbc:	f001 f80c 	bl	8002dd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS3_Pin */
  GPIO_InitStruct.Pin = SS3_Pin;
 8001dc0:	2310      	movs	r3, #16
 8001dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dc4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8001dce:	f107 0314 	add.w	r3, r7, #20
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_GPIO_Init+0x220>)
 8001dd6:	f000 ffff 	bl	8002dd8 <HAL_GPIO_Init>

}
 8001dda:	bf00      	nop
 8001ddc:	3728      	adds	r7, #40	; 0x28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	48000800 	.word	0x48000800
 8001dec:	48000400 	.word	0x48000400
 8001df0:	48000c00 	.word	0x48000c00

08001df4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b088      	sub	sp, #32
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a11      	ldr	r2, [pc, #68]	; (8001e44 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d11a      	bne.n	8001e3a <HAL_TIM_PeriodElapsedCallback+0x46>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001e04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e08:	480f      	ldr	r0, [pc, #60]	; (8001e48 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e0a:	f001 f9bf 	bl	800318c <HAL_GPIO_TogglePin>
	    Flow();
 8001e0e:	f7ff fc27 	bl	8001660 <Flow>

	    PCA9847_SetChannel(&multiplexer, 3);
 8001e12:	2103      	movs	r1, #3
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001e16:	f000 fddb 	bl	80029d0 <PCA9847_SetChannel>
		sModeOneData_t data1;
		sModeTwoData_t data2;
		AS7341_startMeasure(eF1F4ClearNIR);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f000 fc4a 	bl	80026b4 <AS7341_startMeasure>
		data1 = AS7341_ReadSpectralDataOne();
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4618      	mov	r0, r3
 8001e26:	f000 fcd5 	bl	80027d4 <AS7341_ReadSpectralDataOne>
		AS7341_startMeasure(eF5F8ClearNIR);
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f000 fc42 	bl	80026b4 <AS7341_startMeasure>
		data2 = AS7341_ReadSpectralDataTwo();
 8001e30:	f107 0308 	add.w	r3, r7, #8
 8001e34:	4618      	mov	r0, r3
 8001e36:	f000 fcfb 	bl	8002830 <AS7341_ReadSpectralDataTwo>

	}

}
 8001e3a:	bf00      	nop
 8001e3c:	3720      	adds	r7, #32
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000364 	.word	0x20000364
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	200003b0 	.word	0x200003b0

08001e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e54:	b672      	cpsid	i
}
 8001e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e58:	e7fe      	b.n	8001e58 <Error_Handler+0x8>
	...

08001e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e62:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e66:	4a0e      	ldr	r2, [pc, #56]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e6e:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6593      	str	r3, [r2, #88]	; 0x58
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x44>)
 8001e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000

08001ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b0aa      	sub	sp, #168	; 0xa8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ebc:	f107 0310 	add.w	r3, r7, #16
 8001ec0:	2284      	movs	r2, #132	; 0x84
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f007 fe9b 	bl	8009c00 <memset>
  if(hi2c->Instance==I2C1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a21      	ldr	r2, [pc, #132]	; (8001f54 <HAL_I2C_MspInit+0xb0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d13b      	bne.n	8001f4c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001ed4:	2340      	movs	r3, #64	; 0x40
 8001ed6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f002 fe89 	bl	8004bf8 <HAL_RCCEx_PeriphCLKConfig>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d001      	beq.n	8001ef0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001eec:	f7ff ffb0 	bl	8001e50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	4a18      	ldr	r2, [pc, #96]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f10:	2312      	movs	r3, #18
 8001f12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f22:	2304      	movs	r3, #4
 8001f24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f28:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480b      	ldr	r0, [pc, #44]	; (8001f5c <HAL_I2C_MspInit+0xb8>)
 8001f30:	f000 ff52 	bl	8002dd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f3e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f40:	4b05      	ldr	r3, [pc, #20]	; (8001f58 <HAL_I2C_MspInit+0xb4>)
 8001f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f4c:	bf00      	nop
 8001f4e:	37a8      	adds	r7, #168	; 0xa8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40005400 	.word	0x40005400
 8001f58:	40021000 	.word	0x40021000
 8001f5c:	48000400 	.word	0x48000400

08001f60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08c      	sub	sp, #48	; 0x30
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <HAL_SPI_MspInit+0xdc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d129      	bne.n	8001fd6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	4a2e      	ldr	r2, [pc, #184]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001f88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f8c:	6613      	str	r3, [r2, #96]	; 0x60
 8001f8e:	4b2c      	ldr	r3, [pc, #176]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b29      	ldr	r3, [pc, #164]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a28      	ldr	r2, [pc, #160]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001fb2:	23e0      	movs	r3, #224	; 0xe0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fc2:	2305      	movs	r3, #5
 8001fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd0:	f000 ff02 	bl	8002dd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fd4:	e02d      	b.n	8002032 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI2)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a1a      	ldr	r2, [pc, #104]	; (8002044 <HAL_SPI_MspInit+0xe4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d128      	bne.n	8002032 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001fe0:	4b17      	ldr	r3, [pc, #92]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a16      	ldr	r2, [pc, #88]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
 8001fec:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a10      	ldr	r2, [pc, #64]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8001ffe:	f043 0302 	orr.w	r3, r3, #2
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <HAL_SPI_MspInit+0xe0>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_MISO_Pin|LORA_MOSI_Pin;
 8002010:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002022:	2305      	movs	r3, #5
 8002024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002026:	f107 031c 	add.w	r3, r7, #28
 800202a:	4619      	mov	r1, r3
 800202c:	4806      	ldr	r0, [pc, #24]	; (8002048 <HAL_SPI_MspInit+0xe8>)
 800202e:	f000 fed3 	bl	8002dd8 <HAL_GPIO_Init>
}
 8002032:	bf00      	nop
 8002034:	3730      	adds	r7, #48	; 0x30
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40013000 	.word	0x40013000
 8002040:	40021000 	.word	0x40021000
 8002044:	40003800 	.word	0x40003800
 8002048:	48000400 	.word	0x48000400

0800204c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a0d      	ldr	r2, [pc, #52]	; (8002090 <HAL_TIM_Base_MspInit+0x44>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d113      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_TIM_Base_MspInit+0x48>)
 8002060:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_TIM_Base_MspInit+0x48>)
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	6613      	str	r3, [r2, #96]	; 0x60
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_TIM_Base_MspInit+0x48>)
 800206c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2019      	movs	r0, #25
 800207c:	f000 fe75 	bl	8002d6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002080:	2019      	movs	r0, #25
 8002082:	f000 fe8e 	bl	8002da2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40014400 	.word	0x40014400
 8002094:	40021000 	.word	0x40021000

08002098 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800209c:	e7fe      	b.n	800209c <NMI_Handler+0x4>

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 fd22 	bl	8002b2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020f2:	f004 f9e5 	bl	80064c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000364 	.word	0x20000364

08002100 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
	return 1;
 8002104:	2301      	movs	r3, #1
}
 8002106:	4618      	mov	r0, r3
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <_kill>:

int _kill(int pid, int sig)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800211a:	f007 fd27 	bl	8009b6c <__errno>
 800211e:	4603      	mov	r3, r0
 8002120:	2216      	movs	r2, #22
 8002122:	601a      	str	r2, [r3, #0]
	return -1;
 8002124:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002128:	4618      	mov	r0, r3
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_exit>:

void _exit (int status)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002138:	f04f 31ff 	mov.w	r1, #4294967295
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ffe7 	bl	8002110 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002142:	e7fe      	b.n	8002142 <_exit+0x12>

08002144 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002150:	2300      	movs	r3, #0
 8002152:	617b      	str	r3, [r7, #20]
 8002154:	e00a      	b.n	800216c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002156:	f3af 8000 	nop.w
 800215a:	4601      	mov	r1, r0
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	60ba      	str	r2, [r7, #8]
 8002162:	b2ca      	uxtb	r2, r1
 8002164:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3301      	adds	r3, #1
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	429a      	cmp	r2, r3
 8002172:	dbf0      	blt.n	8002156 <_read+0x12>
	}

return len;
 8002174:	687b      	ldr	r3, [r7, #4]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b086      	sub	sp, #24
 8002182:	af00      	add	r7, sp, #0
 8002184:	60f8      	str	r0, [r7, #12]
 8002186:	60b9      	str	r1, [r7, #8]
 8002188:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800218a:	2300      	movs	r3, #0
 800218c:	617b      	str	r3, [r7, #20]
 800218e:	e009      	b.n	80021a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	60ba      	str	r2, [r7, #8]
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	3301      	adds	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	dbf1      	blt.n	8002190 <_write+0x12>
	}
	return len;
 80021ac:	687b      	ldr	r3, [r7, #4]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_close>:

int _close(int file)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
	return -1;
 80021be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021de:	605a      	str	r2, [r3, #4]
	return 0;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <_isatty>:

int _isatty(int file)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
	return 1;
 80021f6:	2301      	movs	r3, #1
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002228:	4a14      	ldr	r2, [pc, #80]	; (800227c <_sbrk+0x5c>)
 800222a:	4b15      	ldr	r3, [pc, #84]	; (8002280 <_sbrk+0x60>)
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002234:	4b13      	ldr	r3, [pc, #76]	; (8002284 <_sbrk+0x64>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <_sbrk+0x64>)
 800223e:	4a12      	ldr	r2, [pc, #72]	; (8002288 <_sbrk+0x68>)
 8002240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <_sbrk+0x64>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4413      	add	r3, r2
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	429a      	cmp	r2, r3
 800224e:	d207      	bcs.n	8002260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002250:	f007 fc8c 	bl	8009b6c <__errno>
 8002254:	4603      	mov	r3, r0
 8002256:	220c      	movs	r2, #12
 8002258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	e009      	b.n	8002274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <_sbrk+0x64>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <_sbrk+0x64>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <_sbrk+0x64>)
 8002270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002272:	68fb      	ldr	r3, [r7, #12]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20018000 	.word	0x20018000
 8002280:	00000400 	.word	0x00000400
 8002284:	200004b8 	.word	0x200004b8
 8002288:	20000520 	.word	0x20000520

0800228c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022b4:	f7ff ffea 	bl	800228c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022b8:	480c      	ldr	r0, [pc, #48]	; (80022ec <LoopForever+0x6>)
  ldr r1, =_edata
 80022ba:	490d      	ldr	r1, [pc, #52]	; (80022f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80022bc:	4a0d      	ldr	r2, [pc, #52]	; (80022f4 <LoopForever+0xe>)
  movs r3, #0
 80022be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022c0:	e002      	b.n	80022c8 <LoopCopyDataInit>

080022c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c6:	3304      	adds	r3, #4

080022c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022cc:	d3f9      	bcc.n	80022c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ce:	4a0a      	ldr	r2, [pc, #40]	; (80022f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022d0:	4c0a      	ldr	r4, [pc, #40]	; (80022fc <LoopForever+0x16>)
  movs r3, #0
 80022d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d4:	e001      	b.n	80022da <LoopFillZerobss>

080022d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d8:	3204      	adds	r2, #4

080022da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022dc:	d3fb      	bcc.n	80022d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022de:	f007 fc5d 	bl	8009b9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80022e2:	f7ff fa15 	bl	8001710 <main>

080022e6 <LoopForever>:

LoopForever:
    b LoopForever
 80022e6:	e7fe      	b.n	80022e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80022e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80022f4:	0800b73c 	.word	0x0800b73c
  ldr r2, =_sbss
 80022f8:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80022fc:	2000051c 	.word	0x2000051c

08002300 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC1_2_IRQHandler>
	...

08002304 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <DEV_I2C_Init+0x24>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8002314:	4a05      	ldr	r2, [pc, #20]	; (800232c <DEV_I2C_Init+0x28>)
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	7013      	strb	r3, [r2, #0]
#endif
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200004bc 	.word	0x200004bc
 800232c:	200004bd 	.word	0x200004bd

08002330 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af04      	add	r7, sp, #16
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8002340:	2300      	movs	r3, #0
 8002342:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <I2C_Write_Byte+0x40>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	b299      	uxth	r1, r3
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	b29a      	uxth	r2, r3
 8002352:	2320      	movs	r3, #32
 8002354:	9302      	str	r3, [sp, #8]
 8002356:	2301      	movs	r3, #1
 8002358:	9301      	str	r3, [sp, #4]
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	2301      	movs	r3, #1
 8002362:	4804      	ldr	r0, [pc, #16]	; (8002374 <I2C_Write_Byte+0x44>)
 8002364:	f001 f8b0 	bl	80034c8 <HAL_I2C_Mem_Write>
#endif
}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200004bd 	.word	0x200004bd
 8002374:	20000248 	.word	0x20000248

08002378 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af04      	add	r7, sp, #16
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8002382:	2300      	movs	r3, #0
 8002384:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8002386:	4b0b      	ldr	r3, [pc, #44]	; (80023b4 <I2C_Read_Byte+0x3c>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b29b      	uxth	r3, r3
 800238c:	3301      	adds	r3, #1
 800238e:	b299      	uxth	r1, r3
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	b29a      	uxth	r2, r3
 8002394:	2320      	movs	r3, #32
 8002396:	9302      	str	r3, [sp, #8]
 8002398:	2301      	movs	r3, #1
 800239a:	9301      	str	r3, [sp, #4]
 800239c:	f107 030c 	add.w	r3, r7, #12
 80023a0:	9300      	str	r3, [sp, #0]
 80023a2:	2301      	movs	r3, #1
 80023a4:	4804      	ldr	r0, [pc, #16]	; (80023b8 <I2C_Read_Byte+0x40>)
 80023a6:	f001 f9a3 	bl	80036f0 <HAL_I2C_Mem_Read>
	return Buf[0];
 80023aa:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	200004bd 	.word	0x200004bd
 80023b8:	20000248 	.word	0x20000248

080023bc <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	4603      	mov	r3, r0
 80023c4:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ffd5 	bl	8002378 <I2C_Read_Byte>
 80023ce:	4603      	mov	r3, r0
 80023d0:	b2db      	uxtb	r3, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	460a      	mov	r2, r1
 80023e4:	71fb      	strb	r3, [r7, #7]
 80023e6:	4613      	mov	r3, r2
 80023e8:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 80023ea:	79ba      	ldrb	r2, [r7, #6]
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff9d 	bl	8002330 <I2C_Write_Byte>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 800240a:	2072      	movs	r0, #114	; 0x72
 800240c:	f7ff ff7a 	bl	8002304 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8002410:	2001      	movs	r0, #1
 8002412:	f000 f80b 	bl	800242c <AS7341_Enable>
	measureMode=mode;
 8002416:	4a04      	ldr	r2, [pc, #16]	; (8002428 <AS7341_Init+0x28>)
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	7013      	strb	r3, [r2, #0]
	return 0;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200004be 	.word	0x200004be

0800242c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8002434:	2080      	movs	r0, #128	; 0x80
 8002436:	f7ff ffc1 	bl	80023bc <AS7341_Read_Byte>
 800243a:	4603      	mov	r3, r0
 800243c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d104      	bne.n	800244e <AS7341_Enable+0x22>
    data = data | (1<<0);
 8002444:	7bfb      	ldrb	r3, [r7, #15]
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e003      	b.n	8002456 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 800244e:	7bfb      	ldrb	r3, [r7, #15]
 8002450:	f023 0301 	bic.w	r3, r3, #1
 8002454:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 8002456:	7bfb      	ldrb	r3, [r7, #15]
 8002458:	4619      	mov	r1, r3
 800245a:	2080      	movs	r0, #128	; 0x80
 800245c:	f7ff ffbd 	bl	80023da <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <AS7341_Enable+0x4c>)
 8002462:	f007 ff49 	bl	800a2f8 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8002466:	2130      	movs	r1, #48	; 0x30
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff ffb6 	bl	80023da <AS7341_Write_Byte>
}
 800246e:	bf00      	nop
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	0800b440 	.word	0x0800b440

0800247c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8002484:	2080      	movs	r0, #128	; 0x80
 8002486:	f7ff ff99 	bl	80023bc <AS7341_Read_Byte>
 800248a:	4603      	mov	r3, r0
 800248c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d104      	bne.n	800249e <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8002494:	7bfb      	ldrb	r3, [r7, #15]
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	73fb      	strb	r3, [r7, #15]
 800249c:	e003      	b.n	80024a6 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	f023 0302 	bic.w	r3, r3, #2
 80024a4:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	4619      	mov	r1, r3
 80024aa:	2080      	movs	r0, #128	; 0x80
 80024ac:	f7ff ff95 	bl	80023da <AS7341_Write_Byte>
}
 80024b0:	bf00      	nop
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 80024c0:	2080      	movs	r0, #128	; 0x80
 80024c2:	f7ff ff7b 	bl	80023bc <AS7341_Read_Byte>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d104      	bne.n	80024da <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	f043 0310 	orr.w	r3, r3, #16
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	e003      	b.n	80024e2 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 80024da:	7bfb      	ldrb	r3, [r7, #15]
 80024dc:	f023 0310 	bic.w	r3, r3, #16
 80024e0:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	4619      	mov	r1, r3
 80024e6:	2080      	movs	r0, #128	; 0x80
 80024e8:	f7ff ff77 	bl	80023da <AS7341_Write_Byte>
}
 80024ec:	bf00      	nop
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 80024fe:	2001      	movs	r0, #1
 8002500:	f000 fa1f 	bl	8002942 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 8002504:	2070      	movs	r0, #112	; 0x70
 8002506:	f7ff ff59 	bl	80023bc <AS7341_Read_Byte>
 800250a:	4603      	mov	r3, r0
 800250c:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d015      	beq.n	8002540 <AS7341_Config+0x4c>
 8002514:	2b03      	cmp	r3, #3
 8002516:	dc18      	bgt.n	800254a <AS7341_Config+0x56>
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <AS7341_Config+0x2e>
 800251c:	2b01      	cmp	r3, #1
 800251e:	d005      	beq.n	800252c <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8002520:	e013      	b.n	800254a <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8002522:	7bfb      	ldrb	r3, [r7, #15]
 8002524:	f023 0303 	bic.w	r3, r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
	break;
 800252a:	e00f      	b.n	800254c <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 800252c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002530:	f023 0303 	bic.w	r3, r3, #3
 8002534:	b25b      	sxtb	r3, r3
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	b25b      	sxtb	r3, r3
 800253c:	73fb      	strb	r3, [r7, #15]
	break;
 800253e:	e005      	b.n	800254c <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8002540:	7bfb      	ldrb	r3, [r7, #15]
 8002542:	f043 0303 	orr.w	r3, r3, #3
 8002546:	73fb      	strb	r3, [r7, #15]
	break;
 8002548:	e000      	b.n	800254c <AS7341_Config+0x58>
    default : break;
 800254a:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 800254c:	7bfb      	ldrb	r3, [r7, #15]
 800254e:	4619      	mov	r1, r3
 8002550:	2070      	movs	r0, #112	; 0x70
 8002552:	f7ff ff42 	bl	80023da <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8002556:	2000      	movs	r0, #0
 8002558:	f000 f9f3 	bl	8002942 <AS7341_SetBank>
}
 800255c:	bf00      	nop
 800255e:	3710      	adds	r7, #16
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}

08002564 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8002568:	2130      	movs	r1, #48	; 0x30
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff ff35 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8002570:	2101      	movs	r1, #1
 8002572:	2001      	movs	r0, #1
 8002574:	f7ff ff31 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8002578:	2100      	movs	r1, #0
 800257a:	2002      	movs	r0, #2
 800257c:	f7ff ff2d 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8002580:	2100      	movs	r1, #0
 8002582:	2003      	movs	r0, #3
 8002584:	f7ff ff29 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8002588:	2100      	movs	r1, #0
 800258a:	2004      	movs	r0, #4
 800258c:	f7ff ff25 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8002590:	2142      	movs	r1, #66	; 0x42
 8002592:	2005      	movs	r0, #5
 8002594:	f7ff ff21 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8002598:	2100      	movs	r1, #0
 800259a:	2006      	movs	r0, #6
 800259c:	f7ff ff1d 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 80025a0:	2100      	movs	r1, #0
 80025a2:	2007      	movs	r0, #7
 80025a4:	f7ff ff19 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 80025a8:	2150      	movs	r1, #80	; 0x50
 80025aa:	2008      	movs	r0, #8
 80025ac:	f7ff ff15 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 80025b0:	2100      	movs	r1, #0
 80025b2:	2009      	movs	r0, #9
 80025b4:	f7ff ff11 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 80025b8:	2100      	movs	r1, #0
 80025ba:	200a      	movs	r0, #10
 80025bc:	f7ff ff0d 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 80025c0:	2100      	movs	r1, #0
 80025c2:	200b      	movs	r0, #11
 80025c4:	f7ff ff09 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 80025c8:	2120      	movs	r1, #32
 80025ca:	200c      	movs	r0, #12
 80025cc:	f7ff ff05 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 80025d0:	2104      	movs	r1, #4
 80025d2:	200d      	movs	r0, #13
 80025d4:	f7ff ff01 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 80025d8:	2100      	movs	r1, #0
 80025da:	200e      	movs	r0, #14
 80025dc:	f7ff fefd 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 80025e0:	2130      	movs	r1, #48	; 0x30
 80025e2:	200f      	movs	r0, #15
 80025e4:	f7ff fef9 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 80025e8:	2101      	movs	r1, #1
 80025ea:	2010      	movs	r0, #16
 80025ec:	f7ff fef5 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80025f0:	2150      	movs	r1, #80	; 0x50
 80025f2:	2011      	movs	r0, #17
 80025f4:	f7ff fef1 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80025f8:	2100      	movs	r1, #0
 80025fa:	2012      	movs	r0, #18
 80025fc:	f7ff feed 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8002600:	2106      	movs	r1, #6
 8002602:	2013      	movs	r0, #19
 8002604:	f7ff fee9 	bl	80023da <AS7341_Write_Byte>
}
 8002608:	bf00      	nop
 800260a:	bd80      	pop	{r7, pc}

0800260c <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8002610:	2100      	movs	r1, #0
 8002612:	2000      	movs	r0, #0
 8002614:	f7ff fee1 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 8002618:	2100      	movs	r1, #0
 800261a:	2001      	movs	r0, #1
 800261c:	f7ff fedd 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8002620:	2100      	movs	r1, #0
 8002622:	2002      	movs	r0, #2
 8002624:	f7ff fed9 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 8002628:	2140      	movs	r1, #64	; 0x40
 800262a:	2003      	movs	r0, #3
 800262c:	f7ff fed5 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8002630:	2102      	movs	r1, #2
 8002632:	2004      	movs	r0, #4
 8002634:	f7ff fed1 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 8002638:	2100      	movs	r1, #0
 800263a:	2005      	movs	r0, #5
 800263c:	f7ff fecd 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8002640:	2110      	movs	r1, #16
 8002642:	2006      	movs	r0, #6
 8002644:	f7ff fec9 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 8002648:	2103      	movs	r1, #3
 800264a:	2007      	movs	r0, #7
 800264c:	f7ff fec5 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8002650:	2150      	movs	r1, #80	; 0x50
 8002652:	2008      	movs	r0, #8
 8002654:	f7ff fec1 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 8002658:	2110      	movs	r1, #16
 800265a:	2009      	movs	r0, #9
 800265c:	f7ff febd 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8002660:	2103      	movs	r1, #3
 8002662:	200a      	movs	r0, #10
 8002664:	f7ff feb9 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8002668:	2100      	movs	r1, #0
 800266a:	200b      	movs	r0, #11
 800266c:	f7ff feb5 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8002670:	2100      	movs	r1, #0
 8002672:	200c      	movs	r0, #12
 8002674:	f7ff feb1 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8002678:	2100      	movs	r1, #0
 800267a:	200d      	movs	r0, #13
 800267c:	f7ff fead 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8002680:	2124      	movs	r1, #36	; 0x24
 8002682:	200e      	movs	r0, #14
 8002684:	f7ff fea9 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8002688:	2100      	movs	r1, #0
 800268a:	200f      	movs	r0, #15
 800268c:	f7ff fea5 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8002690:	2100      	movs	r1, #0
 8002692:	2010      	movs	r0, #16
 8002694:	f7ff fea1 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8002698:	2150      	movs	r1, #80	; 0x50
 800269a:	2011      	movs	r0, #17
 800269c:	f7ff fe9d 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80026a0:	2100      	movs	r1, #0
 80026a2:	2012      	movs	r0, #18
 80026a4:	f7ff fe99 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80026a8:	2106      	movs	r1, #6
 80026aa:	2013      	movs	r0, #19
 80026ac:	f7ff fe95 	bl	80023da <AS7341_Write_Byte>
}
 80026b0:	bf00      	nop
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 80026be:	2300      	movs	r3, #0
 80026c0:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 80026c2:	20a9      	movs	r0, #169	; 0xa9
 80026c4:	f7ff fe7a 	bl	80023bc <AS7341_Read_Byte>
 80026c8:	4603      	mov	r3, r0
 80026ca:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	f023 0310 	bic.w	r3, r3, #16
 80026d2:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	4619      	mov	r1, r3
 80026d8:	20a9      	movs	r0, #169	; 0xa9
 80026da:	f7ff fe7e 	bl	80023da <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fecc 	bl	800247c <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 80026e4:	2110      	movs	r1, #16
 80026e6:	20af      	movs	r0, #175	; 0xaf
 80026e8:	f7ff fe77 	bl	80023da <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 80026ec:	79fb      	ldrb	r3, [r7, #7]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 80026f2:	f7ff ff37 	bl	8002564 <F1F4_Clear_NIR>
 80026f6:	e004      	b.n	8002702 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 80026f8:	79fb      	ldrb	r3, [r7, #7]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d101      	bne.n	8002702 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 80026fe:	f7ff ff85 	bl	800260c <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fed8 	bl	80024b8 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <AS7341_startMeasure+0x9c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d106      	bne.n	800271e <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8002710:	2000      	movs	r0, #0
 8002712:	f000 f8bb 	bl	800288c <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8002716:	2001      	movs	r0, #1
 8002718:	f7ff feec 	bl	80024f4 <AS7341_Config>
 800271c:	e006      	b.n	800272c <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 800271e:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <AS7341_startMeasure+0x9c>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fee4 	bl	80024f4 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fea5 	bl	800247c <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8002732:	4b07      	ldr	r3, [pc, #28]	; (8002750 <AS7341_startMeasure+0x9c>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d105      	bne.n	8002746 <AS7341_startMeasure+0x92>
        while(!AS7341_MeasureComplete()){
 800273a:	bf00      	nop
 800273c:	f000 f80a 	bl	8002754 <AS7341_MeasureComplete>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0fa      	beq.n	800273c <AS7341_startMeasure+0x88>
        //DEV_Delay_ms(1);
        }
      }
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	200004be 	.word	0x200004be

08002754 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 800275a:	20a3      	movs	r0, #163	; 0xa3
 800275c:	f7ff fe2e 	bl	80023bc <AS7341_Read_Byte>
 8002760:	4603      	mov	r3, r0
 8002762:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8002764:	79fb      	ldrb	r3, [r7, #7]
 8002766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <AS7341_MeasureComplete+0x1e>
		return true;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8002772:	2300      	movs	r3, #0
	}
}
 8002774:	4618      	mov	r0, r3
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8002786:	2300      	movs	r3, #0
 8002788:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	b2db      	uxtb	r3, r3
 8002790:	3b6b      	subs	r3, #107	; 0x6b
 8002792:	b2db      	uxtb	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	f7ff fe11 	bl	80023bc <AS7341_Read_Byte>
 800279a:	4603      	mov	r3, r0
 800279c:	b29b      	uxth	r3, r3
 800279e:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 80027a0:	79fb      	ldrb	r3, [r7, #7]
 80027a2:	334b      	adds	r3, #75	; 0x4b
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fe06 	bl	80023bc <AS7341_Read_Byte>
 80027b0:	4603      	mov	r3, r0
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 80027b6:	897b      	ldrh	r3, [r7, #10]
 80027b8:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	b21a      	sxth	r2, r3
 80027c0:	893b      	ldrh	r3, [r7, #8]
 80027c2:	b21b      	sxth	r3, r3
 80027c4:	4313      	orrs	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	81fb      	strh	r3, [r7, #14]
  //DEV_Delay_ms(50);
  return channelData;
 80027ca:	89fb      	ldrh	r3, [r7, #14]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7ff ffcd 	bl	800277c <AS7341_GetChannelData>
 80027e2:	4603      	mov	r3, r0
 80027e4:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 80027e6:	2001      	movs	r0, #1
 80027e8:	f7ff ffc8 	bl	800277c <AS7341_GetChannelData>
 80027ec:	4603      	mov	r3, r0
 80027ee:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 80027f0:	2002      	movs	r0, #2
 80027f2:	f7ff ffc3 	bl	800277c <AS7341_GetChannelData>
 80027f6:	4603      	mov	r3, r0
 80027f8:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 80027fa:	2003      	movs	r0, #3
 80027fc:	f7ff ffbe 	bl	800277c <AS7341_GetChannelData>
 8002800:	4603      	mov	r3, r0
 8002802:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8002804:	2004      	movs	r0, #4
 8002806:	f7ff ffb9 	bl	800277c <AS7341_GetChannelData>
 800280a:	4603      	mov	r3, r0
 800280c:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 800280e:	2005      	movs	r0, #5
 8002810:	f7ff ffb4 	bl	800277c <AS7341_GetChannelData>
 8002814:	4603      	mov	r3, r0
 8002816:	82fb      	strh	r3, [r7, #22]
  return data;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	461c      	mov	r4, r3
 800281c:	f107 030c 	add.w	r3, r7, #12
 8002820:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002822:	6020      	str	r0, [r4, #0]
 8002824:	6061      	str	r1, [r4, #4]
 8002826:	60a2      	str	r2, [r4, #8]
}
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	371c      	adds	r7, #28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}

08002830 <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8002830:	b590      	push	{r4, r7, lr}
 8002832:	b087      	sub	sp, #28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff ff9f 	bl	800277c <AS7341_GetChannelData>
 800283e:	4603      	mov	r3, r0
 8002840:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8002842:	2001      	movs	r0, #1
 8002844:	f7ff ff9a 	bl	800277c <AS7341_GetChannelData>
 8002848:	4603      	mov	r3, r0
 800284a:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 800284c:	2002      	movs	r0, #2
 800284e:	f7ff ff95 	bl	800277c <AS7341_GetChannelData>
 8002852:	4603      	mov	r3, r0
 8002854:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8002856:	2003      	movs	r0, #3
 8002858:	f7ff ff90 	bl	800277c <AS7341_GetChannelData>
 800285c:	4603      	mov	r3, r0
 800285e:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8002860:	2004      	movs	r0, #4
 8002862:	f7ff ff8b 	bl	800277c <AS7341_GetChannelData>
 8002866:	4603      	mov	r3, r0
 8002868:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 800286a:	2005      	movs	r0, #5
 800286c:	f7ff ff86 	bl	800277c <AS7341_GetChannelData>
 8002870:	4603      	mov	r3, r0
 8002872:	82fb      	strh	r3, [r7, #22]
  return data;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	461c      	mov	r4, r3
 8002878:	f107 030c 	add.w	r3, r7, #12
 800287c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800287e:	6020      	str	r0, [r4, #0]
 8002880:	6061      	str	r1, [r4, #4]
 8002882:	60a2      	str	r2, [r4, #8]
}
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	371c      	adds	r7, #28
 8002888:	46bd      	mov	sp, r7
 800288a:	bd90      	pop	{r4, r7, pc}

0800288c <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8002896:	20be      	movs	r0, #190	; 0xbe
 8002898:	f7ff fd90 	bl	80023bc <AS7341_Read_Byte>
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 80028a0:	79fb      	ldrb	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d103      	bne.n	80028bc <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 80028bc:	7bfb      	ldrb	r3, [r7, #15]
 80028be:	4619      	mov	r1, r3
 80028c0:	20be      	movs	r0, #190	; 0xbe
 80028c2:	f7ff fd8a 	bl	80023da <AS7341_Write_Byte>
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	4603      	mov	r3, r0
 80028d6:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 80028d8:	79fb      	ldrb	r3, [r7, #7]
 80028da:	4619      	mov	r1, r3
 80028dc:	2081      	movs	r0, #129	; 0x81
 80028de:	f7ff fd7c 	bl	80023da <AS7341_Write_Byte>
}
 80028e2:	bf00      	nop
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}

080028ea <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b084      	sub	sp, #16
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	4603      	mov	r3, r0
 80028f2:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	4619      	mov	r1, r3
 8002904:	20ca      	movs	r0, #202	; 0xca
 8002906:	f7ff fd68 	bl	80023da <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	4619      	mov	r1, r3
 800290e:	20cb      	movs	r0, #203	; 0xcb
 8002910:	f7ff fd63 	bl	80023da <AS7341_Write_Byte>
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	4603      	mov	r3, r0
 8002924:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	2b0a      	cmp	r3, #10
 800292a:	d901      	bls.n	8002930 <AS7341_AGAIN_config+0x14>
 800292c:	230a      	movs	r3, #10
 800292e:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	4619      	mov	r1, r3
 8002934:	20aa      	movs	r0, #170	; 0xaa
 8002936:	f7ff fd50 	bl	80023da <AS7341_Write_Byte>
}
 800293a:	bf00      	nop
 800293c:	3708      	adds	r7, #8
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	4603      	mov	r3, r0
 800294a:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 800294c:	2300      	movs	r3, #0
 800294e:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8002950:	20a9      	movs	r0, #169	; 0xa9
 8002952:	f7ff fd33 	bl	80023bc <AS7341_Read_Byte>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 800295a:	79fb      	ldrb	r3, [r7, #7]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d103      	bne.n	8002968 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	f043 0310 	orr.w	r3, r3, #16
 8002966:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8002968:	79fb      	ldrb	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d103      	bne.n	8002976 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 800296e:	7bfb      	ldrb	r3, [r7, #15]
 8002970:	f023 0310 	bic.w	r3, r3, #16
 8002974:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	4619      	mov	r1, r3
 800297a:	20a9      	movs	r0, #169	; 0xa9
 800297c:	f7ff fd2d 	bl	80023da <AS7341_Write_Byte>
}
 8002980:	bf00      	nop
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <PCA9847_Initialise>:
#include "PCA9847.h"

uint8_t PCA9847_Initialise(PCA9847 *dev, I2C_HandleTypeDef *i2cHandle) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	601a      	str	r2, [r3, #0]

	/* Store number of transaction errors */
	uint8_t regData;
	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	73fb      	strb	r3, [r7, #15]

	/* Set to reset default state (all channels disabled) */
	regData = DISABLE_CHANNELS;
 800299c:	2300      	movs	r3, #0
 800299e:	737b      	strb	r3, [r7, #13]
	status = PCA9847_Write(dev, &regData);
 80029a0:	f107 030d 	add.w	r3, r7, #13
 80029a4:	4619      	mov	r1, r3
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f858 	bl	8002a5c <PCA9847_Write>
 80029ac:	4603      	mov	r3, r0
 80029ae:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	461a      	mov	r2, r3
 80029be:	7bfb      	ldrb	r3, [r7, #15]
 80029c0:	4413      	add	r3, r2
 80029c2:	73fb      	strb	r3, [r7, #15]

	return errNum;
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <PCA9847_SetChannel>:

void PCA9847_SetChannel(PCA9847 *dev, uint8_t channelNumber) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	switch (channelNumber) {
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	2b07      	cmp	r3, #7
 80029e0:	d82a      	bhi.n	8002a38 <PCA9847_SetChannel+0x68>
 80029e2:	a201      	add	r2, pc, #4	; (adr r2, 80029e8 <PCA9847_SetChannel+0x18>)
 80029e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e8:	08002a09 	.word	0x08002a09
 80029ec:	08002a0f 	.word	0x08002a0f
 80029f0:	08002a15 	.word	0x08002a15
 80029f4:	08002a1b 	.word	0x08002a1b
 80029f8:	08002a21 	.word	0x08002a21
 80029fc:	08002a27 	.word	0x08002a27
 8002a00:	08002a2d 	.word	0x08002a2d
 8002a04:	08002a33 	.word	0x08002a33
	case 0:
		regData = ENABLE_CHANNEL_0;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	73fb      	strb	r3, [r7, #15]
		break;
 8002a0c:	e01a      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 1:
		regData = ENABLE_CHANNEL_1;
 8002a0e:	2309      	movs	r3, #9
 8002a10:	73fb      	strb	r3, [r7, #15]
		break;
 8002a12:	e017      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 2:
		regData = ENABLE_CHANNEL_2;
 8002a14:	230a      	movs	r3, #10
 8002a16:	73fb      	strb	r3, [r7, #15]
		break;
 8002a18:	e014      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 3:
		regData = ENABLE_CHANNEL_3;
 8002a1a:	230b      	movs	r3, #11
 8002a1c:	73fb      	strb	r3, [r7, #15]
		break;
 8002a1e:	e011      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 4:
		regData = ENABLE_CHANNEL_4;
 8002a20:	230c      	movs	r3, #12
 8002a22:	73fb      	strb	r3, [r7, #15]
		break;
 8002a24:	e00e      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 5:
		regData = ENABLE_CHANNEL_5;
 8002a26:	230d      	movs	r3, #13
 8002a28:	73fb      	strb	r3, [r7, #15]
		break;
 8002a2a:	e00b      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 6:
		regData = ENABLE_CHANNEL_6;
 8002a2c:	230e      	movs	r3, #14
 8002a2e:	73fb      	strb	r3, [r7, #15]
		break;
 8002a30:	e008      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	case 7:
		regData = ENABLE_CHANNEL_7;
 8002a32:	230f      	movs	r3, #15
 8002a34:	73fb      	strb	r3, [r7, #15]
		break;
 8002a36:	e005      	b.n	8002a44 <PCA9847_SetChannel+0x74>
	default:
		printf("Channelnumber should be 0-7 but is %d \r\n", channelNumber);
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4806      	ldr	r0, [pc, #24]	; (8002a58 <PCA9847_SetChannel+0x88>)
 8002a3e:	f007 fbd5 	bl	800a1ec <iprintf>
 8002a42:	e005      	b.n	8002a50 <PCA9847_SetChannel+0x80>
		return;
	}
	PCA9847_Write(dev, &regData);
 8002a44:	f107 030f 	add.w	r3, r7, #15
 8002a48:	4619      	mov	r1, r3
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f806 	bl	8002a5c <PCA9847_Write>
}
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	0800b4a8 	.word	0x0800b4a8

08002a5c <PCA9847_Write>:

/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef PCA9847_Write(PCA9847 *dev, uint8_t *data) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Master_Transmit(dev->i2cHandle, PCA9847_I2C_ADDR, data, 1,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	230a      	movs	r3, #10
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2301      	movs	r3, #1
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	21e2      	movs	r1, #226	; 0xe2
 8002a74:	f000 fc34 	bl	80032e0 <HAL_I2C_Master_Transmit>
 8002a78:	4603      	mov	r3, r0
			10);
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b082      	sub	sp, #8
 8002a86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a8c:	2003      	movs	r0, #3
 8002a8e:	f000 f961 	bl	8002d54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a92:	200f      	movs	r0, #15
 8002a94:	f000 f80e 	bl	8002ab4 <HAL_InitTick>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d002      	beq.n	8002aa4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	71fb      	strb	r3, [r7, #7]
 8002aa2:	e001      	b.n	8002aa8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002aa4:	f7ff f9da 	bl	8001e5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
	...

08002ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ac0:	4b17      	ldr	r3, [pc, #92]	; (8002b20 <HAL_InitTick+0x6c>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d023      	beq.n	8002b10 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ac8:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_InitTick+0x70>)
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <HAL_InitTick+0x6c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f96d 	bl	8002dbe <HAL_SYSTICK_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b0f      	cmp	r3, #15
 8002aee:	d809      	bhi.n	8002b04 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002af0:	2200      	movs	r2, #0
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	f04f 30ff 	mov.w	r0, #4294967295
 8002af8:	f000 f937 	bl	8002d6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002afc:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_InitTick+0x74>)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	e007      	b.n	8002b14 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	e004      	b.n	8002b14 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	73fb      	strb	r3, [r7, #15]
 8002b0e:	e001      	b.n	8002b14 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000174 	.word	0x20000174
 8002b24:	2000016c 	.word	0x2000016c
 8002b28:	20000170 	.word	0x20000170

08002b2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b30:	4b06      	ldr	r3, [pc, #24]	; (8002b4c <HAL_IncTick+0x20>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <HAL_IncTick+0x24>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_IncTick+0x24>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	20000174 	.word	0x20000174
 8002b50:	200004c0 	.word	0x200004c0

08002b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return uwTick;
 8002b58:	4b03      	ldr	r3, [pc, #12]	; (8002b68 <HAL_GetTick+0x14>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	200004c0 	.word	0x200004c0

08002b6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff ffee 	bl	8002b54 <HAL_GetTick>
 8002b78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d005      	beq.n	8002b92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b86:	4b0a      	ldr	r3, [pc, #40]	; (8002bb0 <HAL_Delay+0x44>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4413      	add	r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b92:	bf00      	nop
 8002b94:	f7ff ffde 	bl	8002b54 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d8f7      	bhi.n	8002b94 <HAL_Delay+0x28>
  {
  }
}
 8002ba4:	bf00      	nop
 8002ba6:	bf00      	nop
 8002ba8:	3710      	adds	r7, #16
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	20000174 	.word	0x20000174

08002bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f003 0307 	and.w	r3, r3, #7
 8002bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bc4:	4b0c      	ldr	r3, [pc, #48]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002be6:	4a04      	ldr	r2, [pc, #16]	; (8002bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	60d3      	str	r3, [r2, #12]
}
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	e000ed00 	.word	0xe000ed00

08002bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c00:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <__NVIC_GetPriorityGrouping+0x18>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	0a1b      	lsrs	r3, r3, #8
 8002c06:	f003 0307 	and.w	r3, r3, #7
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000ed00 	.word	0xe000ed00

08002c18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	db0b      	blt.n	8002c42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c2a:	79fb      	ldrb	r3, [r7, #7]
 8002c2c:	f003 021f 	and.w	r2, r3, #31
 8002c30:	4907      	ldr	r1, [pc, #28]	; (8002c50 <__NVIC_EnableIRQ+0x38>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	095b      	lsrs	r3, r3, #5
 8002c38:	2001      	movs	r0, #1
 8002c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	e000e100 	.word	0xe000e100

08002c54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	6039      	str	r1, [r7, #0]
 8002c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db0a      	blt.n	8002c7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	490c      	ldr	r1, [pc, #48]	; (8002ca0 <__NVIC_SetPriority+0x4c>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	440b      	add	r3, r1
 8002c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c7c:	e00a      	b.n	8002c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	4908      	ldr	r1, [pc, #32]	; (8002ca4 <__NVIC_SetPriority+0x50>)
 8002c84:	79fb      	ldrb	r3, [r7, #7]
 8002c86:	f003 030f 	and.w	r3, r3, #15
 8002c8a:	3b04      	subs	r3, #4
 8002c8c:	0112      	lsls	r2, r2, #4
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	440b      	add	r3, r1
 8002c92:	761a      	strb	r2, [r3, #24]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	e000e100 	.word	0xe000e100
 8002ca4:	e000ed00 	.word	0xe000ed00

08002ca8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b089      	sub	sp, #36	; 0x24
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f1c3 0307 	rsb	r3, r3, #7
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	bf28      	it	cs
 8002cc6:	2304      	movcs	r3, #4
 8002cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2b06      	cmp	r3, #6
 8002cd0:	d902      	bls.n	8002cd8 <NVIC_EncodePriority+0x30>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3b03      	subs	r3, #3
 8002cd6:	e000      	b.n	8002cda <NVIC_EncodePriority+0x32>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce6:	43da      	mvns	r2, r3
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	401a      	ands	r2, r3
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfa:	43d9      	mvns	r1, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d00:	4313      	orrs	r3, r2
         );
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3724      	adds	r7, #36	; 0x24
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
	...

08002d10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d20:	d301      	bcc.n	8002d26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d22:	2301      	movs	r3, #1
 8002d24:	e00f      	b.n	8002d46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d26:	4a0a      	ldr	r2, [pc, #40]	; (8002d50 <SysTick_Config+0x40>)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d2e:	210f      	movs	r1, #15
 8002d30:	f04f 30ff 	mov.w	r0, #4294967295
 8002d34:	f7ff ff8e 	bl	8002c54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d38:	4b05      	ldr	r3, [pc, #20]	; (8002d50 <SysTick_Config+0x40>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d3e:	4b04      	ldr	r3, [pc, #16]	; (8002d50 <SysTick_Config+0x40>)
 8002d40:	2207      	movs	r2, #7
 8002d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3708      	adds	r7, #8
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	e000e010 	.word	0xe000e010

08002d54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff ff29 	bl	8002bb4 <__NVIC_SetPriorityGrouping>
}
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	4603      	mov	r3, r0
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
 8002d76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7c:	f7ff ff3e 	bl	8002bfc <__NVIC_GetPriorityGrouping>
 8002d80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	68b9      	ldr	r1, [r7, #8]
 8002d86:	6978      	ldr	r0, [r7, #20]
 8002d88:	f7ff ff8e 	bl	8002ca8 <NVIC_EncodePriority>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff ff5d 	bl	8002c54 <__NVIC_SetPriority>
}
 8002d9a:	bf00      	nop
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	4603      	mov	r3, r0
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff ff31 	bl	8002c18 <__NVIC_EnableIRQ>
}
 8002db6:	bf00      	nop
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff ffa2 	bl	8002d10 <SysTick_Config>
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b087      	sub	sp, #28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002de6:	e17f      	b.n	80030e8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	2101      	movs	r1, #1
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	fa01 f303 	lsl.w	r3, r1, r3
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 8171 	beq.w	80030e2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d005      	beq.n	8002e18 <HAL_GPIO_Init+0x40>
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 0303 	and.w	r3, r3, #3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d130      	bne.n	8002e7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e4e:	2201      	movs	r2, #1
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	f003 0201 	and.w	r2, r3, #1
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	693a      	ldr	r2, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d118      	bne.n	8002eb8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f003 0201 	and.w	r2, r3, #1
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d017      	beq.n	8002ef4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d123      	bne.n	8002f48 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	08da      	lsrs	r2, r3, #3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3208      	adds	r2, #8
 8002f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	220f      	movs	r2, #15
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	fa02 f303 	lsl.w	r3, r2, r3
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	08da      	lsrs	r2, r3, #3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	3208      	adds	r2, #8
 8002f42:	6939      	ldr	r1, [r7, #16]
 8002f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	2203      	movs	r2, #3
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 80ac 	beq.w	80030e2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_GPIO_Init+0x330>)
 8002f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f8e:	4a5e      	ldr	r2, [pc, #376]	; (8003108 <HAL_GPIO_Init+0x330>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6613      	str	r3, [r2, #96]	; 0x60
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <HAL_GPIO_Init+0x330>)
 8002f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fa2:	4a5a      	ldr	r2, [pc, #360]	; (800310c <HAL_GPIO_Init+0x334>)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	693a      	ldr	r2, [r7, #16]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fcc:	d025      	beq.n	800301a <HAL_GPIO_Init+0x242>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4f      	ldr	r2, [pc, #316]	; (8003110 <HAL_GPIO_Init+0x338>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d01f      	beq.n	8003016 <HAL_GPIO_Init+0x23e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a4e      	ldr	r2, [pc, #312]	; (8003114 <HAL_GPIO_Init+0x33c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d019      	beq.n	8003012 <HAL_GPIO_Init+0x23a>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a4d      	ldr	r2, [pc, #308]	; (8003118 <HAL_GPIO_Init+0x340>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d013      	beq.n	800300e <HAL_GPIO_Init+0x236>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a4c      	ldr	r2, [pc, #304]	; (800311c <HAL_GPIO_Init+0x344>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d00d      	beq.n	800300a <HAL_GPIO_Init+0x232>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <HAL_GPIO_Init+0x348>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d007      	beq.n	8003006 <HAL_GPIO_Init+0x22e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4a      	ldr	r2, [pc, #296]	; (8003124 <HAL_GPIO_Init+0x34c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d101      	bne.n	8003002 <HAL_GPIO_Init+0x22a>
 8002ffe:	2306      	movs	r3, #6
 8003000:	e00c      	b.n	800301c <HAL_GPIO_Init+0x244>
 8003002:	2307      	movs	r3, #7
 8003004:	e00a      	b.n	800301c <HAL_GPIO_Init+0x244>
 8003006:	2305      	movs	r3, #5
 8003008:	e008      	b.n	800301c <HAL_GPIO_Init+0x244>
 800300a:	2304      	movs	r3, #4
 800300c:	e006      	b.n	800301c <HAL_GPIO_Init+0x244>
 800300e:	2303      	movs	r3, #3
 8003010:	e004      	b.n	800301c <HAL_GPIO_Init+0x244>
 8003012:	2302      	movs	r3, #2
 8003014:	e002      	b.n	800301c <HAL_GPIO_Init+0x244>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <HAL_GPIO_Init+0x244>
 800301a:	2300      	movs	r3, #0
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	f002 0203 	and.w	r2, r2, #3
 8003022:	0092      	lsls	r2, r2, #2
 8003024:	4093      	lsls	r3, r2
 8003026:	693a      	ldr	r2, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800302c:	4937      	ldr	r1, [pc, #220]	; (800310c <HAL_GPIO_Init+0x334>)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	089b      	lsrs	r3, r3, #2
 8003032:	3302      	adds	r3, #2
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800303a:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_GPIO_Init+0x350>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	43db      	mvns	r3, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4013      	ands	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4313      	orrs	r3, r2
 800305c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800305e:	4a32      	ldr	r2, [pc, #200]	; (8003128 <HAL_GPIO_Init+0x350>)
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003064:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_GPIO_Init+0x350>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	43db      	mvns	r3, r3
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <HAL_GPIO_Init+0x350>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800308e:	4b26      	ldr	r3, [pc, #152]	; (8003128 <HAL_GPIO_Init+0x350>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	43db      	mvns	r3, r3
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4013      	ands	r3, r2
 800309c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <HAL_GPIO_Init+0x350>)
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80030b8:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <HAL_GPIO_Init+0x350>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	43db      	mvns	r3, r3
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4013      	ands	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <HAL_GPIO_Init+0x350>)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	3301      	adds	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa22 f303 	lsr.w	r3, r2, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f47f ae78 	bne.w	8002de8 <HAL_GPIO_Init+0x10>
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	371c      	adds	r7, #28
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	40010000 	.word	0x40010000
 8003110:	48000400 	.word	0x48000400
 8003114:	48000800 	.word	0x48000800
 8003118:	48000c00 	.word	0x48000c00
 800311c:	48001000 	.word	0x48001000
 8003120:	48001400 	.word	0x48001400
 8003124:	48001800 	.word	0x48001800
 8003128:	40010400 	.word	0x40010400

0800312c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	460b      	mov	r3, r1
 8003136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691a      	ldr	r2, [r3, #16]
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003144:	2301      	movs	r3, #1
 8003146:	73fb      	strb	r3, [r7, #15]
 8003148:	e001      	b.n	800314e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3714      	adds	r7, #20
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	460b      	mov	r3, r1
 8003166:	807b      	strh	r3, [r7, #2]
 8003168:	4613      	mov	r3, r2
 800316a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800316c:	787b      	ldrb	r3, [r7, #1]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d003      	beq.n	800317a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003178:	e002      	b.n	8003180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800317a:	887a      	ldrh	r2, [r7, #2]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800319e:	887a      	ldrh	r2, [r7, #2]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4013      	ands	r3, r2
 80031a4:	041a      	lsls	r2, r3, #16
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	43d9      	mvns	r1, r3
 80031aa:	887b      	ldrh	r3, [r7, #2]
 80031ac:	400b      	ands	r3, r1
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	619a      	str	r2, [r3, #24]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e081      	b.n	80032d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fe5c 	bl	8001ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	; 0x24
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003210:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689a      	ldr	r2, [r3, #8]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003220:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689a      	ldr	r2, [r3, #8]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	e006      	b.n	8003248 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003246:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b02      	cmp	r3, #2
 800324e:	d104      	bne.n	800325a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003258:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6812      	ldr	r2, [r2, #0]
 8003264:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800327c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69d9      	ldr	r1, [r3, #28]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1a      	ldr	r2, [r3, #32]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2220      	movs	r2, #32
 80032c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032d4:	2300      	movs	r3, #0
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3708      	adds	r7, #8
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	607a      	str	r2, [r7, #4]
 80032ea:	461a      	mov	r2, r3
 80032ec:	460b      	mov	r3, r1
 80032ee:	817b      	strh	r3, [r7, #10]
 80032f0:	4613      	mov	r3, r2
 80032f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b20      	cmp	r3, #32
 80032fe:	f040 80da 	bne.w	80034b6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_I2C_Master_Transmit+0x30>
 800330c:	2302      	movs	r3, #2
 800330e:	e0d3      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1d8>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003318:	f7ff fc1c 	bl	8002b54 <HAL_GetTick>
 800331c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	2319      	movs	r3, #25
 8003324:	2201      	movs	r2, #1
 8003326:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fbc6 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e0be      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2221      	movs	r2, #33	; 0x21
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2210      	movs	r2, #16
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	893a      	ldrh	r2, [r7, #8]
 800335a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003366:	b29b      	uxth	r3, r3
 8003368:	2bff      	cmp	r3, #255	; 0xff
 800336a:	d90e      	bls.n	800338a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003376:	b2da      	uxtb	r2, r3
 8003378:	8979      	ldrh	r1, [r7, #10]
 800337a:	4b51      	ldr	r3, [pc, #324]	; (80034c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f000 fd42 	bl	8003e0c <I2C_TransferConfig>
 8003388:	e06c      	b.n	8003464 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338e:	b29a      	uxth	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003398:	b2da      	uxtb	r2, r3
 800339a:	8979      	ldrh	r1, [r7, #10]
 800339c:	4b48      	ldr	r3, [pc, #288]	; (80034c0 <HAL_I2C_Master_Transmit+0x1e0>)
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f000 fd31 	bl	8003e0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80033aa:	e05b      	b.n	8003464 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ac:	697a      	ldr	r2, [r7, #20]
 80033ae:	6a39      	ldr	r1, [r7, #32]
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fbc3 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e07b      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d034      	beq.n	8003464 <HAL_I2C_Master_Transmit+0x184>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d130      	bne.n	8003464 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	2200      	movs	r2, #0
 800340a:	2180      	movs	r1, #128	; 0x80
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f000 fb55 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e04d      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003420:	b29b      	uxth	r3, r3
 8003422:	2bff      	cmp	r3, #255	; 0xff
 8003424:	d90e      	bls.n	8003444 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	22ff      	movs	r2, #255	; 0xff
 800342a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003430:	b2da      	uxtb	r2, r3
 8003432:	8979      	ldrh	r1, [r7, #10]
 8003434:	2300      	movs	r3, #0
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800343c:	68f8      	ldr	r0, [r7, #12]
 800343e:	f000 fce5 	bl	8003e0c <I2C_TransferConfig>
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	b2da      	uxtb	r2, r3
 8003454:	8979      	ldrh	r1, [r7, #10]
 8003456:	2300      	movs	r3, #0
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fcd4 	bl	8003e0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d19e      	bne.n	80033ac <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	6a39      	ldr	r1, [r7, #32]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fba2 	bl	8003bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e01a      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2220      	movs	r2, #32
 8003488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6859      	ldr	r1, [r3, #4]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003496:	400b      	ands	r3, r1
 8003498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}
 80034c0:	80002000 	.word	0x80002000
 80034c4:	fe00e800 	.word	0xfe00e800

080034c8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b088      	sub	sp, #32
 80034cc:	af02      	add	r7, sp, #8
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	4608      	mov	r0, r1
 80034d2:	4611      	mov	r1, r2
 80034d4:	461a      	mov	r2, r3
 80034d6:	4603      	mov	r3, r0
 80034d8:	817b      	strh	r3, [r7, #10]
 80034da:	460b      	mov	r3, r1
 80034dc:	813b      	strh	r3, [r7, #8]
 80034de:	4613      	mov	r3, r2
 80034e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b20      	cmp	r3, #32
 80034ec:	f040 80f9 	bne.w	80036e2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f0:	6a3b      	ldr	r3, [r7, #32]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_I2C_Mem_Write+0x34>
 80034f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d105      	bne.n	8003508 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003502:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e0ed      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Mem_Write+0x4e>
 8003512:	2302      	movs	r3, #2
 8003514:	e0e6      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351e:	f7ff fb19 	bl	8002b54 <HAL_GetTick>
 8003522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	2319      	movs	r3, #25
 800352a:	2201      	movs	r2, #1
 800352c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f000 fac3 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e0d1      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2221      	movs	r2, #33	; 0x21
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2240      	movs	r2, #64	; 0x40
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a3a      	ldr	r2, [r7, #32]
 800355a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003560:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003568:	88f8      	ldrh	r0, [r7, #6]
 800356a:	893a      	ldrh	r2, [r7, #8]
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	9301      	str	r3, [sp, #4]
 8003572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4603      	mov	r3, r0
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f9d3 	bl	8003924 <I2C_RequestMemoryWrite>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e0a9      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29b      	uxth	r3, r3
 8003596:	2bff      	cmp	r3, #255	; 0xff
 8003598:	d90e      	bls.n	80035b8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	22ff      	movs	r2, #255	; 0xff
 800359e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	8979      	ldrh	r1, [r7, #10]
 80035a8:	2300      	movs	r3, #0
 80035aa:	9300      	str	r3, [sp, #0]
 80035ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fc2b 	bl	8003e0c <I2C_TransferConfig>
 80035b6:	e00f      	b.n	80035d8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	2300      	movs	r3, #0
 80035cc:	9300      	str	r3, [sp, #0]
 80035ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fc1a 	bl	8003e0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 faad 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d001      	beq.n	80035ec <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e07b      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d034      	beq.n	8003690 <HAL_I2C_Mem_Write+0x1c8>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	2b00      	cmp	r3, #0
 800362c:	d130      	bne.n	8003690 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	2200      	movs	r2, #0
 8003636:	2180      	movs	r1, #128	; 0x80
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fa3f 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e04d      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364c:	b29b      	uxth	r3, r3
 800364e:	2bff      	cmp	r3, #255	; 0xff
 8003650:	d90e      	bls.n	8003670 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	22ff      	movs	r2, #255	; 0xff
 8003656:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800365c:	b2da      	uxtb	r2, r3
 800365e:	8979      	ldrh	r1, [r7, #10]
 8003660:	2300      	movs	r3, #0
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003668:	68f8      	ldr	r0, [r7, #12]
 800366a:	f000 fbcf 	bl	8003e0c <I2C_TransferConfig>
 800366e:	e00f      	b.n	8003690 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	b2da      	uxtb	r2, r3
 8003680:	8979      	ldrh	r1, [r7, #10]
 8003682:	2300      	movs	r3, #0
 8003684:	9300      	str	r3, [sp, #0]
 8003686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800368a:	68f8      	ldr	r0, [r7, #12]
 800368c:	f000 fbbe 	bl	8003e0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29b      	uxth	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d19e      	bne.n	80035d8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 fa8c 	bl	8003bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e01a      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <HAL_I2C_Mem_Write+0x224>)
 80036c2:	400b      	ands	r3, r1
 80036c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036de:	2300      	movs	r3, #0
 80036e0:	e000      	b.n	80036e4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80036e2:	2302      	movs	r3, #2
  }
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3718      	adds	r7, #24
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	fe00e800 	.word	0xfe00e800

080036f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b088      	sub	sp, #32
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	4608      	mov	r0, r1
 80036fa:	4611      	mov	r1, r2
 80036fc:	461a      	mov	r2, r3
 80036fe:	4603      	mov	r3, r0
 8003700:	817b      	strh	r3, [r7, #10]
 8003702:	460b      	mov	r3, r1
 8003704:	813b      	strh	r3, [r7, #8]
 8003706:	4613      	mov	r3, r2
 8003708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b20      	cmp	r3, #32
 8003714:	f040 80fd 	bne.w	8003912 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d002      	beq.n	8003724 <HAL_I2C_Mem_Read+0x34>
 800371e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003720:	2b00      	cmp	r3, #0
 8003722:	d105      	bne.n	8003730 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0f1      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_I2C_Mem_Read+0x4e>
 800373a:	2302      	movs	r3, #2
 800373c:	e0ea      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003746:	f7ff fa05 	bl	8002b54 <HAL_GetTick>
 800374a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	2319      	movs	r3, #25
 8003752:	2201      	movs	r2, #1
 8003754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f9af 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	e0d5      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2222      	movs	r2, #34	; 0x22
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	6a3a      	ldr	r2, [r7, #32]
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003790:	88f8      	ldrh	r0, [r7, #6]
 8003792:	893a      	ldrh	r2, [r7, #8]
 8003794:	8979      	ldrh	r1, [r7, #10]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	4603      	mov	r3, r0
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f913 	bl	80039cc <I2C_RequestMemoryRead>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0ad      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2bff      	cmp	r3, #255	; 0xff
 80037c0:	d90e      	bls.n	80037e0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	22ff      	movs	r2, #255	; 0xff
 80037c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	4b52      	ldr	r3, [pc, #328]	; (800391c <HAL_I2C_Mem_Read+0x22c>)
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 fb17 	bl	8003e0c <I2C_TransferConfig>
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	4b4a      	ldr	r3, [pc, #296]	; (800391c <HAL_I2C_Mem_Read+0x22c>)
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 fb06 	bl	8003e0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	2200      	movs	r2, #0
 8003808:	2104      	movs	r1, #4
 800380a:	68f8      	ldr	r0, [r7, #12]
 800380c:	f000 f956 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e07c      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003824:	b2d2      	uxtb	r2, r2
 8003826:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	1c5a      	adds	r2, r3, #1
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003836:	3b01      	subs	r3, #1
 8003838:	b29a      	uxth	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d034      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x1d0>
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	d130      	bne.n	80038c0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003864:	2200      	movs	r2, #0
 8003866:	2180      	movs	r1, #128	; 0x80
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f927 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e04d      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2bff      	cmp	r3, #255	; 0xff
 8003880:	d90e      	bls.n	80038a0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	22ff      	movs	r2, #255	; 0xff
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	b2da      	uxtb	r2, r3
 800388e:	8979      	ldrh	r1, [r7, #10]
 8003890:	2300      	movs	r3, #0
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fab7 	bl	8003e0c <I2C_TransferConfig>
 800389e:	e00f      	b.n	80038c0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	8979      	ldrh	r1, [r7, #10]
 80038b2:	2300      	movs	r3, #0
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f000 faa6 	bl	8003e0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d19a      	bne.n	8003800 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	f000 f974 	bl	8003bbc <I2C_WaitOnSTOPFlagUntilTimeout>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e01a      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2220      	movs	r2, #32
 80038e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <HAL_I2C_Mem_Read+0x230>)
 80038f2:	400b      	ands	r3, r1
 80038f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390e:	2300      	movs	r3, #0
 8003910:	e000      	b.n	8003914 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003912:	2302      	movs	r3, #2
  }
}
 8003914:	4618      	mov	r0, r3
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	80002400 	.word	0x80002400
 8003920:	fe00e800 	.word	0xfe00e800

08003924 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b086      	sub	sp, #24
 8003928:	af02      	add	r7, sp, #8
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	4608      	mov	r0, r1
 800392e:	4611      	mov	r1, r2
 8003930:	461a      	mov	r2, r3
 8003932:	4603      	mov	r3, r0
 8003934:	817b      	strh	r3, [r7, #10]
 8003936:	460b      	mov	r3, r1
 8003938:	813b      	strh	r3, [r7, #8]
 800393a:	4613      	mov	r3, r2
 800393c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800393e:	88fb      	ldrh	r3, [r7, #6]
 8003940:	b2da      	uxtb	r2, r3
 8003942:	8979      	ldrh	r1, [r7, #10]
 8003944:	4b20      	ldr	r3, [pc, #128]	; (80039c8 <I2C_RequestMemoryWrite+0xa4>)
 8003946:	9300      	str	r3, [sp, #0]
 8003948:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fa5d 	bl	8003e0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003952:	69fa      	ldr	r2, [r7, #28]
 8003954:	69b9      	ldr	r1, [r7, #24]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f8f0 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e02c      	b.n	80039c0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003966:	88fb      	ldrh	r3, [r7, #6]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d105      	bne.n	8003978 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800396c:	893b      	ldrh	r3, [r7, #8]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	629a      	str	r2, [r3, #40]	; 0x28
 8003976:	e015      	b.n	80039a4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003978:	893b      	ldrh	r3, [r7, #8]
 800397a:	0a1b      	lsrs	r3, r3, #8
 800397c:	b29b      	uxth	r3, r3
 800397e:	b2da      	uxtb	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003986:	69fa      	ldr	r2, [r7, #28]
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 f8d6 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e012      	b.n	80039c0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800399a:	893b      	ldrh	r3, [r7, #8]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2200      	movs	r2, #0
 80039ac:	2180      	movs	r1, #128	; 0x80
 80039ae:	68f8      	ldr	r0, [r7, #12]
 80039b0:	f000 f884 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	80002000 	.word	0x80002000

080039cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af02      	add	r7, sp, #8
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	817b      	strh	r3, [r7, #10]
 80039de:	460b      	mov	r3, r1
 80039e0:	813b      	strh	r3, [r7, #8]
 80039e2:	4613      	mov	r3, r2
 80039e4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80039e6:	88fb      	ldrh	r3, [r7, #6]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	8979      	ldrh	r1, [r7, #10]
 80039ec:	4b20      	ldr	r3, [pc, #128]	; (8003a70 <I2C_RequestMemoryRead+0xa4>)
 80039ee:	9300      	str	r3, [sp, #0]
 80039f0:	2300      	movs	r3, #0
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fa0a 	bl	8003e0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039f8:	69fa      	ldr	r2, [r7, #28]
 80039fa:	69b9      	ldr	r1, [r7, #24]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 f89d 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e02c      	b.n	8003a66 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d105      	bne.n	8003a1e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a12:	893b      	ldrh	r3, [r7, #8]
 8003a14:	b2da      	uxtb	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1c:	e015      	b.n	8003a4a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a1e:	893b      	ldrh	r3, [r7, #8]
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a2c:	69fa      	ldr	r2, [r7, #28]
 8003a2e:	69b9      	ldr	r1, [r7, #24]
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f883 	bl	8003b3c <I2C_WaitOnTXISFlagUntilTimeout>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e012      	b.n	8003a66 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a40:	893b      	ldrh	r3, [r7, #8]
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	9300      	str	r3, [sp, #0]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	2200      	movs	r2, #0
 8003a52:	2140      	movs	r1, #64	; 0x40
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f000 f831 	bl	8003abc <I2C_WaitOnFlagUntilTimeout>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3710      	adds	r7, #16
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	80002000 	.word	0x80002000

08003a74 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d103      	bne.n	8003a92 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	f003 0301 	and.w	r3, r3, #1
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d007      	beq.n	8003ab0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	619a      	str	r2, [r3, #24]
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003acc:	e022      	b.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad4:	d01e      	beq.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad6:	f7ff f83d 	bl	8002b54 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d302      	bcc.n	8003aec <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d113      	bne.n	8003b14 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e00f      	b.n	8003b34 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	bf0c      	ite	eq
 8003b24:	2301      	moveq	r3, #1
 8003b26:	2300      	movne	r3, #0
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	79fb      	ldrb	r3, [r7, #7]
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d0cd      	beq.n	8003ace <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3710      	adds	r7, #16
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003b48:	e02c      	b.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f870 	bl	8003c34 <I2C_IsErrorOccurred>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e02a      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b64:	d01e      	beq.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b66:	f7fe fff5 	bl	8002b54 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d302      	bcc.n	8003b7c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d113      	bne.n	8003ba4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e007      	b.n	8003bb4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d1cb      	bne.n	8003b4a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003bc8:	e028      	b.n	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f830 	bl	8003c34 <I2C_IsErrorOccurred>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d001      	beq.n	8003bde <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e026      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bde:	f7fe ffb9 	bl	8002b54 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	68ba      	ldr	r2, [r7, #8]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d302      	bcc.n	8003bf4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d113      	bne.n	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f043 0220 	orr.w	r2, r3, #32
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2220      	movs	r2, #32
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e007      	b.n	8003c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b20      	cmp	r3, #32
 8003c28:	d1cf      	bne.n	8003bca <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d075      	beq.n	8003d4c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2210      	movs	r2, #16
 8003c66:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c68:	e056      	b.n	8003d18 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d052      	beq.n	8003d18 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe ff6f 	bl	8002b54 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_IsErrorOccurred+0x54>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d147      	bne.n	8003d18 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c92:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c9a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003caa:	d12e      	bne.n	8003d0a <I2C_IsErrorOccurred+0xd6>
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003cb2:	d02a      	beq.n	8003d0a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003cb4:	7cfb      	ldrb	r3, [r7, #19]
 8003cb6:	2b20      	cmp	r3, #32
 8003cb8:	d027      	beq.n	8003d0a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cc8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003cca:	f7fe ff43 	bl	8002b54 <HAL_GetTick>
 8003cce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cd0:	e01b      	b.n	8003d0a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003cd2:	f7fe ff3f 	bl	8002b54 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b19      	cmp	r3, #25
 8003cde:	d914      	bls.n	8003d0a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce4:	f043 0220 	orr.w	r2, r3, #32
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2220      	movs	r2, #32
 8003cf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b20      	cmp	r3, #32
 8003d16:	d1dc      	bne.n	8003cd2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d003      	beq.n	8003d2e <I2C_IsErrorOccurred+0xfa>
 8003d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d09d      	beq.n	8003c6a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003d2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f043 0304 	orr.w	r3, r3, #4
 8003d44:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00b      	beq.n	8003d76 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d00b      	beq.n	8003d98 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	f043 0308 	orr.w	r3, r3, #8
 8003d86:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d90:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003da2:	6a3b      	ldr	r3, [r7, #32]
 8003da4:	f043 0302 	orr.w	r3, r3, #2
 8003da8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003db2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01c      	beq.n	8003dfc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff fe56 	bl	8003a74 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6859      	ldr	r1, [r3, #4]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <I2C_IsErrorOccurred+0x1d4>)
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ddc:	6a3b      	ldr	r3, [r7, #32]
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2220      	movs	r2, #32
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3728      	adds	r7, #40	; 0x28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	fe00e800 	.word	0xfe00e800

08003e0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607b      	str	r3, [r7, #4]
 8003e16:	460b      	mov	r3, r1
 8003e18:	817b      	strh	r3, [r7, #10]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e24:	7a7b      	ldrb	r3, [r7, #9]
 8003e26:	041b      	lsls	r3, r3, #16
 8003e28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	0d5b      	lsrs	r3, r3, #21
 8003e46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <I2C_TransferConfig+0x60>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	ea02 0103 	and.w	r1, r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	430a      	orrs	r2, r1
 8003e5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	03ff63ff 	.word	0x03ff63ff

08003e70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d138      	bne.n	8003ef8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e032      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2224      	movs	r2, #36	; 0x24
 8003ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f022 0201 	bic.w	r2, r2, #1
 8003eb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ec2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	6819      	ldr	r1, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0201 	orr.w	r2, r2, #1
 8003ee2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e000      	b.n	8003efa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ef8:	2302      	movs	r3, #2
  }
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b20      	cmp	r3, #32
 8003f1a:	d139      	bne.n	8003f90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f26:	2302      	movs	r3, #2
 8003f28:	e033      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2224      	movs	r2, #36	; 0x24
 8003f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	021b      	lsls	r3, r3, #8
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f042 0201 	orr.w	r2, r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	e000      	b.n	8003f92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f90:	2302      	movs	r3, #2
  }
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40007000 	.word	0x40007000

08003fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fca:	d130      	bne.n	800402e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fcc:	4b23      	ldr	r3, [pc, #140]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fd8:	d038      	beq.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fda:	4b20      	ldr	r3, [pc, #128]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003fe2:	4a1e      	ldr	r2, [pc, #120]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003fe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fe8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003fea:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2232      	movs	r2, #50	; 0x32
 8003ff0:	fb02 f303 	mul.w	r3, r2, r3
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	0c9b      	lsrs	r3, r3, #18
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004000:	e002      	b.n	8004008 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b01      	subs	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004008:	4b14      	ldr	r3, [pc, #80]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004014:	d102      	bne.n	800401c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f2      	bne.n	8004002 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800401c:	4b0f      	ldr	r3, [pc, #60]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004028:	d110      	bne.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e00f      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800403a:	d007      	beq.n	800404c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800403c:	4b07      	ldr	r3, [pc, #28]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004044:	4a05      	ldr	r2, [pc, #20]	; (800405c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004046:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800404a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3714      	adds	r7, #20
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40007000 	.word	0x40007000
 8004060:	2000016c 	.word	0x2000016c
 8004064:	431bde83 	.word	0x431bde83

08004068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d101      	bne.n	800407a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e3ca      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800407a:	4b97      	ldr	r3, [pc, #604]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004084:	4b94      	ldr	r3, [pc, #592]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0303 	and.w	r3, r3, #3
 800408c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0310 	and.w	r3, r3, #16
 8004096:	2b00      	cmp	r3, #0
 8004098:	f000 80e4 	beq.w	8004264 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <HAL_RCC_OscConfig+0x4a>
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	2b0c      	cmp	r3, #12
 80040a6:	f040 808b 	bne.w	80041c0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	f040 8087 	bne.w	80041c0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040b2:	4b89      	ldr	r3, [pc, #548]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_RCC_OscConfig+0x62>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e3a2      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	4b82      	ldr	r3, [pc, #520]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d004      	beq.n	80040e4 <HAL_RCC_OscConfig+0x7c>
 80040da:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040e2:	e005      	b.n	80040f0 <HAL_RCC_OscConfig+0x88>
 80040e4:	4b7c      	ldr	r3, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80040e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040ea:	091b      	lsrs	r3, r3, #4
 80040ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d223      	bcs.n	800413c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fd1d 	bl	8004b38 <RCC_SetFlashLatencyFromMSIRange>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e383      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004108:	4b73      	ldr	r3, [pc, #460]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a72      	ldr	r2, [pc, #456]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800410e:	f043 0308 	orr.w	r3, r3, #8
 8004112:	6013      	str	r3, [r2, #0]
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a1b      	ldr	r3, [r3, #32]
 8004120:	496d      	ldr	r1, [pc, #436]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004122:	4313      	orrs	r3, r2
 8004124:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004126:	4b6c      	ldr	r3, [pc, #432]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	69db      	ldr	r3, [r3, #28]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	4968      	ldr	r1, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004136:	4313      	orrs	r3, r2
 8004138:	604b      	str	r3, [r1, #4]
 800413a:	e025      	b.n	8004188 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800413c:	4b66      	ldr	r3, [pc, #408]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a65      	ldr	r2, [pc, #404]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004142:	f043 0308 	orr.w	r3, r3, #8
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b63      	ldr	r3, [pc, #396]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4960      	ldr	r1, [pc, #384]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004156:	4313      	orrs	r3, r2
 8004158:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800415a:	4b5f      	ldr	r3, [pc, #380]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	021b      	lsls	r3, r3, #8
 8004168:	495b      	ldr	r1, [pc, #364]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800416a:	4313      	orrs	r3, r2
 800416c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fcdd 	bl	8004b38 <RCC_SetFlashLatencyFromMSIRange>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e343      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004188:	f000 fc4a 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b52      	ldr	r3, [pc, #328]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	091b      	lsrs	r3, r3, #4
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	4950      	ldr	r1, [pc, #320]	; (80042dc <HAL_RCC_OscConfig+0x274>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
 80041a4:	4a4e      	ldr	r2, [pc, #312]	; (80042e0 <HAL_RCC_OscConfig+0x278>)
 80041a6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041a8:	4b4e      	ldr	r3, [pc, #312]	; (80042e4 <HAL_RCC_OscConfig+0x27c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fc81 	bl	8002ab4 <HAL_InitTick>
 80041b2:	4603      	mov	r3, r0
 80041b4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d052      	beq.n	8004262 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
 80041be:	e327      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d032      	beq.n	800422e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80041c8:	4b43      	ldr	r3, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041ce:	f043 0301 	orr.w	r3, r3, #1
 80041d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80041d4:	f7fe fcbe 	bl	8002b54 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80041dc:	f7fe fcba 	bl	8002b54 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e310      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80041fa:	4b37      	ldr	r3, [pc, #220]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a36      	ldr	r2, [pc, #216]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004200:	f043 0308 	orr.w	r3, r3, #8
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	4b34      	ldr	r3, [pc, #208]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	4931      	ldr	r1, [pc, #196]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004214:	4313      	orrs	r3, r2
 8004216:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004218:	4b2f      	ldr	r3, [pc, #188]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	492c      	ldr	r1, [pc, #176]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004228:	4313      	orrs	r3, r2
 800422a:	604b      	str	r3, [r1, #4]
 800422c:	e01a      	b.n	8004264 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800422e:	4b2a      	ldr	r3, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a29      	ldr	r2, [pc, #164]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800423a:	f7fe fc8b 	bl	8002b54 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004240:	e008      	b.n	8004254 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004242:	f7fe fc87 	bl	8002b54 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e2dd      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f0      	bne.n	8004242 <HAL_RCC_OscConfig+0x1da>
 8004260:	e000      	b.n	8004264 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004262:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	d074      	beq.n	800435a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b08      	cmp	r3, #8
 8004274:	d005      	beq.n	8004282 <HAL_RCC_OscConfig+0x21a>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b0c      	cmp	r3, #12
 800427a:	d10e      	bne.n	800429a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b03      	cmp	r3, #3
 8004280:	d10b      	bne.n	800429a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004282:	4b15      	ldr	r3, [pc, #84]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d064      	beq.n	8004358 <HAL_RCC_OscConfig+0x2f0>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d160      	bne.n	8004358 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e2ba      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042a2:	d106      	bne.n	80042b2 <HAL_RCC_OscConfig+0x24a>
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	e026      	b.n	8004300 <HAL_RCC_OscConfig+0x298>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ba:	d115      	bne.n	80042e8 <HAL_RCC_OscConfig+0x280>
 80042bc:	4b06      	ldr	r3, [pc, #24]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a05      	ldr	r2, [pc, #20]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c6:	6013      	str	r3, [r2, #0]
 80042c8:	4b03      	ldr	r3, [pc, #12]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a02      	ldr	r2, [pc, #8]	; (80042d8 <HAL_RCC_OscConfig+0x270>)
 80042ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	e014      	b.n	8004300 <HAL_RCC_OscConfig+0x298>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	0800b5a0 	.word	0x0800b5a0
 80042e0:	2000016c 	.word	0x2000016c
 80042e4:	20000170 	.word	0x20000170
 80042e8:	4ba0      	ldr	r3, [pc, #640]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a9f      	ldr	r2, [pc, #636]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042f2:	6013      	str	r3, [r2, #0]
 80042f4:	4b9d      	ldr	r3, [pc, #628]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a9c      	ldr	r2, [pc, #624]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80042fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004308:	f7fe fc24 	bl	8002b54 <HAL_GetTick>
 800430c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800430e:	e008      	b.n	8004322 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004310:	f7fe fc20 	bl	8002b54 <HAL_GetTick>
 8004314:	4602      	mov	r2, r0
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1ad3      	subs	r3, r2, r3
 800431a:	2b64      	cmp	r3, #100	; 0x64
 800431c:	d901      	bls.n	8004322 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e276      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004322:	4b92      	ldr	r3, [pc, #584]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0f0      	beq.n	8004310 <HAL_RCC_OscConfig+0x2a8>
 800432e:	e014      	b.n	800435a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe fc10 	bl	8002b54 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004338:	f7fe fc0c 	bl	8002b54 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b64      	cmp	r3, #100	; 0x64
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e262      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800434a:	4b88      	ldr	r3, [pc, #544]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f0      	bne.n	8004338 <HAL_RCC_OscConfig+0x2d0>
 8004356:	e000      	b.n	800435a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d060      	beq.n	8004428 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d005      	beq.n	8004378 <HAL_RCC_OscConfig+0x310>
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b0c      	cmp	r3, #12
 8004370:	d119      	bne.n	80043a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	2b02      	cmp	r3, #2
 8004376:	d116      	bne.n	80043a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004378:	4b7c      	ldr	r3, [pc, #496]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_OscConfig+0x328>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e23f      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4b76      	ldr	r3, [pc, #472]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	061b      	lsls	r3, r3, #24
 800439e:	4973      	ldr	r1, [pc, #460]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043a4:	e040      	b.n	8004428 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d023      	beq.n	80043f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043ae:	4b6f      	ldr	r3, [pc, #444]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6e      	ldr	r2, [pc, #440]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fe fbcb 	bl	8002b54 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fe fbc7 	bl	8002b54 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e21d      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d4:	4b65      	ldr	r3, [pc, #404]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	495f      	ldr	r1, [pc, #380]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
 80043f4:	e018      	b.n	8004428 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b5d      	ldr	r3, [pc, #372]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a5c      	ldr	r2, [pc, #368]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80043fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fe fba7 	bl	8002b54 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fe fba3 	bl	8002b54 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e1f9      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800441c:	4b53      	ldr	r3, [pc, #332]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1f0      	bne.n	800440a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d03c      	beq.n	80044ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	695b      	ldr	r3, [r3, #20]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d01c      	beq.n	8004476 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800443c:	4b4b      	ldr	r3, [pc, #300]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800443e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004442:	4a4a      	ldr	r2, [pc, #296]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800444c:	f7fe fb82 	bl	8002b54 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004452:	e008      	b.n	8004466 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004454:	f7fe fb7e 	bl	8002b54 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d901      	bls.n	8004466 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e1d4      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004466:	4b41      	ldr	r3, [pc, #260]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004468:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0ef      	beq.n	8004454 <HAL_RCC_OscConfig+0x3ec>
 8004474:	e01b      	b.n	80044ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004476:	4b3d      	ldr	r3, [pc, #244]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004478:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800447c:	4a3b      	ldr	r2, [pc, #236]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800447e:	f023 0301 	bic.w	r3, r3, #1
 8004482:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004486:	f7fe fb65 	bl	8002b54 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800448e:	f7fe fb61 	bl	8002b54 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e1b7      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044a0:	4b32      	ldr	r3, [pc, #200]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1ef      	bne.n	800448e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0304 	and.w	r3, r3, #4
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80a6 	beq.w	8004608 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044bc:	2300      	movs	r3, #0
 80044be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80044c0:	4b2a      	ldr	r3, [pc, #168]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10d      	bne.n	80044e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044cc:	4b27      	ldr	r3, [pc, #156]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044d0:	4a26      	ldr	r2, [pc, #152]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d6:	6593      	str	r3, [r2, #88]	; 0x58
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_RCC_OscConfig+0x504>)
 80044da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e4:	2301      	movs	r3, #1
 80044e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80044e8:	4b21      	ldr	r3, [pc, #132]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d118      	bne.n	8004526 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044f4:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a1d      	ldr	r2, [pc, #116]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 80044fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004500:	f7fe fb28 	bl	8002b54 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004506:	e008      	b.n	800451a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004508:	f7fe fb24 	bl	8002b54 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d901      	bls.n	800451a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e17a      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <HAL_RCC_OscConfig+0x508>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004522:	2b00      	cmp	r3, #0
 8004524:	d0f0      	beq.n	8004508 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d108      	bne.n	8004540 <HAL_RCC_OscConfig+0x4d8>
 800452e:	4b0f      	ldr	r3, [pc, #60]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004530:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004534:	4a0d      	ldr	r2, [pc, #52]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004536:	f043 0301 	orr.w	r3, r3, #1
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800453e:	e029      	b.n	8004594 <HAL_RCC_OscConfig+0x52c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	2b05      	cmp	r3, #5
 8004546:	d115      	bne.n	8004574 <HAL_RCC_OscConfig+0x50c>
 8004548:	4b08      	ldr	r3, [pc, #32]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	4a07      	ldr	r2, [pc, #28]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004550:	f043 0304 	orr.w	r3, r3, #4
 8004554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004558:	4b04      	ldr	r3, [pc, #16]	; (800456c <HAL_RCC_OscConfig+0x504>)
 800455a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800455e:	4a03      	ldr	r2, [pc, #12]	; (800456c <HAL_RCC_OscConfig+0x504>)
 8004560:	f043 0301 	orr.w	r3, r3, #1
 8004564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004568:	e014      	b.n	8004594 <HAL_RCC_OscConfig+0x52c>
 800456a:	bf00      	nop
 800456c:	40021000 	.word	0x40021000
 8004570:	40007000 	.word	0x40007000
 8004574:	4b9c      	ldr	r3, [pc, #624]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a9b      	ldr	r2, [pc, #620]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800457c:	f023 0301 	bic.w	r3, r3, #1
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004584:	4b98      	ldr	r3, [pc, #608]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	4a97      	ldr	r2, [pc, #604]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800458c:	f023 0304 	bic.w	r3, r3, #4
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d016      	beq.n	80045ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800459c:	f7fe fada 	bl	8002b54 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fe fad6 	bl	8002b54 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e12a      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ba:	4b8b      	ldr	r3, [pc, #556]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80045bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ed      	beq.n	80045a4 <HAL_RCC_OscConfig+0x53c>
 80045c8:	e015      	b.n	80045f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fe fac3 	bl	8002b54 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fe fabf 	bl	8002b54 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e113      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80045e8:	4b7f      	ldr	r3, [pc, #508]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80045ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ed      	bne.n	80045d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f6:	7ffb      	ldrb	r3, [r7, #31]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fc:	4b7a      	ldr	r3, [pc, #488]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80045fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004600:	4a79      	ldr	r2, [pc, #484]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004606:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80fe 	beq.w	800480e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004616:	2b02      	cmp	r3, #2
 8004618:	f040 80d0 	bne.w	80047bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800461c:	4b72      	ldr	r3, [pc, #456]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f003 0203 	and.w	r2, r3, #3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d130      	bne.n	8004692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	3b01      	subs	r3, #1
 800463c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800463e:	429a      	cmp	r2, r3
 8004640:	d127      	bne.n	8004692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800464e:	429a      	cmp	r2, r3
 8004650:	d11f      	bne.n	8004692 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800465c:	2a07      	cmp	r2, #7
 800465e:	bf14      	ite	ne
 8004660:	2201      	movne	r2, #1
 8004662:	2200      	moveq	r2, #0
 8004664:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004666:	4293      	cmp	r3, r2
 8004668:	d113      	bne.n	8004692 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	3b01      	subs	r3, #1
 8004678:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800467a:	429a      	cmp	r2, r3
 800467c:	d109      	bne.n	8004692 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	3b01      	subs	r3, #1
 800468c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d06e      	beq.n	8004770 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b0c      	cmp	r3, #12
 8004696:	d069      	beq.n	800476c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004698:	4b53      	ldr	r3, [pc, #332]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80046a4:	4b50      	ldr	r3, [pc, #320]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0ad      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80046b4:	4b4c      	ldr	r3, [pc, #304]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a4b      	ldr	r2, [pc, #300]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046c0:	f7fe fa48 	bl	8002b54 <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046c6:	e008      	b.n	80046da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c8:	f7fe fa44 	bl	8002b54 <HAL_GetTick>
 80046cc:	4602      	mov	r2, r0
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e09a      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046da:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d1f0      	bne.n	80046c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046e6:	4b40      	ldr	r3, [pc, #256]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <HAL_RCC_OscConfig+0x784>)
 80046ec:	4013      	ands	r3, r2
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80046f6:	3a01      	subs	r2, #1
 80046f8:	0112      	lsls	r2, r2, #4
 80046fa:	4311      	orrs	r1, r2
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004700:	0212      	lsls	r2, r2, #8
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004708:	0852      	lsrs	r2, r2, #1
 800470a:	3a01      	subs	r2, #1
 800470c:	0552      	lsls	r2, r2, #21
 800470e:	4311      	orrs	r1, r2
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004714:	0852      	lsrs	r2, r2, #1
 8004716:	3a01      	subs	r2, #1
 8004718:	0652      	lsls	r2, r2, #25
 800471a:	4311      	orrs	r1, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004720:	0912      	lsrs	r2, r2, #4
 8004722:	0452      	lsls	r2, r2, #17
 8004724:	430a      	orrs	r2, r1
 8004726:	4930      	ldr	r1, [pc, #192]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004728:	4313      	orrs	r3, r2
 800472a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800472c:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004738:	4b2b      	ldr	r3, [pc, #172]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a2a      	ldr	r2, [pc, #168]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800473e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004744:	f7fe fa06 	bl	8002b54 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800474c:	f7fe fa02 	bl	8002b54 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e058      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800475e:	4b22      	ldr	r3, [pc, #136]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800476a:	e050      	b.n	800480e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e04f      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004770:	4b1d      	ldr	r3, [pc, #116]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d148      	bne.n	800480e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800477c:	4b1a      	ldr	r3, [pc, #104]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a19      	ldr	r2, [pc, #100]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 8004782:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004786:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004788:	4b17      	ldr	r3, [pc, #92]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4a16      	ldr	r2, [pc, #88]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 800478e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004792:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004794:	f7fe f9de 	bl	8002b54 <HAL_GetTick>
 8004798:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800479a:	e008      	b.n	80047ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800479c:	f7fe f9da 	bl	8002b54 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e030      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047ae:	4b0e      	ldr	r3, [pc, #56]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d0f0      	beq.n	800479c <HAL_RCC_OscConfig+0x734>
 80047ba:	e028      	b.n	800480e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d023      	beq.n	800480a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047c2:	4b09      	ldr	r3, [pc, #36]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <HAL_RCC_OscConfig+0x780>)
 80047c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ce:	f7fe f9c1 	bl	8002b54 <HAL_GetTick>
 80047d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047d4:	e00c      	b.n	80047f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d6:	f7fe f9bd 	bl	8002b54 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d905      	bls.n	80047f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80047e4:	2303      	movs	r3, #3
 80047e6:	e013      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
 80047e8:	40021000 	.word	0x40021000
 80047ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047f0:	4b09      	ldr	r3, [pc, #36]	; (8004818 <HAL_RCC_OscConfig+0x7b0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1ec      	bne.n	80047d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCC_OscConfig+0x7b0>)
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	4905      	ldr	r1, [pc, #20]	; (8004818 <HAL_RCC_OscConfig+0x7b0>)
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <HAL_RCC_OscConfig+0x7b4>)
 8004804:	4013      	ands	r3, r2
 8004806:	60cb      	str	r3, [r1, #12]
 8004808:	e001      	b.n	800480e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e000      	b.n	8004810 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3720      	adds	r7, #32
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	feeefffc 	.word	0xfeeefffc

08004820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d101      	bne.n	8004834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e0e7      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004834:	4b75      	ldr	r3, [pc, #468]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d910      	bls.n	8004864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004842:	4b72      	ldr	r3, [pc, #456]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f023 0207 	bic.w	r2, r3, #7
 800484a:	4970      	ldr	r1, [pc, #448]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	4313      	orrs	r3, r2
 8004850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004852:	4b6e      	ldr	r3, [pc, #440]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	683a      	ldr	r2, [r7, #0]
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e0cf      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d010      	beq.n	8004892 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689a      	ldr	r2, [r3, #8]
 8004874:	4b66      	ldr	r3, [pc, #408]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487c:	429a      	cmp	r2, r3
 800487e:	d908      	bls.n	8004892 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004880:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	4960      	ldr	r1, [pc, #384]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 800488e:	4313      	orrs	r3, r2
 8004890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d04c      	beq.n	8004938 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b03      	cmp	r3, #3
 80048a4:	d107      	bne.n	80048b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048a6:	4b5a      	ldr	r3, [pc, #360]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d121      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e0a6      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80048be:	4b54      	ldr	r3, [pc, #336]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d115      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e09a      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80048d6:	4b4e      	ldr	r3, [pc, #312]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e08e      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e6:	4b4a      	ldr	r3, [pc, #296]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d101      	bne.n	80048f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e086      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048f6:	4b46      	ldr	r3, [pc, #280]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f023 0203 	bic.w	r2, r3, #3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	4943      	ldr	r1, [pc, #268]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 8004904:	4313      	orrs	r3, r2
 8004906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004908:	f7fe f924 	bl	8002b54 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fe f920 	bl	8002b54 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	; 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e06e      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004926:	4b3a      	ldr	r3, [pc, #232]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 020c 	and.w	r2, r3, #12
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	429a      	cmp	r2, r3
 8004936:	d1eb      	bne.n	8004910 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d010      	beq.n	8004966 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	4b31      	ldr	r3, [pc, #196]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004950:	429a      	cmp	r2, r3
 8004952:	d208      	bcs.n	8004966 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004954:	4b2e      	ldr	r3, [pc, #184]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	492b      	ldr	r1, [pc, #172]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004966:	4b29      	ldr	r3, [pc, #164]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d210      	bcs.n	8004996 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f023 0207 	bic.w	r2, r3, #7
 800497c:	4923      	ldr	r1, [pc, #140]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	4313      	orrs	r3, r2
 8004982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCC_ClockConfig+0x1ec>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	429a      	cmp	r2, r3
 8004990:	d001      	beq.n	8004996 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e036      	b.n	8004a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d008      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a2:	4b1b      	ldr	r3, [pc, #108]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	4918      	ldr	r1, [pc, #96]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0308 	and.w	r3, r3, #8
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d009      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049c0:	4b13      	ldr	r3, [pc, #76]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	4910      	ldr	r1, [pc, #64]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049d4:	f000 f824 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <HAL_RCC_ClockConfig+0x1f0>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	091b      	lsrs	r3, r3, #4
 80049e0:	f003 030f 	and.w	r3, r3, #15
 80049e4:	490b      	ldr	r1, [pc, #44]	; (8004a14 <HAL_RCC_ClockConfig+0x1f4>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
 80049f0:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1f8>)
 80049f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80049f4:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1fc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f85b 	bl	8002ab4 <HAL_InitTick>
 80049fe:	4603      	mov	r3, r0
 8004a00:	72fb      	strb	r3, [r7, #11]

  return status;
 8004a02:	7afb      	ldrb	r3, [r7, #11]
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3710      	adds	r7, #16
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40022000 	.word	0x40022000
 8004a10:	40021000 	.word	0x40021000
 8004a14:	0800b5a0 	.word	0x0800b5a0
 8004a18:	2000016c 	.word	0x2000016c
 8004a1c:	20000170 	.word	0x20000170

08004a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b089      	sub	sp, #36	; 0x24
 8004a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a2e:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
 8004a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a38:	4b3b      	ldr	r3, [pc, #236]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d005      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x34>
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d121      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d11e      	bne.n	8004a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a54:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a60:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	e005      	b.n	8004a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a70:	4b2d      	ldr	r3, [pc, #180]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	; (8004b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10d      	bne.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d102      	bne.n	8004a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a98:	4b25      	ldr	r3, [pc, #148]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	e004      	b.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	2b0c      	cmp	r3, #12
 8004aac:	d134      	bne.n	8004b18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004aae:	4b1e      	ldr	r3, [pc, #120]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d003      	beq.n	8004ac6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b03      	cmp	r3, #3
 8004ac2:	d003      	beq.n	8004acc <HAL_RCC_GetSysClockFreq+0xac>
 8004ac4:	e005      	b.n	8004ad2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8004ac8:	617b      	str	r3, [r7, #20]
      break;
 8004aca:	e005      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004acc:	4b19      	ldr	r3, [pc, #100]	; (8004b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ace:	617b      	str	r3, [r7, #20]
      break;
 8004ad0:	e002      	b.n	8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	617b      	str	r3, [r7, #20]
      break;
 8004ad6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	091b      	lsrs	r3, r3, #4
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	fb03 f202 	mul.w	r2, r3, r2
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004afe:	4b0a      	ldr	r3, [pc, #40]	; (8004b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	0e5b      	lsrs	r3, r3, #25
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	3301      	adds	r3, #1
 8004b0a:	005b      	lsls	r3, r3, #1
 8004b0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004b0e:	697a      	ldr	r2, [r7, #20]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004b18:	69bb      	ldr	r3, [r7, #24]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3724      	adds	r7, #36	; 0x24
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40021000 	.word	0x40021000
 8004b2c:	0800b5b0 	.word	0x0800b5b0
 8004b30:	00f42400 	.word	0x00f42400
 8004b34:	007a1200 	.word	0x007a1200

08004b38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b44:	4b2a      	ldr	r3, [pc, #168]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d003      	beq.n	8004b58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b50:	f7ff fa26 	bl	8003fa0 <HAL_PWREx_GetVoltageRange>
 8004b54:	6178      	str	r0, [r7, #20]
 8004b56:	e014      	b.n	8004b82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b58:	4b25      	ldr	r3, [pc, #148]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5c:	4a24      	ldr	r2, [pc, #144]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b62:	6593      	str	r3, [r2, #88]	; 0x58
 8004b64:	4b22      	ldr	r3, [pc, #136]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b6c:	60fb      	str	r3, [r7, #12]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b70:	f7ff fa16 	bl	8003fa0 <HAL_PWREx_GetVoltageRange>
 8004b74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b7a:	4a1d      	ldr	r2, [pc, #116]	; (8004bf0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b88:	d10b      	bne.n	8004ba2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b80      	cmp	r3, #128	; 0x80
 8004b8e:	d919      	bls.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2ba0      	cmp	r3, #160	; 0xa0
 8004b94:	d902      	bls.n	8004b9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004b96:	2302      	movs	r3, #2
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	e013      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]
 8004ba0:	e010      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b80      	cmp	r3, #128	; 0x80
 8004ba6:	d902      	bls.n	8004bae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ba8:	2303      	movs	r3, #3
 8004baa:	613b      	str	r3, [r7, #16]
 8004bac:	e00a      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b80      	cmp	r3, #128	; 0x80
 8004bb2:	d102      	bne.n	8004bba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	613b      	str	r3, [r7, #16]
 8004bb8:	e004      	b.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b70      	cmp	r3, #112	; 0x70
 8004bbe:	d101      	bne.n	8004bc4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bc4:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 0207 	bic.w	r2, r3, #7
 8004bcc:	4909      	ldr	r1, [pc, #36]	; (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004bd4:	4b07      	ldr	r3, [pc, #28]	; (8004bf4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0307 	and.w	r3, r3, #7
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d001      	beq.n	8004be6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e000      	b.n	8004be8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004be6:	2300      	movs	r3, #0
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	40021000 	.word	0x40021000
 8004bf4:	40022000 	.word	0x40022000

08004bf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c00:	2300      	movs	r3, #0
 8004c02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c04:	2300      	movs	r3, #0
 8004c06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d041      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c1c:	d02a      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004c1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c22:	d824      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c28:	d008      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c2e:	d81e      	bhi.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d00a      	beq.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004c34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c38:	d010      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004c3a:	e018      	b.n	8004c6e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c3c:	4b86      	ldr	r3, [pc, #536]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4a85      	ldr	r2, [pc, #532]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c46:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c48:	e015      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2100      	movs	r1, #0
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fa8b 	bl	800516c <RCCEx_PLLSAI1_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c5a:	e00c      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	3320      	adds	r3, #32
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fb76 	bl	8005354 <RCCEx_PLLSAI2_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c6c:	e003      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	74fb      	strb	r3, [r7, #19]
      break;
 8004c72:	e000      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004c74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c76:	7cfb      	ldrb	r3, [r7, #19]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10b      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c7c:	4b76      	ldr	r3, [pc, #472]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c8a:	4973      	ldr	r1, [pc, #460]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c92:	e001      	b.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d041      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ca8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cac:	d02a      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004cae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004cb2:	d824      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004cba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cbe:	d81e      	bhi.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d00a      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cc8:	d010      	beq.n	8004cec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004cca:	e018      	b.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ccc:	4b62      	ldr	r3, [pc, #392]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	4a61      	ldr	r2, [pc, #388]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cd8:	e015      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	2100      	movs	r1, #0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fa43 	bl	800516c <RCCEx_PLLSAI1_Config>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cea:	e00c      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	3320      	adds	r3, #32
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f000 fb2e 	bl	8005354 <RCCEx_PLLSAI2_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	74fb      	strb	r3, [r7, #19]
      break;
 8004d02:	e000      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004d04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d06:	7cfb      	ldrb	r3, [r7, #19]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d0c:	4b52      	ldr	r3, [pc, #328]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004d1a:	494f      	ldr	r1, [pc, #316]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004d22:	e001      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d24:	7cfb      	ldrb	r3, [r7, #19]
 8004d26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80a0 	beq.w	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d36:	2300      	movs	r3, #0
 8004d38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004d3a:	4b47      	ldr	r3, [pc, #284]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004d46:	2301      	movs	r3, #1
 8004d48:	e000      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00d      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d50:	4b41      	ldr	r3, [pc, #260]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d54:	4a40      	ldr	r2, [pc, #256]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d5c:	4b3e      	ldr	r3, [pc, #248]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d6c:	4b3b      	ldr	r3, [pc, #236]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a3a      	ldr	r2, [pc, #232]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004d78:	f7fd feec 	bl	8002b54 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d7e:	e009      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d80:	f7fd fee8 	bl	8002b54 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d902      	bls.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	74fb      	strb	r3, [r7, #19]
        break;
 8004d92:	e005      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0ef      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d15c      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004da6:	4b2c      	ldr	r3, [pc, #176]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004db0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d01f      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d019      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004dc4:	4b24      	ldr	r3, [pc, #144]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004dd0:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dd6:	4a20      	ldr	r2, [pc, #128]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004de0:	4b1d      	ldr	r3, [pc, #116]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	4a1c      	ldr	r2, [pc, #112]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004de8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004df0:	4a19      	ldr	r2, [pc, #100]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e02:	f7fd fea7 	bl	8002b54 <HAL_GetTick>
 8004e06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e08:	e00b      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0a:	f7fd fea3 	bl	8002b54 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d902      	bls.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	74fb      	strb	r3, [r7, #19]
            break;
 8004e20:	e006      	b.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004e22:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d0ec      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004e30:	7cfb      	ldrb	r3, [r7, #19]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10c      	bne.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e46:	4904      	ldr	r1, [pc, #16]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004e4e:	e009      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
 8004e54:	e006      	b.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e60:	7cfb      	ldrb	r3, [r7, #19]
 8004e62:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e64:	7c7b      	ldrb	r3, [r7, #17]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d105      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e6a:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e6e:	4aa0      	ldr	r2, [pc, #640]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e74:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d00a      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e82:	4b9b      	ldr	r3, [pc, #620]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e88:	f023 0203 	bic.w	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e90:	4997      	ldr	r1, [pc, #604]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00a      	beq.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ea4:	4b92      	ldr	r3, [pc, #584]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eaa:	f023 020c 	bic.w	r2, r3, #12
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	498f      	ldr	r1, [pc, #572]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0304 	and.w	r3, r3, #4
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ec6:	4b8a      	ldr	r3, [pc, #552]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ecc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed4:	4986      	ldr	r1, [pc, #536]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00a      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004ee8:	4b81      	ldr	r3, [pc, #516]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	497e      	ldr	r1, [pc, #504]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0310 	and.w	r3, r3, #16
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00a      	beq.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f0a:	4b79      	ldr	r3, [pc, #484]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f18:	4975      	ldr	r1, [pc, #468]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0320 	and.w	r3, r3, #32
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d00a      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004f2c:	4b70      	ldr	r3, [pc, #448]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3a:	496d      	ldr	r1, [pc, #436]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f4e:	4b68      	ldr	r3, [pc, #416]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f5c:	4964      	ldr	r1, [pc, #400]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00a      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f70:	4b5f      	ldr	r3, [pc, #380]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	495c      	ldr	r1, [pc, #368]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f92:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa0:	4953      	ldr	r1, [pc, #332]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d00a      	beq.n	8004fca <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fb4:	4b4e      	ldr	r3, [pc, #312]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	494b      	ldr	r1, [pc, #300]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fd6:	4b46      	ldr	r3, [pc, #280]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe4:	4942      	ldr	r1, [pc, #264]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d028      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ff8:	4b3d      	ldr	r3, [pc, #244]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005006:	493a      	ldr	r1, [pc, #232]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005012:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005016:	d106      	bne.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005018:	4b35      	ldr	r3, [pc, #212]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	4a34      	ldr	r2, [pc, #208]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800501e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005022:	60d3      	str	r3, [r2, #12]
 8005024:	e011      	b.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800502e:	d10c      	bne.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	3304      	adds	r3, #4
 8005034:	2101      	movs	r1, #1
 8005036:	4618      	mov	r0, r3
 8005038:	f000 f898 	bl	800516c <RCCEx_PLLSAI1_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d001      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8005046:	7cfb      	ldrb	r3, [r7, #19]
 8005048:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d028      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005056:	4b26      	ldr	r3, [pc, #152]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4922      	ldr	r1, [pc, #136]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005070:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005074:	d106      	bne.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005076:	4b1e      	ldr	r3, [pc, #120]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	4a1d      	ldr	r2, [pc, #116]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800507c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005080:	60d3      	str	r3, [r2, #12]
 8005082:	e011      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005088:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800508c:	d10c      	bne.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	2101      	movs	r1, #1
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f869 	bl	800516c <RCCEx_PLLSAI1_Config>
 800509a:	4603      	mov	r3, r0
 800509c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d001      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d031      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050b4:	4b0e      	ldr	r3, [pc, #56]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80050b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050c2:	490b      	ldr	r1, [pc, #44]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050d2:	d10f      	bne.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	2102      	movs	r1, #2
 80050da:	4618      	mov	r0, r3
 80050dc:	f000 f846 	bl	800516c <RCCEx_PLLSAI1_Config>
 80050e0:	4603      	mov	r3, r0
 80050e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050e4:	7cfb      	ldrb	r3, [r7, #19]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d016      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 80050ea:	7cfb      	ldrb	r3, [r7, #19]
 80050ec:	74bb      	strb	r3, [r7, #18]
 80050ee:	e013      	b.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80050f0:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050fc:	d10c      	bne.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	3320      	adds	r3, #32
 8005102:	2102      	movs	r1, #2
 8005104:	4618      	mov	r0, r3
 8005106:	f000 f925 	bl	8005354 <RCCEx_PLLSAI2_Config>
 800510a:	4603      	mov	r3, r0
 800510c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800510e:	7cfb      	ldrb	r3, [r7, #19]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d001      	beq.n	8005118 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8005114:	7cfb      	ldrb	r3, [r7, #19]
 8005116:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00a      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005124:	4b10      	ldr	r3, [pc, #64]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005132:	490d      	ldr	r1, [pc, #52]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005134:	4313      	orrs	r3, r2
 8005136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00a      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005146:	4b08      	ldr	r3, [pc, #32]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005154:	4904      	ldr	r1, [pc, #16]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8005156:	4313      	orrs	r3, r2
 8005158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800515c:	7cbb      	ldrb	r3, [r7, #18]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40021000 	.word	0x40021000

0800516c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005176:	2300      	movs	r3, #0
 8005178:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800517a:	4b75      	ldr	r3, [pc, #468]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005186:	4b72      	ldr	r3, [pc, #456]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f003 0203 	and.w	r2, r3, #3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d10d      	bne.n	80051b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
       ||
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800519e:	4b6c      	ldr	r3, [pc, #432]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	091b      	lsrs	r3, r3, #4
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	1c5a      	adds	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
       ||
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d047      	beq.n	8005242 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	73fb      	strb	r3, [r7, #15]
 80051b6:	e044      	b.n	8005242 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d018      	beq.n	80051f2 <RCCEx_PLLSAI1_Config+0x86>
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d825      	bhi.n	8005210 <RCCEx_PLLSAI1_Config+0xa4>
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d002      	beq.n	80051ce <RCCEx_PLLSAI1_Config+0x62>
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d009      	beq.n	80051e0 <RCCEx_PLLSAI1_Config+0x74>
 80051cc:	e020      	b.n	8005210 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051ce:	4b60      	ldr	r3, [pc, #384]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11d      	bne.n	8005216 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051de:	e01a      	b.n	8005216 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051e0:	4b5b      	ldr	r3, [pc, #364]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d116      	bne.n	800521a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051f0:	e013      	b.n	800521a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051f2:	4b57      	ldr	r3, [pc, #348]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10f      	bne.n	800521e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051fe:	4b54      	ldr	r3, [pc, #336]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800520e:	e006      	b.n	800521e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	73fb      	strb	r3, [r7, #15]
      break;
 8005214:	e004      	b.n	8005220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005216:	bf00      	nop
 8005218:	e002      	b.n	8005220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800521a:	bf00      	nop
 800521c:	e000      	b.n	8005220 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800521e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005220:	7bfb      	ldrb	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10d      	bne.n	8005242 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005226:	4b4a      	ldr	r3, [pc, #296]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6819      	ldr	r1, [r3, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	3b01      	subs	r3, #1
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	430b      	orrs	r3, r1
 800523c:	4944      	ldr	r1, [pc, #272]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800523e:	4313      	orrs	r3, r2
 8005240:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005242:	7bfb      	ldrb	r3, [r7, #15]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d17d      	bne.n	8005344 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005248:	4b41      	ldr	r3, [pc, #260]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a40      	ldr	r2, [pc, #256]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800524e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005254:	f7fd fc7e 	bl	8002b54 <HAL_GetTick>
 8005258:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800525a:	e009      	b.n	8005270 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800525c:	f7fd fc7a 	bl	8002b54 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d902      	bls.n	8005270 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	73fb      	strb	r3, [r7, #15]
        break;
 800526e:	e005      	b.n	800527c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005270:	4b37      	ldr	r3, [pc, #220]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ef      	bne.n	800525c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800527c:	7bfb      	ldrb	r3, [r7, #15]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d160      	bne.n	8005344 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d111      	bne.n	80052ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005288:	4b31      	ldr	r3, [pc, #196]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	6892      	ldr	r2, [r2, #8]
 8005298:	0211      	lsls	r1, r2, #8
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68d2      	ldr	r2, [r2, #12]
 800529e:	0912      	lsrs	r2, r2, #4
 80052a0:	0452      	lsls	r2, r2, #17
 80052a2:	430a      	orrs	r2, r1
 80052a4:	492a      	ldr	r1, [pc, #168]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	610b      	str	r3, [r1, #16]
 80052aa:	e027      	b.n	80052fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d112      	bne.n	80052d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052b2:	4b27      	ldr	r3, [pc, #156]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80052ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	6892      	ldr	r2, [r2, #8]
 80052c2:	0211      	lsls	r1, r2, #8
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6912      	ldr	r2, [r2, #16]
 80052c8:	0852      	lsrs	r2, r2, #1
 80052ca:	3a01      	subs	r2, #1
 80052cc:	0552      	lsls	r2, r2, #21
 80052ce:	430a      	orrs	r2, r1
 80052d0:	491f      	ldr	r1, [pc, #124]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d2:	4313      	orrs	r3, r2
 80052d4:	610b      	str	r3, [r1, #16]
 80052d6:	e011      	b.n	80052fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80052d8:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80052e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	0211      	lsls	r1, r2, #8
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6952      	ldr	r2, [r2, #20]
 80052ee:	0852      	lsrs	r2, r2, #1
 80052f0:	3a01      	subs	r2, #1
 80052f2:	0652      	lsls	r2, r2, #25
 80052f4:	430a      	orrs	r2, r1
 80052f6:	4916      	ldr	r1, [pc, #88]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80052fc:	4b14      	ldr	r3, [pc, #80]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a13      	ldr	r2, [pc, #76]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005302:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005306:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005308:	f7fd fc24 	bl	8002b54 <HAL_GetTick>
 800530c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800530e:	e009      	b.n	8005324 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005310:	f7fd fc20 	bl	8002b54 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d902      	bls.n	8005324 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	73fb      	strb	r3, [r7, #15]
          break;
 8005322:	e005      	b.n	8005330 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d0ef      	beq.n	8005310 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d106      	bne.n	8005344 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005336:	4b06      	ldr	r3, [pc, #24]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005338:	691a      	ldr	r2, [r3, #16]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	699b      	ldr	r3, [r3, #24]
 800533e:	4904      	ldr	r1, [pc, #16]	; (8005350 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005340:	4313      	orrs	r3, r2
 8005342:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005344:	7bfb      	ldrb	r3, [r7, #15]
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000

08005354 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005362:	4b6a      	ldr	r3, [pc, #424]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d018      	beq.n	80053a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800536e:	4b67      	ldr	r3, [pc, #412]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f003 0203 	and.w	r2, r3, #3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d10d      	bne.n	800539a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
       ||
 8005382:	2b00      	cmp	r3, #0
 8005384:	d009      	beq.n	800539a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005386:	4b61      	ldr	r3, [pc, #388]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	091b      	lsrs	r3, r3, #4
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	1c5a      	adds	r2, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
       ||
 8005396:	429a      	cmp	r2, r3
 8005398:	d047      	beq.n	800542a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	73fb      	strb	r3, [r7, #15]
 800539e:	e044      	b.n	800542a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b03      	cmp	r3, #3
 80053a6:	d018      	beq.n	80053da <RCCEx_PLLSAI2_Config+0x86>
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d825      	bhi.n	80053f8 <RCCEx_PLLSAI2_Config+0xa4>
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d002      	beq.n	80053b6 <RCCEx_PLLSAI2_Config+0x62>
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d009      	beq.n	80053c8 <RCCEx_PLLSAI2_Config+0x74>
 80053b4:	e020      	b.n	80053f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80053b6:	4b55      	ldr	r3, [pc, #340]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0302 	and.w	r3, r3, #2
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d11d      	bne.n	80053fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053c6:	e01a      	b.n	80053fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80053c8:	4b50      	ldr	r3, [pc, #320]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d116      	bne.n	8005402 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053d8:	e013      	b.n	8005402 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80053da:	4b4c      	ldr	r3, [pc, #304]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80053e6:	4b49      	ldr	r3, [pc, #292]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d109      	bne.n	8005406 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80053f6:	e006      	b.n	8005406 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	73fb      	strb	r3, [r7, #15]
      break;
 80053fc:	e004      	b.n	8005408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053fe:	bf00      	nop
 8005400:	e002      	b.n	8005408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005402:	bf00      	nop
 8005404:	e000      	b.n	8005408 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005406:	bf00      	nop
    }

    if(status == HAL_OK)
 8005408:	7bfb      	ldrb	r3, [r7, #15]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d10d      	bne.n	800542a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800540e:	4b3f      	ldr	r3, [pc, #252]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6819      	ldr	r1, [r3, #0]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	3b01      	subs	r3, #1
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	430b      	orrs	r3, r1
 8005424:	4939      	ldr	r1, [pc, #228]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d167      	bne.n	8005500 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005430:	4b36      	ldr	r3, [pc, #216]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a35      	ldr	r2, [pc, #212]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800543a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800543c:	f7fd fb8a 	bl	8002b54 <HAL_GetTick>
 8005440:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005442:	e009      	b.n	8005458 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005444:	f7fd fb86 	bl	8002b54 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d902      	bls.n	8005458 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	73fb      	strb	r3, [r7, #15]
        break;
 8005456:	e005      	b.n	8005464 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005458:	4b2c      	ldr	r3, [pc, #176]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d1ef      	bne.n	8005444 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005464:	7bfb      	ldrb	r3, [r7, #15]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d14a      	bne.n	8005500 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d111      	bne.n	8005494 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005470:	4b26      	ldr	r3, [pc, #152]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	6892      	ldr	r2, [r2, #8]
 8005480:	0211      	lsls	r1, r2, #8
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	68d2      	ldr	r2, [r2, #12]
 8005486:	0912      	lsrs	r2, r2, #4
 8005488:	0452      	lsls	r2, r2, #17
 800548a:	430a      	orrs	r2, r1
 800548c:	491f      	ldr	r1, [pc, #124]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 800548e:	4313      	orrs	r3, r2
 8005490:	614b      	str	r3, [r1, #20]
 8005492:	e011      	b.n	80054b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005494:	4b1d      	ldr	r3, [pc, #116]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800549c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	6892      	ldr	r2, [r2, #8]
 80054a4:	0211      	lsls	r1, r2, #8
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	6912      	ldr	r2, [r2, #16]
 80054aa:	0852      	lsrs	r2, r2, #1
 80054ac:	3a01      	subs	r2, #1
 80054ae:	0652      	lsls	r2, r2, #25
 80054b0:	430a      	orrs	r2, r1
 80054b2:	4916      	ldr	r1, [pc, #88]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80054b8:	4b14      	ldr	r3, [pc, #80]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a13      	ldr	r2, [pc, #76]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7fd fb46 	bl	8002b54 <HAL_GetTick>
 80054c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054ca:	e009      	b.n	80054e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80054cc:	f7fd fb42 	bl	8002b54 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d902      	bls.n	80054e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	73fb      	strb	r3, [r7, #15]
          break;
 80054de:	e005      	b.n	80054ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80054e0:	4b0a      	ldr	r3, [pc, #40]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ef      	beq.n	80054cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80054f2:	4b06      	ldr	r3, [pc, #24]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054f4:	695a      	ldr	r2, [r3, #20]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	4904      	ldr	r1, [pc, #16]	; (800550c <RCCEx_PLLSAI2_Config+0x1b8>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40021000 	.word	0x40021000

08005510 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800551e:	2301      	movs	r3, #1
 8005520:	e095      	b.n	800564e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	2b00      	cmp	r3, #0
 8005528:	d108      	bne.n	800553c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005532:	d009      	beq.n	8005548 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2200      	movs	r2, #0
 8005538:	61da      	str	r2, [r3, #28]
 800553a:	e005      	b.n	8005548 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2200      	movs	r2, #0
 800554c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc fcfc 	bl	8001f60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800557e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005588:	d902      	bls.n	8005590 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800558a:	2300      	movs	r3, #0
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e002      	b.n	8005596 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005590:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005594:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800559e:	d007      	beq.n	80055b0 <HAL_SPI_Init+0xa0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055a8:	d002      	beq.n	80055b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80055c0:	431a      	orrs	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	431a      	orrs	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	695b      	ldr	r3, [r3, #20]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055de:	431a      	orrs	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e8:	431a      	orrs	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	ea42 0103 	orr.w	r1, r2, r3
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	0c1b      	lsrs	r3, r3, #16
 800560c:	f003 0204 	and.w	r2, r3, #4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	431a      	orrs	r2, r3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800561e:	f003 0308 	and.w	r3, r3, #8
 8005622:	431a      	orrs	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800562c:	ea42 0103 	orr.w	r1, r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3710      	adds	r7, #16
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b088      	sub	sp, #32
 800565a:	af00      	add	r7, sp, #0
 800565c:	60f8      	str	r0, [r7, #12]
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	603b      	str	r3, [r7, #0]
 8005662:	4613      	mov	r3, r2
 8005664:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d101      	bne.n	8005678 <HAL_SPI_Transmit+0x22>
 8005674:	2302      	movs	r3, #2
 8005676:	e158      	b.n	800592a <HAL_SPI_Transmit+0x2d4>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005680:	f7fd fa68 	bl	8002b54 <HAL_GetTick>
 8005684:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005686:	88fb      	ldrh	r3, [r7, #6]
 8005688:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b01      	cmp	r3, #1
 8005694:	d002      	beq.n	800569c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005696:	2302      	movs	r3, #2
 8005698:	77fb      	strb	r3, [r7, #31]
    goto error;
 800569a:	e13d      	b.n	8005918 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0x52>
 80056a2:	88fb      	ldrh	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056ac:	e134      	b.n	8005918 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2203      	movs	r2, #3
 80056b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	88fa      	ldrh	r2, [r7, #6]
 80056cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f8:	d10f      	bne.n	800571a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005708:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005718:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005724:	2b40      	cmp	r3, #64	; 0x40
 8005726:	d007      	beq.n	8005738 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005736:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005740:	d94b      	bls.n	80057da <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_SPI_Transmit+0xfa>
 800574a:	8afb      	ldrh	r3, [r7, #22]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d13e      	bne.n	80057ce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005754:	881a      	ldrh	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005760:	1c9a      	adds	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576a:	b29b      	uxth	r3, r3
 800576c:	3b01      	subs	r3, #1
 800576e:	b29a      	uxth	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005774:	e02b      	b.n	80057ce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b02      	cmp	r3, #2
 8005782:	d112      	bne.n	80057aa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	881a      	ldrh	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	1c9a      	adds	r2, r3, #2
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800579e:	b29b      	uxth	r3, r3
 80057a0:	3b01      	subs	r3, #1
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80057a8:	e011      	b.n	80057ce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057aa:	f7fd f9d3 	bl	8002b54 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d803      	bhi.n	80057c2 <HAL_SPI_Transmit+0x16c>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d102      	bne.n	80057c8 <HAL_SPI_Transmit+0x172>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d102      	bne.n	80057ce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057cc:	e0a4      	b.n	8005918 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1ce      	bne.n	8005776 <HAL_SPI_Transmit+0x120>
 80057d8:	e07c      	b.n	80058d4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_SPI_Transmit+0x192>
 80057e2:	8afb      	ldrh	r3, [r7, #22]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d170      	bne.n	80058ca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d912      	bls.n	8005818 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	881a      	ldrh	r2, [r3, #0]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	1c9a      	adds	r2, r3, #2
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580c:	b29b      	uxth	r3, r3
 800580e:	3b02      	subs	r3, #2
 8005810:	b29a      	uxth	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005816:	e058      	b.n	80058ca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	330c      	adds	r3, #12
 8005822:	7812      	ldrb	r2, [r2, #0]
 8005824:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800583e:	e044      	b.n	80058ca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	f003 0302 	and.w	r3, r3, #2
 800584a:	2b02      	cmp	r3, #2
 800584c:	d12b      	bne.n	80058a6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d912      	bls.n	800587e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	881a      	ldrh	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	1c9a      	adds	r2, r3, #2
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b02      	subs	r3, #2
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800587c:	e025      	b.n	80058ca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	7812      	ldrb	r2, [r2, #0]
 800588a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	1c5a      	adds	r2, r3, #1
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29a      	uxth	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058a4:	e011      	b.n	80058ca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058a6:	f7fd f955 	bl	8002b54 <HAL_GetTick>
 80058aa:	4602      	mov	r2, r0
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d803      	bhi.n	80058be <HAL_SPI_Transmit+0x268>
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058bc:	d102      	bne.n	80058c4 <HAL_SPI_Transmit+0x26e>
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80058c4:	2303      	movs	r3, #3
 80058c6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80058c8:	e026      	b.n	8005918 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1b5      	bne.n	8005840 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d4:	69ba      	ldr	r2, [r7, #24]
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 fce3 	bl	80062a4 <SPI_EndRxTxTransaction>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d002      	beq.n	80058ea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2220      	movs	r2, #32
 80058e8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10a      	bne.n	8005908 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058f2:	2300      	movs	r3, #0
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	613b      	str	r3, [r7, #16]
 8005906:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	77fb      	strb	r3, [r7, #31]
 8005914:	e000      	b.n	8005918 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005916:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005928:	7ffb      	ldrb	r3, [r7, #31]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b088      	sub	sp, #32
 8005936:	af02      	add	r7, sp, #8
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	603b      	str	r3, [r7, #0]
 800593e:	4613      	mov	r3, r2
 8005940:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005942:	2300      	movs	r3, #0
 8005944:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594e:	d112      	bne.n	8005976 <HAL_SPI_Receive+0x44>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10e      	bne.n	8005976 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2204      	movs	r2, #4
 800595c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005960:	88fa      	ldrh	r2, [r7, #6]
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f910 	bl	8005b92 <HAL_SPI_TransmitReceive>
 8005972:	4603      	mov	r3, r0
 8005974:	e109      	b.n	8005b8a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_SPI_Receive+0x52>
 8005980:	2302      	movs	r3, #2
 8005982:	e102      	b.n	8005b8a <HAL_SPI_Receive+0x258>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800598c:	f7fd f8e2 	bl	8002b54 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	d002      	beq.n	80059a4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800599e:	2302      	movs	r3, #2
 80059a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059a2:	e0e9      	b.n	8005b78 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d002      	beq.n	80059b0 <HAL_SPI_Receive+0x7e>
 80059aa:	88fb      	ldrh	r3, [r7, #6]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059b4:	e0e0      	b.n	8005b78 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2204      	movs	r2, #4
 80059ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	88fa      	ldrh	r2, [r7, #6]
 80059ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	88fa      	ldrh	r2, [r7, #6]
 80059d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2200      	movs	r2, #0
 80059de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a00:	d908      	bls.n	8005a14 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a10:	605a      	str	r2, [r3, #4]
 8005a12:	e007      	b.n	8005a24 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a22:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a2c:	d10f      	bne.n	8005a4e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	681a      	ldr	r2, [r3, #0]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a3c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005a4c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b40      	cmp	r3, #64	; 0x40
 8005a5a:	d007      	beq.n	8005a6c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a6a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a74:	d867      	bhi.n	8005b46 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005a76:	e030      	b.n	8005ada <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d117      	bne.n	8005ab6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f103 020c 	add.w	r2, r3, #12
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	7812      	ldrb	r2, [r2, #0]
 8005a94:	b2d2      	uxtb	r2, r2
 8005a96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aa8:	b29b      	uxth	r3, r3
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	b29a      	uxth	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005ab4:	e011      	b.n	8005ada <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ab6:	f7fd f84d 	bl	8002b54 <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d803      	bhi.n	8005ace <HAL_SPI_Receive+0x19c>
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005acc:	d102      	bne.n	8005ad4 <HAL_SPI_Receive+0x1a2>
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d102      	bne.n	8005ada <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005ad8:	e04e      	b.n	8005b78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1c8      	bne.n	8005a78 <HAL_SPI_Receive+0x146>
 8005ae6:	e034      	b.n	8005b52 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d115      	bne.n	8005b22 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	b292      	uxth	r2, r2
 8005b02:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b08:	1c9a      	adds	r2, r3, #2
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b20:	e011      	b.n	8005b46 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b22:	f7fd f817 	bl	8002b54 <HAL_GetTick>
 8005b26:	4602      	mov	r2, r0
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	1ad3      	subs	r3, r2, r3
 8005b2c:	683a      	ldr	r2, [r7, #0]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d803      	bhi.n	8005b3a <HAL_SPI_Receive+0x208>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b38:	d102      	bne.n	8005b40 <HAL_SPI_Receive+0x20e>
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d102      	bne.n	8005b46 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005b44:	e018      	b.n	8005b78 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1ca      	bne.n	8005ae8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fb4c 	bl	80061f4 <SPI_EndRxTransaction>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2220      	movs	r2, #32
 8005b66:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
 8005b74:	e000      	b.n	8005b78 <HAL_SPI_Receive+0x246>
  }

error :
 8005b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b08a      	sub	sp, #40	; 0x28
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
 8005b9e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d101      	bne.n	8005bb8 <HAL_SPI_TransmitReceive+0x26>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	e1fb      	b.n	8005fb0 <HAL_SPI_TransmitReceive+0x41e>
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bc0:	f7fc ffc8 	bl	8002b54 <HAL_GetTick>
 8005bc4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bcc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005bd4:	887b      	ldrh	r3, [r7, #2]
 8005bd6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005bd8:	887b      	ldrh	r3, [r7, #2]
 8005bda:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005bdc:	7efb      	ldrb	r3, [r7, #27]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d00e      	beq.n	8005c00 <HAL_SPI_TransmitReceive+0x6e>
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005be8:	d106      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d102      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x66>
 8005bf2:	7efb      	ldrb	r3, [r7, #27]
 8005bf4:	2b04      	cmp	r3, #4
 8005bf6:	d003      	beq.n	8005c00 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005bfe:	e1cd      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x80>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_TransmitReceive+0x80>
 8005c0c:	887b      	ldrh	r3, [r7, #2]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d103      	bne.n	8005c1a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c18:	e1c0      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d003      	beq.n	8005c2e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2205      	movs	r2, #5
 8005c2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	887a      	ldrh	r2, [r7, #2]
 8005c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	887a      	ldrh	r2, [r7, #2]
 8005c46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	887a      	ldrh	r2, [r7, #2]
 8005c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	887a      	ldrh	r2, [r7, #2]
 8005c5a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c70:	d802      	bhi.n	8005c78 <HAL_SPI_TransmitReceive+0xe6>
 8005c72:	8a3b      	ldrh	r3, [r7, #16]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d908      	bls.n	8005c8a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005c86:	605a      	str	r2, [r3, #4]
 8005c88:	e007      	b.n	8005c9a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c98:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca4:	2b40      	cmp	r3, #64	; 0x40
 8005ca6:	d007      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc0:	d97c      	bls.n	8005dbc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <HAL_SPI_TransmitReceive+0x13e>
 8005cca:	8a7b      	ldrh	r3, [r7, #18]
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d169      	bne.n	8005da4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce0:	1c9a      	adds	r2, r3, #2
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	3b01      	subs	r3, #1
 8005cee:	b29a      	uxth	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005cf4:	e056      	b.n	8005da4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b02      	cmp	r3, #2
 8005d02:	d11b      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x1aa>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d016      	beq.n	8005d3c <HAL_SPI_TransmitReceive+0x1aa>
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d113      	bne.n	8005d3c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	881a      	ldrh	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d24:	1c9a      	adds	r2, r3, #2
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d11c      	bne.n	8005d84 <HAL_SPI_TransmitReceive+0x1f2>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d016      	beq.n	8005d84 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	b292      	uxth	r2, r2
 8005d62:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d80:	2301      	movs	r3, #1
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005d84:	f7fc fee6 	bl	8002b54 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d807      	bhi.n	8005da4 <HAL_SPI_TransmitReceive+0x212>
 8005d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d9a:	d003      	beq.n	8005da4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005da2:	e0fb      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1a3      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x164>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db4:	b29b      	uxth	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d19d      	bne.n	8005cf6 <HAL_SPI_TransmitReceive+0x164>
 8005dba:	e0df      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_SPI_TransmitReceive+0x23a>
 8005dc4:	8a7b      	ldrh	r3, [r7, #18]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	f040 80cb 	bne.w	8005f62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d912      	bls.n	8005dfc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	881a      	ldrh	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b02      	subs	r3, #2
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dfa:	e0b2      	b.n	8005f62 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	7812      	ldrb	r2, [r2, #0]
 8005e08:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e22:	e09e      	b.n	8005f62 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d134      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x30a>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d02f      	beq.n	8005e9c <HAL_SPI_TransmitReceive+0x30a>
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d12c      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d912      	bls.n	8005e72 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e50:	881a      	ldrh	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	1c9a      	adds	r2, r3, #2
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b02      	subs	r3, #2
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e70:	e012      	b.n	8005e98 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	330c      	adds	r3, #12
 8005e7c:	7812      	ldrb	r2, [r2, #0]
 8005e7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	3b01      	subs	r3, #1
 8005e92:	b29a      	uxth	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d148      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x3aa>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d042      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d923      	bls.n	8005f0a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	68da      	ldr	r2, [r3, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ecc:	b292      	uxth	r2, r2
 8005ece:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	1c9a      	adds	r2, r3, #2
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b02      	subs	r3, #2
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d81f      	bhi.n	8005f38 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f06:	605a      	str	r2, [r3, #4]
 8005f08:	e016      	b.n	8005f38 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f103 020c 	add.w	r2, r3, #12
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	7812      	ldrb	r2, [r2, #0]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005f3c:	f7fc fe0a 	bl	8002b54 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d803      	bhi.n	8005f54 <HAL_SPI_TransmitReceive+0x3c2>
 8005f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f52:	d102      	bne.n	8005f5a <HAL_SPI_TransmitReceive+0x3c8>
 8005f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d103      	bne.n	8005f62 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f60:	e01c      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f47f af5b 	bne.w	8005e24 <HAL_SPI_TransmitReceive+0x292>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f47f af54 	bne.w	8005e24 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f80:	68f8      	ldr	r0, [r7, #12]
 8005f82:	f000 f98f 	bl	80062a4 <SPI_EndRxTxTransaction>
 8005f86:	4603      	mov	r3, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d006      	beq.n	8005f9a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2220      	movs	r2, #32
 8005f96:	661a      	str	r2, [r3, #96]	; 0x60
 8005f98:	e000      	b.n	8005f9c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005f9a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3728      	adds	r7, #40	; 0x28
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	60b9      	str	r1, [r7, #8]
 8005fc2:	603b      	str	r3, [r7, #0]
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fc8:	f7fc fdc4 	bl	8002b54 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	683a      	ldr	r2, [r7, #0]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fd8:	f7fc fdbc 	bl	8002b54 <HAL_GetTick>
 8005fdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fde:	4b39      	ldr	r3, [pc, #228]	; (80060c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	015b      	lsls	r3, r3, #5
 8005fe4:	0d1b      	lsrs	r3, r3, #20
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
 8005fec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fee:	e054      	b.n	800609a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff6:	d050      	beq.n	800609a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ff8:	f7fc fdac 	bl	8002b54 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	69fa      	ldr	r2, [r7, #28]
 8006004:	429a      	cmp	r2, r3
 8006006:	d902      	bls.n	800600e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006008:	69fb      	ldr	r3, [r7, #28]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d13d      	bne.n	800608a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800601c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006026:	d111      	bne.n	800604c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006030:	d004      	beq.n	800603c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800603a:	d107      	bne.n	800604c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800604a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d10f      	bne.n	8006076 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006074:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e017      	b.n	80060ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	3b01      	subs	r3, #1
 8006098:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	689a      	ldr	r2, [r3, #8]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4013      	ands	r3, r2
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	bf0c      	ite	eq
 80060aa:	2301      	moveq	r3, #1
 80060ac:	2300      	movne	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	79fb      	ldrb	r3, [r7, #7]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d19b      	bne.n	8005ff0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3720      	adds	r7, #32
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	2000016c 	.word	0x2000016c

080060c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060da:	f7fc fd3b 	bl	8002b54 <HAL_GetTick>
 80060de:	4602      	mov	r2, r0
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	1a9b      	subs	r3, r3, r2
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	4413      	add	r3, r2
 80060e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80060ea:	f7fc fd33 	bl	8002b54 <HAL_GetTick>
 80060ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	330c      	adds	r3, #12
 80060f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80060f8:	4b3d      	ldr	r3, [pc, #244]	; (80061f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4613      	mov	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	4413      	add	r3, r2
 8006102:	00da      	lsls	r2, r3, #3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	0d1b      	lsrs	r3, r3, #20
 8006108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610a:	fb02 f303 	mul.w	r3, r2, r3
 800610e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006110:	e060      	b.n	80061d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006118:	d107      	bne.n	800612a <SPI_WaitFifoStateUntilTimeout+0x62>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d104      	bne.n	800612a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	b2db      	uxtb	r3, r3
 8006126:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006128:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006130:	d050      	beq.n	80061d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006132:	f7fc fd0f 	bl	8002b54 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613e:	429a      	cmp	r2, r3
 8006140:	d902      	bls.n	8006148 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006144:	2b00      	cmp	r3, #0
 8006146:	d13d      	bne.n	80061c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685a      	ldr	r2, [r3, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006156:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006160:	d111      	bne.n	8006186 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800616a:	d004      	beq.n	8006176 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006174:	d107      	bne.n	8006186 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006184:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618e:	d10f      	bne.n	80061b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e010      	b.n	80061e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061c4:	69bb      	ldr	r3, [r7, #24]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061ca:	2300      	movs	r3, #0
 80061cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	3b01      	subs	r3, #1
 80061d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	4013      	ands	r3, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d196      	bne.n	8006112 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3728      	adds	r7, #40	; 0x28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	2000016c 	.word	0x2000016c

080061f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b086      	sub	sp, #24
 80061f8:	af02      	add	r7, sp, #8
 80061fa:	60f8      	str	r0, [r7, #12]
 80061fc:	60b9      	str	r1, [r7, #8]
 80061fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006208:	d111      	bne.n	800622e <SPI_EndRxTransaction+0x3a>
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006212:	d004      	beq.n	800621e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621c:	d107      	bne.n	800622e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800622c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	2200      	movs	r2, #0
 8006236:	2180      	movs	r1, #128	; 0x80
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7ff febd 	bl	8005fb8 <SPI_WaitFlagStateUntilTimeout>
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006248:	f043 0220 	orr.w	r2, r3, #32
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006250:	2303      	movs	r3, #3
 8006252:	e023      	b.n	800629c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800625c:	d11d      	bne.n	800629a <SPI_EndRxTransaction+0xa6>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	689b      	ldr	r3, [r3, #8]
 8006262:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006266:	d004      	beq.n	8006272 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006270:	d113      	bne.n	800629a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff ff22 	bl	80060c8 <SPI_WaitFifoStateUntilTimeout>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d007      	beq.n	800629a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628e:	f043 0220 	orr.w	r2, r3, #32
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e000      	b.n	800629c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	60b9      	str	r1, [r7, #8]
 80062ae:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff ff03 	bl	80060c8 <SPI_WaitFifoStateUntilTimeout>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d007      	beq.n	80062d8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	f043 0220 	orr.w	r2, r3, #32
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062d4:	2303      	movs	r3, #3
 80062d6:	e027      	b.n	8006328 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	9300      	str	r3, [sp, #0]
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	2180      	movs	r1, #128	; 0x80
 80062e2:	68f8      	ldr	r0, [r7, #12]
 80062e4:	f7ff fe68 	bl	8005fb8 <SPI_WaitFlagStateUntilTimeout>
 80062e8:	4603      	mov	r3, r0
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d007      	beq.n	80062fe <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062f2:	f043 0220 	orr.w	r2, r3, #32
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e014      	b.n	8006328 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	2200      	movs	r2, #0
 8006306:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800630a:	68f8      	ldr	r0, [r7, #12]
 800630c:	f7ff fedc 	bl	80060c8 <SPI_WaitFifoStateUntilTimeout>
 8006310:	4603      	mov	r3, r0
 8006312:	2b00      	cmp	r3, #0
 8006314:	d007      	beq.n	8006326 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800631a:	f043 0220 	orr.w	r2, r3, #32
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	e000      	b.n	8006328 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3710      	adds	r7, #16
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e049      	b.n	80063d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fb fe78 	bl	800204c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2202      	movs	r2, #2
 8006360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4619      	mov	r1, r3
 800636e:	4610      	mov	r0, r2
 8006370:	f000 f9ee 	bl	8006750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3708      	adds	r7, #8
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
	...

080063e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b01      	cmp	r3, #1
 80063f2:	d001      	beq.n	80063f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	e04f      	b.n	8006498 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f042 0201 	orr.w	r2, r2, #1
 800640e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a23      	ldr	r2, [pc, #140]	; (80064a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d01d      	beq.n	8006456 <HAL_TIM_Base_Start_IT+0x76>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006422:	d018      	beq.n	8006456 <HAL_TIM_Base_Start_IT+0x76>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1f      	ldr	r2, [pc, #124]	; (80064a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_TIM_Base_Start_IT+0x76>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1e      	ldr	r2, [pc, #120]	; (80064ac <HAL_TIM_Base_Start_IT+0xcc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00e      	beq.n	8006456 <HAL_TIM_Base_Start_IT+0x76>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1c      	ldr	r2, [pc, #112]	; (80064b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d009      	beq.n	8006456 <HAL_TIM_Base_Start_IT+0x76>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1b      	ldr	r2, [pc, #108]	; (80064b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d004      	beq.n	8006456 <HAL_TIM_Base_Start_IT+0x76>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d115      	bne.n	8006482 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	689a      	ldr	r2, [r3, #8]
 800645c:	4b17      	ldr	r3, [pc, #92]	; (80064bc <HAL_TIM_Base_Start_IT+0xdc>)
 800645e:	4013      	ands	r3, r2
 8006460:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2b06      	cmp	r3, #6
 8006466:	d015      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0xb4>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800646e:	d011      	beq.n	8006494 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0201 	orr.w	r2, r2, #1
 800647e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006480:	e008      	b.n	8006494 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f042 0201 	orr.w	r2, r2, #1
 8006490:	601a      	str	r2, [r3, #0]
 8006492:	e000      	b.n	8006496 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006494:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	40012c00 	.word	0x40012c00
 80064a8:	40000400 	.word	0x40000400
 80064ac:	40000800 	.word	0x40000800
 80064b0:	40000c00 	.word	0x40000c00
 80064b4:	40013400 	.word	0x40013400
 80064b8:	40014000 	.word	0x40014000
 80064bc:	00010007 	.word	0x00010007

080064c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d122      	bne.n	800651c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	f003 0302 	and.w	r3, r3, #2
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d11b      	bne.n	800651c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0202 	mvn.w	r2, #2
 80064ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f905 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006508:	e005      	b.n	8006516 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 f8f7 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 f908 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b04      	cmp	r3, #4
 8006528:	d122      	bne.n	8006570 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b04      	cmp	r3, #4
 8006536:	d11b      	bne.n	8006570 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f06f 0204 	mvn.w	r2, #4
 8006540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2202      	movs	r2, #2
 8006546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699b      	ldr	r3, [r3, #24]
 800654e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006552:	2b00      	cmp	r3, #0
 8006554:	d003      	beq.n	800655e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8db 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 800655c:	e005      	b.n	800656a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f8cd 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f8de 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b08      	cmp	r3, #8
 800657c:	d122      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f003 0308 	and.w	r3, r3, #8
 8006588:	2b08      	cmp	r3, #8
 800658a:	d11b      	bne.n	80065c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0208 	mvn.w	r2, #8
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2204      	movs	r2, #4
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f8b1 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f8a3 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f8b4 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	f003 0310 	and.w	r3, r3, #16
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d122      	bne.n	8006618 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	f003 0310 	and.w	r3, r3, #16
 80065dc:	2b10      	cmp	r3, #16
 80065de:	d11b      	bne.n	8006618 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f06f 0210 	mvn.w	r2, #16
 80065e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2208      	movs	r2, #8
 80065ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69db      	ldr	r3, [r3, #28]
 80065f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d003      	beq.n	8006606 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f887 	bl	8006712 <HAL_TIM_IC_CaptureCallback>
 8006604:	e005      	b.n	8006612 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f879 	bl	80066fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f88a 	bl	8006726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b01      	cmp	r3, #1
 8006624:	d10e      	bne.n	8006644 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	f003 0301 	and.w	r3, r3, #1
 8006630:	2b01      	cmp	r3, #1
 8006632:	d107      	bne.n	8006644 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f06f 0201 	mvn.w	r2, #1
 800663c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb fbd8 	bl	8001df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	691b      	ldr	r3, [r3, #16]
 800664a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800664e:	2b80      	cmp	r3, #128	; 0x80
 8006650:	d10e      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b80      	cmp	r3, #128	; 0x80
 800665e:	d107      	bne.n	8006670 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f914 	bl	8006898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800667a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800667e:	d10e      	bne.n	800669e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	68db      	ldr	r3, [r3, #12]
 8006686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800668a:	2b80      	cmp	r3, #128	; 0x80
 800668c:	d107      	bne.n	800669e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f907 	bl	80068ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a8:	2b40      	cmp	r3, #64	; 0x40
 80066aa:	d10e      	bne.n	80066ca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b6:	2b40      	cmp	r3, #64	; 0x40
 80066b8:	d107      	bne.n	80066ca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 f838 	bl	800673a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	f003 0320 	and.w	r3, r3, #32
 80066d4:	2b20      	cmp	r3, #32
 80066d6:	d10e      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b20      	cmp	r3, #32
 80066e4:	d107      	bne.n	80066f6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f06f 0220 	mvn.w	r2, #32
 80066ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f000 f8c7 	bl	8006884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066f6:	bf00      	nop
 80066f8:	3708      	adds	r7, #8
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
	...

08006750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4a40      	ldr	r2, [pc, #256]	; (8006864 <TIM_Base_SetConfig+0x114>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d013      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800676e:	d00f      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a3d      	ldr	r2, [pc, #244]	; (8006868 <TIM_Base_SetConfig+0x118>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00b      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a3c      	ldr	r2, [pc, #240]	; (800686c <TIM_Base_SetConfig+0x11c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d007      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a3b      	ldr	r2, [pc, #236]	; (8006870 <TIM_Base_SetConfig+0x120>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d003      	beq.n	8006790 <TIM_Base_SetConfig+0x40>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a3a      	ldr	r2, [pc, #232]	; (8006874 <TIM_Base_SetConfig+0x124>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d108      	bne.n	80067a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <TIM_Base_SetConfig+0x114>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d01f      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b0:	d01b      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4a2c      	ldr	r2, [pc, #176]	; (8006868 <TIM_Base_SetConfig+0x118>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d017      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	4a2b      	ldr	r2, [pc, #172]	; (800686c <TIM_Base_SetConfig+0x11c>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a2a      	ldr	r2, [pc, #168]	; (8006870 <TIM_Base_SetConfig+0x120>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d00f      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a29      	ldr	r2, [pc, #164]	; (8006874 <TIM_Base_SetConfig+0x124>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d00b      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a28      	ldr	r2, [pc, #160]	; (8006878 <TIM_Base_SetConfig+0x128>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d007      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a27      	ldr	r2, [pc, #156]	; (800687c <TIM_Base_SetConfig+0x12c>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d003      	beq.n	80067ea <TIM_Base_SetConfig+0x9a>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a26      	ldr	r2, [pc, #152]	; (8006880 <TIM_Base_SetConfig+0x130>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d108      	bne.n	80067fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	4313      	orrs	r3, r2
 8006808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689a      	ldr	r2, [r3, #8]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a10      	ldr	r2, [pc, #64]	; (8006864 <TIM_Base_SetConfig+0x114>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d00f      	beq.n	8006848 <TIM_Base_SetConfig+0xf8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	4a12      	ldr	r2, [pc, #72]	; (8006874 <TIM_Base_SetConfig+0x124>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00b      	beq.n	8006848 <TIM_Base_SetConfig+0xf8>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4a11      	ldr	r2, [pc, #68]	; (8006878 <TIM_Base_SetConfig+0x128>)
 8006834:	4293      	cmp	r3, r2
 8006836:	d007      	beq.n	8006848 <TIM_Base_SetConfig+0xf8>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a10      	ldr	r2, [pc, #64]	; (800687c <TIM_Base_SetConfig+0x12c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d003      	beq.n	8006848 <TIM_Base_SetConfig+0xf8>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a0f      	ldr	r2, [pc, #60]	; (8006880 <TIM_Base_SetConfig+0x130>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d103      	bne.n	8006850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	615a      	str	r2, [r3, #20]
}
 8006856:	bf00      	nop
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	40012c00 	.word	0x40012c00
 8006868:	40000400 	.word	0x40000400
 800686c:	40000800 	.word	0x40000800
 8006870:	40000c00 	.word	0x40000c00
 8006874:	40013400 	.word	0x40013400
 8006878:	40014000 	.word	0x40014000
 800687c:	40014400 	.word	0x40014400
 8006880:	40014800 	.word	0x40014800

08006884 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80068c4:	4904      	ldr	r1, [pc, #16]	; (80068d8 <MX_FATFS_Init+0x18>)
 80068c6:	4805      	ldr	r0, [pc, #20]	; (80068dc <MX_FATFS_Init+0x1c>)
 80068c8:	f003 f922 	bl	8009b10 <FATFS_LinkDriver>
 80068cc:	4603      	mov	r3, r0
 80068ce:	461a      	mov	r2, r3
 80068d0:	4b03      	ldr	r3, [pc, #12]	; (80068e0 <MX_FATFS_Init+0x20>)
 80068d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}
 80068d8:	200004c8 	.word	0x200004c8
 80068dc:	20000178 	.word	0x20000178
 80068e0:	200004c4 	.word	0x200004c4

080068e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80068e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	4603      	mov	r3, r0
 80068fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	4618      	mov	r0, r3
 8006902:	f000 f9d7 	bl	8006cb4 <USER_SPI_initialize>
 8006906:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	4603      	mov	r3, r0
 8006918:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800691a:	79fb      	ldrb	r3, [r7, #7]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fab3 	bl	8006e88 <USER_SPI_status>
 8006922:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8006924:	4618      	mov	r0, r3
 8006926:	3708      	adds	r7, #8
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60b9      	str	r1, [r7, #8]
 8006934:	607a      	str	r2, [r7, #4]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 800693c:	7bf8      	ldrb	r0, [r7, #15]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	68b9      	ldr	r1, [r7, #8]
 8006944:	f000 fab6 	bl	8006eb4 <USER_SPI_read>
 8006948:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800694a:	4618      	mov	r0, r3
 800694c:	3710      	adds	r7, #16
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b084      	sub	sp, #16
 8006956:	af00      	add	r7, sp, #0
 8006958:	60b9      	str	r1, [r7, #8]
 800695a:	607a      	str	r2, [r7, #4]
 800695c:	603b      	str	r3, [r7, #0]
 800695e:	4603      	mov	r3, r0
 8006960:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 8006962:	7bf8      	ldrb	r0, [r7, #15]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	68b9      	ldr	r1, [r7, #8]
 800696a:	f000 fb09 	bl	8006f80 <USER_SPI_write>
 800696e:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	603a      	str	r2, [r7, #0]
 8006982:	71fb      	strb	r3, [r7, #7]
 8006984:	460b      	mov	r3, r1
 8006986:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006988:	79b9      	ldrb	r1, [r7, #6]
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	4618      	mov	r0, r3
 8006990:	f000 fb72 	bl	8007078 <USER_SPI_ioctl>
 8006994:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8006996:	4618      	mov	r0, r3
 8006998:	3708      	adds	r7, #8
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80069a8:	f7fc f8d4 	bl	8002b54 <HAL_GetTick>
 80069ac:	4603      	mov	r3, r0
 80069ae:	4a04      	ldr	r2, [pc, #16]	; (80069c0 <SPI_Timer_On+0x20>)
 80069b0:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 80069b2:	4a04      	ldr	r2, [pc, #16]	; (80069c4 <SPI_Timer_On+0x24>)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6013      	str	r3, [r2, #0]
}
 80069b8:	bf00      	nop
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	200004d0 	.word	0x200004d0
 80069c4:	200004d4 	.word	0x200004d4

080069c8 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 80069cc:	f7fc f8c2 	bl	8002b54 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <SPI_Timer_Status+0x24>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	1ad2      	subs	r2, r2, r3
 80069d8:	4b05      	ldr	r3, [pc, #20]	; (80069f0 <SPI_Timer_Status+0x28>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	bf34      	ite	cc
 80069e0:	2301      	movcc	r3, #1
 80069e2:	2300      	movcs	r3, #0
 80069e4:	b2db      	uxtb	r3, r3
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	200004d0 	.word	0x200004d0
 80069f0:	200004d4 	.word	0x200004d4

080069f4 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b086      	sub	sp, #24
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	4603      	mov	r3, r0
 80069fc:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 80069fe:	f107 020f 	add.w	r2, r7, #15
 8006a02:	1df9      	adds	r1, r7, #7
 8006a04:	2332      	movs	r3, #50	; 0x32
 8006a06:	9300      	str	r3, [sp, #0]
 8006a08:	2301      	movs	r3, #1
 8006a0a:	4804      	ldr	r0, [pc, #16]	; (8006a1c <xchg_spi+0x28>)
 8006a0c:	f7ff f8c1 	bl	8005b92 <HAL_SPI_TransmitReceive>
    return rxDat;
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	2000029c 	.word	0x2000029c

08006a20 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006a20:	b590      	push	{r4, r7, lr}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	60fb      	str	r3, [r7, #12]
 8006a2e:	e00a      	b.n	8006a46 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	18d4      	adds	r4, r2, r3
 8006a36:	20ff      	movs	r0, #255	; 0xff
 8006a38:	f7ff ffdc 	bl	80069f4 <xchg_spi>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	3301      	adds	r3, #1
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d3f0      	bcc.n	8006a30 <rcvr_spi_multi+0x10>
	}
}
 8006a4e:	bf00      	nop
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd90      	pop	{r4, r7, pc}

08006a58 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 8006a62:	2300      	movs	r3, #0
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	e009      	b.n	8006a7c <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7ff ffbf 	bl	80069f4 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	3301      	adds	r3, #1
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d3f1      	bcc.n	8006a68 <xmit_spi_multi+0x10>
	}
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	3710      	adds	r7, #16
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}

08006a8e <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b086      	sub	sp, #24
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006a96:	f7fc f85d 	bl	8002b54 <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8006aa0:	20ff      	movs	r0, #255	; 0xff
 8006aa2:	f7ff ffa7 	bl	80069f4 <xchg_spi>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
 8006aac:	2bff      	cmp	r3, #255	; 0xff
 8006aae:	d007      	beq.n	8006ac0 <wait_ready+0x32>
 8006ab0:	f7fc f850 	bl	8002b54 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d8ef      	bhi.n	8006aa0 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
 8006ac2:	2bff      	cmp	r3, #255	; 0xff
 8006ac4:	bf0c      	ite	eq
 8006ac6:	2301      	moveq	r3, #1
 8006ac8:	2300      	movne	r3, #0
 8006aca:	b2db      	uxtb	r3, r3
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	3718      	adds	r7, #24
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2110      	movs	r1, #16
 8006adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006ae0:	f7fc fb3c 	bl	800315c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006ae4:	20ff      	movs	r0, #255	; 0xff
 8006ae6:	f7ff ff85 	bl	80069f4 <xchg_spi>

}
 8006aea:	bf00      	nop
 8006aec:	bd80      	pop	{r7, pc}

08006aee <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006af2:	2200      	movs	r2, #0
 8006af4:	2110      	movs	r1, #16
 8006af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006afa:	f7fc fb2f 	bl	800315c <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006afe:	20ff      	movs	r0, #255	; 0xff
 8006b00:	f7ff ff78 	bl	80069f4 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006b04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b08:	f7ff ffc1 	bl	8006a8e <wait_ready>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <spiselect+0x28>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e002      	b.n	8006b1c <spiselect+0x2e>

	despiselect();
 8006b16:	f7ff ffdd 	bl	8006ad4 <despiselect>
	return 0;	/* Timeout */
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8006b2a:	20c8      	movs	r0, #200	; 0xc8
 8006b2c:	f7ff ff38 	bl	80069a0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8006b30:	20ff      	movs	r0, #255	; 0xff
 8006b32:	f7ff ff5f 	bl	80069f4 <xchg_spi>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2bff      	cmp	r3, #255	; 0xff
 8006b3e:	d104      	bne.n	8006b4a <rcvr_datablock+0x2a>
 8006b40:	f7ff ff42 	bl	80069c8 <SPI_Timer_Status>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f2      	bne.n	8006b30 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8006b4a:	7bfb      	ldrb	r3, [r7, #15]
 8006b4c:	2bfe      	cmp	r3, #254	; 0xfe
 8006b4e:	d001      	beq.n	8006b54 <rcvr_datablock+0x34>
 8006b50:	2300      	movs	r3, #0
 8006b52:	e00a      	b.n	8006b6a <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f7ff ff62 	bl	8006a20 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8006b5c:	20ff      	movs	r0, #255	; 0xff
 8006b5e:	f7ff ff49 	bl	80069f4 <xchg_spi>
 8006b62:	20ff      	movs	r0, #255	; 0xff
 8006b64:	f7ff ff46 	bl	80069f4 <xchg_spi>

	return 1;						/* Function succeeded */
 8006b68:	2301      	movs	r3, #1
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8006b72:	b580      	push	{r7, lr}
 8006b74:	b084      	sub	sp, #16
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8006b7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b82:	f7ff ff84 	bl	8006a8e <wait_ready>
 8006b86:	4603      	mov	r3, r0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d101      	bne.n	8006b90 <xmit_datablock+0x1e>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	e01e      	b.n	8006bce <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff ff2e 	bl	80069f4 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006b98:	78fb      	ldrb	r3, [r7, #3]
 8006b9a:	2bfd      	cmp	r3, #253	; 0xfd
 8006b9c:	d016      	beq.n	8006bcc <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff ff58 	bl	8006a58 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006ba8:	20ff      	movs	r0, #255	; 0xff
 8006baa:	f7ff ff23 	bl	80069f4 <xchg_spi>
 8006bae:	20ff      	movs	r0, #255	; 0xff
 8006bb0:	f7ff ff20 	bl	80069f4 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8006bb4:	20ff      	movs	r0, #255	; 0xff
 8006bb6:	f7ff ff1d 	bl	80069f4 <xchg_spi>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	2b05      	cmp	r3, #5
 8006bc6:	d001      	beq.n	8006bcc <xmit_datablock+0x5a>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	e000      	b.n	8006bce <xmit_datablock+0x5c>
	}
	return 1;
 8006bcc:	2301      	movs	r3, #1
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	4603      	mov	r3, r0
 8006bde:	6039      	str	r1, [r7, #0]
 8006be0:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8006be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da0e      	bge.n	8006c08 <send_cmd+0x32>
		cmd &= 0x7F;
 8006bea:	79fb      	ldrb	r3, [r7, #7]
 8006bec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf0:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	2037      	movs	r0, #55	; 0x37
 8006bf6:	f7ff ffee 	bl	8006bd6 <send_cmd>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d901      	bls.n	8006c08 <send_cmd+0x32>
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	e051      	b.n	8006cac <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	2b0c      	cmp	r3, #12
 8006c0c:	d008      	beq.n	8006c20 <send_cmd+0x4a>
		despiselect();
 8006c0e:	f7ff ff61 	bl	8006ad4 <despiselect>
		if (!spiselect()) return 0xFF;
 8006c12:	f7ff ff6c 	bl	8006aee <spiselect>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d101      	bne.n	8006c20 <send_cmd+0x4a>
 8006c1c:	23ff      	movs	r3, #255	; 0xff
 8006c1e:	e045      	b.n	8006cac <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006c20:	79fb      	ldrb	r3, [r7, #7]
 8006c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fee3 	bl	80069f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	0e1b      	lsrs	r3, r3, #24
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	4618      	mov	r0, r3
 8006c36:	f7ff fedd 	bl	80069f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	0c1b      	lsrs	r3, r3, #16
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff fed7 	bl	80069f4 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	0a1b      	lsrs	r3, r3, #8
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7ff fed1 	bl	80069f4 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff fecc 	bl	80069f4 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8006c60:	79fb      	ldrb	r3, [r7, #7]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d101      	bne.n	8006c6a <send_cmd+0x94>
 8006c66:	2395      	movs	r3, #149	; 0x95
 8006c68:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d101      	bne.n	8006c74 <send_cmd+0x9e>
 8006c70:	2387      	movs	r3, #135	; 0x87
 8006c72:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff febc 	bl	80069f4 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	2b0c      	cmp	r3, #12
 8006c80:	d102      	bne.n	8006c88 <send_cmd+0xb2>
 8006c82:	20ff      	movs	r0, #255	; 0xff
 8006c84:	f7ff feb6 	bl	80069f4 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006c88:	230a      	movs	r3, #10
 8006c8a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006c8c:	20ff      	movs	r0, #255	; 0xff
 8006c8e:	f7ff feb1 	bl	80069f4 <xchg_spi>
 8006c92:	4603      	mov	r3, r0
 8006c94:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8006c96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	da05      	bge.n	8006caa <send_cmd+0xd4>
 8006c9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	73fb      	strb	r3, [r7, #15]
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d1f0      	bne.n	8006c8c <send_cmd+0xb6>

	return res;							/* Return received response */
 8006caa:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006cb4:	b590      	push	{r4, r7, lr}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006cbe:	79fb      	ldrb	r3, [r7, #7]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d001      	beq.n	8006cc8 <USER_SPI_initialize+0x14>
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e0d4      	b.n	8006e72 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006cc8:	4b6c      	ldr	r3, [pc, #432]	; (8006e7c <USER_SPI_initialize+0x1c8>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d003      	beq.n	8006cde <USER_SPI_initialize+0x2a>
 8006cd6:	4b69      	ldr	r3, [pc, #420]	; (8006e7c <USER_SPI_initialize+0x1c8>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	e0c9      	b.n	8006e72 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8006cde:	4b68      	ldr	r3, [pc, #416]	; (8006e80 <USER_SPI_initialize+0x1cc>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ce8:	4b65      	ldr	r3, [pc, #404]	; (8006e80 <USER_SPI_initialize+0x1cc>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f042 0218 	orr.w	r2, r2, #24
 8006cf0:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8006cf2:	230a      	movs	r3, #10
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e005      	b.n	8006d04 <USER_SPI_initialize+0x50>
 8006cf8:	20ff      	movs	r0, #255	; 0xff
 8006cfa:	f7ff fe7b 	bl	80069f4 <xchg_spi>
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	3b01      	subs	r3, #1
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1f6      	bne.n	8006cf8 <USER_SPI_initialize+0x44>

	ty = 0;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006d0e:	2100      	movs	r1, #0
 8006d10:	2000      	movs	r0, #0
 8006d12:	f7ff ff60 	bl	8006bd6 <send_cmd>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	f040 808b 	bne.w	8006e34 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006d1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d22:	f7ff fe3d 	bl	80069a0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8006d26:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006d2a:	2008      	movs	r0, #8
 8006d2c:	f7ff ff53 	bl	8006bd6 <send_cmd>
 8006d30:	4603      	mov	r3, r0
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d151      	bne.n	8006dda <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8006d36:	2300      	movs	r3, #0
 8006d38:	73fb      	strb	r3, [r7, #15]
 8006d3a:	e00d      	b.n	8006d58 <USER_SPI_initialize+0xa4>
 8006d3c:	7bfc      	ldrb	r4, [r7, #15]
 8006d3e:	20ff      	movs	r0, #255	; 0xff
 8006d40:	f7ff fe58 	bl	80069f4 <xchg_spi>
 8006d44:	4603      	mov	r3, r0
 8006d46:	461a      	mov	r2, r3
 8006d48:	f104 0310 	add.w	r3, r4, #16
 8006d4c:	443b      	add	r3, r7
 8006d4e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006d52:	7bfb      	ldrb	r3, [r7, #15]
 8006d54:	3301      	adds	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b03      	cmp	r3, #3
 8006d5c:	d9ee      	bls.n	8006d3c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8006d5e:	7abb      	ldrb	r3, [r7, #10]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d167      	bne.n	8006e34 <USER_SPI_initialize+0x180>
 8006d64:	7afb      	ldrb	r3, [r7, #11]
 8006d66:	2baa      	cmp	r3, #170	; 0xaa
 8006d68:	d164      	bne.n	8006e34 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8006d6a:	bf00      	nop
 8006d6c:	f7ff fe2c 	bl	80069c8 <SPI_Timer_Status>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <USER_SPI_initialize+0xd2>
 8006d76:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006d7a:	20a9      	movs	r0, #169	; 0xa9
 8006d7c:	f7ff ff2b 	bl	8006bd6 <send_cmd>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1f2      	bne.n	8006d6c <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8006d86:	f7ff fe1f 	bl	80069c8 <SPI_Timer_Status>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d051      	beq.n	8006e34 <USER_SPI_initialize+0x180>
 8006d90:	2100      	movs	r1, #0
 8006d92:	203a      	movs	r0, #58	; 0x3a
 8006d94:	f7ff ff1f 	bl	8006bd6 <send_cmd>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d14a      	bne.n	8006e34 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006d9e:	2300      	movs	r3, #0
 8006da0:	73fb      	strb	r3, [r7, #15]
 8006da2:	e00d      	b.n	8006dc0 <USER_SPI_initialize+0x10c>
 8006da4:	7bfc      	ldrb	r4, [r7, #15]
 8006da6:	20ff      	movs	r0, #255	; 0xff
 8006da8:	f7ff fe24 	bl	80069f4 <xchg_spi>
 8006dac:	4603      	mov	r3, r0
 8006dae:	461a      	mov	r2, r3
 8006db0:	f104 0310 	add.w	r3, r4, #16
 8006db4:	443b      	add	r3, r7
 8006db6:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	73fb      	strb	r3, [r7, #15]
 8006dc0:	7bfb      	ldrb	r3, [r7, #15]
 8006dc2:	2b03      	cmp	r3, #3
 8006dc4:	d9ee      	bls.n	8006da4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006dc6:	7a3b      	ldrb	r3, [r7, #8]
 8006dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d001      	beq.n	8006dd4 <USER_SPI_initialize+0x120>
 8006dd0:	230c      	movs	r3, #12
 8006dd2:	e000      	b.n	8006dd6 <USER_SPI_initialize+0x122>
 8006dd4:	2304      	movs	r3, #4
 8006dd6:	737b      	strb	r3, [r7, #13]
 8006dd8:	e02c      	b.n	8006e34 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006dda:	2100      	movs	r1, #0
 8006ddc:	20a9      	movs	r0, #169	; 0xa9
 8006dde:	f7ff fefa 	bl	8006bd6 <send_cmd>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d804      	bhi.n	8006df2 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006de8:	2302      	movs	r3, #2
 8006dea:	737b      	strb	r3, [r7, #13]
 8006dec:	23a9      	movs	r3, #169	; 0xa9
 8006dee:	73bb      	strb	r3, [r7, #14]
 8006df0:	e003      	b.n	8006dfa <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006df2:	2301      	movs	r3, #1
 8006df4:	737b      	strb	r3, [r7, #13]
 8006df6:	2301      	movs	r3, #1
 8006df8:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006dfa:	bf00      	nop
 8006dfc:	f7ff fde4 	bl	80069c8 <SPI_Timer_Status>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <USER_SPI_initialize+0x162>
 8006e06:	7bbb      	ldrb	r3, [r7, #14]
 8006e08:	2100      	movs	r1, #0
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fee3 	bl	8006bd6 <send_cmd>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f2      	bne.n	8006dfc <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006e16:	f7ff fdd7 	bl	80069c8 <SPI_Timer_Status>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d007      	beq.n	8006e30 <USER_SPI_initialize+0x17c>
 8006e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006e24:	2010      	movs	r0, #16
 8006e26:	f7ff fed6 	bl	8006bd6 <send_cmd>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <USER_SPI_initialize+0x180>
				ty = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006e34:	4a13      	ldr	r2, [pc, #76]	; (8006e84 <USER_SPI_initialize+0x1d0>)
 8006e36:	7b7b      	ldrb	r3, [r7, #13]
 8006e38:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006e3a:	f7ff fe4b 	bl	8006ad4 <despiselect>

	if (ty) {			/* OK */
 8006e3e:	7b7b      	ldrb	r3, [r7, #13]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d010      	beq.n	8006e66 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8006e44:	4b0e      	ldr	r3, [pc, #56]	; (8006e80 <USER_SPI_initialize+0x1cc>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b0d      	ldr	r3, [pc, #52]	; (8006e80 <USER_SPI_initialize+0x1cc>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 0238 	bic.w	r2, r2, #56	; 0x38
 8006e52:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006e54:	4b09      	ldr	r3, [pc, #36]	; (8006e7c <USER_SPI_initialize+0x1c8>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	f023 0301 	bic.w	r3, r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	4b06      	ldr	r3, [pc, #24]	; (8006e7c <USER_SPI_initialize+0x1c8>)
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e002      	b.n	8006e6c <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <USER_SPI_initialize+0x1c8>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006e6c:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <USER_SPI_initialize+0x1c8>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	b2db      	uxtb	r3, r3
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd90      	pop	{r4, r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	2000018c 	.word	0x2000018c
 8006e80:	2000029c 	.word	0x2000029c
 8006e84:	200004cc 	.word	0x200004cc

08006e88 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006e92:	79fb      	ldrb	r3, [r7, #7]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <USER_SPI_status+0x14>
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e002      	b.n	8006ea2 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006e9c:	4b04      	ldr	r3, [pc, #16]	; (8006eb0 <USER_SPI_status+0x28>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	b2db      	uxtb	r3, r3
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	2000018c 	.word	0x2000018c

08006eb4 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60b9      	str	r1, [r7, #8]
 8006ebc:	607a      	str	r2, [r7, #4]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d102      	bne.n	8006ed0 <USER_SPI_read+0x1c>
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d101      	bne.n	8006ed4 <USER_SPI_read+0x20>
 8006ed0:	2304      	movs	r3, #4
 8006ed2:	e04d      	b.n	8006f70 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006ed4:	4b28      	ldr	r3, [pc, #160]	; (8006f78 <USER_SPI_read+0xc4>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <USER_SPI_read+0x32>
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e044      	b.n	8006f70 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006ee6:	4b25      	ldr	r3, [pc, #148]	; (8006f7c <USER_SPI_read+0xc8>)
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d102      	bne.n	8006ef8 <USER_SPI_read+0x44>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	025b      	lsls	r3, r3, #9
 8006ef6:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d111      	bne.n	8006f22 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006efe:	6879      	ldr	r1, [r7, #4]
 8006f00:	2011      	movs	r0, #17
 8006f02:	f7ff fe68 	bl	8006bd6 <send_cmd>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d129      	bne.n	8006f60 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006f0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f10:	68b8      	ldr	r0, [r7, #8]
 8006f12:	f7ff fe05 	bl	8006b20 <rcvr_datablock>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d021      	beq.n	8006f60 <USER_SPI_read+0xac>
			count = 0;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	603b      	str	r3, [r7, #0]
 8006f20:	e01e      	b.n	8006f60 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006f22:	6879      	ldr	r1, [r7, #4]
 8006f24:	2012      	movs	r0, #18
 8006f26:	f7ff fe56 	bl	8006bd6 <send_cmd>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d117      	bne.n	8006f60 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006f30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f34:	68b8      	ldr	r0, [r7, #8]
 8006f36:	f7ff fdf3 	bl	8006b20 <rcvr_datablock>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <USER_SPI_read+0xa2>
				buff += 512;
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006f46:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	603b      	str	r3, [r7, #0]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1ed      	bne.n	8006f30 <USER_SPI_read+0x7c>
 8006f54:	e000      	b.n	8006f58 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006f56:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006f58:	2100      	movs	r1, #0
 8006f5a:	200c      	movs	r0, #12
 8006f5c:	f7ff fe3b 	bl	8006bd6 <send_cmd>
		}
	}
	despiselect();
 8006f60:	f7ff fdb8 	bl	8006ad4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	bf14      	ite	ne
 8006f6a:	2301      	movne	r3, #1
 8006f6c:	2300      	moveq	r3, #0
 8006f6e:	b2db      	uxtb	r3, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	2000018c 	.word	0x2000018c
 8006f7c:	200004cc 	.word	0x200004cc

08006f80 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	607a      	str	r2, [r7, #4]
 8006f8a:	603b      	str	r3, [r7, #0]
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <USER_SPI_write+0x1c>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d101      	bne.n	8006fa0 <USER_SPI_write+0x20>
 8006f9c:	2304      	movs	r3, #4
 8006f9e:	e063      	b.n	8007068 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006fa0:	4b33      	ldr	r3, [pc, #204]	; (8007070 <USER_SPI_write+0xf0>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	f003 0301 	and.w	r3, r3, #1
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <USER_SPI_write+0x32>
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e05a      	b.n	8007068 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006fb2:	4b2f      	ldr	r3, [pc, #188]	; (8007070 <USER_SPI_write+0xf0>)
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0304 	and.w	r3, r3, #4
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d001      	beq.n	8006fc4 <USER_SPI_write+0x44>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e051      	b.n	8007068 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	; (8007074 <USER_SPI_write+0xf4>)
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d102      	bne.n	8006fd6 <USER_SPI_write+0x56>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	025b      	lsls	r3, r3, #9
 8006fd4:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d110      	bne.n	8006ffe <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	2018      	movs	r0, #24
 8006fe0:	f7ff fdf9 	bl	8006bd6 <send_cmd>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d136      	bne.n	8007058 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006fea:	21fe      	movs	r1, #254	; 0xfe
 8006fec:	68b8      	ldr	r0, [r7, #8]
 8006fee:	f7ff fdc0 	bl	8006b72 <xmit_datablock>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d02f      	beq.n	8007058 <USER_SPI_write+0xd8>
			count = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	603b      	str	r3, [r7, #0]
 8006ffc:	e02c      	b.n	8007058 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <USER_SPI_write+0xf4>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	f003 0306 	and.w	r3, r3, #6
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <USER_SPI_write+0x92>
 800700a:	6839      	ldr	r1, [r7, #0]
 800700c:	2097      	movs	r0, #151	; 0x97
 800700e:	f7ff fde2 	bl	8006bd6 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	2019      	movs	r0, #25
 8007016:	f7ff fdde 	bl	8006bd6 <send_cmd>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d11b      	bne.n	8007058 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007020:	21fc      	movs	r1, #252	; 0xfc
 8007022:	68b8      	ldr	r0, [r7, #8]
 8007024:	f7ff fda5 	bl	8006b72 <xmit_datablock>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <USER_SPI_write+0xc4>
				buff += 512;
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007034:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	3b01      	subs	r3, #1
 800703a:	603b      	str	r3, [r7, #0]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d1ee      	bne.n	8007020 <USER_SPI_write+0xa0>
 8007042:	e000      	b.n	8007046 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007044:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007046:	21fd      	movs	r1, #253	; 0xfd
 8007048:	2000      	movs	r0, #0
 800704a:	f7ff fd92 	bl	8006b72 <xmit_datablock>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d101      	bne.n	8007058 <USER_SPI_write+0xd8>
 8007054:	2301      	movs	r3, #1
 8007056:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007058:	f7ff fd3c 	bl	8006ad4 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	2b00      	cmp	r3, #0
 8007060:	bf14      	ite	ne
 8007062:	2301      	movne	r3, #1
 8007064:	2300      	moveq	r3, #0
 8007066:	b2db      	uxtb	r3, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	2000018c 	.word	0x2000018c
 8007074:	200004cc 	.word	0x200004cc

08007078 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08c      	sub	sp, #48	; 0x30
 800707c:	af00      	add	r7, sp, #0
 800707e:	4603      	mov	r3, r0
 8007080:	603a      	str	r2, [r7, #0]
 8007082:	71fb      	strb	r3, [r7, #7]
 8007084:	460b      	mov	r3, r1
 8007086:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007088:	79fb      	ldrb	r3, [r7, #7]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <USER_SPI_ioctl+0x1a>
 800708e:	2304      	movs	r3, #4
 8007090:	e15a      	b.n	8007348 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007092:	4baf      	ldr	r3, [pc, #700]	; (8007350 <USER_SPI_ioctl+0x2d8>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b00      	cmp	r3, #0
 800709e:	d001      	beq.n	80070a4 <USER_SPI_ioctl+0x2c>
 80070a0:	2303      	movs	r3, #3
 80070a2:	e151      	b.n	8007348 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 80070aa:	79bb      	ldrb	r3, [r7, #6]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	f200 8136 	bhi.w	800731e <USER_SPI_ioctl+0x2a6>
 80070b2:	a201      	add	r2, pc, #4	; (adr r2, 80070b8 <USER_SPI_ioctl+0x40>)
 80070b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b8:	080070cd 	.word	0x080070cd
 80070bc:	080070e1 	.word	0x080070e1
 80070c0:	0800731f 	.word	0x0800731f
 80070c4:	0800718d 	.word	0x0800718d
 80070c8:	08007283 	.word	0x08007283
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 80070cc:	f7ff fd0f 	bl	8006aee <spiselect>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8127 	beq.w	8007326 <USER_SPI_ioctl+0x2ae>
 80070d8:	2300      	movs	r3, #0
 80070da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 80070de:	e122      	b.n	8007326 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 80070e0:	2100      	movs	r1, #0
 80070e2:	2009      	movs	r0, #9
 80070e4:	f7ff fd77 	bl	8006bd6 <send_cmd>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	f040 811d 	bne.w	800732a <USER_SPI_ioctl+0x2b2>
 80070f0:	f107 030c 	add.w	r3, r7, #12
 80070f4:	2110      	movs	r1, #16
 80070f6:	4618      	mov	r0, r3
 80070f8:	f7ff fd12 	bl	8006b20 <rcvr_datablock>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8113 	beq.w	800732a <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007104:	7b3b      	ldrb	r3, [r7, #12]
 8007106:	099b      	lsrs	r3, r3, #6
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d111      	bne.n	8007132 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800710e:	7d7b      	ldrb	r3, [r7, #21]
 8007110:	461a      	mov	r2, r3
 8007112:	7d3b      	ldrb	r3, [r7, #20]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	4413      	add	r3, r2
 8007118:	461a      	mov	r2, r3
 800711a:	7cfb      	ldrb	r3, [r7, #19]
 800711c:	041b      	lsls	r3, r3, #16
 800711e:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8007122:	4413      	add	r3, r2
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	029a      	lsls	r2, r3, #10
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	e028      	b.n	8007184 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007132:	7c7b      	ldrb	r3, [r7, #17]
 8007134:	f003 030f 	and.w	r3, r3, #15
 8007138:	b2da      	uxtb	r2, r3
 800713a:	7dbb      	ldrb	r3, [r7, #22]
 800713c:	09db      	lsrs	r3, r3, #7
 800713e:	b2db      	uxtb	r3, r3
 8007140:	4413      	add	r3, r2
 8007142:	b2da      	uxtb	r2, r3
 8007144:	7d7b      	ldrb	r3, [r7, #21]
 8007146:	005b      	lsls	r3, r3, #1
 8007148:	b2db      	uxtb	r3, r3
 800714a:	f003 0306 	and.w	r3, r3, #6
 800714e:	b2db      	uxtb	r3, r3
 8007150:	4413      	add	r3, r2
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3302      	adds	r3, #2
 8007156:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800715a:	7d3b      	ldrb	r3, [r7, #20]
 800715c:	099b      	lsrs	r3, r3, #6
 800715e:	b2db      	uxtb	r3, r3
 8007160:	461a      	mov	r2, r3
 8007162:	7cfb      	ldrb	r3, [r7, #19]
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	441a      	add	r2, r3
 8007168:	7cbb      	ldrb	r3, [r7, #18]
 800716a:	029b      	lsls	r3, r3, #10
 800716c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007170:	4413      	add	r3, r2
 8007172:	3301      	adds	r3, #1
 8007174:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007176:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800717a:	3b09      	subs	r3, #9
 800717c:	69fa      	ldr	r2, [r7, #28]
 800717e:	409a      	lsls	r2, r3
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800718a:	e0ce      	b.n	800732a <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800718c:	4b71      	ldr	r3, [pc, #452]	; (8007354 <USER_SPI_ioctl+0x2dc>)
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 0304 	and.w	r3, r3, #4
 8007194:	2b00      	cmp	r3, #0
 8007196:	d031      	beq.n	80071fc <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007198:	2100      	movs	r1, #0
 800719a:	208d      	movs	r0, #141	; 0x8d
 800719c:	f7ff fd1b 	bl	8006bd6 <send_cmd>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f040 80c3 	bne.w	800732e <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 80071a8:	20ff      	movs	r0, #255	; 0xff
 80071aa:	f7ff fc23 	bl	80069f4 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 80071ae:	f107 030c 	add.w	r3, r7, #12
 80071b2:	2110      	movs	r1, #16
 80071b4:	4618      	mov	r0, r3
 80071b6:	f7ff fcb3 	bl	8006b20 <rcvr_datablock>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 80b6 	beq.w	800732e <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 80071c2:	2330      	movs	r3, #48	; 0x30
 80071c4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80071c8:	e007      	b.n	80071da <USER_SPI_ioctl+0x162>
 80071ca:	20ff      	movs	r0, #255	; 0xff
 80071cc:	f7ff fc12 	bl	80069f4 <xchg_spi>
 80071d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071d4:	3b01      	subs	r3, #1
 80071d6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80071da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f3      	bne.n	80071ca <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 80071e2:	7dbb      	ldrb	r3, [r7, #22]
 80071e4:	091b      	lsrs	r3, r3, #4
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	461a      	mov	r2, r3
 80071ea:	2310      	movs	r3, #16
 80071ec:	fa03 f202 	lsl.w	r2, r3, r2
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 80071f4:	2300      	movs	r3, #0
 80071f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 80071fa:	e098      	b.n	800732e <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 80071fc:	2100      	movs	r1, #0
 80071fe:	2009      	movs	r0, #9
 8007200:	f7ff fce9 	bl	8006bd6 <send_cmd>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	f040 8091 	bne.w	800732e <USER_SPI_ioctl+0x2b6>
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	2110      	movs	r1, #16
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff fc84 	bl	8006b20 <rcvr_datablock>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8087 	beq.w	800732e <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007220:	4b4c      	ldr	r3, [pc, #304]	; (8007354 <USER_SPI_ioctl+0x2dc>)
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	f003 0302 	and.w	r3, r3, #2
 8007228:	2b00      	cmp	r3, #0
 800722a:	d012      	beq.n	8007252 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800722c:	7dbb      	ldrb	r3, [r7, #22]
 800722e:	005b      	lsls	r3, r3, #1
 8007230:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8007234:	7dfa      	ldrb	r2, [r7, #23]
 8007236:	09d2      	lsrs	r2, r2, #7
 8007238:	b2d2      	uxtb	r2, r2
 800723a:	4413      	add	r3, r2
 800723c:	1c5a      	adds	r2, r3, #1
 800723e:	7e7b      	ldrb	r3, [r7, #25]
 8007240:	099b      	lsrs	r3, r3, #6
 8007242:	b2db      	uxtb	r3, r3
 8007244:	3b01      	subs	r3, #1
 8007246:	fa02 f303 	lsl.w	r3, r2, r3
 800724a:	461a      	mov	r2, r3
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	e013      	b.n	800727a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007252:	7dbb      	ldrb	r3, [r7, #22]
 8007254:	109b      	asrs	r3, r3, #2
 8007256:	b29b      	uxth	r3, r3
 8007258:	f003 031f 	and.w	r3, r3, #31
 800725c:	3301      	adds	r3, #1
 800725e:	7dfa      	ldrb	r2, [r7, #23]
 8007260:	00d2      	lsls	r2, r2, #3
 8007262:	f002 0218 	and.w	r2, r2, #24
 8007266:	7df9      	ldrb	r1, [r7, #23]
 8007268:	0949      	lsrs	r1, r1, #5
 800726a:	b2c9      	uxtb	r1, r1
 800726c:	440a      	add	r2, r1
 800726e:	3201      	adds	r2, #1
 8007270:	fb02 f303 	mul.w	r3, r2, r3
 8007274:	461a      	mov	r2, r3
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8007280:	e055      	b.n	800732e <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007282:	4b34      	ldr	r3, [pc, #208]	; (8007354 <USER_SPI_ioctl+0x2dc>)
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	f003 0306 	and.w	r3, r3, #6
 800728a:	2b00      	cmp	r3, #0
 800728c:	d051      	beq.n	8007332 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800728e:	f107 020c 	add.w	r2, r7, #12
 8007292:	79fb      	ldrb	r3, [r7, #7]
 8007294:	210b      	movs	r1, #11
 8007296:	4618      	mov	r0, r3
 8007298:	f7ff feee 	bl	8007078 <USER_SPI_ioctl>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d149      	bne.n	8007336 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80072a2:	7b3b      	ldrb	r3, [r7, #12]
 80072a4:	099b      	lsrs	r3, r3, #6
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <USER_SPI_ioctl+0x23e>
 80072ac:	7dbb      	ldrb	r3, [r7, #22]
 80072ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d041      	beq.n	800733a <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	623b      	str	r3, [r7, #32]
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
 80072c0:	6a3b      	ldr	r3, [r7, #32]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 80072c6:	4b23      	ldr	r3, [pc, #140]	; (8007354 <USER_SPI_ioctl+0x2dc>)
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	f003 0308 	and.w	r3, r3, #8
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d105      	bne.n	80072de <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	025b      	lsls	r3, r3, #9
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80072d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072da:	025b      	lsls	r3, r3, #9
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 80072de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072e0:	2020      	movs	r0, #32
 80072e2:	f7ff fc78 	bl	8006bd6 <send_cmd>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d128      	bne.n	800733e <USER_SPI_ioctl+0x2c6>
 80072ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ee:	2021      	movs	r0, #33	; 0x21
 80072f0:	f7ff fc71 	bl	8006bd6 <send_cmd>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d121      	bne.n	800733e <USER_SPI_ioctl+0x2c6>
 80072fa:	2100      	movs	r1, #0
 80072fc:	2026      	movs	r0, #38	; 0x26
 80072fe:	f7ff fc6a 	bl	8006bd6 <send_cmd>
 8007302:	4603      	mov	r3, r0
 8007304:	2b00      	cmp	r3, #0
 8007306:	d11a      	bne.n	800733e <USER_SPI_ioctl+0x2c6>
 8007308:	f247 5030 	movw	r0, #30000	; 0x7530
 800730c:	f7ff fbbf 	bl	8006a8e <wait_ready>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d013      	beq.n	800733e <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007316:	2300      	movs	r3, #0
 8007318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800731c:	e00f      	b.n	800733e <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800731e:	2304      	movs	r3, #4
 8007320:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007324:	e00c      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		break;
 8007326:	bf00      	nop
 8007328:	e00a      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		break;
 800732a:	bf00      	nop
 800732c:	e008      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		break;
 800732e:	bf00      	nop
 8007330:	e006      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007332:	bf00      	nop
 8007334:	e004      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007336:	bf00      	nop
 8007338:	e002      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800733a:	bf00      	nop
 800733c:	e000      	b.n	8007340 <USER_SPI_ioctl+0x2c8>
		break;
 800733e:	bf00      	nop
	}

	despiselect();
 8007340:	f7ff fbc8 	bl	8006ad4 <despiselect>

	return res;
 8007344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007348:	4618      	mov	r0, r3
 800734a:	3730      	adds	r7, #48	; 0x30
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}
 8007350:	2000018c 	.word	0x2000018c
 8007354:	200004cc 	.word	0x200004cc

08007358 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	4603      	mov	r3, r0
 8007360:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8007362:	79fb      	ldrb	r3, [r7, #7]
 8007364:	4a08      	ldr	r2, [pc, #32]	; (8007388 <disk_status+0x30>)
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	79fa      	ldrb	r2, [r7, #7]
 8007370:	4905      	ldr	r1, [pc, #20]	; (8007388 <disk_status+0x30>)
 8007372:	440a      	add	r2, r1
 8007374:	7a12      	ldrb	r2, [r2, #8]
 8007376:	4610      	mov	r0, r2
 8007378:	4798      	blx	r3
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3710      	adds	r7, #16
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000500 	.word	0x20000500

0800738c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	4603      	mov	r3, r0
 8007394:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	4a0d      	ldr	r2, [pc, #52]	; (80073d4 <disk_initialize+0x48>)
 800739e:	5cd3      	ldrb	r3, [r2, r3]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d111      	bne.n	80073c8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	4a0b      	ldr	r2, [pc, #44]	; (80073d4 <disk_initialize+0x48>)
 80073a8:	2101      	movs	r1, #1
 80073aa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	4a09      	ldr	r2, [pc, #36]	; (80073d4 <disk_initialize+0x48>)
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	4413      	add	r3, r2
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	79fa      	ldrb	r2, [r7, #7]
 80073ba:	4906      	ldr	r1, [pc, #24]	; (80073d4 <disk_initialize+0x48>)
 80073bc:	440a      	add	r2, r1
 80073be:	7a12      	ldrb	r2, [r2, #8]
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
 80073c4:	4603      	mov	r3, r0
 80073c6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000500 	.word	0x20000500

080073d8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80073d8:	b590      	push	{r4, r7, lr}
 80073da:	b087      	sub	sp, #28
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	607a      	str	r2, [r7, #4]
 80073e2:	603b      	str	r3, [r7, #0]
 80073e4:	4603      	mov	r3, r0
 80073e6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	4a0a      	ldr	r2, [pc, #40]	; (8007414 <disk_read+0x3c>)
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	689c      	ldr	r4, [r3, #8]
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	4a07      	ldr	r2, [pc, #28]	; (8007414 <disk_read+0x3c>)
 80073f8:	4413      	add	r3, r2
 80073fa:	7a18      	ldrb	r0, [r3, #8]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68b9      	ldr	r1, [r7, #8]
 8007402:	47a0      	blx	r4
 8007404:	4603      	mov	r3, r0
 8007406:	75fb      	strb	r3, [r7, #23]
  return res;
 8007408:	7dfb      	ldrb	r3, [r7, #23]
}
 800740a:	4618      	mov	r0, r3
 800740c:	371c      	adds	r7, #28
 800740e:	46bd      	mov	sp, r7
 8007410:	bd90      	pop	{r4, r7, pc}
 8007412:	bf00      	nop
 8007414:	20000500 	.word	0x20000500

08007418 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007418:	b590      	push	{r4, r7, lr}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	4a0a      	ldr	r2, [pc, #40]	; (8007454 <disk_write+0x3c>)
 800742c:	009b      	lsls	r3, r3, #2
 800742e:	4413      	add	r3, r2
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68dc      	ldr	r4, [r3, #12]
 8007434:	7bfb      	ldrb	r3, [r7, #15]
 8007436:	4a07      	ldr	r2, [pc, #28]	; (8007454 <disk_write+0x3c>)
 8007438:	4413      	add	r3, r2
 800743a:	7a18      	ldrb	r0, [r3, #8]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	68b9      	ldr	r1, [r7, #8]
 8007442:	47a0      	blx	r4
 8007444:	4603      	mov	r3, r0
 8007446:	75fb      	strb	r3, [r7, #23]
  return res;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
}
 800744a:	4618      	mov	r0, r3
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	bd90      	pop	{r4, r7, pc}
 8007452:	bf00      	nop
 8007454:	20000500 	.word	0x20000500

08007458 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	603a      	str	r2, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
 8007464:	460b      	mov	r3, r1
 8007466:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007468:	79fb      	ldrb	r3, [r7, #7]
 800746a:	4a09      	ldr	r2, [pc, #36]	; (8007490 <disk_ioctl+0x38>)
 800746c:	009b      	lsls	r3, r3, #2
 800746e:	4413      	add	r3, r2
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	79fa      	ldrb	r2, [r7, #7]
 8007476:	4906      	ldr	r1, [pc, #24]	; (8007490 <disk_ioctl+0x38>)
 8007478:	440a      	add	r2, r1
 800747a:	7a10      	ldrb	r0, [r2, #8]
 800747c:	79b9      	ldrb	r1, [r7, #6]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	4798      	blx	r3
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
  return res;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	20000500 	.word	0x20000500

08007494 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3301      	adds	r3, #1
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80074a4:	89fb      	ldrh	r3, [r7, #14]
 80074a6:	021b      	lsls	r3, r3, #8
 80074a8:	b21a      	sxth	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	b21b      	sxth	r3, r3
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80074b6:	89fb      	ldrh	r3, [r7, #14]
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	3303      	adds	r3, #3
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	021b      	lsls	r3, r3, #8
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	3202      	adds	r2, #2
 80074dc:	7812      	ldrb	r2, [r2, #0]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	3201      	adds	r2, #1
 80074ea:	7812      	ldrb	r2, [r2, #0]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	021b      	lsls	r3, r3, #8
 80074f4:	687a      	ldr	r2, [r7, #4]
 80074f6:	7812      	ldrb	r2, [r2, #0]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]
	return rv;
 80074fc:	68fb      	ldr	r3, [r7, #12]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800750a:	b480      	push	{r7}
 800750c:	b083      	sub	sp, #12
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1c5a      	adds	r2, r3, #1
 800751a:	607a      	str	r2, [r7, #4]
 800751c:	887a      	ldrh	r2, [r7, #2]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	0a1b      	lsrs	r3, r3, #8
 8007526:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	1c5a      	adds	r2, r3, #1
 800752c:	607a      	str	r2, [r7, #4]
 800752e:	887a      	ldrh	r2, [r7, #2]
 8007530:	b2d2      	uxtb	r2, r2
 8007532:	701a      	strb	r2, [r3, #0]
}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	1c5a      	adds	r2, r3, #1
 800754e:	607a      	str	r2, [r7, #4]
 8007550:	683a      	ldr	r2, [r7, #0]
 8007552:	b2d2      	uxtb	r2, r2
 8007554:	701a      	strb	r2, [r3, #0]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	0a1b      	lsrs	r3, r3, #8
 800755a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	683a      	ldr	r2, [r7, #0]
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	1c5a      	adds	r2, r3, #1
 8007572:	607a      	str	r2, [r7, #4]
 8007574:	683a      	ldr	r2, [r7, #0]
 8007576:	b2d2      	uxtb	r2, r2
 8007578:	701a      	strb	r2, [r3, #0]
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	0a1b      	lsrs	r3, r3, #8
 800757e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	683a      	ldr	r2, [r7, #0]
 8007588:	b2d2      	uxtb	r2, r2
 800758a:	701a      	strb	r2, [r3, #0]
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007598:	b480      	push	{r7}
 800759a:	b087      	sub	sp, #28
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	1c53      	adds	r3, r2, #1
 80075b6:	613b      	str	r3, [r7, #16]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	1c59      	adds	r1, r3, #1
 80075bc:	6179      	str	r1, [r7, #20]
 80075be:	7812      	ldrb	r2, [r2, #0]
 80075c0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	607b      	str	r3, [r7, #4]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f1      	bne.n	80075b2 <mem_cpy+0x1a>
	}
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80075da:	b480      	push	{r7}
 80075dc:	b087      	sub	sp, #28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	617a      	str	r2, [r7, #20]
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	b2d2      	uxtb	r2, r2
 80075f4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3b01      	subs	r3, #1
 80075fa:	607b      	str	r3, [r7, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1f3      	bne.n	80075ea <mem_set+0x10>
}
 8007602:	bf00      	nop
 8007604:	bf00      	nop
 8007606:	371c      	adds	r7, #28
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	61fb      	str	r3, [r7, #28]
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	1c5a      	adds	r2, r3, #1
 800762c:	61fa      	str	r2, [r7, #28]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	4619      	mov	r1, r3
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	61ba      	str	r2, [r7, #24]
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	1acb      	subs	r3, r1, r3
 800763c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3b01      	subs	r3, #1
 8007642:	607b      	str	r3, [r7, #4]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d002      	beq.n	8007650 <mem_cmp+0x40>
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0eb      	beq.n	8007628 <mem_cmp+0x18>

	return r;
 8007650:	697b      	ldr	r3, [r7, #20]
}
 8007652:	4618      	mov	r0, r3
 8007654:	3724      	adds	r7, #36	; 0x24
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800765e:	b480      	push	{r7}
 8007660:	b083      	sub	sp, #12
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007668:	e002      	b.n	8007670 <chk_chr+0x12>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3301      	adds	r3, #1
 800766e:	607b      	str	r3, [r7, #4]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <chk_chr+0x26>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	461a      	mov	r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	4293      	cmp	r3, r2
 8007682:	d1f2      	bne.n	800766a <chk_chr+0xc>
	return *str;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	781b      	ldrb	r3, [r3, #0]
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007694:	b480      	push	{r7}
 8007696:	b085      	sub	sp, #20
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800769e:	2300      	movs	r3, #0
 80076a0:	60bb      	str	r3, [r7, #8]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	60fb      	str	r3, [r7, #12]
 80076a6:	e029      	b.n	80076fc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80076a8:	4a27      	ldr	r2, [pc, #156]	; (8007748 <chk_lock+0xb4>)
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	4413      	add	r3, r2
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d01d      	beq.n	80076f2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076b6:	4a24      	ldr	r2, [pc, #144]	; (8007748 <chk_lock+0xb4>)
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	011b      	lsls	r3, r3, #4
 80076bc:	4413      	add	r3, r2
 80076be:	681a      	ldr	r2, [r3, #0]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d116      	bne.n	80076f6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80076c8:	4a1f      	ldr	r2, [pc, #124]	; (8007748 <chk_lock+0xb4>)
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	011b      	lsls	r3, r3, #4
 80076ce:	4413      	add	r3, r2
 80076d0:	3304      	adds	r3, #4
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80076d8:	429a      	cmp	r2, r3
 80076da:	d10c      	bne.n	80076f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076dc:	4a1a      	ldr	r2, [pc, #104]	; (8007748 <chk_lock+0xb4>)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4413      	add	r3, r2
 80076e4:	3308      	adds	r3, #8
 80076e6:	681a      	ldr	r2, [r3, #0]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d102      	bne.n	80076f6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80076f0:	e007      	b.n	8007702 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80076f2:	2301      	movs	r3, #1
 80076f4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3301      	adds	r3, #1
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d9d2      	bls.n	80076a8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b02      	cmp	r3, #2
 8007706:	d109      	bne.n	800771c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d102      	bne.n	8007714 <chk_lock+0x80>
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	2b02      	cmp	r3, #2
 8007712:	d101      	bne.n	8007718 <chk_lock+0x84>
 8007714:	2300      	movs	r3, #0
 8007716:	e010      	b.n	800773a <chk_lock+0xa6>
 8007718:	2312      	movs	r3, #18
 800771a:	e00e      	b.n	800773a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d108      	bne.n	8007734 <chk_lock+0xa0>
 8007722:	4a09      	ldr	r2, [pc, #36]	; (8007748 <chk_lock+0xb4>)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	4413      	add	r3, r2
 800772a:	330c      	adds	r3, #12
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007732:	d101      	bne.n	8007738 <chk_lock+0xa4>
 8007734:	2310      	movs	r3, #16
 8007736:	e000      	b.n	800773a <chk_lock+0xa6>
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	200004e0 	.word	0x200004e0

0800774c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007752:	2300      	movs	r3, #0
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	e002      	b.n	800775e <enq_lock+0x12>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	3301      	adds	r3, #1
 800775c:	607b      	str	r3, [r7, #4]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b01      	cmp	r3, #1
 8007762:	d806      	bhi.n	8007772 <enq_lock+0x26>
 8007764:	4a09      	ldr	r2, [pc, #36]	; (800778c <enq_lock+0x40>)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	4413      	add	r3, r2
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f2      	bne.n	8007758 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b02      	cmp	r3, #2
 8007776:	bf14      	ite	ne
 8007778:	2301      	movne	r3, #1
 800777a:	2300      	moveq	r3, #0
 800777c:	b2db      	uxtb	r3, r3
}
 800777e:	4618      	mov	r0, r3
 8007780:	370c      	adds	r7, #12
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	200004e0 	.word	0x200004e0

08007790 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800779a:	2300      	movs	r3, #0
 800779c:	60fb      	str	r3, [r7, #12]
 800779e:	e01f      	b.n	80077e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80077a0:	4a41      	ldr	r2, [pc, #260]	; (80078a8 <inc_lock+0x118>)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	011b      	lsls	r3, r3, #4
 80077a6:	4413      	add	r3, r2
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d113      	bne.n	80077da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80077b2:	4a3d      	ldr	r2, [pc, #244]	; (80078a8 <inc_lock+0x118>)
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	4413      	add	r3, r2
 80077ba:	3304      	adds	r3, #4
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d109      	bne.n	80077da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80077c6:	4a38      	ldr	r2, [pc, #224]	; (80078a8 <inc_lock+0x118>)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	011b      	lsls	r3, r3, #4
 80077cc:	4413      	add	r3, r2
 80077ce:	3308      	adds	r3, #8
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d006      	beq.n	80077e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d9dc      	bls.n	80077a0 <inc_lock+0x10>
 80077e6:	e000      	b.n	80077ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80077e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d132      	bne.n	8007856 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80077f0:	2300      	movs	r3, #0
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e002      	b.n	80077fc <inc_lock+0x6c>
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d806      	bhi.n	8007810 <inc_lock+0x80>
 8007802:	4a29      	ldr	r2, [pc, #164]	; (80078a8 <inc_lock+0x118>)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	011b      	lsls	r3, r3, #4
 8007808:	4413      	add	r3, r2
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f2      	bne.n	80077f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d101      	bne.n	800781a <inc_lock+0x8a>
 8007816:	2300      	movs	r3, #0
 8007818:	e040      	b.n	800789c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4922      	ldr	r1, [pc, #136]	; (80078a8 <inc_lock+0x118>)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	440b      	add	r3, r1
 8007826:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689a      	ldr	r2, [r3, #8]
 800782c:	491e      	ldr	r1, [pc, #120]	; (80078a8 <inc_lock+0x118>)
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	011b      	lsls	r3, r3, #4
 8007832:	440b      	add	r3, r1
 8007834:	3304      	adds	r3, #4
 8007836:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	695a      	ldr	r2, [r3, #20]
 800783c:	491a      	ldr	r1, [pc, #104]	; (80078a8 <inc_lock+0x118>)
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	011b      	lsls	r3, r3, #4
 8007842:	440b      	add	r3, r1
 8007844:	3308      	adds	r3, #8
 8007846:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007848:	4a17      	ldr	r2, [pc, #92]	; (80078a8 <inc_lock+0x118>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	011b      	lsls	r3, r3, #4
 800784e:	4413      	add	r3, r2
 8007850:	330c      	adds	r3, #12
 8007852:	2200      	movs	r2, #0
 8007854:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <inc_lock+0xe0>
 800785c:	4a12      	ldr	r2, [pc, #72]	; (80078a8 <inc_lock+0x118>)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	011b      	lsls	r3, r3, #4
 8007862:	4413      	add	r3, r2
 8007864:	330c      	adds	r3, #12
 8007866:	881b      	ldrh	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <inc_lock+0xe0>
 800786c:	2300      	movs	r3, #0
 800786e:	e015      	b.n	800789c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d108      	bne.n	8007888 <inc_lock+0xf8>
 8007876:	4a0c      	ldr	r2, [pc, #48]	; (80078a8 <inc_lock+0x118>)
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	4413      	add	r3, r2
 800787e:	330c      	adds	r3, #12
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	3301      	adds	r3, #1
 8007884:	b29a      	uxth	r2, r3
 8007886:	e001      	b.n	800788c <inc_lock+0xfc>
 8007888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800788c:	4906      	ldr	r1, [pc, #24]	; (80078a8 <inc_lock+0x118>)
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	440b      	add	r3, r1
 8007894:	330c      	adds	r3, #12
 8007896:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3301      	adds	r3, #1
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr
 80078a8:	200004e0 	.word	0x200004e0

080078ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3b01      	subs	r3, #1
 80078b8:	607b      	str	r3, [r7, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d825      	bhi.n	800790c <dec_lock+0x60>
		n = Files[i].ctr;
 80078c0:	4a17      	ldr	r2, [pc, #92]	; (8007920 <dec_lock+0x74>)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	011b      	lsls	r3, r3, #4
 80078c6:	4413      	add	r3, r2
 80078c8:	330c      	adds	r3, #12
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80078ce:	89fb      	ldrh	r3, [r7, #14]
 80078d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078d4:	d101      	bne.n	80078da <dec_lock+0x2e>
 80078d6:	2300      	movs	r3, #0
 80078d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <dec_lock+0x3a>
 80078e0:	89fb      	ldrh	r3, [r7, #14]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80078e6:	4a0e      	ldr	r2, [pc, #56]	; (8007920 <dec_lock+0x74>)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	4413      	add	r3, r2
 80078ee:	330c      	adds	r3, #12
 80078f0:	89fa      	ldrh	r2, [r7, #14]
 80078f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80078f4:	89fb      	ldrh	r3, [r7, #14]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d105      	bne.n	8007906 <dec_lock+0x5a>
 80078fa:	4a09      	ldr	r2, [pc, #36]	; (8007920 <dec_lock+0x74>)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	011b      	lsls	r3, r3, #4
 8007900:	4413      	add	r3, r2
 8007902:	2200      	movs	r2, #0
 8007904:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	737b      	strb	r3, [r7, #13]
 800790a:	e001      	b.n	8007910 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800790c:	2302      	movs	r3, #2
 800790e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007910:	7b7b      	ldrb	r3, [r7, #13]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	200004e0 	.word	0x200004e0

08007924 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	e010      	b.n	8007954 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8007932:	4a0d      	ldr	r2, [pc, #52]	; (8007968 <clear_lock+0x44>)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	011b      	lsls	r3, r3, #4
 8007938:	4413      	add	r3, r2
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	429a      	cmp	r2, r3
 8007940:	d105      	bne.n	800794e <clear_lock+0x2a>
 8007942:	4a09      	ldr	r2, [pc, #36]	; (8007968 <clear_lock+0x44>)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	4413      	add	r3, r2
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	3301      	adds	r3, #1
 8007952:	60fb      	str	r3, [r7, #12]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d9eb      	bls.n	8007932 <clear_lock+0xe>
	}
}
 800795a:	bf00      	nop
 800795c:	bf00      	nop
 800795e:	3714      	adds	r7, #20
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	200004e0 	.word	0x200004e0

0800796c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007974:	2300      	movs	r3, #0
 8007976:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d034      	beq.n	80079ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	7858      	ldrb	r0, [r3, #1]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007990:	2301      	movs	r3, #1
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	f7ff fd40 	bl	8007418 <disk_write>
 8007998:	4603      	mov	r3, r0
 800799a:	2b00      	cmp	r3, #0
 800799c:	d002      	beq.n	80079a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800799e:	2301      	movs	r3, #1
 80079a0:	73fb      	strb	r3, [r7, #15]
 80079a2:	e022      	b.n	80079ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	1ad2      	subs	r2, r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d217      	bcs.n	80079ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	789b      	ldrb	r3, [r3, #2]
 80079be:	613b      	str	r3, [r7, #16]
 80079c0:	e010      	b.n	80079e4 <sync_window+0x78>
					wsect += fs->fsize;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4413      	add	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7858      	ldrb	r0, [r3, #1]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80079d6:	2301      	movs	r3, #1
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	f7ff fd1d 	bl	8007418 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	613b      	str	r3, [r7, #16]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d8eb      	bhi.n	80079c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80079ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d01b      	beq.n	8007a44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7ff ffad 	bl	800796c <sync_window>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d113      	bne.n	8007a44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7858      	ldrb	r0, [r3, #1]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a26:	2301      	movs	r3, #1
 8007a28:	683a      	ldr	r2, [r7, #0]
 8007a2a:	f7ff fcd5 	bl	80073d8 <disk_read>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d004      	beq.n	8007a3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8007a34:	f04f 33ff 	mov.w	r3, #4294967295
 8007a38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	683a      	ldr	r2, [r7, #0]
 8007a42:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f7ff ff87 	bl	800796c <sync_window>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d158      	bne.n	8007b1a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d148      	bne.n	8007b02 <sync_fs+0xb2>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	791b      	ldrb	r3, [r3, #4]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d144      	bne.n	8007b02 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	3330      	adds	r3, #48	; 0x30
 8007a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fda9 	bl	80075da <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	3330      	adds	r3, #48	; 0x30
 8007a8c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007a90:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007a94:	4618      	mov	r0, r3
 8007a96:	f7ff fd38 	bl	800750a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	3330      	adds	r3, #48	; 0x30
 8007a9e:	4921      	ldr	r1, [pc, #132]	; (8007b24 <sync_fs+0xd4>)
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7ff fd4d 	bl	8007540 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	3330      	adds	r3, #48	; 0x30
 8007aaa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007aae:	491e      	ldr	r1, [pc, #120]	; (8007b28 <sync_fs+0xd8>)
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7ff fd45 	bl	8007540 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3330      	adds	r3, #48	; 0x30
 8007aba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4610      	mov	r0, r2
 8007ac6:	f7ff fd3b 	bl	8007540 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	3330      	adds	r3, #48	; 0x30
 8007ace:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4610      	mov	r0, r2
 8007ada:	f7ff fd31 	bl	8007540 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	1c5a      	adds	r2, r3, #1
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	7858      	ldrb	r0, [r3, #1]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007af6:	2301      	movs	r3, #1
 8007af8:	f7ff fc8e 	bl	8007418 <disk_write>
			fs->fsi_flag = 0;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	785b      	ldrb	r3, [r3, #1]
 8007b06:	2200      	movs	r2, #0
 8007b08:	2100      	movs	r1, #0
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fca4 	bl	8007458 <disk_ioctl>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <sync_fs+0xca>
 8007b16:	2301      	movs	r3, #1
 8007b18:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3710      	adds	r7, #16
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	41615252 	.word	0x41615252
 8007b28:	61417272 	.word	0x61417272

08007b2c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	3b02      	subs	r3, #2
 8007b3a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	695b      	ldr	r3, [r3, #20]
 8007b40:	3b02      	subs	r3, #2
 8007b42:	683a      	ldr	r2, [r7, #0]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d301      	bcc.n	8007b4c <clust2sect+0x20>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	e008      	b.n	8007b5e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	895b      	ldrh	r3, [r3, #10]
 8007b50:	461a      	mov	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	fb03 f202 	mul.w	r2, r3, r2
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5c:	4413      	add	r3, r2
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b086      	sub	sp, #24
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d904      	bls.n	8007b8a <get_fat+0x20>
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	695b      	ldr	r3, [r3, #20]
 8007b84:	683a      	ldr	r2, [r7, #0]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d302      	bcc.n	8007b90 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	617b      	str	r3, [r7, #20]
 8007b8e:	e08f      	b.n	8007cb0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b90:	f04f 33ff 	mov.w	r3, #4294967295
 8007b94:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b03      	cmp	r3, #3
 8007b9c:	d062      	beq.n	8007c64 <get_fat+0xfa>
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	dc7c      	bgt.n	8007c9c <get_fat+0x132>
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d002      	beq.n	8007bac <get_fat+0x42>
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d042      	beq.n	8007c30 <get_fat+0xc6>
 8007baa:	e077      	b.n	8007c9c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	085b      	lsrs	r3, r3, #1
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	0a5b      	lsrs	r3, r3, #9
 8007bc2:	4413      	add	r3, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6938      	ldr	r0, [r7, #16]
 8007bc8:	f7ff ff14 	bl	80079f4 <move_window>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d167      	bne.n	8007ca2 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	60fa      	str	r2, [r7, #12]
 8007bd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4413      	add	r3, r2
 8007be0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007be4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	6a1a      	ldr	r2, [r3, #32]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	0a5b      	lsrs	r3, r3, #9
 8007bee:	4413      	add	r3, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	6938      	ldr	r0, [r7, #16]
 8007bf4:	f7ff fefe 	bl	80079f4 <move_window>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d153      	bne.n	8007ca6 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4413      	add	r3, r2
 8007c08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c0c:	021b      	lsls	r3, r3, #8
 8007c0e:	461a      	mov	r2, r3
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	f003 0301 	and.w	r3, r3, #1
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d002      	beq.n	8007c26 <get_fat+0xbc>
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	091b      	lsrs	r3, r3, #4
 8007c24:	e002      	b.n	8007c2c <get_fat+0xc2>
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c2c:	617b      	str	r3, [r7, #20]
			break;
 8007c2e:	e03f      	b.n	8007cb0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	6a1a      	ldr	r2, [r3, #32]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	0a1b      	lsrs	r3, r3, #8
 8007c38:	4413      	add	r3, r2
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6938      	ldr	r0, [r7, #16]
 8007c3e:	f7ff fed9 	bl	80079f4 <move_window>
 8007c42:	4603      	mov	r3, r0
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d130      	bne.n	8007caa <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	005b      	lsls	r3, r3, #1
 8007c52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007c56:	4413      	add	r3, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7ff fc1b 	bl	8007494 <ld_word>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	617b      	str	r3, [r7, #20]
			break;
 8007c62:	e025      	b.n	8007cb0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	6a1a      	ldr	r2, [r3, #32]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	09db      	lsrs	r3, r3, #7
 8007c6c:	4413      	add	r3, r2
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6938      	ldr	r0, [r7, #16]
 8007c72:	f7ff febf 	bl	80079f4 <move_window>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d118      	bne.n	8007cae <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007c8a:	4413      	add	r3, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7ff fc19 	bl	80074c4 <ld_dword>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007c98:	617b      	str	r3, [r7, #20]
			break;
 8007c9a:	e009      	b.n	8007cb0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	617b      	str	r3, [r7, #20]
 8007ca0:	e006      	b.n	8007cb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ca2:	bf00      	nop
 8007ca4:	e004      	b.n	8007cb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007ca6:	bf00      	nop
 8007ca8:	e002      	b.n	8007cb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007caa:	bf00      	nop
 8007cac:	e000      	b.n	8007cb0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007cae:	bf00      	nop
		}
	}

	return val;
 8007cb0:	697b      	ldr	r3, [r7, #20]
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007cba:	b590      	push	{r4, r7, lr}
 8007cbc:	b089      	sub	sp, #36	; 0x24
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	60f8      	str	r0, [r7, #12]
 8007cc2:	60b9      	str	r1, [r7, #8]
 8007cc4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007cc6:	2302      	movs	r3, #2
 8007cc8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	f240 80d2 	bls.w	8007e76 <put_fat+0x1bc>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	695b      	ldr	r3, [r3, #20]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	f080 80cc 	bcs.w	8007e76 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	f000 8096 	beq.w	8007e14 <put_fat+0x15a>
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	f300 80cd 	bgt.w	8007e88 <put_fat+0x1ce>
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d002      	beq.n	8007cf8 <put_fat+0x3e>
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d06e      	beq.n	8007dd4 <put_fat+0x11a>
 8007cf6:	e0c7      	b.n	8007e88 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	61bb      	str	r3, [r7, #24]
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	085b      	lsrs	r3, r3, #1
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4413      	add	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6a1a      	ldr	r2, [r3, #32]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	0a5b      	lsrs	r3, r3, #9
 8007d0e:	4413      	add	r3, r2
 8007d10:	4619      	mov	r1, r3
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f7ff fe6e 	bl	80079f4 <move_window>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d1c:	7ffb      	ldrb	r3, [r7, #31]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	f040 80ab 	bne.w	8007e7a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	1c59      	adds	r1, r3, #1
 8007d2e:	61b9      	str	r1, [r7, #24]
 8007d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d34:	4413      	add	r3, r2
 8007d36:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	f003 0301 	and.w	r3, r3, #1
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00d      	beq.n	8007d5e <put_fat+0xa4>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b25b      	sxtb	r3, r3
 8007d48:	f003 030f 	and.w	r3, r3, #15
 8007d4c:	b25a      	sxtb	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	011b      	lsls	r3, r3, #4
 8007d54:	b25b      	sxtb	r3, r3
 8007d56:	4313      	orrs	r3, r2
 8007d58:	b25b      	sxtb	r3, r3
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	e001      	b.n	8007d62 <put_fat+0xa8>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	b2db      	uxtb	r3, r3
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a1a      	ldr	r2, [r3, #32]
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	0a5b      	lsrs	r3, r3, #9
 8007d74:	4413      	add	r3, r2
 8007d76:	4619      	mov	r1, r3
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fe3b 	bl	80079f4 <move_window>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d82:	7ffb      	ldrb	r3, [r7, #31]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d17a      	bne.n	8007e7e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d8e:	69bb      	ldr	r3, [r7, #24]
 8007d90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d94:	4413      	add	r3, r2
 8007d96:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d003      	beq.n	8007daa <put_fat+0xf0>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	091b      	lsrs	r3, r3, #4
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	e00e      	b.n	8007dc8 <put_fat+0x10e>
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	b25b      	sxtb	r3, r3
 8007db0:	f023 030f 	bic.w	r3, r3, #15
 8007db4:	b25a      	sxtb	r2, r3
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	0a1b      	lsrs	r3, r3, #8
 8007dba:	b25b      	sxtb	r3, r3
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	b25b      	sxtb	r3, r3
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	b25b      	sxtb	r3, r3
 8007dc6:	b2db      	uxtb	r3, r3
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	70da      	strb	r2, [r3, #3]
			break;
 8007dd2:	e059      	b.n	8007e88 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6a1a      	ldr	r2, [r3, #32]
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	4413      	add	r3, r2
 8007dde:	4619      	mov	r1, r3
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f7ff fe07 	bl	80079f4 <move_window>
 8007de6:	4603      	mov	r3, r0
 8007de8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007dea:	7ffb      	ldrb	r3, [r7, #31]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d148      	bne.n	8007e82 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007dfe:	4413      	add	r3, r2
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	b292      	uxth	r2, r2
 8007e04:	4611      	mov	r1, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fb7f 	bl	800750a <st_word>
			fs->wflag = 1;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	70da      	strb	r2, [r3, #3]
			break;
 8007e12:	e039      	b.n	8007e88 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	09db      	lsrs	r3, r3, #7
 8007e1c:	4413      	add	r3, r2
 8007e1e:	4619      	mov	r1, r3
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff fde7 	bl	80079f4 <move_window>
 8007e26:	4603      	mov	r3, r0
 8007e28:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007e2a:	7ffb      	ldrb	r3, [r7, #31]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d12a      	bne.n	8007e86 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007e44:	4413      	add	r3, r2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fb3c 	bl	80074c4 <ld_dword>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007e52:	4323      	orrs	r3, r4
 8007e54:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007e64:	4413      	add	r3, r2
 8007e66:	6879      	ldr	r1, [r7, #4]
 8007e68:	4618      	mov	r0, r3
 8007e6a:	f7ff fb69 	bl	8007540 <st_dword>
			fs->wflag = 1;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2201      	movs	r2, #1
 8007e72:	70da      	strb	r2, [r3, #3]
			break;
 8007e74:	e008      	b.n	8007e88 <put_fat+0x1ce>
		}
	}
 8007e76:	bf00      	nop
 8007e78:	e006      	b.n	8007e88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e7a:	bf00      	nop
 8007e7c:	e004      	b.n	8007e88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e7e:	bf00      	nop
 8007e80:	e002      	b.n	8007e88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e82:	bf00      	nop
 8007e84:	e000      	b.n	8007e88 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007e86:	bf00      	nop
	return res;
 8007e88:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3724      	adds	r7, #36	; 0x24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd90      	pop	{r4, r7, pc}

08007e92 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b088      	sub	sp, #32
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d904      	bls.n	8007eb8 <remove_chain+0x26>
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	695b      	ldr	r3, [r3, #20]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d301      	bcc.n	8007ebc <remove_chain+0x2a>
 8007eb8:	2302      	movs	r3, #2
 8007eba:	e04b      	b.n	8007f54 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00c      	beq.n	8007edc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	69b8      	ldr	r0, [r7, #24]
 8007eca:	f7ff fef6 	bl	8007cba <put_fat>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007ed2:	7ffb      	ldrb	r3, [r7, #31]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <remove_chain+0x4a>
 8007ed8:	7ffb      	ldrb	r3, [r7, #31]
 8007eda:	e03b      	b.n	8007f54 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f7ff fe43 	bl	8007b6a <get_fat>
 8007ee4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d031      	beq.n	8007f50 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	2b01      	cmp	r3, #1
 8007ef0:	d101      	bne.n	8007ef6 <remove_chain+0x64>
 8007ef2:	2302      	movs	r3, #2
 8007ef4:	e02e      	b.n	8007f54 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007efc:	d101      	bne.n	8007f02 <remove_chain+0x70>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e028      	b.n	8007f54 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007f02:	2200      	movs	r2, #0
 8007f04:	68b9      	ldr	r1, [r7, #8]
 8007f06:	69b8      	ldr	r0, [r7, #24]
 8007f08:	f7ff fed7 	bl	8007cba <put_fat>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007f10:	7ffb      	ldrb	r3, [r7, #31]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <remove_chain+0x88>
 8007f16:	7ffb      	ldrb	r3, [r7, #31]
 8007f18:	e01c      	b.n	8007f54 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	691a      	ldr	r2, [r3, #16]
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	3b02      	subs	r3, #2
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d20b      	bcs.n	8007f40 <remove_chain+0xae>
			fs->free_clst++;
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	1c5a      	adds	r2, r3, #1
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	791b      	ldrb	r3, [r3, #4]
 8007f36:	f043 0301 	orr.w	r3, r3, #1
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	695b      	ldr	r3, [r3, #20]
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d3c6      	bcc.n	8007edc <remove_chain+0x4a>
 8007f4e:	e000      	b.n	8007f52 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007f50:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3720      	adds	r7, #32
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007f72:	693b      	ldr	r3, [r7, #16]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d004      	beq.n	8007f88 <create_chain+0x2c>
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	69ba      	ldr	r2, [r7, #24]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d31b      	bcc.n	8007fc0 <create_chain+0x64>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	61bb      	str	r3, [r7, #24]
 8007f8c:	e018      	b.n	8007fc0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007f8e:	6839      	ldr	r1, [r7, #0]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7ff fdea 	bl	8007b6a <get_fat>
 8007f96:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d801      	bhi.n	8007fa2 <create_chain+0x46>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	e070      	b.n	8008084 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fa8:	d101      	bne.n	8007fae <create_chain+0x52>
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	e06a      	b.n	8008084 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d201      	bcs.n	8007fbc <create_chain+0x60>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	e063      	b.n	8008084 <create_chain+0x128>
		scl = clst;
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	3301      	adds	r3, #1
 8007fc8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	695b      	ldr	r3, [r3, #20]
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d307      	bcc.n	8007fe4 <create_chain+0x88>
				ncl = 2;
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007fd8:	69fa      	ldr	r2, [r7, #28]
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d901      	bls.n	8007fe4 <create_chain+0x88>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	e04f      	b.n	8008084 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007fe4:	69f9      	ldr	r1, [r7, #28]
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff fdbf 	bl	8007b6a <get_fat>
 8007fec:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d00e      	beq.n	8008012 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d003      	beq.n	8008002 <create_chain+0xa6>
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008000:	d101      	bne.n	8008006 <create_chain+0xaa>
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	e03e      	b.n	8008084 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8008006:	69fa      	ldr	r2, [r7, #28]
 8008008:	69bb      	ldr	r3, [r7, #24]
 800800a:	429a      	cmp	r2, r3
 800800c:	d1da      	bne.n	8007fc4 <create_chain+0x68>
 800800e:	2300      	movs	r3, #0
 8008010:	e038      	b.n	8008084 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8008012:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8008014:	f04f 32ff 	mov.w	r2, #4294967295
 8008018:	69f9      	ldr	r1, [r7, #28]
 800801a:	6938      	ldr	r0, [r7, #16]
 800801c:	f7ff fe4d 	bl	8007cba <put_fat>
 8008020:	4603      	mov	r3, r0
 8008022:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d109      	bne.n	800803e <create_chain+0xe2>
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d006      	beq.n	800803e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8008030:	69fa      	ldr	r2, [r7, #28]
 8008032:	6839      	ldr	r1, [r7, #0]
 8008034:	6938      	ldr	r0, [r7, #16]
 8008036:	f7ff fe40 	bl	8007cba <put_fat>
 800803a:	4603      	mov	r3, r0
 800803c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d116      	bne.n	8008072 <create_chain+0x116>
		fs->last_clst = ncl;
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	69fa      	ldr	r2, [r7, #28]
 8008048:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	691a      	ldr	r2, [r3, #16]
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	3b02      	subs	r3, #2
 8008054:	429a      	cmp	r2, r3
 8008056:	d804      	bhi.n	8008062 <create_chain+0x106>
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	1e5a      	subs	r2, r3, #1
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	791b      	ldrb	r3, [r3, #4]
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	711a      	strb	r2, [r3, #4]
 8008070:	e007      	b.n	8008082 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8008072:	7dfb      	ldrb	r3, [r7, #23]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d102      	bne.n	800807e <create_chain+0x122>
 8008078:	f04f 33ff 	mov.w	r3, #4294967295
 800807c:	e000      	b.n	8008080 <create_chain+0x124>
 800807e:	2301      	movs	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8008082:	69fb      	ldr	r3, [r7, #28]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3720      	adds	r7, #32
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800808c:	b480      	push	{r7}
 800808e:	b087      	sub	sp, #28
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	3304      	adds	r3, #4
 80080a2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	0a5b      	lsrs	r3, r3, #9
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	8952      	ldrh	r2, [r2, #10]
 80080ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1d1a      	adds	r2, r3, #4
 80080b6:	613a      	str	r2, [r7, #16]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80080bc:	68bb      	ldr	r3, [r7, #8]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <clmt_clust+0x3a>
 80080c2:	2300      	movs	r3, #0
 80080c4:	e010      	b.n	80080e8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d307      	bcc.n	80080de <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80080ce:	697a      	ldr	r2, [r7, #20]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	617b      	str	r3, [r7, #20]
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	3304      	adds	r3, #4
 80080da:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80080dc:	e7e9      	b.n	80080b2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80080de:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800810a:	d204      	bcs.n	8008116 <dir_sdi+0x22>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	f003 031f 	and.w	r3, r3, #31
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <dir_sdi+0x26>
		return FR_INT_ERR;
 8008116:	2302      	movs	r3, #2
 8008118:	e063      	b.n	80081e2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d106      	bne.n	800813a <dir_sdi+0x46>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d902      	bls.n	800813a <dir_sdi+0x46>
		clst = fs->dirbase;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008138:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d10c      	bne.n	800815a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	095b      	lsrs	r3, r3, #5
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	8912      	ldrh	r2, [r2, #8]
 8008148:	4293      	cmp	r3, r2
 800814a:	d301      	bcc.n	8008150 <dir_sdi+0x5c>
 800814c:	2302      	movs	r3, #2
 800814e:	e048      	b.n	80081e2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	61da      	str	r2, [r3, #28]
 8008158:	e029      	b.n	80081ae <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	895b      	ldrh	r3, [r3, #10]
 800815e:	025b      	lsls	r3, r3, #9
 8008160:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008162:	e019      	b.n	8008198 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6979      	ldr	r1, [r7, #20]
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fcfe 	bl	8007b6a <get_fat>
 800816e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8008170:	697b      	ldr	r3, [r7, #20]
 8008172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008176:	d101      	bne.n	800817c <dir_sdi+0x88>
 8008178:	2301      	movs	r3, #1
 800817a:	e032      	b.n	80081e2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	2b01      	cmp	r3, #1
 8008180:	d904      	bls.n	800818c <dir_sdi+0x98>
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	429a      	cmp	r2, r3
 800818a:	d301      	bcc.n	8008190 <dir_sdi+0x9c>
 800818c:	2302      	movs	r3, #2
 800818e:	e028      	b.n	80081e2 <dir_sdi+0xee>
			ofs -= csz;
 8008190:	683a      	ldr	r2, [r7, #0]
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1ad3      	subs	r3, r2, r3
 8008196:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	429a      	cmp	r2, r3
 800819e:	d2e1      	bcs.n	8008164 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80081a0:	6979      	ldr	r1, [r7, #20]
 80081a2:	6938      	ldr	r0, [r7, #16]
 80081a4:	f7ff fcc2 	bl	8007b2c <clust2sect>
 80081a8:	4602      	mov	r2, r0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <dir_sdi+0xcc>
 80081bc:	2302      	movs	r3, #2
 80081be:	e010      	b.n	80081e2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	0a5b      	lsrs	r3, r3, #9
 80081c8:	441a      	add	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081da:	441a      	add	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3718      	adds	r7, #24
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b086      	sub	sp, #24
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	3320      	adds	r3, #32
 8008200:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	69db      	ldr	r3, [r3, #28]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d003      	beq.n	8008212 <dir_next+0x28>
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008210:	d301      	bcc.n	8008216 <dir_next+0x2c>
 8008212:	2304      	movs	r3, #4
 8008214:	e0aa      	b.n	800836c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800821c:	2b00      	cmp	r3, #0
 800821e:	f040 8098 	bne.w	8008352 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	69db      	ldr	r3, [r3, #28]
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	699b      	ldr	r3, [r3, #24]
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10b      	bne.n	800824c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	095b      	lsrs	r3, r3, #5
 8008238:	68fa      	ldr	r2, [r7, #12]
 800823a:	8912      	ldrh	r2, [r2, #8]
 800823c:	4293      	cmp	r3, r2
 800823e:	f0c0 8088 	bcc.w	8008352 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	61da      	str	r2, [r3, #28]
 8008248:	2304      	movs	r3, #4
 800824a:	e08f      	b.n	800836c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	0a5b      	lsrs	r3, r3, #9
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	8952      	ldrh	r2, [r2, #10]
 8008254:	3a01      	subs	r2, #1
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d17a      	bne.n	8008352 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	4619      	mov	r1, r3
 8008264:	4610      	mov	r0, r2
 8008266:	f7ff fc80 	bl	8007b6a <get_fat>
 800826a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d801      	bhi.n	8008276 <dir_next+0x8c>
 8008272:	2302      	movs	r3, #2
 8008274:	e07a      	b.n	800836c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827c:	d101      	bne.n	8008282 <dir_next+0x98>
 800827e:	2301      	movs	r3, #1
 8008280:	e074      	b.n	800836c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	695b      	ldr	r3, [r3, #20]
 8008286:	697a      	ldr	r2, [r7, #20]
 8008288:	429a      	cmp	r2, r3
 800828a:	d358      	bcc.n	800833e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d104      	bne.n	800829c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	61da      	str	r2, [r3, #28]
 8008298:	2304      	movs	r3, #4
 800829a:	e067      	b.n	800836c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	4619      	mov	r1, r3
 80082a4:	4610      	mov	r0, r2
 80082a6:	f7ff fe59 	bl	8007f5c <create_chain>
 80082aa:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80082ac:	697b      	ldr	r3, [r7, #20]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <dir_next+0xcc>
 80082b2:	2307      	movs	r3, #7
 80082b4:	e05a      	b.n	800836c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d101      	bne.n	80082c0 <dir_next+0xd6>
 80082bc:	2302      	movs	r3, #2
 80082be:	e055      	b.n	800836c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d101      	bne.n	80082cc <dir_next+0xe2>
 80082c8:	2301      	movs	r3, #1
 80082ca:	e04f      	b.n	800836c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff fb4d 	bl	800796c <sync_window>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <dir_next+0xf2>
 80082d8:	2301      	movs	r3, #1
 80082da:	e047      	b.n	800836c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	3330      	adds	r3, #48	; 0x30
 80082e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082e4:	2100      	movs	r1, #0
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7ff f977 	bl	80075da <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80082ec:	2300      	movs	r3, #0
 80082ee:	613b      	str	r3, [r7, #16]
 80082f0:	6979      	ldr	r1, [r7, #20]
 80082f2:	68f8      	ldr	r0, [r7, #12]
 80082f4:	f7ff fc1a 	bl	8007b2c <clust2sect>
 80082f8:	4602      	mov	r2, r0
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80082fe:	e012      	b.n	8008326 <dir_next+0x13c>
						fs->wflag = 1;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008306:	68f8      	ldr	r0, [r7, #12]
 8008308:	f7ff fb30 	bl	800796c <sync_window>
 800830c:	4603      	mov	r3, r0
 800830e:	2b00      	cmp	r3, #0
 8008310:	d001      	beq.n	8008316 <dir_next+0x12c>
 8008312:	2301      	movs	r3, #1
 8008314:	e02a      	b.n	800836c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	3301      	adds	r3, #1
 800831a:	613b      	str	r3, [r7, #16]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008320:	1c5a      	adds	r2, r3, #1
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	62da      	str	r2, [r3, #44]	; 0x2c
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	895b      	ldrh	r3, [r3, #10]
 800832a:	461a      	mov	r2, r3
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	4293      	cmp	r3, r2
 8008330:	d3e6      	bcc.n	8008300 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	1ad2      	subs	r2, r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8008344:	6979      	ldr	r1, [r7, #20]
 8008346:	68f8      	ldr	r0, [r7, #12]
 8008348:	f7ff fbf0 	bl	8007b2c <clust2sect>
 800834c:	4602      	mov	r2, r0
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68ba      	ldr	r2, [r7, #8]
 8008356:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008364:	441a      	add	r2, r3
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3718      	adds	r7, #24
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
 800837c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008384:	2100      	movs	r1, #0
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff feb4 	bl	80080f4 <dir_sdi>
 800838c:	4603      	mov	r3, r0
 800838e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008390:	7dfb      	ldrb	r3, [r7, #23]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d12b      	bne.n	80083ee <dir_alloc+0x7a>
		n = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	4619      	mov	r1, r3
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f7ff fb27 	bl	80079f4 <move_window>
 80083a6:	4603      	mov	r3, r0
 80083a8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d11d      	bne.n	80083ec <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6a1b      	ldr	r3, [r3, #32]
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2be5      	cmp	r3, #229	; 0xe5
 80083b8:	d004      	beq.n	80083c4 <dir_alloc+0x50>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a1b      	ldr	r3, [r3, #32]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d107      	bne.n	80083d4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	3301      	adds	r3, #1
 80083c8:	613b      	str	r3, [r7, #16]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d102      	bne.n	80083d8 <dir_alloc+0x64>
 80083d2:	e00c      	b.n	80083ee <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80083d4:	2300      	movs	r3, #0
 80083d6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80083d8:	2101      	movs	r1, #1
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f7ff ff05 	bl	80081ea <dir_next>
 80083e0:	4603      	mov	r3, r0
 80083e2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80083e4:	7dfb      	ldrb	r3, [r7, #23]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0d7      	beq.n	800839a <dir_alloc+0x26>
 80083ea:	e000      	b.n	80083ee <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80083ec:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80083ee:	7dfb      	ldrb	r3, [r7, #23]
 80083f0:	2b04      	cmp	r3, #4
 80083f2:	d101      	bne.n	80083f8 <dir_alloc+0x84>
 80083f4:	2307      	movs	r3, #7
 80083f6:	75fb      	strb	r3, [r7, #23]
	return res;
 80083f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3718      	adds	r7, #24
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	331a      	adds	r3, #26
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff f83f 	bl	8007494 <ld_word>
 8008416:	4603      	mov	r3, r0
 8008418:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d109      	bne.n	8008436 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	3314      	adds	r3, #20
 8008426:	4618      	mov	r0, r3
 8008428:	f7ff f834 	bl	8007494 <ld_word>
 800842c:	4603      	mov	r3, r0
 800842e:	041b      	lsls	r3, r3, #16
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	4313      	orrs	r3, r2
 8008434:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8008436:	68fb      	ldr	r3, [r7, #12]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	331a      	adds	r3, #26
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	b292      	uxth	r2, r2
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f7ff f857 	bl	800750a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	2b03      	cmp	r3, #3
 8008462:	d109      	bne.n	8008478 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f103 0214 	add.w	r2, r3, #20
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	0c1b      	lsrs	r3, r3, #16
 800846e:	b29b      	uxth	r3, r3
 8008470:	4619      	mov	r1, r3
 8008472:	4610      	mov	r0, r2
 8008474:	f7ff f849 	bl	800750a <st_word>
	}
}
 8008478:	bf00      	nop
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800848e:	2100      	movs	r1, #0
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7ff fe2f 	bl	80080f4 <dir_sdi>
 8008496:	4603      	mov	r3, r0
 8008498:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800849a:	7dfb      	ldrb	r3, [r7, #23]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d001      	beq.n	80084a4 <dir_find+0x24>
 80084a0:	7dfb      	ldrb	r3, [r7, #23]
 80084a2:	e03e      	b.n	8008522 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	69db      	ldr	r3, [r3, #28]
 80084a8:	4619      	mov	r1, r3
 80084aa:	6938      	ldr	r0, [r7, #16]
 80084ac:	f7ff faa2 	bl	80079f4 <move_window>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d12f      	bne.n	800851a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80084c2:	7bfb      	ldrb	r3, [r7, #15]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d102      	bne.n	80084ce <dir_find+0x4e>
 80084c8:	2304      	movs	r3, #4
 80084ca:	75fb      	strb	r3, [r7, #23]
 80084cc:	e028      	b.n	8008520 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a1b      	ldr	r3, [r3, #32]
 80084d2:	330b      	adds	r3, #11
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084da:	b2da      	uxtb	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	330b      	adds	r3, #11
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 0308 	and.w	r3, r3, #8
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d10a      	bne.n	8008506 <dir_find+0x86>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a18      	ldr	r0, [r3, #32]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3324      	adds	r3, #36	; 0x24
 80084f8:	220b      	movs	r2, #11
 80084fa:	4619      	mov	r1, r3
 80084fc:	f7ff f888 	bl	8007610 <mem_cmp>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00b      	beq.n	800851e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008506:	2100      	movs	r1, #0
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff fe6e 	bl	80081ea <dir_next>
 800850e:	4603      	mov	r3, r0
 8008510:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8008512:	7dfb      	ldrb	r3, [r7, #23]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d0c5      	beq.n	80084a4 <dir_find+0x24>
 8008518:	e002      	b.n	8008520 <dir_find+0xa0>
		if (res != FR_OK) break;
 800851a:	bf00      	nop
 800851c:	e000      	b.n	8008520 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800851e:	bf00      	nop

	return res;
 8008520:	7dfb      	ldrb	r3, [r7, #23]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b084      	sub	sp, #16
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8008538:	2101      	movs	r1, #1
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f7ff ff1a 	bl	8008374 <dir_alloc>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d11c      	bne.n	8008584 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	69db      	ldr	r3, [r3, #28]
 800854e:	4619      	mov	r1, r3
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f7ff fa4f 	bl	80079f4 <move_window>
 8008556:	4603      	mov	r3, r0
 8008558:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800855a:	7bfb      	ldrb	r3, [r7, #15]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d111      	bne.n	8008584 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a1b      	ldr	r3, [r3, #32]
 8008564:	2220      	movs	r2, #32
 8008566:	2100      	movs	r1, #0
 8008568:	4618      	mov	r0, r3
 800856a:	f7ff f836 	bl	80075da <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a18      	ldr	r0, [r3, #32]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	220b      	movs	r2, #11
 8008578:	4619      	mov	r1, r3
 800857a:	f7ff f80d 	bl	8007598 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2201      	movs	r2, #1
 8008582:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
	...

08008590 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	60fb      	str	r3, [r7, #12]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3324      	adds	r3, #36	; 0x24
 80085a4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80085a6:	220b      	movs	r2, #11
 80085a8:	2120      	movs	r1, #32
 80085aa:	68b8      	ldr	r0, [r7, #8]
 80085ac:	f7ff f815 	bl	80075da <mem_set>
	si = i = 0; ni = 8;
 80085b0:	2300      	movs	r3, #0
 80085b2:	613b      	str	r3, [r7, #16]
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	61fb      	str	r3, [r7, #28]
 80085b8:	2308      	movs	r3, #8
 80085ba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	1c5a      	adds	r2, r3, #1
 80085c0:	61fa      	str	r2, [r7, #28]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	4413      	add	r3, r2
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80085ca:	7efb      	ldrb	r3, [r7, #27]
 80085cc:	2b20      	cmp	r3, #32
 80085ce:	d94e      	bls.n	800866e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80085d0:	7efb      	ldrb	r3, [r7, #27]
 80085d2:	2b2f      	cmp	r3, #47	; 0x2f
 80085d4:	d006      	beq.n	80085e4 <create_name+0x54>
 80085d6:	7efb      	ldrb	r3, [r7, #27]
 80085d8:	2b5c      	cmp	r3, #92	; 0x5c
 80085da:	d110      	bne.n	80085fe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80085dc:	e002      	b.n	80085e4 <create_name+0x54>
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	3301      	adds	r3, #1
 80085e2:	61fb      	str	r3, [r7, #28]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	781b      	ldrb	r3, [r3, #0]
 80085ec:	2b2f      	cmp	r3, #47	; 0x2f
 80085ee:	d0f6      	beq.n	80085de <create_name+0x4e>
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	2b5c      	cmp	r3, #92	; 0x5c
 80085fa:	d0f0      	beq.n	80085de <create_name+0x4e>
			break;
 80085fc:	e038      	b.n	8008670 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80085fe:	7efb      	ldrb	r3, [r7, #27]
 8008600:	2b2e      	cmp	r3, #46	; 0x2e
 8008602:	d003      	beq.n	800860c <create_name+0x7c>
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	429a      	cmp	r2, r3
 800860a:	d30c      	bcc.n	8008626 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2b0b      	cmp	r3, #11
 8008610:	d002      	beq.n	8008618 <create_name+0x88>
 8008612:	7efb      	ldrb	r3, [r7, #27]
 8008614:	2b2e      	cmp	r3, #46	; 0x2e
 8008616:	d001      	beq.n	800861c <create_name+0x8c>
 8008618:	2306      	movs	r3, #6
 800861a:	e044      	b.n	80086a6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800861c:	2308      	movs	r3, #8
 800861e:	613b      	str	r3, [r7, #16]
 8008620:	230b      	movs	r3, #11
 8008622:	617b      	str	r3, [r7, #20]
			continue;
 8008624:	e022      	b.n	800866c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8008626:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800862a:	2b00      	cmp	r3, #0
 800862c:	da04      	bge.n	8008638 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800862e:	7efb      	ldrb	r3, [r7, #27]
 8008630:	3b80      	subs	r3, #128	; 0x80
 8008632:	4a1f      	ldr	r2, [pc, #124]	; (80086b0 <create_name+0x120>)
 8008634:	5cd3      	ldrb	r3, [r2, r3]
 8008636:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8008638:	7efb      	ldrb	r3, [r7, #27]
 800863a:	4619      	mov	r1, r3
 800863c:	481d      	ldr	r0, [pc, #116]	; (80086b4 <create_name+0x124>)
 800863e:	f7ff f80e 	bl	800765e <chk_chr>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <create_name+0xbc>
 8008648:	2306      	movs	r3, #6
 800864a:	e02c      	b.n	80086a6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800864c:	7efb      	ldrb	r3, [r7, #27]
 800864e:	2b60      	cmp	r3, #96	; 0x60
 8008650:	d905      	bls.n	800865e <create_name+0xce>
 8008652:	7efb      	ldrb	r3, [r7, #27]
 8008654:	2b7a      	cmp	r3, #122	; 0x7a
 8008656:	d802      	bhi.n	800865e <create_name+0xce>
 8008658:	7efb      	ldrb	r3, [r7, #27]
 800865a:	3b20      	subs	r3, #32
 800865c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	613a      	str	r2, [r7, #16]
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	4413      	add	r3, r2
 8008668:	7efa      	ldrb	r2, [r7, #27]
 800866a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800866c:	e7a6      	b.n	80085bc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800866e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008670:	68fa      	ldr	r2, [r7, #12]
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	441a      	add	r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <create_name+0xf4>
 8008680:	2306      	movs	r3, #6
 8008682:	e010      	b.n	80086a6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	2be5      	cmp	r3, #229	; 0xe5
 800868a:	d102      	bne.n	8008692 <create_name+0x102>
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	2205      	movs	r2, #5
 8008690:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008692:	7efb      	ldrb	r3, [r7, #27]
 8008694:	2b20      	cmp	r3, #32
 8008696:	d801      	bhi.n	800869c <create_name+0x10c>
 8008698:	2204      	movs	r2, #4
 800869a:	e000      	b.n	800869e <create_name+0x10e>
 800869c:	2200      	movs	r2, #0
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	330b      	adds	r3, #11
 80086a2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80086a4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3720      	adds	r7, #32
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	0800b5e0 	.word	0x0800b5e0
 80086b4:	0800b504 	.word	0x0800b504

080086b8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b086      	sub	sp, #24
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80086cc:	e002      	b.n	80086d4 <follow_path+0x1c>
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	2b2f      	cmp	r3, #47	; 0x2f
 80086da:	d0f8      	beq.n	80086ce <follow_path+0x16>
 80086dc:	683b      	ldr	r3, [r7, #0]
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2b5c      	cmp	r3, #92	; 0x5c
 80086e2:	d0f4      	beq.n	80086ce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2200      	movs	r2, #0
 80086e8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	781b      	ldrb	r3, [r3, #0]
 80086ee:	2b1f      	cmp	r3, #31
 80086f0:	d80a      	bhi.n	8008708 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2280      	movs	r2, #128	; 0x80
 80086f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80086fa:	2100      	movs	r1, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff fcf9 	bl	80080f4 <dir_sdi>
 8008702:	4603      	mov	r3, r0
 8008704:	75fb      	strb	r3, [r7, #23]
 8008706:	e043      	b.n	8008790 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008708:	463b      	mov	r3, r7
 800870a:	4619      	mov	r1, r3
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f7ff ff3f 	bl	8008590 <create_name>
 8008712:	4603      	mov	r3, r0
 8008714:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008716:	7dfb      	ldrb	r3, [r7, #23]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d134      	bne.n	8008786 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f7ff feaf 	bl	8008480 <dir_find>
 8008722:	4603      	mov	r3, r0
 8008724:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800872c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800872e:	7dfb      	ldrb	r3, [r7, #23]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	2b04      	cmp	r3, #4
 8008738:	d127      	bne.n	800878a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800873a:	7afb      	ldrb	r3, [r7, #11]
 800873c:	f003 0304 	and.w	r3, r3, #4
 8008740:	2b00      	cmp	r3, #0
 8008742:	d122      	bne.n	800878a <follow_path+0xd2>
 8008744:	2305      	movs	r3, #5
 8008746:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008748:	e01f      	b.n	800878a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800874a:	7afb      	ldrb	r3, [r7, #11]
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	d11c      	bne.n	800878e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	799b      	ldrb	r3, [r3, #6]
 8008758:	f003 0310 	and.w	r3, r3, #16
 800875c:	2b00      	cmp	r3, #0
 800875e:	d102      	bne.n	8008766 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008760:	2305      	movs	r3, #5
 8008762:	75fb      	strb	r3, [r7, #23]
 8008764:	e014      	b.n	8008790 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	695b      	ldr	r3, [r3, #20]
 8008770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008774:	4413      	add	r3, r2
 8008776:	4619      	mov	r1, r3
 8008778:	68f8      	ldr	r0, [r7, #12]
 800877a:	f7ff fe42 	bl	8008402 <ld_clust>
 800877e:	4602      	mov	r2, r0
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008784:	e7c0      	b.n	8008708 <follow_path+0x50>
			if (res != FR_OK) break;
 8008786:	bf00      	nop
 8008788:	e002      	b.n	8008790 <follow_path+0xd8>
				break;
 800878a:	bf00      	nop
 800878c:	e000      	b.n	8008790 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800878e:	bf00      	nop
			}
		}
	}

	return res;
 8008790:	7dfb      	ldrb	r3, [r7, #23]
}
 8008792:	4618      	mov	r0, r3
 8008794:	3718      	adds	r7, #24
 8008796:	46bd      	mov	sp, r7
 8008798:	bd80      	pop	{r7, pc}

0800879a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800879a:	b480      	push	{r7}
 800879c:	b087      	sub	sp, #28
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80087a2:	f04f 33ff 	mov.w	r3, #4294967295
 80087a6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d031      	beq.n	8008814 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	617b      	str	r3, [r7, #20]
 80087b6:	e002      	b.n	80087be <get_ldnumber+0x24>
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	3301      	adds	r3, #1
 80087bc:	617b      	str	r3, [r7, #20]
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	2b20      	cmp	r3, #32
 80087c4:	d903      	bls.n	80087ce <get_ldnumber+0x34>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	781b      	ldrb	r3, [r3, #0]
 80087ca:	2b3a      	cmp	r3, #58	; 0x3a
 80087cc:	d1f4      	bne.n	80087b8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b3a      	cmp	r3, #58	; 0x3a
 80087d4:	d11c      	bne.n	8008810 <get_ldnumber+0x76>
			tp = *path;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	1c5a      	adds	r2, r3, #1
 80087e0:	60fa      	str	r2, [r7, #12]
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	3b30      	subs	r3, #48	; 0x30
 80087e6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	2b09      	cmp	r3, #9
 80087ec:	d80e      	bhi.n	800880c <get_ldnumber+0x72>
 80087ee:	68fa      	ldr	r2, [r7, #12]
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d10a      	bne.n	800880c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d107      	bne.n	800880c <get_ldnumber+0x72>
					vol = (int)i;
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	3301      	adds	r3, #1
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	e002      	b.n	8008816 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008810:	2300      	movs	r3, #0
 8008812:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008814:	693b      	ldr	r3, [r7, #16]
}
 8008816:	4618      	mov	r0, r3
 8008818:	371c      	adds	r7, #28
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2200      	movs	r2, #0
 8008832:	70da      	strb	r2, [r3, #3]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f04f 32ff 	mov.w	r2, #4294967295
 800883a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	6878      	ldr	r0, [r7, #4]
 8008840:	f7ff f8d8 	bl	80079f4 <move_window>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d001      	beq.n	800884e <check_fs+0x2a>
 800884a:	2304      	movs	r3, #4
 800884c:	e038      	b.n	80088c0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	3330      	adds	r3, #48	; 0x30
 8008852:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe fe1c 	bl	8007494 <ld_word>
 800885c:	4603      	mov	r3, r0
 800885e:	461a      	mov	r2, r3
 8008860:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008864:	429a      	cmp	r2, r3
 8008866:	d001      	beq.n	800886c <check_fs+0x48>
 8008868:	2303      	movs	r3, #3
 800886a:	e029      	b.n	80088c0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008872:	2be9      	cmp	r3, #233	; 0xe9
 8008874:	d009      	beq.n	800888a <check_fs+0x66>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800887c:	2beb      	cmp	r3, #235	; 0xeb
 800887e:	d11e      	bne.n	80088be <check_fs+0x9a>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008886:	2b90      	cmp	r3, #144	; 0x90
 8008888:	d119      	bne.n	80088be <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	3330      	adds	r3, #48	; 0x30
 800888e:	3336      	adds	r3, #54	; 0x36
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe fe17 	bl	80074c4 <ld_dword>
 8008896:	4603      	mov	r3, r0
 8008898:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800889c:	4a0a      	ldr	r2, [pc, #40]	; (80088c8 <check_fs+0xa4>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d101      	bne.n	80088a6 <check_fs+0x82>
 80088a2:	2300      	movs	r3, #0
 80088a4:	e00c      	b.n	80088c0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	3330      	adds	r3, #48	; 0x30
 80088aa:	3352      	adds	r3, #82	; 0x52
 80088ac:	4618      	mov	r0, r3
 80088ae:	f7fe fe09 	bl	80074c4 <ld_dword>
 80088b2:	4603      	mov	r3, r0
 80088b4:	4a05      	ldr	r2, [pc, #20]	; (80088cc <check_fs+0xa8>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d101      	bne.n	80088be <check_fs+0x9a>
 80088ba:	2300      	movs	r3, #0
 80088bc:	e000      	b.n	80088c0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80088be:	2302      	movs	r3, #2
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}
 80088c8:	00544146 	.word	0x00544146
 80088cc:	33544146 	.word	0x33544146

080088d0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b096      	sub	sp, #88	; 0x58
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	60f8      	str	r0, [r7, #12]
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	4613      	mov	r3, r2
 80088dc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f7ff ff58 	bl	800879a <get_ldnumber>
 80088ea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80088ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da01      	bge.n	80088f6 <find_volume+0x26>
 80088f2:	230b      	movs	r3, #11
 80088f4:	e22d      	b.n	8008d52 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80088f6:	4aa1      	ldr	r2, [pc, #644]	; (8008b7c <find_volume+0x2ac>)
 80088f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088fe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	2b00      	cmp	r3, #0
 8008904:	d101      	bne.n	800890a <find_volume+0x3a>
 8008906:	230c      	movs	r3, #12
 8008908:	e223      	b.n	8008d52 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800890e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	f023 0301 	bic.w	r3, r3, #1
 8008916:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800891a:	781b      	ldrb	r3, [r3, #0]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01a      	beq.n	8008956 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8008920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	4618      	mov	r0, r3
 8008926:	f7fe fd17 	bl	8007358 <disk_status>
 800892a:	4603      	mov	r3, r0
 800892c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8008930:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008934:	f003 0301 	and.w	r3, r3, #1
 8008938:	2b00      	cmp	r3, #0
 800893a:	d10c      	bne.n	8008956 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800893c:	79fb      	ldrb	r3, [r7, #7]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d007      	beq.n	8008952 <find_volume+0x82>
 8008942:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008946:	f003 0304 	and.w	r3, r3, #4
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800894e:	230a      	movs	r3, #10
 8008950:	e1ff      	b.n	8008d52 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 8008952:	2300      	movs	r3, #0
 8008954:	e1fd      	b.n	8008d52 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	2200      	movs	r2, #0
 800895a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800895c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895e:	b2da      	uxtb	r2, r3
 8008960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008962:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008966:	785b      	ldrb	r3, [r3, #1]
 8008968:	4618      	mov	r0, r3
 800896a:	f7fe fd0f 	bl	800738c <disk_initialize>
 800896e:	4603      	mov	r3, r0
 8008970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008974:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d001      	beq.n	8008984 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008980:	2303      	movs	r3, #3
 8008982:	e1e6      	b.n	8008d52 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d007      	beq.n	800899a <find_volume+0xca>
 800898a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800898e:	f003 0304 	and.w	r3, r3, #4
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008996:	230a      	movs	r3, #10
 8008998:	e1db      	b.n	8008d52 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800899e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80089a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089a2:	f7ff ff3f 	bl	8008824 <check_fs>
 80089a6:	4603      	mov	r3, r0
 80089a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80089ac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80089b0:	2b02      	cmp	r3, #2
 80089b2:	d149      	bne.n	8008a48 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089b4:	2300      	movs	r3, #0
 80089b6:	643b      	str	r3, [r7, #64]	; 0x40
 80089b8:	e01e      	b.n	80089f8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80089ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c2:	011b      	lsls	r3, r3, #4
 80089c4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80089c8:	4413      	add	r3, r2
 80089ca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	3304      	adds	r3, #4
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d006      	beq.n	80089e4 <find_volume+0x114>
 80089d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089d8:	3308      	adds	r3, #8
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe fd72 	bl	80074c4 <ld_dword>
 80089e0:	4602      	mov	r2, r0
 80089e2:	e000      	b.n	80089e6 <find_volume+0x116>
 80089e4:	2200      	movs	r2, #0
 80089e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	3358      	adds	r3, #88	; 0x58
 80089ec:	443b      	add	r3, r7
 80089ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80089f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089f4:	3301      	adds	r3, #1
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
 80089f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089fa:	2b03      	cmp	r3, #3
 80089fc:	d9dd      	bls.n	80089ba <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80089fe:	2300      	movs	r3, #0
 8008a00:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8008a02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d002      	beq.n	8008a0e <find_volume+0x13e>
 8008a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a0a:	3b01      	subs	r3, #1
 8008a0c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8008a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	3358      	adds	r3, #88	; 0x58
 8008a14:	443b      	add	r3, r7
 8008a16:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008a1a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d005      	beq.n	8008a2e <find_volume+0x15e>
 8008a22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008a26:	f7ff fefd 	bl	8008824 <check_fs>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	e000      	b.n	8008a30 <find_volume+0x160>
 8008a2e:	2303      	movs	r3, #3
 8008a30:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8008a34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d905      	bls.n	8008a48 <find_volume+0x178>
 8008a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a3e:	3301      	adds	r3, #1
 8008a40:	643b      	str	r3, [r7, #64]	; 0x40
 8008a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d9e2      	bls.n	8008a0e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008a48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a4c:	2b04      	cmp	r3, #4
 8008a4e:	d101      	bne.n	8008a54 <find_volume+0x184>
 8008a50:	2301      	movs	r3, #1
 8008a52:	e17e      	b.n	8008d52 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008a54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d901      	bls.n	8008a60 <find_volume+0x190>
 8008a5c:	230d      	movs	r3, #13
 8008a5e:	e178      	b.n	8008d52 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a62:	3330      	adds	r3, #48	; 0x30
 8008a64:	330b      	adds	r3, #11
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fe fd14 	bl	8007494 <ld_word>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a72:	d001      	beq.n	8008a78 <find_volume+0x1a8>
 8008a74:	230d      	movs	r3, #13
 8008a76:	e16c      	b.n	8008d52 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a7a:	3330      	adds	r3, #48	; 0x30
 8008a7c:	3316      	adds	r3, #22
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fe fd08 	bl	8007494 <ld_word>
 8008a84:	4603      	mov	r3, r0
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <find_volume+0x1cc>
 8008a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a90:	3330      	adds	r3, #48	; 0x30
 8008a92:	3324      	adds	r3, #36	; 0x24
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7fe fd15 	bl	80074c4 <ld_dword>
 8008a9a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008aa0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aa4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aaa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aae:	789b      	ldrb	r3, [r3, #2]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d005      	beq.n	8008ac0 <find_volume+0x1f0>
 8008ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ab6:	789b      	ldrb	r3, [r3, #2]
 8008ab8:	2b02      	cmp	r3, #2
 8008aba:	d001      	beq.n	8008ac0 <find_volume+0x1f0>
 8008abc:	230d      	movs	r3, #13
 8008abe:	e148      	b.n	8008d52 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac2:	789b      	ldrb	r3, [r3, #2]
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ac8:	fb02 f303 	mul.w	r3, r2, r3
 8008acc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad4:	b29a      	uxth	r2, r3
 8008ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008adc:	895b      	ldrh	r3, [r3, #10]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d008      	beq.n	8008af4 <find_volume+0x224>
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	895b      	ldrh	r3, [r3, #10]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008aea:	895b      	ldrh	r3, [r3, #10]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	4013      	ands	r3, r2
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d001      	beq.n	8008af8 <find_volume+0x228>
 8008af4:	230d      	movs	r3, #13
 8008af6:	e12c      	b.n	8008d52 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afa:	3330      	adds	r3, #48	; 0x30
 8008afc:	3311      	adds	r3, #17
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7fe fcc8 	bl	8007494 <ld_word>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0e:	891b      	ldrh	r3, [r3, #8]
 8008b10:	f003 030f 	and.w	r3, r3, #15
 8008b14:	b29b      	uxth	r3, r3
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d001      	beq.n	8008b1e <find_volume+0x24e>
 8008b1a:	230d      	movs	r3, #13
 8008b1c:	e119      	b.n	8008d52 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b20:	3330      	adds	r3, #48	; 0x30
 8008b22:	3313      	adds	r3, #19
 8008b24:	4618      	mov	r0, r3
 8008b26:	f7fe fcb5 	bl	8007494 <ld_word>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008b2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d106      	bne.n	8008b42 <find_volume+0x272>
 8008b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b36:	3330      	adds	r3, #48	; 0x30
 8008b38:	3320      	adds	r3, #32
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fe fcc2 	bl	80074c4 <ld_dword>
 8008b40:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b44:	3330      	adds	r3, #48	; 0x30
 8008b46:	330e      	adds	r3, #14
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fe fca3 	bl	8007494 <ld_word>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008b52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d101      	bne.n	8008b5c <find_volume+0x28c>
 8008b58:	230d      	movs	r3, #13
 8008b5a:	e0fa      	b.n	8008d52 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008b5c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b60:	4413      	add	r3, r2
 8008b62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b64:	8912      	ldrh	r2, [r2, #8]
 8008b66:	0912      	lsrs	r2, r2, #4
 8008b68:	b292      	uxth	r2, r2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d204      	bcs.n	8008b80 <find_volume+0x2b0>
 8008b76:	230d      	movs	r3, #13
 8008b78:	e0eb      	b.n	8008d52 <find_volume+0x482>
 8008b7a:	bf00      	nop
 8008b7c:	200004d8 	.word	0x200004d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008b80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b88:	8952      	ldrh	r2, [r2, #10]
 8008b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008b8e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <find_volume+0x2ca>
 8008b96:	230d      	movs	r3, #13
 8008b98:	e0db      	b.n	8008d52 <find_volume+0x482>
		fmt = FS_FAT32;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d802      	bhi.n	8008bb0 <find_volume+0x2e0>
 8008baa:	2302      	movs	r3, #2
 8008bac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb2:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d802      	bhi.n	8008bc0 <find_volume+0x2f0>
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc2:	1c9a      	adds	r2, r3, #2
 8008bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bcc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008bce:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bd2:	441a      	add	r2, r3
 8008bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bd6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008bd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bdc:	441a      	add	r2, r3
 8008bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be0:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8008be2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008be6:	2b03      	cmp	r3, #3
 8008be8:	d11e      	bne.n	8008c28 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bec:	3330      	adds	r3, #48	; 0x30
 8008bee:	332a      	adds	r3, #42	; 0x2a
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe fc4f 	bl	8007494 <ld_word>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d001      	beq.n	8008c00 <find_volume+0x330>
 8008bfc:	230d      	movs	r3, #13
 8008bfe:	e0a8      	b.n	8008d52 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c02:	891b      	ldrh	r3, [r3, #8]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <find_volume+0x33c>
 8008c08:	230d      	movs	r3, #13
 8008c0a:	e0a2      	b.n	8008d52 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c0e:	3330      	adds	r3, #48	; 0x30
 8008c10:	332c      	adds	r3, #44	; 0x2c
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fc56 	bl	80074c4 <ld_dword>
 8008c18:	4602      	mov	r2, r0
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c20:	695b      	ldr	r3, [r3, #20]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	647b      	str	r3, [r7, #68]	; 0x44
 8008c26:	e01f      	b.n	8008c68 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2a:	891b      	ldrh	r3, [r3, #8]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d101      	bne.n	8008c34 <find_volume+0x364>
 8008c30:	230d      	movs	r3, #13
 8008c32:	e08e      	b.n	8008d52 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c36:	6a1a      	ldr	r2, [r3, #32]
 8008c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3a:	441a      	add	r2, r3
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008c40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d103      	bne.n	8008c50 <find_volume+0x380>
 8008c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4a:	695b      	ldr	r3, [r3, #20]
 8008c4c:	005b      	lsls	r3, r3, #1
 8008c4e:	e00a      	b.n	8008c66 <find_volume+0x396>
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	695a      	ldr	r2, [r3, #20]
 8008c54:	4613      	mov	r3, r2
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	4413      	add	r3, r2
 8008c5a:	085a      	lsrs	r2, r3, #1
 8008c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c5e:	695b      	ldr	r3, [r3, #20]
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008c66:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008c72:	0a5b      	lsrs	r3, r3, #9
 8008c74:	429a      	cmp	r2, r3
 8008c76:	d201      	bcs.n	8008c7c <find_volume+0x3ac>
 8008c78:	230d      	movs	r3, #13
 8008c7a:	e06a      	b.n	8008d52 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c82:	611a      	str	r2, [r3, #16]
 8008c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c86:	691a      	ldr	r2, [r3, #16]
 8008c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c8e:	2280      	movs	r2, #128	; 0x80
 8008c90:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008c92:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008c96:	2b03      	cmp	r3, #3
 8008c98:	d149      	bne.n	8008d2e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c9c:	3330      	adds	r3, #48	; 0x30
 8008c9e:	3330      	adds	r3, #48	; 0x30
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f7fe fbf7 	bl	8007494 <ld_word>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d140      	bne.n	8008d2e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008cac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cae:	3301      	adds	r3, #1
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008cb4:	f7fe fe9e 	bl	80079f4 <move_window>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d137      	bne.n	8008d2e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8008cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cc6:	3330      	adds	r3, #48	; 0x30
 8008cc8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fe fbe1 	bl	8007494 <ld_word>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d127      	bne.n	8008d2e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ce0:	3330      	adds	r3, #48	; 0x30
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fbee 	bl	80074c4 <ld_dword>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <find_volume+0x48c>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d11e      	bne.n	8008d2e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008cf2:	3330      	adds	r3, #48	; 0x30
 8008cf4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fbe3 	bl	80074c4 <ld_dword>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	4a17      	ldr	r2, [pc, #92]	; (8008d60 <find_volume+0x490>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d113      	bne.n	8008d2e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d08:	3330      	adds	r3, #48	; 0x30
 8008d0a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7fe fbd8 	bl	80074c4 <ld_dword>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d18:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d1c:	3330      	adds	r3, #48	; 0x30
 8008d1e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008d22:	4618      	mov	r0, r3
 8008d24:	f7fe fbce 	bl	80074c4 <ld_dword>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d2c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d30:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8008d34:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008d36:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <find_volume+0x494>)
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	3301      	adds	r3, #1
 8008d3c:	b29a      	uxth	r2, r3
 8008d3e:	4b09      	ldr	r3, [pc, #36]	; (8008d64 <find_volume+0x494>)
 8008d40:	801a      	strh	r2, [r3, #0]
 8008d42:	4b08      	ldr	r3, [pc, #32]	; (8008d64 <find_volume+0x494>)
 8008d44:	881a      	ldrh	r2, [r3, #0]
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d48:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008d4a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008d4c:	f7fe fdea 	bl	8007924 <clear_lock>
#endif
	return FR_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3758      	adds	r7, #88	; 0x58
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	41615252 	.word	0x41615252
 8008d60:	61417272 	.word	0x61417272
 8008d64:	200004dc 	.word	0x200004dc

08008d68 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008d72:	2309      	movs	r3, #9
 8008d74:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d01c      	beq.n	8008db6 <validate+0x4e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d018      	beq.n	8008db6 <validate+0x4e>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	781b      	ldrb	r3, [r3, #0]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d013      	beq.n	8008db6 <validate+0x4e>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	889a      	ldrh	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	88db      	ldrh	r3, [r3, #6]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d10c      	bne.n	8008db6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	4618      	mov	r0, r3
 8008da4:	f7fe fad8 	bl	8007358 <disk_status>
 8008da8:	4603      	mov	r3, r0
 8008daa:	f003 0301 	and.w	r3, r3, #1
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d101      	bne.n	8008db6 <validate+0x4e>
			res = FR_OK;
 8008db2:	2300      	movs	r3, #0
 8008db4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d102      	bne.n	8008dc2 <validate+0x5a>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	e000      	b.n	8008dc4 <validate+0x5c>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	683a      	ldr	r2, [r7, #0]
 8008dc6:	6013      	str	r3, [r2, #0]
	return res;
 8008dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
	...

08008dd4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b088      	sub	sp, #32
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	60f8      	str	r0, [r7, #12]
 8008ddc:	60b9      	str	r1, [r7, #8]
 8008dde:	4613      	mov	r3, r2
 8008de0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008de6:	f107 0310 	add.w	r3, r7, #16
 8008dea:	4618      	mov	r0, r3
 8008dec:	f7ff fcd5 	bl	800879a <get_ldnumber>
 8008df0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	da01      	bge.n	8008dfc <f_mount+0x28>
 8008df8:	230b      	movs	r3, #11
 8008dfa:	e02b      	b.n	8008e54 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008dfc:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <f_mount+0x88>)
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e04:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008e06:	69bb      	ldr	r3, [r7, #24]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d005      	beq.n	8008e18 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008e0c:	69b8      	ldr	r0, [r7, #24]
 8008e0e:	f7fe fd89 	bl	8007924 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	2200      	movs	r2, #0
 8008e16:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d002      	beq.n	8008e24 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	490d      	ldr	r1, [pc, #52]	; (8008e5c <f_mount+0x88>)
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <f_mount+0x66>
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d001      	beq.n	8008e3e <f_mount+0x6a>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	e00a      	b.n	8008e54 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008e3e:	f107 010c 	add.w	r1, r7, #12
 8008e42:	f107 0308 	add.w	r3, r7, #8
 8008e46:	2200      	movs	r2, #0
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff fd41 	bl	80088d0 <find_volume>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3720      	adds	r7, #32
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	200004d8 	.word	0x200004d8

08008e60 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b098      	sub	sp, #96	; 0x60
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <f_open+0x18>
 8008e74:	2309      	movs	r3, #9
 8008e76:	e1ad      	b.n	80091d4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008e78:	79fb      	ldrb	r3, [r7, #7]
 8008e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e7e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008e80:	79fa      	ldrb	r2, [r7, #7]
 8008e82:	f107 0110 	add.w	r1, r7, #16
 8008e86:	f107 0308 	add.w	r3, r7, #8
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7ff fd20 	bl	80088d0 <find_volume>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f040 8191 	bne.w	80091c2 <f_open+0x362>
		dj.obj.fs = fs;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	f107 0314 	add.w	r3, r7, #20
 8008eaa:	4611      	mov	r1, r2
 8008eac:	4618      	mov	r0, r3
 8008eae:	f7ff fc03 	bl	80086b8 <follow_path>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008eb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d11a      	bne.n	8008ef6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008ec0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008ec4:	b25b      	sxtb	r3, r3
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	da03      	bge.n	8008ed2 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008eca:	2306      	movs	r3, #6
 8008ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008ed0:	e011      	b.n	8008ef6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008ed2:	79fb      	ldrb	r3, [r7, #7]
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	bf14      	ite	ne
 8008edc:	2301      	movne	r3, #1
 8008ede:	2300      	moveq	r3, #0
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	f107 0314 	add.w	r3, r7, #20
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fbd2 	bl	8007694 <chk_lock>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	f003 031c 	and.w	r3, r3, #28
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d07f      	beq.n	8009000 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008f00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d017      	beq.n	8008f38 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008f08:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f0c:	2b04      	cmp	r3, #4
 8008f0e:	d10e      	bne.n	8008f2e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008f10:	f7fe fc1c 	bl	800774c <enq_lock>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d006      	beq.n	8008f28 <f_open+0xc8>
 8008f1a:	f107 0314 	add.w	r3, r7, #20
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fb03 	bl	800852a <dir_register>
 8008f24:	4603      	mov	r3, r0
 8008f26:	e000      	b.n	8008f2a <f_open+0xca>
 8008f28:	2312      	movs	r3, #18
 8008f2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008f2e:	79fb      	ldrb	r3, [r7, #7]
 8008f30:	f043 0308 	orr.w	r3, r3, #8
 8008f34:	71fb      	strb	r3, [r7, #7]
 8008f36:	e010      	b.n	8008f5a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008f38:	7ebb      	ldrb	r3, [r7, #26]
 8008f3a:	f003 0311 	and.w	r3, r3, #17
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d003      	beq.n	8008f4a <f_open+0xea>
					res = FR_DENIED;
 8008f42:	2307      	movs	r3, #7
 8008f44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008f48:	e007      	b.n	8008f5a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	f003 0304 	and.w	r3, r3, #4
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d002      	beq.n	8008f5a <f_open+0xfa>
 8008f54:	2308      	movs	r3, #8
 8008f56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008f5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d168      	bne.n	8009034 <f_open+0x1d4>
 8008f62:	79fb      	ldrb	r3, [r7, #7]
 8008f64:	f003 0308 	and.w	r3, r3, #8
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d063      	beq.n	8009034 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008f6c:	f7fd fcba 	bl	80068e4 <get_fattime>
 8008f70:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f74:	330e      	adds	r3, #14
 8008f76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7fe fae1 	bl	8007540 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f80:	3316      	adds	r3, #22
 8008f82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fe fadb 	bl	8007540 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f8c:	330b      	adds	r3, #11
 8008f8e:	2220      	movs	r2, #32
 8008f90:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f96:	4611      	mov	r1, r2
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f7ff fa32 	bl	8008402 <ld_clust>
 8008f9e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f7ff fa4a 	bl	8008440 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fae:	331c      	adds	r3, #28
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f7fe fac4 	bl	8007540 <st_dword>
					fs->wflag = 1;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d037      	beq.n	8009034 <f_open+0x1d4>
						dw = fs->winsect;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc8:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008fca:	f107 0314 	add.w	r3, r7, #20
 8008fce:	2200      	movs	r2, #0
 8008fd0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe ff5d 	bl	8007e92 <remove_chain>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008fde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d126      	bne.n	8009034 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008fea:	4618      	mov	r0, r3
 8008fec:	f7fe fd02 	bl	80079f4 <move_window>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ffa:	3a01      	subs	r2, #1
 8008ffc:	60da      	str	r2, [r3, #12]
 8008ffe:	e019      	b.n	8009034 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8009000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009004:	2b00      	cmp	r3, #0
 8009006:	d115      	bne.n	8009034 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8009008:	7ebb      	ldrb	r3, [r7, #26]
 800900a:	f003 0310 	and.w	r3, r3, #16
 800900e:	2b00      	cmp	r3, #0
 8009010:	d003      	beq.n	800901a <f_open+0x1ba>
					res = FR_NO_FILE;
 8009012:	2304      	movs	r3, #4
 8009014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009018:	e00c      	b.n	8009034 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	f003 0302 	and.w	r3, r3, #2
 8009020:	2b00      	cmp	r3, #0
 8009022:	d007      	beq.n	8009034 <f_open+0x1d4>
 8009024:	7ebb      	ldrb	r3, [r7, #26]
 8009026:	f003 0301 	and.w	r3, r3, #1
 800902a:	2b00      	cmp	r3, #0
 800902c:	d002      	beq.n	8009034 <f_open+0x1d4>
						res = FR_DENIED;
 800902e:	2307      	movs	r3, #7
 8009030:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8009034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009038:	2b00      	cmp	r3, #0
 800903a:	d128      	bne.n	800908e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	f003 0308 	and.w	r3, r3, #8
 8009042:	2b00      	cmp	r3, #0
 8009044:	d003      	beq.n	800904e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8009046:	79fb      	ldrb	r3, [r7, #7]
 8009048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800904c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8009056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	f023 0301 	bic.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	bf14      	ite	ne
 8009066:	2301      	movne	r3, #1
 8009068:	2300      	moveq	r3, #0
 800906a:	b2db      	uxtb	r3, r3
 800906c:	461a      	mov	r2, r3
 800906e:	f107 0314 	add.w	r3, r7, #20
 8009072:	4611      	mov	r1, r2
 8009074:	4618      	mov	r0, r3
 8009076:	f7fe fb8b 	bl	8007790 <inc_lock>
 800907a:	4602      	mov	r2, r0
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d102      	bne.n	800908e <f_open+0x22e>
 8009088:	2302      	movs	r3, #2
 800908a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009092:	2b00      	cmp	r3, #0
 8009094:	f040 8095 	bne.w	80091c2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f7ff f9af 	bl	8008402 <ld_clust>
 80090a4:	4602      	mov	r2, r0
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80090aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090ac:	331c      	adds	r3, #28
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fe fa08 	bl	80074c4 <ld_dword>
 80090b4:	4602      	mov	r2, r0
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2200      	movs	r2, #0
 80090be:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80090c0:	693a      	ldr	r2, [r7, #16]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	88da      	ldrh	r2, [r3, #6]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	79fa      	ldrb	r2, [r7, #7]
 80090d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	2200      	movs	r2, #0
 80090d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2200      	movs	r2, #0
 80090de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3330      	adds	r3, #48	; 0x30
 80090ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ee:	2100      	movs	r1, #0
 80090f0:	4618      	mov	r0, r3
 80090f2:	f7fe fa72 	bl	80075da <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80090f6:	79fb      	ldrb	r3, [r7, #7]
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d060      	beq.n	80091c2 <f_open+0x362>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d05c      	beq.n	80091c2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	68da      	ldr	r2, [r3, #12]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	895b      	ldrh	r3, [r3, #10]
 8009114:	025b      	lsls	r3, r3, #9
 8009116:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	657b      	str	r3, [r7, #84]	; 0x54
 8009124:	e016      	b.n	8009154 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fd1d 	bl	8007b6a <get_fat>
 8009130:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8009132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009134:	2b01      	cmp	r3, #1
 8009136:	d802      	bhi.n	800913e <f_open+0x2de>
 8009138:	2302      	movs	r3, #2
 800913a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800913e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009144:	d102      	bne.n	800914c <f_open+0x2ec>
 8009146:	2301      	movs	r3, #1
 8009148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800914c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800914e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	657b      	str	r3, [r7, #84]	; 0x54
 8009154:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009158:	2b00      	cmp	r3, #0
 800915a:	d103      	bne.n	8009164 <f_open+0x304>
 800915c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800915e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009160:	429a      	cmp	r2, r3
 8009162:	d8e0      	bhi.n	8009126 <f_open+0x2c6>
				}
				fp->clust = clst;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009168:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800916a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800916e:	2b00      	cmp	r3, #0
 8009170:	d127      	bne.n	80091c2 <f_open+0x362>
 8009172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009178:	2b00      	cmp	r3, #0
 800917a:	d022      	beq.n	80091c2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800917c:	693b      	ldr	r3, [r7, #16]
 800917e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe fcd3 	bl	8007b2c <clust2sect>
 8009186:	6478      	str	r0, [r7, #68]	; 0x44
 8009188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800918a:	2b00      	cmp	r3, #0
 800918c:	d103      	bne.n	8009196 <f_open+0x336>
						res = FR_INT_ERR;
 800918e:	2302      	movs	r3, #2
 8009190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8009194:	e015      	b.n	80091c2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009198:	0a5a      	lsrs	r2, r3, #9
 800919a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800919c:	441a      	add	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	7858      	ldrb	r0, [r3, #1]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	6a1a      	ldr	r2, [r3, #32]
 80091b0:	2301      	movs	r3, #1
 80091b2:	f7fe f911 	bl	80073d8 <disk_read>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d002      	beq.n	80091c2 <f_open+0x362>
 80091bc:	2301      	movs	r3, #1
 80091be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80091c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <f_open+0x370>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2200      	movs	r2, #0
 80091ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80091d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3760      	adds	r7, #96	; 0x60
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08e      	sub	sp, #56	; 0x38
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	2200      	movs	r2, #0
 80091f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	f107 0214 	add.w	r2, r7, #20
 80091fa:	4611      	mov	r1, r2
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff fdb3 	bl	8008d68 <validate>
 8009202:	4603      	mov	r3, r0
 8009204:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800920c:	2b00      	cmp	r3, #0
 800920e:	d107      	bne.n	8009220 <f_read+0x44>
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	7d5b      	ldrb	r3, [r3, #21]
 8009214:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8009218:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800921c:	2b00      	cmp	r3, #0
 800921e:	d002      	beq.n	8009226 <f_read+0x4a>
 8009220:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009224:	e115      	b.n	8009452 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	7d1b      	ldrb	r3, [r3, #20]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d101      	bne.n	8009236 <f_read+0x5a>
 8009232:	2307      	movs	r3, #7
 8009234:	e10d      	b.n	8009452 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	1ad3      	subs	r3, r2, r3
 8009240:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	429a      	cmp	r2, r3
 8009248:	f240 80fe 	bls.w	8009448 <f_read+0x26c>
 800924c:	6a3b      	ldr	r3, [r7, #32]
 800924e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8009250:	e0fa      	b.n	8009448 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800925a:	2b00      	cmp	r3, #0
 800925c:	f040 80c6 	bne.w	80093ec <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	699b      	ldr	r3, [r3, #24]
 8009264:	0a5b      	lsrs	r3, r3, #9
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	8952      	ldrh	r2, [r2, #10]
 800926a:	3a01      	subs	r2, #1
 800926c:	4013      	ands	r3, r2
 800926e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d12f      	bne.n	80092d6 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	699b      	ldr	r3, [r3, #24]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d103      	bne.n	8009286 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	633b      	str	r3, [r7, #48]	; 0x30
 8009284:	e013      	b.n	80092ae <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	4619      	mov	r1, r3
 8009294:	68f8      	ldr	r0, [r7, #12]
 8009296:	f7fe fef9 	bl	800808c <clmt_clust>
 800929a:	6338      	str	r0, [r7, #48]	; 0x30
 800929c:	e007      	b.n	80092ae <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	69db      	ldr	r3, [r3, #28]
 80092a4:	4619      	mov	r1, r3
 80092a6:	4610      	mov	r0, r2
 80092a8:	f7fe fc5f 	bl	8007b6a <get_fat>
 80092ac:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d804      	bhi.n	80092be <f_read+0xe2>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2202      	movs	r2, #2
 80092b8:	755a      	strb	r2, [r3, #21]
 80092ba:	2302      	movs	r3, #2
 80092bc:	e0c9      	b.n	8009452 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80092be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092c4:	d104      	bne.n	80092d0 <f_read+0xf4>
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	2201      	movs	r2, #1
 80092ca:	755a      	strb	r2, [r3, #21]
 80092cc:	2301      	movs	r3, #1
 80092ce:	e0c0      	b.n	8009452 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	69db      	ldr	r3, [r3, #28]
 80092dc:	4619      	mov	r1, r3
 80092de:	4610      	mov	r0, r2
 80092e0:	f7fe fc24 	bl	8007b2c <clust2sect>
 80092e4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d104      	bne.n	80092f6 <f_read+0x11a>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2202      	movs	r2, #2
 80092f0:	755a      	strb	r2, [r3, #21]
 80092f2:	2302      	movs	r3, #2
 80092f4:	e0ad      	b.n	8009452 <f_read+0x276>
			sect += csect;
 80092f6:	69ba      	ldr	r2, [r7, #24]
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	4413      	add	r3, r2
 80092fc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	0a5b      	lsrs	r3, r3, #9
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2b00      	cmp	r3, #0
 8009308:	d039      	beq.n	800937e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800930a:	69fa      	ldr	r2, [r7, #28]
 800930c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930e:	4413      	add	r3, r2
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	8952      	ldrh	r2, [r2, #10]
 8009314:	4293      	cmp	r3, r2
 8009316:	d905      	bls.n	8009324 <f_read+0x148>
					cc = fs->csize - csect;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	895b      	ldrh	r3, [r3, #10]
 800931c:	461a      	mov	r2, r3
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	7858      	ldrb	r0, [r3, #1]
 8009328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800932a:	69ba      	ldr	r2, [r7, #24]
 800932c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800932e:	f7fe f853 	bl	80073d8 <disk_read>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <f_read+0x166>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2201      	movs	r2, #1
 800933c:	755a      	strb	r2, [r3, #21]
 800933e:	2301      	movs	r3, #1
 8009340:	e087      	b.n	8009452 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	7d1b      	ldrb	r3, [r3, #20]
 8009346:	b25b      	sxtb	r3, r3
 8009348:	2b00      	cmp	r3, #0
 800934a:	da14      	bge.n	8009376 <f_read+0x19a>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	6a1a      	ldr	r2, [r3, #32]
 8009350:	69bb      	ldr	r3, [r7, #24]
 8009352:	1ad3      	subs	r3, r2, r3
 8009354:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009356:	429a      	cmp	r2, r3
 8009358:	d90d      	bls.n	8009376 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1a      	ldr	r2, [r3, #32]
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	025b      	lsls	r3, r3, #9
 8009364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009366:	18d0      	adds	r0, r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	3330      	adds	r3, #48	; 0x30
 800936c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009370:	4619      	mov	r1, r3
 8009372:	f7fe f911 	bl	8007598 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	025b      	lsls	r3, r3, #9
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800937c:	e050      	b.n	8009420 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	6a1b      	ldr	r3, [r3, #32]
 8009382:	69ba      	ldr	r2, [r7, #24]
 8009384:	429a      	cmp	r2, r3
 8009386:	d02e      	beq.n	80093e6 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	7d1b      	ldrb	r3, [r3, #20]
 800938c:	b25b      	sxtb	r3, r3
 800938e:	2b00      	cmp	r3, #0
 8009390:	da18      	bge.n	80093c4 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	7858      	ldrb	r0, [r3, #1]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6a1a      	ldr	r2, [r3, #32]
 80093a0:	2301      	movs	r3, #1
 80093a2:	f7fe f839 	bl	8007418 <disk_write>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d004      	beq.n	80093b6 <f_read+0x1da>
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2201      	movs	r2, #1
 80093b0:	755a      	strb	r2, [r3, #21]
 80093b2:	2301      	movs	r3, #1
 80093b4:	e04d      	b.n	8009452 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7d1b      	ldrb	r3, [r3, #20]
 80093ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093be:	b2da      	uxtb	r2, r3
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	7858      	ldrb	r0, [r3, #1]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80093ce:	2301      	movs	r3, #1
 80093d0:	69ba      	ldr	r2, [r7, #24]
 80093d2:	f7fe f801 	bl	80073d8 <disk_read>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d004      	beq.n	80093e6 <f_read+0x20a>
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	2201      	movs	r2, #1
 80093e0:	755a      	strb	r2, [r3, #21]
 80093e2:	2301      	movs	r3, #1
 80093e4:	e035      	b.n	8009452 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	69ba      	ldr	r2, [r7, #24]
 80093ea:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093f4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80093f8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80093fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	429a      	cmp	r2, r3
 8009400:	d901      	bls.n	8009406 <f_read+0x22a>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	699b      	ldr	r3, [r3, #24]
 8009410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009414:	4413      	add	r3, r2
 8009416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009418:	4619      	mov	r1, r3
 800941a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800941c:	f7fe f8bc 	bl	8007598 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8009420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009424:	4413      	add	r3, r2
 8009426:	627b      	str	r3, [r7, #36]	; 0x24
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	699a      	ldr	r2, [r3, #24]
 800942c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942e:	441a      	add	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	619a      	str	r2, [r3, #24]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943a:	441a      	add	r2, r3
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	687a      	ldr	r2, [r7, #4]
 8009442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009444:	1ad3      	subs	r3, r2, r3
 8009446:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f af01 	bne.w	8009252 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8009450:	2300      	movs	r3, #0
}
 8009452:	4618      	mov	r0, r3
 8009454:	3738      	adds	r7, #56	; 0x38
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b08c      	sub	sp, #48	; 0x30
 800945e:	af00      	add	r7, sp, #0
 8009460:	60f8      	str	r0, [r7, #12]
 8009462:	60b9      	str	r1, [r7, #8]
 8009464:	607a      	str	r2, [r7, #4]
 8009466:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2200      	movs	r2, #0
 8009470:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f107 0210 	add.w	r2, r7, #16
 8009478:	4611      	mov	r1, r2
 800947a:	4618      	mov	r0, r3
 800947c:	f7ff fc74 	bl	8008d68 <validate>
 8009480:	4603      	mov	r3, r0
 8009482:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8009486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800948a:	2b00      	cmp	r3, #0
 800948c:	d107      	bne.n	800949e <f_write+0x44>
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	7d5b      	ldrb	r3, [r3, #21]
 8009492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800949a:	2b00      	cmp	r3, #0
 800949c:	d002      	beq.n	80094a4 <f_write+0x4a>
 800949e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80094a2:	e14b      	b.n	800973c <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	7d1b      	ldrb	r3, [r3, #20]
 80094a8:	f003 0302 	and.w	r3, r3, #2
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <f_write+0x5a>
 80094b0:	2307      	movs	r3, #7
 80094b2:	e143      	b.n	800973c <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	699a      	ldr	r2, [r3, #24]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	441a      	add	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	699b      	ldr	r3, [r3, #24]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	f080 812d 	bcs.w	8009720 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	43db      	mvns	r3, r3
 80094cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80094ce:	e127      	b.n	8009720 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	699b      	ldr	r3, [r3, #24]
 80094d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f040 80e3 	bne.w	80096a4 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	0a5b      	lsrs	r3, r3, #9
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	8952      	ldrh	r2, [r2, #10]
 80094e8:	3a01      	subs	r2, #1
 80094ea:	4013      	ands	r3, r2
 80094ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d143      	bne.n	800957c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	699b      	ldr	r3, [r3, #24]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10c      	bne.n	8009516 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009504:	2b00      	cmp	r3, #0
 8009506:	d11a      	bne.n	800953e <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	2100      	movs	r1, #0
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe fd25 	bl	8007f5c <create_chain>
 8009512:	62b8      	str	r0, [r7, #40]	; 0x28
 8009514:	e013      	b.n	800953e <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800951a:	2b00      	cmp	r3, #0
 800951c:	d007      	beq.n	800952e <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	4619      	mov	r1, r3
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f7fe fdb1 	bl	800808c <clmt_clust>
 800952a:	62b8      	str	r0, [r7, #40]	; 0x28
 800952c:	e007      	b.n	800953e <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	4619      	mov	r1, r3
 8009536:	4610      	mov	r0, r2
 8009538:	f7fe fd10 	bl	8007f5c <create_chain>
 800953c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800953e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009540:	2b00      	cmp	r3, #0
 8009542:	f000 80f2 	beq.w	800972a <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009548:	2b01      	cmp	r3, #1
 800954a:	d104      	bne.n	8009556 <f_write+0xfc>
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2202      	movs	r2, #2
 8009550:	755a      	strb	r2, [r3, #21]
 8009552:	2302      	movs	r3, #2
 8009554:	e0f2      	b.n	800973c <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800955c:	d104      	bne.n	8009568 <f_write+0x10e>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	755a      	strb	r2, [r3, #21]
 8009564:	2301      	movs	r3, #1
 8009566:	e0e9      	b.n	800973c <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800956c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	689b      	ldr	r3, [r3, #8]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d102      	bne.n	800957c <f_write+0x122>
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800957a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	7d1b      	ldrb	r3, [r3, #20]
 8009580:	b25b      	sxtb	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	da18      	bge.n	80095b8 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	7858      	ldrb	r0, [r3, #1]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a1a      	ldr	r2, [r3, #32]
 8009594:	2301      	movs	r3, #1
 8009596:	f7fd ff3f 	bl	8007418 <disk_write>
 800959a:	4603      	mov	r3, r0
 800959c:	2b00      	cmp	r3, #0
 800959e:	d004      	beq.n	80095aa <f_write+0x150>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	755a      	strb	r2, [r3, #21]
 80095a6:	2301      	movs	r3, #1
 80095a8:	e0c8      	b.n	800973c <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	7d1b      	ldrb	r3, [r3, #20]
 80095ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80095b8:	693a      	ldr	r2, [r7, #16]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	69db      	ldr	r3, [r3, #28]
 80095be:	4619      	mov	r1, r3
 80095c0:	4610      	mov	r0, r2
 80095c2:	f7fe fab3 	bl	8007b2c <clust2sect>
 80095c6:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d104      	bne.n	80095d8 <f_write+0x17e>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2202      	movs	r2, #2
 80095d2:	755a      	strb	r2, [r3, #21]
 80095d4:	2302      	movs	r3, #2
 80095d6:	e0b1      	b.n	800973c <f_write+0x2e2>
			sect += csect;
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	4413      	add	r3, r2
 80095de:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	0a5b      	lsrs	r3, r3, #9
 80095e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80095e6:	6a3b      	ldr	r3, [r7, #32]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d03c      	beq.n	8009666 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	6a3b      	ldr	r3, [r7, #32]
 80095f0:	4413      	add	r3, r2
 80095f2:	693a      	ldr	r2, [r7, #16]
 80095f4:	8952      	ldrh	r2, [r2, #10]
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d905      	bls.n	8009606 <f_write+0x1ac>
					cc = fs->csize - csect;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	895b      	ldrh	r3, [r3, #10]
 80095fe:	461a      	mov	r2, r3
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	7858      	ldrb	r0, [r3, #1]
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	69f9      	ldr	r1, [r7, #28]
 8009610:	f7fd ff02 	bl	8007418 <disk_write>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d004      	beq.n	8009624 <f_write+0x1ca>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	2201      	movs	r2, #1
 800961e:	755a      	strb	r2, [r3, #21]
 8009620:	2301      	movs	r3, #1
 8009622:	e08b      	b.n	800973c <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6a1a      	ldr	r2, [r3, #32]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	6a3a      	ldr	r2, [r7, #32]
 800962e:	429a      	cmp	r2, r3
 8009630:	d915      	bls.n	800965e <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6a1a      	ldr	r2, [r3, #32]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	1ad3      	subs	r3, r2, r3
 8009640:	025b      	lsls	r3, r3, #9
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	4413      	add	r3, r2
 8009646:	f44f 7200 	mov.w	r2, #512	; 0x200
 800964a:	4619      	mov	r1, r3
 800964c:	f7fd ffa4 	bl	8007598 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	7d1b      	ldrb	r3, [r3, #20]
 8009654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009658:	b2da      	uxtb	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	025b      	lsls	r3, r3, #9
 8009662:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009664:	e03f      	b.n	80096e6 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	697a      	ldr	r2, [r7, #20]
 800966c:	429a      	cmp	r2, r3
 800966e:	d016      	beq.n	800969e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	699a      	ldr	r2, [r3, #24]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009678:	429a      	cmp	r2, r3
 800967a:	d210      	bcs.n	800969e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	7858      	ldrb	r0, [r3, #1]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009686:	2301      	movs	r3, #1
 8009688:	697a      	ldr	r2, [r7, #20]
 800968a:	f7fd fea5 	bl	80073d8 <disk_read>
 800968e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2201      	movs	r2, #1
 8009698:	755a      	strb	r2, [r3, #21]
 800969a:	2301      	movs	r3, #1
 800969c:	e04e      	b.n	800973c <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	697a      	ldr	r2, [r7, #20]
 80096a2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ac:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80096b0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80096b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d901      	bls.n	80096be <f_write+0x264>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	699b      	ldr	r3, [r3, #24]
 80096c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096cc:	4413      	add	r3, r2
 80096ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d0:	69f9      	ldr	r1, [r7, #28]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7fd ff60 	bl	8007598 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	7d1b      	ldrb	r3, [r3, #20]
 80096dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80096e6:	69fa      	ldr	r2, [r7, #28]
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	4413      	add	r3, r2
 80096ec:	61fb      	str	r3, [r7, #28]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	699a      	ldr	r2, [r3, #24]
 80096f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f4:	441a      	add	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	619a      	str	r2, [r3, #24]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	699b      	ldr	r3, [r3, #24]
 8009702:	429a      	cmp	r2, r3
 8009704:	bf38      	it	cc
 8009706:	461a      	movcc	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	60da      	str	r2, [r3, #12]
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	681a      	ldr	r2, [r3, #0]
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009712:	441a      	add	r2, r3
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	601a      	str	r2, [r3, #0]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	f47f aed4 	bne.w	80094d0 <f_write+0x76>
 8009728:	e000      	b.n	800972c <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800972a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	7d1b      	ldrb	r3, [r3, #20]
 8009730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009734:	b2da      	uxtb	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800973a:	2300      	movs	r3, #0
}
 800973c:	4618      	mov	r0, r3
 800973e:	3730      	adds	r7, #48	; 0x30
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f107 0208 	add.w	r2, r7, #8
 8009752:	4611      	mov	r1, r2
 8009754:	4618      	mov	r0, r3
 8009756:	f7ff fb07 	bl	8008d68 <validate>
 800975a:	4603      	mov	r3, r0
 800975c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800975e:	7dfb      	ldrb	r3, [r7, #23]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d168      	bne.n	8009836 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	7d1b      	ldrb	r3, [r3, #20]
 8009768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800976c:	2b00      	cmp	r3, #0
 800976e:	d062      	beq.n	8009836 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	7d1b      	ldrb	r3, [r3, #20]
 8009774:	b25b      	sxtb	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	da15      	bge.n	80097a6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	7858      	ldrb	r0, [r3, #1]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a1a      	ldr	r2, [r3, #32]
 8009788:	2301      	movs	r3, #1
 800978a:	f7fd fe45 	bl	8007418 <disk_write>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d001      	beq.n	8009798 <f_sync+0x54>
 8009794:	2301      	movs	r3, #1
 8009796:	e04f      	b.n	8009838 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	7d1b      	ldrb	r3, [r3, #20]
 800979c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80097a6:	f7fd f89d 	bl	80068e4 <get_fattime>
 80097aa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b2:	4619      	mov	r1, r3
 80097b4:	4610      	mov	r0, r2
 80097b6:	f7fe f91d 	bl	80079f4 <move_window>
 80097ba:	4603      	mov	r3, r0
 80097bc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80097be:	7dfb      	ldrb	r3, [r7, #23]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d138      	bne.n	8009836 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c8:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	330b      	adds	r3, #11
 80097ce:	781a      	ldrb	r2, [r3, #0]
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	330b      	adds	r3, #11
 80097d4:	f042 0220 	orr.w	r2, r2, #32
 80097d8:	b2d2      	uxtb	r2, r2
 80097da:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6818      	ldr	r0, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	689b      	ldr	r3, [r3, #8]
 80097e4:	461a      	mov	r2, r3
 80097e6:	68f9      	ldr	r1, [r7, #12]
 80097e8:	f7fe fe2a 	bl	8008440 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	f103 021c 	add.w	r2, r3, #28
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	4619      	mov	r1, r3
 80097f8:	4610      	mov	r0, r2
 80097fa:	f7fd fea1 	bl	8007540 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3316      	adds	r3, #22
 8009802:	6939      	ldr	r1, [r7, #16]
 8009804:	4618      	mov	r0, r3
 8009806:	f7fd fe9b 	bl	8007540 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3312      	adds	r3, #18
 800980e:	2100      	movs	r1, #0
 8009810:	4618      	mov	r0, r3
 8009812:	f7fd fe7a 	bl	800750a <st_word>
					fs->wflag = 1;
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	2201      	movs	r2, #1
 800981a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	4618      	mov	r0, r3
 8009820:	f7fe f916 	bl	8007a50 <sync_fs>
 8009824:	4603      	mov	r3, r0
 8009826:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	7d1b      	ldrb	r3, [r3, #20]
 800982c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009830:	b2da      	uxtb	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009836:	7dfb      	ldrb	r3, [r7, #23]
}
 8009838:	4618      	mov	r0, r3
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009848:	6878      	ldr	r0, [r7, #4]
 800984a:	f7ff ff7b 	bl	8009744 <f_sync>
 800984e:	4603      	mov	r3, r0
 8009850:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009852:	7bfb      	ldrb	r3, [r7, #15]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d118      	bne.n	800988a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f107 0208 	add.w	r2, r7, #8
 800985e:	4611      	mov	r1, r2
 8009860:	4618      	mov	r0, r3
 8009862:	f7ff fa81 	bl	8008d68 <validate>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d10c      	bne.n	800988a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	691b      	ldr	r3, [r3, #16]
 8009874:	4618      	mov	r0, r3
 8009876:	f7fe f819 	bl	80078ac <dec_lock>
 800987a:	4603      	mov	r3, r0
 800987c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800987e:	7bfb      	ldrb	r3, [r7, #15]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d102      	bne.n	800988a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800988a:	7bfb      	ldrb	r3, [r7, #15]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}

08009894 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b092      	sub	sp, #72	; 0x48
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80098a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80098a4:	f107 030c 	add.w	r3, r7, #12
 80098a8:	2200      	movs	r2, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f7ff f810 	bl	80088d0 <find_volume>
 80098b0:	4603      	mov	r3, r0
 80098b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 80098b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f040 8099 	bne.w	80099f2 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80098c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	691a      	ldr	r2, [r3, #16]
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	695b      	ldr	r3, [r3, #20]
 80098ce:	3b02      	subs	r3, #2
 80098d0:	429a      	cmp	r2, r3
 80098d2:	d804      	bhi.n	80098de <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80098d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d6:	691a      	ldr	r2, [r3, #16]
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	601a      	str	r2, [r3, #0]
 80098dc:	e089      	b.n	80099f2 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80098e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e4:	781b      	ldrb	r3, [r3, #0]
 80098e6:	2b01      	cmp	r3, #1
 80098e8:	d128      	bne.n	800993c <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80098ea:	2302      	movs	r3, #2
 80098ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80098f2:	f107 0314 	add.w	r3, r7, #20
 80098f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80098f8:	4618      	mov	r0, r3
 80098fa:	f7fe f936 	bl	8007b6a <get_fat>
 80098fe:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009906:	d103      	bne.n	8009910 <f_getfree+0x7c>
 8009908:	2301      	movs	r3, #1
 800990a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800990e:	e063      	b.n	80099d8 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	2b01      	cmp	r3, #1
 8009914:	d103      	bne.n	800991e <f_getfree+0x8a>
 8009916:	2302      	movs	r3, #2
 8009918:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800991c:	e05c      	b.n	80099d8 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800991e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d102      	bne.n	800992a <f_getfree+0x96>
 8009924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009926:	3301      	adds	r3, #1
 8009928:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800992a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992c:	3301      	adds	r3, #1
 800992e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009932:	695b      	ldr	r3, [r3, #20]
 8009934:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009936:	429a      	cmp	r2, r3
 8009938:	d3db      	bcc.n	80098f2 <f_getfree+0x5e>
 800993a:	e04d      	b.n	80099d8 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800993c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993e:	695b      	ldr	r3, [r3, #20]
 8009940:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	637b      	str	r3, [r7, #52]	; 0x34
 800994c:	2300      	movs	r3, #0
 800994e:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8009950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009952:	2b00      	cmp	r3, #0
 8009954:	d113      	bne.n	800997e <f_getfree+0xea>
							res = move_window(fs, sect++);
 8009956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800995a:	1c5a      	adds	r2, r3, #1
 800995c:	63ba      	str	r2, [r7, #56]	; 0x38
 800995e:	4619      	mov	r1, r3
 8009960:	f7fe f848 	bl	80079f4 <move_window>
 8009964:	4603      	mov	r3, r0
 8009966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800996a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800996e:	2b00      	cmp	r3, #0
 8009970:	d131      	bne.n	80099d6 <f_getfree+0x142>
							p = fs->win;
 8009972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009974:	3330      	adds	r3, #48	; 0x30
 8009976:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8009978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800997e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d10f      	bne.n	80099a6 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8009986:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009988:	f7fd fd84 	bl	8007494 <ld_word>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d102      	bne.n	8009998 <f_getfree+0x104>
 8009992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009994:	3301      	adds	r3, #1
 8009996:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8009998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999a:	3302      	adds	r3, #2
 800999c:	633b      	str	r3, [r7, #48]	; 0x30
 800999e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099a0:	3b02      	subs	r3, #2
 80099a2:	637b      	str	r3, [r7, #52]	; 0x34
 80099a4:	e010      	b.n	80099c8 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80099a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a8:	f7fd fd8c 	bl	80074c4 <ld_dword>
 80099ac:	4603      	mov	r3, r0
 80099ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <f_getfree+0x128>
 80099b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099b8:	3301      	adds	r3, #1
 80099ba:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	3304      	adds	r3, #4
 80099c0:	633b      	str	r3, [r7, #48]	; 0x30
 80099c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099c4:	3b04      	subs	r3, #4
 80099c6:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 80099c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ca:	3b01      	subs	r3, #1
 80099cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80099ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1bd      	bne.n	8009950 <f_getfree+0xbc>
 80099d4:	e000      	b.n	80099d8 <f_getfree+0x144>
							if (res != FR_OK) break;
 80099d6:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099dc:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80099de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80099e2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80099e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e6:	791a      	ldrb	r2, [r3, #4]
 80099e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ea:	f042 0201 	orr.w	r2, r2, #1
 80099ee:	b2d2      	uxtb	r2, r2
 80099f0:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80099f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3748      	adds	r7, #72	; 0x48
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}

080099fe <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 80099fe:	b580      	push	{r7, lr}
 8009a00:	b088      	sub	sp, #32
 8009a02:	af00      	add	r7, sp, #0
 8009a04:	60f8      	str	r0, [r7, #12]
 8009a06:	60b9      	str	r1, [r7, #8]
 8009a08:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a12:	e01b      	b.n	8009a4c <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8009a14:	f107 0310 	add.w	r3, r7, #16
 8009a18:	f107 0114 	add.w	r1, r7, #20
 8009a1c:	2201      	movs	r2, #1
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f7ff fbdc 	bl	80091dc <f_read>
		if (rc != 1) break;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d116      	bne.n	8009a58 <f_gets+0x5a>
		c = s[0];
 8009a2a:	7d3b      	ldrb	r3, [r7, #20]
 8009a2c:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8009a2e:	7dfb      	ldrb	r3, [r7, #23]
 8009a30:	2b0d      	cmp	r3, #13
 8009a32:	d100      	bne.n	8009a36 <f_gets+0x38>
 8009a34:	e00a      	b.n	8009a4c <f_gets+0x4e>
		*p++ = c;
 8009a36:	69bb      	ldr	r3, [r7, #24]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	61ba      	str	r2, [r7, #24]
 8009a3c:	7dfa      	ldrb	r2, [r7, #23]
 8009a3e:	701a      	strb	r2, [r3, #0]
		n++;
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	3301      	adds	r3, #1
 8009a44:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	2b0a      	cmp	r3, #10
 8009a4a:	d007      	beq.n	8009a5c <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	3b01      	subs	r3, #1
 8009a50:	69fa      	ldr	r2, [r7, #28]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	dbde      	blt.n	8009a14 <f_gets+0x16>
 8009a56:	e002      	b.n	8009a5e <f_gets+0x60>
		if (rc != 1) break;
 8009a58:	bf00      	nop
 8009a5a:	e000      	b.n	8009a5e <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8009a5c:	bf00      	nop
	}
	*p = 0;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	2200      	movs	r2, #0
 8009a62:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <f_gets+0x70>
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	e000      	b.n	8009a70 <f_gets+0x72>
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3720      	adds	r7, #32
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b087      	sub	sp, #28
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	60f8      	str	r0, [r7, #12]
 8009a80:	60b9      	str	r1, [r7, #8]
 8009a82:	4613      	mov	r3, r2
 8009a84:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009a86:	2301      	movs	r3, #1
 8009a88:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009a90:	7a5b      	ldrb	r3, [r3, #9]
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d131      	bne.n	8009afc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009a98:	4b1c      	ldr	r3, [pc, #112]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009a9a:	7a5b      	ldrb	r3, [r3, #9]
 8009a9c:	b2db      	uxtb	r3, r3
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4b1a      	ldr	r3, [pc, #104]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009aa6:	4b19      	ldr	r3, [pc, #100]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009aa8:	7a5b      	ldrb	r3, [r3, #9]
 8009aaa:	b2db      	uxtb	r3, r3
 8009aac:	4a17      	ldr	r2, [pc, #92]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	68fa      	ldr	r2, [r7, #12]
 8009ab4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009ab6:	4b15      	ldr	r3, [pc, #84]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009ab8:	7a5b      	ldrb	r3, [r3, #9]
 8009aba:	b2db      	uxtb	r3, r3
 8009abc:	461a      	mov	r2, r3
 8009abe:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009ac0:	4413      	add	r3, r2
 8009ac2:	79fa      	ldrb	r2, [r7, #7]
 8009ac4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009ac6:	4b11      	ldr	r3, [pc, #68]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009ac8:	7a5b      	ldrb	r3, [r3, #9]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	1c5a      	adds	r2, r3, #1
 8009ace:	b2d1      	uxtb	r1, r2
 8009ad0:	4a0e      	ldr	r2, [pc, #56]	; (8009b0c <FATFS_LinkDriverEx+0x94>)
 8009ad2:	7251      	strb	r1, [r2, #9]
 8009ad4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009ad6:	7dbb      	ldrb	r3, [r7, #22]
 8009ad8:	3330      	adds	r3, #48	; 0x30
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	223a      	movs	r2, #58	; 0x3a
 8009ae6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	3302      	adds	r3, #2
 8009aec:	222f      	movs	r2, #47	; 0x2f
 8009aee:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	3303      	adds	r3, #3
 8009af4:	2200      	movs	r2, #0
 8009af6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009af8:	2300      	movs	r3, #0
 8009afa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009afc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	20000500 	.word	0x20000500

08009b10 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	6839      	ldr	r1, [r7, #0]
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7ff ffaa 	bl	8009a78 <FATFS_LinkDriverEx>
 8009b24:	4603      	mov	r3, r0
}
 8009b26:	4618      	mov	r0, r3
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
	...

08009b30 <__assert_func>:
 8009b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b32:	4614      	mov	r4, r2
 8009b34:	461a      	mov	r2, r3
 8009b36:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <__assert_func+0x2c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	68d8      	ldr	r0, [r3, #12]
 8009b3e:	b14c      	cbz	r4, 8009b54 <__assert_func+0x24>
 8009b40:	4b07      	ldr	r3, [pc, #28]	; (8009b60 <__assert_func+0x30>)
 8009b42:	9100      	str	r1, [sp, #0]
 8009b44:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b48:	4906      	ldr	r1, [pc, #24]	; (8009b64 <__assert_func+0x34>)
 8009b4a:	462b      	mov	r3, r5
 8009b4c:	f000 f814 	bl	8009b78 <fiprintf>
 8009b50:	f000 fcd4 	bl	800a4fc <abort>
 8009b54:	4b04      	ldr	r3, [pc, #16]	; (8009b68 <__assert_func+0x38>)
 8009b56:	461c      	mov	r4, r3
 8009b58:	e7f3      	b.n	8009b42 <__assert_func+0x12>
 8009b5a:	bf00      	nop
 8009b5c:	20000190 	.word	0x20000190
 8009b60:	0800b660 	.word	0x0800b660
 8009b64:	0800b66d 	.word	0x0800b66d
 8009b68:	0800b69b 	.word	0x0800b69b

08009b6c <__errno>:
 8009b6c:	4b01      	ldr	r3, [pc, #4]	; (8009b74 <__errno+0x8>)
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop
 8009b74:	20000190 	.word	0x20000190

08009b78 <fiprintf>:
 8009b78:	b40e      	push	{r1, r2, r3}
 8009b7a:	b503      	push	{r0, r1, lr}
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	ab03      	add	r3, sp, #12
 8009b80:	4805      	ldr	r0, [pc, #20]	; (8009b98 <fiprintf+0x20>)
 8009b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b86:	6800      	ldr	r0, [r0, #0]
 8009b88:	9301      	str	r3, [sp, #4]
 8009b8a:	f000 f86b 	bl	8009c64 <_vfiprintf_r>
 8009b8e:	b002      	add	sp, #8
 8009b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b94:	b003      	add	sp, #12
 8009b96:	4770      	bx	lr
 8009b98:	20000190 	.word	0x20000190

08009b9c <__libc_init_array>:
 8009b9c:	b570      	push	{r4, r5, r6, lr}
 8009b9e:	4d0d      	ldr	r5, [pc, #52]	; (8009bd4 <__libc_init_array+0x38>)
 8009ba0:	4c0d      	ldr	r4, [pc, #52]	; (8009bd8 <__libc_init_array+0x3c>)
 8009ba2:	1b64      	subs	r4, r4, r5
 8009ba4:	10a4      	asrs	r4, r4, #2
 8009ba6:	2600      	movs	r6, #0
 8009ba8:	42a6      	cmp	r6, r4
 8009baa:	d109      	bne.n	8009bc0 <__libc_init_array+0x24>
 8009bac:	4d0b      	ldr	r5, [pc, #44]	; (8009bdc <__libc_init_array+0x40>)
 8009bae:	4c0c      	ldr	r4, [pc, #48]	; (8009be0 <__libc_init_array+0x44>)
 8009bb0:	f001 fa64 	bl	800b07c <_init>
 8009bb4:	1b64      	subs	r4, r4, r5
 8009bb6:	10a4      	asrs	r4, r4, #2
 8009bb8:	2600      	movs	r6, #0
 8009bba:	42a6      	cmp	r6, r4
 8009bbc:	d105      	bne.n	8009bca <__libc_init_array+0x2e>
 8009bbe:	bd70      	pop	{r4, r5, r6, pc}
 8009bc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bc4:	4798      	blx	r3
 8009bc6:	3601      	adds	r6, #1
 8009bc8:	e7ee      	b.n	8009ba8 <__libc_init_array+0xc>
 8009bca:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bce:	4798      	blx	r3
 8009bd0:	3601      	adds	r6, #1
 8009bd2:	e7f2      	b.n	8009bba <__libc_init_array+0x1e>
 8009bd4:	0800b734 	.word	0x0800b734
 8009bd8:	0800b734 	.word	0x0800b734
 8009bdc:	0800b734 	.word	0x0800b734
 8009be0:	0800b738 	.word	0x0800b738

08009be4 <memcpy>:
 8009be4:	440a      	add	r2, r1
 8009be6:	4291      	cmp	r1, r2
 8009be8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bec:	d100      	bne.n	8009bf0 <memcpy+0xc>
 8009bee:	4770      	bx	lr
 8009bf0:	b510      	push	{r4, lr}
 8009bf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bfa:	4291      	cmp	r1, r2
 8009bfc:	d1f9      	bne.n	8009bf2 <memcpy+0xe>
 8009bfe:	bd10      	pop	{r4, pc}

08009c00 <memset>:
 8009c00:	4402      	add	r2, r0
 8009c02:	4603      	mov	r3, r0
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d100      	bne.n	8009c0a <memset+0xa>
 8009c08:	4770      	bx	lr
 8009c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009c0e:	e7f9      	b.n	8009c04 <memset+0x4>

08009c10 <__sfputc_r>:
 8009c10:	6893      	ldr	r3, [r2, #8]
 8009c12:	3b01      	subs	r3, #1
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	b410      	push	{r4}
 8009c18:	6093      	str	r3, [r2, #8]
 8009c1a:	da08      	bge.n	8009c2e <__sfputc_r+0x1e>
 8009c1c:	6994      	ldr	r4, [r2, #24]
 8009c1e:	42a3      	cmp	r3, r4
 8009c20:	db01      	blt.n	8009c26 <__sfputc_r+0x16>
 8009c22:	290a      	cmp	r1, #10
 8009c24:	d103      	bne.n	8009c2e <__sfputc_r+0x1e>
 8009c26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c2a:	f000 bba7 	b.w	800a37c <__swbuf_r>
 8009c2e:	6813      	ldr	r3, [r2, #0]
 8009c30:	1c58      	adds	r0, r3, #1
 8009c32:	6010      	str	r0, [r2, #0]
 8009c34:	7019      	strb	r1, [r3, #0]
 8009c36:	4608      	mov	r0, r1
 8009c38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <__sfputs_r>:
 8009c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c40:	4606      	mov	r6, r0
 8009c42:	460f      	mov	r7, r1
 8009c44:	4614      	mov	r4, r2
 8009c46:	18d5      	adds	r5, r2, r3
 8009c48:	42ac      	cmp	r4, r5
 8009c4a:	d101      	bne.n	8009c50 <__sfputs_r+0x12>
 8009c4c:	2000      	movs	r0, #0
 8009c4e:	e007      	b.n	8009c60 <__sfputs_r+0x22>
 8009c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c54:	463a      	mov	r2, r7
 8009c56:	4630      	mov	r0, r6
 8009c58:	f7ff ffda 	bl	8009c10 <__sfputc_r>
 8009c5c:	1c43      	adds	r3, r0, #1
 8009c5e:	d1f3      	bne.n	8009c48 <__sfputs_r+0xa>
 8009c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c64 <_vfiprintf_r>:
 8009c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c68:	460d      	mov	r5, r1
 8009c6a:	b09d      	sub	sp, #116	; 0x74
 8009c6c:	4614      	mov	r4, r2
 8009c6e:	4698      	mov	r8, r3
 8009c70:	4606      	mov	r6, r0
 8009c72:	b118      	cbz	r0, 8009c7c <_vfiprintf_r+0x18>
 8009c74:	6983      	ldr	r3, [r0, #24]
 8009c76:	b90b      	cbnz	r3, 8009c7c <_vfiprintf_r+0x18>
 8009c78:	f000 fd62 	bl	800a740 <__sinit>
 8009c7c:	4b89      	ldr	r3, [pc, #548]	; (8009ea4 <_vfiprintf_r+0x240>)
 8009c7e:	429d      	cmp	r5, r3
 8009c80:	d11b      	bne.n	8009cba <_vfiprintf_r+0x56>
 8009c82:	6875      	ldr	r5, [r6, #4]
 8009c84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c86:	07d9      	lsls	r1, r3, #31
 8009c88:	d405      	bmi.n	8009c96 <_vfiprintf_r+0x32>
 8009c8a:	89ab      	ldrh	r3, [r5, #12]
 8009c8c:	059a      	lsls	r2, r3, #22
 8009c8e:	d402      	bmi.n	8009c96 <_vfiprintf_r+0x32>
 8009c90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c92:	f000 fdf3 	bl	800a87c <__retarget_lock_acquire_recursive>
 8009c96:	89ab      	ldrh	r3, [r5, #12]
 8009c98:	071b      	lsls	r3, r3, #28
 8009c9a:	d501      	bpl.n	8009ca0 <_vfiprintf_r+0x3c>
 8009c9c:	692b      	ldr	r3, [r5, #16]
 8009c9e:	b9eb      	cbnz	r3, 8009cdc <_vfiprintf_r+0x78>
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f000 fbbc 	bl	800a420 <__swsetup_r>
 8009ca8:	b1c0      	cbz	r0, 8009cdc <_vfiprintf_r+0x78>
 8009caa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cac:	07dc      	lsls	r4, r3, #31
 8009cae:	d50e      	bpl.n	8009cce <_vfiprintf_r+0x6a>
 8009cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb4:	b01d      	add	sp, #116	; 0x74
 8009cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cba:	4b7b      	ldr	r3, [pc, #492]	; (8009ea8 <_vfiprintf_r+0x244>)
 8009cbc:	429d      	cmp	r5, r3
 8009cbe:	d101      	bne.n	8009cc4 <_vfiprintf_r+0x60>
 8009cc0:	68b5      	ldr	r5, [r6, #8]
 8009cc2:	e7df      	b.n	8009c84 <_vfiprintf_r+0x20>
 8009cc4:	4b79      	ldr	r3, [pc, #484]	; (8009eac <_vfiprintf_r+0x248>)
 8009cc6:	429d      	cmp	r5, r3
 8009cc8:	bf08      	it	eq
 8009cca:	68f5      	ldreq	r5, [r6, #12]
 8009ccc:	e7da      	b.n	8009c84 <_vfiprintf_r+0x20>
 8009cce:	89ab      	ldrh	r3, [r5, #12]
 8009cd0:	0598      	lsls	r0, r3, #22
 8009cd2:	d4ed      	bmi.n	8009cb0 <_vfiprintf_r+0x4c>
 8009cd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cd6:	f000 fdd2 	bl	800a87e <__retarget_lock_release_recursive>
 8009cda:	e7e9      	b.n	8009cb0 <_vfiprintf_r+0x4c>
 8009cdc:	2300      	movs	r3, #0
 8009cde:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cea:	2330      	movs	r3, #48	; 0x30
 8009cec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009eb0 <_vfiprintf_r+0x24c>
 8009cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cf4:	f04f 0901 	mov.w	r9, #1
 8009cf8:	4623      	mov	r3, r4
 8009cfa:	469a      	mov	sl, r3
 8009cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d00:	b10a      	cbz	r2, 8009d06 <_vfiprintf_r+0xa2>
 8009d02:	2a25      	cmp	r2, #37	; 0x25
 8009d04:	d1f9      	bne.n	8009cfa <_vfiprintf_r+0x96>
 8009d06:	ebba 0b04 	subs.w	fp, sl, r4
 8009d0a:	d00b      	beq.n	8009d24 <_vfiprintf_r+0xc0>
 8009d0c:	465b      	mov	r3, fp
 8009d0e:	4622      	mov	r2, r4
 8009d10:	4629      	mov	r1, r5
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ff93 	bl	8009c3e <__sfputs_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f000 80aa 	beq.w	8009e72 <_vfiprintf_r+0x20e>
 8009d1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d20:	445a      	add	r2, fp
 8009d22:	9209      	str	r2, [sp, #36]	; 0x24
 8009d24:	f89a 3000 	ldrb.w	r3, [sl]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f000 80a2 	beq.w	8009e72 <_vfiprintf_r+0x20e>
 8009d2e:	2300      	movs	r3, #0
 8009d30:	f04f 32ff 	mov.w	r2, #4294967295
 8009d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d38:	f10a 0a01 	add.w	sl, sl, #1
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	9307      	str	r3, [sp, #28]
 8009d40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d44:	931a      	str	r3, [sp, #104]	; 0x68
 8009d46:	4654      	mov	r4, sl
 8009d48:	2205      	movs	r2, #5
 8009d4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d4e:	4858      	ldr	r0, [pc, #352]	; (8009eb0 <_vfiprintf_r+0x24c>)
 8009d50:	f7f6 fa46 	bl	80001e0 <memchr>
 8009d54:	9a04      	ldr	r2, [sp, #16]
 8009d56:	b9d8      	cbnz	r0, 8009d90 <_vfiprintf_r+0x12c>
 8009d58:	06d1      	lsls	r1, r2, #27
 8009d5a:	bf44      	itt	mi
 8009d5c:	2320      	movmi	r3, #32
 8009d5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d62:	0713      	lsls	r3, r2, #28
 8009d64:	bf44      	itt	mi
 8009d66:	232b      	movmi	r3, #43	; 0x2b
 8009d68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d6c:	f89a 3000 	ldrb.w	r3, [sl]
 8009d70:	2b2a      	cmp	r3, #42	; 0x2a
 8009d72:	d015      	beq.n	8009da0 <_vfiprintf_r+0x13c>
 8009d74:	9a07      	ldr	r2, [sp, #28]
 8009d76:	4654      	mov	r4, sl
 8009d78:	2000      	movs	r0, #0
 8009d7a:	f04f 0c0a 	mov.w	ip, #10
 8009d7e:	4621      	mov	r1, r4
 8009d80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d84:	3b30      	subs	r3, #48	; 0x30
 8009d86:	2b09      	cmp	r3, #9
 8009d88:	d94e      	bls.n	8009e28 <_vfiprintf_r+0x1c4>
 8009d8a:	b1b0      	cbz	r0, 8009dba <_vfiprintf_r+0x156>
 8009d8c:	9207      	str	r2, [sp, #28]
 8009d8e:	e014      	b.n	8009dba <_vfiprintf_r+0x156>
 8009d90:	eba0 0308 	sub.w	r3, r0, r8
 8009d94:	fa09 f303 	lsl.w	r3, r9, r3
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	9304      	str	r3, [sp, #16]
 8009d9c:	46a2      	mov	sl, r4
 8009d9e:	e7d2      	b.n	8009d46 <_vfiprintf_r+0xe2>
 8009da0:	9b03      	ldr	r3, [sp, #12]
 8009da2:	1d19      	adds	r1, r3, #4
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	9103      	str	r1, [sp, #12]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	bfbb      	ittet	lt
 8009dac:	425b      	neglt	r3, r3
 8009dae:	f042 0202 	orrlt.w	r2, r2, #2
 8009db2:	9307      	strge	r3, [sp, #28]
 8009db4:	9307      	strlt	r3, [sp, #28]
 8009db6:	bfb8      	it	lt
 8009db8:	9204      	strlt	r2, [sp, #16]
 8009dba:	7823      	ldrb	r3, [r4, #0]
 8009dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8009dbe:	d10c      	bne.n	8009dda <_vfiprintf_r+0x176>
 8009dc0:	7863      	ldrb	r3, [r4, #1]
 8009dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc4:	d135      	bne.n	8009e32 <_vfiprintf_r+0x1ce>
 8009dc6:	9b03      	ldr	r3, [sp, #12]
 8009dc8:	1d1a      	adds	r2, r3, #4
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	9203      	str	r2, [sp, #12]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	bfb8      	it	lt
 8009dd2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dd6:	3402      	adds	r4, #2
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009ec0 <_vfiprintf_r+0x25c>
 8009dde:	7821      	ldrb	r1, [r4, #0]
 8009de0:	2203      	movs	r2, #3
 8009de2:	4650      	mov	r0, sl
 8009de4:	f7f6 f9fc 	bl	80001e0 <memchr>
 8009de8:	b140      	cbz	r0, 8009dfc <_vfiprintf_r+0x198>
 8009dea:	2340      	movs	r3, #64	; 0x40
 8009dec:	eba0 000a 	sub.w	r0, r0, sl
 8009df0:	fa03 f000 	lsl.w	r0, r3, r0
 8009df4:	9b04      	ldr	r3, [sp, #16]
 8009df6:	4303      	orrs	r3, r0
 8009df8:	3401      	adds	r4, #1
 8009dfa:	9304      	str	r3, [sp, #16]
 8009dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e00:	482c      	ldr	r0, [pc, #176]	; (8009eb4 <_vfiprintf_r+0x250>)
 8009e02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e06:	2206      	movs	r2, #6
 8009e08:	f7f6 f9ea 	bl	80001e0 <memchr>
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d03f      	beq.n	8009e90 <_vfiprintf_r+0x22c>
 8009e10:	4b29      	ldr	r3, [pc, #164]	; (8009eb8 <_vfiprintf_r+0x254>)
 8009e12:	bb1b      	cbnz	r3, 8009e5c <_vfiprintf_r+0x1f8>
 8009e14:	9b03      	ldr	r3, [sp, #12]
 8009e16:	3307      	adds	r3, #7
 8009e18:	f023 0307 	bic.w	r3, r3, #7
 8009e1c:	3308      	adds	r3, #8
 8009e1e:	9303      	str	r3, [sp, #12]
 8009e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e22:	443b      	add	r3, r7
 8009e24:	9309      	str	r3, [sp, #36]	; 0x24
 8009e26:	e767      	b.n	8009cf8 <_vfiprintf_r+0x94>
 8009e28:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	2001      	movs	r0, #1
 8009e30:	e7a5      	b.n	8009d7e <_vfiprintf_r+0x11a>
 8009e32:	2300      	movs	r3, #0
 8009e34:	3401      	adds	r4, #1
 8009e36:	9305      	str	r3, [sp, #20]
 8009e38:	4619      	mov	r1, r3
 8009e3a:	f04f 0c0a 	mov.w	ip, #10
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e44:	3a30      	subs	r2, #48	; 0x30
 8009e46:	2a09      	cmp	r2, #9
 8009e48:	d903      	bls.n	8009e52 <_vfiprintf_r+0x1ee>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d0c5      	beq.n	8009dda <_vfiprintf_r+0x176>
 8009e4e:	9105      	str	r1, [sp, #20]
 8009e50:	e7c3      	b.n	8009dda <_vfiprintf_r+0x176>
 8009e52:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e56:	4604      	mov	r4, r0
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7f0      	b.n	8009e3e <_vfiprintf_r+0x1da>
 8009e5c:	ab03      	add	r3, sp, #12
 8009e5e:	9300      	str	r3, [sp, #0]
 8009e60:	462a      	mov	r2, r5
 8009e62:	4b16      	ldr	r3, [pc, #88]	; (8009ebc <_vfiprintf_r+0x258>)
 8009e64:	a904      	add	r1, sp, #16
 8009e66:	4630      	mov	r0, r6
 8009e68:	f3af 8000 	nop.w
 8009e6c:	4607      	mov	r7, r0
 8009e6e:	1c78      	adds	r0, r7, #1
 8009e70:	d1d6      	bne.n	8009e20 <_vfiprintf_r+0x1bc>
 8009e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e74:	07d9      	lsls	r1, r3, #31
 8009e76:	d405      	bmi.n	8009e84 <_vfiprintf_r+0x220>
 8009e78:	89ab      	ldrh	r3, [r5, #12]
 8009e7a:	059a      	lsls	r2, r3, #22
 8009e7c:	d402      	bmi.n	8009e84 <_vfiprintf_r+0x220>
 8009e7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e80:	f000 fcfd 	bl	800a87e <__retarget_lock_release_recursive>
 8009e84:	89ab      	ldrh	r3, [r5, #12]
 8009e86:	065b      	lsls	r3, r3, #25
 8009e88:	f53f af12 	bmi.w	8009cb0 <_vfiprintf_r+0x4c>
 8009e8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e8e:	e711      	b.n	8009cb4 <_vfiprintf_r+0x50>
 8009e90:	ab03      	add	r3, sp, #12
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	462a      	mov	r2, r5
 8009e96:	4b09      	ldr	r3, [pc, #36]	; (8009ebc <_vfiprintf_r+0x258>)
 8009e98:	a904      	add	r1, sp, #16
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	f000 f880 	bl	8009fa0 <_printf_i>
 8009ea0:	e7e4      	b.n	8009e6c <_vfiprintf_r+0x208>
 8009ea2:	bf00      	nop
 8009ea4:	0800b6f4 	.word	0x0800b6f4
 8009ea8:	0800b714 	.word	0x0800b714
 8009eac:	0800b6d4 	.word	0x0800b6d4
 8009eb0:	0800b6a0 	.word	0x0800b6a0
 8009eb4:	0800b6aa 	.word	0x0800b6aa
 8009eb8:	00000000 	.word	0x00000000
 8009ebc:	08009c3f 	.word	0x08009c3f
 8009ec0:	0800b6a6 	.word	0x0800b6a6

08009ec4 <_printf_common>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	4616      	mov	r6, r2
 8009eca:	4699      	mov	r9, r3
 8009ecc:	688a      	ldr	r2, [r1, #8]
 8009ece:	690b      	ldr	r3, [r1, #16]
 8009ed0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	bfb8      	it	lt
 8009ed8:	4613      	movlt	r3, r2
 8009eda:	6033      	str	r3, [r6, #0]
 8009edc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	b10a      	cbz	r2, 8009eea <_printf_common+0x26>
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	6033      	str	r3, [r6, #0]
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	0699      	lsls	r1, r3, #26
 8009eee:	bf42      	ittt	mi
 8009ef0:	6833      	ldrmi	r3, [r6, #0]
 8009ef2:	3302      	addmi	r3, #2
 8009ef4:	6033      	strmi	r3, [r6, #0]
 8009ef6:	6825      	ldr	r5, [r4, #0]
 8009ef8:	f015 0506 	ands.w	r5, r5, #6
 8009efc:	d106      	bne.n	8009f0c <_printf_common+0x48>
 8009efe:	f104 0a19 	add.w	sl, r4, #25
 8009f02:	68e3      	ldr	r3, [r4, #12]
 8009f04:	6832      	ldr	r2, [r6, #0]
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	42ab      	cmp	r3, r5
 8009f0a:	dc26      	bgt.n	8009f5a <_printf_common+0x96>
 8009f0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f10:	1e13      	subs	r3, r2, #0
 8009f12:	6822      	ldr	r2, [r4, #0]
 8009f14:	bf18      	it	ne
 8009f16:	2301      	movne	r3, #1
 8009f18:	0692      	lsls	r2, r2, #26
 8009f1a:	d42b      	bmi.n	8009f74 <_printf_common+0xb0>
 8009f1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f20:	4649      	mov	r1, r9
 8009f22:	4638      	mov	r0, r7
 8009f24:	47c0      	blx	r8
 8009f26:	3001      	adds	r0, #1
 8009f28:	d01e      	beq.n	8009f68 <_printf_common+0xa4>
 8009f2a:	6823      	ldr	r3, [r4, #0]
 8009f2c:	68e5      	ldr	r5, [r4, #12]
 8009f2e:	6832      	ldr	r2, [r6, #0]
 8009f30:	f003 0306 	and.w	r3, r3, #6
 8009f34:	2b04      	cmp	r3, #4
 8009f36:	bf08      	it	eq
 8009f38:	1aad      	subeq	r5, r5, r2
 8009f3a:	68a3      	ldr	r3, [r4, #8]
 8009f3c:	6922      	ldr	r2, [r4, #16]
 8009f3e:	bf0c      	ite	eq
 8009f40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f44:	2500      	movne	r5, #0
 8009f46:	4293      	cmp	r3, r2
 8009f48:	bfc4      	itt	gt
 8009f4a:	1a9b      	subgt	r3, r3, r2
 8009f4c:	18ed      	addgt	r5, r5, r3
 8009f4e:	2600      	movs	r6, #0
 8009f50:	341a      	adds	r4, #26
 8009f52:	42b5      	cmp	r5, r6
 8009f54:	d11a      	bne.n	8009f8c <_printf_common+0xc8>
 8009f56:	2000      	movs	r0, #0
 8009f58:	e008      	b.n	8009f6c <_printf_common+0xa8>
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	4652      	mov	r2, sl
 8009f5e:	4649      	mov	r1, r9
 8009f60:	4638      	mov	r0, r7
 8009f62:	47c0      	blx	r8
 8009f64:	3001      	adds	r0, #1
 8009f66:	d103      	bne.n	8009f70 <_printf_common+0xac>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f70:	3501      	adds	r5, #1
 8009f72:	e7c6      	b.n	8009f02 <_printf_common+0x3e>
 8009f74:	18e1      	adds	r1, r4, r3
 8009f76:	1c5a      	adds	r2, r3, #1
 8009f78:	2030      	movs	r0, #48	; 0x30
 8009f7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f7e:	4422      	add	r2, r4
 8009f80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f88:	3302      	adds	r3, #2
 8009f8a:	e7c7      	b.n	8009f1c <_printf_common+0x58>
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	4622      	mov	r2, r4
 8009f90:	4649      	mov	r1, r9
 8009f92:	4638      	mov	r0, r7
 8009f94:	47c0      	blx	r8
 8009f96:	3001      	adds	r0, #1
 8009f98:	d0e6      	beq.n	8009f68 <_printf_common+0xa4>
 8009f9a:	3601      	adds	r6, #1
 8009f9c:	e7d9      	b.n	8009f52 <_printf_common+0x8e>
	...

08009fa0 <_printf_i>:
 8009fa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fa4:	7e0f      	ldrb	r7, [r1, #24]
 8009fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fa8:	2f78      	cmp	r7, #120	; 0x78
 8009faa:	4691      	mov	r9, r2
 8009fac:	4680      	mov	r8, r0
 8009fae:	460c      	mov	r4, r1
 8009fb0:	469a      	mov	sl, r3
 8009fb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fb6:	d807      	bhi.n	8009fc8 <_printf_i+0x28>
 8009fb8:	2f62      	cmp	r7, #98	; 0x62
 8009fba:	d80a      	bhi.n	8009fd2 <_printf_i+0x32>
 8009fbc:	2f00      	cmp	r7, #0
 8009fbe:	f000 80d8 	beq.w	800a172 <_printf_i+0x1d2>
 8009fc2:	2f58      	cmp	r7, #88	; 0x58
 8009fc4:	f000 80a3 	beq.w	800a10e <_printf_i+0x16e>
 8009fc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fd0:	e03a      	b.n	800a048 <_printf_i+0xa8>
 8009fd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fd6:	2b15      	cmp	r3, #21
 8009fd8:	d8f6      	bhi.n	8009fc8 <_printf_i+0x28>
 8009fda:	a101      	add	r1, pc, #4	; (adr r1, 8009fe0 <_printf_i+0x40>)
 8009fdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fe0:	0800a039 	.word	0x0800a039
 8009fe4:	0800a04d 	.word	0x0800a04d
 8009fe8:	08009fc9 	.word	0x08009fc9
 8009fec:	08009fc9 	.word	0x08009fc9
 8009ff0:	08009fc9 	.word	0x08009fc9
 8009ff4:	08009fc9 	.word	0x08009fc9
 8009ff8:	0800a04d 	.word	0x0800a04d
 8009ffc:	08009fc9 	.word	0x08009fc9
 800a000:	08009fc9 	.word	0x08009fc9
 800a004:	08009fc9 	.word	0x08009fc9
 800a008:	08009fc9 	.word	0x08009fc9
 800a00c:	0800a159 	.word	0x0800a159
 800a010:	0800a07d 	.word	0x0800a07d
 800a014:	0800a13b 	.word	0x0800a13b
 800a018:	08009fc9 	.word	0x08009fc9
 800a01c:	08009fc9 	.word	0x08009fc9
 800a020:	0800a17b 	.word	0x0800a17b
 800a024:	08009fc9 	.word	0x08009fc9
 800a028:	0800a07d 	.word	0x0800a07d
 800a02c:	08009fc9 	.word	0x08009fc9
 800a030:	08009fc9 	.word	0x08009fc9
 800a034:	0800a143 	.word	0x0800a143
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	1d1a      	adds	r2, r3, #4
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	602a      	str	r2, [r5, #0]
 800a040:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a044:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a048:	2301      	movs	r3, #1
 800a04a:	e0a3      	b.n	800a194 <_printf_i+0x1f4>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	6829      	ldr	r1, [r5, #0]
 800a050:	0606      	lsls	r6, r0, #24
 800a052:	f101 0304 	add.w	r3, r1, #4
 800a056:	d50a      	bpl.n	800a06e <_printf_i+0xce>
 800a058:	680e      	ldr	r6, [r1, #0]
 800a05a:	602b      	str	r3, [r5, #0]
 800a05c:	2e00      	cmp	r6, #0
 800a05e:	da03      	bge.n	800a068 <_printf_i+0xc8>
 800a060:	232d      	movs	r3, #45	; 0x2d
 800a062:	4276      	negs	r6, r6
 800a064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a068:	485e      	ldr	r0, [pc, #376]	; (800a1e4 <_printf_i+0x244>)
 800a06a:	230a      	movs	r3, #10
 800a06c:	e019      	b.n	800a0a2 <_printf_i+0x102>
 800a06e:	680e      	ldr	r6, [r1, #0]
 800a070:	602b      	str	r3, [r5, #0]
 800a072:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a076:	bf18      	it	ne
 800a078:	b236      	sxthne	r6, r6
 800a07a:	e7ef      	b.n	800a05c <_printf_i+0xbc>
 800a07c:	682b      	ldr	r3, [r5, #0]
 800a07e:	6820      	ldr	r0, [r4, #0]
 800a080:	1d19      	adds	r1, r3, #4
 800a082:	6029      	str	r1, [r5, #0]
 800a084:	0601      	lsls	r1, r0, #24
 800a086:	d501      	bpl.n	800a08c <_printf_i+0xec>
 800a088:	681e      	ldr	r6, [r3, #0]
 800a08a:	e002      	b.n	800a092 <_printf_i+0xf2>
 800a08c:	0646      	lsls	r6, r0, #25
 800a08e:	d5fb      	bpl.n	800a088 <_printf_i+0xe8>
 800a090:	881e      	ldrh	r6, [r3, #0]
 800a092:	4854      	ldr	r0, [pc, #336]	; (800a1e4 <_printf_i+0x244>)
 800a094:	2f6f      	cmp	r7, #111	; 0x6f
 800a096:	bf0c      	ite	eq
 800a098:	2308      	moveq	r3, #8
 800a09a:	230a      	movne	r3, #10
 800a09c:	2100      	movs	r1, #0
 800a09e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0a2:	6865      	ldr	r5, [r4, #4]
 800a0a4:	60a5      	str	r5, [r4, #8]
 800a0a6:	2d00      	cmp	r5, #0
 800a0a8:	bfa2      	ittt	ge
 800a0aa:	6821      	ldrge	r1, [r4, #0]
 800a0ac:	f021 0104 	bicge.w	r1, r1, #4
 800a0b0:	6021      	strge	r1, [r4, #0]
 800a0b2:	b90e      	cbnz	r6, 800a0b8 <_printf_i+0x118>
 800a0b4:	2d00      	cmp	r5, #0
 800a0b6:	d04d      	beq.n	800a154 <_printf_i+0x1b4>
 800a0b8:	4615      	mov	r5, r2
 800a0ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0be:	fb03 6711 	mls	r7, r3, r1, r6
 800a0c2:	5dc7      	ldrb	r7, [r0, r7]
 800a0c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0c8:	4637      	mov	r7, r6
 800a0ca:	42bb      	cmp	r3, r7
 800a0cc:	460e      	mov	r6, r1
 800a0ce:	d9f4      	bls.n	800a0ba <_printf_i+0x11a>
 800a0d0:	2b08      	cmp	r3, #8
 800a0d2:	d10b      	bne.n	800a0ec <_printf_i+0x14c>
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	07de      	lsls	r6, r3, #31
 800a0d8:	d508      	bpl.n	800a0ec <_printf_i+0x14c>
 800a0da:	6923      	ldr	r3, [r4, #16]
 800a0dc:	6861      	ldr	r1, [r4, #4]
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	bfde      	ittt	le
 800a0e2:	2330      	movle	r3, #48	; 0x30
 800a0e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0ec:	1b52      	subs	r2, r2, r5
 800a0ee:	6122      	str	r2, [r4, #16]
 800a0f0:	f8cd a000 	str.w	sl, [sp]
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	aa03      	add	r2, sp, #12
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4640      	mov	r0, r8
 800a0fc:	f7ff fee2 	bl	8009ec4 <_printf_common>
 800a100:	3001      	adds	r0, #1
 800a102:	d14c      	bne.n	800a19e <_printf_i+0x1fe>
 800a104:	f04f 30ff 	mov.w	r0, #4294967295
 800a108:	b004      	add	sp, #16
 800a10a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10e:	4835      	ldr	r0, [pc, #212]	; (800a1e4 <_printf_i+0x244>)
 800a110:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a114:	6829      	ldr	r1, [r5, #0]
 800a116:	6823      	ldr	r3, [r4, #0]
 800a118:	f851 6b04 	ldr.w	r6, [r1], #4
 800a11c:	6029      	str	r1, [r5, #0]
 800a11e:	061d      	lsls	r5, r3, #24
 800a120:	d514      	bpl.n	800a14c <_printf_i+0x1ac>
 800a122:	07df      	lsls	r7, r3, #31
 800a124:	bf44      	itt	mi
 800a126:	f043 0320 	orrmi.w	r3, r3, #32
 800a12a:	6023      	strmi	r3, [r4, #0]
 800a12c:	b91e      	cbnz	r6, 800a136 <_printf_i+0x196>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	f023 0320 	bic.w	r3, r3, #32
 800a134:	6023      	str	r3, [r4, #0]
 800a136:	2310      	movs	r3, #16
 800a138:	e7b0      	b.n	800a09c <_printf_i+0xfc>
 800a13a:	6823      	ldr	r3, [r4, #0]
 800a13c:	f043 0320 	orr.w	r3, r3, #32
 800a140:	6023      	str	r3, [r4, #0]
 800a142:	2378      	movs	r3, #120	; 0x78
 800a144:	4828      	ldr	r0, [pc, #160]	; (800a1e8 <_printf_i+0x248>)
 800a146:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a14a:	e7e3      	b.n	800a114 <_printf_i+0x174>
 800a14c:	0659      	lsls	r1, r3, #25
 800a14e:	bf48      	it	mi
 800a150:	b2b6      	uxthmi	r6, r6
 800a152:	e7e6      	b.n	800a122 <_printf_i+0x182>
 800a154:	4615      	mov	r5, r2
 800a156:	e7bb      	b.n	800a0d0 <_printf_i+0x130>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	6826      	ldr	r6, [r4, #0]
 800a15c:	6961      	ldr	r1, [r4, #20]
 800a15e:	1d18      	adds	r0, r3, #4
 800a160:	6028      	str	r0, [r5, #0]
 800a162:	0635      	lsls	r5, r6, #24
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	d501      	bpl.n	800a16c <_printf_i+0x1cc>
 800a168:	6019      	str	r1, [r3, #0]
 800a16a:	e002      	b.n	800a172 <_printf_i+0x1d2>
 800a16c:	0670      	lsls	r0, r6, #25
 800a16e:	d5fb      	bpl.n	800a168 <_printf_i+0x1c8>
 800a170:	8019      	strh	r1, [r3, #0]
 800a172:	2300      	movs	r3, #0
 800a174:	6123      	str	r3, [r4, #16]
 800a176:	4615      	mov	r5, r2
 800a178:	e7ba      	b.n	800a0f0 <_printf_i+0x150>
 800a17a:	682b      	ldr	r3, [r5, #0]
 800a17c:	1d1a      	adds	r2, r3, #4
 800a17e:	602a      	str	r2, [r5, #0]
 800a180:	681d      	ldr	r5, [r3, #0]
 800a182:	6862      	ldr	r2, [r4, #4]
 800a184:	2100      	movs	r1, #0
 800a186:	4628      	mov	r0, r5
 800a188:	f7f6 f82a 	bl	80001e0 <memchr>
 800a18c:	b108      	cbz	r0, 800a192 <_printf_i+0x1f2>
 800a18e:	1b40      	subs	r0, r0, r5
 800a190:	6060      	str	r0, [r4, #4]
 800a192:	6863      	ldr	r3, [r4, #4]
 800a194:	6123      	str	r3, [r4, #16]
 800a196:	2300      	movs	r3, #0
 800a198:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a19c:	e7a8      	b.n	800a0f0 <_printf_i+0x150>
 800a19e:	6923      	ldr	r3, [r4, #16]
 800a1a0:	462a      	mov	r2, r5
 800a1a2:	4649      	mov	r1, r9
 800a1a4:	4640      	mov	r0, r8
 800a1a6:	47d0      	blx	sl
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d0ab      	beq.n	800a104 <_printf_i+0x164>
 800a1ac:	6823      	ldr	r3, [r4, #0]
 800a1ae:	079b      	lsls	r3, r3, #30
 800a1b0:	d413      	bmi.n	800a1da <_printf_i+0x23a>
 800a1b2:	68e0      	ldr	r0, [r4, #12]
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	4298      	cmp	r0, r3
 800a1b8:	bfb8      	it	lt
 800a1ba:	4618      	movlt	r0, r3
 800a1bc:	e7a4      	b.n	800a108 <_printf_i+0x168>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	4632      	mov	r2, r6
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	4640      	mov	r0, r8
 800a1c6:	47d0      	blx	sl
 800a1c8:	3001      	adds	r0, #1
 800a1ca:	d09b      	beq.n	800a104 <_printf_i+0x164>
 800a1cc:	3501      	adds	r5, #1
 800a1ce:	68e3      	ldr	r3, [r4, #12]
 800a1d0:	9903      	ldr	r1, [sp, #12]
 800a1d2:	1a5b      	subs	r3, r3, r1
 800a1d4:	42ab      	cmp	r3, r5
 800a1d6:	dcf2      	bgt.n	800a1be <_printf_i+0x21e>
 800a1d8:	e7eb      	b.n	800a1b2 <_printf_i+0x212>
 800a1da:	2500      	movs	r5, #0
 800a1dc:	f104 0619 	add.w	r6, r4, #25
 800a1e0:	e7f5      	b.n	800a1ce <_printf_i+0x22e>
 800a1e2:	bf00      	nop
 800a1e4:	0800b6b1 	.word	0x0800b6b1
 800a1e8:	0800b6c2 	.word	0x0800b6c2

0800a1ec <iprintf>:
 800a1ec:	b40f      	push	{r0, r1, r2, r3}
 800a1ee:	4b0a      	ldr	r3, [pc, #40]	; (800a218 <iprintf+0x2c>)
 800a1f0:	b513      	push	{r0, r1, r4, lr}
 800a1f2:	681c      	ldr	r4, [r3, #0]
 800a1f4:	b124      	cbz	r4, 800a200 <iprintf+0x14>
 800a1f6:	69a3      	ldr	r3, [r4, #24]
 800a1f8:	b913      	cbnz	r3, 800a200 <iprintf+0x14>
 800a1fa:	4620      	mov	r0, r4
 800a1fc:	f000 faa0 	bl	800a740 <__sinit>
 800a200:	ab05      	add	r3, sp, #20
 800a202:	9a04      	ldr	r2, [sp, #16]
 800a204:	68a1      	ldr	r1, [r4, #8]
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	4620      	mov	r0, r4
 800a20a:	f7ff fd2b 	bl	8009c64 <_vfiprintf_r>
 800a20e:	b002      	add	sp, #8
 800a210:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a214:	b004      	add	sp, #16
 800a216:	4770      	bx	lr
 800a218:	20000190 	.word	0x20000190

0800a21c <_puts_r>:
 800a21c:	b570      	push	{r4, r5, r6, lr}
 800a21e:	460e      	mov	r6, r1
 800a220:	4605      	mov	r5, r0
 800a222:	b118      	cbz	r0, 800a22c <_puts_r+0x10>
 800a224:	6983      	ldr	r3, [r0, #24]
 800a226:	b90b      	cbnz	r3, 800a22c <_puts_r+0x10>
 800a228:	f000 fa8a 	bl	800a740 <__sinit>
 800a22c:	69ab      	ldr	r3, [r5, #24]
 800a22e:	68ac      	ldr	r4, [r5, #8]
 800a230:	b913      	cbnz	r3, 800a238 <_puts_r+0x1c>
 800a232:	4628      	mov	r0, r5
 800a234:	f000 fa84 	bl	800a740 <__sinit>
 800a238:	4b2c      	ldr	r3, [pc, #176]	; (800a2ec <_puts_r+0xd0>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	d120      	bne.n	800a280 <_puts_r+0x64>
 800a23e:	686c      	ldr	r4, [r5, #4]
 800a240:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a242:	07db      	lsls	r3, r3, #31
 800a244:	d405      	bmi.n	800a252 <_puts_r+0x36>
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	0598      	lsls	r0, r3, #22
 800a24a:	d402      	bmi.n	800a252 <_puts_r+0x36>
 800a24c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a24e:	f000 fb15 	bl	800a87c <__retarget_lock_acquire_recursive>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	0719      	lsls	r1, r3, #28
 800a256:	d51d      	bpl.n	800a294 <_puts_r+0x78>
 800a258:	6923      	ldr	r3, [r4, #16]
 800a25a:	b1db      	cbz	r3, 800a294 <_puts_r+0x78>
 800a25c:	3e01      	subs	r6, #1
 800a25e:	68a3      	ldr	r3, [r4, #8]
 800a260:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a264:	3b01      	subs	r3, #1
 800a266:	60a3      	str	r3, [r4, #8]
 800a268:	bb39      	cbnz	r1, 800a2ba <_puts_r+0x9e>
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	da38      	bge.n	800a2e0 <_puts_r+0xc4>
 800a26e:	4622      	mov	r2, r4
 800a270:	210a      	movs	r1, #10
 800a272:	4628      	mov	r0, r5
 800a274:	f000 f882 	bl	800a37c <__swbuf_r>
 800a278:	3001      	adds	r0, #1
 800a27a:	d011      	beq.n	800a2a0 <_puts_r+0x84>
 800a27c:	250a      	movs	r5, #10
 800a27e:	e011      	b.n	800a2a4 <_puts_r+0x88>
 800a280:	4b1b      	ldr	r3, [pc, #108]	; (800a2f0 <_puts_r+0xd4>)
 800a282:	429c      	cmp	r4, r3
 800a284:	d101      	bne.n	800a28a <_puts_r+0x6e>
 800a286:	68ac      	ldr	r4, [r5, #8]
 800a288:	e7da      	b.n	800a240 <_puts_r+0x24>
 800a28a:	4b1a      	ldr	r3, [pc, #104]	; (800a2f4 <_puts_r+0xd8>)
 800a28c:	429c      	cmp	r4, r3
 800a28e:	bf08      	it	eq
 800a290:	68ec      	ldreq	r4, [r5, #12]
 800a292:	e7d5      	b.n	800a240 <_puts_r+0x24>
 800a294:	4621      	mov	r1, r4
 800a296:	4628      	mov	r0, r5
 800a298:	f000 f8c2 	bl	800a420 <__swsetup_r>
 800a29c:	2800      	cmp	r0, #0
 800a29e:	d0dd      	beq.n	800a25c <_puts_r+0x40>
 800a2a0:	f04f 35ff 	mov.w	r5, #4294967295
 800a2a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a2a6:	07da      	lsls	r2, r3, #31
 800a2a8:	d405      	bmi.n	800a2b6 <_puts_r+0x9a>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	059b      	lsls	r3, r3, #22
 800a2ae:	d402      	bmi.n	800a2b6 <_puts_r+0x9a>
 800a2b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2b2:	f000 fae4 	bl	800a87e <__retarget_lock_release_recursive>
 800a2b6:	4628      	mov	r0, r5
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	da04      	bge.n	800a2c8 <_puts_r+0xac>
 800a2be:	69a2      	ldr	r2, [r4, #24]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	dc06      	bgt.n	800a2d2 <_puts_r+0xb6>
 800a2c4:	290a      	cmp	r1, #10
 800a2c6:	d004      	beq.n	800a2d2 <_puts_r+0xb6>
 800a2c8:	6823      	ldr	r3, [r4, #0]
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	6022      	str	r2, [r4, #0]
 800a2ce:	7019      	strb	r1, [r3, #0]
 800a2d0:	e7c5      	b.n	800a25e <_puts_r+0x42>
 800a2d2:	4622      	mov	r2, r4
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f851 	bl	800a37c <__swbuf_r>
 800a2da:	3001      	adds	r0, #1
 800a2dc:	d1bf      	bne.n	800a25e <_puts_r+0x42>
 800a2de:	e7df      	b.n	800a2a0 <_puts_r+0x84>
 800a2e0:	6823      	ldr	r3, [r4, #0]
 800a2e2:	250a      	movs	r5, #10
 800a2e4:	1c5a      	adds	r2, r3, #1
 800a2e6:	6022      	str	r2, [r4, #0]
 800a2e8:	701d      	strb	r5, [r3, #0]
 800a2ea:	e7db      	b.n	800a2a4 <_puts_r+0x88>
 800a2ec:	0800b6f4 	.word	0x0800b6f4
 800a2f0:	0800b714 	.word	0x0800b714
 800a2f4:	0800b6d4 	.word	0x0800b6d4

0800a2f8 <puts>:
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <puts+0xc>)
 800a2fa:	4601      	mov	r1, r0
 800a2fc:	6818      	ldr	r0, [r3, #0]
 800a2fe:	f7ff bf8d 	b.w	800a21c <_puts_r>
 800a302:	bf00      	nop
 800a304:	20000190 	.word	0x20000190

0800a308 <_vsniprintf_r>:
 800a308:	b530      	push	{r4, r5, lr}
 800a30a:	4614      	mov	r4, r2
 800a30c:	2c00      	cmp	r4, #0
 800a30e:	b09b      	sub	sp, #108	; 0x6c
 800a310:	4605      	mov	r5, r0
 800a312:	461a      	mov	r2, r3
 800a314:	da05      	bge.n	800a322 <_vsniprintf_r+0x1a>
 800a316:	238b      	movs	r3, #139	; 0x8b
 800a318:	6003      	str	r3, [r0, #0]
 800a31a:	f04f 30ff 	mov.w	r0, #4294967295
 800a31e:	b01b      	add	sp, #108	; 0x6c
 800a320:	bd30      	pop	{r4, r5, pc}
 800a322:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a326:	f8ad 300c 	strh.w	r3, [sp, #12]
 800a32a:	bf14      	ite	ne
 800a32c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a330:	4623      	moveq	r3, r4
 800a332:	9302      	str	r3, [sp, #8]
 800a334:	9305      	str	r3, [sp, #20]
 800a336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a33a:	9100      	str	r1, [sp, #0]
 800a33c:	9104      	str	r1, [sp, #16]
 800a33e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800a342:	4669      	mov	r1, sp
 800a344:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800a346:	f000 fc85 	bl	800ac54 <_svfiprintf_r>
 800a34a:	1c43      	adds	r3, r0, #1
 800a34c:	bfbc      	itt	lt
 800a34e:	238b      	movlt	r3, #139	; 0x8b
 800a350:	602b      	strlt	r3, [r5, #0]
 800a352:	2c00      	cmp	r4, #0
 800a354:	d0e3      	beq.n	800a31e <_vsniprintf_r+0x16>
 800a356:	9b00      	ldr	r3, [sp, #0]
 800a358:	2200      	movs	r2, #0
 800a35a:	701a      	strb	r2, [r3, #0]
 800a35c:	e7df      	b.n	800a31e <_vsniprintf_r+0x16>
	...

0800a360 <vsniprintf>:
 800a360:	b507      	push	{r0, r1, r2, lr}
 800a362:	9300      	str	r3, [sp, #0]
 800a364:	4613      	mov	r3, r2
 800a366:	460a      	mov	r2, r1
 800a368:	4601      	mov	r1, r0
 800a36a:	4803      	ldr	r0, [pc, #12]	; (800a378 <vsniprintf+0x18>)
 800a36c:	6800      	ldr	r0, [r0, #0]
 800a36e:	f7ff ffcb 	bl	800a308 <_vsniprintf_r>
 800a372:	b003      	add	sp, #12
 800a374:	f85d fb04 	ldr.w	pc, [sp], #4
 800a378:	20000190 	.word	0x20000190

0800a37c <__swbuf_r>:
 800a37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37e:	460e      	mov	r6, r1
 800a380:	4614      	mov	r4, r2
 800a382:	4605      	mov	r5, r0
 800a384:	b118      	cbz	r0, 800a38e <__swbuf_r+0x12>
 800a386:	6983      	ldr	r3, [r0, #24]
 800a388:	b90b      	cbnz	r3, 800a38e <__swbuf_r+0x12>
 800a38a:	f000 f9d9 	bl	800a740 <__sinit>
 800a38e:	4b21      	ldr	r3, [pc, #132]	; (800a414 <__swbuf_r+0x98>)
 800a390:	429c      	cmp	r4, r3
 800a392:	d12b      	bne.n	800a3ec <__swbuf_r+0x70>
 800a394:	686c      	ldr	r4, [r5, #4]
 800a396:	69a3      	ldr	r3, [r4, #24]
 800a398:	60a3      	str	r3, [r4, #8]
 800a39a:	89a3      	ldrh	r3, [r4, #12]
 800a39c:	071a      	lsls	r2, r3, #28
 800a39e:	d52f      	bpl.n	800a400 <__swbuf_r+0x84>
 800a3a0:	6923      	ldr	r3, [r4, #16]
 800a3a2:	b36b      	cbz	r3, 800a400 <__swbuf_r+0x84>
 800a3a4:	6923      	ldr	r3, [r4, #16]
 800a3a6:	6820      	ldr	r0, [r4, #0]
 800a3a8:	1ac0      	subs	r0, r0, r3
 800a3aa:	6963      	ldr	r3, [r4, #20]
 800a3ac:	b2f6      	uxtb	r6, r6
 800a3ae:	4283      	cmp	r3, r0
 800a3b0:	4637      	mov	r7, r6
 800a3b2:	dc04      	bgt.n	800a3be <__swbuf_r+0x42>
 800a3b4:	4621      	mov	r1, r4
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f000 f92e 	bl	800a618 <_fflush_r>
 800a3bc:	bb30      	cbnz	r0, 800a40c <__swbuf_r+0x90>
 800a3be:	68a3      	ldr	r3, [r4, #8]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	60a3      	str	r3, [r4, #8]
 800a3c4:	6823      	ldr	r3, [r4, #0]
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	6022      	str	r2, [r4, #0]
 800a3ca:	701e      	strb	r6, [r3, #0]
 800a3cc:	6963      	ldr	r3, [r4, #20]
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	4283      	cmp	r3, r0
 800a3d2:	d004      	beq.n	800a3de <__swbuf_r+0x62>
 800a3d4:	89a3      	ldrh	r3, [r4, #12]
 800a3d6:	07db      	lsls	r3, r3, #31
 800a3d8:	d506      	bpl.n	800a3e8 <__swbuf_r+0x6c>
 800a3da:	2e0a      	cmp	r6, #10
 800a3dc:	d104      	bne.n	800a3e8 <__swbuf_r+0x6c>
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4628      	mov	r0, r5
 800a3e2:	f000 f919 	bl	800a618 <_fflush_r>
 800a3e6:	b988      	cbnz	r0, 800a40c <__swbuf_r+0x90>
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3ec:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <__swbuf_r+0x9c>)
 800a3ee:	429c      	cmp	r4, r3
 800a3f0:	d101      	bne.n	800a3f6 <__swbuf_r+0x7a>
 800a3f2:	68ac      	ldr	r4, [r5, #8]
 800a3f4:	e7cf      	b.n	800a396 <__swbuf_r+0x1a>
 800a3f6:	4b09      	ldr	r3, [pc, #36]	; (800a41c <__swbuf_r+0xa0>)
 800a3f8:	429c      	cmp	r4, r3
 800a3fa:	bf08      	it	eq
 800a3fc:	68ec      	ldreq	r4, [r5, #12]
 800a3fe:	e7ca      	b.n	800a396 <__swbuf_r+0x1a>
 800a400:	4621      	mov	r1, r4
 800a402:	4628      	mov	r0, r5
 800a404:	f000 f80c 	bl	800a420 <__swsetup_r>
 800a408:	2800      	cmp	r0, #0
 800a40a:	d0cb      	beq.n	800a3a4 <__swbuf_r+0x28>
 800a40c:	f04f 37ff 	mov.w	r7, #4294967295
 800a410:	e7ea      	b.n	800a3e8 <__swbuf_r+0x6c>
 800a412:	bf00      	nop
 800a414:	0800b6f4 	.word	0x0800b6f4
 800a418:	0800b714 	.word	0x0800b714
 800a41c:	0800b6d4 	.word	0x0800b6d4

0800a420 <__swsetup_r>:
 800a420:	4b32      	ldr	r3, [pc, #200]	; (800a4ec <__swsetup_r+0xcc>)
 800a422:	b570      	push	{r4, r5, r6, lr}
 800a424:	681d      	ldr	r5, [r3, #0]
 800a426:	4606      	mov	r6, r0
 800a428:	460c      	mov	r4, r1
 800a42a:	b125      	cbz	r5, 800a436 <__swsetup_r+0x16>
 800a42c:	69ab      	ldr	r3, [r5, #24]
 800a42e:	b913      	cbnz	r3, 800a436 <__swsetup_r+0x16>
 800a430:	4628      	mov	r0, r5
 800a432:	f000 f985 	bl	800a740 <__sinit>
 800a436:	4b2e      	ldr	r3, [pc, #184]	; (800a4f0 <__swsetup_r+0xd0>)
 800a438:	429c      	cmp	r4, r3
 800a43a:	d10f      	bne.n	800a45c <__swsetup_r+0x3c>
 800a43c:	686c      	ldr	r4, [r5, #4]
 800a43e:	89a3      	ldrh	r3, [r4, #12]
 800a440:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a444:	0719      	lsls	r1, r3, #28
 800a446:	d42c      	bmi.n	800a4a2 <__swsetup_r+0x82>
 800a448:	06dd      	lsls	r5, r3, #27
 800a44a:	d411      	bmi.n	800a470 <__swsetup_r+0x50>
 800a44c:	2309      	movs	r3, #9
 800a44e:	6033      	str	r3, [r6, #0]
 800a450:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a454:	81a3      	strh	r3, [r4, #12]
 800a456:	f04f 30ff 	mov.w	r0, #4294967295
 800a45a:	e03e      	b.n	800a4da <__swsetup_r+0xba>
 800a45c:	4b25      	ldr	r3, [pc, #148]	; (800a4f4 <__swsetup_r+0xd4>)
 800a45e:	429c      	cmp	r4, r3
 800a460:	d101      	bne.n	800a466 <__swsetup_r+0x46>
 800a462:	68ac      	ldr	r4, [r5, #8]
 800a464:	e7eb      	b.n	800a43e <__swsetup_r+0x1e>
 800a466:	4b24      	ldr	r3, [pc, #144]	; (800a4f8 <__swsetup_r+0xd8>)
 800a468:	429c      	cmp	r4, r3
 800a46a:	bf08      	it	eq
 800a46c:	68ec      	ldreq	r4, [r5, #12]
 800a46e:	e7e6      	b.n	800a43e <__swsetup_r+0x1e>
 800a470:	0758      	lsls	r0, r3, #29
 800a472:	d512      	bpl.n	800a49a <__swsetup_r+0x7a>
 800a474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a476:	b141      	cbz	r1, 800a48a <__swsetup_r+0x6a>
 800a478:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a47c:	4299      	cmp	r1, r3
 800a47e:	d002      	beq.n	800a486 <__swsetup_r+0x66>
 800a480:	4630      	mov	r0, r6
 800a482:	f000 fa7d 	bl	800a980 <_free_r>
 800a486:	2300      	movs	r3, #0
 800a488:	6363      	str	r3, [r4, #52]	; 0x34
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a490:	81a3      	strh	r3, [r4, #12]
 800a492:	2300      	movs	r3, #0
 800a494:	6063      	str	r3, [r4, #4]
 800a496:	6923      	ldr	r3, [r4, #16]
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	89a3      	ldrh	r3, [r4, #12]
 800a49c:	f043 0308 	orr.w	r3, r3, #8
 800a4a0:	81a3      	strh	r3, [r4, #12]
 800a4a2:	6923      	ldr	r3, [r4, #16]
 800a4a4:	b94b      	cbnz	r3, 800a4ba <__swsetup_r+0x9a>
 800a4a6:	89a3      	ldrh	r3, [r4, #12]
 800a4a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4b0:	d003      	beq.n	800a4ba <__swsetup_r+0x9a>
 800a4b2:	4621      	mov	r1, r4
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	f000 fa09 	bl	800a8cc <__smakebuf_r>
 800a4ba:	89a0      	ldrh	r0, [r4, #12]
 800a4bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a4c0:	f010 0301 	ands.w	r3, r0, #1
 800a4c4:	d00a      	beq.n	800a4dc <__swsetup_r+0xbc>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	60a3      	str	r3, [r4, #8]
 800a4ca:	6963      	ldr	r3, [r4, #20]
 800a4cc:	425b      	negs	r3, r3
 800a4ce:	61a3      	str	r3, [r4, #24]
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	b943      	cbnz	r3, 800a4e6 <__swsetup_r+0xc6>
 800a4d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a4d8:	d1ba      	bne.n	800a450 <__swsetup_r+0x30>
 800a4da:	bd70      	pop	{r4, r5, r6, pc}
 800a4dc:	0781      	lsls	r1, r0, #30
 800a4de:	bf58      	it	pl
 800a4e0:	6963      	ldrpl	r3, [r4, #20]
 800a4e2:	60a3      	str	r3, [r4, #8]
 800a4e4:	e7f4      	b.n	800a4d0 <__swsetup_r+0xb0>
 800a4e6:	2000      	movs	r0, #0
 800a4e8:	e7f7      	b.n	800a4da <__swsetup_r+0xba>
 800a4ea:	bf00      	nop
 800a4ec:	20000190 	.word	0x20000190
 800a4f0:	0800b6f4 	.word	0x0800b6f4
 800a4f4:	0800b714 	.word	0x0800b714
 800a4f8:	0800b6d4 	.word	0x0800b6d4

0800a4fc <abort>:
 800a4fc:	b508      	push	{r3, lr}
 800a4fe:	2006      	movs	r0, #6
 800a500:	f000 fce0 	bl	800aec4 <raise>
 800a504:	2001      	movs	r0, #1
 800a506:	f7f7 fe13 	bl	8002130 <_exit>
	...

0800a50c <__sflush_r>:
 800a50c:	898a      	ldrh	r2, [r1, #12]
 800a50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a512:	4605      	mov	r5, r0
 800a514:	0710      	lsls	r0, r2, #28
 800a516:	460c      	mov	r4, r1
 800a518:	d458      	bmi.n	800a5cc <__sflush_r+0xc0>
 800a51a:	684b      	ldr	r3, [r1, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	dc05      	bgt.n	800a52c <__sflush_r+0x20>
 800a520:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a522:	2b00      	cmp	r3, #0
 800a524:	dc02      	bgt.n	800a52c <__sflush_r+0x20>
 800a526:	2000      	movs	r0, #0
 800a528:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a52c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a52e:	2e00      	cmp	r6, #0
 800a530:	d0f9      	beq.n	800a526 <__sflush_r+0x1a>
 800a532:	2300      	movs	r3, #0
 800a534:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a538:	682f      	ldr	r7, [r5, #0]
 800a53a:	602b      	str	r3, [r5, #0]
 800a53c:	d032      	beq.n	800a5a4 <__sflush_r+0x98>
 800a53e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a540:	89a3      	ldrh	r3, [r4, #12]
 800a542:	075a      	lsls	r2, r3, #29
 800a544:	d505      	bpl.n	800a552 <__sflush_r+0x46>
 800a546:	6863      	ldr	r3, [r4, #4]
 800a548:	1ac0      	subs	r0, r0, r3
 800a54a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a54c:	b10b      	cbz	r3, 800a552 <__sflush_r+0x46>
 800a54e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a550:	1ac0      	subs	r0, r0, r3
 800a552:	2300      	movs	r3, #0
 800a554:	4602      	mov	r2, r0
 800a556:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a558:	6a21      	ldr	r1, [r4, #32]
 800a55a:	4628      	mov	r0, r5
 800a55c:	47b0      	blx	r6
 800a55e:	1c43      	adds	r3, r0, #1
 800a560:	89a3      	ldrh	r3, [r4, #12]
 800a562:	d106      	bne.n	800a572 <__sflush_r+0x66>
 800a564:	6829      	ldr	r1, [r5, #0]
 800a566:	291d      	cmp	r1, #29
 800a568:	d82c      	bhi.n	800a5c4 <__sflush_r+0xb8>
 800a56a:	4a2a      	ldr	r2, [pc, #168]	; (800a614 <__sflush_r+0x108>)
 800a56c:	40ca      	lsrs	r2, r1
 800a56e:	07d6      	lsls	r6, r2, #31
 800a570:	d528      	bpl.n	800a5c4 <__sflush_r+0xb8>
 800a572:	2200      	movs	r2, #0
 800a574:	6062      	str	r2, [r4, #4]
 800a576:	04d9      	lsls	r1, r3, #19
 800a578:	6922      	ldr	r2, [r4, #16]
 800a57a:	6022      	str	r2, [r4, #0]
 800a57c:	d504      	bpl.n	800a588 <__sflush_r+0x7c>
 800a57e:	1c42      	adds	r2, r0, #1
 800a580:	d101      	bne.n	800a586 <__sflush_r+0x7a>
 800a582:	682b      	ldr	r3, [r5, #0]
 800a584:	b903      	cbnz	r3, 800a588 <__sflush_r+0x7c>
 800a586:	6560      	str	r0, [r4, #84]	; 0x54
 800a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a58a:	602f      	str	r7, [r5, #0]
 800a58c:	2900      	cmp	r1, #0
 800a58e:	d0ca      	beq.n	800a526 <__sflush_r+0x1a>
 800a590:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a594:	4299      	cmp	r1, r3
 800a596:	d002      	beq.n	800a59e <__sflush_r+0x92>
 800a598:	4628      	mov	r0, r5
 800a59a:	f000 f9f1 	bl	800a980 <_free_r>
 800a59e:	2000      	movs	r0, #0
 800a5a0:	6360      	str	r0, [r4, #52]	; 0x34
 800a5a2:	e7c1      	b.n	800a528 <__sflush_r+0x1c>
 800a5a4:	6a21      	ldr	r1, [r4, #32]
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	4628      	mov	r0, r5
 800a5aa:	47b0      	blx	r6
 800a5ac:	1c41      	adds	r1, r0, #1
 800a5ae:	d1c7      	bne.n	800a540 <__sflush_r+0x34>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d0c4      	beq.n	800a540 <__sflush_r+0x34>
 800a5b6:	2b1d      	cmp	r3, #29
 800a5b8:	d001      	beq.n	800a5be <__sflush_r+0xb2>
 800a5ba:	2b16      	cmp	r3, #22
 800a5bc:	d101      	bne.n	800a5c2 <__sflush_r+0xb6>
 800a5be:	602f      	str	r7, [r5, #0]
 800a5c0:	e7b1      	b.n	800a526 <__sflush_r+0x1a>
 800a5c2:	89a3      	ldrh	r3, [r4, #12]
 800a5c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c8:	81a3      	strh	r3, [r4, #12]
 800a5ca:	e7ad      	b.n	800a528 <__sflush_r+0x1c>
 800a5cc:	690f      	ldr	r7, [r1, #16]
 800a5ce:	2f00      	cmp	r7, #0
 800a5d0:	d0a9      	beq.n	800a526 <__sflush_r+0x1a>
 800a5d2:	0793      	lsls	r3, r2, #30
 800a5d4:	680e      	ldr	r6, [r1, #0]
 800a5d6:	bf08      	it	eq
 800a5d8:	694b      	ldreq	r3, [r1, #20]
 800a5da:	600f      	str	r7, [r1, #0]
 800a5dc:	bf18      	it	ne
 800a5de:	2300      	movne	r3, #0
 800a5e0:	eba6 0807 	sub.w	r8, r6, r7
 800a5e4:	608b      	str	r3, [r1, #8]
 800a5e6:	f1b8 0f00 	cmp.w	r8, #0
 800a5ea:	dd9c      	ble.n	800a526 <__sflush_r+0x1a>
 800a5ec:	6a21      	ldr	r1, [r4, #32]
 800a5ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a5f0:	4643      	mov	r3, r8
 800a5f2:	463a      	mov	r2, r7
 800a5f4:	4628      	mov	r0, r5
 800a5f6:	47b0      	blx	r6
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	dc06      	bgt.n	800a60a <__sflush_r+0xfe>
 800a5fc:	89a3      	ldrh	r3, [r4, #12]
 800a5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a602:	81a3      	strh	r3, [r4, #12]
 800a604:	f04f 30ff 	mov.w	r0, #4294967295
 800a608:	e78e      	b.n	800a528 <__sflush_r+0x1c>
 800a60a:	4407      	add	r7, r0
 800a60c:	eba8 0800 	sub.w	r8, r8, r0
 800a610:	e7e9      	b.n	800a5e6 <__sflush_r+0xda>
 800a612:	bf00      	nop
 800a614:	20400001 	.word	0x20400001

0800a618 <_fflush_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	690b      	ldr	r3, [r1, #16]
 800a61c:	4605      	mov	r5, r0
 800a61e:	460c      	mov	r4, r1
 800a620:	b913      	cbnz	r3, 800a628 <_fflush_r+0x10>
 800a622:	2500      	movs	r5, #0
 800a624:	4628      	mov	r0, r5
 800a626:	bd38      	pop	{r3, r4, r5, pc}
 800a628:	b118      	cbz	r0, 800a632 <_fflush_r+0x1a>
 800a62a:	6983      	ldr	r3, [r0, #24]
 800a62c:	b90b      	cbnz	r3, 800a632 <_fflush_r+0x1a>
 800a62e:	f000 f887 	bl	800a740 <__sinit>
 800a632:	4b14      	ldr	r3, [pc, #80]	; (800a684 <_fflush_r+0x6c>)
 800a634:	429c      	cmp	r4, r3
 800a636:	d11b      	bne.n	800a670 <_fflush_r+0x58>
 800a638:	686c      	ldr	r4, [r5, #4]
 800a63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0ef      	beq.n	800a622 <_fflush_r+0xa>
 800a642:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a644:	07d0      	lsls	r0, r2, #31
 800a646:	d404      	bmi.n	800a652 <_fflush_r+0x3a>
 800a648:	0599      	lsls	r1, r3, #22
 800a64a:	d402      	bmi.n	800a652 <_fflush_r+0x3a>
 800a64c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a64e:	f000 f915 	bl	800a87c <__retarget_lock_acquire_recursive>
 800a652:	4628      	mov	r0, r5
 800a654:	4621      	mov	r1, r4
 800a656:	f7ff ff59 	bl	800a50c <__sflush_r>
 800a65a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a65c:	07da      	lsls	r2, r3, #31
 800a65e:	4605      	mov	r5, r0
 800a660:	d4e0      	bmi.n	800a624 <_fflush_r+0xc>
 800a662:	89a3      	ldrh	r3, [r4, #12]
 800a664:	059b      	lsls	r3, r3, #22
 800a666:	d4dd      	bmi.n	800a624 <_fflush_r+0xc>
 800a668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a66a:	f000 f908 	bl	800a87e <__retarget_lock_release_recursive>
 800a66e:	e7d9      	b.n	800a624 <_fflush_r+0xc>
 800a670:	4b05      	ldr	r3, [pc, #20]	; (800a688 <_fflush_r+0x70>)
 800a672:	429c      	cmp	r4, r3
 800a674:	d101      	bne.n	800a67a <_fflush_r+0x62>
 800a676:	68ac      	ldr	r4, [r5, #8]
 800a678:	e7df      	b.n	800a63a <_fflush_r+0x22>
 800a67a:	4b04      	ldr	r3, [pc, #16]	; (800a68c <_fflush_r+0x74>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	bf08      	it	eq
 800a680:	68ec      	ldreq	r4, [r5, #12]
 800a682:	e7da      	b.n	800a63a <_fflush_r+0x22>
 800a684:	0800b6f4 	.word	0x0800b6f4
 800a688:	0800b714 	.word	0x0800b714
 800a68c:	0800b6d4 	.word	0x0800b6d4

0800a690 <std>:
 800a690:	2300      	movs	r3, #0
 800a692:	b510      	push	{r4, lr}
 800a694:	4604      	mov	r4, r0
 800a696:	e9c0 3300 	strd	r3, r3, [r0]
 800a69a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a69e:	6083      	str	r3, [r0, #8]
 800a6a0:	8181      	strh	r1, [r0, #12]
 800a6a2:	6643      	str	r3, [r0, #100]	; 0x64
 800a6a4:	81c2      	strh	r2, [r0, #14]
 800a6a6:	6183      	str	r3, [r0, #24]
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	2208      	movs	r2, #8
 800a6ac:	305c      	adds	r0, #92	; 0x5c
 800a6ae:	f7ff faa7 	bl	8009c00 <memset>
 800a6b2:	4b05      	ldr	r3, [pc, #20]	; (800a6c8 <std+0x38>)
 800a6b4:	6263      	str	r3, [r4, #36]	; 0x24
 800a6b6:	4b05      	ldr	r3, [pc, #20]	; (800a6cc <std+0x3c>)
 800a6b8:	62a3      	str	r3, [r4, #40]	; 0x28
 800a6ba:	4b05      	ldr	r3, [pc, #20]	; (800a6d0 <std+0x40>)
 800a6bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a6be:	4b05      	ldr	r3, [pc, #20]	; (800a6d4 <std+0x44>)
 800a6c0:	6224      	str	r4, [r4, #32]
 800a6c2:	6323      	str	r3, [r4, #48]	; 0x30
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	bf00      	nop
 800a6c8:	0800aefd 	.word	0x0800aefd
 800a6cc:	0800af1f 	.word	0x0800af1f
 800a6d0:	0800af57 	.word	0x0800af57
 800a6d4:	0800af7b 	.word	0x0800af7b

0800a6d8 <_cleanup_r>:
 800a6d8:	4901      	ldr	r1, [pc, #4]	; (800a6e0 <_cleanup_r+0x8>)
 800a6da:	f000 b8af 	b.w	800a83c <_fwalk_reent>
 800a6de:	bf00      	nop
 800a6e0:	0800a619 	.word	0x0800a619

0800a6e4 <__sfmoreglue>:
 800a6e4:	b570      	push	{r4, r5, r6, lr}
 800a6e6:	2268      	movs	r2, #104	; 0x68
 800a6e8:	1e4d      	subs	r5, r1, #1
 800a6ea:	4355      	muls	r5, r2
 800a6ec:	460e      	mov	r6, r1
 800a6ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a6f2:	f000 f9b1 	bl	800aa58 <_malloc_r>
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	b140      	cbz	r0, 800a70c <__sfmoreglue+0x28>
 800a6fa:	2100      	movs	r1, #0
 800a6fc:	e9c0 1600 	strd	r1, r6, [r0]
 800a700:	300c      	adds	r0, #12
 800a702:	60a0      	str	r0, [r4, #8]
 800a704:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a708:	f7ff fa7a 	bl	8009c00 <memset>
 800a70c:	4620      	mov	r0, r4
 800a70e:	bd70      	pop	{r4, r5, r6, pc}

0800a710 <__sfp_lock_acquire>:
 800a710:	4801      	ldr	r0, [pc, #4]	; (800a718 <__sfp_lock_acquire+0x8>)
 800a712:	f000 b8b3 	b.w	800a87c <__retarget_lock_acquire_recursive>
 800a716:	bf00      	nop
 800a718:	2000050d 	.word	0x2000050d

0800a71c <__sfp_lock_release>:
 800a71c:	4801      	ldr	r0, [pc, #4]	; (800a724 <__sfp_lock_release+0x8>)
 800a71e:	f000 b8ae 	b.w	800a87e <__retarget_lock_release_recursive>
 800a722:	bf00      	nop
 800a724:	2000050d 	.word	0x2000050d

0800a728 <__sinit_lock_acquire>:
 800a728:	4801      	ldr	r0, [pc, #4]	; (800a730 <__sinit_lock_acquire+0x8>)
 800a72a:	f000 b8a7 	b.w	800a87c <__retarget_lock_acquire_recursive>
 800a72e:	bf00      	nop
 800a730:	2000050e 	.word	0x2000050e

0800a734 <__sinit_lock_release>:
 800a734:	4801      	ldr	r0, [pc, #4]	; (800a73c <__sinit_lock_release+0x8>)
 800a736:	f000 b8a2 	b.w	800a87e <__retarget_lock_release_recursive>
 800a73a:	bf00      	nop
 800a73c:	2000050e 	.word	0x2000050e

0800a740 <__sinit>:
 800a740:	b510      	push	{r4, lr}
 800a742:	4604      	mov	r4, r0
 800a744:	f7ff fff0 	bl	800a728 <__sinit_lock_acquire>
 800a748:	69a3      	ldr	r3, [r4, #24]
 800a74a:	b11b      	cbz	r3, 800a754 <__sinit+0x14>
 800a74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a750:	f7ff bff0 	b.w	800a734 <__sinit_lock_release>
 800a754:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a758:	6523      	str	r3, [r4, #80]	; 0x50
 800a75a:	4b13      	ldr	r3, [pc, #76]	; (800a7a8 <__sinit+0x68>)
 800a75c:	4a13      	ldr	r2, [pc, #76]	; (800a7ac <__sinit+0x6c>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	62a2      	str	r2, [r4, #40]	; 0x28
 800a762:	42a3      	cmp	r3, r4
 800a764:	bf04      	itt	eq
 800a766:	2301      	moveq	r3, #1
 800a768:	61a3      	streq	r3, [r4, #24]
 800a76a:	4620      	mov	r0, r4
 800a76c:	f000 f820 	bl	800a7b0 <__sfp>
 800a770:	6060      	str	r0, [r4, #4]
 800a772:	4620      	mov	r0, r4
 800a774:	f000 f81c 	bl	800a7b0 <__sfp>
 800a778:	60a0      	str	r0, [r4, #8]
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 f818 	bl	800a7b0 <__sfp>
 800a780:	2200      	movs	r2, #0
 800a782:	60e0      	str	r0, [r4, #12]
 800a784:	2104      	movs	r1, #4
 800a786:	6860      	ldr	r0, [r4, #4]
 800a788:	f7ff ff82 	bl	800a690 <std>
 800a78c:	68a0      	ldr	r0, [r4, #8]
 800a78e:	2201      	movs	r2, #1
 800a790:	2109      	movs	r1, #9
 800a792:	f7ff ff7d 	bl	800a690 <std>
 800a796:	68e0      	ldr	r0, [r4, #12]
 800a798:	2202      	movs	r2, #2
 800a79a:	2112      	movs	r1, #18
 800a79c:	f7ff ff78 	bl	800a690 <std>
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	61a3      	str	r3, [r4, #24]
 800a7a4:	e7d2      	b.n	800a74c <__sinit+0xc>
 800a7a6:	bf00      	nop
 800a7a8:	0800b69c 	.word	0x0800b69c
 800a7ac:	0800a6d9 	.word	0x0800a6d9

0800a7b0 <__sfp>:
 800a7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b2:	4607      	mov	r7, r0
 800a7b4:	f7ff ffac 	bl	800a710 <__sfp_lock_acquire>
 800a7b8:	4b1e      	ldr	r3, [pc, #120]	; (800a834 <__sfp+0x84>)
 800a7ba:	681e      	ldr	r6, [r3, #0]
 800a7bc:	69b3      	ldr	r3, [r6, #24]
 800a7be:	b913      	cbnz	r3, 800a7c6 <__sfp+0x16>
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7ff ffbd 	bl	800a740 <__sinit>
 800a7c6:	3648      	adds	r6, #72	; 0x48
 800a7c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a7cc:	3b01      	subs	r3, #1
 800a7ce:	d503      	bpl.n	800a7d8 <__sfp+0x28>
 800a7d0:	6833      	ldr	r3, [r6, #0]
 800a7d2:	b30b      	cbz	r3, 800a818 <__sfp+0x68>
 800a7d4:	6836      	ldr	r6, [r6, #0]
 800a7d6:	e7f7      	b.n	800a7c8 <__sfp+0x18>
 800a7d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a7dc:	b9d5      	cbnz	r5, 800a814 <__sfp+0x64>
 800a7de:	4b16      	ldr	r3, [pc, #88]	; (800a838 <__sfp+0x88>)
 800a7e0:	60e3      	str	r3, [r4, #12]
 800a7e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a7e6:	6665      	str	r5, [r4, #100]	; 0x64
 800a7e8:	f000 f847 	bl	800a87a <__retarget_lock_init_recursive>
 800a7ec:	f7ff ff96 	bl	800a71c <__sfp_lock_release>
 800a7f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a7f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a7f8:	6025      	str	r5, [r4, #0]
 800a7fa:	61a5      	str	r5, [r4, #24]
 800a7fc:	2208      	movs	r2, #8
 800a7fe:	4629      	mov	r1, r5
 800a800:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a804:	f7ff f9fc 	bl	8009c00 <memset>
 800a808:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a80c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a810:	4620      	mov	r0, r4
 800a812:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a814:	3468      	adds	r4, #104	; 0x68
 800a816:	e7d9      	b.n	800a7cc <__sfp+0x1c>
 800a818:	2104      	movs	r1, #4
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7ff ff62 	bl	800a6e4 <__sfmoreglue>
 800a820:	4604      	mov	r4, r0
 800a822:	6030      	str	r0, [r6, #0]
 800a824:	2800      	cmp	r0, #0
 800a826:	d1d5      	bne.n	800a7d4 <__sfp+0x24>
 800a828:	f7ff ff78 	bl	800a71c <__sfp_lock_release>
 800a82c:	230c      	movs	r3, #12
 800a82e:	603b      	str	r3, [r7, #0]
 800a830:	e7ee      	b.n	800a810 <__sfp+0x60>
 800a832:	bf00      	nop
 800a834:	0800b69c 	.word	0x0800b69c
 800a838:	ffff0001 	.word	0xffff0001

0800a83c <_fwalk_reent>:
 800a83c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a840:	4606      	mov	r6, r0
 800a842:	4688      	mov	r8, r1
 800a844:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a848:	2700      	movs	r7, #0
 800a84a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a84e:	f1b9 0901 	subs.w	r9, r9, #1
 800a852:	d505      	bpl.n	800a860 <_fwalk_reent+0x24>
 800a854:	6824      	ldr	r4, [r4, #0]
 800a856:	2c00      	cmp	r4, #0
 800a858:	d1f7      	bne.n	800a84a <_fwalk_reent+0xe>
 800a85a:	4638      	mov	r0, r7
 800a85c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a860:	89ab      	ldrh	r3, [r5, #12]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d907      	bls.n	800a876 <_fwalk_reent+0x3a>
 800a866:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a86a:	3301      	adds	r3, #1
 800a86c:	d003      	beq.n	800a876 <_fwalk_reent+0x3a>
 800a86e:	4629      	mov	r1, r5
 800a870:	4630      	mov	r0, r6
 800a872:	47c0      	blx	r8
 800a874:	4307      	orrs	r7, r0
 800a876:	3568      	adds	r5, #104	; 0x68
 800a878:	e7e9      	b.n	800a84e <_fwalk_reent+0x12>

0800a87a <__retarget_lock_init_recursive>:
 800a87a:	4770      	bx	lr

0800a87c <__retarget_lock_acquire_recursive>:
 800a87c:	4770      	bx	lr

0800a87e <__retarget_lock_release_recursive>:
 800a87e:	4770      	bx	lr

0800a880 <__swhatbuf_r>:
 800a880:	b570      	push	{r4, r5, r6, lr}
 800a882:	460e      	mov	r6, r1
 800a884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a888:	2900      	cmp	r1, #0
 800a88a:	b096      	sub	sp, #88	; 0x58
 800a88c:	4614      	mov	r4, r2
 800a88e:	461d      	mov	r5, r3
 800a890:	da08      	bge.n	800a8a4 <__swhatbuf_r+0x24>
 800a892:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a896:	2200      	movs	r2, #0
 800a898:	602a      	str	r2, [r5, #0]
 800a89a:	061a      	lsls	r2, r3, #24
 800a89c:	d410      	bmi.n	800a8c0 <__swhatbuf_r+0x40>
 800a89e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a2:	e00e      	b.n	800a8c2 <__swhatbuf_r+0x42>
 800a8a4:	466a      	mov	r2, sp
 800a8a6:	f000 fb8f 	bl	800afc8 <_fstat_r>
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	dbf1      	blt.n	800a892 <__swhatbuf_r+0x12>
 800a8ae:	9a01      	ldr	r2, [sp, #4]
 800a8b0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a8b4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a8b8:	425a      	negs	r2, r3
 800a8ba:	415a      	adcs	r2, r3
 800a8bc:	602a      	str	r2, [r5, #0]
 800a8be:	e7ee      	b.n	800a89e <__swhatbuf_r+0x1e>
 800a8c0:	2340      	movs	r3, #64	; 0x40
 800a8c2:	2000      	movs	r0, #0
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	b016      	add	sp, #88	; 0x58
 800a8c8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a8cc <__smakebuf_r>:
 800a8cc:	898b      	ldrh	r3, [r1, #12]
 800a8ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8d0:	079d      	lsls	r5, r3, #30
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460c      	mov	r4, r1
 800a8d6:	d507      	bpl.n	800a8e8 <__smakebuf_r+0x1c>
 800a8d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	6123      	str	r3, [r4, #16]
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	6163      	str	r3, [r4, #20]
 800a8e4:	b002      	add	sp, #8
 800a8e6:	bd70      	pop	{r4, r5, r6, pc}
 800a8e8:	ab01      	add	r3, sp, #4
 800a8ea:	466a      	mov	r2, sp
 800a8ec:	f7ff ffc8 	bl	800a880 <__swhatbuf_r>
 800a8f0:	9900      	ldr	r1, [sp, #0]
 800a8f2:	4605      	mov	r5, r0
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 f8af 	bl	800aa58 <_malloc_r>
 800a8fa:	b948      	cbnz	r0, 800a910 <__smakebuf_r+0x44>
 800a8fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a900:	059a      	lsls	r2, r3, #22
 800a902:	d4ef      	bmi.n	800a8e4 <__smakebuf_r+0x18>
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	f043 0302 	orr.w	r3, r3, #2
 800a90c:	81a3      	strh	r3, [r4, #12]
 800a90e:	e7e3      	b.n	800a8d8 <__smakebuf_r+0xc>
 800a910:	4b0d      	ldr	r3, [pc, #52]	; (800a948 <__smakebuf_r+0x7c>)
 800a912:	62b3      	str	r3, [r6, #40]	; 0x28
 800a914:	89a3      	ldrh	r3, [r4, #12]
 800a916:	6020      	str	r0, [r4, #0]
 800a918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a91c:	81a3      	strh	r3, [r4, #12]
 800a91e:	9b00      	ldr	r3, [sp, #0]
 800a920:	6163      	str	r3, [r4, #20]
 800a922:	9b01      	ldr	r3, [sp, #4]
 800a924:	6120      	str	r0, [r4, #16]
 800a926:	b15b      	cbz	r3, 800a940 <__smakebuf_r+0x74>
 800a928:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a92c:	4630      	mov	r0, r6
 800a92e:	f000 fb5d 	bl	800afec <_isatty_r>
 800a932:	b128      	cbz	r0, 800a940 <__smakebuf_r+0x74>
 800a934:	89a3      	ldrh	r3, [r4, #12]
 800a936:	f023 0303 	bic.w	r3, r3, #3
 800a93a:	f043 0301 	orr.w	r3, r3, #1
 800a93e:	81a3      	strh	r3, [r4, #12]
 800a940:	89a0      	ldrh	r0, [r4, #12]
 800a942:	4305      	orrs	r5, r0
 800a944:	81a5      	strh	r5, [r4, #12]
 800a946:	e7cd      	b.n	800a8e4 <__smakebuf_r+0x18>
 800a948:	0800a6d9 	.word	0x0800a6d9

0800a94c <memmove>:
 800a94c:	4288      	cmp	r0, r1
 800a94e:	b510      	push	{r4, lr}
 800a950:	eb01 0402 	add.w	r4, r1, r2
 800a954:	d902      	bls.n	800a95c <memmove+0x10>
 800a956:	4284      	cmp	r4, r0
 800a958:	4623      	mov	r3, r4
 800a95a:	d807      	bhi.n	800a96c <memmove+0x20>
 800a95c:	1e43      	subs	r3, r0, #1
 800a95e:	42a1      	cmp	r1, r4
 800a960:	d008      	beq.n	800a974 <memmove+0x28>
 800a962:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a966:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a96a:	e7f8      	b.n	800a95e <memmove+0x12>
 800a96c:	4402      	add	r2, r0
 800a96e:	4601      	mov	r1, r0
 800a970:	428a      	cmp	r2, r1
 800a972:	d100      	bne.n	800a976 <memmove+0x2a>
 800a974:	bd10      	pop	{r4, pc}
 800a976:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a97a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a97e:	e7f7      	b.n	800a970 <memmove+0x24>

0800a980 <_free_r>:
 800a980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a982:	2900      	cmp	r1, #0
 800a984:	d044      	beq.n	800aa10 <_free_r+0x90>
 800a986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a98a:	9001      	str	r0, [sp, #4]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	f1a1 0404 	sub.w	r4, r1, #4
 800a992:	bfb8      	it	lt
 800a994:	18e4      	addlt	r4, r4, r3
 800a996:	f000 fb4b 	bl	800b030 <__malloc_lock>
 800a99a:	4a1e      	ldr	r2, [pc, #120]	; (800aa14 <_free_r+0x94>)
 800a99c:	9801      	ldr	r0, [sp, #4]
 800a99e:	6813      	ldr	r3, [r2, #0]
 800a9a0:	b933      	cbnz	r3, 800a9b0 <_free_r+0x30>
 800a9a2:	6063      	str	r3, [r4, #4]
 800a9a4:	6014      	str	r4, [r2, #0]
 800a9a6:	b003      	add	sp, #12
 800a9a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a9ac:	f000 bb46 	b.w	800b03c <__malloc_unlock>
 800a9b0:	42a3      	cmp	r3, r4
 800a9b2:	d908      	bls.n	800a9c6 <_free_r+0x46>
 800a9b4:	6825      	ldr	r5, [r4, #0]
 800a9b6:	1961      	adds	r1, r4, r5
 800a9b8:	428b      	cmp	r3, r1
 800a9ba:	bf01      	itttt	eq
 800a9bc:	6819      	ldreq	r1, [r3, #0]
 800a9be:	685b      	ldreq	r3, [r3, #4]
 800a9c0:	1949      	addeq	r1, r1, r5
 800a9c2:	6021      	streq	r1, [r4, #0]
 800a9c4:	e7ed      	b.n	800a9a2 <_free_r+0x22>
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	b10b      	cbz	r3, 800a9d0 <_free_r+0x50>
 800a9cc:	42a3      	cmp	r3, r4
 800a9ce:	d9fa      	bls.n	800a9c6 <_free_r+0x46>
 800a9d0:	6811      	ldr	r1, [r2, #0]
 800a9d2:	1855      	adds	r5, r2, r1
 800a9d4:	42a5      	cmp	r5, r4
 800a9d6:	d10b      	bne.n	800a9f0 <_free_r+0x70>
 800a9d8:	6824      	ldr	r4, [r4, #0]
 800a9da:	4421      	add	r1, r4
 800a9dc:	1854      	adds	r4, r2, r1
 800a9de:	42a3      	cmp	r3, r4
 800a9e0:	6011      	str	r1, [r2, #0]
 800a9e2:	d1e0      	bne.n	800a9a6 <_free_r+0x26>
 800a9e4:	681c      	ldr	r4, [r3, #0]
 800a9e6:	685b      	ldr	r3, [r3, #4]
 800a9e8:	6053      	str	r3, [r2, #4]
 800a9ea:	4421      	add	r1, r4
 800a9ec:	6011      	str	r1, [r2, #0]
 800a9ee:	e7da      	b.n	800a9a6 <_free_r+0x26>
 800a9f0:	d902      	bls.n	800a9f8 <_free_r+0x78>
 800a9f2:	230c      	movs	r3, #12
 800a9f4:	6003      	str	r3, [r0, #0]
 800a9f6:	e7d6      	b.n	800a9a6 <_free_r+0x26>
 800a9f8:	6825      	ldr	r5, [r4, #0]
 800a9fa:	1961      	adds	r1, r4, r5
 800a9fc:	428b      	cmp	r3, r1
 800a9fe:	bf04      	itt	eq
 800aa00:	6819      	ldreq	r1, [r3, #0]
 800aa02:	685b      	ldreq	r3, [r3, #4]
 800aa04:	6063      	str	r3, [r4, #4]
 800aa06:	bf04      	itt	eq
 800aa08:	1949      	addeq	r1, r1, r5
 800aa0a:	6021      	streq	r1, [r4, #0]
 800aa0c:	6054      	str	r4, [r2, #4]
 800aa0e:	e7ca      	b.n	800a9a6 <_free_r+0x26>
 800aa10:	b003      	add	sp, #12
 800aa12:	bd30      	pop	{r4, r5, pc}
 800aa14:	20000510 	.word	0x20000510

0800aa18 <sbrk_aligned>:
 800aa18:	b570      	push	{r4, r5, r6, lr}
 800aa1a:	4e0e      	ldr	r6, [pc, #56]	; (800aa54 <sbrk_aligned+0x3c>)
 800aa1c:	460c      	mov	r4, r1
 800aa1e:	6831      	ldr	r1, [r6, #0]
 800aa20:	4605      	mov	r5, r0
 800aa22:	b911      	cbnz	r1, 800aa2a <sbrk_aligned+0x12>
 800aa24:	f000 fa16 	bl	800ae54 <_sbrk_r>
 800aa28:	6030      	str	r0, [r6, #0]
 800aa2a:	4621      	mov	r1, r4
 800aa2c:	4628      	mov	r0, r5
 800aa2e:	f000 fa11 	bl	800ae54 <_sbrk_r>
 800aa32:	1c43      	adds	r3, r0, #1
 800aa34:	d00a      	beq.n	800aa4c <sbrk_aligned+0x34>
 800aa36:	1cc4      	adds	r4, r0, #3
 800aa38:	f024 0403 	bic.w	r4, r4, #3
 800aa3c:	42a0      	cmp	r0, r4
 800aa3e:	d007      	beq.n	800aa50 <sbrk_aligned+0x38>
 800aa40:	1a21      	subs	r1, r4, r0
 800aa42:	4628      	mov	r0, r5
 800aa44:	f000 fa06 	bl	800ae54 <_sbrk_r>
 800aa48:	3001      	adds	r0, #1
 800aa4a:	d101      	bne.n	800aa50 <sbrk_aligned+0x38>
 800aa4c:	f04f 34ff 	mov.w	r4, #4294967295
 800aa50:	4620      	mov	r0, r4
 800aa52:	bd70      	pop	{r4, r5, r6, pc}
 800aa54:	20000514 	.word	0x20000514

0800aa58 <_malloc_r>:
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5c:	1ccd      	adds	r5, r1, #3
 800aa5e:	f025 0503 	bic.w	r5, r5, #3
 800aa62:	3508      	adds	r5, #8
 800aa64:	2d0c      	cmp	r5, #12
 800aa66:	bf38      	it	cc
 800aa68:	250c      	movcc	r5, #12
 800aa6a:	2d00      	cmp	r5, #0
 800aa6c:	4607      	mov	r7, r0
 800aa6e:	db01      	blt.n	800aa74 <_malloc_r+0x1c>
 800aa70:	42a9      	cmp	r1, r5
 800aa72:	d905      	bls.n	800aa80 <_malloc_r+0x28>
 800aa74:	230c      	movs	r3, #12
 800aa76:	603b      	str	r3, [r7, #0]
 800aa78:	2600      	movs	r6, #0
 800aa7a:	4630      	mov	r0, r6
 800aa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa80:	4e2e      	ldr	r6, [pc, #184]	; (800ab3c <_malloc_r+0xe4>)
 800aa82:	f000 fad5 	bl	800b030 <__malloc_lock>
 800aa86:	6833      	ldr	r3, [r6, #0]
 800aa88:	461c      	mov	r4, r3
 800aa8a:	bb34      	cbnz	r4, 800aada <_malloc_r+0x82>
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4638      	mov	r0, r7
 800aa90:	f7ff ffc2 	bl	800aa18 <sbrk_aligned>
 800aa94:	1c43      	adds	r3, r0, #1
 800aa96:	4604      	mov	r4, r0
 800aa98:	d14d      	bne.n	800ab36 <_malloc_r+0xde>
 800aa9a:	6834      	ldr	r4, [r6, #0]
 800aa9c:	4626      	mov	r6, r4
 800aa9e:	2e00      	cmp	r6, #0
 800aaa0:	d140      	bne.n	800ab24 <_malloc_r+0xcc>
 800aaa2:	6823      	ldr	r3, [r4, #0]
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4638      	mov	r0, r7
 800aaa8:	eb04 0803 	add.w	r8, r4, r3
 800aaac:	f000 f9d2 	bl	800ae54 <_sbrk_r>
 800aab0:	4580      	cmp	r8, r0
 800aab2:	d13a      	bne.n	800ab2a <_malloc_r+0xd2>
 800aab4:	6821      	ldr	r1, [r4, #0]
 800aab6:	3503      	adds	r5, #3
 800aab8:	1a6d      	subs	r5, r5, r1
 800aaba:	f025 0503 	bic.w	r5, r5, #3
 800aabe:	3508      	adds	r5, #8
 800aac0:	2d0c      	cmp	r5, #12
 800aac2:	bf38      	it	cc
 800aac4:	250c      	movcc	r5, #12
 800aac6:	4629      	mov	r1, r5
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff ffa5 	bl	800aa18 <sbrk_aligned>
 800aace:	3001      	adds	r0, #1
 800aad0:	d02b      	beq.n	800ab2a <_malloc_r+0xd2>
 800aad2:	6823      	ldr	r3, [r4, #0]
 800aad4:	442b      	add	r3, r5
 800aad6:	6023      	str	r3, [r4, #0]
 800aad8:	e00e      	b.n	800aaf8 <_malloc_r+0xa0>
 800aada:	6822      	ldr	r2, [r4, #0]
 800aadc:	1b52      	subs	r2, r2, r5
 800aade:	d41e      	bmi.n	800ab1e <_malloc_r+0xc6>
 800aae0:	2a0b      	cmp	r2, #11
 800aae2:	d916      	bls.n	800ab12 <_malloc_r+0xba>
 800aae4:	1961      	adds	r1, r4, r5
 800aae6:	42a3      	cmp	r3, r4
 800aae8:	6025      	str	r5, [r4, #0]
 800aaea:	bf18      	it	ne
 800aaec:	6059      	strne	r1, [r3, #4]
 800aaee:	6863      	ldr	r3, [r4, #4]
 800aaf0:	bf08      	it	eq
 800aaf2:	6031      	streq	r1, [r6, #0]
 800aaf4:	5162      	str	r2, [r4, r5]
 800aaf6:	604b      	str	r3, [r1, #4]
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f104 060b 	add.w	r6, r4, #11
 800aafe:	f000 fa9d 	bl	800b03c <__malloc_unlock>
 800ab02:	f026 0607 	bic.w	r6, r6, #7
 800ab06:	1d23      	adds	r3, r4, #4
 800ab08:	1af2      	subs	r2, r6, r3
 800ab0a:	d0b6      	beq.n	800aa7a <_malloc_r+0x22>
 800ab0c:	1b9b      	subs	r3, r3, r6
 800ab0e:	50a3      	str	r3, [r4, r2]
 800ab10:	e7b3      	b.n	800aa7a <_malloc_r+0x22>
 800ab12:	6862      	ldr	r2, [r4, #4]
 800ab14:	42a3      	cmp	r3, r4
 800ab16:	bf0c      	ite	eq
 800ab18:	6032      	streq	r2, [r6, #0]
 800ab1a:	605a      	strne	r2, [r3, #4]
 800ab1c:	e7ec      	b.n	800aaf8 <_malloc_r+0xa0>
 800ab1e:	4623      	mov	r3, r4
 800ab20:	6864      	ldr	r4, [r4, #4]
 800ab22:	e7b2      	b.n	800aa8a <_malloc_r+0x32>
 800ab24:	4634      	mov	r4, r6
 800ab26:	6876      	ldr	r6, [r6, #4]
 800ab28:	e7b9      	b.n	800aa9e <_malloc_r+0x46>
 800ab2a:	230c      	movs	r3, #12
 800ab2c:	603b      	str	r3, [r7, #0]
 800ab2e:	4638      	mov	r0, r7
 800ab30:	f000 fa84 	bl	800b03c <__malloc_unlock>
 800ab34:	e7a1      	b.n	800aa7a <_malloc_r+0x22>
 800ab36:	6025      	str	r5, [r4, #0]
 800ab38:	e7de      	b.n	800aaf8 <_malloc_r+0xa0>
 800ab3a:	bf00      	nop
 800ab3c:	20000510 	.word	0x20000510

0800ab40 <_realloc_r>:
 800ab40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab44:	4680      	mov	r8, r0
 800ab46:	4614      	mov	r4, r2
 800ab48:	460e      	mov	r6, r1
 800ab4a:	b921      	cbnz	r1, 800ab56 <_realloc_r+0x16>
 800ab4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab50:	4611      	mov	r1, r2
 800ab52:	f7ff bf81 	b.w	800aa58 <_malloc_r>
 800ab56:	b92a      	cbnz	r2, 800ab64 <_realloc_r+0x24>
 800ab58:	f7ff ff12 	bl	800a980 <_free_r>
 800ab5c:	4625      	mov	r5, r4
 800ab5e:	4628      	mov	r0, r5
 800ab60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab64:	f000 fa70 	bl	800b048 <_malloc_usable_size_r>
 800ab68:	4284      	cmp	r4, r0
 800ab6a:	4607      	mov	r7, r0
 800ab6c:	d802      	bhi.n	800ab74 <_realloc_r+0x34>
 800ab6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ab72:	d812      	bhi.n	800ab9a <_realloc_r+0x5a>
 800ab74:	4621      	mov	r1, r4
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7ff ff6e 	bl	800aa58 <_malloc_r>
 800ab7c:	4605      	mov	r5, r0
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	d0ed      	beq.n	800ab5e <_realloc_r+0x1e>
 800ab82:	42bc      	cmp	r4, r7
 800ab84:	4622      	mov	r2, r4
 800ab86:	4631      	mov	r1, r6
 800ab88:	bf28      	it	cs
 800ab8a:	463a      	movcs	r2, r7
 800ab8c:	f7ff f82a 	bl	8009be4 <memcpy>
 800ab90:	4631      	mov	r1, r6
 800ab92:	4640      	mov	r0, r8
 800ab94:	f7ff fef4 	bl	800a980 <_free_r>
 800ab98:	e7e1      	b.n	800ab5e <_realloc_r+0x1e>
 800ab9a:	4635      	mov	r5, r6
 800ab9c:	e7df      	b.n	800ab5e <_realloc_r+0x1e>

0800ab9e <__ssputs_r>:
 800ab9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba2:	688e      	ldr	r6, [r1, #8]
 800aba4:	429e      	cmp	r6, r3
 800aba6:	4682      	mov	sl, r0
 800aba8:	460c      	mov	r4, r1
 800abaa:	4690      	mov	r8, r2
 800abac:	461f      	mov	r7, r3
 800abae:	d838      	bhi.n	800ac22 <__ssputs_r+0x84>
 800abb0:	898a      	ldrh	r2, [r1, #12]
 800abb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abb6:	d032      	beq.n	800ac1e <__ssputs_r+0x80>
 800abb8:	6825      	ldr	r5, [r4, #0]
 800abba:	6909      	ldr	r1, [r1, #16]
 800abbc:	eba5 0901 	sub.w	r9, r5, r1
 800abc0:	6965      	ldr	r5, [r4, #20]
 800abc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abca:	3301      	adds	r3, #1
 800abcc:	444b      	add	r3, r9
 800abce:	106d      	asrs	r5, r5, #1
 800abd0:	429d      	cmp	r5, r3
 800abd2:	bf38      	it	cc
 800abd4:	461d      	movcc	r5, r3
 800abd6:	0553      	lsls	r3, r2, #21
 800abd8:	d531      	bpl.n	800ac3e <__ssputs_r+0xa0>
 800abda:	4629      	mov	r1, r5
 800abdc:	f7ff ff3c 	bl	800aa58 <_malloc_r>
 800abe0:	4606      	mov	r6, r0
 800abe2:	b950      	cbnz	r0, 800abfa <__ssputs_r+0x5c>
 800abe4:	230c      	movs	r3, #12
 800abe6:	f8ca 3000 	str.w	r3, [sl]
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	f04f 30ff 	mov.w	r0, #4294967295
 800abf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfa:	6921      	ldr	r1, [r4, #16]
 800abfc:	464a      	mov	r2, r9
 800abfe:	f7fe fff1 	bl	8009be4 <memcpy>
 800ac02:	89a3      	ldrh	r3, [r4, #12]
 800ac04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	6126      	str	r6, [r4, #16]
 800ac10:	6165      	str	r5, [r4, #20]
 800ac12:	444e      	add	r6, r9
 800ac14:	eba5 0509 	sub.w	r5, r5, r9
 800ac18:	6026      	str	r6, [r4, #0]
 800ac1a:	60a5      	str	r5, [r4, #8]
 800ac1c:	463e      	mov	r6, r7
 800ac1e:	42be      	cmp	r6, r7
 800ac20:	d900      	bls.n	800ac24 <__ssputs_r+0x86>
 800ac22:	463e      	mov	r6, r7
 800ac24:	6820      	ldr	r0, [r4, #0]
 800ac26:	4632      	mov	r2, r6
 800ac28:	4641      	mov	r1, r8
 800ac2a:	f7ff fe8f 	bl	800a94c <memmove>
 800ac2e:	68a3      	ldr	r3, [r4, #8]
 800ac30:	1b9b      	subs	r3, r3, r6
 800ac32:	60a3      	str	r3, [r4, #8]
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	4433      	add	r3, r6
 800ac38:	6023      	str	r3, [r4, #0]
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	e7db      	b.n	800abf6 <__ssputs_r+0x58>
 800ac3e:	462a      	mov	r2, r5
 800ac40:	f7ff ff7e 	bl	800ab40 <_realloc_r>
 800ac44:	4606      	mov	r6, r0
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1e1      	bne.n	800ac0e <__ssputs_r+0x70>
 800ac4a:	6921      	ldr	r1, [r4, #16]
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	f7ff fe97 	bl	800a980 <_free_r>
 800ac52:	e7c7      	b.n	800abe4 <__ssputs_r+0x46>

0800ac54 <_svfiprintf_r>:
 800ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac58:	4698      	mov	r8, r3
 800ac5a:	898b      	ldrh	r3, [r1, #12]
 800ac5c:	061b      	lsls	r3, r3, #24
 800ac5e:	b09d      	sub	sp, #116	; 0x74
 800ac60:	4607      	mov	r7, r0
 800ac62:	460d      	mov	r5, r1
 800ac64:	4614      	mov	r4, r2
 800ac66:	d50e      	bpl.n	800ac86 <_svfiprintf_r+0x32>
 800ac68:	690b      	ldr	r3, [r1, #16]
 800ac6a:	b963      	cbnz	r3, 800ac86 <_svfiprintf_r+0x32>
 800ac6c:	2140      	movs	r1, #64	; 0x40
 800ac6e:	f7ff fef3 	bl	800aa58 <_malloc_r>
 800ac72:	6028      	str	r0, [r5, #0]
 800ac74:	6128      	str	r0, [r5, #16]
 800ac76:	b920      	cbnz	r0, 800ac82 <_svfiprintf_r+0x2e>
 800ac78:	230c      	movs	r3, #12
 800ac7a:	603b      	str	r3, [r7, #0]
 800ac7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac80:	e0d1      	b.n	800ae26 <_svfiprintf_r+0x1d2>
 800ac82:	2340      	movs	r3, #64	; 0x40
 800ac84:	616b      	str	r3, [r5, #20]
 800ac86:	2300      	movs	r3, #0
 800ac88:	9309      	str	r3, [sp, #36]	; 0x24
 800ac8a:	2320      	movs	r3, #32
 800ac8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac90:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac94:	2330      	movs	r3, #48	; 0x30
 800ac96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae40 <_svfiprintf_r+0x1ec>
 800ac9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac9e:	f04f 0901 	mov.w	r9, #1
 800aca2:	4623      	mov	r3, r4
 800aca4:	469a      	mov	sl, r3
 800aca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acaa:	b10a      	cbz	r2, 800acb0 <_svfiprintf_r+0x5c>
 800acac:	2a25      	cmp	r2, #37	; 0x25
 800acae:	d1f9      	bne.n	800aca4 <_svfiprintf_r+0x50>
 800acb0:	ebba 0b04 	subs.w	fp, sl, r4
 800acb4:	d00b      	beq.n	800acce <_svfiprintf_r+0x7a>
 800acb6:	465b      	mov	r3, fp
 800acb8:	4622      	mov	r2, r4
 800acba:	4629      	mov	r1, r5
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff ff6e 	bl	800ab9e <__ssputs_r>
 800acc2:	3001      	adds	r0, #1
 800acc4:	f000 80aa 	beq.w	800ae1c <_svfiprintf_r+0x1c8>
 800acc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acca:	445a      	add	r2, fp
 800accc:	9209      	str	r2, [sp, #36]	; 0x24
 800acce:	f89a 3000 	ldrb.w	r3, [sl]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 80a2 	beq.w	800ae1c <_svfiprintf_r+0x1c8>
 800acd8:	2300      	movs	r3, #0
 800acda:	f04f 32ff 	mov.w	r2, #4294967295
 800acde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ace2:	f10a 0a01 	add.w	sl, sl, #1
 800ace6:	9304      	str	r3, [sp, #16]
 800ace8:	9307      	str	r3, [sp, #28]
 800acea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800acee:	931a      	str	r3, [sp, #104]	; 0x68
 800acf0:	4654      	mov	r4, sl
 800acf2:	2205      	movs	r2, #5
 800acf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acf8:	4851      	ldr	r0, [pc, #324]	; (800ae40 <_svfiprintf_r+0x1ec>)
 800acfa:	f7f5 fa71 	bl	80001e0 <memchr>
 800acfe:	9a04      	ldr	r2, [sp, #16]
 800ad00:	b9d8      	cbnz	r0, 800ad3a <_svfiprintf_r+0xe6>
 800ad02:	06d0      	lsls	r0, r2, #27
 800ad04:	bf44      	itt	mi
 800ad06:	2320      	movmi	r3, #32
 800ad08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad0c:	0711      	lsls	r1, r2, #28
 800ad0e:	bf44      	itt	mi
 800ad10:	232b      	movmi	r3, #43	; 0x2b
 800ad12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad16:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ad1c:	d015      	beq.n	800ad4a <_svfiprintf_r+0xf6>
 800ad1e:	9a07      	ldr	r2, [sp, #28]
 800ad20:	4654      	mov	r4, sl
 800ad22:	2000      	movs	r0, #0
 800ad24:	f04f 0c0a 	mov.w	ip, #10
 800ad28:	4621      	mov	r1, r4
 800ad2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad2e:	3b30      	subs	r3, #48	; 0x30
 800ad30:	2b09      	cmp	r3, #9
 800ad32:	d94e      	bls.n	800add2 <_svfiprintf_r+0x17e>
 800ad34:	b1b0      	cbz	r0, 800ad64 <_svfiprintf_r+0x110>
 800ad36:	9207      	str	r2, [sp, #28]
 800ad38:	e014      	b.n	800ad64 <_svfiprintf_r+0x110>
 800ad3a:	eba0 0308 	sub.w	r3, r0, r8
 800ad3e:	fa09 f303 	lsl.w	r3, r9, r3
 800ad42:	4313      	orrs	r3, r2
 800ad44:	9304      	str	r3, [sp, #16]
 800ad46:	46a2      	mov	sl, r4
 800ad48:	e7d2      	b.n	800acf0 <_svfiprintf_r+0x9c>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	1d19      	adds	r1, r3, #4
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	9103      	str	r1, [sp, #12]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	bfbb      	ittet	lt
 800ad56:	425b      	neglt	r3, r3
 800ad58:	f042 0202 	orrlt.w	r2, r2, #2
 800ad5c:	9307      	strge	r3, [sp, #28]
 800ad5e:	9307      	strlt	r3, [sp, #28]
 800ad60:	bfb8      	it	lt
 800ad62:	9204      	strlt	r2, [sp, #16]
 800ad64:	7823      	ldrb	r3, [r4, #0]
 800ad66:	2b2e      	cmp	r3, #46	; 0x2e
 800ad68:	d10c      	bne.n	800ad84 <_svfiprintf_r+0x130>
 800ad6a:	7863      	ldrb	r3, [r4, #1]
 800ad6c:	2b2a      	cmp	r3, #42	; 0x2a
 800ad6e:	d135      	bne.n	800addc <_svfiprintf_r+0x188>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	1d1a      	adds	r2, r3, #4
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	9203      	str	r2, [sp, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	bfb8      	it	lt
 800ad7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad80:	3402      	adds	r4, #2
 800ad82:	9305      	str	r3, [sp, #20]
 800ad84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae50 <_svfiprintf_r+0x1fc>
 800ad88:	7821      	ldrb	r1, [r4, #0]
 800ad8a:	2203      	movs	r2, #3
 800ad8c:	4650      	mov	r0, sl
 800ad8e:	f7f5 fa27 	bl	80001e0 <memchr>
 800ad92:	b140      	cbz	r0, 800ada6 <_svfiprintf_r+0x152>
 800ad94:	2340      	movs	r3, #64	; 0x40
 800ad96:	eba0 000a 	sub.w	r0, r0, sl
 800ad9a:	fa03 f000 	lsl.w	r0, r3, r0
 800ad9e:	9b04      	ldr	r3, [sp, #16]
 800ada0:	4303      	orrs	r3, r0
 800ada2:	3401      	adds	r4, #1
 800ada4:	9304      	str	r3, [sp, #16]
 800ada6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adaa:	4826      	ldr	r0, [pc, #152]	; (800ae44 <_svfiprintf_r+0x1f0>)
 800adac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adb0:	2206      	movs	r2, #6
 800adb2:	f7f5 fa15 	bl	80001e0 <memchr>
 800adb6:	2800      	cmp	r0, #0
 800adb8:	d038      	beq.n	800ae2c <_svfiprintf_r+0x1d8>
 800adba:	4b23      	ldr	r3, [pc, #140]	; (800ae48 <_svfiprintf_r+0x1f4>)
 800adbc:	bb1b      	cbnz	r3, 800ae06 <_svfiprintf_r+0x1b2>
 800adbe:	9b03      	ldr	r3, [sp, #12]
 800adc0:	3307      	adds	r3, #7
 800adc2:	f023 0307 	bic.w	r3, r3, #7
 800adc6:	3308      	adds	r3, #8
 800adc8:	9303      	str	r3, [sp, #12]
 800adca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adcc:	4433      	add	r3, r6
 800adce:	9309      	str	r3, [sp, #36]	; 0x24
 800add0:	e767      	b.n	800aca2 <_svfiprintf_r+0x4e>
 800add2:	fb0c 3202 	mla	r2, ip, r2, r3
 800add6:	460c      	mov	r4, r1
 800add8:	2001      	movs	r0, #1
 800adda:	e7a5      	b.n	800ad28 <_svfiprintf_r+0xd4>
 800addc:	2300      	movs	r3, #0
 800adde:	3401      	adds	r4, #1
 800ade0:	9305      	str	r3, [sp, #20]
 800ade2:	4619      	mov	r1, r3
 800ade4:	f04f 0c0a 	mov.w	ip, #10
 800ade8:	4620      	mov	r0, r4
 800adea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adee:	3a30      	subs	r2, #48	; 0x30
 800adf0:	2a09      	cmp	r2, #9
 800adf2:	d903      	bls.n	800adfc <_svfiprintf_r+0x1a8>
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d0c5      	beq.n	800ad84 <_svfiprintf_r+0x130>
 800adf8:	9105      	str	r1, [sp, #20]
 800adfa:	e7c3      	b.n	800ad84 <_svfiprintf_r+0x130>
 800adfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae00:	4604      	mov	r4, r0
 800ae02:	2301      	movs	r3, #1
 800ae04:	e7f0      	b.n	800ade8 <_svfiprintf_r+0x194>
 800ae06:	ab03      	add	r3, sp, #12
 800ae08:	9300      	str	r3, [sp, #0]
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <_svfiprintf_r+0x1f8>)
 800ae0e:	a904      	add	r1, sp, #16
 800ae10:	4638      	mov	r0, r7
 800ae12:	f3af 8000 	nop.w
 800ae16:	1c42      	adds	r2, r0, #1
 800ae18:	4606      	mov	r6, r0
 800ae1a:	d1d6      	bne.n	800adca <_svfiprintf_r+0x176>
 800ae1c:	89ab      	ldrh	r3, [r5, #12]
 800ae1e:	065b      	lsls	r3, r3, #25
 800ae20:	f53f af2c 	bmi.w	800ac7c <_svfiprintf_r+0x28>
 800ae24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae26:	b01d      	add	sp, #116	; 0x74
 800ae28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2c:	ab03      	add	r3, sp, #12
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	462a      	mov	r2, r5
 800ae32:	4b06      	ldr	r3, [pc, #24]	; (800ae4c <_svfiprintf_r+0x1f8>)
 800ae34:	a904      	add	r1, sp, #16
 800ae36:	4638      	mov	r0, r7
 800ae38:	f7ff f8b2 	bl	8009fa0 <_printf_i>
 800ae3c:	e7eb      	b.n	800ae16 <_svfiprintf_r+0x1c2>
 800ae3e:	bf00      	nop
 800ae40:	0800b6a0 	.word	0x0800b6a0
 800ae44:	0800b6aa 	.word	0x0800b6aa
 800ae48:	00000000 	.word	0x00000000
 800ae4c:	0800ab9f 	.word	0x0800ab9f
 800ae50:	0800b6a6 	.word	0x0800b6a6

0800ae54 <_sbrk_r>:
 800ae54:	b538      	push	{r3, r4, r5, lr}
 800ae56:	4d06      	ldr	r5, [pc, #24]	; (800ae70 <_sbrk_r+0x1c>)
 800ae58:	2300      	movs	r3, #0
 800ae5a:	4604      	mov	r4, r0
 800ae5c:	4608      	mov	r0, r1
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	f7f7 f9de 	bl	8002220 <_sbrk>
 800ae64:	1c43      	adds	r3, r0, #1
 800ae66:	d102      	bne.n	800ae6e <_sbrk_r+0x1a>
 800ae68:	682b      	ldr	r3, [r5, #0]
 800ae6a:	b103      	cbz	r3, 800ae6e <_sbrk_r+0x1a>
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	bd38      	pop	{r3, r4, r5, pc}
 800ae70:	20000518 	.word	0x20000518

0800ae74 <_raise_r>:
 800ae74:	291f      	cmp	r1, #31
 800ae76:	b538      	push	{r3, r4, r5, lr}
 800ae78:	4604      	mov	r4, r0
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	d904      	bls.n	800ae88 <_raise_r+0x14>
 800ae7e:	2316      	movs	r3, #22
 800ae80:	6003      	str	r3, [r0, #0]
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295
 800ae86:	bd38      	pop	{r3, r4, r5, pc}
 800ae88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ae8a:	b112      	cbz	r2, 800ae92 <_raise_r+0x1e>
 800ae8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae90:	b94b      	cbnz	r3, 800aea6 <_raise_r+0x32>
 800ae92:	4620      	mov	r0, r4
 800ae94:	f000 f830 	bl	800aef8 <_getpid_r>
 800ae98:	462a      	mov	r2, r5
 800ae9a:	4601      	mov	r1, r0
 800ae9c:	4620      	mov	r0, r4
 800ae9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aea2:	f000 b817 	b.w	800aed4 <_kill_r>
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d00a      	beq.n	800aec0 <_raise_r+0x4c>
 800aeaa:	1c59      	adds	r1, r3, #1
 800aeac:	d103      	bne.n	800aeb6 <_raise_r+0x42>
 800aeae:	2316      	movs	r3, #22
 800aeb0:	6003      	str	r3, [r0, #0]
 800aeb2:	2001      	movs	r0, #1
 800aeb4:	e7e7      	b.n	800ae86 <_raise_r+0x12>
 800aeb6:	2400      	movs	r4, #0
 800aeb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aebc:	4628      	mov	r0, r5
 800aebe:	4798      	blx	r3
 800aec0:	2000      	movs	r0, #0
 800aec2:	e7e0      	b.n	800ae86 <_raise_r+0x12>

0800aec4 <raise>:
 800aec4:	4b02      	ldr	r3, [pc, #8]	; (800aed0 <raise+0xc>)
 800aec6:	4601      	mov	r1, r0
 800aec8:	6818      	ldr	r0, [r3, #0]
 800aeca:	f7ff bfd3 	b.w	800ae74 <_raise_r>
 800aece:	bf00      	nop
 800aed0:	20000190 	.word	0x20000190

0800aed4 <_kill_r>:
 800aed4:	b538      	push	{r3, r4, r5, lr}
 800aed6:	4d07      	ldr	r5, [pc, #28]	; (800aef4 <_kill_r+0x20>)
 800aed8:	2300      	movs	r3, #0
 800aeda:	4604      	mov	r4, r0
 800aedc:	4608      	mov	r0, r1
 800aede:	4611      	mov	r1, r2
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	f7f7 f915 	bl	8002110 <_kill>
 800aee6:	1c43      	adds	r3, r0, #1
 800aee8:	d102      	bne.n	800aef0 <_kill_r+0x1c>
 800aeea:	682b      	ldr	r3, [r5, #0]
 800aeec:	b103      	cbz	r3, 800aef0 <_kill_r+0x1c>
 800aeee:	6023      	str	r3, [r4, #0]
 800aef0:	bd38      	pop	{r3, r4, r5, pc}
 800aef2:	bf00      	nop
 800aef4:	20000518 	.word	0x20000518

0800aef8 <_getpid_r>:
 800aef8:	f7f7 b902 	b.w	8002100 <_getpid>

0800aefc <__sread>:
 800aefc:	b510      	push	{r4, lr}
 800aefe:	460c      	mov	r4, r1
 800af00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af04:	f000 f8a8 	bl	800b058 <_read_r>
 800af08:	2800      	cmp	r0, #0
 800af0a:	bfab      	itete	ge
 800af0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800af0e:	89a3      	ldrhlt	r3, [r4, #12]
 800af10:	181b      	addge	r3, r3, r0
 800af12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800af16:	bfac      	ite	ge
 800af18:	6563      	strge	r3, [r4, #84]	; 0x54
 800af1a:	81a3      	strhlt	r3, [r4, #12]
 800af1c:	bd10      	pop	{r4, pc}

0800af1e <__swrite>:
 800af1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af22:	461f      	mov	r7, r3
 800af24:	898b      	ldrh	r3, [r1, #12]
 800af26:	05db      	lsls	r3, r3, #23
 800af28:	4605      	mov	r5, r0
 800af2a:	460c      	mov	r4, r1
 800af2c:	4616      	mov	r6, r2
 800af2e:	d505      	bpl.n	800af3c <__swrite+0x1e>
 800af30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af34:	2302      	movs	r3, #2
 800af36:	2200      	movs	r2, #0
 800af38:	f000 f868 	bl	800b00c <_lseek_r>
 800af3c:	89a3      	ldrh	r3, [r4, #12]
 800af3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af46:	81a3      	strh	r3, [r4, #12]
 800af48:	4632      	mov	r2, r6
 800af4a:	463b      	mov	r3, r7
 800af4c:	4628      	mov	r0, r5
 800af4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af52:	f000 b817 	b.w	800af84 <_write_r>

0800af56 <__sseek>:
 800af56:	b510      	push	{r4, lr}
 800af58:	460c      	mov	r4, r1
 800af5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af5e:	f000 f855 	bl	800b00c <_lseek_r>
 800af62:	1c43      	adds	r3, r0, #1
 800af64:	89a3      	ldrh	r3, [r4, #12]
 800af66:	bf15      	itete	ne
 800af68:	6560      	strne	r0, [r4, #84]	; 0x54
 800af6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af72:	81a3      	strheq	r3, [r4, #12]
 800af74:	bf18      	it	ne
 800af76:	81a3      	strhne	r3, [r4, #12]
 800af78:	bd10      	pop	{r4, pc}

0800af7a <__sclose>:
 800af7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af7e:	f000 b813 	b.w	800afa8 <_close_r>
	...

0800af84 <_write_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d07      	ldr	r5, [pc, #28]	; (800afa4 <_write_r+0x20>)
 800af88:	4604      	mov	r4, r0
 800af8a:	4608      	mov	r0, r1
 800af8c:	4611      	mov	r1, r2
 800af8e:	2200      	movs	r2, #0
 800af90:	602a      	str	r2, [r5, #0]
 800af92:	461a      	mov	r2, r3
 800af94:	f7f7 f8f3 	bl	800217e <_write>
 800af98:	1c43      	adds	r3, r0, #1
 800af9a:	d102      	bne.n	800afa2 <_write_r+0x1e>
 800af9c:	682b      	ldr	r3, [r5, #0]
 800af9e:	b103      	cbz	r3, 800afa2 <_write_r+0x1e>
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	20000518 	.word	0x20000518

0800afa8 <_close_r>:
 800afa8:	b538      	push	{r3, r4, r5, lr}
 800afaa:	4d06      	ldr	r5, [pc, #24]	; (800afc4 <_close_r+0x1c>)
 800afac:	2300      	movs	r3, #0
 800afae:	4604      	mov	r4, r0
 800afb0:	4608      	mov	r0, r1
 800afb2:	602b      	str	r3, [r5, #0]
 800afb4:	f7f7 f8ff 	bl	80021b6 <_close>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_close_r+0x1a>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_close_r+0x1a>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	20000518 	.word	0x20000518

0800afc8 <_fstat_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	; (800afe8 <_fstat_r+0x20>)
 800afcc:	2300      	movs	r3, #0
 800afce:	4604      	mov	r4, r0
 800afd0:	4608      	mov	r0, r1
 800afd2:	4611      	mov	r1, r2
 800afd4:	602b      	str	r3, [r5, #0]
 800afd6:	f7f7 f8fa 	bl	80021ce <_fstat>
 800afda:	1c43      	adds	r3, r0, #1
 800afdc:	d102      	bne.n	800afe4 <_fstat_r+0x1c>
 800afde:	682b      	ldr	r3, [r5, #0]
 800afe0:	b103      	cbz	r3, 800afe4 <_fstat_r+0x1c>
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	bd38      	pop	{r3, r4, r5, pc}
 800afe6:	bf00      	nop
 800afe8:	20000518 	.word	0x20000518

0800afec <_isatty_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	; (800b008 <_isatty_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f7 f8f9 	bl	80021ee <_isatty>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_isatty_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_isatty_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	20000518 	.word	0x20000518

0800b00c <_lseek_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	; (800b02c <_lseek_r+0x20>)
 800b010:	4604      	mov	r4, r0
 800b012:	4608      	mov	r0, r1
 800b014:	4611      	mov	r1, r2
 800b016:	2200      	movs	r2, #0
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7f7 f8f2 	bl	8002204 <_lseek>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_lseek_r+0x1e>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_lseek_r+0x1e>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	20000518 	.word	0x20000518

0800b030 <__malloc_lock>:
 800b030:	4801      	ldr	r0, [pc, #4]	; (800b038 <__malloc_lock+0x8>)
 800b032:	f7ff bc23 	b.w	800a87c <__retarget_lock_acquire_recursive>
 800b036:	bf00      	nop
 800b038:	2000050c 	.word	0x2000050c

0800b03c <__malloc_unlock>:
 800b03c:	4801      	ldr	r0, [pc, #4]	; (800b044 <__malloc_unlock+0x8>)
 800b03e:	f7ff bc1e 	b.w	800a87e <__retarget_lock_release_recursive>
 800b042:	bf00      	nop
 800b044:	2000050c 	.word	0x2000050c

0800b048 <_malloc_usable_size_r>:
 800b048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b04c:	1f18      	subs	r0, r3, #4
 800b04e:	2b00      	cmp	r3, #0
 800b050:	bfbc      	itt	lt
 800b052:	580b      	ldrlt	r3, [r1, r0]
 800b054:	18c0      	addlt	r0, r0, r3
 800b056:	4770      	bx	lr

0800b058 <_read_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	4d07      	ldr	r5, [pc, #28]	; (800b078 <_read_r+0x20>)
 800b05c:	4604      	mov	r4, r0
 800b05e:	4608      	mov	r0, r1
 800b060:	4611      	mov	r1, r2
 800b062:	2200      	movs	r2, #0
 800b064:	602a      	str	r2, [r5, #0]
 800b066:	461a      	mov	r2, r3
 800b068:	f7f7 f86c 	bl	8002144 <_read>
 800b06c:	1c43      	adds	r3, r0, #1
 800b06e:	d102      	bne.n	800b076 <_read_r+0x1e>
 800b070:	682b      	ldr	r3, [r5, #0]
 800b072:	b103      	cbz	r3, 800b076 <_read_r+0x1e>
 800b074:	6023      	str	r3, [r4, #0]
 800b076:	bd38      	pop	{r3, r4, r5, pc}
 800b078:	20000518 	.word	0x20000518

0800b07c <_init>:
 800b07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07e:	bf00      	nop
 800b080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b082:	bc08      	pop	{r3}
 800b084:	469e      	mov	lr, r3
 800b086:	4770      	bx	lr

0800b088 <_fini>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	bf00      	nop
 800b08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08e:	bc08      	pop	{r3}
 800b090:	469e      	mov	lr, r3
 800b092:	4770      	bx	lr
