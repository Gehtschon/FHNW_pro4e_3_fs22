
Spektrumsanalyse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08005a58  08005a58  00015a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d74  08005d74  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005d74  08005d74  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d74  08005d74  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d74  08005d74  00015d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d78  08005d78  00015d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001dc  08005f58  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08005f58  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f74  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b1e  00000000  00000000  00033180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001268  00000000  00000000  00035ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00036f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025898  00000000  00000000  00038018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001582e  00000000  00000000  0005d8b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b70  00000000  00000000  000730de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156c4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005698  00000000  00000000  00156ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005a40 	.word	0x08005a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08005a40 	.word	0x08005a40

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800027e:	2300      	movs	r3, #0
 8000280:	777b      	strb	r3, [r7, #29]
 8000282:	e01b      	b.n	80002bc <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000284:	2300      	movs	r3, #0
 8000286:	77bb      	strb	r3, [r7, #30]
 8000288:	e012      	b.n	80002b0 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800028a:	7fba      	ldrb	r2, [r7, #30]
 800028c:	7f7b      	ldrb	r3, [r7, #29]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	461a      	mov	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1899      	adds	r1, r3, r2
 8000298:	7fba      	ldrb	r2, [r7, #30]
 800029a:	7f7b      	ldrb	r3, [r7, #29]
 800029c:	7808      	ldrb	r0, [r1, #0]
 800029e:	4961      	ldr	r1, [pc, #388]	; (8000424 <AES_Encrypt+0x1b4>)
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	440a      	add	r2, r1
 80002a4:	4413      	add	r3, r2
 80002a6:	4602      	mov	r2, r0
 80002a8:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80002aa:	7fbb      	ldrb	r3, [r7, #30]
 80002ac:	3301      	adds	r3, #1
 80002ae:	77bb      	strb	r3, [r7, #30]
 80002b0:	7fbb      	ldrb	r3, [r7, #30]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d9e9      	bls.n	800028a <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 80002b6:	7f7b      	ldrb	r3, [r7, #29]
 80002b8:	3301      	adds	r3, #1
 80002ba:	777b      	strb	r3, [r7, #29]
 80002bc:	7f7b      	ldrb	r3, [r7, #29]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d9e0      	bls.n	8000284 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	77fb      	strb	r3, [r7, #31]
 80002c6:	e00b      	b.n	80002e0 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 80002c8:	7ffb      	ldrb	r3, [r7, #31]
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	441a      	add	r2, r3
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	3320      	adds	r3, #32
 80002d4:	443b      	add	r3, r7
 80002d6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 80002da:	7ffb      	ldrb	r3, [r7, #31]
 80002dc:	3301      	adds	r3, #1
 80002de:	77fb      	strb	r3, [r7, #31]
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	2b0f      	cmp	r3, #15
 80002e4:	d9f0      	bls.n	80002c8 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f89c 	bl	8000428 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 80002f0:	2301      	movs	r3, #1
 80002f2:	773b      	strb	r3, [r7, #28]
 80002f4:	e038      	b.n	8000368 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	777b      	strb	r3, [r7, #29]
 80002fa:	e01f      	b.n	800033c <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	77bb      	strb	r3, [r7, #30]
 8000300:	e016      	b.n	8000330 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000302:	7fba      	ldrb	r2, [r7, #30]
 8000304:	7f7b      	ldrb	r3, [r7, #29]
 8000306:	4947      	ldr	r1, [pc, #284]	; (8000424 <AES_Encrypt+0x1b4>)
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	440a      	add	r2, r1
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	7fbd      	ldrb	r5, [r7, #30]
 8000312:	7f7c      	ldrb	r4, [r7, #29]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f8bf 	bl	8000498 <AES_Sub_Byte>
 800031a:	4603      	mov	r3, r0
 800031c:	4619      	mov	r1, r3
 800031e:	4a41      	ldr	r2, [pc, #260]	; (8000424 <AES_Encrypt+0x1b4>)
 8000320:	00ab      	lsls	r3, r5, #2
 8000322:	4413      	add	r3, r2
 8000324:	4423      	add	r3, r4
 8000326:	460a      	mov	r2, r1
 8000328:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800032a:	7fbb      	ldrb	r3, [r7, #30]
 800032c:	3301      	adds	r3, #1
 800032e:	77bb      	strb	r3, [r7, #30]
 8000330:	7fbb      	ldrb	r3, [r7, #30]
 8000332:	2b03      	cmp	r3, #3
 8000334:	d9e5      	bls.n	8000302 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000336:	7f7b      	ldrb	r3, [r7, #29]
 8000338:	3301      	adds	r3, #1
 800033a:	777b      	strb	r3, [r7, #29]
 800033c:	7f7b      	ldrb	r3, [r7, #29]
 800033e:	2b03      	cmp	r3, #3
 8000340:	d9dc      	bls.n	80002fc <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000342:	f000 f8c7 	bl	80004d4 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000346:	f000 f909 	bl	800055c <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800034a:	f107 020c 	add.w	r2, r7, #12
 800034e:	7f3b      	ldrb	r3, [r7, #28]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f998 	bl	8000688 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f863 	bl	8000428 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000362:	7f3b      	ldrb	r3, [r7, #28]
 8000364:	3301      	adds	r3, #1
 8000366:	773b      	strb	r3, [r7, #28]
 8000368:	7f3b      	ldrb	r3, [r7, #28]
 800036a:	2b09      	cmp	r3, #9
 800036c:	d9c3      	bls.n	80002f6 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800036e:	2300      	movs	r3, #0
 8000370:	777b      	strb	r3, [r7, #29]
 8000372:	e01f      	b.n	80003b4 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000374:	2300      	movs	r3, #0
 8000376:	77bb      	strb	r3, [r7, #30]
 8000378:	e016      	b.n	80003a8 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800037a:	7fba      	ldrb	r2, [r7, #30]
 800037c:	7f7b      	ldrb	r3, [r7, #29]
 800037e:	4929      	ldr	r1, [pc, #164]	; (8000424 <AES_Encrypt+0x1b4>)
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	440a      	add	r2, r1
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	7fbd      	ldrb	r5, [r7, #30]
 800038a:	7f7c      	ldrb	r4, [r7, #29]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f883 	bl	8000498 <AES_Sub_Byte>
 8000392:	4603      	mov	r3, r0
 8000394:	4619      	mov	r1, r3
 8000396:	4a23      	ldr	r2, [pc, #140]	; (8000424 <AES_Encrypt+0x1b4>)
 8000398:	00ab      	lsls	r3, r5, #2
 800039a:	4413      	add	r3, r2
 800039c:	4423      	add	r3, r4
 800039e:	460a      	mov	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80003a2:	7fbb      	ldrb	r3, [r7, #30]
 80003a4:	3301      	adds	r3, #1
 80003a6:	77bb      	strb	r3, [r7, #30]
 80003a8:	7fbb      	ldrb	r3, [r7, #30]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d9e5      	bls.n	800037a <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 80003ae:	7f7b      	ldrb	r3, [r7, #29]
 80003b0:	3301      	adds	r3, #1
 80003b2:	777b      	strb	r3, [r7, #29]
 80003b4:	7f7b      	ldrb	r3, [r7, #29]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d9dc      	bls.n	8000374 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 80003ba:	f000 f88b 	bl	80004d4 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 80003be:	f107 020c 	add.w	r2, r7, #12
 80003c2:	7f3b      	ldrb	r3, [r7, #28]
 80003c4:	4611      	mov	r1, r2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f95e 	bl	8000688 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f829 	bl	8000428 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	777b      	strb	r3, [r7, #29]
 80003da:	e01a      	b.n	8000412 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80003dc:	2300      	movs	r3, #0
 80003de:	77bb      	strb	r3, [r7, #30]
 80003e0:	e011      	b.n	8000406 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80003e2:	7fb9      	ldrb	r1, [r7, #30]
 80003e4:	7f7a      	ldrb	r2, [r7, #29]
 80003e6:	7fb8      	ldrb	r0, [r7, #30]
 80003e8:	7f7b      	ldrb	r3, [r7, #29]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4403      	add	r3, r0
 80003ee:	4618      	mov	r0, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4403      	add	r3, r0
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <AES_Encrypt+0x1b4>)
 80003f6:	0089      	lsls	r1, r1, #2
 80003f8:	4401      	add	r1, r0
 80003fa:	440a      	add	r2, r1
 80003fc:	7812      	ldrb	r2, [r2, #0]
 80003fe:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000400:	7fbb      	ldrb	r3, [r7, #30]
 8000402:	3301      	adds	r3, #1
 8000404:	77bb      	strb	r3, [r7, #30]
 8000406:	7fbb      	ldrb	r3, [r7, #30]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d9ea      	bls.n	80003e2 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800040c:	7f7b      	ldrb	r3, [r7, #29]
 800040e:	3301      	adds	r3, #1
 8000410:	777b      	strb	r3, [r7, #29]
 8000412:	7f7b      	ldrb	r3, [r7, #29]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d9e1      	bls.n	80003dc <AES_Encrypt+0x16c>
		}
	}

}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	bdb0      	pop	{r4, r5, r7, pc}
 8000422:	bf00      	nop
 8000424:	200001f8 	.word	0x200001f8

08000428 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000430:	2300      	movs	r3, #0
 8000432:	73bb      	strb	r3, [r7, #14]
 8000434:	e024      	b.n	8000480 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8000436:	2300      	movs	r3, #0
 8000438:	73fb      	strb	r3, [r7, #15]
 800043a:	e01b      	b.n	8000474 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	7bbb      	ldrb	r3, [r7, #14]
 8000440:	4914      	ldr	r1, [pc, #80]	; (8000494 <AES_Add_Round_Key+0x6c>)
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	440a      	add	r2, r1
 8000446:	4413      	add	r3, r2
 8000448:	7818      	ldrb	r0, [r3, #0]
 800044a:	7bfa      	ldrb	r2, [r7, #15]
 800044c:	7bbb      	ldrb	r3, [r7, #14]
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	4413      	add	r3, r2
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	7819      	ldrb	r1, [r3, #0]
 800045a:	7bfa      	ldrb	r2, [r7, #15]
 800045c:	7bbb      	ldrb	r3, [r7, #14]
 800045e:	4041      	eors	r1, r0
 8000460:	b2c8      	uxtb	r0, r1
 8000462:	490c      	ldr	r1, [pc, #48]	; (8000494 <AES_Add_Round_Key+0x6c>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	440a      	add	r2, r1
 8000468:	4413      	add	r3, r2
 800046a:	4602      	mov	r2, r0
 800046c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3301      	adds	r3, #1
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d9e0      	bls.n	800043c <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800047a:	7bbb      	ldrb	r3, [r7, #14]
 800047c:	3301      	adds	r3, #1
 800047e:	73bb      	strb	r3, [r7, #14]
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d9d7      	bls.n	8000436 <AES_Add_Round_Key+0xe>
		}
	}
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	200001f8 	.word	0x200001f8

08000498 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 80004b0:	7bfa      	ldrb	r2, [r7, #15]
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	4906      	ldr	r1, [pc, #24]	; (80004d0 <AES_Sub_Byte+0x38>)
 80004b6:	0112      	lsls	r2, r2, #4
 80004b8:	440a      	add	r2, r1
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 80004c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000

080004d4 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <AES_Shift_Rows+0x84>)
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <AES_Shift_Rows+0x84>)
 80004e2:	795a      	ldrb	r2, [r3, #5]
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <AES_Shift_Rows+0x84>)
 80004e6:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AES_Shift_Rows+0x84>)
 80004ea:	799a      	ldrb	r2, [r3, #6]
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <AES_Shift_Rows+0x84>)
 80004ee:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <AES_Shift_Rows+0x84>)
 80004f2:	79da      	ldrb	r2, [r3, #7]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <AES_Shift_Rows+0x84>)
 80004f6:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <AES_Shift_Rows+0x84>)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <AES_Shift_Rows+0x84>)
 8000500:	7a1b      	ldrb	r3, [r3, #8]
 8000502:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <AES_Shift_Rows+0x84>)
 8000506:	7a9a      	ldrb	r2, [r3, #10]
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <AES_Shift_Rows+0x84>)
 800050a:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <AES_Shift_Rows+0x84>)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <AES_Shift_Rows+0x84>)
 8000514:	7a5b      	ldrb	r3, [r3, #9]
 8000516:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <AES_Shift_Rows+0x84>)
 800051a:	7ada      	ldrb	r2, [r3, #11]
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <AES_Shift_Rows+0x84>)
 800051e:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <AES_Shift_Rows+0x84>)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <AES_Shift_Rows+0x84>)
 8000528:	7bdb      	ldrb	r3, [r3, #15]
 800052a:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <AES_Shift_Rows+0x84>)
 800052e:	7b9a      	ldrb	r2, [r3, #14]
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <AES_Shift_Rows+0x84>)
 8000532:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <AES_Shift_Rows+0x84>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <AES_Shift_Rows+0x84>)
 800053a:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <AES_Shift_Rows+0x84>)
 800053e:	7b1a      	ldrb	r2, [r3, #12]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <AES_Shift_Rows+0x84>)
 8000542:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <AES_Shift_Rows+0x84>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7313      	strb	r3, [r2, #12]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200001f8 	.word	0x200001f8

0800055c <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000562:	2300      	movs	r3, #0
 8000564:	73bb      	strb	r3, [r7, #14]
 8000566:	e082      	b.n	800066e <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	e033      	b.n	80005d6 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800056e:	7bf9      	ldrb	r1, [r7, #15]
 8000570:	7bba      	ldrb	r2, [r7, #14]
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4843      	ldr	r0, [pc, #268]	; (8000684 <AES_Mix_Collums+0x128>)
 8000576:	0089      	lsls	r1, r1, #2
 8000578:	4401      	add	r1, r0
 800057a:	440a      	add	r2, r1
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	3310      	adds	r3, #16
 8000580:	443b      	add	r3, r7
 8000582:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 8000586:	7bfa      	ldrb	r2, [r7, #15]
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	493e      	ldr	r1, [pc, #248]	; (8000684 <AES_Mix_Collums+0x128>)
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	440a      	add	r2, r1
 8000590:	4413      	add	r3, r2
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	0052      	lsls	r2, r2, #1
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	3310      	adds	r3, #16
 800059c:	443b      	add	r3, r7
 800059e:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	4937      	ldr	r1, [pc, #220]	; (8000684 <AES_Mix_Collums+0x128>)
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	440a      	add	r2, r1
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da0c      	bge.n	80005d0 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	3310      	adds	r3, #16
 80005ba:	443b      	add	r3, r7
 80005bc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f082 021b 	eor.w	r2, r2, #27
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	3310      	adds	r3, #16
 80005ca:	443b      	add	r3, r7
 80005cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	3301      	adds	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d9c8      	bls.n	800056e <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80005dc:	793a      	ldrb	r2, [r7, #4]
 80005de:	7a7b      	ldrb	r3, [r7, #9]
 80005e0:	4053      	eors	r3, r2
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	4053      	eors	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	7abb      	ldrb	r3, [r7, #10]
 80005ec:	4053      	eors	r3, r2
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	7afa      	ldrb	r2, [r7, #11]
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	404a      	eors	r2, r1
 80005f6:	b2d1      	uxtb	r1, r2
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <AES_Mix_Collums+0x128>)
 80005fa:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 80005fc:	7a3a      	ldrb	r2, [r7, #8]
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	4053      	eors	r3, r2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	7abb      	ldrb	r3, [r7, #10]
 8000606:	4053      	eors	r3, r2
 8000608:	b2da      	uxtb	r2, r3
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	4053      	eors	r3, r2
 800060e:	b2d9      	uxtb	r1, r3
 8000610:	7afa      	ldrb	r2, [r7, #11]
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	404a      	eors	r2, r1
 8000616:	b2d1      	uxtb	r1, r2
 8000618:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <AES_Mix_Collums+0x128>)
 800061a:	4413      	add	r3, r2
 800061c:	460a      	mov	r2, r1
 800061e:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8000620:	7a3a      	ldrb	r2, [r7, #8]
 8000622:	7a7b      	ldrb	r3, [r7, #9]
 8000624:	4053      	eors	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	4053      	eors	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	4053      	eors	r3, r2
 8000632:	b2d9      	uxtb	r1, r3
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	404a      	eors	r2, r1
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <AES_Mix_Collums+0x128>)
 800063e:	4413      	add	r3, r2
 8000640:	460a      	mov	r2, r1
 8000642:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8000644:	7a3a      	ldrb	r2, [r7, #8]
 8000646:	793b      	ldrb	r3, [r7, #4]
 8000648:	4053      	eors	r3, r2
 800064a:	b2da      	uxtb	r2, r3
 800064c:	7a7b      	ldrb	r3, [r7, #9]
 800064e:	4053      	eors	r3, r2
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7abb      	ldrb	r3, [r7, #10]
 8000654:	4053      	eors	r3, r2
 8000656:	b2d9      	uxtb	r1, r3
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	404a      	eors	r2, r1
 800065e:	b2d1      	uxtb	r1, r2
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <AES_Mix_Collums+0x128>)
 8000662:	4413      	add	r3, r2
 8000664:	460a      	mov	r2, r1
 8000666:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	3301      	adds	r3, #1
 800066c:	73bb      	strb	r3, [r7, #14]
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2b03      	cmp	r3, #3
 8000672:	f67f af79 	bls.w	8000568 <AES_Mix_Collums+0xc>
	}
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	200001f8 	.word	0x200001f8

08000688 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	e00c      	b.n	80006b4 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	330c      	adds	r3, #12
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	441a      	add	r2, r3
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	3318      	adds	r3, #24
 80006a8:	443b      	add	r3, r7
 80006aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	3301      	adds	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d9ef      	bls.n	800069a <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80006ba:	7b3b      	ldrb	r3, [r7, #12]
 80006bc:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80006ca:	7d3b      	ldrb	r3, [r7, #20]
 80006cc:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	e012      	b.n	80006fa <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	3318      	adds	r3, #24
 80006d8:	443b      	add	r3, r7
 80006da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006de:	7dfc      	ldrb	r4, [r7, #23]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fed9 	bl	8000498 <AES_Sub_Byte>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	f104 0318 	add.w	r3, r4, #24
 80006ee:	443b      	add	r3, r7
 80006f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	3301      	adds	r3, #1
 80006f8:	75fb      	strb	r3, [r7, #23]
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d9e9      	bls.n	80006d4 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000700:	2301      	movs	r3, #1
 8000702:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000704:	e010      	b.n	8000728 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000706:	7d7b      	ldrb	r3, [r7, #21]
 8000708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800070c:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800070e:	7d7b      	ldrb	r3, [r7, #21]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000714:	7cfb      	ldrb	r3, [r7, #19]
 8000716:	2b80      	cmp	r3, #128	; 0x80
 8000718:	d103      	bne.n	8000722 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800071a:	7d7b      	ldrb	r3, [r7, #21]
 800071c:	f083 031b 	eor.w	r3, r3, #27
 8000720:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	3b01      	subs	r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d1eb      	bne.n	8000706 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800072e:	7b3a      	ldrb	r2, [r7, #12]
 8000730:	7d7b      	ldrb	r3, [r7, #21]
 8000732:	4053      	eors	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000738:	2300      	movs	r3, #0
 800073a:	75fb      	strb	r3, [r7, #23]
 800073c:	e02f      	b.n	800079e <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800073e:	2300      	movs	r3, #0
 8000740:	75bb      	strb	r3, [r7, #22]
 8000742:	e026      	b.n	8000792 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000744:	7dba      	ldrb	r2, [r7, #22]
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	4413      	add	r3, r2
 8000752:	7819      	ldrb	r1, [r3, #0]
 8000754:	7dbb      	ldrb	r3, [r7, #22]
 8000756:	3318      	adds	r3, #24
 8000758:	443b      	add	r3, r7
 800075a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800075e:	7db8      	ldrb	r0, [r7, #22]
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4403      	add	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4403      	add	r3, r0
 800076c:	404a      	eors	r2, r1
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000772:	7dba      	ldrb	r2, [r7, #22]
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	461a      	mov	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	441a      	add	r2, r3
 8000780:	7dbb      	ldrb	r3, [r7, #22]
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	3318      	adds	r3, #24
 8000786:	443b      	add	r3, r7
 8000788:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800078c:	7dbb      	ldrb	r3, [r7, #22]
 800078e:	3301      	adds	r3, #1
 8000790:	75bb      	strb	r3, [r7, #22]
 8000792:	7dbb      	ldrb	r3, [r7, #22]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d9d5      	bls.n	8000744 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	3301      	adds	r3, #1
 800079c:	75fb      	strb	r3, [r7, #23]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d9cc      	bls.n	800073e <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}
	...

080007b0 <Encrypt_Payload>:
extern unsigned char NwkSkey[16];
extern unsigned char AppSkey[16];
extern unsigned char DevAddr[4];

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	461a      	mov	r2, r3
 80007bc:	460b      	mov	r3, r1
 80007be:	72fb      	strb	r3, [r7, #11]
 80007c0:	4613      	mov	r3, r2
 80007c2:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80007d6:	7afb      	ldrb	r3, [r7, #11]
 80007d8:	091b      	lsrs	r3, r3, #4
 80007da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 80007e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d004      	beq.n	80007fa <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 80007f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007f4:	3301      	adds	r3, #1
 80007f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 80007fa:	2301      	movs	r3, #1
 80007fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000800:	e07e      	b.n	8000900 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000802:	2301      	movs	r3, #1
 8000804:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000812:	2300      	movs	r3, #0
 8000814:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000816:	7abb      	ldrb	r3, [r7, #10]
 8000818:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <Encrypt_Payload+0x168>)
 800081c:	78db      	ldrb	r3, [r3, #3]
 800081e:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000820:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <Encrypt_Payload+0x168>)
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <Encrypt_Payload+0x168>)
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800082c:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <Encrypt_Payload+0x168>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2db      	uxtb	r3, r3
 800083e:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A,AppSkey);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	492f      	ldr	r1, [pc, #188]	; (800091c <Encrypt_Payload+0x16c>)
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fd05 	bl	8000270 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000866:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800086a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800086e:	429a      	cmp	r2, r3
 8000870:	d01c      	beq.n	80008ac <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000878:	e013      	b.n	80008a2 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000882:	3328      	adds	r3, #40	; 0x28
 8000884:	443b      	add	r3, r7
 8000886:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800088a:	4053      	eors	r3, r2
 800088c:	b2da      	uxtb	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	701a      	strb	r2, [r3, #0]
				Data++;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8000898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800089c:	3301      	adds	r3, #1
 800089e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d9e7      	bls.n	800087a <Encrypt_Payload+0xca>
 80008aa:	e024      	b.n	80008f6 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 80008ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 80008b4:	2310      	movs	r3, #16
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008c0:	e013      	b.n	80008ea <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008ca:	3328      	adds	r3, #40	; 0x28
 80008cc:	443b      	add	r3, r7
 80008ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d2:	4053      	eors	r3, r2
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	701a      	strb	r2, [r3, #0]
				Data++;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80008e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008e4:	3301      	adds	r3, #1
 80008e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3e5      	bcc.n	80008c2 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 80008f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008fa:	3301      	adds	r3, #1
 80008fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000900:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000904:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000908:	429a      	cmp	r2, r3
 800090a:	f67f af7a 	bls.w	8000802 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000228 	.word	0x20000228
 800091c:	20000218 	.word	0x20000218

08000920 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b09b      	sub	sp, #108	; 0x6c
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000930:	4bb8      	ldr	r3, [pc, #736]	; (8000c14 <Calculate_MIC+0x2f4>)
 8000932:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800093c:	4bb5      	ldr	r3, [pc, #724]	; (8000c14 <Calculate_MIC+0x2f4>)
 800093e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000948:	4bb2      	ldr	r3, [pc, #712]	; (8000c14 <Calculate_MIC+0x2f4>)
 800094a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800094e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000954:	4baf      	ldr	r3, [pc, #700]	; (8000c14 <Calculate_MIC+0x2f4>)
 8000956:	f107 0414 	add.w	r4, r7, #20
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 800096c:	2301      	movs	r3, #1
 800096e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000972:	2349      	movs	r3, #73	; 0x49
 8000974:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 8000990:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000994:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8000998:	4b9f      	ldr	r3, [pc, #636]	; (8000c18 <Calculate_MIC+0x2f8>)
 800099a:	78db      	ldrb	r3, [r3, #3]
 800099c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 80009a0:	4b9d      	ldr	r3, [pc, #628]	; (8000c18 <Calculate_MIC+0x2f8>)
 80009a2:	789b      	ldrb	r3, [r3, #2]
 80009a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 80009a8:	4b9b      	ldr	r3, [pc, #620]	; (8000c18 <Calculate_MIC+0x2f8>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 80009b0:	4b99      	ldr	r3, [pc, #612]	; (8000c18 <Calculate_MIC+0x2f8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 80009ca:	2300      	movs	r3, #0
 80009cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	091b      	lsrs	r3, r3, #4
 80009e6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 80009f4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d004      	beq.n	8000a06 <Calculate_MIC+0xe6>
	{
		Number_of_Blocks++;
 80009fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000a00:	3301      	adds	r3, #1
 8000a02:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2);
 8000a06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000a0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f905 	bl	8000c20 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B,NwkSkey);
 8000a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1a:	4980      	ldr	r1, [pc, #512]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fc27 	bl	8000270 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a28:	e010      	b.n	8000a4c <Calculate_MIC+0x12c>
	{
		Old_Data[i] = Block_B[i];
 8000a2a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a32:	3268      	adds	r2, #104	; 0x68
 8000a34:	443a      	add	r2, r7
 8000a36:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000a3a:	3368      	adds	r3, #104	; 0x68
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000a42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a46:	3301      	adds	r3, #1
 8000a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d9ea      	bls.n	8000a2a <Calculate_MIC+0x10a>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000a54:	e043      	b.n	8000ade <Calculate_MIC+0x1be>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a5c:	e00f      	b.n	8000a7e <Calculate_MIC+0x15e>
		{
			New_Data[i] = *Data;
 8000a5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	3368      	adds	r3, #104	; 0x68
 8000a68:	443b      	add	r3, r7
 8000a6a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000a74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d9eb      	bls.n	8000a5e <Calculate_MIC+0x13e>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000a86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f94f 	bl	8000d34 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data,NwkSkey);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4960      	ldr	r1, [pc, #384]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fbe7 	bl	8000270 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000aa8:	e010      	b.n	8000acc <Calculate_MIC+0x1ac>
		{
			Old_Data[i] = New_Data[i];
 8000aaa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000aae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ab2:	3268      	adds	r2, #104	; 0x68
 8000ab4:	443a      	add	r2, r7
 8000ab6:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000aba:	3368      	adds	r3, #104	; 0x68
 8000abc:	443b      	add	r3, r7
 8000abe:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000acc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d9ea      	bls.n	8000aaa <Calculate_MIC+0x18a>
		}

		//Raise Block counter
		Block_Counter++;
 8000ad4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000ad8:	3301      	adds	r3, #1
 8000ada:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000ade:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000ae2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d3b5      	bcc.n	8000a56 <Calculate_MIC+0x136>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000aea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d12e      	bne.n	8000b50 <Calculate_MIC+0x230>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000af8:	e00f      	b.n	8000b1a <Calculate_MIC+0x1fa>
		{
			New_Data[i] = *Data;
 8000afa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	3368      	adds	r3, #104	; 0x68
 8000b04:	443b      	add	r3, r7
 8000b06:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000b10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b14:	3301      	adds	r3, #1
 8000b16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d9eb      	bls.n	8000afa <Calculate_MIC+0x1da>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000b22:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f901 	bl	8000d34 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000b32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f8f9 	bl	8000d34 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4935      	ldr	r1, [pc, #212]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb91 	bl	8000270 <AES_Encrypt>
 8000b4e:	e04d      	b.n	8000bec <Calculate_MIC+0x2cc>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b56:	e02f      	b.n	8000bb8 <Calculate_MIC+0x298>
		{
			if(i < Incomplete_Block_Size)
 8000b58:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b5c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20a      	bcs.n	8000b7a <Calculate_MIC+0x25a>
			{
				New_Data[i] = *Data;
 8000b64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	3368      	adds	r3, #104	; 0x68
 8000b6e:	443b      	add	r3, r7
 8000b70:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000b7a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b7e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d106      	bne.n	8000b94 <Calculate_MIC+0x274>
			{
				New_Data[i] = 0x80;
 8000b86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b8a:	3368      	adds	r3, #104	; 0x68
 8000b8c:	443b      	add	r3, r7
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000b94:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b98:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d906      	bls.n	8000bae <Calculate_MIC+0x28e>
			{
				New_Data[i] = 0x00;
 8000ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ba4:	3368      	adds	r3, #104	; 0x68
 8000ba6:	443b      	add	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d9cb      	bls.n	8000b58 <Calculate_MIC+0x238>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000bc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f8b2 	bl	8000d34 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000bd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f8aa 	bl	8000d34 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	490d      	ldr	r1, [pc, #52]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fb42 	bl	8000270 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000bec:	7d3a      	ldrb	r2, [r7, #20]
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	7d7a      	ldrb	r2, [r7, #21]
 8000bf8:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	7dba      	ldrb	r2, [r7, #22]
 8000c00:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3303      	adds	r3, #3
 8000c06:	7dfa      	ldrb	r2, [r7, #23]
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	376c      	adds	r7, #108	; 0x6c
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08005a58 	.word	0x08005a58
 8000c18:	20000228 	.word	0x20000228
 8000c1c:	20000208 	.word	0x20000208

08000c20 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1,NwkSkey);
 8000c2a:	4926      	ldr	r1, [pc, #152]	; (8000cc4 <Generate_Keys+0xa4>)
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fb1f 	bl	8000270 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da02      	bge.n	8000c42 <Generate_Keys+0x22>
	{
		MSB_Key = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73bb      	strb	r3, [r7, #14]
 8000c40:	e001      	b.n	8000c46 <Generate_Keys+0x26>
	}
	else
	{
		MSB_Key = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f83e 	bl	8000cc8 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d109      	bne.n	8000c66 <Generate_Keys+0x46>
	{
		K1[15] = K1[15] ^ 0x87;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	330f      	adds	r3, #15
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	320f      	adds	r2, #15
 8000c5c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000c60:	43db      	mvns	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00a      	b.n	8000c82 <Generate_Keys+0x62>
	{
		K2[i] = K1[i];
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	441a      	add	r2, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	440b      	add	r3, r1
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d9f1      	bls.n	8000c6c <Generate_Keys+0x4c>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da02      	bge.n	8000c98 <Generate_Keys+0x78>
	{
		MSB_Key = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73bb      	strb	r3, [r7, #14]
 8000c96:	e001      	b.n	8000c9c <Generate_Keys+0x7c>
	}
	else
	{
		MSB_Key = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8000c9c:	6838      	ldr	r0, [r7, #0]
 8000c9e:	f000 f813 	bl	8000cc8 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d109      	bne.n	8000cbc <Generate_Keys+0x9c>
	{
		K2[15] = K2[15] ^ 0x87;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	330f      	adds	r3, #15
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	320f      	adds	r2, #15
 8000cb2:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	7013      	strb	r3, [r2, #0]
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000208 	.word	0x20000208

08000cc8 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e022      	b.n	8000d20 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b0e      	cmp	r3, #14
 8000cde:	d80d      	bhi.n	8000cfc <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da02      	bge.n	8000cf6 <Shift_Left+0x2e>
			{
				Overflow = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73bb      	strb	r3, [r7, #14]
 8000cf4:	e004      	b.n	8000d00 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e001      	b.n	8000d00 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b2d9      	uxtb	r1, r3
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	7bba      	ldrb	r2, [r7, #14]
 8000d14:	440a      	add	r2, r1
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d9d9      	bls.n	8000cda <Shift_Left+0x12>
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e010      	b.n	8000d66 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	7819      	ldrb	r1, [r3, #0]
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4403      	add	r3, r0
 8000d5a:	404a      	eors	r2, r1
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3301      	adds	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d9eb      	bls.n	8000d44 <XOR+0x10>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <rfm95_write>:

	return true;
}

static bool rfm95_write(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t value) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
 8000d82:	460b      	mov	r3, r1
 8000d84:	70fb      	strb	r3, [r7, #3]
 8000d86:	4613      	mov	r3, r2
 8000d88:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6858      	ldr	r0, [r3, #4]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	891b      	ldrh	r3, [r3, #8]
 8000d92:	2200      	movs	r2, #0
 8000d94:	4619      	mov	r1, r3
 8000d96:	f001 fa41 	bl	800221c <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8000d9a:	78fb      	ldrb	r3, [r7, #3]
 8000d9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	733b      	strb	r3, [r7, #12]
 8000da4:	78bb      	ldrb	r3, [r7, #2]
 8000da6:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6818      	ldr	r0, [r3, #0]
 8000dac:	f107 010c 	add.w	r1, r7, #12
 8000db0:	230a      	movs	r3, #10
 8000db2:	2202      	movs	r2, #2
 8000db4:	f002 fee5 	bl	8003b82 <HAL_SPI_Transmit>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <rfm95_write+0x48>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e008      	b.n	8000dd4 <rfm95_write+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6858      	ldr	r0, [r3, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	891b      	ldrh	r3, [r3, #8]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f001 fa25 	bl	800221c <HAL_GPIO_WritePin>

	return true;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <rfm95_send_package>:

	return true;
}

static bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data,
		size_t length, uint8_t channel) {
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60f8      	str	r0, [r7, #12]
 8000de4:	60b9      	str	r1, [r7, #8]
 8000de6:	607a      	str	r2, [r7, #4]
 8000de8:	70fb      	strb	r3, [r7, #3]
	assert(channel < 8);
 8000dea:	78fb      	ldrb	r3, [r7, #3]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d905      	bls.n	8000dfc <rfm95_send_package+0x20>
 8000df0:	4b86      	ldr	r3, [pc, #536]	; (800100c <rfm95_send_package+0x230>)
 8000df2:	4a87      	ldr	r2, [pc, #540]	; (8001010 <rfm95_send_package+0x234>)
 8000df4:	21e4      	movs	r1, #228	; 0xe4
 8000df6:	4887      	ldr	r0, [pc, #540]	; (8001014 <rfm95_send_package+0x238>)
 8000df8:	f003 fdd8 	bl	80049ac <__assert_func>

	uint32_t tick_start;

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000dfc:	2281      	movs	r2, #129	; 0x81
 8000dfe:	2101      	movs	r1, #1
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff ffba 	bl	8000d7a <rfm95_write>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f083 0301 	eor.w	r3, r3, #1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <rfm95_send_package+0x3a>
	RFM95_REGISTER_OP_MODE_LORA_STANDBY))
		return false;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e0f6      	b.n	8001004 <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 8000e16:	f000 ff21 	bl	8001c5c <HAL_GetTick>
 8000e1a:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8000e1c:	e00d      	b.n	8000e3a <rfm95_send_package+0x5e>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - tick_start) >= RFM95_WAKEUP_TIMEOUT) {
 8000e1e:	f000 ff1d 	bl	8001c5c <HAL_GetTick>
 8000e22:	4602      	mov	r2, r0
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	2b09      	cmp	r3, #9
 8000e2a:	d906      	bls.n	8000e3a <rfm95_send_package+0x5e>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2101      	movs	r1, #1
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ffa2 	bl	8000d7a <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e0e4      	b.n	8001004 <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	69da      	ldr	r2, [r3, #28]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	8c1b      	ldrh	r3, [r3, #32]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4610      	mov	r0, r2
 8000e46:	f001 f9d1 	bl	80021ec <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0e6      	beq.n	8000e1e <rfm95_send_package+0x42>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_FR_MSB,
 8000e50:	78fa      	ldrb	r2, [r7, #3]
 8000e52:	4971      	ldr	r1, [pc, #452]	; (8001018 <rfm95_send_package+0x23c>)
 8000e54:	4613      	mov	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	4413      	add	r3, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2106      	movs	r1, #6
 8000e62:	68f8      	ldr	r0, [r7, #12]
 8000e64:	f7ff ff89 	bl	8000d7a <rfm95_write>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f083 0301 	eor.w	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <rfm95_send_package+0x9c>
			eu863_lora_frequency[channel][0]))
		return false;
 8000e74:	2300      	movs	r3, #0
 8000e76:	e0c5      	b.n	8001004 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_MID,
 8000e78:	78fa      	ldrb	r2, [r7, #3]
 8000e7a:	4967      	ldr	r1, [pc, #412]	; (8001018 <rfm95_send_package+0x23c>)
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	4413      	add	r3, r2
 8000e82:	440b      	add	r3, r1
 8000e84:	3301      	adds	r3, #1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	2107      	movs	r1, #7
 8000e8c:	68f8      	ldr	r0, [r7, #12]
 8000e8e:	f7ff ff74 	bl	8000d7a <rfm95_write>
 8000e92:	4603      	mov	r3, r0
 8000e94:	f083 0301 	eor.w	r3, r3, #1
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <rfm95_send_package+0xc6>
			eu863_lora_frequency[channel][1]))
		return false;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e0b0      	b.n	8001004 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_LSB,
 8000ea2:	78fa      	ldrb	r2, [r7, #3]
 8000ea4:	495c      	ldr	r1, [pc, #368]	; (8001018 <rfm95_send_package+0x23c>)
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	4413      	add	r3, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	3302      	adds	r3, #2
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f7ff ff5f 	bl	8000d7a <rfm95_write>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	f083 0301 	eor.w	r3, r3, #1
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <rfm95_send_package+0xf0>
			eu863_lora_frequency[channel][2]))
		return false;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	e09b      	b.n	8001004 <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 8000ecc:	2272      	movs	r2, #114	; 0x72
 8000ece:	211d      	movs	r1, #29
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ff52 	bl	8000d7a <rfm95_write>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	f083 0301 	eor.w	r3, r3, #1
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <rfm95_send_package+0x10a>
		return false;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e08e      	b.n	8001004 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 8000ee6:	2274      	movs	r2, #116	; 0x74
 8000ee8:	211e      	movs	r1, #30
 8000eea:	68f8      	ldr	r0, [r7, #12]
 8000eec:	f7ff ff45 	bl	8000d7a <rfm95_write>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f083 0301 	eor.w	r3, r3, #1
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <rfm95_send_package+0x124>
		return false;
 8000efc:	2300      	movs	r3, #0
 8000efe:	e081      	b.n	8001004 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 8000f00:	2204      	movs	r2, #4
 8000f02:	2126      	movs	r1, #38	; 0x26
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f7ff ff38 	bl	8000d7a <rfm95_write>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	f083 0301 	eor.w	r3, r3, #1
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <rfm95_send_package+0x13e>
		return false;
 8000f16:	2300      	movs	r3, #0
 8000f18:	e074      	b.n	8001004 <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2122      	movs	r1, #34	; 0x22
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff ff29 	bl	8000d7a <rfm95_write>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f083 0301 	eor.w	r3, r3, #1
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <rfm95_send_package+0x15c>
		return false;
 8000f34:	2300      	movs	r3, #0
 8000f36:	e065      	b.n	8001004 <rfm95_send_package+0x228>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	210d      	movs	r1, #13
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f7ff ff1c 	bl	8000d7a <rfm95_write>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <rfm95_send_package+0x176>
		return false;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e058      	b.n	8001004 <rfm95_send_package+0x228>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
 8000f56:	e00b      	b.n	8000f70 <rfm95_send_package+0x194>
		rfm95_write(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	461a      	mov	r2, r3
 8000f62:	2100      	movs	r1, #0
 8000f64:	68f8      	ldr	r0, [r7, #12]
 8000f66:	f7ff ff08 	bl	8000d7a <rfm95_write>
	for (size_t i = 0; i < length; i++) {
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d3ef      	bcc.n	8000f58 <rfm95_send_package+0x17c>
	}

	if (!rfm95_write(handle, RFM95_REGISTER_DIO_MAPPING_1,
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	2140      	movs	r1, #64	; 0x40
 8000f7c:	68f8      	ldr	r0, [r7, #12]
 8000f7e:	f7ff fefc 	bl	8000d7a <rfm95_write>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f083 0301 	eor.w	r3, r3, #1
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <rfm95_send_package+0x1b6>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	e038      	b.n	8001004 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000f92:	2283      	movs	r2, #131	; 0x83
 8000f94:	2101      	movs	r1, #1
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f7ff feef 	bl	8000d7a <rfm95_write>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f083 0301 	eor.w	r3, r3, #1
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <rfm95_send_package+0x1d0>
	RFM95_REGISTER_OP_MODE_LORA_TX))
		return false;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	e02b      	b.n	8001004 <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 8000fac:	f000 fe56 	bl	8001c5c <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8000fb2:	e00e      	b.n	8000fd2 <rfm95_send_package+0x1f6>
		if ((HAL_GetTick() - tick_start) >= RFM95_SEND_TIMEOUT) {
 8000fb4:	f000 fe52 	bl	8001c5c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000fc2:	d306      	bcc.n	8000fd2 <rfm95_send_package+0x1f6>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	68f8      	ldr	r0, [r7, #12]
 8000fca:	f7ff fed6 	bl	8000d7a <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	e018      	b.n	8001004 <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	695a      	ldr	r2, [r3, #20]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	8b1b      	ldrh	r3, [r3, #24]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4610      	mov	r0, r2
 8000fde:	f001 f905 	bl	80021ec <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0e5      	beq.n	8000fb4 <rfm95_send_package+0x1d8>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2101      	movs	r1, #1
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	f7ff fec4 	bl	8000d7a <rfm95_write>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	f083 0301 	eor.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <rfm95_send_package+0x226>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e000      	b.n	8001004 <rfm95_send_package+0x228>

	return true;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	08005bd4 	.word	0x08005bd4
 8001010:	08005c3c 	.word	0x08005c3c
 8001014:	08005a9c 	.word	0x08005a9c
 8001018:	08005c24 	.word	0x08005c24

0800101c <rfm95_send_data_groundstation>:

bool rfm95_send_data_groundstation(rfm95_handle_t *handle) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
	//size_t length = LENGHT_GROUNDSTATION;
//	uint8_t ident = IDENT;
//	uint8_t rfm_data[LENGHT_GROUNDSTATION];
//	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
	unsigned long latitude = handle->latitude;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001028:	617b      	str	r3, [r7, #20]
	unsigned long longitude = handle->longitude;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800102e:	613b      	str	r3, [r7, #16]
	unsigned altitude = handle->altitude;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001034:	60fb      	str	r3, [r7, #12]
//	for (int i = 0; i < 2; i++) {
//		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
//	}

		uint8_t rfm_data[3];
		uint8_t rfm_package_length = 3;
 8001036:	2303      	movs	r3, #3
 8001038:	72fb      	strb	r3, [r7, #11]
		rfm_data[0] = 0x53;
 800103a:	2353      	movs	r3, #83	; 0x53
 800103c:	723b      	strb	r3, [r7, #8]
		rfm_data[1] = 0x4f;
 800103e:	234f      	movs	r3, #79	; 0x4f
 8001040:	727b      	strb	r3, [r7, #9]
		rfm_data[2] = 0x53;
 8001042:	2353      	movs	r3, #83	; 0x53
 8001044:	72bb      	strb	r3, [r7, #10]


	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 8001046:	7afa      	ldrb	r2, [r7, #11]
 8001048:	f107 0108 	add.w	r1, r7, #8
 800104c:	2300      	movs	r3, #0
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fec4 	bl	8000ddc <rfm95_send_package>
 8001054:	4603      	mov	r3, r0
 8001056:	f083 0301 	eor.w	r3, r3, #1
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <rfm95_send_data_groundstation+0x48>
			0)) {
		return false;
 8001060:	2300      	movs	r3, #0
 8001062:	e000      	b.n	8001066 <rfm95_send_data_groundstation+0x4a>
	}
	return true;
 8001064:	2301      	movs	r3, #1
}
 8001066:	4618      	mov	r0, r3
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
	...

08001070 <rfm95_send_data>:

bool rfm95_send_data(rfm95_handle_t *handle, const uint8_t *data, size_t length) {
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b09d      	sub	sp, #116	; 0x74
 8001074:	af02      	add	r7, sp, #8
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
	// 64 bytes is maximum size of FIFO
	assert(length + 4 + 9 <= 64);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	330d      	adds	r3, #13
 8001080:	2b40      	cmp	r3, #64	; 0x40
 8001082:	d906      	bls.n	8001092 <rfm95_send_data+0x22>
 8001084:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <rfm95_send_data+0x1d4>)
 8001086:	4a70      	ldr	r2, [pc, #448]	; (8001248 <rfm95_send_data+0x1d8>)
 8001088:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800108c:	486f      	ldr	r0, [pc, #444]	; (800124c <rfm95_send_data+0x1dc>)
 800108e:	f003 fc8d 	bl	80049ac <__assert_func>

	uint8_t direction = 0; // Up
 8001092:	2300      	movs	r3, #0
 8001094:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t frame_control = 0x00;
 8001098:	2300      	movs	r3, #0
 800109a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t frame_port = 0x01;
 800109e:	2301      	movs	r3, #1
 80010a0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t mac_header = 0x40;
 80010a4:	2340      	movs	r3, #64	; 0x40
 80010a6:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	uint8_t rfm_data[64 + 4 + 9];
	uint8_t rfm_package_length = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t mic[4];

	rfm_data[0] = mac_header;
 80010b0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010b4:	753b      	strb	r3, [r7, #20]
	rfm_data[1] = handle->device_address[3];
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010bc:	757b      	strb	r3, [r7, #21]
	rfm_data[2] = handle->device_address[2];
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010c4:	75bb      	strb	r3, [r7, #22]
	rfm_data[3] = handle->device_address[1];
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80010cc:	75fb      	strb	r3, [r7, #23]
	rfm_data[4] = handle->device_address[0];
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80010d4:	763b      	strb	r3, [r7, #24]
	rfm_data[5] = frame_control;
 80010d6:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80010da:	767b      	strb	r3, [r7, #25]
	rfm_data[6] = (handle->tx_frame_count & 0x00ffu);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	76bb      	strb	r3, [r7, #26]
	rfm_data[7] = ((uint16_t) (handle->tx_frame_count >> 8u) & 0x00ffu);
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	76fb      	strb	r3, [r7, #27]
	rfm_data[8] = frame_port;
 80010f4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80010f8:	773b      	strb	r3, [r7, #28]
	rfm_package_length += 9;
 80010fa:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80010fe:	3309      	adds	r3, #9
 8001100:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Copy network and application session keys as well as device address to variables of encryption library
	memcpy(NwkSkey, handle->network_session_key,
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	3326      	adds	r3, #38	; 0x26
 8001108:	4a51      	ldr	r2, [pc, #324]	; (8001250 <rfm95_send_data+0x1e0>)
 800110a:	4614      	mov	r4, r2
 800110c:	6818      	ldr	r0, [r3, #0]
 800110e:	6859      	ldr	r1, [r3, #4]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->network_session_key));
	memcpy(AppSkey, handle->application_session_key,
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3336      	adds	r3, #54	; 0x36
 800111a:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <rfm95_send_data+0x1e4>)
 800111c:	4614      	mov	r4, r2
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	6859      	ldr	r1, [r3, #4]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	68db      	ldr	r3, [r3, #12]
 8001126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->application_session_key));
	memcpy(DevAddr, handle->device_address, sizeof(handle->device_address));
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	3322      	adds	r3, #34	; 0x22
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	4b49      	ldr	r3, [pc, #292]	; (8001258 <rfm95_send_data+0x1e8>)
 8001132:	601a      	str	r2, [r3, #0]

	// Encrypt payload in place in package.
	memcpy(rfm_data + rfm_package_length, data, length);
 8001134:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001138:	f107 0214 	add.w	r2, r7, #20
 800113c:	4413      	add	r3, r2
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	4618      	mov	r0, r3
 8001144:	f003 fc8c 	bl	8004a60 <memcpy>
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 8001148:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800114c:	f107 0214 	add.w	r2, r7, #20
 8001150:	18d0      	adds	r0, r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	b2d9      	uxtb	r1, r3
			handle->tx_frame_count, direction);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 800115c:	461a      	mov	r2, r3
 800115e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001162:	f7ff fb25 	bl	80007b0 <Encrypt_Payload>
	rfm_package_length += length;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800116e:	4413      	add	r3, r2
 8001170:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Calculate MIC and copy to last 4 bytes of the package.
	Calculate_MIC(rfm_data, mic, rfm_package_length, handle->tx_frame_count,
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800117a:	461c      	mov	r4, r3
 800117c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8001180:	f107 0110 	add.w	r1, r7, #16
 8001184:	f107 0014 	add.w	r0, r7, #20
 8001188:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4623      	mov	r3, r4
 8001190:	f7ff fbc6 	bl	8000920 <Calculate_MIC>
			direction);
	for (uint8_t i = 0; i < 4; i++) {
 8001194:	2300      	movs	r3, #0
 8001196:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800119a:	e013      	b.n	80011c4 <rfm95_send_data+0x154>
		rfm_data[rfm_package_length + i] = mic[i];
 800119c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80011a0:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 80011a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011a8:	440b      	add	r3, r1
 80011aa:	3268      	adds	r2, #104	; 0x68
 80011ac:	443a      	add	r2, r7
 80011ae:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 80011b2:	3368      	adds	r3, #104	; 0x68
 80011b4:	443b      	add	r3, r7
 80011b6:	f803 2c54 	strb.w	r2, [r3, #-84]
	for (uint8_t i = 0; i < 4; i++) {
 80011ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011be:	3301      	adds	r3, #1
 80011c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d9e7      	bls.n	800119c <rfm95_send_data+0x12c>
	}
	rfm_package_length += 4;
 80011cc:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80011d0:	3304      	adds	r3, #4
 80011d2:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	uint8_t pseudorandom_channel = rfm_data[rfm_package_length - 1] & 0x7u;
 80011d6:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80011da:	3b01      	subs	r3, #1
 80011dc:	3368      	adds	r3, #104	; 0x68
 80011de:	443b      	add	r3, r7
 80011e0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80011e4:	f003 0307 	and.w	r3, r3, #7
 80011e8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 80011ec:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80011f0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80011f4:	f107 0114 	add.w	r1, r7, #20
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f7ff fdef 	bl	8000ddc <rfm95_send_package>
 80011fe:	4603      	mov	r3, r0
 8001200:	f083 0301 	eor.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <rfm95_send_data+0x19e>
			pseudorandom_channel)) {
		return false;
 800120a:	2300      	movs	r3, #0
 800120c:	e016      	b.n	800123c <rfm95_send_data+0x1cc>
	}

	handle->tx_frame_count++;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8001214:	3301      	adds	r3, #1
 8001216:	b29a      	uxth	r2, r3
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if (handle->save_frame_counter != NULL) {
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	2b00      	cmp	r3, #0
 8001224:	d009      	beq.n	800123a <rfm95_send_data+0x1ca>
		handle->save_frame_counter(handle->tx_frame_count,
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	f8b2 0052 	ldrh.w	r0, [r2, #82]	; 0x52
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 8001236:	4611      	mov	r1, r2
 8001238:	4798      	blx	r3
				handle->rx_frame_count);
	}
	return true;
 800123a:	2301      	movs	r3, #1
}
 800123c:	4618      	mov	r0, r3
 800123e:	376c      	adds	r7, #108	; 0x6c
 8001240:	46bd      	mov	sp, r7
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	08005be0 	.word	0x08005be0
 8001248:	08005c50 	.word	0x08005c50
 800124c:	08005a9c 	.word	0x08005a9c
 8001250:	20000208 	.word	0x20000208
 8001254:	20000218 	.word	0x20000218
 8001258:	20000228 	.word	0x20000228

0800125c <FlowInit>:
				0x33, 0x8B, 0x9B, 0x2D, 0xC2, 0x76, 0x3C, 0x56 },
		.reload_frame_counter = NULL, .save_frame_counter = NULL, .longitude =
				8220250, .longitude_or = { 'E' }, .latitude = 47478520,
		.latitude_or[0] = { 'N' }, .altitude = 2461, .indent = 0 };

FlowInit() {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <Flow>:

Flow() {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
	static uint8_t loraCounter;
	uint8_t data_packet[] = { 0x01, 0x02, 0x03, 0x4 };
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <Flow+0x6c>)
 8001274:	607b      	str	r3, [r7, #4]
	uint8_t data_packet_ground[3];

	if (loraCounter == LORAINTERVALL) {
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <Flow+0x70>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d122      	bne.n	80012c4 <Flow+0x58>
		if (!rfm95_send_data(&rfm95_handle, data_packet, sizeof(data_packet))) {
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	2204      	movs	r2, #4
 8001282:	4619      	mov	r1, r3
 8001284:	4816      	ldr	r0, [pc, #88]	; (80012e0 <Flow+0x74>)
 8001286:	f7ff fef3 	bl	8001070 <rfm95_send_data>
 800128a:	4603      	mov	r3, r0
 800128c:	f083 0301 	eor.w	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <Flow+0x32>
			printf("RFM95 send failed\n\r");
 8001296:	4813      	ldr	r0, [pc, #76]	; (80012e4 <Flow+0x78>)
 8001298:	f003 fee6 	bl	8005068 <iprintf>
 800129c:	e012      	b.n	80012c4 <Flow+0x58>
		} else {
			printf("RFM95 send success\n\r");
 800129e:	4812      	ldr	r0, [pc, #72]	; (80012e8 <Flow+0x7c>)
 80012a0:	f003 fee2 	bl	8005068 <iprintf>

			if (!rfm95_send_data_groundstation(&rfm95_handle)) {
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <Flow+0x74>)
 80012a6:	f7ff feb9 	bl	800101c <rfm95_send_data_groundstation>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f083 0301 	eor.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <Flow+0x52>
				printf("RFM95 send failed\n\r");
 80012b6:	480b      	ldr	r0, [pc, #44]	; (80012e4 <Flow+0x78>)
 80012b8:	f003 fed6 	bl	8005068 <iprintf>
 80012bc:	e002      	b.n	80012c4 <Flow+0x58>
			} else {
				printf("RFM95 send success\n\r");
 80012be:	480a      	ldr	r0, [pc, #40]	; (80012e8 <Flow+0x7c>)
 80012c0:	f003 fed2 	bl	8005068 <iprintf>
			}
		}

	}

	loraCounter++;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <Flow+0x70>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <Flow+0x70>)
 80012ce:	701a      	strb	r2, [r3, #0]
}
 80012d0:	bf00      	nop
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	04030201 	.word	0x04030201
 80012dc:	2000022c 	.word	0x2000022c
 80012e0:	20000100 	.word	0x20000100
 80012e4:	08005bf8 	.word	0x08005bf8
 80012e8:	08005c0c 	.word	0x08005c0c

080012ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012f0:	f000 fc4b 	bl	8001b8a <HAL_Init>

  /* USER CODE BEGIN Init */
  FlowInit();
 80012f4:	f7ff ffb2 	bl	800125c <FlowInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012f8:	f000 f809 	bl	800130e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f000 f918 	bl	8001530 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001300:	f000 f84c 	bl	800139c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001304:	f000 f8c6 	bl	8001494 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001308:	f000 f886 	bl	8001418 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800130c:	e7fe      	b.n	800130c <main+0x20>

0800130e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b096      	sub	sp, #88	; 0x58
 8001312:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001314:	f107 0314 	add.w	r3, r7, #20
 8001318:	2244      	movs	r2, #68	; 0x44
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f003 fbad 	bl	8004a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001322:	463b      	mov	r3, r7
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001330:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001334:	f001 f8d8 	bl	80024e8 <HAL_PWREx_ControlVoltageScaling>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800133e:	f000 f9ff 	bl	8001740 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001342:	2310      	movs	r3, #16
 8001344:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800134e:	2360      	movs	r3, #96	; 0x60
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001352:	2300      	movs	r3, #0
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4618      	mov	r0, r3
 800135c:	f001 f91a 	bl	8002594 <HAL_RCC_OscConfig>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001366:	f000 f9eb 	bl	8001740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800136a:	230f      	movs	r3, #15
 800136c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001372:	2300      	movs	r3, #0
 8001374:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800137e:	463b      	mov	r3, r7
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fce2 	bl	8002d4c <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800138e:	f000 f9d7 	bl	8001740 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3758      	adds	r7, #88	; 0x58
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_I2C1_Init+0x74>)
 80013a2:	4a1c      	ldr	r2, [pc, #112]	; (8001414 <MX_I2C1_Init+0x78>)
 80013a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80013a6:	4b1a      	ldr	r3, [pc, #104]	; (8001410 <MX_I2C1_Init+0x74>)
 80013a8:	f640 6214 	movw	r2, #3604	; 0xe14
 80013ac:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <MX_I2C1_Init+0x74>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013b4:	4b16      	ldr	r3, [pc, #88]	; (8001410 <MX_I2C1_Init+0x74>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013ba:	4b15      	ldr	r3, [pc, #84]	; (8001410 <MX_I2C1_Init+0x74>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <MX_I2C1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013cc:	4b10      	ldr	r3, [pc, #64]	; (8001410 <MX_I2C1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d2:	4b0f      	ldr	r3, [pc, #60]	; (8001410 <MX_I2C1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <MX_I2C1_Init+0x74>)
 80013da:	f000 ff51 	bl	8002280 <HAL_I2C_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013e4:	f000 f9ac 	bl	8001740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013e8:	2100      	movs	r1, #0
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <MX_I2C1_Init+0x74>)
 80013ec:	f000 ffd7 	bl	800239e <HAL_I2CEx_ConfigAnalogFilter>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80013f6:	f000 f9a3 	bl	8001740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80013fa:	2100      	movs	r1, #0
 80013fc:	4804      	ldr	r0, [pc, #16]	; (8001410 <MX_I2C1_Init+0x74>)
 80013fe:	f001 f819 	bl	8002434 <HAL_I2CEx_ConfigDigitalFilter>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001408:	f000 f99a 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000230 	.word	0x20000230
 8001414:	40005400 	.word	0x40005400

08001418 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <MX_SPI2_Init+0x74>)
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <MX_SPI2_Init+0x78>)
 8001420:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001422:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_SPI2_Init+0x74>)
 8001424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001428:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <MX_SPI2_Init+0x74>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_SPI2_Init+0x74>)
 8001432:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001436:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_SPI2_Init+0x74>)
 800143a:	2200      	movs	r2, #0
 800143c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_SPI2_Init+0x74>)
 8001440:	2200      	movs	r2, #0
 8001442:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_SPI2_Init+0x74>)
 8001446:	f44f 7200 	mov.w	r2, #512	; 0x200
 800144a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <MX_SPI2_Init+0x74>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_SPI2_Init+0x74>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_SPI2_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_SPI2_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_SPI2_Init+0x74>)
 8001466:	2207      	movs	r2, #7
 8001468:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_SPI2_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_SPI2_Init+0x74>)
 8001472:	2208      	movs	r2, #8
 8001474:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_SPI2_Init+0x74>)
 8001478:	f002 fae0 	bl	8003a3c <HAL_SPI_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001482:	f000 f95d 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000284 	.word	0x20000284
 8001490:	40003800 	.word	0x40003800

08001494 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	; (800152c <MX_TIM2_Init+0x98>)
 80014b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5000;
 80014ba:	4b1c      	ldr	r3, [pc, #112]	; (800152c <MX_TIM2_Init+0x98>)
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b1a      	ldr	r3, [pc, #104]	; (800152c <MX_TIM2_Init+0x98>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80014c8:	4b18      	ldr	r3, [pc, #96]	; (800152c <MX_TIM2_Init+0x98>)
 80014ca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80014ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <MX_TIM2_Init+0x98>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d6:	4b15      	ldr	r3, [pc, #84]	; (800152c <MX_TIM2_Init+0x98>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014dc:	4813      	ldr	r0, [pc, #76]	; (800152c <MX_TIM2_Init+0x98>)
 80014de:	f002 fe23 	bl	8004128 <HAL_TIM_Base_Init>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80014e8:	f000 f92a 	bl	8001740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	4619      	mov	r1, r3
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <MX_TIM2_Init+0x98>)
 80014fa:	f002 ff8b 	bl	8004414 <HAL_TIM_ConfigClockSource>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001504:	f000 f91c 	bl	8001740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	4619      	mov	r1, r3
 8001514:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_TIM2_Init+0x98>)
 8001516:	f003 f9a3 	bl	8004860 <HAL_TIMEx_MasterConfigSynchronization>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001520:	f000 f90e 	bl	8001740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001524:	bf00      	nop
 8001526:	3720      	adds	r7, #32
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	200002e8 	.word	0x200002e8

08001530 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08a      	sub	sp, #40	; 0x28
 8001534:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
 8001544:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001546:	4b71      	ldr	r3, [pc, #452]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	4a70      	ldr	r2, [pc, #448]	; (800170c <MX_GPIO_Init+0x1dc>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001552:	4b6e      	ldr	r3, [pc, #440]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	f003 0304 	and.w	r3, r3, #4
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155e:	4b6b      	ldr	r3, [pc, #428]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	4a6a      	ldr	r2, [pc, #424]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156a:	4b68      	ldr	r3, [pc, #416]	; (800170c <MX_GPIO_Init+0x1dc>)
 800156c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157a:	4a64      	ldr	r2, [pc, #400]	; (800170c <MX_GPIO_Init+0x1dc>)
 800157c:	f043 0302 	orr.w	r3, r3, #2
 8001580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001582:	4b62      	ldr	r3, [pc, #392]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800158e:	4b5f      	ldr	r3, [pc, #380]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	4a5e      	ldr	r2, [pc, #376]	; (800170c <MX_GPIO_Init+0x1dc>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159a:	4b5c      	ldr	r3, [pc, #368]	; (800170c <MX_GPIO_Init+0x1dc>)
 800159c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800159e:	f003 0308 	and.w	r3, r3, #8
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RESET_GPS_Pin|LORA_DIO4_Pin|LORA_LC3_Pin|LORA_LC1_Pin
 80015a6:	2200      	movs	r2, #0
 80015a8:	f649 1108 	movw	r1, #39176	; 0x9908
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f000 fe34 	bl	800221c <HAL_GPIO_WritePin>
                          |RESET_n_MUX_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_LC_Pin|POWER_SW_Pin|LORA_DIO0_Pin|LORA_DIO2_Pin
 80015b4:	2200      	movs	r2, #0
 80015b6:	f241 7170 	movw	r1, #6000	; 0x1770
 80015ba:	4855      	ldr	r0, [pc, #340]	; (8001710 <MX_GPIO_Init+0x1e0>)
 80015bc:	f000 fe2e 	bl	800221c <HAL_GPIO_WritePin>
                          |LORA_DIO3_Pin|SS1_Pin|SS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LoRa_LC2_Pin|READY_LED_Pin|STATUS_LED_Pin|SS4_Pin, GPIO_PIN_RESET);
 80015c0:	2200      	movs	r2, #0
 80015c2:	f640 4144 	movw	r1, #3140	; 0xc44
 80015c6:	4853      	ldr	r0, [pc, #332]	; (8001714 <MX_GPIO_Init+0x1e4>)
 80015c8:	f000 fe28 	bl	800221c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_3V3_Pin ADC_BATTERIE_Pin */
  GPIO_InitStruct.Pin = ADC_3V3_Pin|ADC_BATTERIE_Pin;
 80015cc:	2303      	movs	r3, #3
 80015ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80015d0:	230b      	movs	r3, #11
 80015d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	484c      	ldr	r0, [pc, #304]	; (8001710 <MX_GPIO_Init+0x1e0>)
 80015e0:	f000 fc5a 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_LC_Pin LORA_DIO1_Pin INT_SS1_Pin */
  GPIO_InitStruct.Pin = GPS_LC_Pin|LORA_DIO1_Pin|INT_SS1_Pin;
 80015e4:	f640 0388 	movw	r3, #2184	; 0x888
 80015e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4845      	ldr	r0, [pc, #276]	; (8001710 <MX_GPIO_Init+0x1e0>)
 80015fa:	f000 fc4d 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015fe:	2303      	movs	r3, #3
 8001600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800160e:	2308      	movs	r3, #8
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f000 fc3c 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_GPS_Pin LORA_DIO5_Pin Reset_LoRa_Pin */
  GPIO_InitStruct.Pin = INT_GPS_Pin|LORA_DIO5_Pin|Reset_LoRa_Pin;
 8001620:	f240 6304 	movw	r3, #1540	; 0x604
 8001624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001638:	f000 fc2e 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_GPS_Pin LORA_DIO4_Pin LORA_LC3_Pin LORA_LC1_Pin
                           RESET_n_MUX_Pin */
  GPIO_InitStruct.Pin = RESET_GPS_Pin|LORA_DIO4_Pin|LORA_LC3_Pin|LORA_LC1_Pin
 800163c:	f649 1308 	movw	r3, #39176	; 0x9908
 8001640:	617b      	str	r3, [r7, #20]
                          |RESET_n_MUX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001642:	2301      	movs	r3, #1
 8001644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164a:	2300      	movs	r3, #0
 800164c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001658:	f000 fc1e 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800165c:	23f0      	movs	r3, #240	; 0xf0
 800165e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166c:	2305      	movs	r3, #5
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800167a:	f000 fc0d 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_LC_Pin POWER_SW_Pin LORA_DIO0_Pin LORA_DIO2_Pin
                           LORA_DIO3_Pin SS1_Pin SS2_Pin */
  GPIO_InitStruct.Pin = SD_LC_Pin|POWER_SW_Pin|LORA_DIO0_Pin|LORA_DIO2_Pin
 800167e:	f241 7370 	movw	r3, #6000	; 0x1770
 8001682:	617b      	str	r3, [r7, #20]
                          |LORA_DIO3_Pin|SS1_Pin|SS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	4619      	mov	r1, r3
 8001696:	481e      	ldr	r0, [pc, #120]	; (8001710 <MX_GPIO_Init+0x1e0>)
 8001698:	f000 fbfe 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_AS_Pin INT2_AS_Pin INT_SS3_Pin INT_SS4_Pin */
  GPIO_InitStruct.Pin = INT1_AS_Pin|INT2_AS_Pin|INT_SS3_Pin|INT_SS4_Pin;
 800169c:	23a3      	movs	r3, #163	; 0xa3
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4819      	ldr	r0, [pc, #100]	; (8001714 <MX_GPIO_Init+0x1e4>)
 80016b0:	f000 fbf2 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LoRa_LC2_Pin READY_LED_Pin STATUS_LED_Pin SS4_Pin */
  GPIO_InitStruct.Pin = LoRa_LC2_Pin|READY_LED_Pin|STATUS_LED_Pin|SS4_Pin;
 80016b4:	f640 4344 	movw	r3, #3140	; 0xc44
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	4811      	ldr	r0, [pc, #68]	; (8001714 <MX_GPIO_Init+0x1e4>)
 80016ce:	f000 fbe3 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_SS2_Pin */
  GPIO_InitStruct.Pin = INT_SS2_Pin;
 80016d2:	2304      	movs	r3, #4
 80016d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d6:	2300      	movs	r3, #0
 80016d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_SS2_GPIO_Port, &GPIO_InitStruct);
 80016de:	f107 0314 	add.w	r3, r7, #20
 80016e2:	4619      	mov	r1, r3
 80016e4:	480c      	ldr	r0, [pc, #48]	; (8001718 <MX_GPIO_Init+0x1e8>)
 80016e6:	f000 fbd7 	bl	8001e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS3_Pin */
  GPIO_InitStruct.Pin = SS3_Pin;
 80016ea:	2310      	movs	r3, #16
 80016ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 80016f8:	f107 0314 	add.w	r3, r7, #20
 80016fc:	4619      	mov	r1, r3
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_GPIO_Init+0x1e4>)
 8001700:	f000 fbca 	bl	8001e98 <HAL_GPIO_Init>

}
 8001704:	bf00      	nop
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40021000 	.word	0x40021000
 8001710:	48000800 	.word	0x48000800
 8001714:	48000400 	.word	0x48000400
 8001718:	48000c00 	.word	0x48000c00

0800171c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001724:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800172a:	f000 fd8f 	bl	800224c <HAL_GPIO_TogglePin>
    Flow();
 800172e:	f7ff fd9d 	bl	800126c <Flow>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	48000400 	.word	0x48000400

08001740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001744:	b672      	cpsid	i
}
 8001746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001748:	e7fe      	b.n	8001748 <Error_Handler+0x8>
	...

0800174c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <HAL_MspInit+0x44>)
 8001754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001756:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_MspInit+0x44>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6613      	str	r3, [r2, #96]	; 0x60
 800175e:	4b0c      	ldr	r3, [pc, #48]	; (8001790 <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176a:	4b09      	ldr	r3, [pc, #36]	; (8001790 <HAL_MspInit+0x44>)
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	4a08      	ldr	r2, [pc, #32]	; (8001790 <HAL_MspInit+0x44>)
 8001770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001774:	6593      	str	r3, [r2, #88]	; 0x58
 8001776:	4b06      	ldr	r3, [pc, #24]	; (8001790 <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800177a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40021000 	.word	0x40021000

08001794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b0aa      	sub	sp, #168	; 0xa8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	2284      	movs	r2, #132	; 0x84
 80017b2:	2100      	movs	r1, #0
 80017b4:	4618      	mov	r0, r3
 80017b6:	f003 f961 	bl	8004a7c <memset>
  if(hi2c->Instance==I2C1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a21      	ldr	r2, [pc, #132]	; (8001844 <HAL_I2C_MspInit+0xb0>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d13b      	bne.n	800183c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017c4:	2340      	movs	r3, #64	; 0x40
 80017c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4618      	mov	r0, r3
 80017d2:	f001 fca7 	bl	8003124 <HAL_RCCEx_PeriphCLKConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80017dc:	f7ff ffb0 	bl	8001740 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b19      	ldr	r3, [pc, #100]	; (8001848 <HAL_I2C_MspInit+0xb4>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <HAL_I2C_MspInit+0xb4>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_I2C_MspInit+0xb4>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	2312      	movs	r3, #18
 8001802:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180c:	2303      	movs	r3, #3
 800180e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001812:	2304      	movs	r3, #4
 8001814:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001818:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800181c:	4619      	mov	r1, r3
 800181e:	480b      	ldr	r0, [pc, #44]	; (800184c <HAL_I2C_MspInit+0xb8>)
 8001820:	f000 fb3a 	bl	8001e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_I2C_MspInit+0xb4>)
 8001826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001828:	4a07      	ldr	r2, [pc, #28]	; (8001848 <HAL_I2C_MspInit+0xb4>)
 800182a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800182e:	6593      	str	r3, [r2, #88]	; 0x58
 8001830:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_I2C_MspInit+0xb4>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001838:	60bb      	str	r3, [r7, #8]
 800183a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800183c:	bf00      	nop
 800183e:	37a8      	adds	r7, #168	; 0xa8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40005400 	.word	0x40005400
 8001848:	40021000 	.word	0x40021000
 800184c:	48000400 	.word	0x48000400

08001850 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08a      	sub	sp, #40	; 0x28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a17      	ldr	r2, [pc, #92]	; (80018cc <HAL_SPI_MspInit+0x7c>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d128      	bne.n	80018c4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001872:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_SPI_MspInit+0x80>)
 8001874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001876:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_SPI_MspInit+0x80>)
 8001878:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187c:	6593      	str	r3, [r2, #88]	; 0x58
 800187e:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_SPI_MspInit+0x80>)
 8001880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_SPI_MspInit+0x80>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_SPI_MspInit+0x80>)
 8001890:	f043 0302 	orr.w	r3, r3, #2
 8001894:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_SPI_MspInit+0x80>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LORA_NSS_Pin|LORA_SCK_Pin|LORA_MISO_Pin|LORA_MOSI_Pin;
 80018a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b4:	2305      	movs	r3, #5
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	4805      	ldr	r0, [pc, #20]	; (80018d4 <HAL_SPI_MspInit+0x84>)
 80018c0:	f000 faea 	bl	8001e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018c4:	bf00      	nop
 80018c6:	3728      	adds	r7, #40	; 0x28
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40003800 	.word	0x40003800
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400

080018d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e8:	d113      	bne.n	8001912 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ea:	4b0c      	ldr	r3, [pc, #48]	; (800191c <HAL_TIM_Base_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <HAL_TIM_Base_MspInit+0x44>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6593      	str	r3, [r2, #88]	; 0x58
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_TIM_Base_MspInit+0x44>)
 80018f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201c      	movs	r0, #28
 8001908:	f000 fa8f 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800190c:	201c      	movs	r0, #28
 800190e:	f000 faa8 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3710      	adds	r7, #16
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40021000 	.word	0x40021000

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196c:	f000 f962 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}

08001974 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001978:	4802      	ldr	r0, [pc, #8]	; (8001984 <TIM2_IRQHandler+0x10>)
 800197a:	f002 fc2c 	bl	80041d6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002e8 	.word	0x200002e8

08001988 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	return 1;
 800198c:	2301      	movs	r3, #1
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_kill>:

int _kill(int pid, int sig)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019a2:	f003 f821 	bl	80049e8 <__errno>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2216      	movs	r2, #22
 80019aa:	601a      	str	r2, [r3, #0]
	return -1;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <_exit>:

void _exit (int status)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ffe7 	bl	8001998 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019ca:	e7fe      	b.n	80019ca <_exit+0x12>

080019cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e00a      	b.n	80019f4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80019de:	f3af 8000 	nop.w
 80019e2:	4601      	mov	r1, r0
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	b2ca      	uxtb	r2, r1
 80019ec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	3301      	adds	r3, #1
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	dbf0      	blt.n	80019de <_read+0x12>
	}

return len;
 80019fc:	687b      	ldr	r3, [r7, #4]
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	60f8      	str	r0, [r7, #12]
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e009      	b.n	8001a2c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	1c5a      	adds	r2, r3, #1
 8001a1c:	60ba      	str	r2, [r7, #8]
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	4618      	mov	r0, r3
 8001a22:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf1      	blt.n	8001a18 <_write+0x12>
	}
	return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_close>:

int _close(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
	return -1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a66:	605a      	str	r2, [r3, #4]
	return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_isatty>:

int _isatty(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
	return 1;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
	return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	; (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	; (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f002 ff86 	bl	80049e8 <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	; (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	; (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20018000 	.word	0x20018000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	20000334 	.word	0x20000334
 8001b10:	20000350 	.word	0x20000350

08001b14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b3c:	f7ff ffea 	bl	8001b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b40:	480c      	ldr	r0, [pc, #48]	; (8001b74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b42:	490d      	ldr	r1, [pc, #52]	; (8001b78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b44:	4a0d      	ldr	r2, [pc, #52]	; (8001b7c <LoopForever+0xe>)
  movs r3, #0
 8001b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b48:	e002      	b.n	8001b50 <LoopCopyDataInit>

08001b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b4e:	3304      	adds	r3, #4

08001b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b54:	d3f9      	bcc.n	8001b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b56:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b58:	4c0a      	ldr	r4, [pc, #40]	; (8001b84 <LoopForever+0x16>)
  movs r3, #0
 8001b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b5c:	e001      	b.n	8001b62 <LoopFillZerobss>

08001b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b60:	3204      	adds	r2, #4

08001b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b64:	d3fb      	bcc.n	8001b5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b66:	f002 ff57 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b6a:	f7ff fbbf 	bl	80012ec <main>

08001b6e <LoopForever>:

LoopForever:
    b LoopForever
 8001b6e:	e7fe      	b.n	8001b6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b78:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001b7c:	08005d7c 	.word	0x08005d7c
  ldr r2, =_sbss
 8001b80:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001b84:	2000034c 	.word	0x2000034c

08001b88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b88:	e7fe      	b.n	8001b88 <ADC1_2_IRQHandler>

08001b8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f93d 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f80e 	bl	8001bbc <HAL_InitTick>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	e001      	b.n	8001bb0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bac:	f7ff fdce 	bl	800174c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
	...

08001bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001bc8:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d023      	beq.n	8001c18 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_InitTick+0x70>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <HAL_InitTick+0x6c>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	4619      	mov	r1, r3
 8001bda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 f949 	bl	8001e7e <HAL_SYSTICK_Config>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10f      	bne.n	8001c12 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d809      	bhi.n	8001c0c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	6879      	ldr	r1, [r7, #4]
 8001bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001c00:	f000 f913 	bl	8001e2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c04:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_InitTick+0x74>)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e007      	b.n	8001c1c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	73fb      	strb	r3, [r7, #15]
 8001c10:	e004      	b.n	8001c1c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	e001      	b.n	8001c1c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000174 	.word	0x20000174
 8001c2c:	2000016c 	.word	0x2000016c
 8001c30:	20000170 	.word	0x20000170

08001c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000174 	.word	0x20000174
 8001c58:	20000338 	.word	0x20000338

08001c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c60:	4b03      	ldr	r3, [pc, #12]	; (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000338 	.word	0x20000338

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	60d3      	str	r3, [r2, #12]
}
 8001cac:	bf00      	nop
 8001cae:	3714      	adds	r7, #20
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	e000ed00 	.word	0xe000ed00

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ea6:	e17f      	b.n	80021a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2101      	movs	r1, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8171 	beq.w	80021a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 0303 	and.w	r3, r3, #3
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d005      	beq.n	8001ed8 <HAL_GPIO_Init+0x40>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d130      	bne.n	8001f3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	4013      	ands	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	693a      	ldr	r2, [r7, #16]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	693a      	ldr	r2, [r7, #16]
 8001f06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f0e:	2201      	movs	r2, #1
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	091b      	lsrs	r3, r3, #4
 8001f24:	f003 0201 	and.w	r2, r3, #1
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f003 0303 	and.w	r3, r3, #3
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d118      	bne.n	8001f78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	08db      	lsrs	r3, r3, #3
 8001f62:	f003 0201 	and.w	r2, r3, #1
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	693a      	ldr	r2, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d017      	beq.n	8001fb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d123      	bne.n	8002008 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	08da      	lsrs	r2, r3, #3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3208      	adds	r2, #8
 8001fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	691a      	ldr	r2, [r3, #16]
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	08da      	lsrs	r2, r3, #3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3208      	adds	r2, #8
 8002002:	6939      	ldr	r1, [r7, #16]
 8002004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0203 	and.w	r2, r3, #3
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80ac 	beq.w	80021a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b5f      	ldr	r3, [pc, #380]	; (80021c8 <HAL_GPIO_Init+0x330>)
 800204c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800204e:	4a5e      	ldr	r2, [pc, #376]	; (80021c8 <HAL_GPIO_Init+0x330>)
 8002050:	f043 0301 	orr.w	r3, r3, #1
 8002054:	6613      	str	r3, [r2, #96]	; 0x60
 8002056:	4b5c      	ldr	r3, [pc, #368]	; (80021c8 <HAL_GPIO_Init+0x330>)
 8002058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002062:	4a5a      	ldr	r2, [pc, #360]	; (80021cc <HAL_GPIO_Init+0x334>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	220f      	movs	r2, #15
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	693a      	ldr	r2, [r7, #16]
 8002082:	4013      	ands	r3, r2
 8002084:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800208c:	d025      	beq.n	80020da <HAL_GPIO_Init+0x242>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4f      	ldr	r2, [pc, #316]	; (80021d0 <HAL_GPIO_Init+0x338>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <HAL_GPIO_Init+0x23e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4e      	ldr	r2, [pc, #312]	; (80021d4 <HAL_GPIO_Init+0x33c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d019      	beq.n	80020d2 <HAL_GPIO_Init+0x23a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <HAL_GPIO_Init+0x340>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <HAL_GPIO_Init+0x236>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <HAL_GPIO_Init+0x344>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00d      	beq.n	80020ca <HAL_GPIO_Init+0x232>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a4b      	ldr	r2, [pc, #300]	; (80021e0 <HAL_GPIO_Init+0x348>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d007      	beq.n	80020c6 <HAL_GPIO_Init+0x22e>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a4a      	ldr	r2, [pc, #296]	; (80021e4 <HAL_GPIO_Init+0x34c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d101      	bne.n	80020c2 <HAL_GPIO_Init+0x22a>
 80020be:	2306      	movs	r3, #6
 80020c0:	e00c      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e00a      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020c6:	2305      	movs	r3, #5
 80020c8:	e008      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020ca:	2304      	movs	r3, #4
 80020cc:	e006      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020ce:	2303      	movs	r3, #3
 80020d0:	e004      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020d2:	2302      	movs	r3, #2
 80020d4:	e002      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x244>
 80020da:	2300      	movs	r3, #0
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	f002 0203 	and.w	r2, r2, #3
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	4093      	lsls	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020ec:	4937      	ldr	r1, [pc, #220]	; (80021cc <HAL_GPIO_Init+0x334>)
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	089b      	lsrs	r3, r3, #2
 80020f2:	3302      	adds	r3, #2
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020fa:	4b3b      	ldr	r3, [pc, #236]	; (80021e8 <HAL_GPIO_Init+0x350>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	43db      	mvns	r3, r3
 8002104:	693a      	ldr	r2, [r7, #16]
 8002106:	4013      	ands	r3, r2
 8002108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4313      	orrs	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800211e:	4a32      	ldr	r2, [pc, #200]	; (80021e8 <HAL_GPIO_Init+0x350>)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002124:	4b30      	ldr	r3, [pc, #192]	; (80021e8 <HAL_GPIO_Init+0x350>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	43db      	mvns	r3, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4013      	ands	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002148:	4a27      	ldr	r2, [pc, #156]	; (80021e8 <HAL_GPIO_Init+0x350>)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800214e:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <HAL_GPIO_Init+0x350>)
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	43db      	mvns	r3, r3
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	4013      	ands	r3, r2
 800215c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	4313      	orrs	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002172:	4a1d      	ldr	r2, [pc, #116]	; (80021e8 <HAL_GPIO_Init+0x350>)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_GPIO_Init+0x350>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	43db      	mvns	r3, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d003      	beq.n	800219c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002194:	693a      	ldr	r2, [r7, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4313      	orrs	r3, r2
 800219a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_GPIO_Init+0x350>)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	3301      	adds	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa22 f303 	lsr.w	r3, r2, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f47f ae78 	bne.w	8001ea8 <HAL_GPIO_Init+0x10>
  }
}
 80021b8:	bf00      	nop
 80021ba:	bf00      	nop
 80021bc:	371c      	adds	r7, #28
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40010000 	.word	0x40010000
 80021d0:	48000400 	.word	0x48000400
 80021d4:	48000800 	.word	0x48000800
 80021d8:	48000c00 	.word	0x48000c00
 80021dc:	48001000 	.word	0x48001000
 80021e0:	48001400 	.word	0x48001400
 80021e4:	48001800 	.word	0x48001800
 80021e8:	40010400 	.word	0x40010400

080021ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002204:	2301      	movs	r3, #1
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e001      	b.n	800220e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800220a:	2300      	movs	r3, #0
 800220c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3714      	adds	r7, #20
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	807b      	strh	r3, [r7, #2]
 8002228:	4613      	mov	r3, r2
 800222a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800222c:	787b      	ldrb	r3, [r7, #1]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002238:	e002      	b.n	8002240 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	695b      	ldr	r3, [r3, #20]
 800225c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800225e:	887a      	ldrh	r2, [r7, #2]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4013      	ands	r3, r2
 8002264:	041a      	lsls	r2, r3, #16
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	43d9      	mvns	r1, r3
 800226a:	887b      	ldrh	r3, [r7, #2]
 800226c:	400b      	ands	r3, r1
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d101      	bne.n	8002292 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e081      	b.n	8002396 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d106      	bne.n	80022ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff fa74 	bl	8001794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2224      	movs	r2, #36	; 0x24
 80022b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0201 	bic.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d107      	bne.n	80022fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	e006      	b.n	8002308 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002306:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d104      	bne.n	800231a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002318:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	6812      	ldr	r2, [r2, #0]
 8002324:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002328:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800232c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800233c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	69d9      	ldr	r1, [r3, #28]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1a      	ldr	r2, [r3, #32]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0201 	orr.w	r2, r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2220      	movs	r2, #32
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b20      	cmp	r3, #32
 80023b2:	d138      	bne.n	8002426 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023be:	2302      	movs	r3, #2
 80023c0:	e032      	b.n	8002428 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2224      	movs	r2, #36	; 0x24
 80023ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f022 0201 	bic.w	r2, r2, #1
 80023e0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023f0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6819      	ldr	r1, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002422:	2300      	movs	r3, #0
 8002424:	e000      	b.n	8002428 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002426:	2302      	movs	r3, #2
  }
}
 8002428:	4618      	mov	r0, r3
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	d139      	bne.n	80024be <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002450:	2b01      	cmp	r3, #1
 8002452:	d101      	bne.n	8002458 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002454:	2302      	movs	r3, #2
 8002456:	e033      	b.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2224      	movs	r2, #36	; 0x24
 8002464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681a      	ldr	r2, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f022 0201 	bic.w	r2, r2, #1
 8002476:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002486:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	021b      	lsls	r3, r3, #8
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	4313      	orrs	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f042 0201 	orr.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2220      	movs	r2, #32
 80024ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	e000      	b.n	80024c0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024be:	2302      	movs	r3, #2
  }
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80024d8:	4618      	mov	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024f6:	d130      	bne.n	800255a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002504:	d038      	beq.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002506:	4b20      	ldr	r3, [pc, #128]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800250e:	4a1e      	ldr	r2, [pc, #120]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002510:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002514:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002516:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2232      	movs	r2, #50	; 0x32
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	4a1b      	ldr	r2, [pc, #108]	; (8002590 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002522:	fba2 2303 	umull	r2, r3, r2, r3
 8002526:	0c9b      	lsrs	r3, r3, #18
 8002528:	3301      	adds	r3, #1
 800252a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800252c:	e002      	b.n	8002534 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	3b01      	subs	r3, #1
 8002532:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002534:	4b14      	ldr	r3, [pc, #80]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800253c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002540:	d102      	bne.n	8002548 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f2      	bne.n	800252e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002548:	4b0f      	ldr	r3, [pc, #60]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002554:	d110      	bne.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e00f      	b.n	800257a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800255a:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002566:	d007      	beq.n	8002578 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002568:	4b07      	ldr	r3, [pc, #28]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002570:	4a05      	ldr	r2, [pc, #20]	; (8002588 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002572:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002576:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
 8002586:	bf00      	nop
 8002588:	40007000 	.word	0x40007000
 800258c:	2000016c 	.word	0x2000016c
 8002590:	431bde83 	.word	0x431bde83

08002594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e3ca      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a6:	4b97      	ldr	r3, [pc, #604]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025b0:	4b94      	ldr	r3, [pc, #592]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80e4 	beq.w	8002790 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d007      	beq.n	80025de <HAL_RCC_OscConfig+0x4a>
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b0c      	cmp	r3, #12
 80025d2:	f040 808b 	bne.w	80026ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	f040 8087 	bne.w	80026ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025de:	4b89      	ldr	r3, [pc, #548]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d005      	beq.n	80025f6 <HAL_RCC_OscConfig+0x62>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e3a2      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1a      	ldr	r2, [r3, #32]
 80025fa:	4b82      	ldr	r3, [pc, #520]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0308 	and.w	r3, r3, #8
 8002602:	2b00      	cmp	r3, #0
 8002604:	d004      	beq.n	8002610 <HAL_RCC_OscConfig+0x7c>
 8002606:	4b7f      	ldr	r3, [pc, #508]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800260e:	e005      	b.n	800261c <HAL_RCC_OscConfig+0x88>
 8002610:	4b7c      	ldr	r3, [pc, #496]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	091b      	lsrs	r3, r3, #4
 8002618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261c:	4293      	cmp	r3, r2
 800261e:	d223      	bcs.n	8002668 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fd1d 	bl	8003064 <RCC_SetFlashLatencyFromMSIRange>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d001      	beq.n	8002634 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e383      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002634:	4b73      	ldr	r3, [pc, #460]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a72      	ldr	r2, [pc, #456]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800263a:	f043 0308 	orr.w	r3, r3, #8
 800263e:	6013      	str	r3, [r2, #0]
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	496d      	ldr	r1, [pc, #436]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800264e:	4313      	orrs	r3, r2
 8002650:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002652:	4b6c      	ldr	r3, [pc, #432]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	021b      	lsls	r3, r3, #8
 8002660:	4968      	ldr	r1, [pc, #416]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002662:	4313      	orrs	r3, r2
 8002664:	604b      	str	r3, [r1, #4]
 8002666:	e025      	b.n	80026b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002668:	4b66      	ldr	r3, [pc, #408]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a65      	ldr	r2, [pc, #404]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800266e:	f043 0308 	orr.w	r3, r3, #8
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b63      	ldr	r3, [pc, #396]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4960      	ldr	r1, [pc, #384]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002686:	4b5f      	ldr	r3, [pc, #380]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	495b      	ldr	r1, [pc, #364]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a1b      	ldr	r3, [r3, #32]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fcdd 	bl	8003064 <RCC_SetFlashLatencyFromMSIRange>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	e343      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026b4:	f000 fc4a 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b52      	ldr	r3, [pc, #328]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 030f 	and.w	r3, r3, #15
 80026c4:	4950      	ldr	r1, [pc, #320]	; (8002808 <HAL_RCC_OscConfig+0x274>)
 80026c6:	5ccb      	ldrb	r3, [r1, r3]
 80026c8:	f003 031f 	and.w	r3, r3, #31
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
 80026d0:	4a4e      	ldr	r2, [pc, #312]	; (800280c <HAL_RCC_OscConfig+0x278>)
 80026d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026d4:	4b4e      	ldr	r3, [pc, #312]	; (8002810 <HAL_RCC_OscConfig+0x27c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fa6f 	bl	8001bbc <HAL_InitTick>
 80026de:	4603      	mov	r3, r0
 80026e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026e2:	7bfb      	ldrb	r3, [r7, #15]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d052      	beq.n	800278e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	e327      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d032      	beq.n	800275a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026f4:	4b43      	ldr	r3, [pc, #268]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a42      	ldr	r2, [pc, #264]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80026fa:	f043 0301 	orr.w	r3, r3, #1
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002700:	f7ff faac 	bl	8001c5c <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002708:	f7ff faa8 	bl	8001c5c <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e310      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800271a:	4b3a      	ldr	r3, [pc, #232]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0f0      	beq.n	8002708 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002726:	4b37      	ldr	r3, [pc, #220]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a36      	ldr	r2, [pc, #216]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800272c:	f043 0308 	orr.w	r3, r3, #8
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	4b34      	ldr	r3, [pc, #208]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4931      	ldr	r1, [pc, #196]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002740:	4313      	orrs	r3, r2
 8002742:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002744:	4b2f      	ldr	r3, [pc, #188]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	021b      	lsls	r3, r3, #8
 8002752:	492c      	ldr	r1, [pc, #176]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]
 8002758:	e01a      	b.n	8002790 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800275a:	4b2a      	ldr	r3, [pc, #168]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a29      	ldr	r2, [pc, #164]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002766:	f7ff fa79 	bl	8001c5c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800276e:	f7ff fa75 	bl	8001c5c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e2dd      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002780:	4b20      	ldr	r3, [pc, #128]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x1da>
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800278e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	2b00      	cmp	r3, #0
 800279a:	d074      	beq.n	8002886 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d005      	beq.n	80027ae <HAL_RCC_OscConfig+0x21a>
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b0c      	cmp	r3, #12
 80027a6:	d10e      	bne.n	80027c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2b03      	cmp	r3, #3
 80027ac:	d10b      	bne.n	80027c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d064      	beq.n	8002884 <HAL_RCC_OscConfig+0x2f0>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d160      	bne.n	8002884 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e2ba      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ce:	d106      	bne.n	80027de <HAL_RCC_OscConfig+0x24a>
 80027d0:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a0b      	ldr	r2, [pc, #44]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027da:	6013      	str	r3, [r2, #0]
 80027dc:	e026      	b.n	800282c <HAL_RCC_OscConfig+0x298>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e6:	d115      	bne.n	8002814 <HAL_RCC_OscConfig+0x280>
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a05      	ldr	r2, [pc, #20]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f2:	6013      	str	r3, [r2, #0]
 80027f4:	4b03      	ldr	r3, [pc, #12]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a02      	ldr	r2, [pc, #8]	; (8002804 <HAL_RCC_OscConfig+0x270>)
 80027fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fe:	6013      	str	r3, [r2, #0]
 8002800:	e014      	b.n	800282c <HAL_RCC_OscConfig+0x298>
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	08005c60 	.word	0x08005c60
 800280c:	2000016c 	.word	0x2000016c
 8002810:	20000170 	.word	0x20000170
 8002814:	4ba0      	ldr	r3, [pc, #640]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a9f      	ldr	r2, [pc, #636]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 800281a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	4b9d      	ldr	r3, [pc, #628]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a9c      	ldr	r2, [pc, #624]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800282a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d013      	beq.n	800285c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff fa12 	bl	8001c5c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff fa0e 	bl	8001c5c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e276      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800284e:	4b92      	ldr	r3, [pc, #584]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d0f0      	beq.n	800283c <HAL_RCC_OscConfig+0x2a8>
 800285a:	e014      	b.n	8002886 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285c:	f7ff f9fe 	bl	8001c5c <HAL_GetTick>
 8002860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002862:	e008      	b.n	8002876 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002864:	f7ff f9fa 	bl	8001c5c <HAL_GetTick>
 8002868:	4602      	mov	r2, r0
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	2b64      	cmp	r3, #100	; 0x64
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e262      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002876:	4b88      	ldr	r3, [pc, #544]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1f0      	bne.n	8002864 <HAL_RCC_OscConfig+0x2d0>
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002884:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d060      	beq.n	8002954 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	2b04      	cmp	r3, #4
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_OscConfig+0x310>
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d119      	bne.n	80028d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d116      	bne.n	80028d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a4:	4b7c      	ldr	r3, [pc, #496]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_OscConfig+0x328>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e23f      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b76      	ldr	r3, [pc, #472]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	061b      	lsls	r3, r3, #24
 80028ca:	4973      	ldr	r1, [pc, #460]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028d0:	e040      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d023      	beq.n	8002922 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028da:	4b6f      	ldr	r3, [pc, #444]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a6e      	ldr	r2, [pc, #440]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff f9b9 	bl	8001c5c <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff f9b5 	bl	8001c5c <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e21d      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	061b      	lsls	r3, r3, #24
 800291a:	495f      	ldr	r1, [pc, #380]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
 8002920:	e018      	b.n	8002954 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b5d      	ldr	r3, [pc, #372]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a5c      	ldr	r2, [pc, #368]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800292c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7ff f995 	bl	8001c5c <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7ff f991 	bl	8001c5c <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1f9      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1f0      	bne.n	8002936 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0308 	and.w	r3, r3, #8
 800295c:	2b00      	cmp	r3, #0
 800295e:	d03c      	beq.n	80029da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d01c      	beq.n	80029a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002968:	4b4b      	ldr	r3, [pc, #300]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	4a4a      	ldr	r2, [pc, #296]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002978:	f7ff f970 	bl	8001c5c <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800297e:	e008      	b.n	8002992 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002980:	f7ff f96c 	bl	8001c5c <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e1d4      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ef      	beq.n	8002980 <HAL_RCC_OscConfig+0x3ec>
 80029a0:	e01b      	b.n	80029da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a8:	4a3b      	ldr	r2, [pc, #236]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029aa:	f023 0301 	bic.w	r3, r3, #1
 80029ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7ff f953 	bl	8001c5c <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029ba:	f7ff f94f 	bl	8001c5c <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1b7      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029cc:	4b32      	ldr	r3, [pc, #200]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 80a6 	beq.w	8002b34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029e8:	2300      	movs	r3, #0
 80029ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029ec:	4b2a      	ldr	r3, [pc, #168]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d10d      	bne.n	8002a14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029f8:	4b27      	ldr	r3, [pc, #156]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	4a26      	ldr	r2, [pc, #152]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a02:	6593      	str	r3, [r2, #88]	; 0x58
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	60bb      	str	r3, [r7, #8]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a10:	2301      	movs	r3, #1
 8002a12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d118      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2c:	f7ff f916 	bl	8001c5c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7ff f912 	bl	8001c5c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e17a      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_RCC_OscConfig+0x508>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d108      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4d8>
 8002a5a:	4b0f      	ldr	r3, [pc, #60]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a60:	4a0d      	ldr	r2, [pc, #52]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a6a:	e029      	b.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b05      	cmp	r3, #5
 8002a72:	d115      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x50c>
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7a:	4a07      	ldr	r2, [pc, #28]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a84:	4b04      	ldr	r3, [pc, #16]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a8a:	4a03      	ldr	r2, [pc, #12]	; (8002a98 <HAL_RCC_OscConfig+0x504>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a94:	e014      	b.n	8002ac0 <HAL_RCC_OscConfig+0x52c>
 8002a96:	bf00      	nop
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40007000 	.word	0x40007000
 8002aa0:	4b9c      	ldr	r3, [pc, #624]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a9b      	ldr	r2, [pc, #620]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ab0:	4b98      	ldr	r3, [pc, #608]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	4a97      	ldr	r2, [pc, #604]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002ab8:	f023 0304 	bic.w	r3, r3, #4
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d016      	beq.n	8002af6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7ff f8c8 	bl	8001c5c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7ff f8c4 	bl	8001c5c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e12a      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae6:	4b8b      	ldr	r3, [pc, #556]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0ed      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x53c>
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af6:	f7ff f8b1 	bl	8001c5c <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002afc:	e00a      	b.n	8002b14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afe:	f7ff f8ad 	bl	8001c5c <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d901      	bls.n	8002b14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e113      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b14:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ed      	bne.n	8002afe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b22:	7ffb      	ldrb	r3, [r7, #31]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b7a      	ldr	r3, [pc, #488]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	4a79      	ldr	r2, [pc, #484]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80fe 	beq.w	8002d3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	f040 80d0 	bne.w	8002ce8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b48:	4b72      	ldr	r3, [pc, #456]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 0203 	and.w	r2, r3, #3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d130      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	3b01      	subs	r3, #1
 8002b68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d127      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d11f      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b88:	2a07      	cmp	r2, #7
 8002b8a:	bf14      	ite	ne
 8002b8c:	2201      	movne	r2, #1
 8002b8e:	2200      	moveq	r2, #0
 8002b90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d113      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba0:	085b      	lsrs	r3, r3, #1
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	085b      	lsrs	r3, r3, #1
 8002bb6:	3b01      	subs	r3, #1
 8002bb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d06e      	beq.n	8002c9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d069      	beq.n	8002c98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bc4:	4b53      	ldr	r3, [pc, #332]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d105      	bne.n	8002bdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bd0:	4b50      	ldr	r3, [pc, #320]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0ad      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bec:	f7ff f836 	bl	8001c5c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7ff f832 	bl	8001c5c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e09a      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c06:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c12:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	4b40      	ldr	r3, [pc, #256]	; (8002d18 <HAL_RCC_OscConfig+0x784>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c22:	3a01      	subs	r2, #1
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	4311      	orrs	r1, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c2c:	0212      	lsls	r2, r2, #8
 8002c2e:	4311      	orrs	r1, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c34:	0852      	lsrs	r2, r2, #1
 8002c36:	3a01      	subs	r2, #1
 8002c38:	0552      	lsls	r2, r2, #21
 8002c3a:	4311      	orrs	r1, r2
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c40:	0852      	lsrs	r2, r2, #1
 8002c42:	3a01      	subs	r2, #1
 8002c44:	0652      	lsls	r2, r2, #25
 8002c46:	4311      	orrs	r1, r2
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c4c:	0912      	lsrs	r2, r2, #4
 8002c4e:	0452      	lsls	r2, r2, #17
 8002c50:	430a      	orrs	r2, r1
 8002c52:	4930      	ldr	r1, [pc, #192]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c58:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2d      	ldr	r2, [pc, #180]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c64:	4b2b      	ldr	r3, [pc, #172]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c70:	f7fe fff4 	bl	8001c5c <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fff0 	bl	8001c5c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e058      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c96:	e050      	b.n	8002d3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e04f      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d148      	bne.n	8002d3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a19      	ldr	r2, [pc, #100]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a16      	ldr	r2, [pc, #88]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cc0:	f7fe ffcc 	bl	8001c5c <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cc6:	e008      	b.n	8002cda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc8:	f7fe ffc8 	bl	8001c5c <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e030      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	4b0e      	ldr	r3, [pc, #56]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f0      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x734>
 8002ce6:	e028      	b.n	8002d3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	2b0c      	cmp	r3, #12
 8002cec:	d023      	beq.n	8002d36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cee:	4b09      	ldr	r3, [pc, #36]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a08      	ldr	r2, [pc, #32]	; (8002d14 <HAL_RCC_OscConfig+0x780>)
 8002cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfa:	f7fe ffaf 	bl	8001c5c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	e00c      	b.n	8002d1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe ffab 	bl	8001c5c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d905      	bls.n	8002d1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e013      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
 8002d14:	40021000 	.word	0x40021000
 8002d18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d1c:	4b09      	ldr	r3, [pc, #36]	; (8002d44 <HAL_RCC_OscConfig+0x7b0>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1ec      	bne.n	8002d02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d28:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_OscConfig+0x7b0>)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	4905      	ldr	r1, [pc, #20]	; (8002d44 <HAL_RCC_OscConfig+0x7b0>)
 8002d2e:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <HAL_RCC_OscConfig+0x7b4>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	60cb      	str	r3, [r1, #12]
 8002d34:	e001      	b.n	8002d3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3720      	adds	r7, #32
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	feeefffc 	.word	0xfeeefffc

08002d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e0e7      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d60:	4b75      	ldr	r3, [pc, #468]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d910      	bls.n	8002d90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b72      	ldr	r3, [pc, #456]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 0207 	bic.w	r2, r3, #7
 8002d76:	4970      	ldr	r1, [pc, #448]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d7e:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 0307 	and.w	r3, r3, #7
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d001      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0cf      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d010      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689a      	ldr	r2, [r3, #8]
 8002da0:	4b66      	ldr	r3, [pc, #408]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d908      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dac:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	4960      	ldr	r1, [pc, #384]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d04c      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d107      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d121      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0a6      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d107      	bne.n	8002dfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dea:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d115      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e09a      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d107      	bne.n	8002e12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e02:	4b4e      	ldr	r3, [pc, #312]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e08e      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e12:	4b4a      	ldr	r3, [pc, #296]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e086      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e22:	4b46      	ldr	r3, [pc, #280]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f023 0203 	bic.w	r2, r3, #3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4943      	ldr	r1, [pc, #268]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e34:	f7fe ff12 	bl	8001c5c <HAL_GetTick>
 8002e38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3c:	f7fe ff0e 	bl	8001c5c <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e06e      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e52:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 020c 	and.w	r2, r3, #12
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d1eb      	bne.n	8002e3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d208      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e80:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	492b      	ldr	r1, [pc, #172]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e92:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	683a      	ldr	r2, [r7, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d210      	bcs.n	8002ec2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f023 0207 	bic.w	r2, r3, #7
 8002ea8:	4923      	ldr	r1, [pc, #140]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCC_ClockConfig+0x1ec>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0307 	and.w	r3, r3, #7
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d001      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e036      	b.n	8002f30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ece:	4b1b      	ldr	r3, [pc, #108]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	4918      	ldr	r1, [pc, #96]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002eec:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	4910      	ldr	r1, [pc, #64]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f00:	f000 f824 	bl	8002f4c <HAL_RCC_GetSysClockFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b0d      	ldr	r3, [pc, #52]	; (8002f3c <HAL_RCC_ClockConfig+0x1f0>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 030f 	and.w	r3, r3, #15
 8002f10:	490b      	ldr	r1, [pc, #44]	; (8002f40 <HAL_RCC_ClockConfig+0x1f4>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_RCC_ClockConfig+0x1f8>)
 8002f1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_RCC_ClockConfig+0x1fc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fe fe49 	bl	8001bbc <HAL_InitTick>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	08005c60 	.word	0x08005c60
 8002f44:	2000016c 	.word	0x2000016c
 8002f48:	20000170 	.word	0x20000170

08002f4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	2300      	movs	r3, #0
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f5a:	4b3e      	ldr	r3, [pc, #248]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f64:	4b3b      	ldr	r3, [pc, #236]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d005      	beq.n	8002f80 <HAL_RCC_GetSysClockFreq+0x34>
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b0c      	cmp	r3, #12
 8002f78:	d121      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d11e      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f80:	4b34      	ldr	r3, [pc, #208]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f8c:	4b31      	ldr	r3, [pc, #196]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	e005      	b.n	8002fa8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	f003 030f 	and.w	r3, r3, #15
 8002fa6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10d      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d102      	bne.n	8002fca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fc4:	4b25      	ldr	r3, [pc, #148]	; (800305c <HAL_RCC_GetSysClockFreq+0x110>)
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	e004      	b.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d101      	bne.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fd0:	4b23      	ldr	r3, [pc, #140]	; (8003060 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d134      	bne.n	8003044 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fda:	4b1e      	ldr	r3, [pc, #120]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0303 	and.w	r3, r3, #3
 8002fe2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d003      	beq.n	8002ff2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ff0:	e005      	b.n	8002ffe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ff2:	4b1a      	ldr	r3, [pc, #104]	; (800305c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ff4:	617b      	str	r3, [r7, #20]
      break;
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ff8:	4b19      	ldr	r3, [pc, #100]	; (8003060 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ffa:	617b      	str	r3, [r7, #20]
      break;
 8002ffc:	e002      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	617b      	str	r3, [r7, #20]
      break;
 8003002:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003004:	4b13      	ldr	r3, [pc, #76]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	091b      	lsrs	r3, r3, #4
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	3301      	adds	r3, #1
 8003010:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003012:	4b10      	ldr	r3, [pc, #64]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	fb03 f202 	mul.w	r2, r3, r2
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	fbb2 f3f3 	udiv	r3, r2, r3
 8003028:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800302a:	4b0a      	ldr	r3, [pc, #40]	; (8003054 <HAL_RCC_GetSysClockFreq+0x108>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	0e5b      	lsrs	r3, r3, #25
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	3301      	adds	r3, #1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003042:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003044:	69bb      	ldr	r3, [r7, #24]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40021000 	.word	0x40021000
 8003058:	08005c70 	.word	0x08005c70
 800305c:	00f42400 	.word	0x00f42400
 8003060:	007a1200 	.word	0x007a1200

08003064 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003070:	4b2a      	ldr	r3, [pc, #168]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800307c:	f7ff fa26 	bl	80024cc <HAL_PWREx_GetVoltageRange>
 8003080:	6178      	str	r0, [r7, #20]
 8003082:	e014      	b.n	80030ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003084:	4b25      	ldr	r3, [pc, #148]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003088:	4a24      	ldr	r2, [pc, #144]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800308e:	6593      	str	r3, [r2, #88]	; 0x58
 8003090:	4b22      	ldr	r3, [pc, #136]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800309c:	f7ff fa16 	bl	80024cc <HAL_PWREx_GetVoltageRange>
 80030a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030a2:	4b1e      	ldr	r3, [pc, #120]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	4a1d      	ldr	r2, [pc, #116]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b4:	d10b      	bne.n	80030ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b80      	cmp	r3, #128	; 0x80
 80030ba:	d919      	bls.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2ba0      	cmp	r3, #160	; 0xa0
 80030c0:	d902      	bls.n	80030c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030c2:	2302      	movs	r3, #2
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	e013      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030c8:	2301      	movs	r3, #1
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	e010      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b80      	cmp	r3, #128	; 0x80
 80030d2:	d902      	bls.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030d4:	2303      	movs	r3, #3
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e00a      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d102      	bne.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030e0:	2302      	movs	r3, #2
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e004      	b.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b70      	cmp	r3, #112	; 0x70
 80030ea:	d101      	bne.n	80030f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030ec:	2301      	movs	r3, #1
 80030ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f023 0207 	bic.w	r2, r3, #7
 80030f8:	4909      	ldr	r1, [pc, #36]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	429a      	cmp	r2, r3
 800310c:	d001      	beq.n	8003112 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3718      	adds	r7, #24
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	40022000 	.word	0x40022000

08003124 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800312c:	2300      	movs	r3, #0
 800312e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003130:	2300      	movs	r3, #0
 8003132:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800313c:	2b00      	cmp	r3, #0
 800313e:	d041      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003144:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003148:	d02a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800314a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800314e:	d824      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003150:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003154:	d008      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003156:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800315a:	d81e      	bhi.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00a      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003164:	d010      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003166:	e018      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003168:	4b86      	ldr	r3, [pc, #536]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a85      	ldr	r2, [pc, #532]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	2100      	movs	r1, #0
 800317c:	4618      	mov	r0, r3
 800317e:	f000 fa8b 	bl	8003698 <RCCEx_PLLSAI1_Config>
 8003182:	4603      	mov	r3, r0
 8003184:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003186:	e00c      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	3320      	adds	r3, #32
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f000 fb76 	bl	8003880 <RCCEx_PLLSAI2_Config>
 8003194:	4603      	mov	r3, r0
 8003196:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003198:	e003      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	74fb      	strb	r3, [r7, #19]
      break;
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a2:	7cfb      	ldrb	r3, [r7, #19]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d10b      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a8:	4b76      	ldr	r3, [pc, #472]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b6:	4973      	ldr	r1, [pc, #460]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d041      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031d8:	d02a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031de:	d824      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031e4:	d008      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031ea:	d81e      	bhi.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00a      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031f4:	d010      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031f6:	e018      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031f8:	4b62      	ldr	r3, [pc, #392]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a61      	ldr	r2, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003202:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003204:	e015      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	2100      	movs	r1, #0
 800320c:	4618      	mov	r0, r3
 800320e:	f000 fa43 	bl	8003698 <RCCEx_PLLSAI1_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003216:	e00c      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	3320      	adds	r3, #32
 800321c:	2100      	movs	r1, #0
 800321e:	4618      	mov	r0, r3
 8003220:	f000 fb2e 	bl	8003880 <RCCEx_PLLSAI2_Config>
 8003224:	4603      	mov	r3, r0
 8003226:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003228:	e003      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	74fb      	strb	r3, [r7, #19]
      break;
 800322e:	e000      	b.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003230:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003232:	7cfb      	ldrb	r3, [r7, #19]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10b      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003238:	4b52      	ldr	r3, [pc, #328]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003246:	494f      	ldr	r1, [pc, #316]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800324e:	e001      	b.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003250:	7cfb      	ldrb	r3, [r7, #19]
 8003252:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 80a0 	beq.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003262:	2300      	movs	r3, #0
 8003264:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003266:	4b47      	ldr	r3, [pc, #284]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003272:	2301      	movs	r3, #1
 8003274:	e000      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003276:	2300      	movs	r3, #0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00d      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b41      	ldr	r3, [pc, #260]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800327e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003280:	4a40      	ldr	r2, [pc, #256]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6593      	str	r3, [r2, #88]	; 0x58
 8003288:	4b3e      	ldr	r3, [pc, #248]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003294:	2301      	movs	r3, #1
 8003296:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003298:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3a      	ldr	r2, [pc, #232]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800329e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032a4:	f7fe fcda 	bl	8001c5c <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032aa:	e009      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ac:	f7fe fcd6 	bl	8001c5c <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d902      	bls.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	74fb      	strb	r3, [r7, #19]
        break;
 80032be:	e005      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032c0:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ef      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032cc:	7cfb      	ldrb	r3, [r7, #19]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d15c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032d2:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d019      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032fc:	4b21      	ldr	r3, [pc, #132]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	4a20      	ldr	r2, [pc, #128]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800330c:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003312:	4a1c      	ldr	r2, [pc, #112]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003314:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d016      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332e:	f7fe fc95 	bl	8001c5c <HAL_GetTick>
 8003332:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003334:	e00b      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fe fc91 	bl	8001c5c <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d902      	bls.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	74fb      	strb	r3, [r7, #19]
            break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800334e:	4b0d      	ldr	r3, [pc, #52]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0ec      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800335c:	7cfb      	ldrb	r3, [r7, #19]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10c      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003362:	4b08      	ldr	r3, [pc, #32]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003368:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003372:	4904      	ldr	r1, [pc, #16]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003374:	4313      	orrs	r3, r2
 8003376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800337a:	e009      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800337c:	7cfb      	ldrb	r3, [r7, #19]
 800337e:	74bb      	strb	r3, [r7, #18]
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003382:	bf00      	nop
 8003384:	40021000 	.word	0x40021000
 8003388:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338c:	7cfb      	ldrb	r3, [r7, #19]
 800338e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003390:	7c7b      	ldrb	r3, [r7, #17]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d105      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003396:	4ba1      	ldr	r3, [pc, #644]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339a:	4aa0      	ldr	r2, [pc, #640]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800339c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ae:	4b9b      	ldr	r3, [pc, #620]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	f023 0203 	bic.w	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	4997      	ldr	r1, [pc, #604]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033d0:	4b92      	ldr	r3, [pc, #584]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033d6:	f023 020c 	bic.w	r2, r3, #12
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033de:	498f      	ldr	r1, [pc, #572]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033f2:	4b8a      	ldr	r3, [pc, #552]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	4986      	ldr	r1, [pc, #536]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003414:	4b81      	ldr	r3, [pc, #516]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800341a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003422:	497e      	ldr	r1, [pc, #504]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003436:	4b79      	ldr	r3, [pc, #484]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003444:	4975      	ldr	r1, [pc, #468]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0320 	and.w	r3, r3, #32
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00a      	beq.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003458:	4b70      	ldr	r3, [pc, #448]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800345a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800345e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003466:	496d      	ldr	r1, [pc, #436]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00a      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800347a:	4b68      	ldr	r3, [pc, #416]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003480:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	4964      	ldr	r1, [pc, #400]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800348a:	4313      	orrs	r3, r2
 800348c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800349c:	4b5f      	ldr	r3, [pc, #380]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	495c      	ldr	r1, [pc, #368]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00a      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034be:	4b57      	ldr	r3, [pc, #348]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80034c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034cc:	4953      	ldr	r1, [pc, #332]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00a      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034e0:	4b4e      	ldr	r3, [pc, #312]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80034e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034e6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	494b      	ldr	r1, [pc, #300]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003502:	4b46      	ldr	r3, [pc, #280]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	4942      	ldr	r1, [pc, #264]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d028      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003524:	4b3d      	ldr	r3, [pc, #244]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003532:	493a      	ldr	r1, [pc, #232]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003542:	d106      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003544:	4b35      	ldr	r3, [pc, #212]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	4a34      	ldr	r2, [pc, #208]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 800354a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354e:	60d3      	str	r3, [r2, #12]
 8003550:	e011      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003556:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355a:	d10c      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	3304      	adds	r3, #4
 8003560:	2101      	movs	r1, #1
 8003562:	4618      	mov	r0, r3
 8003564:	f000 f898 	bl	8003698 <RCCEx_PLLSAI1_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356c:	7cfb      	ldrb	r3, [r7, #19]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8003572:	7cfb      	ldrb	r3, [r7, #19]
 8003574:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d028      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003582:	4b26      	ldr	r3, [pc, #152]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	4922      	ldr	r1, [pc, #136]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035a0:	d106      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035ac:	60d3      	str	r3, [r2, #12]
 80035ae:	e011      	b.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035b8:	d10c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	3304      	adds	r3, #4
 80035be:	2101      	movs	r1, #1
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f869 	bl	8003698 <RCCEx_PLLSAI1_Config>
 80035c6:	4603      	mov	r3, r0
 80035c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035ca:	7cfb      	ldrb	r3, [r7, #19]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d031      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035e0:	4b0e      	ldr	r3, [pc, #56]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ee:	490b      	ldr	r1, [pc, #44]	; (800361c <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035fe:	d10f      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	2102      	movs	r1, #2
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f846 	bl	8003698 <RCCEx_PLLSAI1_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003616:	7cfb      	ldrb	r3, [r7, #19]
 8003618:	74bb      	strb	r3, [r7, #18]
 800361a:	e013      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x520>
 800361c:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003628:	d10c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3320      	adds	r3, #32
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f925 	bl	8003880 <RCCEx_PLLSAI2_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00a      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003656:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800365e:	490d      	ldr	r1, [pc, #52]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00a      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003672:	4b08      	ldr	r3, [pc, #32]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003678:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003680:	4904      	ldr	r1, [pc, #16]	; (8003694 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8003682:	4313      	orrs	r3, r2
 8003684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003688:	7cbb      	ldrb	r3, [r7, #18]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000

08003698 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036a6:	4b75      	ldr	r3, [pc, #468]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d018      	beq.n	80036e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036b2:	4b72      	ldr	r3, [pc, #456]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0203 	and.w	r2, r3, #3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d10d      	bne.n	80036de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
       ||
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80036ca:	4b6c      	ldr	r3, [pc, #432]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036cc:	68db      	ldr	r3, [r3, #12]
 80036ce:	091b      	lsrs	r3, r3, #4
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
       ||
 80036da:	429a      	cmp	r2, r3
 80036dc:	d047      	beq.n	800376e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	73fb      	strb	r3, [r7, #15]
 80036e2:	e044      	b.n	800376e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d018      	beq.n	800371e <RCCEx_PLLSAI1_Config+0x86>
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d825      	bhi.n	800373c <RCCEx_PLLSAI1_Config+0xa4>
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d002      	beq.n	80036fa <RCCEx_PLLSAI1_Config+0x62>
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d009      	beq.n	800370c <RCCEx_PLLSAI1_Config+0x74>
 80036f8:	e020      	b.n	800373c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036fa:	4b60      	ldr	r3, [pc, #384]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d11d      	bne.n	8003742 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800370a:	e01a      	b.n	8003742 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800370c:	4b5b      	ldr	r3, [pc, #364]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d116      	bne.n	8003746 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800371c:	e013      	b.n	8003746 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800371e:	4b57      	ldr	r3, [pc, #348]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800373a:	e006      	b.n	800374a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	73fb      	strb	r3, [r7, #15]
      break;
 8003740:	e004      	b.n	800374c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003742:	bf00      	nop
 8003744:	e002      	b.n	800374c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003746:	bf00      	nop
 8003748:	e000      	b.n	800374c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800374a:	bf00      	nop
    }

    if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10d      	bne.n	800376e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6819      	ldr	r1, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	430b      	orrs	r3, r1
 8003768:	4944      	ldr	r1, [pc, #272]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d17d      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003774:	4b41      	ldr	r3, [pc, #260]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a40      	ldr	r2, [pc, #256]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800377e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003780:	f7fe fa6c 	bl	8001c5c <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003786:	e009      	b.n	800379c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003788:	f7fe fa68 	bl	8001c5c <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d902      	bls.n	800379c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	73fb      	strb	r3, [r7, #15]
        break;
 800379a:	e005      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800379c:	4b37      	ldr	r3, [pc, #220]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ef      	bne.n	8003788 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d160      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037b4:	4b31      	ldr	r3, [pc, #196]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6892      	ldr	r2, [r2, #8]
 80037c4:	0211      	lsls	r1, r2, #8
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	68d2      	ldr	r2, [r2, #12]
 80037ca:	0912      	lsrs	r2, r2, #4
 80037cc:	0452      	lsls	r2, r2, #17
 80037ce:	430a      	orrs	r2, r1
 80037d0:	492a      	ldr	r1, [pc, #168]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	610b      	str	r3, [r1, #16]
 80037d6:	e027      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d112      	bne.n	8003804 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037de:	4b27      	ldr	r3, [pc, #156]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6892      	ldr	r2, [r2, #8]
 80037ee:	0211      	lsls	r1, r2, #8
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6912      	ldr	r2, [r2, #16]
 80037f4:	0852      	lsrs	r2, r2, #1
 80037f6:	3a01      	subs	r2, #1
 80037f8:	0552      	lsls	r2, r2, #21
 80037fa:	430a      	orrs	r2, r1
 80037fc:	491f      	ldr	r1, [pc, #124]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	610b      	str	r3, [r1, #16]
 8003802:	e011      	b.n	8003828 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003804:	4b1d      	ldr	r3, [pc, #116]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800380c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6892      	ldr	r2, [r2, #8]
 8003814:	0211      	lsls	r1, r2, #8
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6952      	ldr	r2, [r2, #20]
 800381a:	0852      	lsrs	r2, r2, #1
 800381c:	3a01      	subs	r2, #1
 800381e:	0652      	lsls	r2, r2, #25
 8003820:	430a      	orrs	r2, r1
 8003822:	4916      	ldr	r1, [pc, #88]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003824:	4313      	orrs	r3, r2
 8003826:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003828:	4b14      	ldr	r3, [pc, #80]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a13      	ldr	r2, [pc, #76]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800382e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003834:	f7fe fa12 	bl	8001c5c <HAL_GetTick>
 8003838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800383a:	e009      	b.n	8003850 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800383c:	f7fe fa0e 	bl	8001c5c <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d902      	bls.n	8003850 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	73fb      	strb	r3, [r7, #15]
          break;
 800384e:	e005      	b.n	800385c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003850:	4b0a      	ldr	r3, [pc, #40]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ef      	beq.n	800383c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800385c:	7bfb      	ldrb	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d106      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	4904      	ldr	r1, [pc, #16]	; (800387c <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	4313      	orrs	r3, r2
 800386e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000

08003880 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800388e:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d018      	beq.n	80038cc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800389a:	4b67      	ldr	r3, [pc, #412]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0203 	and.w	r2, r3, #3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d10d      	bne.n	80038c6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
       ||
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038b2:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	091b      	lsrs	r3, r3, #4
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	1c5a      	adds	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
       ||
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d047      	beq.n	8003956 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
 80038ca:	e044      	b.n	8003956 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b03      	cmp	r3, #3
 80038d2:	d018      	beq.n	8003906 <RCCEx_PLLSAI2_Config+0x86>
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	d825      	bhi.n	8003924 <RCCEx_PLLSAI2_Config+0xa4>
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d002      	beq.n	80038e2 <RCCEx_PLLSAI2_Config+0x62>
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d009      	beq.n	80038f4 <RCCEx_PLLSAI2_Config+0x74>
 80038e0:	e020      	b.n	8003924 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038e2:	4b55      	ldr	r3, [pc, #340]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d11d      	bne.n	800392a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038f2:	e01a      	b.n	800392a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038f4:	4b50      	ldr	r3, [pc, #320]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d116      	bne.n	800392e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003904:	e013      	b.n	800392e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003906:	4b4c      	ldr	r3, [pc, #304]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10f      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003912:	4b49      	ldr	r3, [pc, #292]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003922:	e006      	b.n	8003932 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
      break;
 8003928:	e004      	b.n	8003934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800392a:	bf00      	nop
 800392c:	e002      	b.n	8003934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003932:	bf00      	nop
    }

    if(status == HAL_OK)
 8003934:	7bfb      	ldrb	r3, [r7, #15]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10d      	bne.n	8003956 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800393a:	4b3f      	ldr	r3, [pc, #252]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	011b      	lsls	r3, r3, #4
 800394e:	430b      	orrs	r3, r1
 8003950:	4939      	ldr	r1, [pc, #228]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003952:	4313      	orrs	r3, r2
 8003954:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d167      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800395c:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a35      	ldr	r2, [pc, #212]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003966:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003968:	f7fe f978 	bl	8001c5c <HAL_GetTick>
 800396c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800396e:	e009      	b.n	8003984 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003970:	f7fe f974 	bl	8001c5c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	73fb      	strb	r3, [r7, #15]
        break;
 8003982:	e005      	b.n	8003990 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003984:	4b2c      	ldr	r3, [pc, #176]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ef      	bne.n	8003970 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d14a      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d111      	bne.n	80039c0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800399c:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	6892      	ldr	r2, [r2, #8]
 80039ac:	0211      	lsls	r1, r2, #8
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	68d2      	ldr	r2, [r2, #12]
 80039b2:	0912      	lsrs	r2, r2, #4
 80039b4:	0452      	lsls	r2, r2, #17
 80039b6:	430a      	orrs	r2, r1
 80039b8:	491f      	ldr	r1, [pc, #124]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	614b      	str	r3, [r1, #20]
 80039be:	e011      	b.n	80039e4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039c0:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6892      	ldr	r2, [r2, #8]
 80039d0:	0211      	lsls	r1, r2, #8
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6912      	ldr	r2, [r2, #16]
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	3a01      	subs	r2, #1
 80039da:	0652      	lsls	r2, r2, #25
 80039dc:	430a      	orrs	r2, r1
 80039de:	4916      	ldr	r1, [pc, #88]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039e4:	4b14      	ldr	r3, [pc, #80]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a13      	ldr	r2, [pc, #76]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f0:	f7fe f934 	bl	8001c5c <HAL_GetTick>
 80039f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039f6:	e009      	b.n	8003a0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039f8:	f7fe f930 	bl	8001c5c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d902      	bls.n	8003a0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	73fb      	strb	r3, [r7, #15]
          break;
 8003a0a:	e005      	b.n	8003a18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a0c:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d0ef      	beq.n	80039f8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d106      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	695a      	ldr	r2, [r3, #20]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4904      	ldr	r1, [pc, #16]	; (8003a38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000

08003a3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e095      	b.n	8003b7a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a5e:	d009      	beq.n	8003a74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	61da      	str	r2, [r3, #28]
 8003a66:	e005      	b.n	8003a74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7fd fede 	bl	8001850 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aaa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ab4:	d902      	bls.n	8003abc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e002      	b.n	8003ac2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003abc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ac0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003aca:	d007      	beq.n	8003adc <HAL_SPI_Init+0xa0>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ad4:	d002      	beq.n	8003adc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003aec:	431a      	orrs	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	431a      	orrs	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b1e:	ea42 0103 	orr.w	r1, r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	0c1b      	lsrs	r3, r3, #16
 8003b38:	f003 0204 	and.w	r2, r3, #4
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	f003 0310 	and.w	r3, r3, #16
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b58:	ea42 0103 	orr.w	r1, r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	603b      	str	r3, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_SPI_Transmit+0x22>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e158      	b.n	8003e56 <HAL_SPI_Transmit+0x2d4>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bac:	f7fe f856 	bl	8001c5c <HAL_GetTick>
 8003bb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d002      	beq.n	8003bc8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bc6:	e13d      	b.n	8003e44 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_SPI_Transmit+0x52>
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d102      	bne.n	8003bda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bd8:	e134      	b.n	8003e44 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2203      	movs	r2, #3
 8003bde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c24:	d10f      	bne.n	8003c46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d007      	beq.n	8003c64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c6c:	d94b      	bls.n	8003d06 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_SPI_Transmit+0xfa>
 8003c76:	8afb      	ldrh	r3, [r7, #22]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d13e      	bne.n	8003cfa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c80:	881a      	ldrh	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8c:	1c9a      	adds	r2, r3, #2
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003ca0:	e02b      	b.n	8003cfa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d112      	bne.n	8003cd6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb4:	881a      	ldrh	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	1c9a      	adds	r2, r3, #2
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cd4:	e011      	b.n	8003cfa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd6:	f7fd ffc1 	bl	8001c5c <HAL_GetTick>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	1ad3      	subs	r3, r2, r3
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d803      	bhi.n	8003cee <HAL_SPI_Transmit+0x16c>
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d102      	bne.n	8003cf4 <HAL_SPI_Transmit+0x172>
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cf8:	e0a4      	b.n	8003e44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d1ce      	bne.n	8003ca2 <HAL_SPI_Transmit+0x120>
 8003d04:	e07c      	b.n	8003e00 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_SPI_Transmit+0x192>
 8003d0e:	8afb      	ldrh	r3, [r7, #22]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d170      	bne.n	8003df6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d912      	bls.n	8003d44 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b02      	subs	r3, #2
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003d42:	e058      	b.n	8003df6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003d6a:	e044      	b.n	8003df6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d12b      	bne.n	8003dd2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d912      	bls.n	8003daa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d94:	1c9a      	adds	r2, r3, #2
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	3b02      	subs	r3, #2
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003da8:	e025      	b.n	8003df6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	7812      	ldrb	r2, [r2, #0]
 8003db6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dd0:	e011      	b.n	8003df6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dd2:	f7fd ff43 	bl	8001c5c <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	683a      	ldr	r2, [r7, #0]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d803      	bhi.n	8003dea <HAL_SPI_Transmit+0x268>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de8:	d102      	bne.n	8003df0 <HAL_SPI_Transmit+0x26e>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003df4:	e026      	b.n	8003e44 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1b5      	bne.n	8003d6c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	6839      	ldr	r1, [r7, #0]
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f949 	bl	800409c <SPI_EndRxTxTransaction>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d002      	beq.n	8003e16 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2220      	movs	r2, #32
 8003e14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10a      	bne.n	8003e34 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	613b      	str	r3, [r7, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d002      	beq.n	8003e42 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	77fb      	strb	r3, [r7, #31]
 8003e40:	e000      	b.n	8003e44 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003e42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003e54:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3720      	adds	r7, #32
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b088      	sub	sp, #32
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	603b      	str	r3, [r7, #0]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e70:	f7fd fef4 	bl	8001c5c <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e80:	f7fd feec 	bl	8001c5c <HAL_GetTick>
 8003e84:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	015b      	lsls	r3, r3, #5
 8003e8c:	0d1b      	lsrs	r3, r3, #20
 8003e8e:	69fa      	ldr	r2, [r7, #28]
 8003e90:	fb02 f303 	mul.w	r3, r2, r3
 8003e94:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e96:	e054      	b.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d050      	beq.n	8003f42 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ea0:	f7fd fedc 	bl	8001c5c <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d902      	bls.n	8003eb6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d13d      	bne.n	8003f32 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ec4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ece:	d111      	bne.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed8:	d004      	beq.n	8003ee4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ee2:	d107      	bne.n	8003ef4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ef2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efc:	d10f      	bne.n	8003f1e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0c:	601a      	str	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f1c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2201      	movs	r2, #1
 8003f22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e017      	b.n	8003f62 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	bf0c      	ite	eq
 8003f52:	2301      	moveq	r3, #1
 8003f54:	2300      	movne	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	461a      	mov	r2, r3
 8003f5a:	79fb      	ldrb	r3, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d19b      	bne.n	8003e98 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3720      	adds	r7, #32
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	2000016c 	.word	0x2000016c

08003f70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08a      	sub	sp, #40	; 0x28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
 8003f7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f82:	f7fd fe6b 	bl	8001c5c <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	4413      	add	r3, r2
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003f92:	f7fd fe63 	bl	8001c5c <HAL_GetTick>
 8003f96:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	330c      	adds	r3, #12
 8003f9e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003fa0:	4b3d      	ldr	r3, [pc, #244]	; (8004098 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4413      	add	r3, r2
 8003faa:	00da      	lsls	r2, r3, #3
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	0d1b      	lsrs	r3, r3, #20
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb2:	fb02 f303 	mul.w	r3, r2, r3
 8003fb6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003fb8:	e060      	b.n	800407c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003fc0:	d107      	bne.n	8003fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003fd0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd8:	d050      	beq.n	800407c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fda:	f7fd fe3f 	bl	8001c5c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d902      	bls.n	8003ff0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d13d      	bne.n	800406c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	685a      	ldr	r2, [r3, #4]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004008:	d111      	bne.n	800402e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004012:	d004      	beq.n	800401e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800401c:	d107      	bne.n	800402e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800402c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004036:	d10f      	bne.n	8004058 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e010      	b.n	800408e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	3b01      	subs	r3, #1
 800407a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	429a      	cmp	r2, r3
 800408a:	d196      	bne.n	8003fba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800408c:	2300      	movs	r3, #0
}
 800408e:	4618      	mov	r0, r3
 8004090:	3728      	adds	r7, #40	; 0x28
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	2000016c 	.word	0x2000016c

0800409c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f7ff ff5b 	bl	8003f70 <SPI_WaitFifoStateUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e027      	b.n	8004120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	2200      	movs	r2, #0
 80040d8:	2180      	movs	r1, #128	; 0x80
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fec0 	bl	8003e60 <SPI_WaitFlagStateUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d007      	beq.n	80040f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040ea:	f043 0220 	orr.w	r2, r3, #32
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e014      	b.n	8004120 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff ff34 	bl	8003f70 <SPI_WaitFifoStateUntilTimeout>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d007      	beq.n	800411e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e000      	b.n	8004120 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e049      	b.n	80041ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f7fd fbc2 	bl	80018d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3304      	adds	r3, #4
 8004164:	4619      	mov	r1, r3
 8004166:	4610      	mov	r0, r2
 8004168:	f000 fa46 	bl	80045f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3708      	adds	r7, #8
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b082      	sub	sp, #8
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d122      	bne.n	8004232 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d11b      	bne.n	8004232 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f06f 0202 	mvn.w	r2, #2
 8004202:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	f003 0303 	and.w	r3, r3, #3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f9ce 	bl	80045ba <HAL_TIM_IC_CaptureCallback>
 800421e:	e005      	b.n	800422c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f9c0 	bl	80045a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f9d1 	bl	80045ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b04      	cmp	r3, #4
 800423e:	d122      	bne.n	8004286 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f003 0304 	and.w	r3, r3, #4
 800424a:	2b04      	cmp	r3, #4
 800424c:	d11b      	bne.n	8004286 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f06f 0204 	mvn.w	r2, #4
 8004256:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f9a4 	bl	80045ba <HAL_TIM_IC_CaptureCallback>
 8004272:	e005      	b.n	8004280 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f996 	bl	80045a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f9a7 	bl	80045ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	691b      	ldr	r3, [r3, #16]
 800428c:	f003 0308 	and.w	r3, r3, #8
 8004290:	2b08      	cmp	r3, #8
 8004292:	d122      	bne.n	80042da <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b08      	cmp	r3, #8
 80042a0:	d11b      	bne.n	80042da <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f06f 0208 	mvn.w	r2, #8
 80042aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2204      	movs	r2, #4
 80042b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	f003 0303 	and.w	r3, r3, #3
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d003      	beq.n	80042c8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 f97a 	bl	80045ba <HAL_TIM_IC_CaptureCallback>
 80042c6:	e005      	b.n	80042d4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f96c 	bl	80045a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f97d 	bl	80045ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d122      	bne.n	800432e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0310 	and.w	r3, r3, #16
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	d11b      	bne.n	800432e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0210 	mvn.w	r2, #16
 80042fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2208      	movs	r2, #8
 8004304:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f950 	bl	80045ba <HAL_TIM_IC_CaptureCallback>
 800431a:	e005      	b.n	8004328 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f942 	bl	80045a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f000 f953 	bl	80045ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b01      	cmp	r3, #1
 800433a:	d10e      	bne.n	800435a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	d107      	bne.n	800435a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f06f 0201 	mvn.w	r2, #1
 8004352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f7fd f9e1 	bl	800171c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004364:	2b80      	cmp	r3, #128	; 0x80
 8004366:	d10e      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004372:	2b80      	cmp	r3, #128	; 0x80
 8004374:	d107      	bne.n	8004386 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800437e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 faff 	bl	8004984 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004394:	d10e      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d107      	bne.n	80043b4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80043ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 faf2 	bl	8004998 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043be:	2b40      	cmp	r3, #64	; 0x40
 80043c0:	d10e      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043cc:	2b40      	cmp	r3, #64	; 0x40
 80043ce:	d107      	bne.n	80043e0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f901 	bl	80045e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d10e      	bne.n	800440c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b20      	cmp	r3, #32
 80043fa:	d107      	bne.n	800440c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f06f 0220 	mvn.w	r2, #32
 8004404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fab2 	bl	8004970 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441e:	2300      	movs	r3, #0
 8004420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_TIM_ConfigClockSource+0x1c>
 800442c:	2302      	movs	r3, #2
 800442e:	e0b6      	b.n	800459e <HAL_TIM_ConfigClockSource+0x18a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2202      	movs	r2, #2
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800444e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800445a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800446c:	d03e      	beq.n	80044ec <HAL_TIM_ConfigClockSource+0xd8>
 800446e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004472:	f200 8087 	bhi.w	8004584 <HAL_TIM_ConfigClockSource+0x170>
 8004476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800447a:	f000 8086 	beq.w	800458a <HAL_TIM_ConfigClockSource+0x176>
 800447e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004482:	d87f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 8004484:	2b70      	cmp	r3, #112	; 0x70
 8004486:	d01a      	beq.n	80044be <HAL_TIM_ConfigClockSource+0xaa>
 8004488:	2b70      	cmp	r3, #112	; 0x70
 800448a:	d87b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 800448c:	2b60      	cmp	r3, #96	; 0x60
 800448e:	d050      	beq.n	8004532 <HAL_TIM_ConfigClockSource+0x11e>
 8004490:	2b60      	cmp	r3, #96	; 0x60
 8004492:	d877      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 8004494:	2b50      	cmp	r3, #80	; 0x50
 8004496:	d03c      	beq.n	8004512 <HAL_TIM_ConfigClockSource+0xfe>
 8004498:	2b50      	cmp	r3, #80	; 0x50
 800449a:	d873      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 800449c:	2b40      	cmp	r3, #64	; 0x40
 800449e:	d058      	beq.n	8004552 <HAL_TIM_ConfigClockSource+0x13e>
 80044a0:	2b40      	cmp	r3, #64	; 0x40
 80044a2:	d86f      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 80044a4:	2b30      	cmp	r3, #48	; 0x30
 80044a6:	d064      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044a8:	2b30      	cmp	r3, #48	; 0x30
 80044aa:	d86b      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d060      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d867      	bhi.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d05c      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d05a      	beq.n	8004572 <HAL_TIM_ConfigClockSource+0x15e>
 80044bc:	e062      	b.n	8004584 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685a      	ldr	r2, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f000 f9a7 	bl	8004820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	609a      	str	r2, [r3, #8]
      break;
 80044ea:	e04f      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6818      	ldr	r0, [r3, #0]
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	6899      	ldr	r1, [r3, #8]
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f000 f990 	bl	8004820 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800450e:	609a      	str	r2, [r3, #8]
      break;
 8004510:	e03c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	6859      	ldr	r1, [r3, #4]
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	461a      	mov	r2, r3
 8004520:	f000 f904 	bl	800472c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2150      	movs	r1, #80	; 0x50
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f95d 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 8004530:	e02c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6818      	ldr	r0, [r3, #0]
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	6859      	ldr	r1, [r3, #4]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	461a      	mov	r2, r3
 8004540:	f000 f923 	bl	800478a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2160      	movs	r1, #96	; 0x60
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f94d 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 8004550:	e01c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6818      	ldr	r0, [r3, #0]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	6859      	ldr	r1, [r3, #4]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	461a      	mov	r2, r3
 8004560:	f000 f8e4 	bl	800472c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2140      	movs	r1, #64	; 0x40
 800456a:	4618      	mov	r0, r3
 800456c:	f000 f93d 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 8004570:	e00c      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 f934 	bl	80047ea <TIM_ITRx_SetConfig>
      break;
 8004582:	e003      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      break;
 8004588:	e000      	b.n	800458c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800458a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800459c:	7bfb      	ldrb	r3, [r7, #15]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b083      	sub	sp, #12
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b083      	sub	sp, #12
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b083      	sub	sp, #12
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045d6:	bf00      	nop
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045e2:	b480      	push	{r7}
 80045e4:	b083      	sub	sp, #12
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045ea:	bf00      	nop
 80045ec:	370c      	adds	r7, #12
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
	...

080045f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a40      	ldr	r2, [pc, #256]	; (800470c <TIM_Base_SetConfig+0x114>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d013      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004616:	d00f      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a3d      	ldr	r2, [pc, #244]	; (8004710 <TIM_Base_SetConfig+0x118>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d00b      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a3c      	ldr	r2, [pc, #240]	; (8004714 <TIM_Base_SetConfig+0x11c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d007      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a3b      	ldr	r2, [pc, #236]	; (8004718 <TIM_Base_SetConfig+0x120>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d003      	beq.n	8004638 <TIM_Base_SetConfig+0x40>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a3a      	ldr	r2, [pc, #232]	; (800471c <TIM_Base_SetConfig+0x124>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d108      	bne.n	800464a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800463e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	4313      	orrs	r3, r2
 8004648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a2f      	ldr	r2, [pc, #188]	; (800470c <TIM_Base_SetConfig+0x114>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d01f      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004658:	d01b      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2c      	ldr	r2, [pc, #176]	; (8004710 <TIM_Base_SetConfig+0x118>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d017      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <TIM_Base_SetConfig+0x11c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <TIM_Base_SetConfig+0x120>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00f      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <TIM_Base_SetConfig+0x124>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d00b      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a28      	ldr	r2, [pc, #160]	; (8004720 <TIM_Base_SetConfig+0x128>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d007      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a27      	ldr	r2, [pc, #156]	; (8004724 <TIM_Base_SetConfig+0x12c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d003      	beq.n	8004692 <TIM_Base_SetConfig+0x9a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a26      	ldr	r2, [pc, #152]	; (8004728 <TIM_Base_SetConfig+0x130>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d108      	bne.n	80046a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004698:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	68fa      	ldr	r2, [r7, #12]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68fa      	ldr	r2, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a10      	ldr	r2, [pc, #64]	; (800470c <TIM_Base_SetConfig+0x114>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d00f      	beq.n	80046f0 <TIM_Base_SetConfig+0xf8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a12      	ldr	r2, [pc, #72]	; (800471c <TIM_Base_SetConfig+0x124>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d00b      	beq.n	80046f0 <TIM_Base_SetConfig+0xf8>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	4a11      	ldr	r2, [pc, #68]	; (8004720 <TIM_Base_SetConfig+0x128>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d007      	beq.n	80046f0 <TIM_Base_SetConfig+0xf8>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	4a10      	ldr	r2, [pc, #64]	; (8004724 <TIM_Base_SetConfig+0x12c>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d003      	beq.n	80046f0 <TIM_Base_SetConfig+0xf8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	4a0f      	ldr	r2, [pc, #60]	; (8004728 <TIM_Base_SetConfig+0x130>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d103      	bne.n	80046f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	691a      	ldr	r2, [r3, #16]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	615a      	str	r2, [r3, #20]
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0201 	bic.w	r2, r3, #1
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 030a 	bic.w	r3, r3, #10
 8004768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800478a:	b480      	push	{r7}
 800478c:	b087      	sub	sp, #28
 800478e:	af00      	add	r7, sp, #0
 8004790:	60f8      	str	r0, [r7, #12]
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a1b      	ldr	r3, [r3, #32]
 800479a:	f023 0210 	bic.w	r2, r3, #16
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6a1b      	ldr	r3, [r3, #32]
 80047ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	693a      	ldr	r2, [r7, #16]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr

080047ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b085      	sub	sp, #20
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
 80047f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004800:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	f043 0307 	orr.w	r3, r3, #7
 800480c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	609a      	str	r2, [r3, #8]
}
 8004814:	bf00      	nop
 8004816:	3714      	adds	r7, #20
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004820:	b480      	push	{r7}
 8004822:	b087      	sub	sp, #28
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800483a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	021a      	lsls	r2, r3, #8
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	431a      	orrs	r2, r3
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	609a      	str	r2, [r3, #8]
}
 8004854:	bf00      	nop
 8004856:	371c      	adds	r7, #28
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004874:	2302      	movs	r3, #2
 8004876:	e068      	b.n	800494a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2e      	ldr	r2, [pc, #184]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2d      	ldr	r2, [pc, #180]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d108      	bne.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80048b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a1e      	ldr	r2, [pc, #120]	; (8004958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01d      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ea:	d018      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a1b      	ldr	r2, [pc, #108]	; (8004960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d013      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1a      	ldr	r2, [pc, #104]	; (8004964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d00e      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d009      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a13      	ldr	r2, [pc, #76]	; (800495c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d004      	beq.n	800491e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a14      	ldr	r2, [pc, #80]	; (800496c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d10c      	bne.n	8004938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	68ba      	ldr	r2, [r7, #8]
 800492c:	4313      	orrs	r3, r2
 800492e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68ba      	ldr	r2, [r7, #8]
 8004936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	3714      	adds	r7, #20
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40012c00 	.word	0x40012c00
 800495c:	40013400 	.word	0x40013400
 8004960:	40000400 	.word	0x40000400
 8004964:	40000800 	.word	0x40000800
 8004968:	40000c00 	.word	0x40000c00
 800496c:	40014000 	.word	0x40014000

08004970 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <__assert_func>:
 80049ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049ae:	4614      	mov	r4, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <__assert_func+0x2c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4605      	mov	r5, r0
 80049b8:	68d8      	ldr	r0, [r3, #12]
 80049ba:	b14c      	cbz	r4, 80049d0 <__assert_func+0x24>
 80049bc:	4b07      	ldr	r3, [pc, #28]	; (80049dc <__assert_func+0x30>)
 80049be:	9100      	str	r1, [sp, #0]
 80049c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049c4:	4906      	ldr	r1, [pc, #24]	; (80049e0 <__assert_func+0x34>)
 80049c6:	462b      	mov	r3, r5
 80049c8:	f000 f814 	bl	80049f4 <fiprintf>
 80049cc:	f000 fc24 	bl	8005218 <abort>
 80049d0:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <__assert_func+0x38>)
 80049d2:	461c      	mov	r4, r3
 80049d4:	e7f3      	b.n	80049be <__assert_func+0x12>
 80049d6:	bf00      	nop
 80049d8:	20000178 	.word	0x20000178
 80049dc:	08005ca0 	.word	0x08005ca0
 80049e0:	08005cad 	.word	0x08005cad
 80049e4:	08005cdb 	.word	0x08005cdb

080049e8 <__errno>:
 80049e8:	4b01      	ldr	r3, [pc, #4]	; (80049f0 <__errno+0x8>)
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000178 	.word	0x20000178

080049f4 <fiprintf>:
 80049f4:	b40e      	push	{r1, r2, r3}
 80049f6:	b503      	push	{r0, r1, lr}
 80049f8:	4601      	mov	r1, r0
 80049fa:	ab03      	add	r3, sp, #12
 80049fc:	4805      	ldr	r0, [pc, #20]	; (8004a14 <fiprintf+0x20>)
 80049fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a02:	6800      	ldr	r0, [r0, #0]
 8004a04:	9301      	str	r3, [sp, #4]
 8004a06:	f000 f86b 	bl	8004ae0 <_vfiprintf_r>
 8004a0a:	b002      	add	sp, #8
 8004a0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a10:	b003      	add	sp, #12
 8004a12:	4770      	bx	lr
 8004a14:	20000178 	.word	0x20000178

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	; (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	; (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	; (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	; (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f001 f808 	bl	8005a40 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08005d74 	.word	0x08005d74
 8004a54:	08005d74 	.word	0x08005d74
 8004a58:	08005d74 	.word	0x08005d74
 8004a5c:	08005d78 	.word	0x08005d78

08004a60 <memcpy>:
 8004a60:	440a      	add	r2, r1
 8004a62:	4291      	cmp	r1, r2
 8004a64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a68:	d100      	bne.n	8004a6c <memcpy+0xc>
 8004a6a:	4770      	bx	lr
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a76:	4291      	cmp	r1, r2
 8004a78:	d1f9      	bne.n	8004a6e <memcpy+0xe>
 8004a7a:	bd10      	pop	{r4, pc}

08004a7c <memset>:
 8004a7c:	4402      	add	r2, r0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d100      	bne.n	8004a86 <memset+0xa>
 8004a84:	4770      	bx	lr
 8004a86:	f803 1b01 	strb.w	r1, [r3], #1
 8004a8a:	e7f9      	b.n	8004a80 <memset+0x4>

08004a8c <__sfputc_r>:
 8004a8c:	6893      	ldr	r3, [r2, #8]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	b410      	push	{r4}
 8004a94:	6093      	str	r3, [r2, #8]
 8004a96:	da08      	bge.n	8004aaa <__sfputc_r+0x1e>
 8004a98:	6994      	ldr	r4, [r2, #24]
 8004a9a:	42a3      	cmp	r3, r4
 8004a9c:	db01      	blt.n	8004aa2 <__sfputc_r+0x16>
 8004a9e:	290a      	cmp	r1, #10
 8004aa0:	d103      	bne.n	8004aaa <__sfputc_r+0x1e>
 8004aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aa6:	f000 baf7 	b.w	8005098 <__swbuf_r>
 8004aaa:	6813      	ldr	r3, [r2, #0]
 8004aac:	1c58      	adds	r0, r3, #1
 8004aae:	6010      	str	r0, [r2, #0]
 8004ab0:	7019      	strb	r1, [r3, #0]
 8004ab2:	4608      	mov	r0, r1
 8004ab4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ab8:	4770      	bx	lr

08004aba <__sfputs_r>:
 8004aba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004abc:	4606      	mov	r6, r0
 8004abe:	460f      	mov	r7, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	18d5      	adds	r5, r2, r3
 8004ac4:	42ac      	cmp	r4, r5
 8004ac6:	d101      	bne.n	8004acc <__sfputs_r+0x12>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	e007      	b.n	8004adc <__sfputs_r+0x22>
 8004acc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ad0:	463a      	mov	r2, r7
 8004ad2:	4630      	mov	r0, r6
 8004ad4:	f7ff ffda 	bl	8004a8c <__sfputc_r>
 8004ad8:	1c43      	adds	r3, r0, #1
 8004ada:	d1f3      	bne.n	8004ac4 <__sfputs_r+0xa>
 8004adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ae0 <_vfiprintf_r>:
 8004ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae4:	460d      	mov	r5, r1
 8004ae6:	b09d      	sub	sp, #116	; 0x74
 8004ae8:	4614      	mov	r4, r2
 8004aea:	4698      	mov	r8, r3
 8004aec:	4606      	mov	r6, r0
 8004aee:	b118      	cbz	r0, 8004af8 <_vfiprintf_r+0x18>
 8004af0:	6983      	ldr	r3, [r0, #24]
 8004af2:	b90b      	cbnz	r3, 8004af8 <_vfiprintf_r+0x18>
 8004af4:	f000 fcb2 	bl	800545c <__sinit>
 8004af8:	4b89      	ldr	r3, [pc, #548]	; (8004d20 <_vfiprintf_r+0x240>)
 8004afa:	429d      	cmp	r5, r3
 8004afc:	d11b      	bne.n	8004b36 <_vfiprintf_r+0x56>
 8004afe:	6875      	ldr	r5, [r6, #4]
 8004b00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b02:	07d9      	lsls	r1, r3, #31
 8004b04:	d405      	bmi.n	8004b12 <_vfiprintf_r+0x32>
 8004b06:	89ab      	ldrh	r3, [r5, #12]
 8004b08:	059a      	lsls	r2, r3, #22
 8004b0a:	d402      	bmi.n	8004b12 <_vfiprintf_r+0x32>
 8004b0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b0e:	f000 fd43 	bl	8005598 <__retarget_lock_acquire_recursive>
 8004b12:	89ab      	ldrh	r3, [r5, #12]
 8004b14:	071b      	lsls	r3, r3, #28
 8004b16:	d501      	bpl.n	8004b1c <_vfiprintf_r+0x3c>
 8004b18:	692b      	ldr	r3, [r5, #16]
 8004b1a:	b9eb      	cbnz	r3, 8004b58 <_vfiprintf_r+0x78>
 8004b1c:	4629      	mov	r1, r5
 8004b1e:	4630      	mov	r0, r6
 8004b20:	f000 fb0c 	bl	800513c <__swsetup_r>
 8004b24:	b1c0      	cbz	r0, 8004b58 <_vfiprintf_r+0x78>
 8004b26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b28:	07dc      	lsls	r4, r3, #31
 8004b2a:	d50e      	bpl.n	8004b4a <_vfiprintf_r+0x6a>
 8004b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b30:	b01d      	add	sp, #116	; 0x74
 8004b32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b36:	4b7b      	ldr	r3, [pc, #492]	; (8004d24 <_vfiprintf_r+0x244>)
 8004b38:	429d      	cmp	r5, r3
 8004b3a:	d101      	bne.n	8004b40 <_vfiprintf_r+0x60>
 8004b3c:	68b5      	ldr	r5, [r6, #8]
 8004b3e:	e7df      	b.n	8004b00 <_vfiprintf_r+0x20>
 8004b40:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <_vfiprintf_r+0x248>)
 8004b42:	429d      	cmp	r5, r3
 8004b44:	bf08      	it	eq
 8004b46:	68f5      	ldreq	r5, [r6, #12]
 8004b48:	e7da      	b.n	8004b00 <_vfiprintf_r+0x20>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	0598      	lsls	r0, r3, #22
 8004b4e:	d4ed      	bmi.n	8004b2c <_vfiprintf_r+0x4c>
 8004b50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b52:	f000 fd22 	bl	800559a <__retarget_lock_release_recursive>
 8004b56:	e7e9      	b.n	8004b2c <_vfiprintf_r+0x4c>
 8004b58:	2300      	movs	r3, #0
 8004b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b66:	2330      	movs	r3, #48	; 0x30
 8004b68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d2c <_vfiprintf_r+0x24c>
 8004b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b70:	f04f 0901 	mov.w	r9, #1
 8004b74:	4623      	mov	r3, r4
 8004b76:	469a      	mov	sl, r3
 8004b78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b7c:	b10a      	cbz	r2, 8004b82 <_vfiprintf_r+0xa2>
 8004b7e:	2a25      	cmp	r2, #37	; 0x25
 8004b80:	d1f9      	bne.n	8004b76 <_vfiprintf_r+0x96>
 8004b82:	ebba 0b04 	subs.w	fp, sl, r4
 8004b86:	d00b      	beq.n	8004ba0 <_vfiprintf_r+0xc0>
 8004b88:	465b      	mov	r3, fp
 8004b8a:	4622      	mov	r2, r4
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4630      	mov	r0, r6
 8004b90:	f7ff ff93 	bl	8004aba <__sfputs_r>
 8004b94:	3001      	adds	r0, #1
 8004b96:	f000 80aa 	beq.w	8004cee <_vfiprintf_r+0x20e>
 8004b9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b9c:	445a      	add	r2, fp
 8004b9e:	9209      	str	r2, [sp, #36]	; 0x24
 8004ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80a2 	beq.w	8004cee <_vfiprintf_r+0x20e>
 8004baa:	2300      	movs	r3, #0
 8004bac:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bb4:	f10a 0a01 	add.w	sl, sl, #1
 8004bb8:	9304      	str	r3, [sp, #16]
 8004bba:	9307      	str	r3, [sp, #28]
 8004bbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bc0:	931a      	str	r3, [sp, #104]	; 0x68
 8004bc2:	4654      	mov	r4, sl
 8004bc4:	2205      	movs	r2, #5
 8004bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bca:	4858      	ldr	r0, [pc, #352]	; (8004d2c <_vfiprintf_r+0x24c>)
 8004bcc:	f7fb fb00 	bl	80001d0 <memchr>
 8004bd0:	9a04      	ldr	r2, [sp, #16]
 8004bd2:	b9d8      	cbnz	r0, 8004c0c <_vfiprintf_r+0x12c>
 8004bd4:	06d1      	lsls	r1, r2, #27
 8004bd6:	bf44      	itt	mi
 8004bd8:	2320      	movmi	r3, #32
 8004bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bde:	0713      	lsls	r3, r2, #28
 8004be0:	bf44      	itt	mi
 8004be2:	232b      	movmi	r3, #43	; 0x2b
 8004be4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004be8:	f89a 3000 	ldrb.w	r3, [sl]
 8004bec:	2b2a      	cmp	r3, #42	; 0x2a
 8004bee:	d015      	beq.n	8004c1c <_vfiprintf_r+0x13c>
 8004bf0:	9a07      	ldr	r2, [sp, #28]
 8004bf2:	4654      	mov	r4, sl
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f04f 0c0a 	mov.w	ip, #10
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c00:	3b30      	subs	r3, #48	; 0x30
 8004c02:	2b09      	cmp	r3, #9
 8004c04:	d94e      	bls.n	8004ca4 <_vfiprintf_r+0x1c4>
 8004c06:	b1b0      	cbz	r0, 8004c36 <_vfiprintf_r+0x156>
 8004c08:	9207      	str	r2, [sp, #28]
 8004c0a:	e014      	b.n	8004c36 <_vfiprintf_r+0x156>
 8004c0c:	eba0 0308 	sub.w	r3, r0, r8
 8004c10:	fa09 f303 	lsl.w	r3, r9, r3
 8004c14:	4313      	orrs	r3, r2
 8004c16:	9304      	str	r3, [sp, #16]
 8004c18:	46a2      	mov	sl, r4
 8004c1a:	e7d2      	b.n	8004bc2 <_vfiprintf_r+0xe2>
 8004c1c:	9b03      	ldr	r3, [sp, #12]
 8004c1e:	1d19      	adds	r1, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	9103      	str	r1, [sp, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bfbb      	ittet	lt
 8004c28:	425b      	neglt	r3, r3
 8004c2a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c2e:	9307      	strge	r3, [sp, #28]
 8004c30:	9307      	strlt	r3, [sp, #28]
 8004c32:	bfb8      	it	lt
 8004c34:	9204      	strlt	r2, [sp, #16]
 8004c36:	7823      	ldrb	r3, [r4, #0]
 8004c38:	2b2e      	cmp	r3, #46	; 0x2e
 8004c3a:	d10c      	bne.n	8004c56 <_vfiprintf_r+0x176>
 8004c3c:	7863      	ldrb	r3, [r4, #1]
 8004c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c40:	d135      	bne.n	8004cae <_vfiprintf_r+0x1ce>
 8004c42:	9b03      	ldr	r3, [sp, #12]
 8004c44:	1d1a      	adds	r2, r3, #4
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	9203      	str	r2, [sp, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	bfb8      	it	lt
 8004c4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c52:	3402      	adds	r4, #2
 8004c54:	9305      	str	r3, [sp, #20]
 8004c56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d3c <_vfiprintf_r+0x25c>
 8004c5a:	7821      	ldrb	r1, [r4, #0]
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	4650      	mov	r0, sl
 8004c60:	f7fb fab6 	bl	80001d0 <memchr>
 8004c64:	b140      	cbz	r0, 8004c78 <_vfiprintf_r+0x198>
 8004c66:	2340      	movs	r3, #64	; 0x40
 8004c68:	eba0 000a 	sub.w	r0, r0, sl
 8004c6c:	fa03 f000 	lsl.w	r0, r3, r0
 8004c70:	9b04      	ldr	r3, [sp, #16]
 8004c72:	4303      	orrs	r3, r0
 8004c74:	3401      	adds	r4, #1
 8004c76:	9304      	str	r3, [sp, #16]
 8004c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c7c:	482c      	ldr	r0, [pc, #176]	; (8004d30 <_vfiprintf_r+0x250>)
 8004c7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c82:	2206      	movs	r2, #6
 8004c84:	f7fb faa4 	bl	80001d0 <memchr>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	d03f      	beq.n	8004d0c <_vfiprintf_r+0x22c>
 8004c8c:	4b29      	ldr	r3, [pc, #164]	; (8004d34 <_vfiprintf_r+0x254>)
 8004c8e:	bb1b      	cbnz	r3, 8004cd8 <_vfiprintf_r+0x1f8>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	3307      	adds	r3, #7
 8004c94:	f023 0307 	bic.w	r3, r3, #7
 8004c98:	3308      	adds	r3, #8
 8004c9a:	9303      	str	r3, [sp, #12]
 8004c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c9e:	443b      	add	r3, r7
 8004ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca2:	e767      	b.n	8004b74 <_vfiprintf_r+0x94>
 8004ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ca8:	460c      	mov	r4, r1
 8004caa:	2001      	movs	r0, #1
 8004cac:	e7a5      	b.n	8004bfa <_vfiprintf_r+0x11a>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	3401      	adds	r4, #1
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	f04f 0c0a 	mov.w	ip, #10
 8004cba:	4620      	mov	r0, r4
 8004cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cc0:	3a30      	subs	r2, #48	; 0x30
 8004cc2:	2a09      	cmp	r2, #9
 8004cc4:	d903      	bls.n	8004cce <_vfiprintf_r+0x1ee>
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d0c5      	beq.n	8004c56 <_vfiprintf_r+0x176>
 8004cca:	9105      	str	r1, [sp, #20]
 8004ccc:	e7c3      	b.n	8004c56 <_vfiprintf_r+0x176>
 8004cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e7f0      	b.n	8004cba <_vfiprintf_r+0x1da>
 8004cd8:	ab03      	add	r3, sp, #12
 8004cda:	9300      	str	r3, [sp, #0]
 8004cdc:	462a      	mov	r2, r5
 8004cde:	4b16      	ldr	r3, [pc, #88]	; (8004d38 <_vfiprintf_r+0x258>)
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	f3af 8000 	nop.w
 8004ce8:	4607      	mov	r7, r0
 8004cea:	1c78      	adds	r0, r7, #1
 8004cec:	d1d6      	bne.n	8004c9c <_vfiprintf_r+0x1bc>
 8004cee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cf0:	07d9      	lsls	r1, r3, #31
 8004cf2:	d405      	bmi.n	8004d00 <_vfiprintf_r+0x220>
 8004cf4:	89ab      	ldrh	r3, [r5, #12]
 8004cf6:	059a      	lsls	r2, r3, #22
 8004cf8:	d402      	bmi.n	8004d00 <_vfiprintf_r+0x220>
 8004cfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cfc:	f000 fc4d 	bl	800559a <__retarget_lock_release_recursive>
 8004d00:	89ab      	ldrh	r3, [r5, #12]
 8004d02:	065b      	lsls	r3, r3, #25
 8004d04:	f53f af12 	bmi.w	8004b2c <_vfiprintf_r+0x4c>
 8004d08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d0a:	e711      	b.n	8004b30 <_vfiprintf_r+0x50>
 8004d0c:	ab03      	add	r3, sp, #12
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	462a      	mov	r2, r5
 8004d12:	4b09      	ldr	r3, [pc, #36]	; (8004d38 <_vfiprintf_r+0x258>)
 8004d14:	a904      	add	r1, sp, #16
 8004d16:	4630      	mov	r0, r6
 8004d18:	f000 f880 	bl	8004e1c <_printf_i>
 8004d1c:	e7e4      	b.n	8004ce8 <_vfiprintf_r+0x208>
 8004d1e:	bf00      	nop
 8004d20:	08005d34 	.word	0x08005d34
 8004d24:	08005d54 	.word	0x08005d54
 8004d28:	08005d14 	.word	0x08005d14
 8004d2c:	08005ce0 	.word	0x08005ce0
 8004d30:	08005cea 	.word	0x08005cea
 8004d34:	00000000 	.word	0x00000000
 8004d38:	08004abb 	.word	0x08004abb
 8004d3c:	08005ce6 	.word	0x08005ce6

08004d40 <_printf_common>:
 8004d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d44:	4616      	mov	r6, r2
 8004d46:	4699      	mov	r9, r3
 8004d48:	688a      	ldr	r2, [r1, #8]
 8004d4a:	690b      	ldr	r3, [r1, #16]
 8004d4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d50:	4293      	cmp	r3, r2
 8004d52:	bfb8      	it	lt
 8004d54:	4613      	movlt	r3, r2
 8004d56:	6033      	str	r3, [r6, #0]
 8004d58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d5c:	4607      	mov	r7, r0
 8004d5e:	460c      	mov	r4, r1
 8004d60:	b10a      	cbz	r2, 8004d66 <_printf_common+0x26>
 8004d62:	3301      	adds	r3, #1
 8004d64:	6033      	str	r3, [r6, #0]
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	0699      	lsls	r1, r3, #26
 8004d6a:	bf42      	ittt	mi
 8004d6c:	6833      	ldrmi	r3, [r6, #0]
 8004d6e:	3302      	addmi	r3, #2
 8004d70:	6033      	strmi	r3, [r6, #0]
 8004d72:	6825      	ldr	r5, [r4, #0]
 8004d74:	f015 0506 	ands.w	r5, r5, #6
 8004d78:	d106      	bne.n	8004d88 <_printf_common+0x48>
 8004d7a:	f104 0a19 	add.w	sl, r4, #25
 8004d7e:	68e3      	ldr	r3, [r4, #12]
 8004d80:	6832      	ldr	r2, [r6, #0]
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	42ab      	cmp	r3, r5
 8004d86:	dc26      	bgt.n	8004dd6 <_printf_common+0x96>
 8004d88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d8c:	1e13      	subs	r3, r2, #0
 8004d8e:	6822      	ldr	r2, [r4, #0]
 8004d90:	bf18      	it	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	0692      	lsls	r2, r2, #26
 8004d96:	d42b      	bmi.n	8004df0 <_printf_common+0xb0>
 8004d98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d9c:	4649      	mov	r1, r9
 8004d9e:	4638      	mov	r0, r7
 8004da0:	47c0      	blx	r8
 8004da2:	3001      	adds	r0, #1
 8004da4:	d01e      	beq.n	8004de4 <_printf_common+0xa4>
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	68e5      	ldr	r5, [r4, #12]
 8004daa:	6832      	ldr	r2, [r6, #0]
 8004dac:	f003 0306 	and.w	r3, r3, #6
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	bf08      	it	eq
 8004db4:	1aad      	subeq	r5, r5, r2
 8004db6:	68a3      	ldr	r3, [r4, #8]
 8004db8:	6922      	ldr	r2, [r4, #16]
 8004dba:	bf0c      	ite	eq
 8004dbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dc0:	2500      	movne	r5, #0
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	bfc4      	itt	gt
 8004dc6:	1a9b      	subgt	r3, r3, r2
 8004dc8:	18ed      	addgt	r5, r5, r3
 8004dca:	2600      	movs	r6, #0
 8004dcc:	341a      	adds	r4, #26
 8004dce:	42b5      	cmp	r5, r6
 8004dd0:	d11a      	bne.n	8004e08 <_printf_common+0xc8>
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	e008      	b.n	8004de8 <_printf_common+0xa8>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4652      	mov	r2, sl
 8004dda:	4649      	mov	r1, r9
 8004ddc:	4638      	mov	r0, r7
 8004dde:	47c0      	blx	r8
 8004de0:	3001      	adds	r0, #1
 8004de2:	d103      	bne.n	8004dec <_printf_common+0xac>
 8004de4:	f04f 30ff 	mov.w	r0, #4294967295
 8004de8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dec:	3501      	adds	r5, #1
 8004dee:	e7c6      	b.n	8004d7e <_printf_common+0x3e>
 8004df0:	18e1      	adds	r1, r4, r3
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	2030      	movs	r0, #48	; 0x30
 8004df6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dfa:	4422      	add	r2, r4
 8004dfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e04:	3302      	adds	r3, #2
 8004e06:	e7c7      	b.n	8004d98 <_printf_common+0x58>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	4649      	mov	r1, r9
 8004e0e:	4638      	mov	r0, r7
 8004e10:	47c0      	blx	r8
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0e6      	beq.n	8004de4 <_printf_common+0xa4>
 8004e16:	3601      	adds	r6, #1
 8004e18:	e7d9      	b.n	8004dce <_printf_common+0x8e>
	...

08004e1c <_printf_i>:
 8004e1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e20:	7e0f      	ldrb	r7, [r1, #24]
 8004e22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e24:	2f78      	cmp	r7, #120	; 0x78
 8004e26:	4691      	mov	r9, r2
 8004e28:	4680      	mov	r8, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	469a      	mov	sl, r3
 8004e2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e32:	d807      	bhi.n	8004e44 <_printf_i+0x28>
 8004e34:	2f62      	cmp	r7, #98	; 0x62
 8004e36:	d80a      	bhi.n	8004e4e <_printf_i+0x32>
 8004e38:	2f00      	cmp	r7, #0
 8004e3a:	f000 80d8 	beq.w	8004fee <_printf_i+0x1d2>
 8004e3e:	2f58      	cmp	r7, #88	; 0x58
 8004e40:	f000 80a3 	beq.w	8004f8a <_printf_i+0x16e>
 8004e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e4c:	e03a      	b.n	8004ec4 <_printf_i+0xa8>
 8004e4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e52:	2b15      	cmp	r3, #21
 8004e54:	d8f6      	bhi.n	8004e44 <_printf_i+0x28>
 8004e56:	a101      	add	r1, pc, #4	; (adr r1, 8004e5c <_printf_i+0x40>)
 8004e58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e5c:	08004eb5 	.word	0x08004eb5
 8004e60:	08004ec9 	.word	0x08004ec9
 8004e64:	08004e45 	.word	0x08004e45
 8004e68:	08004e45 	.word	0x08004e45
 8004e6c:	08004e45 	.word	0x08004e45
 8004e70:	08004e45 	.word	0x08004e45
 8004e74:	08004ec9 	.word	0x08004ec9
 8004e78:	08004e45 	.word	0x08004e45
 8004e7c:	08004e45 	.word	0x08004e45
 8004e80:	08004e45 	.word	0x08004e45
 8004e84:	08004e45 	.word	0x08004e45
 8004e88:	08004fd5 	.word	0x08004fd5
 8004e8c:	08004ef9 	.word	0x08004ef9
 8004e90:	08004fb7 	.word	0x08004fb7
 8004e94:	08004e45 	.word	0x08004e45
 8004e98:	08004e45 	.word	0x08004e45
 8004e9c:	08004ff7 	.word	0x08004ff7
 8004ea0:	08004e45 	.word	0x08004e45
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	08004e45 	.word	0x08004e45
 8004eac:	08004e45 	.word	0x08004e45
 8004eb0:	08004fbf 	.word	0x08004fbf
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	1d1a      	adds	r2, r3, #4
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	602a      	str	r2, [r5, #0]
 8004ebc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ec0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e0a3      	b.n	8005010 <_printf_i+0x1f4>
 8004ec8:	6820      	ldr	r0, [r4, #0]
 8004eca:	6829      	ldr	r1, [r5, #0]
 8004ecc:	0606      	lsls	r6, r0, #24
 8004ece:	f101 0304 	add.w	r3, r1, #4
 8004ed2:	d50a      	bpl.n	8004eea <_printf_i+0xce>
 8004ed4:	680e      	ldr	r6, [r1, #0]
 8004ed6:	602b      	str	r3, [r5, #0]
 8004ed8:	2e00      	cmp	r6, #0
 8004eda:	da03      	bge.n	8004ee4 <_printf_i+0xc8>
 8004edc:	232d      	movs	r3, #45	; 0x2d
 8004ede:	4276      	negs	r6, r6
 8004ee0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ee4:	485e      	ldr	r0, [pc, #376]	; (8005060 <_printf_i+0x244>)
 8004ee6:	230a      	movs	r3, #10
 8004ee8:	e019      	b.n	8004f1e <_printf_i+0x102>
 8004eea:	680e      	ldr	r6, [r1, #0]
 8004eec:	602b      	str	r3, [r5, #0]
 8004eee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ef2:	bf18      	it	ne
 8004ef4:	b236      	sxthne	r6, r6
 8004ef6:	e7ef      	b.n	8004ed8 <_printf_i+0xbc>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	6820      	ldr	r0, [r4, #0]
 8004efc:	1d19      	adds	r1, r3, #4
 8004efe:	6029      	str	r1, [r5, #0]
 8004f00:	0601      	lsls	r1, r0, #24
 8004f02:	d501      	bpl.n	8004f08 <_printf_i+0xec>
 8004f04:	681e      	ldr	r6, [r3, #0]
 8004f06:	e002      	b.n	8004f0e <_printf_i+0xf2>
 8004f08:	0646      	lsls	r6, r0, #25
 8004f0a:	d5fb      	bpl.n	8004f04 <_printf_i+0xe8>
 8004f0c:	881e      	ldrh	r6, [r3, #0]
 8004f0e:	4854      	ldr	r0, [pc, #336]	; (8005060 <_printf_i+0x244>)
 8004f10:	2f6f      	cmp	r7, #111	; 0x6f
 8004f12:	bf0c      	ite	eq
 8004f14:	2308      	moveq	r3, #8
 8004f16:	230a      	movne	r3, #10
 8004f18:	2100      	movs	r1, #0
 8004f1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f1e:	6865      	ldr	r5, [r4, #4]
 8004f20:	60a5      	str	r5, [r4, #8]
 8004f22:	2d00      	cmp	r5, #0
 8004f24:	bfa2      	ittt	ge
 8004f26:	6821      	ldrge	r1, [r4, #0]
 8004f28:	f021 0104 	bicge.w	r1, r1, #4
 8004f2c:	6021      	strge	r1, [r4, #0]
 8004f2e:	b90e      	cbnz	r6, 8004f34 <_printf_i+0x118>
 8004f30:	2d00      	cmp	r5, #0
 8004f32:	d04d      	beq.n	8004fd0 <_printf_i+0x1b4>
 8004f34:	4615      	mov	r5, r2
 8004f36:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f3a:	fb03 6711 	mls	r7, r3, r1, r6
 8004f3e:	5dc7      	ldrb	r7, [r0, r7]
 8004f40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f44:	4637      	mov	r7, r6
 8004f46:	42bb      	cmp	r3, r7
 8004f48:	460e      	mov	r6, r1
 8004f4a:	d9f4      	bls.n	8004f36 <_printf_i+0x11a>
 8004f4c:	2b08      	cmp	r3, #8
 8004f4e:	d10b      	bne.n	8004f68 <_printf_i+0x14c>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	07de      	lsls	r6, r3, #31
 8004f54:	d508      	bpl.n	8004f68 <_printf_i+0x14c>
 8004f56:	6923      	ldr	r3, [r4, #16]
 8004f58:	6861      	ldr	r1, [r4, #4]
 8004f5a:	4299      	cmp	r1, r3
 8004f5c:	bfde      	ittt	le
 8004f5e:	2330      	movle	r3, #48	; 0x30
 8004f60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f68:	1b52      	subs	r2, r2, r5
 8004f6a:	6122      	str	r2, [r4, #16]
 8004f6c:	f8cd a000 	str.w	sl, [sp]
 8004f70:	464b      	mov	r3, r9
 8004f72:	aa03      	add	r2, sp, #12
 8004f74:	4621      	mov	r1, r4
 8004f76:	4640      	mov	r0, r8
 8004f78:	f7ff fee2 	bl	8004d40 <_printf_common>
 8004f7c:	3001      	adds	r0, #1
 8004f7e:	d14c      	bne.n	800501a <_printf_i+0x1fe>
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	b004      	add	sp, #16
 8004f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f8a:	4835      	ldr	r0, [pc, #212]	; (8005060 <_printf_i+0x244>)
 8004f8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f90:	6829      	ldr	r1, [r5, #0]
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f98:	6029      	str	r1, [r5, #0]
 8004f9a:	061d      	lsls	r5, r3, #24
 8004f9c:	d514      	bpl.n	8004fc8 <_printf_i+0x1ac>
 8004f9e:	07df      	lsls	r7, r3, #31
 8004fa0:	bf44      	itt	mi
 8004fa2:	f043 0320 	orrmi.w	r3, r3, #32
 8004fa6:	6023      	strmi	r3, [r4, #0]
 8004fa8:	b91e      	cbnz	r6, 8004fb2 <_printf_i+0x196>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	f023 0320 	bic.w	r3, r3, #32
 8004fb0:	6023      	str	r3, [r4, #0]
 8004fb2:	2310      	movs	r3, #16
 8004fb4:	e7b0      	b.n	8004f18 <_printf_i+0xfc>
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	f043 0320 	orr.w	r3, r3, #32
 8004fbc:	6023      	str	r3, [r4, #0]
 8004fbe:	2378      	movs	r3, #120	; 0x78
 8004fc0:	4828      	ldr	r0, [pc, #160]	; (8005064 <_printf_i+0x248>)
 8004fc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fc6:	e7e3      	b.n	8004f90 <_printf_i+0x174>
 8004fc8:	0659      	lsls	r1, r3, #25
 8004fca:	bf48      	it	mi
 8004fcc:	b2b6      	uxthmi	r6, r6
 8004fce:	e7e6      	b.n	8004f9e <_printf_i+0x182>
 8004fd0:	4615      	mov	r5, r2
 8004fd2:	e7bb      	b.n	8004f4c <_printf_i+0x130>
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	6826      	ldr	r6, [r4, #0]
 8004fd8:	6961      	ldr	r1, [r4, #20]
 8004fda:	1d18      	adds	r0, r3, #4
 8004fdc:	6028      	str	r0, [r5, #0]
 8004fde:	0635      	lsls	r5, r6, #24
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	d501      	bpl.n	8004fe8 <_printf_i+0x1cc>
 8004fe4:	6019      	str	r1, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <_printf_i+0x1d2>
 8004fe8:	0670      	lsls	r0, r6, #25
 8004fea:	d5fb      	bpl.n	8004fe4 <_printf_i+0x1c8>
 8004fec:	8019      	strh	r1, [r3, #0]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	4615      	mov	r5, r2
 8004ff4:	e7ba      	b.n	8004f6c <_printf_i+0x150>
 8004ff6:	682b      	ldr	r3, [r5, #0]
 8004ff8:	1d1a      	adds	r2, r3, #4
 8004ffa:	602a      	str	r2, [r5, #0]
 8004ffc:	681d      	ldr	r5, [r3, #0]
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	2100      	movs	r1, #0
 8005002:	4628      	mov	r0, r5
 8005004:	f7fb f8e4 	bl	80001d0 <memchr>
 8005008:	b108      	cbz	r0, 800500e <_printf_i+0x1f2>
 800500a:	1b40      	subs	r0, r0, r5
 800500c:	6060      	str	r0, [r4, #4]
 800500e:	6863      	ldr	r3, [r4, #4]
 8005010:	6123      	str	r3, [r4, #16]
 8005012:	2300      	movs	r3, #0
 8005014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005018:	e7a8      	b.n	8004f6c <_printf_i+0x150>
 800501a:	6923      	ldr	r3, [r4, #16]
 800501c:	462a      	mov	r2, r5
 800501e:	4649      	mov	r1, r9
 8005020:	4640      	mov	r0, r8
 8005022:	47d0      	blx	sl
 8005024:	3001      	adds	r0, #1
 8005026:	d0ab      	beq.n	8004f80 <_printf_i+0x164>
 8005028:	6823      	ldr	r3, [r4, #0]
 800502a:	079b      	lsls	r3, r3, #30
 800502c:	d413      	bmi.n	8005056 <_printf_i+0x23a>
 800502e:	68e0      	ldr	r0, [r4, #12]
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	4298      	cmp	r0, r3
 8005034:	bfb8      	it	lt
 8005036:	4618      	movlt	r0, r3
 8005038:	e7a4      	b.n	8004f84 <_printf_i+0x168>
 800503a:	2301      	movs	r3, #1
 800503c:	4632      	mov	r2, r6
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	47d0      	blx	sl
 8005044:	3001      	adds	r0, #1
 8005046:	d09b      	beq.n	8004f80 <_printf_i+0x164>
 8005048:	3501      	adds	r5, #1
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	9903      	ldr	r1, [sp, #12]
 800504e:	1a5b      	subs	r3, r3, r1
 8005050:	42ab      	cmp	r3, r5
 8005052:	dcf2      	bgt.n	800503a <_printf_i+0x21e>
 8005054:	e7eb      	b.n	800502e <_printf_i+0x212>
 8005056:	2500      	movs	r5, #0
 8005058:	f104 0619 	add.w	r6, r4, #25
 800505c:	e7f5      	b.n	800504a <_printf_i+0x22e>
 800505e:	bf00      	nop
 8005060:	08005cf1 	.word	0x08005cf1
 8005064:	08005d02 	.word	0x08005d02

08005068 <iprintf>:
 8005068:	b40f      	push	{r0, r1, r2, r3}
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <iprintf+0x2c>)
 800506c:	b513      	push	{r0, r1, r4, lr}
 800506e:	681c      	ldr	r4, [r3, #0]
 8005070:	b124      	cbz	r4, 800507c <iprintf+0x14>
 8005072:	69a3      	ldr	r3, [r4, #24]
 8005074:	b913      	cbnz	r3, 800507c <iprintf+0x14>
 8005076:	4620      	mov	r0, r4
 8005078:	f000 f9f0 	bl	800545c <__sinit>
 800507c:	ab05      	add	r3, sp, #20
 800507e:	9a04      	ldr	r2, [sp, #16]
 8005080:	68a1      	ldr	r1, [r4, #8]
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	4620      	mov	r0, r4
 8005086:	f7ff fd2b 	bl	8004ae0 <_vfiprintf_r>
 800508a:	b002      	add	sp, #8
 800508c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005090:	b004      	add	sp, #16
 8005092:	4770      	bx	lr
 8005094:	20000178 	.word	0x20000178

08005098 <__swbuf_r>:
 8005098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800509a:	460e      	mov	r6, r1
 800509c:	4614      	mov	r4, r2
 800509e:	4605      	mov	r5, r0
 80050a0:	b118      	cbz	r0, 80050aa <__swbuf_r+0x12>
 80050a2:	6983      	ldr	r3, [r0, #24]
 80050a4:	b90b      	cbnz	r3, 80050aa <__swbuf_r+0x12>
 80050a6:	f000 f9d9 	bl	800545c <__sinit>
 80050aa:	4b21      	ldr	r3, [pc, #132]	; (8005130 <__swbuf_r+0x98>)
 80050ac:	429c      	cmp	r4, r3
 80050ae:	d12b      	bne.n	8005108 <__swbuf_r+0x70>
 80050b0:	686c      	ldr	r4, [r5, #4]
 80050b2:	69a3      	ldr	r3, [r4, #24]
 80050b4:	60a3      	str	r3, [r4, #8]
 80050b6:	89a3      	ldrh	r3, [r4, #12]
 80050b8:	071a      	lsls	r2, r3, #28
 80050ba:	d52f      	bpl.n	800511c <__swbuf_r+0x84>
 80050bc:	6923      	ldr	r3, [r4, #16]
 80050be:	b36b      	cbz	r3, 800511c <__swbuf_r+0x84>
 80050c0:	6923      	ldr	r3, [r4, #16]
 80050c2:	6820      	ldr	r0, [r4, #0]
 80050c4:	1ac0      	subs	r0, r0, r3
 80050c6:	6963      	ldr	r3, [r4, #20]
 80050c8:	b2f6      	uxtb	r6, r6
 80050ca:	4283      	cmp	r3, r0
 80050cc:	4637      	mov	r7, r6
 80050ce:	dc04      	bgt.n	80050da <__swbuf_r+0x42>
 80050d0:	4621      	mov	r1, r4
 80050d2:	4628      	mov	r0, r5
 80050d4:	f000 f92e 	bl	8005334 <_fflush_r>
 80050d8:	bb30      	cbnz	r0, 8005128 <__swbuf_r+0x90>
 80050da:	68a3      	ldr	r3, [r4, #8]
 80050dc:	3b01      	subs	r3, #1
 80050de:	60a3      	str	r3, [r4, #8]
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	6022      	str	r2, [r4, #0]
 80050e6:	701e      	strb	r6, [r3, #0]
 80050e8:	6963      	ldr	r3, [r4, #20]
 80050ea:	3001      	adds	r0, #1
 80050ec:	4283      	cmp	r3, r0
 80050ee:	d004      	beq.n	80050fa <__swbuf_r+0x62>
 80050f0:	89a3      	ldrh	r3, [r4, #12]
 80050f2:	07db      	lsls	r3, r3, #31
 80050f4:	d506      	bpl.n	8005104 <__swbuf_r+0x6c>
 80050f6:	2e0a      	cmp	r6, #10
 80050f8:	d104      	bne.n	8005104 <__swbuf_r+0x6c>
 80050fa:	4621      	mov	r1, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	f000 f919 	bl	8005334 <_fflush_r>
 8005102:	b988      	cbnz	r0, 8005128 <__swbuf_r+0x90>
 8005104:	4638      	mov	r0, r7
 8005106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005108:	4b0a      	ldr	r3, [pc, #40]	; (8005134 <__swbuf_r+0x9c>)
 800510a:	429c      	cmp	r4, r3
 800510c:	d101      	bne.n	8005112 <__swbuf_r+0x7a>
 800510e:	68ac      	ldr	r4, [r5, #8]
 8005110:	e7cf      	b.n	80050b2 <__swbuf_r+0x1a>
 8005112:	4b09      	ldr	r3, [pc, #36]	; (8005138 <__swbuf_r+0xa0>)
 8005114:	429c      	cmp	r4, r3
 8005116:	bf08      	it	eq
 8005118:	68ec      	ldreq	r4, [r5, #12]
 800511a:	e7ca      	b.n	80050b2 <__swbuf_r+0x1a>
 800511c:	4621      	mov	r1, r4
 800511e:	4628      	mov	r0, r5
 8005120:	f000 f80c 	bl	800513c <__swsetup_r>
 8005124:	2800      	cmp	r0, #0
 8005126:	d0cb      	beq.n	80050c0 <__swbuf_r+0x28>
 8005128:	f04f 37ff 	mov.w	r7, #4294967295
 800512c:	e7ea      	b.n	8005104 <__swbuf_r+0x6c>
 800512e:	bf00      	nop
 8005130:	08005d34 	.word	0x08005d34
 8005134:	08005d54 	.word	0x08005d54
 8005138:	08005d14 	.word	0x08005d14

0800513c <__swsetup_r>:
 800513c:	4b32      	ldr	r3, [pc, #200]	; (8005208 <__swsetup_r+0xcc>)
 800513e:	b570      	push	{r4, r5, r6, lr}
 8005140:	681d      	ldr	r5, [r3, #0]
 8005142:	4606      	mov	r6, r0
 8005144:	460c      	mov	r4, r1
 8005146:	b125      	cbz	r5, 8005152 <__swsetup_r+0x16>
 8005148:	69ab      	ldr	r3, [r5, #24]
 800514a:	b913      	cbnz	r3, 8005152 <__swsetup_r+0x16>
 800514c:	4628      	mov	r0, r5
 800514e:	f000 f985 	bl	800545c <__sinit>
 8005152:	4b2e      	ldr	r3, [pc, #184]	; (800520c <__swsetup_r+0xd0>)
 8005154:	429c      	cmp	r4, r3
 8005156:	d10f      	bne.n	8005178 <__swsetup_r+0x3c>
 8005158:	686c      	ldr	r4, [r5, #4]
 800515a:	89a3      	ldrh	r3, [r4, #12]
 800515c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005160:	0719      	lsls	r1, r3, #28
 8005162:	d42c      	bmi.n	80051be <__swsetup_r+0x82>
 8005164:	06dd      	lsls	r5, r3, #27
 8005166:	d411      	bmi.n	800518c <__swsetup_r+0x50>
 8005168:	2309      	movs	r3, #9
 800516a:	6033      	str	r3, [r6, #0]
 800516c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005170:	81a3      	strh	r3, [r4, #12]
 8005172:	f04f 30ff 	mov.w	r0, #4294967295
 8005176:	e03e      	b.n	80051f6 <__swsetup_r+0xba>
 8005178:	4b25      	ldr	r3, [pc, #148]	; (8005210 <__swsetup_r+0xd4>)
 800517a:	429c      	cmp	r4, r3
 800517c:	d101      	bne.n	8005182 <__swsetup_r+0x46>
 800517e:	68ac      	ldr	r4, [r5, #8]
 8005180:	e7eb      	b.n	800515a <__swsetup_r+0x1e>
 8005182:	4b24      	ldr	r3, [pc, #144]	; (8005214 <__swsetup_r+0xd8>)
 8005184:	429c      	cmp	r4, r3
 8005186:	bf08      	it	eq
 8005188:	68ec      	ldreq	r4, [r5, #12]
 800518a:	e7e6      	b.n	800515a <__swsetup_r+0x1e>
 800518c:	0758      	lsls	r0, r3, #29
 800518e:	d512      	bpl.n	80051b6 <__swsetup_r+0x7a>
 8005190:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005192:	b141      	cbz	r1, 80051a6 <__swsetup_r+0x6a>
 8005194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005198:	4299      	cmp	r1, r3
 800519a:	d002      	beq.n	80051a2 <__swsetup_r+0x66>
 800519c:	4630      	mov	r0, r6
 800519e:	f000 fa63 	bl	8005668 <_free_r>
 80051a2:	2300      	movs	r3, #0
 80051a4:	6363      	str	r3, [r4, #52]	; 0x34
 80051a6:	89a3      	ldrh	r3, [r4, #12]
 80051a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80051ac:	81a3      	strh	r3, [r4, #12]
 80051ae:	2300      	movs	r3, #0
 80051b0:	6063      	str	r3, [r4, #4]
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	f043 0308 	orr.w	r3, r3, #8
 80051bc:	81a3      	strh	r3, [r4, #12]
 80051be:	6923      	ldr	r3, [r4, #16]
 80051c0:	b94b      	cbnz	r3, 80051d6 <__swsetup_r+0x9a>
 80051c2:	89a3      	ldrh	r3, [r4, #12]
 80051c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80051c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051cc:	d003      	beq.n	80051d6 <__swsetup_r+0x9a>
 80051ce:	4621      	mov	r1, r4
 80051d0:	4630      	mov	r0, r6
 80051d2:	f000 fa09 	bl	80055e8 <__smakebuf_r>
 80051d6:	89a0      	ldrh	r0, [r4, #12]
 80051d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051dc:	f010 0301 	ands.w	r3, r0, #1
 80051e0:	d00a      	beq.n	80051f8 <__swsetup_r+0xbc>
 80051e2:	2300      	movs	r3, #0
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	6963      	ldr	r3, [r4, #20]
 80051e8:	425b      	negs	r3, r3
 80051ea:	61a3      	str	r3, [r4, #24]
 80051ec:	6923      	ldr	r3, [r4, #16]
 80051ee:	b943      	cbnz	r3, 8005202 <__swsetup_r+0xc6>
 80051f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80051f4:	d1ba      	bne.n	800516c <__swsetup_r+0x30>
 80051f6:	bd70      	pop	{r4, r5, r6, pc}
 80051f8:	0781      	lsls	r1, r0, #30
 80051fa:	bf58      	it	pl
 80051fc:	6963      	ldrpl	r3, [r4, #20]
 80051fe:	60a3      	str	r3, [r4, #8]
 8005200:	e7f4      	b.n	80051ec <__swsetup_r+0xb0>
 8005202:	2000      	movs	r0, #0
 8005204:	e7f7      	b.n	80051f6 <__swsetup_r+0xba>
 8005206:	bf00      	nop
 8005208:	20000178 	.word	0x20000178
 800520c:	08005d34 	.word	0x08005d34
 8005210:	08005d54 	.word	0x08005d54
 8005214:	08005d14 	.word	0x08005d14

08005218 <abort>:
 8005218:	b508      	push	{r3, lr}
 800521a:	2006      	movs	r0, #6
 800521c:	f000 fb3c 	bl	8005898 <raise>
 8005220:	2001      	movs	r0, #1
 8005222:	f7fc fbc9 	bl	80019b8 <_exit>
	...

08005228 <__sflush_r>:
 8005228:	898a      	ldrh	r2, [r1, #12]
 800522a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800522e:	4605      	mov	r5, r0
 8005230:	0710      	lsls	r0, r2, #28
 8005232:	460c      	mov	r4, r1
 8005234:	d458      	bmi.n	80052e8 <__sflush_r+0xc0>
 8005236:	684b      	ldr	r3, [r1, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	dc05      	bgt.n	8005248 <__sflush_r+0x20>
 800523c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	dc02      	bgt.n	8005248 <__sflush_r+0x20>
 8005242:	2000      	movs	r0, #0
 8005244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800524a:	2e00      	cmp	r6, #0
 800524c:	d0f9      	beq.n	8005242 <__sflush_r+0x1a>
 800524e:	2300      	movs	r3, #0
 8005250:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005254:	682f      	ldr	r7, [r5, #0]
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	d032      	beq.n	80052c0 <__sflush_r+0x98>
 800525a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800525c:	89a3      	ldrh	r3, [r4, #12]
 800525e:	075a      	lsls	r2, r3, #29
 8005260:	d505      	bpl.n	800526e <__sflush_r+0x46>
 8005262:	6863      	ldr	r3, [r4, #4]
 8005264:	1ac0      	subs	r0, r0, r3
 8005266:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005268:	b10b      	cbz	r3, 800526e <__sflush_r+0x46>
 800526a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800526c:	1ac0      	subs	r0, r0, r3
 800526e:	2300      	movs	r3, #0
 8005270:	4602      	mov	r2, r0
 8005272:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005274:	6a21      	ldr	r1, [r4, #32]
 8005276:	4628      	mov	r0, r5
 8005278:	47b0      	blx	r6
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	d106      	bne.n	800528e <__sflush_r+0x66>
 8005280:	6829      	ldr	r1, [r5, #0]
 8005282:	291d      	cmp	r1, #29
 8005284:	d82c      	bhi.n	80052e0 <__sflush_r+0xb8>
 8005286:	4a2a      	ldr	r2, [pc, #168]	; (8005330 <__sflush_r+0x108>)
 8005288:	40ca      	lsrs	r2, r1
 800528a:	07d6      	lsls	r6, r2, #31
 800528c:	d528      	bpl.n	80052e0 <__sflush_r+0xb8>
 800528e:	2200      	movs	r2, #0
 8005290:	6062      	str	r2, [r4, #4]
 8005292:	04d9      	lsls	r1, r3, #19
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	6022      	str	r2, [r4, #0]
 8005298:	d504      	bpl.n	80052a4 <__sflush_r+0x7c>
 800529a:	1c42      	adds	r2, r0, #1
 800529c:	d101      	bne.n	80052a2 <__sflush_r+0x7a>
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	b903      	cbnz	r3, 80052a4 <__sflush_r+0x7c>
 80052a2:	6560      	str	r0, [r4, #84]	; 0x54
 80052a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80052a6:	602f      	str	r7, [r5, #0]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d0ca      	beq.n	8005242 <__sflush_r+0x1a>
 80052ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80052b0:	4299      	cmp	r1, r3
 80052b2:	d002      	beq.n	80052ba <__sflush_r+0x92>
 80052b4:	4628      	mov	r0, r5
 80052b6:	f000 f9d7 	bl	8005668 <_free_r>
 80052ba:	2000      	movs	r0, #0
 80052bc:	6360      	str	r0, [r4, #52]	; 0x34
 80052be:	e7c1      	b.n	8005244 <__sflush_r+0x1c>
 80052c0:	6a21      	ldr	r1, [r4, #32]
 80052c2:	2301      	movs	r3, #1
 80052c4:	4628      	mov	r0, r5
 80052c6:	47b0      	blx	r6
 80052c8:	1c41      	adds	r1, r0, #1
 80052ca:	d1c7      	bne.n	800525c <__sflush_r+0x34>
 80052cc:	682b      	ldr	r3, [r5, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0c4      	beq.n	800525c <__sflush_r+0x34>
 80052d2:	2b1d      	cmp	r3, #29
 80052d4:	d001      	beq.n	80052da <__sflush_r+0xb2>
 80052d6:	2b16      	cmp	r3, #22
 80052d8:	d101      	bne.n	80052de <__sflush_r+0xb6>
 80052da:	602f      	str	r7, [r5, #0]
 80052dc:	e7b1      	b.n	8005242 <__sflush_r+0x1a>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e4:	81a3      	strh	r3, [r4, #12]
 80052e6:	e7ad      	b.n	8005244 <__sflush_r+0x1c>
 80052e8:	690f      	ldr	r7, [r1, #16]
 80052ea:	2f00      	cmp	r7, #0
 80052ec:	d0a9      	beq.n	8005242 <__sflush_r+0x1a>
 80052ee:	0793      	lsls	r3, r2, #30
 80052f0:	680e      	ldr	r6, [r1, #0]
 80052f2:	bf08      	it	eq
 80052f4:	694b      	ldreq	r3, [r1, #20]
 80052f6:	600f      	str	r7, [r1, #0]
 80052f8:	bf18      	it	ne
 80052fa:	2300      	movne	r3, #0
 80052fc:	eba6 0807 	sub.w	r8, r6, r7
 8005300:	608b      	str	r3, [r1, #8]
 8005302:	f1b8 0f00 	cmp.w	r8, #0
 8005306:	dd9c      	ble.n	8005242 <__sflush_r+0x1a>
 8005308:	6a21      	ldr	r1, [r4, #32]
 800530a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800530c:	4643      	mov	r3, r8
 800530e:	463a      	mov	r2, r7
 8005310:	4628      	mov	r0, r5
 8005312:	47b0      	blx	r6
 8005314:	2800      	cmp	r0, #0
 8005316:	dc06      	bgt.n	8005326 <__sflush_r+0xfe>
 8005318:	89a3      	ldrh	r3, [r4, #12]
 800531a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	e78e      	b.n	8005244 <__sflush_r+0x1c>
 8005326:	4407      	add	r7, r0
 8005328:	eba8 0800 	sub.w	r8, r8, r0
 800532c:	e7e9      	b.n	8005302 <__sflush_r+0xda>
 800532e:	bf00      	nop
 8005330:	20400001 	.word	0x20400001

08005334 <_fflush_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	690b      	ldr	r3, [r1, #16]
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	b913      	cbnz	r3, 8005344 <_fflush_r+0x10>
 800533e:	2500      	movs	r5, #0
 8005340:	4628      	mov	r0, r5
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	b118      	cbz	r0, 800534e <_fflush_r+0x1a>
 8005346:	6983      	ldr	r3, [r0, #24]
 8005348:	b90b      	cbnz	r3, 800534e <_fflush_r+0x1a>
 800534a:	f000 f887 	bl	800545c <__sinit>
 800534e:	4b14      	ldr	r3, [pc, #80]	; (80053a0 <_fflush_r+0x6c>)
 8005350:	429c      	cmp	r4, r3
 8005352:	d11b      	bne.n	800538c <_fflush_r+0x58>
 8005354:	686c      	ldr	r4, [r5, #4]
 8005356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d0ef      	beq.n	800533e <_fflush_r+0xa>
 800535e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005360:	07d0      	lsls	r0, r2, #31
 8005362:	d404      	bmi.n	800536e <_fflush_r+0x3a>
 8005364:	0599      	lsls	r1, r3, #22
 8005366:	d402      	bmi.n	800536e <_fflush_r+0x3a>
 8005368:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800536a:	f000 f915 	bl	8005598 <__retarget_lock_acquire_recursive>
 800536e:	4628      	mov	r0, r5
 8005370:	4621      	mov	r1, r4
 8005372:	f7ff ff59 	bl	8005228 <__sflush_r>
 8005376:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005378:	07da      	lsls	r2, r3, #31
 800537a:	4605      	mov	r5, r0
 800537c:	d4e0      	bmi.n	8005340 <_fflush_r+0xc>
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	059b      	lsls	r3, r3, #22
 8005382:	d4dd      	bmi.n	8005340 <_fflush_r+0xc>
 8005384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005386:	f000 f908 	bl	800559a <__retarget_lock_release_recursive>
 800538a:	e7d9      	b.n	8005340 <_fflush_r+0xc>
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <_fflush_r+0x70>)
 800538e:	429c      	cmp	r4, r3
 8005390:	d101      	bne.n	8005396 <_fflush_r+0x62>
 8005392:	68ac      	ldr	r4, [r5, #8]
 8005394:	e7df      	b.n	8005356 <_fflush_r+0x22>
 8005396:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <_fflush_r+0x74>)
 8005398:	429c      	cmp	r4, r3
 800539a:	bf08      	it	eq
 800539c:	68ec      	ldreq	r4, [r5, #12]
 800539e:	e7da      	b.n	8005356 <_fflush_r+0x22>
 80053a0:	08005d34 	.word	0x08005d34
 80053a4:	08005d54 	.word	0x08005d54
 80053a8:	08005d14 	.word	0x08005d14

080053ac <std>:
 80053ac:	2300      	movs	r3, #0
 80053ae:	b510      	push	{r4, lr}
 80053b0:	4604      	mov	r4, r0
 80053b2:	e9c0 3300 	strd	r3, r3, [r0]
 80053b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053ba:	6083      	str	r3, [r0, #8]
 80053bc:	8181      	strh	r1, [r0, #12]
 80053be:	6643      	str	r3, [r0, #100]	; 0x64
 80053c0:	81c2      	strh	r2, [r0, #14]
 80053c2:	6183      	str	r3, [r0, #24]
 80053c4:	4619      	mov	r1, r3
 80053c6:	2208      	movs	r2, #8
 80053c8:	305c      	adds	r0, #92	; 0x5c
 80053ca:	f7ff fb57 	bl	8004a7c <memset>
 80053ce:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <std+0x38>)
 80053d0:	6263      	str	r3, [r4, #36]	; 0x24
 80053d2:	4b05      	ldr	r3, [pc, #20]	; (80053e8 <std+0x3c>)
 80053d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <std+0x40>)
 80053d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053da:	4b05      	ldr	r3, [pc, #20]	; (80053f0 <std+0x44>)
 80053dc:	6224      	str	r4, [r4, #32]
 80053de:	6323      	str	r3, [r4, #48]	; 0x30
 80053e0:	bd10      	pop	{r4, pc}
 80053e2:	bf00      	nop
 80053e4:	080058d1 	.word	0x080058d1
 80053e8:	080058f3 	.word	0x080058f3
 80053ec:	0800592b 	.word	0x0800592b
 80053f0:	0800594f 	.word	0x0800594f

080053f4 <_cleanup_r>:
 80053f4:	4901      	ldr	r1, [pc, #4]	; (80053fc <_cleanup_r+0x8>)
 80053f6:	f000 b8af 	b.w	8005558 <_fwalk_reent>
 80053fa:	bf00      	nop
 80053fc:	08005335 	.word	0x08005335

08005400 <__sfmoreglue>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	2268      	movs	r2, #104	; 0x68
 8005404:	1e4d      	subs	r5, r1, #1
 8005406:	4355      	muls	r5, r2
 8005408:	460e      	mov	r6, r1
 800540a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800540e:	f000 f997 	bl	8005740 <_malloc_r>
 8005412:	4604      	mov	r4, r0
 8005414:	b140      	cbz	r0, 8005428 <__sfmoreglue+0x28>
 8005416:	2100      	movs	r1, #0
 8005418:	e9c0 1600 	strd	r1, r6, [r0]
 800541c:	300c      	adds	r0, #12
 800541e:	60a0      	str	r0, [r4, #8]
 8005420:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005424:	f7ff fb2a 	bl	8004a7c <memset>
 8005428:	4620      	mov	r0, r4
 800542a:	bd70      	pop	{r4, r5, r6, pc}

0800542c <__sfp_lock_acquire>:
 800542c:	4801      	ldr	r0, [pc, #4]	; (8005434 <__sfp_lock_acquire+0x8>)
 800542e:	f000 b8b3 	b.w	8005598 <__retarget_lock_acquire_recursive>
 8005432:	bf00      	nop
 8005434:	2000033d 	.word	0x2000033d

08005438 <__sfp_lock_release>:
 8005438:	4801      	ldr	r0, [pc, #4]	; (8005440 <__sfp_lock_release+0x8>)
 800543a:	f000 b8ae 	b.w	800559a <__retarget_lock_release_recursive>
 800543e:	bf00      	nop
 8005440:	2000033d 	.word	0x2000033d

08005444 <__sinit_lock_acquire>:
 8005444:	4801      	ldr	r0, [pc, #4]	; (800544c <__sinit_lock_acquire+0x8>)
 8005446:	f000 b8a7 	b.w	8005598 <__retarget_lock_acquire_recursive>
 800544a:	bf00      	nop
 800544c:	2000033e 	.word	0x2000033e

08005450 <__sinit_lock_release>:
 8005450:	4801      	ldr	r0, [pc, #4]	; (8005458 <__sinit_lock_release+0x8>)
 8005452:	f000 b8a2 	b.w	800559a <__retarget_lock_release_recursive>
 8005456:	bf00      	nop
 8005458:	2000033e 	.word	0x2000033e

0800545c <__sinit>:
 800545c:	b510      	push	{r4, lr}
 800545e:	4604      	mov	r4, r0
 8005460:	f7ff fff0 	bl	8005444 <__sinit_lock_acquire>
 8005464:	69a3      	ldr	r3, [r4, #24]
 8005466:	b11b      	cbz	r3, 8005470 <__sinit+0x14>
 8005468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800546c:	f7ff bff0 	b.w	8005450 <__sinit_lock_release>
 8005470:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005474:	6523      	str	r3, [r4, #80]	; 0x50
 8005476:	4b13      	ldr	r3, [pc, #76]	; (80054c4 <__sinit+0x68>)
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <__sinit+0x6c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	62a2      	str	r2, [r4, #40]	; 0x28
 800547e:	42a3      	cmp	r3, r4
 8005480:	bf04      	itt	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	61a3      	streq	r3, [r4, #24]
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f820 	bl	80054cc <__sfp>
 800548c:	6060      	str	r0, [r4, #4]
 800548e:	4620      	mov	r0, r4
 8005490:	f000 f81c 	bl	80054cc <__sfp>
 8005494:	60a0      	str	r0, [r4, #8]
 8005496:	4620      	mov	r0, r4
 8005498:	f000 f818 	bl	80054cc <__sfp>
 800549c:	2200      	movs	r2, #0
 800549e:	60e0      	str	r0, [r4, #12]
 80054a0:	2104      	movs	r1, #4
 80054a2:	6860      	ldr	r0, [r4, #4]
 80054a4:	f7ff ff82 	bl	80053ac <std>
 80054a8:	68a0      	ldr	r0, [r4, #8]
 80054aa:	2201      	movs	r2, #1
 80054ac:	2109      	movs	r1, #9
 80054ae:	f7ff ff7d 	bl	80053ac <std>
 80054b2:	68e0      	ldr	r0, [r4, #12]
 80054b4:	2202      	movs	r2, #2
 80054b6:	2112      	movs	r1, #18
 80054b8:	f7ff ff78 	bl	80053ac <std>
 80054bc:	2301      	movs	r3, #1
 80054be:	61a3      	str	r3, [r4, #24]
 80054c0:	e7d2      	b.n	8005468 <__sinit+0xc>
 80054c2:	bf00      	nop
 80054c4:	08005cdc 	.word	0x08005cdc
 80054c8:	080053f5 	.word	0x080053f5

080054cc <__sfp>:
 80054cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ce:	4607      	mov	r7, r0
 80054d0:	f7ff ffac 	bl	800542c <__sfp_lock_acquire>
 80054d4:	4b1e      	ldr	r3, [pc, #120]	; (8005550 <__sfp+0x84>)
 80054d6:	681e      	ldr	r6, [r3, #0]
 80054d8:	69b3      	ldr	r3, [r6, #24]
 80054da:	b913      	cbnz	r3, 80054e2 <__sfp+0x16>
 80054dc:	4630      	mov	r0, r6
 80054de:	f7ff ffbd 	bl	800545c <__sinit>
 80054e2:	3648      	adds	r6, #72	; 0x48
 80054e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80054e8:	3b01      	subs	r3, #1
 80054ea:	d503      	bpl.n	80054f4 <__sfp+0x28>
 80054ec:	6833      	ldr	r3, [r6, #0]
 80054ee:	b30b      	cbz	r3, 8005534 <__sfp+0x68>
 80054f0:	6836      	ldr	r6, [r6, #0]
 80054f2:	e7f7      	b.n	80054e4 <__sfp+0x18>
 80054f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80054f8:	b9d5      	cbnz	r5, 8005530 <__sfp+0x64>
 80054fa:	4b16      	ldr	r3, [pc, #88]	; (8005554 <__sfp+0x88>)
 80054fc:	60e3      	str	r3, [r4, #12]
 80054fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005502:	6665      	str	r5, [r4, #100]	; 0x64
 8005504:	f000 f847 	bl	8005596 <__retarget_lock_init_recursive>
 8005508:	f7ff ff96 	bl	8005438 <__sfp_lock_release>
 800550c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005510:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005514:	6025      	str	r5, [r4, #0]
 8005516:	61a5      	str	r5, [r4, #24]
 8005518:	2208      	movs	r2, #8
 800551a:	4629      	mov	r1, r5
 800551c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005520:	f7ff faac 	bl	8004a7c <memset>
 8005524:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005528:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800552c:	4620      	mov	r0, r4
 800552e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005530:	3468      	adds	r4, #104	; 0x68
 8005532:	e7d9      	b.n	80054e8 <__sfp+0x1c>
 8005534:	2104      	movs	r1, #4
 8005536:	4638      	mov	r0, r7
 8005538:	f7ff ff62 	bl	8005400 <__sfmoreglue>
 800553c:	4604      	mov	r4, r0
 800553e:	6030      	str	r0, [r6, #0]
 8005540:	2800      	cmp	r0, #0
 8005542:	d1d5      	bne.n	80054f0 <__sfp+0x24>
 8005544:	f7ff ff78 	bl	8005438 <__sfp_lock_release>
 8005548:	230c      	movs	r3, #12
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	e7ee      	b.n	800552c <__sfp+0x60>
 800554e:	bf00      	nop
 8005550:	08005cdc 	.word	0x08005cdc
 8005554:	ffff0001 	.word	0xffff0001

08005558 <_fwalk_reent>:
 8005558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800555c:	4606      	mov	r6, r0
 800555e:	4688      	mov	r8, r1
 8005560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005564:	2700      	movs	r7, #0
 8005566:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800556a:	f1b9 0901 	subs.w	r9, r9, #1
 800556e:	d505      	bpl.n	800557c <_fwalk_reent+0x24>
 8005570:	6824      	ldr	r4, [r4, #0]
 8005572:	2c00      	cmp	r4, #0
 8005574:	d1f7      	bne.n	8005566 <_fwalk_reent+0xe>
 8005576:	4638      	mov	r0, r7
 8005578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800557c:	89ab      	ldrh	r3, [r5, #12]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d907      	bls.n	8005592 <_fwalk_reent+0x3a>
 8005582:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005586:	3301      	adds	r3, #1
 8005588:	d003      	beq.n	8005592 <_fwalk_reent+0x3a>
 800558a:	4629      	mov	r1, r5
 800558c:	4630      	mov	r0, r6
 800558e:	47c0      	blx	r8
 8005590:	4307      	orrs	r7, r0
 8005592:	3568      	adds	r5, #104	; 0x68
 8005594:	e7e9      	b.n	800556a <_fwalk_reent+0x12>

08005596 <__retarget_lock_init_recursive>:
 8005596:	4770      	bx	lr

08005598 <__retarget_lock_acquire_recursive>:
 8005598:	4770      	bx	lr

0800559a <__retarget_lock_release_recursive>:
 800559a:	4770      	bx	lr

0800559c <__swhatbuf_r>:
 800559c:	b570      	push	{r4, r5, r6, lr}
 800559e:	460e      	mov	r6, r1
 80055a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055a4:	2900      	cmp	r1, #0
 80055a6:	b096      	sub	sp, #88	; 0x58
 80055a8:	4614      	mov	r4, r2
 80055aa:	461d      	mov	r5, r3
 80055ac:	da08      	bge.n	80055c0 <__swhatbuf_r+0x24>
 80055ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	602a      	str	r2, [r5, #0]
 80055b6:	061a      	lsls	r2, r3, #24
 80055b8:	d410      	bmi.n	80055dc <__swhatbuf_r+0x40>
 80055ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055be:	e00e      	b.n	80055de <__swhatbuf_r+0x42>
 80055c0:	466a      	mov	r2, sp
 80055c2:	f000 f9eb 	bl	800599c <_fstat_r>
 80055c6:	2800      	cmp	r0, #0
 80055c8:	dbf1      	blt.n	80055ae <__swhatbuf_r+0x12>
 80055ca:	9a01      	ldr	r2, [sp, #4]
 80055cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80055d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80055d4:	425a      	negs	r2, r3
 80055d6:	415a      	adcs	r2, r3
 80055d8:	602a      	str	r2, [r5, #0]
 80055da:	e7ee      	b.n	80055ba <__swhatbuf_r+0x1e>
 80055dc:	2340      	movs	r3, #64	; 0x40
 80055de:	2000      	movs	r0, #0
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	b016      	add	sp, #88	; 0x58
 80055e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080055e8 <__smakebuf_r>:
 80055e8:	898b      	ldrh	r3, [r1, #12]
 80055ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80055ec:	079d      	lsls	r5, r3, #30
 80055ee:	4606      	mov	r6, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	d507      	bpl.n	8005604 <__smakebuf_r+0x1c>
 80055f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	6123      	str	r3, [r4, #16]
 80055fc:	2301      	movs	r3, #1
 80055fe:	6163      	str	r3, [r4, #20]
 8005600:	b002      	add	sp, #8
 8005602:	bd70      	pop	{r4, r5, r6, pc}
 8005604:	ab01      	add	r3, sp, #4
 8005606:	466a      	mov	r2, sp
 8005608:	f7ff ffc8 	bl	800559c <__swhatbuf_r>
 800560c:	9900      	ldr	r1, [sp, #0]
 800560e:	4605      	mov	r5, r0
 8005610:	4630      	mov	r0, r6
 8005612:	f000 f895 	bl	8005740 <_malloc_r>
 8005616:	b948      	cbnz	r0, 800562c <__smakebuf_r+0x44>
 8005618:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d4ef      	bmi.n	8005600 <__smakebuf_r+0x18>
 8005620:	f023 0303 	bic.w	r3, r3, #3
 8005624:	f043 0302 	orr.w	r3, r3, #2
 8005628:	81a3      	strh	r3, [r4, #12]
 800562a:	e7e3      	b.n	80055f4 <__smakebuf_r+0xc>
 800562c:	4b0d      	ldr	r3, [pc, #52]	; (8005664 <__smakebuf_r+0x7c>)
 800562e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005630:	89a3      	ldrh	r3, [r4, #12]
 8005632:	6020      	str	r0, [r4, #0]
 8005634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	9b00      	ldr	r3, [sp, #0]
 800563c:	6163      	str	r3, [r4, #20]
 800563e:	9b01      	ldr	r3, [sp, #4]
 8005640:	6120      	str	r0, [r4, #16]
 8005642:	b15b      	cbz	r3, 800565c <__smakebuf_r+0x74>
 8005644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005648:	4630      	mov	r0, r6
 800564a:	f000 f9b9 	bl	80059c0 <_isatty_r>
 800564e:	b128      	cbz	r0, 800565c <__smakebuf_r+0x74>
 8005650:	89a3      	ldrh	r3, [r4, #12]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	81a3      	strh	r3, [r4, #12]
 800565c:	89a0      	ldrh	r0, [r4, #12]
 800565e:	4305      	orrs	r5, r0
 8005660:	81a5      	strh	r5, [r4, #12]
 8005662:	e7cd      	b.n	8005600 <__smakebuf_r+0x18>
 8005664:	080053f5 	.word	0x080053f5

08005668 <_free_r>:
 8005668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800566a:	2900      	cmp	r1, #0
 800566c:	d044      	beq.n	80056f8 <_free_r+0x90>
 800566e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005672:	9001      	str	r0, [sp, #4]
 8005674:	2b00      	cmp	r3, #0
 8005676:	f1a1 0404 	sub.w	r4, r1, #4
 800567a:	bfb8      	it	lt
 800567c:	18e4      	addlt	r4, r4, r3
 800567e:	f000 f9c1 	bl	8005a04 <__malloc_lock>
 8005682:	4a1e      	ldr	r2, [pc, #120]	; (80056fc <_free_r+0x94>)
 8005684:	9801      	ldr	r0, [sp, #4]
 8005686:	6813      	ldr	r3, [r2, #0]
 8005688:	b933      	cbnz	r3, 8005698 <_free_r+0x30>
 800568a:	6063      	str	r3, [r4, #4]
 800568c:	6014      	str	r4, [r2, #0]
 800568e:	b003      	add	sp, #12
 8005690:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005694:	f000 b9bc 	b.w	8005a10 <__malloc_unlock>
 8005698:	42a3      	cmp	r3, r4
 800569a:	d908      	bls.n	80056ae <_free_r+0x46>
 800569c:	6825      	ldr	r5, [r4, #0]
 800569e:	1961      	adds	r1, r4, r5
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf01      	itttt	eq
 80056a4:	6819      	ldreq	r1, [r3, #0]
 80056a6:	685b      	ldreq	r3, [r3, #4]
 80056a8:	1949      	addeq	r1, r1, r5
 80056aa:	6021      	streq	r1, [r4, #0]
 80056ac:	e7ed      	b.n	800568a <_free_r+0x22>
 80056ae:	461a      	mov	r2, r3
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	b10b      	cbz	r3, 80056b8 <_free_r+0x50>
 80056b4:	42a3      	cmp	r3, r4
 80056b6:	d9fa      	bls.n	80056ae <_free_r+0x46>
 80056b8:	6811      	ldr	r1, [r2, #0]
 80056ba:	1855      	adds	r5, r2, r1
 80056bc:	42a5      	cmp	r5, r4
 80056be:	d10b      	bne.n	80056d8 <_free_r+0x70>
 80056c0:	6824      	ldr	r4, [r4, #0]
 80056c2:	4421      	add	r1, r4
 80056c4:	1854      	adds	r4, r2, r1
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	6011      	str	r1, [r2, #0]
 80056ca:	d1e0      	bne.n	800568e <_free_r+0x26>
 80056cc:	681c      	ldr	r4, [r3, #0]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	6053      	str	r3, [r2, #4]
 80056d2:	4421      	add	r1, r4
 80056d4:	6011      	str	r1, [r2, #0]
 80056d6:	e7da      	b.n	800568e <_free_r+0x26>
 80056d8:	d902      	bls.n	80056e0 <_free_r+0x78>
 80056da:	230c      	movs	r3, #12
 80056dc:	6003      	str	r3, [r0, #0]
 80056de:	e7d6      	b.n	800568e <_free_r+0x26>
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	1961      	adds	r1, r4, r5
 80056e4:	428b      	cmp	r3, r1
 80056e6:	bf04      	itt	eq
 80056e8:	6819      	ldreq	r1, [r3, #0]
 80056ea:	685b      	ldreq	r3, [r3, #4]
 80056ec:	6063      	str	r3, [r4, #4]
 80056ee:	bf04      	itt	eq
 80056f0:	1949      	addeq	r1, r1, r5
 80056f2:	6021      	streq	r1, [r4, #0]
 80056f4:	6054      	str	r4, [r2, #4]
 80056f6:	e7ca      	b.n	800568e <_free_r+0x26>
 80056f8:	b003      	add	sp, #12
 80056fa:	bd30      	pop	{r4, r5, pc}
 80056fc:	20000340 	.word	0x20000340

08005700 <sbrk_aligned>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4e0e      	ldr	r6, [pc, #56]	; (800573c <sbrk_aligned+0x3c>)
 8005704:	460c      	mov	r4, r1
 8005706:	6831      	ldr	r1, [r6, #0]
 8005708:	4605      	mov	r5, r0
 800570a:	b911      	cbnz	r1, 8005712 <sbrk_aligned+0x12>
 800570c:	f000 f88c 	bl	8005828 <_sbrk_r>
 8005710:	6030      	str	r0, [r6, #0]
 8005712:	4621      	mov	r1, r4
 8005714:	4628      	mov	r0, r5
 8005716:	f000 f887 	bl	8005828 <_sbrk_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d00a      	beq.n	8005734 <sbrk_aligned+0x34>
 800571e:	1cc4      	adds	r4, r0, #3
 8005720:	f024 0403 	bic.w	r4, r4, #3
 8005724:	42a0      	cmp	r0, r4
 8005726:	d007      	beq.n	8005738 <sbrk_aligned+0x38>
 8005728:	1a21      	subs	r1, r4, r0
 800572a:	4628      	mov	r0, r5
 800572c:	f000 f87c 	bl	8005828 <_sbrk_r>
 8005730:	3001      	adds	r0, #1
 8005732:	d101      	bne.n	8005738 <sbrk_aligned+0x38>
 8005734:	f04f 34ff 	mov.w	r4, #4294967295
 8005738:	4620      	mov	r0, r4
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	20000344 	.word	0x20000344

08005740 <_malloc_r>:
 8005740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005744:	1ccd      	adds	r5, r1, #3
 8005746:	f025 0503 	bic.w	r5, r5, #3
 800574a:	3508      	adds	r5, #8
 800574c:	2d0c      	cmp	r5, #12
 800574e:	bf38      	it	cc
 8005750:	250c      	movcc	r5, #12
 8005752:	2d00      	cmp	r5, #0
 8005754:	4607      	mov	r7, r0
 8005756:	db01      	blt.n	800575c <_malloc_r+0x1c>
 8005758:	42a9      	cmp	r1, r5
 800575a:	d905      	bls.n	8005768 <_malloc_r+0x28>
 800575c:	230c      	movs	r3, #12
 800575e:	603b      	str	r3, [r7, #0]
 8005760:	2600      	movs	r6, #0
 8005762:	4630      	mov	r0, r6
 8005764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005768:	4e2e      	ldr	r6, [pc, #184]	; (8005824 <_malloc_r+0xe4>)
 800576a:	f000 f94b 	bl	8005a04 <__malloc_lock>
 800576e:	6833      	ldr	r3, [r6, #0]
 8005770:	461c      	mov	r4, r3
 8005772:	bb34      	cbnz	r4, 80057c2 <_malloc_r+0x82>
 8005774:	4629      	mov	r1, r5
 8005776:	4638      	mov	r0, r7
 8005778:	f7ff ffc2 	bl	8005700 <sbrk_aligned>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	4604      	mov	r4, r0
 8005780:	d14d      	bne.n	800581e <_malloc_r+0xde>
 8005782:	6834      	ldr	r4, [r6, #0]
 8005784:	4626      	mov	r6, r4
 8005786:	2e00      	cmp	r6, #0
 8005788:	d140      	bne.n	800580c <_malloc_r+0xcc>
 800578a:	6823      	ldr	r3, [r4, #0]
 800578c:	4631      	mov	r1, r6
 800578e:	4638      	mov	r0, r7
 8005790:	eb04 0803 	add.w	r8, r4, r3
 8005794:	f000 f848 	bl	8005828 <_sbrk_r>
 8005798:	4580      	cmp	r8, r0
 800579a:	d13a      	bne.n	8005812 <_malloc_r+0xd2>
 800579c:	6821      	ldr	r1, [r4, #0]
 800579e:	3503      	adds	r5, #3
 80057a0:	1a6d      	subs	r5, r5, r1
 80057a2:	f025 0503 	bic.w	r5, r5, #3
 80057a6:	3508      	adds	r5, #8
 80057a8:	2d0c      	cmp	r5, #12
 80057aa:	bf38      	it	cc
 80057ac:	250c      	movcc	r5, #12
 80057ae:	4629      	mov	r1, r5
 80057b0:	4638      	mov	r0, r7
 80057b2:	f7ff ffa5 	bl	8005700 <sbrk_aligned>
 80057b6:	3001      	adds	r0, #1
 80057b8:	d02b      	beq.n	8005812 <_malloc_r+0xd2>
 80057ba:	6823      	ldr	r3, [r4, #0]
 80057bc:	442b      	add	r3, r5
 80057be:	6023      	str	r3, [r4, #0]
 80057c0:	e00e      	b.n	80057e0 <_malloc_r+0xa0>
 80057c2:	6822      	ldr	r2, [r4, #0]
 80057c4:	1b52      	subs	r2, r2, r5
 80057c6:	d41e      	bmi.n	8005806 <_malloc_r+0xc6>
 80057c8:	2a0b      	cmp	r2, #11
 80057ca:	d916      	bls.n	80057fa <_malloc_r+0xba>
 80057cc:	1961      	adds	r1, r4, r5
 80057ce:	42a3      	cmp	r3, r4
 80057d0:	6025      	str	r5, [r4, #0]
 80057d2:	bf18      	it	ne
 80057d4:	6059      	strne	r1, [r3, #4]
 80057d6:	6863      	ldr	r3, [r4, #4]
 80057d8:	bf08      	it	eq
 80057da:	6031      	streq	r1, [r6, #0]
 80057dc:	5162      	str	r2, [r4, r5]
 80057de:	604b      	str	r3, [r1, #4]
 80057e0:	4638      	mov	r0, r7
 80057e2:	f104 060b 	add.w	r6, r4, #11
 80057e6:	f000 f913 	bl	8005a10 <__malloc_unlock>
 80057ea:	f026 0607 	bic.w	r6, r6, #7
 80057ee:	1d23      	adds	r3, r4, #4
 80057f0:	1af2      	subs	r2, r6, r3
 80057f2:	d0b6      	beq.n	8005762 <_malloc_r+0x22>
 80057f4:	1b9b      	subs	r3, r3, r6
 80057f6:	50a3      	str	r3, [r4, r2]
 80057f8:	e7b3      	b.n	8005762 <_malloc_r+0x22>
 80057fa:	6862      	ldr	r2, [r4, #4]
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	bf0c      	ite	eq
 8005800:	6032      	streq	r2, [r6, #0]
 8005802:	605a      	strne	r2, [r3, #4]
 8005804:	e7ec      	b.n	80057e0 <_malloc_r+0xa0>
 8005806:	4623      	mov	r3, r4
 8005808:	6864      	ldr	r4, [r4, #4]
 800580a:	e7b2      	b.n	8005772 <_malloc_r+0x32>
 800580c:	4634      	mov	r4, r6
 800580e:	6876      	ldr	r6, [r6, #4]
 8005810:	e7b9      	b.n	8005786 <_malloc_r+0x46>
 8005812:	230c      	movs	r3, #12
 8005814:	603b      	str	r3, [r7, #0]
 8005816:	4638      	mov	r0, r7
 8005818:	f000 f8fa 	bl	8005a10 <__malloc_unlock>
 800581c:	e7a1      	b.n	8005762 <_malloc_r+0x22>
 800581e:	6025      	str	r5, [r4, #0]
 8005820:	e7de      	b.n	80057e0 <_malloc_r+0xa0>
 8005822:	bf00      	nop
 8005824:	20000340 	.word	0x20000340

08005828 <_sbrk_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d06      	ldr	r5, [pc, #24]	; (8005844 <_sbrk_r+0x1c>)
 800582c:	2300      	movs	r3, #0
 800582e:	4604      	mov	r4, r0
 8005830:	4608      	mov	r0, r1
 8005832:	602b      	str	r3, [r5, #0]
 8005834:	f7fc f938 	bl	8001aa8 <_sbrk>
 8005838:	1c43      	adds	r3, r0, #1
 800583a:	d102      	bne.n	8005842 <_sbrk_r+0x1a>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	b103      	cbz	r3, 8005842 <_sbrk_r+0x1a>
 8005840:	6023      	str	r3, [r4, #0]
 8005842:	bd38      	pop	{r3, r4, r5, pc}
 8005844:	20000348 	.word	0x20000348

08005848 <_raise_r>:
 8005848:	291f      	cmp	r1, #31
 800584a:	b538      	push	{r3, r4, r5, lr}
 800584c:	4604      	mov	r4, r0
 800584e:	460d      	mov	r5, r1
 8005850:	d904      	bls.n	800585c <_raise_r+0x14>
 8005852:	2316      	movs	r3, #22
 8005854:	6003      	str	r3, [r0, #0]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800585e:	b112      	cbz	r2, 8005866 <_raise_r+0x1e>
 8005860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005864:	b94b      	cbnz	r3, 800587a <_raise_r+0x32>
 8005866:	4620      	mov	r0, r4
 8005868:	f000 f830 	bl	80058cc <_getpid_r>
 800586c:	462a      	mov	r2, r5
 800586e:	4601      	mov	r1, r0
 8005870:	4620      	mov	r0, r4
 8005872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005876:	f000 b817 	b.w	80058a8 <_kill_r>
 800587a:	2b01      	cmp	r3, #1
 800587c:	d00a      	beq.n	8005894 <_raise_r+0x4c>
 800587e:	1c59      	adds	r1, r3, #1
 8005880:	d103      	bne.n	800588a <_raise_r+0x42>
 8005882:	2316      	movs	r3, #22
 8005884:	6003      	str	r3, [r0, #0]
 8005886:	2001      	movs	r0, #1
 8005888:	e7e7      	b.n	800585a <_raise_r+0x12>
 800588a:	2400      	movs	r4, #0
 800588c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005890:	4628      	mov	r0, r5
 8005892:	4798      	blx	r3
 8005894:	2000      	movs	r0, #0
 8005896:	e7e0      	b.n	800585a <_raise_r+0x12>

08005898 <raise>:
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <raise+0xc>)
 800589a:	4601      	mov	r1, r0
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	f7ff bfd3 	b.w	8005848 <_raise_r>
 80058a2:	bf00      	nop
 80058a4:	20000178 	.word	0x20000178

080058a8 <_kill_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4d07      	ldr	r5, [pc, #28]	; (80058c8 <_kill_r+0x20>)
 80058ac:	2300      	movs	r3, #0
 80058ae:	4604      	mov	r4, r0
 80058b0:	4608      	mov	r0, r1
 80058b2:	4611      	mov	r1, r2
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	f7fc f86f 	bl	8001998 <_kill>
 80058ba:	1c43      	adds	r3, r0, #1
 80058bc:	d102      	bne.n	80058c4 <_kill_r+0x1c>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	b103      	cbz	r3, 80058c4 <_kill_r+0x1c>
 80058c2:	6023      	str	r3, [r4, #0]
 80058c4:	bd38      	pop	{r3, r4, r5, pc}
 80058c6:	bf00      	nop
 80058c8:	20000348 	.word	0x20000348

080058cc <_getpid_r>:
 80058cc:	f7fc b85c 	b.w	8001988 <_getpid>

080058d0 <__sread>:
 80058d0:	b510      	push	{r4, lr}
 80058d2:	460c      	mov	r4, r1
 80058d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d8:	f000 f8a0 	bl	8005a1c <_read_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	bfab      	itete	ge
 80058e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058e2:	89a3      	ldrhlt	r3, [r4, #12]
 80058e4:	181b      	addge	r3, r3, r0
 80058e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058ea:	bfac      	ite	ge
 80058ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80058ee:	81a3      	strhlt	r3, [r4, #12]
 80058f0:	bd10      	pop	{r4, pc}

080058f2 <__swrite>:
 80058f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058f6:	461f      	mov	r7, r3
 80058f8:	898b      	ldrh	r3, [r1, #12]
 80058fa:	05db      	lsls	r3, r3, #23
 80058fc:	4605      	mov	r5, r0
 80058fe:	460c      	mov	r4, r1
 8005900:	4616      	mov	r6, r2
 8005902:	d505      	bpl.n	8005910 <__swrite+0x1e>
 8005904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005908:	2302      	movs	r3, #2
 800590a:	2200      	movs	r2, #0
 800590c:	f000 f868 	bl	80059e0 <_lseek_r>
 8005910:	89a3      	ldrh	r3, [r4, #12]
 8005912:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005916:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800591a:	81a3      	strh	r3, [r4, #12]
 800591c:	4632      	mov	r2, r6
 800591e:	463b      	mov	r3, r7
 8005920:	4628      	mov	r0, r5
 8005922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005926:	f000 b817 	b.w	8005958 <_write_r>

0800592a <__sseek>:
 800592a:	b510      	push	{r4, lr}
 800592c:	460c      	mov	r4, r1
 800592e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005932:	f000 f855 	bl	80059e0 <_lseek_r>
 8005936:	1c43      	adds	r3, r0, #1
 8005938:	89a3      	ldrh	r3, [r4, #12]
 800593a:	bf15      	itete	ne
 800593c:	6560      	strne	r0, [r4, #84]	; 0x54
 800593e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005946:	81a3      	strheq	r3, [r4, #12]
 8005948:	bf18      	it	ne
 800594a:	81a3      	strhne	r3, [r4, #12]
 800594c:	bd10      	pop	{r4, pc}

0800594e <__sclose>:
 800594e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005952:	f000 b813 	b.w	800597c <_close_r>
	...

08005958 <_write_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	; (8005978 <_write_r+0x20>)
 800595c:	4604      	mov	r4, r0
 800595e:	4608      	mov	r0, r1
 8005960:	4611      	mov	r1, r2
 8005962:	2200      	movs	r2, #0
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fc f84d 	bl	8001a06 <_write>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_write_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_write_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000348 	.word	0x20000348

0800597c <_close_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d06      	ldr	r5, [pc, #24]	; (8005998 <_close_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fc f859 	bl	8001a3e <_close>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_close_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_close_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20000348 	.word	0x20000348

0800599c <_fstat_r>:
 800599c:	b538      	push	{r3, r4, r5, lr}
 800599e:	4d07      	ldr	r5, [pc, #28]	; (80059bc <_fstat_r+0x20>)
 80059a0:	2300      	movs	r3, #0
 80059a2:	4604      	mov	r4, r0
 80059a4:	4608      	mov	r0, r1
 80059a6:	4611      	mov	r1, r2
 80059a8:	602b      	str	r3, [r5, #0]
 80059aa:	f7fc f854 	bl	8001a56 <_fstat>
 80059ae:	1c43      	adds	r3, r0, #1
 80059b0:	d102      	bne.n	80059b8 <_fstat_r+0x1c>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	b103      	cbz	r3, 80059b8 <_fstat_r+0x1c>
 80059b6:	6023      	str	r3, [r4, #0]
 80059b8:	bd38      	pop	{r3, r4, r5, pc}
 80059ba:	bf00      	nop
 80059bc:	20000348 	.word	0x20000348

080059c0 <_isatty_r>:
 80059c0:	b538      	push	{r3, r4, r5, lr}
 80059c2:	4d06      	ldr	r5, [pc, #24]	; (80059dc <_isatty_r+0x1c>)
 80059c4:	2300      	movs	r3, #0
 80059c6:	4604      	mov	r4, r0
 80059c8:	4608      	mov	r0, r1
 80059ca:	602b      	str	r3, [r5, #0]
 80059cc:	f7fc f853 	bl	8001a76 <_isatty>
 80059d0:	1c43      	adds	r3, r0, #1
 80059d2:	d102      	bne.n	80059da <_isatty_r+0x1a>
 80059d4:	682b      	ldr	r3, [r5, #0]
 80059d6:	b103      	cbz	r3, 80059da <_isatty_r+0x1a>
 80059d8:	6023      	str	r3, [r4, #0]
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	20000348 	.word	0x20000348

080059e0 <_lseek_r>:
 80059e0:	b538      	push	{r3, r4, r5, lr}
 80059e2:	4d07      	ldr	r5, [pc, #28]	; (8005a00 <_lseek_r+0x20>)
 80059e4:	4604      	mov	r4, r0
 80059e6:	4608      	mov	r0, r1
 80059e8:	4611      	mov	r1, r2
 80059ea:	2200      	movs	r2, #0
 80059ec:	602a      	str	r2, [r5, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	f7fc f84c 	bl	8001a8c <_lseek>
 80059f4:	1c43      	adds	r3, r0, #1
 80059f6:	d102      	bne.n	80059fe <_lseek_r+0x1e>
 80059f8:	682b      	ldr	r3, [r5, #0]
 80059fa:	b103      	cbz	r3, 80059fe <_lseek_r+0x1e>
 80059fc:	6023      	str	r3, [r4, #0]
 80059fe:	bd38      	pop	{r3, r4, r5, pc}
 8005a00:	20000348 	.word	0x20000348

08005a04 <__malloc_lock>:
 8005a04:	4801      	ldr	r0, [pc, #4]	; (8005a0c <__malloc_lock+0x8>)
 8005a06:	f7ff bdc7 	b.w	8005598 <__retarget_lock_acquire_recursive>
 8005a0a:	bf00      	nop
 8005a0c:	2000033c 	.word	0x2000033c

08005a10 <__malloc_unlock>:
 8005a10:	4801      	ldr	r0, [pc, #4]	; (8005a18 <__malloc_unlock+0x8>)
 8005a12:	f7ff bdc2 	b.w	800559a <__retarget_lock_release_recursive>
 8005a16:	bf00      	nop
 8005a18:	2000033c 	.word	0x2000033c

08005a1c <_read_r>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4d07      	ldr	r5, [pc, #28]	; (8005a3c <_read_r+0x20>)
 8005a20:	4604      	mov	r4, r0
 8005a22:	4608      	mov	r0, r1
 8005a24:	4611      	mov	r1, r2
 8005a26:	2200      	movs	r2, #0
 8005a28:	602a      	str	r2, [r5, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f7fb ffce 	bl	80019cc <_read>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_read_r+0x1e>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_read_r+0x1e>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	20000348 	.word	0x20000348

08005a40 <_init>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	bf00      	nop
 8005a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a46:	bc08      	pop	{r3}
 8005a48:	469e      	mov	lr, r3
 8005a4a:	4770      	bx	lr

08005a4c <_fini>:
 8005a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4e:	bf00      	nop
 8005a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a52:	bc08      	pop	{r3}
 8005a54:	469e      	mov	lr, r3
 8005a56:	4770      	bx	lr
