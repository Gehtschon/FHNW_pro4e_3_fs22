
Spektrumsanalyse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  08007748  08007748  00017748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b6c  08007b6c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007b6c  08007b6c  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007b6c  08007b6c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b6c  08007b6c  00017b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b70  08007b70  00017b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001dc  08007d50  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08007d50  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c88  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003158  00000000  00000000  00034e94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00037ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  00039448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026623  00000000  00000000  0003a718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179f6  00000000  00000000  00060d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e48c4  00000000  00000000  00078731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015cff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e40  00000000  00000000  0015d048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007730 	.word	0x08007730

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007730 	.word	0x08007730

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000270:	b5b0      	push	{r4, r5, r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 800027a:	2300      	movs	r3, #0
 800027c:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 800027e:	2300      	movs	r3, #0
 8000280:	777b      	strb	r3, [r7, #29]
 8000282:	e01b      	b.n	80002bc <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000284:	2300      	movs	r3, #0
 8000286:	77bb      	strb	r3, [r7, #30]
 8000288:	e012      	b.n	80002b0 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 800028a:	7fba      	ldrb	r2, [r7, #30]
 800028c:	7f7b      	ldrb	r3, [r7, #29]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	461a      	mov	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	1899      	adds	r1, r3, r2
 8000298:	7fba      	ldrb	r2, [r7, #30]
 800029a:	7f7b      	ldrb	r3, [r7, #29]
 800029c:	7808      	ldrb	r0, [r1, #0]
 800029e:	4961      	ldr	r1, [pc, #388]	; (8000424 <AES_Encrypt+0x1b4>)
 80002a0:	0092      	lsls	r2, r2, #2
 80002a2:	440a      	add	r2, r1
 80002a4:	4413      	add	r3, r2
 80002a6:	4602      	mov	r2, r0
 80002a8:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80002aa:	7fbb      	ldrb	r3, [r7, #30]
 80002ac:	3301      	adds	r3, #1
 80002ae:	77bb      	strb	r3, [r7, #30]
 80002b0:	7fbb      	ldrb	r3, [r7, #30]
 80002b2:	2b03      	cmp	r3, #3
 80002b4:	d9e9      	bls.n	800028a <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 80002b6:	7f7b      	ldrb	r3, [r7, #29]
 80002b8:	3301      	adds	r3, #1
 80002ba:	777b      	strb	r3, [r7, #29]
 80002bc:	7f7b      	ldrb	r3, [r7, #29]
 80002be:	2b03      	cmp	r3, #3
 80002c0:	d9e0      	bls.n	8000284 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 80002c2:	2300      	movs	r3, #0
 80002c4:	77fb      	strb	r3, [r7, #31]
 80002c6:	e00b      	b.n	80002e0 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 80002c8:	7ffb      	ldrb	r3, [r7, #31]
 80002ca:	683a      	ldr	r2, [r7, #0]
 80002cc:	441a      	add	r2, r3
 80002ce:	7ffb      	ldrb	r3, [r7, #31]
 80002d0:	7812      	ldrb	r2, [r2, #0]
 80002d2:	3320      	adds	r3, #32
 80002d4:	443b      	add	r3, r7
 80002d6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 80002da:	7ffb      	ldrb	r3, [r7, #31]
 80002dc:	3301      	adds	r3, #1
 80002de:	77fb      	strb	r3, [r7, #31]
 80002e0:	7ffb      	ldrb	r3, [r7, #31]
 80002e2:	2b0f      	cmp	r3, #15
 80002e4:	d9f0      	bls.n	80002c8 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 f89c 	bl	8000428 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 80002f0:	2301      	movs	r3, #1
 80002f2:	773b      	strb	r3, [r7, #28]
 80002f4:	e038      	b.n	8000368 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	777b      	strb	r3, [r7, #29]
 80002fa:	e01f      	b.n	800033c <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 80002fc:	2300      	movs	r3, #0
 80002fe:	77bb      	strb	r3, [r7, #30]
 8000300:	e016      	b.n	8000330 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000302:	7fba      	ldrb	r2, [r7, #30]
 8000304:	7f7b      	ldrb	r3, [r7, #29]
 8000306:	4947      	ldr	r1, [pc, #284]	; (8000424 <AES_Encrypt+0x1b4>)
 8000308:	0092      	lsls	r2, r2, #2
 800030a:	440a      	add	r2, r1
 800030c:	4413      	add	r3, r2
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	7fbd      	ldrb	r5, [r7, #30]
 8000312:	7f7c      	ldrb	r4, [r7, #29]
 8000314:	4618      	mov	r0, r3
 8000316:	f000 f8bf 	bl	8000498 <AES_Sub_Byte>
 800031a:	4603      	mov	r3, r0
 800031c:	4619      	mov	r1, r3
 800031e:	4a41      	ldr	r2, [pc, #260]	; (8000424 <AES_Encrypt+0x1b4>)
 8000320:	00ab      	lsls	r3, r5, #2
 8000322:	4413      	add	r3, r2
 8000324:	4423      	add	r3, r4
 8000326:	460a      	mov	r2, r1
 8000328:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 800032a:	7fbb      	ldrb	r3, [r7, #30]
 800032c:	3301      	adds	r3, #1
 800032e:	77bb      	strb	r3, [r7, #30]
 8000330:	7fbb      	ldrb	r3, [r7, #30]
 8000332:	2b03      	cmp	r3, #3
 8000334:	d9e5      	bls.n	8000302 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000336:	7f7b      	ldrb	r3, [r7, #29]
 8000338:	3301      	adds	r3, #1
 800033a:	777b      	strb	r3, [r7, #29]
 800033c:	7f7b      	ldrb	r3, [r7, #29]
 800033e:	2b03      	cmp	r3, #3
 8000340:	d9dc      	bls.n	80002fc <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000342:	f000 f8c7 	bl	80004d4 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000346:	f000 f909 	bl	800055c <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 800034a:	f107 020c 	add.w	r2, r7, #12
 800034e:	7f3b      	ldrb	r3, [r7, #28]
 8000350:	4611      	mov	r1, r2
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f998 	bl	8000688 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	4618      	mov	r0, r3
 800035e:	f000 f863 	bl	8000428 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000362:	7f3b      	ldrb	r3, [r7, #28]
 8000364:	3301      	adds	r3, #1
 8000366:	773b      	strb	r3, [r7, #28]
 8000368:	7f3b      	ldrb	r3, [r7, #28]
 800036a:	2b09      	cmp	r3, #9
 800036c:	d9c3      	bls.n	80002f6 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 800036e:	2300      	movs	r3, #0
 8000370:	777b      	strb	r3, [r7, #29]
 8000372:	e01f      	b.n	80003b4 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000374:	2300      	movs	r3, #0
 8000376:	77bb      	strb	r3, [r7, #30]
 8000378:	e016      	b.n	80003a8 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 800037a:	7fba      	ldrb	r2, [r7, #30]
 800037c:	7f7b      	ldrb	r3, [r7, #29]
 800037e:	4929      	ldr	r1, [pc, #164]	; (8000424 <AES_Encrypt+0x1b4>)
 8000380:	0092      	lsls	r2, r2, #2
 8000382:	440a      	add	r2, r1
 8000384:	4413      	add	r3, r2
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	7fbd      	ldrb	r5, [r7, #30]
 800038a:	7f7c      	ldrb	r4, [r7, #29]
 800038c:	4618      	mov	r0, r3
 800038e:	f000 f883 	bl	8000498 <AES_Sub_Byte>
 8000392:	4603      	mov	r3, r0
 8000394:	4619      	mov	r1, r3
 8000396:	4a23      	ldr	r2, [pc, #140]	; (8000424 <AES_Encrypt+0x1b4>)
 8000398:	00ab      	lsls	r3, r5, #2
 800039a:	4413      	add	r3, r2
 800039c:	4423      	add	r3, r4
 800039e:	460a      	mov	r2, r1
 80003a0:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 80003a2:	7fbb      	ldrb	r3, [r7, #30]
 80003a4:	3301      	adds	r3, #1
 80003a6:	77bb      	strb	r3, [r7, #30]
 80003a8:	7fbb      	ldrb	r3, [r7, #30]
 80003aa:	2b03      	cmp	r3, #3
 80003ac:	d9e5      	bls.n	800037a <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 80003ae:	7f7b      	ldrb	r3, [r7, #29]
 80003b0:	3301      	adds	r3, #1
 80003b2:	777b      	strb	r3, [r7, #29]
 80003b4:	7f7b      	ldrb	r3, [r7, #29]
 80003b6:	2b03      	cmp	r3, #3
 80003b8:	d9dc      	bls.n	8000374 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 80003ba:	f000 f88b 	bl	80004d4 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 80003be:	f107 020c 	add.w	r2, r7, #12
 80003c2:	7f3b      	ldrb	r3, [r7, #28]
 80003c4:	4611      	mov	r1, r2
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 f95e 	bl	8000688 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 80003cc:	f107 030c 	add.w	r3, r7, #12
 80003d0:	4618      	mov	r0, r3
 80003d2:	f000 f829 	bl	8000428 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	777b      	strb	r3, [r7, #29]
 80003da:	e01a      	b.n	8000412 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 80003dc:	2300      	movs	r3, #0
 80003de:	77bb      	strb	r3, [r7, #30]
 80003e0:	e011      	b.n	8000406 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 80003e2:	7fb9      	ldrb	r1, [r7, #30]
 80003e4:	7f7a      	ldrb	r2, [r7, #29]
 80003e6:	7fb8      	ldrb	r0, [r7, #30]
 80003e8:	7f7b      	ldrb	r3, [r7, #29]
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4403      	add	r3, r0
 80003ee:	4618      	mov	r0, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	4403      	add	r3, r0
 80003f4:	480b      	ldr	r0, [pc, #44]	; (8000424 <AES_Encrypt+0x1b4>)
 80003f6:	0089      	lsls	r1, r1, #2
 80003f8:	4401      	add	r1, r0
 80003fa:	440a      	add	r2, r1
 80003fc:	7812      	ldrb	r2, [r2, #0]
 80003fe:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000400:	7fbb      	ldrb	r3, [r7, #30]
 8000402:	3301      	adds	r3, #1
 8000404:	77bb      	strb	r3, [r7, #30]
 8000406:	7fbb      	ldrb	r3, [r7, #30]
 8000408:	2b03      	cmp	r3, #3
 800040a:	d9ea      	bls.n	80003e2 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 800040c:	7f7b      	ldrb	r3, [r7, #29]
 800040e:	3301      	adds	r3, #1
 8000410:	777b      	strb	r3, [r7, #29]
 8000412:	7f7b      	ldrb	r3, [r7, #29]
 8000414:	2b03      	cmp	r3, #3
 8000416:	d9e1      	bls.n	80003dc <AES_Encrypt+0x16c>
		}
	}

}
 8000418:	bf00      	nop
 800041a:	bf00      	nop
 800041c:	3720      	adds	r7, #32
 800041e:	46bd      	mov	sp, r7
 8000420:	bdb0      	pop	{r4, r5, r7, pc}
 8000422:	bf00      	nop
 8000424:	200001f8 	.word	0x200001f8

08000428 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000430:	2300      	movs	r3, #0
 8000432:	73bb      	strb	r3, [r7, #14]
 8000434:	e024      	b.n	8000480 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8000436:	2300      	movs	r3, #0
 8000438:	73fb      	strb	r3, [r7, #15]
 800043a:	e01b      	b.n	8000474 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 800043c:	7bfa      	ldrb	r2, [r7, #15]
 800043e:	7bbb      	ldrb	r3, [r7, #14]
 8000440:	4914      	ldr	r1, [pc, #80]	; (8000494 <AES_Add_Round_Key+0x6c>)
 8000442:	0092      	lsls	r2, r2, #2
 8000444:	440a      	add	r2, r1
 8000446:	4413      	add	r3, r2
 8000448:	7818      	ldrb	r0, [r3, #0]
 800044a:	7bfa      	ldrb	r2, [r7, #15]
 800044c:	7bbb      	ldrb	r3, [r7, #14]
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	4413      	add	r3, r2
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4413      	add	r3, r2
 8000458:	7819      	ldrb	r1, [r3, #0]
 800045a:	7bfa      	ldrb	r2, [r7, #15]
 800045c:	7bbb      	ldrb	r3, [r7, #14]
 800045e:	4041      	eors	r1, r0
 8000460:	b2c8      	uxtb	r0, r1
 8000462:	490c      	ldr	r1, [pc, #48]	; (8000494 <AES_Add_Round_Key+0x6c>)
 8000464:	0092      	lsls	r2, r2, #2
 8000466:	440a      	add	r2, r1
 8000468:	4413      	add	r3, r2
 800046a:	4602      	mov	r2, r0
 800046c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 800046e:	7bfb      	ldrb	r3, [r7, #15]
 8000470:	3301      	adds	r3, #1
 8000472:	73fb      	strb	r3, [r7, #15]
 8000474:	7bfb      	ldrb	r3, [r7, #15]
 8000476:	2b03      	cmp	r3, #3
 8000478:	d9e0      	bls.n	800043c <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 800047a:	7bbb      	ldrb	r3, [r7, #14]
 800047c:	3301      	adds	r3, #1
 800047e:	73bb      	strb	r3, [r7, #14]
 8000480:	7bbb      	ldrb	r3, [r7, #14]
 8000482:	2b03      	cmp	r3, #3
 8000484:	d9d7      	bls.n	8000436 <AES_Add_Round_Key+0xe>
		}
	}
}
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000492:	4770      	bx	lr
 8000494:	200001f8 	.word	0x200001f8

08000498 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
 800049e:	4603      	mov	r3, r0
 80004a0:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	091b      	lsrs	r3, r3, #4
 80004a6:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 80004b0:	7bfa      	ldrb	r2, [r7, #15]
 80004b2:	7bbb      	ldrb	r3, [r7, #14]
 80004b4:	4906      	ldr	r1, [pc, #24]	; (80004d0 <AES_Sub_Byte+0x38>)
 80004b6:	0112      	lsls	r2, r2, #4
 80004b8:	440a      	add	r2, r1
 80004ba:	4413      	add	r3, r2
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 80004c0:	7b7b      	ldrb	r3, [r7, #13]
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	20000000 	.word	0x20000000

080004d4 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 80004da:	4b1f      	ldr	r3, [pc, #124]	; (8000558 <AES_Shift_Rows+0x84>)
 80004dc:	791b      	ldrb	r3, [r3, #4]
 80004de:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <AES_Shift_Rows+0x84>)
 80004e2:	795a      	ldrb	r2, [r3, #5]
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <AES_Shift_Rows+0x84>)
 80004e6:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 80004e8:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <AES_Shift_Rows+0x84>)
 80004ea:	799a      	ldrb	r2, [r3, #6]
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <AES_Shift_Rows+0x84>)
 80004ee:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 80004f0:	4b19      	ldr	r3, [pc, #100]	; (8000558 <AES_Shift_Rows+0x84>)
 80004f2:	79da      	ldrb	r2, [r3, #7]
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <AES_Shift_Rows+0x84>)
 80004f6:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 80004f8:	4a17      	ldr	r2, [pc, #92]	; (8000558 <AES_Shift_Rows+0x84>)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <AES_Shift_Rows+0x84>)
 8000500:	7a1b      	ldrb	r3, [r3, #8]
 8000502:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <AES_Shift_Rows+0x84>)
 8000506:	7a9a      	ldrb	r2, [r3, #10]
 8000508:	4b13      	ldr	r3, [pc, #76]	; (8000558 <AES_Shift_Rows+0x84>)
 800050a:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 800050c:	4a12      	ldr	r2, [pc, #72]	; (8000558 <AES_Shift_Rows+0x84>)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8000512:	4b11      	ldr	r3, [pc, #68]	; (8000558 <AES_Shift_Rows+0x84>)
 8000514:	7a5b      	ldrb	r3, [r3, #9]
 8000516:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 8000518:	4b0f      	ldr	r3, [pc, #60]	; (8000558 <AES_Shift_Rows+0x84>)
 800051a:	7ada      	ldrb	r2, [r3, #11]
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <AES_Shift_Rows+0x84>)
 800051e:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <AES_Shift_Rows+0x84>)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8000526:	4b0c      	ldr	r3, [pc, #48]	; (8000558 <AES_Shift_Rows+0x84>)
 8000528:	7bdb      	ldrb	r3, [r3, #15]
 800052a:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <AES_Shift_Rows+0x84>)
 800052e:	7b9a      	ldrb	r2, [r3, #14]
 8000530:	4b09      	ldr	r3, [pc, #36]	; (8000558 <AES_Shift_Rows+0x84>)
 8000532:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <AES_Shift_Rows+0x84>)
 8000536:	7b5a      	ldrb	r2, [r3, #13]
 8000538:	4b07      	ldr	r3, [pc, #28]	; (8000558 <AES_Shift_Rows+0x84>)
 800053a:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <AES_Shift_Rows+0x84>)
 800053e:	7b1a      	ldrb	r2, [r3, #12]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <AES_Shift_Rows+0x84>)
 8000542:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <AES_Shift_Rows+0x84>)
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	7313      	strb	r3, [r2, #12]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	200001f8 	.word	0x200001f8

0800055c <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 800055c:	b480      	push	{r7}
 800055e:	b085      	sub	sp, #20
 8000560:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000562:	2300      	movs	r3, #0
 8000564:	73bb      	strb	r3, [r7, #14]
 8000566:	e082      	b.n	800066e <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 8000568:	2300      	movs	r3, #0
 800056a:	73fb      	strb	r3, [r7, #15]
 800056c:	e033      	b.n	80005d6 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 800056e:	7bf9      	ldrb	r1, [r7, #15]
 8000570:	7bba      	ldrb	r2, [r7, #14]
 8000572:	7bfb      	ldrb	r3, [r7, #15]
 8000574:	4843      	ldr	r0, [pc, #268]	; (8000684 <AES_Mix_Collums+0x128>)
 8000576:	0089      	lsls	r1, r1, #2
 8000578:	4401      	add	r1, r0
 800057a:	440a      	add	r2, r1
 800057c:	7812      	ldrb	r2, [r2, #0]
 800057e:	3310      	adds	r3, #16
 8000580:	443b      	add	r3, r7
 8000582:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 8000586:	7bfa      	ldrb	r2, [r7, #15]
 8000588:	7bbb      	ldrb	r3, [r7, #14]
 800058a:	493e      	ldr	r1, [pc, #248]	; (8000684 <AES_Mix_Collums+0x128>)
 800058c:	0092      	lsls	r2, r2, #2
 800058e:	440a      	add	r2, r1
 8000590:	4413      	add	r3, r2
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	7bfb      	ldrb	r3, [r7, #15]
 8000596:	0052      	lsls	r2, r2, #1
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	3310      	adds	r3, #16
 800059c:	443b      	add	r3, r7
 800059e:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 80005a2:	7bfa      	ldrb	r2, [r7, #15]
 80005a4:	7bbb      	ldrb	r3, [r7, #14]
 80005a6:	4937      	ldr	r1, [pc, #220]	; (8000684 <AES_Mix_Collums+0x128>)
 80005a8:	0092      	lsls	r2, r2, #2
 80005aa:	440a      	add	r2, r1
 80005ac:	4413      	add	r3, r2
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	da0c      	bge.n	80005d0 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	3310      	adds	r3, #16
 80005ba:	443b      	add	r3, r7
 80005bc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	f082 021b 	eor.w	r2, r2, #27
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	3310      	adds	r3, #16
 80005ca:	443b      	add	r3, r7
 80005cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 80005d0:	7bfb      	ldrb	r3, [r7, #15]
 80005d2:	3301      	adds	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
 80005d8:	2b03      	cmp	r3, #3
 80005da:	d9c8      	bls.n	800056e <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 80005dc:	793a      	ldrb	r2, [r7, #4]
 80005de:	7a7b      	ldrb	r3, [r7, #9]
 80005e0:	4053      	eors	r3, r2
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	4053      	eors	r3, r2
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	7abb      	ldrb	r3, [r7, #10]
 80005ec:	4053      	eors	r3, r2
 80005ee:	b2d9      	uxtb	r1, r3
 80005f0:	7afa      	ldrb	r2, [r7, #11]
 80005f2:	7bbb      	ldrb	r3, [r7, #14]
 80005f4:	404a      	eors	r2, r1
 80005f6:	b2d1      	uxtb	r1, r2
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <AES_Mix_Collums+0x128>)
 80005fa:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 80005fc:	7a3a      	ldrb	r2, [r7, #8]
 80005fe:	797b      	ldrb	r3, [r7, #5]
 8000600:	4053      	eors	r3, r2
 8000602:	b2da      	uxtb	r2, r3
 8000604:	7abb      	ldrb	r3, [r7, #10]
 8000606:	4053      	eors	r3, r2
 8000608:	b2da      	uxtb	r2, r3
 800060a:	79bb      	ldrb	r3, [r7, #6]
 800060c:	4053      	eors	r3, r2
 800060e:	b2d9      	uxtb	r1, r3
 8000610:	7afa      	ldrb	r2, [r7, #11]
 8000612:	7bbb      	ldrb	r3, [r7, #14]
 8000614:	404a      	eors	r2, r1
 8000616:	b2d1      	uxtb	r1, r2
 8000618:	4a1a      	ldr	r2, [pc, #104]	; (8000684 <AES_Mix_Collums+0x128>)
 800061a:	4413      	add	r3, r2
 800061c:	460a      	mov	r2, r1
 800061e:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8000620:	7a3a      	ldrb	r2, [r7, #8]
 8000622:	7a7b      	ldrb	r3, [r7, #9]
 8000624:	4053      	eors	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	79bb      	ldrb	r3, [r7, #6]
 800062a:	4053      	eors	r3, r2
 800062c:	b2da      	uxtb	r2, r3
 800062e:	7afb      	ldrb	r3, [r7, #11]
 8000630:	4053      	eors	r3, r2
 8000632:	b2d9      	uxtb	r1, r3
 8000634:	79fa      	ldrb	r2, [r7, #7]
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	404a      	eors	r2, r1
 800063a:	b2d1      	uxtb	r1, r2
 800063c:	4a11      	ldr	r2, [pc, #68]	; (8000684 <AES_Mix_Collums+0x128>)
 800063e:	4413      	add	r3, r2
 8000640:	460a      	mov	r2, r1
 8000642:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8000644:	7a3a      	ldrb	r2, [r7, #8]
 8000646:	793b      	ldrb	r3, [r7, #4]
 8000648:	4053      	eors	r3, r2
 800064a:	b2da      	uxtb	r2, r3
 800064c:	7a7b      	ldrb	r3, [r7, #9]
 800064e:	4053      	eors	r3, r2
 8000650:	b2da      	uxtb	r2, r3
 8000652:	7abb      	ldrb	r3, [r7, #10]
 8000654:	4053      	eors	r3, r2
 8000656:	b2d9      	uxtb	r1, r3
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	404a      	eors	r2, r1
 800065e:	b2d1      	uxtb	r1, r2
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <AES_Mix_Collums+0x128>)
 8000662:	4413      	add	r3, r2
 8000664:	460a      	mov	r2, r1
 8000666:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8000668:	7bbb      	ldrb	r3, [r7, #14]
 800066a:	3301      	adds	r3, #1
 800066c:	73bb      	strb	r3, [r7, #14]
 800066e:	7bbb      	ldrb	r3, [r7, #14]
 8000670:	2b03      	cmp	r3, #3
 8000672:	f67f af79 	bls.w	8000568 <AES_Mix_Collums+0xc>
	}
}
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	200001f8 	.word	0x200001f8

08000688 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b087      	sub	sp, #28
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	6039      	str	r1, [r7, #0]
 8000692:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 8000694:	2300      	movs	r3, #0
 8000696:	75fb      	strb	r3, [r7, #23]
 8000698:	e00c      	b.n	80006b4 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 800069a:	7dfb      	ldrb	r3, [r7, #23]
 800069c:	330c      	adds	r3, #12
 800069e:	683a      	ldr	r2, [r7, #0]
 80006a0:	441a      	add	r2, r3
 80006a2:	7dfb      	ldrb	r3, [r7, #23]
 80006a4:	7812      	ldrb	r2, [r2, #0]
 80006a6:	3318      	adds	r3, #24
 80006a8:	443b      	add	r3, r7
 80006aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	3301      	adds	r3, #1
 80006b2:	75fb      	strb	r3, [r7, #23]
 80006b4:	7dfb      	ldrb	r3, [r7, #23]
 80006b6:	2b03      	cmp	r3, #3
 80006b8:	d9ef      	bls.n	800069a <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80006ba:	7b3b      	ldrb	r3, [r7, #12]
 80006bc:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80006be:	7b7b      	ldrb	r3, [r7, #13]
 80006c0:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
 80006c8:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80006ca:	7d3b      	ldrb	r3, [r7, #20]
 80006cc:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	75fb      	strb	r3, [r7, #23]
 80006d2:	e012      	b.n	80006fa <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80006d4:	7dfb      	ldrb	r3, [r7, #23]
 80006d6:	3318      	adds	r3, #24
 80006d8:	443b      	add	r3, r7
 80006da:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80006de:	7dfc      	ldrb	r4, [r7, #23]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f7ff fed9 	bl	8000498 <AES_Sub_Byte>
 80006e6:	4603      	mov	r3, r0
 80006e8:	461a      	mov	r2, r3
 80006ea:	f104 0318 	add.w	r3, r4, #24
 80006ee:	443b      	add	r3, r7
 80006f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	3301      	adds	r3, #1
 80006f8:	75fb      	strb	r3, [r7, #23]
 80006fa:	7dfb      	ldrb	r3, [r7, #23]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d9e9      	bls.n	80006d4 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8000700:	2301      	movs	r3, #1
 8000702:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8000704:	e010      	b.n	8000728 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8000706:	7d7b      	ldrb	r3, [r7, #21]
 8000708:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800070c:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800070e:	7d7b      	ldrb	r3, [r7, #21]
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8000714:	7cfb      	ldrb	r3, [r7, #19]
 8000716:	2b80      	cmp	r3, #128	; 0x80
 8000718:	d103      	bne.n	8000722 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800071a:	7d7b      	ldrb	r3, [r7, #21]
 800071c:	f083 031b 	eor.w	r3, r3, #27
 8000720:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	3b01      	subs	r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d1eb      	bne.n	8000706 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800072e:	7b3a      	ldrb	r2, [r7, #12]
 8000730:	7d7b      	ldrb	r3, [r7, #21]
 8000732:	4053      	eors	r3, r2
 8000734:	b2db      	uxtb	r3, r3
 8000736:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8000738:	2300      	movs	r3, #0
 800073a:	75fb      	strb	r3, [r7, #23]
 800073c:	e02f      	b.n	800079e <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800073e:	2300      	movs	r3, #0
 8000740:	75bb      	strb	r3, [r7, #22]
 8000742:	e026      	b.n	8000792 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8000744:	7dba      	ldrb	r2, [r7, #22]
 8000746:	7dfb      	ldrb	r3, [r7, #23]
 8000748:	009b      	lsls	r3, r3, #2
 800074a:	4413      	add	r3, r2
 800074c:	461a      	mov	r2, r3
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	4413      	add	r3, r2
 8000752:	7819      	ldrb	r1, [r3, #0]
 8000754:	7dbb      	ldrb	r3, [r7, #22]
 8000756:	3318      	adds	r3, #24
 8000758:	443b      	add	r3, r7
 800075a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800075e:	7db8      	ldrb	r0, [r7, #22]
 8000760:	7dfb      	ldrb	r3, [r7, #23]
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	4403      	add	r3, r0
 8000766:	4618      	mov	r0, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	4403      	add	r3, r0
 800076c:	404a      	eors	r2, r1
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8000772:	7dba      	ldrb	r2, [r7, #22]
 8000774:	7dfb      	ldrb	r3, [r7, #23]
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	461a      	mov	r2, r3
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	441a      	add	r2, r3
 8000780:	7dbb      	ldrb	r3, [r7, #22]
 8000782:	7812      	ldrb	r2, [r2, #0]
 8000784:	3318      	adds	r3, #24
 8000786:	443b      	add	r3, r7
 8000788:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800078c:	7dbb      	ldrb	r3, [r7, #22]
 800078e:	3301      	adds	r3, #1
 8000790:	75bb      	strb	r3, [r7, #22]
 8000792:	7dbb      	ldrb	r3, [r7, #22]
 8000794:	2b03      	cmp	r3, #3
 8000796:	d9d5      	bls.n	8000744 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 8000798:	7dfb      	ldrb	r3, [r7, #23]
 800079a:	3301      	adds	r3, #1
 800079c:	75fb      	strb	r3, [r7, #23]
 800079e:	7dfb      	ldrb	r3, [r7, #23]
 80007a0:	2b03      	cmp	r3, #3
 80007a2:	d9cc      	bls.n	800073e <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	371c      	adds	r7, #28
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}
	...

080007b0 <Encrypt_Payload>:
extern unsigned char NwkSkey[16];
extern unsigned char AppSkey[16];
extern unsigned char DevAddr[4];

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b08a      	sub	sp, #40	; 0x28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	60f8      	str	r0, [r7, #12]
 80007b8:	607a      	str	r2, [r7, #4]
 80007ba:	461a      	mov	r2, r3
 80007bc:	460b      	mov	r3, r1
 80007be:	72fb      	strb	r3, [r7, #11]
 80007c0:	4613      	mov	r3, r2
 80007c2:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 80007c4:	2300      	movs	r3, #0
 80007c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 80007ca:	2300      	movs	r3, #0
 80007cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80007d6:	7afb      	ldrb	r3, [r7, #11]
 80007d8:	091b      	lsrs	r3, r3, #4
 80007da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80007de:	7afb      	ldrb	r3, [r7, #11]
 80007e0:	f003 030f 	and.w	r3, r3, #15
 80007e4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if(Incomplete_Block_Size != 0)
 80007e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d004      	beq.n	80007fa <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 80007f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80007f4:	3301      	adds	r3, #1
 80007f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 80007fa:	2301      	movs	r3, #1
 80007fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000800:	e07e      	b.n	8000900 <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8000802:	2301      	movs	r3, #1
 8000804:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8000806:	2300      	movs	r3, #0
 8000808:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 800080a:	2300      	movs	r3, #0
 800080c:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800080e:	2300      	movs	r3, #0
 8000810:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8000812:	2300      	movs	r3, #0
 8000814:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8000816:	7abb      	ldrb	r3, [r7, #10]
 8000818:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 800081a:	4b3f      	ldr	r3, [pc, #252]	; (8000918 <Encrypt_Payload+0x168>)
 800081c:	78db      	ldrb	r3, [r3, #3]
 800081e:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 8000820:	4b3d      	ldr	r3, [pc, #244]	; (8000918 <Encrypt_Payload+0x168>)
 8000822:	789b      	ldrb	r3, [r3, #2]
 8000824:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <Encrypt_Payload+0x168>)
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800082c:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <Encrypt_Payload+0x168>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	b2db      	uxtb	r3, r3
 8000836:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	0a1b      	lsrs	r3, r3, #8
 800083c:	b2db      	uxtb	r3, r3
 800083e:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 8000840:	2300      	movs	r3, #0
 8000842:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8000846:	2300      	movs	r3, #0
 8000848:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

		Block_A[14] = 0x00;
 800084c:	2300      	movs	r3, #0
 800084e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		Block_A[15] = i;
 8000852:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//Calculate S
		AES_Encrypt(Block_A,AppSkey);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	492f      	ldr	r1, [pc, #188]	; (800091c <Encrypt_Payload+0x16c>)
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff fd05 	bl	8000270 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8000866:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800086a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800086e:	429a      	cmp	r2, r3
 8000870:	d01c      	beq.n	80008ac <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8000872:	2300      	movs	r3, #0
 8000874:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000878:	e013      	b.n	80008a2 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	781a      	ldrb	r2, [r3, #0]
 800087e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000882:	3328      	adds	r3, #40	; 0x28
 8000884:	443b      	add	r3, r7
 8000886:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800088a:	4053      	eors	r3, r2
 800088c:	b2da      	uxtb	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	701a      	strb	r2, [r3, #0]
				Data++;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3301      	adds	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 8000898:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800089c:	3301      	adds	r3, #1
 800089e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008a6:	2b0f      	cmp	r3, #15
 80008a8:	d9e7      	bls.n	800087a <Encrypt_Payload+0xca>
 80008aa:	e024      	b.n	80008f6 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 80008ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d102      	bne.n	80008ba <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 80008b4:	2310      	movs	r3, #16
 80008b6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 80008ba:	2300      	movs	r3, #0
 80008bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008c0:	e013      	b.n	80008ea <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	781a      	ldrb	r2, [r3, #0]
 80008c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008ca:	3328      	adds	r3, #40	; 0x28
 80008cc:	443b      	add	r3, r7
 80008ce:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80008d2:	4053      	eors	r3, r2
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	701a      	strb	r2, [r3, #0]
				Data++;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	3301      	adds	r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80008e0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80008e4:	3301      	adds	r3, #1
 80008e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80008ea:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80008ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008f2:	429a      	cmp	r2, r3
 80008f4:	d3e5      	bcc.n	80008c2 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 80008f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008fa:	3301      	adds	r3, #1
 80008fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000900:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000904:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000908:	429a      	cmp	r2, r3
 800090a:	f67f af7a 	bls.w	8000802 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000228 	.word	0x20000228
 800091c:	20000218 	.word	0x20000218

08000920 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter, unsigned char Direction)
{
 8000920:	b590      	push	{r4, r7, lr}
 8000922:	b09b      	sub	sp, #108	; 0x6c
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	4613      	mov	r3, r2
 800092e:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8000930:	4bb8      	ldr	r3, [pc, #736]	; (8000c14 <Calculate_MIC+0x2f4>)
 8000932:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000936:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000938:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 800093c:	4bb5      	ldr	r3, [pc, #724]	; (8000c14 <Calculate_MIC+0x2f4>)
 800093e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8000942:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000944:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8000948:	4bb2      	ldr	r3, [pc, #712]	; (8000c14 <Calculate_MIC+0x2f4>)
 800094a:	f107 0424 	add.w	r4, r7, #36	; 0x24
 800094e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000950:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 8000954:	4baf      	ldr	r3, [pc, #700]	; (8000c14 <Calculate_MIC+0x2f4>)
 8000956:	f107 0414 	add.w	r4, r7, #20
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8000960:	2300      	movs	r3, #0
 8000962:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 8000966:	2300      	movs	r3, #0
 8000968:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	unsigned char Block_Counter = 0x01;
 800096c:	2301      	movs	r3, #1
 800096e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 8000972:	2349      	movs	r3, #73	; 0x49
 8000974:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
	Block_B[1] = 0x00;
 8000978:	2300      	movs	r3, #0
 800097a:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	Block_B[2] = 0x00;
 800097e:	2300      	movs	r3, #0
 8000980:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	Block_B[3] = 0x00;
 8000984:	2300      	movs	r3, #0
 8000986:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Block_B[4] = 0x00;
 800098a:	2300      	movs	r3, #0
 800098c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

	Block_B[5] = Direction;
 8000990:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8000994:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	Block_B[6] = DevAddr[3];
 8000998:	4b9f      	ldr	r3, [pc, #636]	; (8000c18 <Calculate_MIC+0x2f8>)
 800099a:	78db      	ldrb	r3, [r3, #3]
 800099c:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	Block_B[7] = DevAddr[2];
 80009a0:	4b9d      	ldr	r3, [pc, #628]	; (8000c18 <Calculate_MIC+0x2f8>)
 80009a2:	789b      	ldrb	r3, [r3, #2]
 80009a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	Block_B[8] = DevAddr[1];
 80009a8:	4b9b      	ldr	r3, [pc, #620]	; (8000c18 <Calculate_MIC+0x2f8>)
 80009aa:	785b      	ldrb	r3, [r3, #1]
 80009ac:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	Block_B[9] = DevAddr[0];
 80009b0:	4b99      	ldr	r3, [pc, #612]	; (8000c18 <Calculate_MIC+0x2f8>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	0a1b      	lsrs	r3, r3, #8
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 80009ca:	2300      	movs	r3, #0
 80009cc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	Block_B[13] = 0x00;
 80009d0:	2300      	movs	r3, #0
 80009d2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	Block_B[14] = 0x00;
 80009d6:	2300      	movs	r3, #0
 80009d8:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	Block_B[15] = Data_Length;
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	091b      	lsrs	r3, r3, #4
 80009e6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64

	if(Incomplete_Block_Size != 0)
 80009f4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d004      	beq.n	8000a06 <Calculate_MIC+0xe6>
	{
		Number_of_Blocks++;
 80009fc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000a00:	3301      	adds	r3, #1
 8000a02:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	}

	Generate_Keys(Key_K1, Key_K2);
 8000a06:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000a0a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a0e:	4611      	mov	r1, r2
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 f905 	bl	8000c20 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B,NwkSkey);
 8000a16:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a1a:	4980      	ldr	r1, [pc, #512]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fc27 	bl	8000270 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8000a22:	2300      	movs	r3, #0
 8000a24:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a28:	e010      	b.n	8000a4c <Calculate_MIC+0x12c>
	{
		Old_Data[i] = Block_B[i];
 8000a2a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000a2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a32:	3268      	adds	r2, #104	; 0x68
 8000a34:	443a      	add	r2, r7
 8000a36:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8000a3a:	3368      	adds	r3, #104	; 0x68
 8000a3c:	443b      	add	r3, r7
 8000a3e:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8000a42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a46:	3301      	adds	r3, #1
 8000a48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a50:	2b0f      	cmp	r3, #15
 8000a52:	d9ea      	bls.n	8000a2a <Calculate_MIC+0x10a>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8000a54:	e043      	b.n	8000ade <Calculate_MIC+0x1be>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8000a56:	2300      	movs	r3, #0
 8000a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a5c:	e00f      	b.n	8000a7e <Calculate_MIC+0x15e>
		{
			New_Data[i] = *Data;
 8000a5e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	7812      	ldrb	r2, [r2, #0]
 8000a66:	3368      	adds	r3, #104	; 0x68
 8000a68:	443b      	add	r3, r7
 8000a6a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000a74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000a7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a82:	2b0f      	cmp	r3, #15
 8000a84:	d9eb      	bls.n	8000a5e <Calculate_MIC+0x13e>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000a86:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4611      	mov	r1, r2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f000 f94f 	bl	8000d34 <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data,NwkSkey);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4960      	ldr	r1, [pc, #384]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fbe7 	bl	8000270 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000aa8:	e010      	b.n	8000acc <Calculate_MIC+0x1ac>
		{
			Old_Data[i] = New_Data[i];
 8000aaa:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000aae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ab2:	3268      	adds	r2, #104	; 0x68
 8000ab4:	443a      	add	r2, r7
 8000ab6:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 8000aba:	3368      	adds	r3, #104	; 0x68
 8000abc:	443b      	add	r3, r7
 8000abe:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 8000ac2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000acc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d9ea      	bls.n	8000aaa <Calculate_MIC+0x18a>
		}

		//Raise Block counter
		Block_Counter++;
 8000ad4:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8000ad8:	3301      	adds	r3, #1
 8000ada:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	while(Block_Counter < Number_of_Blocks)
 8000ade:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000ae2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d3b5      	bcc.n	8000a56 <Calculate_MIC+0x136>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 8000aea:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d12e      	bne.n	8000b50 <Calculate_MIC+0x230>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000af8:	e00f      	b.n	8000b1a <Calculate_MIC+0x1fa>
		{
			New_Data[i] = *Data;
 8000afa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	3368      	adds	r3, #104	; 0x68
 8000b04:	443b      	add	r3, r7
 8000b06:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8000b10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b14:	3301      	adds	r3, #1
 8000b16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b1e:	2b0f      	cmp	r3, #15
 8000b20:	d9eb      	bls.n	8000afa <Calculate_MIC+0x1da>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8000b22:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8000b26:	f107 0314 	add.w	r3, r7, #20
 8000b2a:	4611      	mov	r1, r2
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f901 	bl	8000d34 <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8000b32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 f8f9 	bl	8000d34 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4935      	ldr	r1, [pc, #212]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f7ff fb91 	bl	8000270 <AES_Encrypt>
 8000b4e:	e04d      	b.n	8000bec <Calculate_MIC+0x2cc>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8000b50:	2300      	movs	r3, #0
 8000b52:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000b56:	e02f      	b.n	8000bb8 <Calculate_MIC+0x298>
		{
			if(i < Incomplete_Block_Size)
 8000b58:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b5c:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b60:	429a      	cmp	r2, r3
 8000b62:	d20a      	bcs.n	8000b7a <Calculate_MIC+0x25a>
			{
				New_Data[i] = *Data;
 8000b64:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	3368      	adds	r3, #104	; 0x68
 8000b6e:	443b      	add	r3, r7
 8000b70:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 8000b7a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b7e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d106      	bne.n	8000b94 <Calculate_MIC+0x274>
			{
				New_Data[i] = 0x80;
 8000b86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000b8a:	3368      	adds	r3, #104	; 0x68
 8000b8c:	443b      	add	r3, r7
 8000b8e:	2280      	movs	r2, #128	; 0x80
 8000b90:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 8000b94:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8000b98:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d906      	bls.n	8000bae <Calculate_MIC+0x28e>
			{
				New_Data[i] = 0x00;
 8000ba0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000ba4:	3368      	adds	r3, #104	; 0x68
 8000ba6:	443b      	add	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 8000bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bb2:	3301      	adds	r3, #1
 8000bb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8000bb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000bbc:	2b0f      	cmp	r3, #15
 8000bbe:	d9cb      	bls.n	8000b58 <Calculate_MIC+0x238>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 8000bc0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000bc4:	f107 0314 	add.w	r3, r7, #20
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f8b2 	bl	8000d34 <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 8000bd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4611      	mov	r1, r2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f000 f8aa 	bl	8000d34 <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data,NwkSkey);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	490d      	ldr	r1, [pc, #52]	; (8000c1c <Calculate_MIC+0x2fc>)
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fb42 	bl	8000270 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 8000bec:	7d3a      	ldrb	r2, [r7, #20]
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	7d7a      	ldrb	r2, [r7, #21]
 8000bf8:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3302      	adds	r3, #2
 8000bfe:	7dba      	ldrb	r2, [r7, #22]
 8000c00:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3303      	adds	r3, #3
 8000c06:	7dfa      	ldrb	r2, [r7, #23]
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	376c      	adds	r7, #108	; 0x6c
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	bf00      	nop
 8000c14:	08007748 	.word	0x08007748
 8000c18:	20000228 	.word	0x20000228
 8000c1c:	20000208 	.word	0x20000208

08000c20 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1,NwkSkey);
 8000c2a:	4926      	ldr	r1, [pc, #152]	; (8000cc4 <Generate_Keys+0xa4>)
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fb1f 	bl	8000270 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	da02      	bge.n	8000c42 <Generate_Keys+0x22>
	{
		MSB_Key = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	73bb      	strb	r3, [r7, #14]
 8000c40:	e001      	b.n	8000c46 <Generate_Keys+0x26>
	}
	else
	{
		MSB_Key = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f83e 	bl	8000cc8 <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8000c4c:	7bbb      	ldrb	r3, [r7, #14]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d109      	bne.n	8000c66 <Generate_Keys+0x46>
	{
		K1[15] = K1[15] ^ 0x87;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	330f      	adds	r3, #15
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	320f      	adds	r2, #15
 8000c5c:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000c60:	43db      	mvns	r3, r3
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e00a      	b.n	8000c82 <Generate_Keys+0x62>
	{
		K2[i] = K1[i];
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	441a      	add	r2, r3
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	440b      	add	r3, r1
 8000c78:	7812      	ldrb	r2, [r2, #0]
 8000c7a:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	73fb      	strb	r3, [r7, #15]
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d9f1      	bls.n	8000c6c <Generate_Keys+0x4c>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b25b      	sxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	da02      	bge.n	8000c98 <Generate_Keys+0x78>
	{
		MSB_Key = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73bb      	strb	r3, [r7, #14]
 8000c96:	e001      	b.n	8000c9c <Generate_Keys+0x7c>
	}
	else
	{
		MSB_Key = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	73bb      	strb	r3, [r7, #14]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 8000c9c:	6838      	ldr	r0, [r7, #0]
 8000c9e:	f000 f813 	bl	8000cc8 <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d109      	bne.n	8000cbc <Generate_Keys+0x9c>
	{
		K2[15] = K2[15] ^ 0x87;
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	330f      	adds	r3, #15
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	320f      	adds	r2, #15
 8000cb2:	f083 0378 	eor.w	r3, r3, #120	; 0x78
 8000cb6:	43db      	mvns	r3, r3
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	7013      	strb	r3, [r2, #0]
	}
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000208 	.word	0x20000208

08000cc8 <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	73fb      	strb	r3, [r7, #15]
 8000cd8:	e022      	b.n	8000d20 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
 8000cdc:	2b0e      	cmp	r3, #14
 8000cde:	d80d      	bhi.n	8000cfc <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	b25b      	sxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	da02      	bge.n	8000cf6 <Shift_Left+0x2e>
			{
				Overflow = 1;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	73bb      	strb	r3, [r7, #14]
 8000cf4:	e004      	b.n	8000d00 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	73bb      	strb	r3, [r7, #14]
 8000cfa:	e001      	b.n	8000d00 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	b2d9      	uxtb	r1, r3
 8000d0c:	7bfb      	ldrb	r3, [r7, #15]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	7bba      	ldrb	r2, [r7, #14]
 8000d14:	440a      	add	r2, r1
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	73fb      	strb	r3, [r7, #15]
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	2b0f      	cmp	r3, #15
 8000d24:	d9d9      	bls.n	8000cda <Shift_Left+0x12>
	}
}
 8000d26:	bf00      	nop
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e010      	b.n	8000d66 <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	4413      	add	r3, r2
 8000d4a:	7819      	ldrb	r1, [r3, #0]
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	781a      	ldrb	r2, [r3, #0]
 8000d54:	7bfb      	ldrb	r3, [r7, #15]
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	4403      	add	r3, r0
 8000d5a:	404a      	eors	r2, r1
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	3301      	adds	r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d9eb      	bls.n	8000d44 <XOR+0x10>
	}
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3714      	adds	r7, #20
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <rfm95_read>:
unsigned char NwkSkey[16];
unsigned char AppSkey[16];
unsigned char DevAddr[4];

static bool rfm95_read(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t *buffer) {
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	460b      	mov	r3, r1
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6858      	ldr	r0, [r3, #4]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	891b      	ldrh	r3, [r3, #8]
 8000d90:	2200      	movs	r2, #0
 8000d92:	4619      	mov	r1, r3
 8000d94:	f002 f85a 	bl	8002e4c <HAL_GPIO_WritePin>

	//uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
	uint8_t transmit_buffer = (uint8_t) reg;
 8000d98:	7afb      	ldrb	r3, [r7, #11]
 8000d9a:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1,
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f107 0117 	add.w	r1, r7, #23
 8000da4:	230a      	movs	r3, #10
 8000da6:	2201      	movs	r2, #1
 8000da8:	f004 facd 	bl	8005346 <HAL_SPI_Transmit>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <rfm95_read+0x3c>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e014      	b.n	8000de0 <rfm95_read+0x66>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, 1, RFM95_SPI_TIMEOUT)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	6818      	ldr	r0, [r3, #0]
 8000dba:	230a      	movs	r3, #10
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f004 fc2f 	bl	8005622 <HAL_SPI_Receive>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <rfm95_read+0x54>
			!= HAL_OK) {
		return false;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	e008      	b.n	8000de0 <rfm95_read+0x66>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	6858      	ldr	r0, [r3, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	891b      	ldrh	r3, [r3, #8]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f002 f837 	bl	8002e4c <HAL_GPIO_WritePin>

	return true;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3718      	adds	r7, #24
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <rfm95_write>:

static bool rfm95_write(rfm95_handle_t *handle, rfm95_register_t reg,
		uint8_t value) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	70fb      	strb	r3, [r7, #3]
 8000df4:	4613      	mov	r3, r2
 8000df6:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6858      	ldr	r0, [r3, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	891b      	ldrh	r3, [r3, #8]
 8000e00:	2200      	movs	r2, #0
 8000e02:	4619      	mov	r1, r3
 8000e04:	f002 f822 	bl	8002e4c <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = { ((uint8_t) reg | 0x80u), value };
 8000e08:	78fb      	ldrb	r3, [r7, #3]
 8000e0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	733b      	strb	r3, [r7, #12]
 8000e12:	78bb      	ldrb	r3, [r7, #2]
 8000e14:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2,
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6818      	ldr	r0, [r3, #0]
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	230a      	movs	r3, #10
 8000e20:	2202      	movs	r2, #2
 8000e22:	f004 fa90 	bl	8005346 <HAL_SPI_Transmit>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <rfm95_write+0x48>
	RFM95_SPI_TIMEOUT) != HAL_OK) {
		return false;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	e008      	b.n	8000e42 <rfm95_write+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6858      	ldr	r0, [r3, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	891b      	ldrh	r3, [r3, #8]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f002 f806 	bl	8002e4c <HAL_GPIO_WritePin>

	return true;
 8000e40:	2301      	movs	r3, #1
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <rfm95_reset>:

static void rfm95_reset(rfm95_handle_t *handle) {
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68d8      	ldr	r0, [r3, #12]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	8a1b      	ldrh	r3, [r3, #16]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f001 fff5 	bl	8002e4c <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8000e62:	2001      	movs	r0, #1
 8000e64:	f001 fcfa 	bl	800285c <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68d8      	ldr	r0, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	8a1b      	ldrh	r3, [r3, #16]
 8000e70:	2201      	movs	r2, #1
 8000e72:	4619      	mov	r1, r3
 8000e74:	f001 ffea 	bl	8002e4c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8000e78:	2005      	movs	r0, #5
 8000e7a:	f001 fcef 	bl	800285c <HAL_Delay>
}
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000e9a:	d005      	beq.n	8000ea8 <rfm95_init+0x20>
 8000e9c:	4b7f      	ldr	r3, [pc, #508]	; (800109c <rfm95_init+0x214>)
 8000e9e:	4a80      	ldr	r2, [pc, #512]	; (80010a0 <rfm95_init+0x218>)
 8000ea0:	2180      	movs	r1, #128	; 0x80
 8000ea2:	4880      	ldr	r0, [pc, #512]	; (80010a4 <rfm95_init+0x21c>)
 8000ea4:	f005 fb84 	bl	80065b0 <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	689b      	ldr	r3, [r3, #8]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d005      	beq.n	8000ebe <rfm95_init+0x36>
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <rfm95_init+0x220>)
 8000eb4:	4a7a      	ldr	r2, [pc, #488]	; (80010a0 <rfm95_init+0x218>)
 8000eb6:	2181      	movs	r1, #129	; 0x81
 8000eb8:	487a      	ldr	r0, [pc, #488]	; (80010a4 <rfm95_init+0x21c>)
 8000eba:	f005 fb79 	bl	80065b0 <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000ec8:	d005      	beq.n	8000ed6 <rfm95_init+0x4e>
 8000eca:	4b78      	ldr	r3, [pc, #480]	; (80010ac <rfm95_init+0x224>)
 8000ecc:	4a74      	ldr	r2, [pc, #464]	; (80010a0 <rfm95_init+0x218>)
 8000ece:	2182      	movs	r1, #130	; 0x82
 8000ed0:	4874      	ldr	r0, [pc, #464]	; (80010a4 <rfm95_init+0x21c>)
 8000ed2:	f005 fb6d 	bl	80065b0 <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d005      	beq.n	8000eec <rfm95_init+0x64>
 8000ee0:	4b73      	ldr	r3, [pc, #460]	; (80010b0 <rfm95_init+0x228>)
 8000ee2:	4a6f      	ldr	r2, [pc, #444]	; (80010a0 <rfm95_init+0x218>)
 8000ee4:	2183      	movs	r1, #131	; 0x83
 8000ee6:	486f      	ldr	r0, [pc, #444]	; (80010a4 <rfm95_init+0x21c>)
 8000ee8:	f005 fb62 	bl	80065b0 <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d005      	beq.n	8000f02 <rfm95_init+0x7a>
 8000ef6:	4b6f      	ldr	r3, [pc, #444]	; (80010b4 <rfm95_init+0x22c>)
 8000ef8:	4a69      	ldr	r2, [pc, #420]	; (80010a0 <rfm95_init+0x218>)
 8000efa:	2184      	movs	r1, #132	; 0x84
 8000efc:	4869      	ldr	r0, [pc, #420]	; (80010a4 <rfm95_init+0x21c>)
 8000efe:	f005 fb57 	bl	80065b0 <__assert_func>

	rfm95_reset(handle);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa1 	bl	8000e4a <rfm95_reset>

	if (handle->reload_frame_counter != NULL) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <rfm95_init+0x9c>
		handle->reload_frame_counter(&handle->tx_frame_count,
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	f102 0052 	add.w	r0, r2, #82	; 0x52
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	3250      	adds	r2, #80	; 0x50
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4798      	blx	r3
 8000f22:	e007      	b.n	8000f34 <rfm95_init+0xac>
				&handle->rx_frame_count);
	} else {
		handle->tx_frame_count = 0;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2200      	movs	r2, #0
 8000f28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		handle->rx_frame_count = 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
	}

	// Check for correct version.
	uint8_t version;
	if (!rfm95_read(handle, RFM95_REGISTER_VERSION, &version))
 8000f34:	f107 030f 	add.w	r3, r7, #15
 8000f38:	461a      	mov	r2, r3
 8000f3a:	2142      	movs	r1, #66	; 0x42
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f7ff ff1c 	bl	8000d7a <rfm95_read>
 8000f42:	4603      	mov	r3, r0
 8000f44:	f083 0301 	eor.w	r3, r3, #1
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <rfm95_init+0xca>
		return false;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	e0a0      	b.n	8001094 <rfm95_init+0x20c>
	if (version != RFM9x_VER)
 8000f52:	7bfb      	ldrb	r3, [r7, #15]
 8000f54:	2b12      	cmp	r3, #18
 8000f56:	d001      	beq.n	8000f5c <rfm95_init+0xd4>
		return false;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e09b      	b.n	8001094 <rfm95_init+0x20c>

	// Module must be placed in sleep mode before switching to lora.
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2101      	movs	r1, #1
 8000f60:	6878      	ldr	r0, [r7, #4]
 8000f62:	f7ff ff41 	bl	8000de8 <rfm95_write>
 8000f66:	4603      	mov	r3, r0
 8000f68:	f083 0301 	eor.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <rfm95_init+0xee>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e08e      	b.n	8001094 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8000f76:	2280      	movs	r2, #128	; 0x80
 8000f78:	2101      	movs	r1, #1
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff34 	bl	8000de8 <rfm95_write>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f083 0301 	eor.w	r3, r3, #1
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <rfm95_init+0x108>
	RFM95_REGISTER_OP_MODE_LORA))
		return false;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e081      	b.n	8001094 <rfm95_init+0x20c>

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17))
 8000f90:	2111      	movs	r1, #17
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f890 	bl	80010b8 <rfm95_set_power>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f083 0301 	eor.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <rfm95_init+0x120>
		return false;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	e075      	b.n	8001094 <rfm95_init+0x20c>

	// RX timeout set to 37 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, 37))
 8000fa8:	2225      	movs	r2, #37	; 0x25
 8000faa:	211f      	movs	r1, #31
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff1b 	bl	8000de8 <rfm95_write>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	f083 0301 	eor.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <rfm95_init+0x13a>
		return false;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	e068      	b.n	8001094 <rfm95_init+0x20c>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00))
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff0e 	bl	8000de8 <rfm95_write>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	f083 0301 	eor.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <rfm95_init+0x154>
		return false;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e05b      	b.n	8001094 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08))
 8000fdc:	2208      	movs	r2, #8
 8000fde:	2121      	movs	r1, #33	; 0x21
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ff01 	bl	8000de8 <rfm95_write>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	f083 0301 	eor.w	r3, r3, #1
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <rfm95_init+0x16e>
		return false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	e04e      	b.n	8001094 <rfm95_init+0x20c>

	// Turn on low data rate optimisation (for symbol lengths > 16ms) and automatic AGC
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3,
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	2126      	movs	r1, #38	; 0x26
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fef4 	bl	8000de8 <rfm95_write>
 8001000:	4603      	mov	r3, r0
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <rfm95_init+0x188>
	RFM95_REGISTER_MODEM_CONFIG_3_LDR_OPTIM_AGC_AUTO_ON))
		return false;
 800100c:	2300      	movs	r3, #0
 800100e:	e041      	b.n	8001094 <rfm95_init+0x20c>

	// Set TTN sync word 0x34.
	if (!rfm95_write(handle, RFM95_REGISTER_SYNC_WORD, 0x34))
 8001010:	2234      	movs	r2, #52	; 0x34
 8001012:	2139      	movs	r1, #57	; 0x39
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff fee7 	bl	8000de8 <rfm95_write>
 800101a:	4603      	mov	r3, r0
 800101c:	f083 0301 	eor.w	r3, r3, #1
 8001020:	b2db      	uxtb	r3, r3
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <rfm95_init+0x1a2>
		return false;
 8001026:	2300      	movs	r3, #0
 8001028:	e034      	b.n	8001094 <rfm95_init+0x20c>

	// Set IQ inversion.
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_1,
 800102a:	2227      	movs	r2, #39	; 0x27
 800102c:	2133      	movs	r1, #51	; 0x33
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff feda 	bl	8000de8 <rfm95_write>
 8001034:	4603      	mov	r3, r0
 8001036:	f083 0301 	eor.w	r3, r3, #1
 800103a:	b2db      	uxtb	r3, r3
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <rfm95_init+0x1bc>
	RFM95_REGISTER_INVERT_IQ_1_ON_TXONLY))
		return false;
 8001040:	2300      	movs	r3, #0
 8001042:	e027      	b.n	8001094 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_INVERT_IQ_2,
 8001044:	221d      	movs	r2, #29
 8001046:	213b      	movs	r1, #59	; 0x3b
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff fecd 	bl	8000de8 <rfm95_write>
 800104e:	4603      	mov	r3, r0
 8001050:	f083 0301 	eor.w	r3, r3, #1
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <rfm95_init+0x1d6>
	RFM95_REGISTER_INVERT_IQ_2_OFF))
		return false;
 800105a:	2300      	movs	r3, #0
 800105c:	e01a      	b.n	8001094 <rfm95_init+0x20c>

	// Set up TX and RX FIFO base addresses.
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80))
 800105e:	2280      	movs	r2, #128	; 0x80
 8001060:	210e      	movs	r1, #14
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff fec0 	bl	8000de8 <rfm95_write>
 8001068:	4603      	mov	r3, r0
 800106a:	f083 0301 	eor.w	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <rfm95_init+0x1f0>
		return false;
 8001074:	2300      	movs	r3, #0
 8001076:	e00d      	b.n	8001094 <rfm95_init+0x20c>
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00))
 8001078:	2200      	movs	r2, #0
 800107a:	210f      	movs	r1, #15
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f7ff feb3 	bl	8000de8 <rfm95_write>
 8001082:	4603      	mov	r3, r0
 8001084:	f083 0301 	eor.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <rfm95_init+0x20a>
		return false;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <rfm95_init+0x20c>

	return true;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08007758 	.word	0x08007758
 80010a0:	08007a18 	.word	0x08007a18
 80010a4:	0800778c 	.word	0x0800778c
 80010a8:	080077b0 	.word	0x080077b0
 80010ac:	080077ec 	.word	0x080077ec
 80010b0:	08007824 	.word	0x08007824
 80010b4:	08007860 	.word	0x08007860

080010b8 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 80010c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	dd03      	ble.n	80010d4 <rfm95_set_power+0x1c>
 80010cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010d0:	2b11      	cmp	r3, #17
 80010d2:	dd09      	ble.n	80010e8 <rfm95_set_power+0x30>
 80010d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010d8:	2b14      	cmp	r3, #20
 80010da:	d005      	beq.n	80010e8 <rfm95_set_power+0x30>
 80010dc:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <rfm95_set_power+0xd8>)
 80010de:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <rfm95_set_power+0xdc>)
 80010e0:	21c8      	movs	r1, #200	; 0xc8
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <rfm95_set_power+0xe0>)
 80010e4:	f005 fa64 	bl	80065b0 <__assert_func>

	rfm95_register_pa_config_t pa_config = { 0 };
 80010e8:	2300      	movs	r3, #0
 80010ea:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 80010f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	dd18      	ble.n	800112a <rfm95_set_power+0x72>
 80010f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010fc:	2b11      	cmp	r3, #17
 80010fe:	dc14      	bgt.n	800112a <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001100:	7b3b      	ldrb	r3, [r7, #12]
 8001102:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001106:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001108:	7b3b      	ldrb	r3, [r7, #12]
 800110a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800110e:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	3b02      	subs	r3, #2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 030f 	and.w	r3, r3, #15
 800111a:	b2da      	uxtb	r2, r3
 800111c:	7b3b      	ldrb	r3, [r7, #12]
 800111e:	f362 0303 	bfi	r3, r2, #0, #4
 8001122:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001124:	2384      	movs	r3, #132	; 0x84
 8001126:	73fb      	strb	r3, [r7, #15]
 8001128:	e011      	b.n	800114e <rfm95_set_power+0x96>

	} else if (power == 20) {
 800112a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800112e:	2b14      	cmp	r3, #20
 8001130:	d10d      	bne.n	800114e <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001132:	7b3b      	ldrb	r3, [r7, #12]
 8001134:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001138:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 800113a:	7b3b      	ldrb	r3, [r7, #12]
 800113c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001140:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001142:	7b3b      	ldrb	r3, [r7, #12]
 8001144:	f043 030f 	orr.w	r3, r3, #15
 8001148:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 800114a:	2387      	movs	r3, #135	; 0x87
 800114c:	73fb      	strb	r3, [r7, #15]
	}

	if (!rfm95_write(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer))
 800114e:	7b3b      	ldrb	r3, [r7, #12]
 8001150:	461a      	mov	r2, r3
 8001152:	2109      	movs	r1, #9
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f7ff fe47 	bl	8000de8 <rfm95_write>
 800115a:	4603      	mov	r3, r0
 800115c:	f083 0301 	eor.w	r3, r3, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <rfm95_set_power+0xb2>
		return false;
 8001166:	2300      	movs	r3, #0
 8001168:	e00e      	b.n	8001188 <rfm95_set_power+0xd0>
	if (!rfm95_write(handle, RFM95_REGISTER_PA_DAC, pa_dac_config))
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	461a      	mov	r2, r3
 800116e:	214d      	movs	r1, #77	; 0x4d
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fe39 	bl	8000de8 <rfm95_write>
 8001176:	4603      	mov	r3, r0
 8001178:	f083 0301 	eor.w	r3, r3, #1
 800117c:	b2db      	uxtb	r3, r3
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <rfm95_set_power+0xce>
		return false;
 8001182:	2300      	movs	r3, #0
 8001184:	e000      	b.n	8001188 <rfm95_set_power+0xd0>

	return true;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	08007898 	.word	0x08007898
 8001194:	08007a24 	.word	0x08007a24
 8001198:	0800778c 	.word	0x0800778c

0800119c <rfm95_send_package>:

static bool rfm95_send_package(rfm95_handle_t *handle, uint8_t *data,
		size_t length, uint8_t channel) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	70fb      	strb	r3, [r7, #3]
	assert(channel < 8);
 80011aa:	78fb      	ldrb	r3, [r7, #3]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d905      	bls.n	80011bc <rfm95_send_package+0x20>
 80011b0:	4b86      	ldr	r3, [pc, #536]	; (80013cc <rfm95_send_package+0x230>)
 80011b2:	4a87      	ldr	r2, [pc, #540]	; (80013d0 <rfm95_send_package+0x234>)
 80011b4:	21e4      	movs	r1, #228	; 0xe4
 80011b6:	4887      	ldr	r0, [pc, #540]	; (80013d4 <rfm95_send_package+0x238>)
 80011b8:	f005 f9fa 	bl	80065b0 <__assert_func>

	uint32_t tick_start;

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80011bc:	2281      	movs	r2, #129	; 0x81
 80011be:	2101      	movs	r1, #1
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f7ff fe11 	bl	8000de8 <rfm95_write>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f083 0301 	eor.w	r3, r3, #1
 80011cc:	b2db      	uxtb	r3, r3
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <rfm95_send_package+0x3a>
	RFM95_REGISTER_OP_MODE_LORA_STANDBY))
		return false;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e0f6      	b.n	80013c4 <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 80011d6:	f001 fb35 	bl	8002844 <HAL_GetTick>
 80011da:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 80011dc:	e00d      	b.n	80011fa <rfm95_send_package+0x5e>
			== GPIO_PIN_RESET) {
		if ((HAL_GetTick() - tick_start) >= RFM95_WAKEUP_TIMEOUT) {
 80011de:	f001 fb31 	bl	8002844 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	1ad3      	subs	r3, r2, r3
 80011e8:	2b09      	cmp	r3, #9
 80011ea:	d906      	bls.n	80011fa <rfm95_send_package+0x5e>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80011ec:	2200      	movs	r2, #0
 80011ee:	2101      	movs	r1, #1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f7ff fdf9 	bl	8000de8 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e0e4      	b.n	80013c4 <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->dio5_port, handle->dio5_pin)
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	69da      	ldr	r2, [r3, #28]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	8c1b      	ldrh	r3, [r3, #32]
 8001202:	4619      	mov	r1, r3
 8001204:	4610      	mov	r0, r2
 8001206:	f001 fe09 	bl	8002e1c <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0e6      	beq.n	80011de <rfm95_send_package+0x42>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_FR_MSB,
 8001210:	78fa      	ldrb	r2, [r7, #3]
 8001212:	4971      	ldr	r1, [pc, #452]	; (80013d8 <rfm95_send_package+0x23c>)
 8001214:	4613      	mov	r3, r2
 8001216:	005b      	lsls	r3, r3, #1
 8001218:	4413      	add	r3, r2
 800121a:	440b      	add	r3, r1
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	461a      	mov	r2, r3
 8001220:	2106      	movs	r1, #6
 8001222:	68f8      	ldr	r0, [r7, #12]
 8001224:	f7ff fde0 	bl	8000de8 <rfm95_write>
 8001228:	4603      	mov	r3, r0
 800122a:	f083 0301 	eor.w	r3, r3, #1
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <rfm95_send_package+0x9c>
			eu863_lora_frequency[channel][0]))
		return false;
 8001234:	2300      	movs	r3, #0
 8001236:	e0c5      	b.n	80013c4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_MID,
 8001238:	78fa      	ldrb	r2, [r7, #3]
 800123a:	4967      	ldr	r1, [pc, #412]	; (80013d8 <rfm95_send_package+0x23c>)
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	3301      	adds	r3, #1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	2107      	movs	r1, #7
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	f7ff fdcb 	bl	8000de8 <rfm95_write>
 8001252:	4603      	mov	r3, r0
 8001254:	f083 0301 	eor.w	r3, r3, #1
 8001258:	b2db      	uxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <rfm95_send_package+0xc6>
			eu863_lora_frequency[channel][1]))
		return false;
 800125e:	2300      	movs	r3, #0
 8001260:	e0b0      	b.n	80013c4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_FR_LSB,
 8001262:	78fa      	ldrb	r2, [r7, #3]
 8001264:	495c      	ldr	r1, [pc, #368]	; (80013d8 <rfm95_send_package+0x23c>)
 8001266:	4613      	mov	r3, r2
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	4413      	add	r3, r2
 800126c:	440b      	add	r3, r1
 800126e:	3302      	adds	r3, #2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	2108      	movs	r1, #8
 8001276:	68f8      	ldr	r0, [r7, #12]
 8001278:	f7ff fdb6 	bl	8000de8 <rfm95_write>
 800127c:	4603      	mov	r3, r0
 800127e:	f083 0301 	eor.w	r3, r3, #1
 8001282:	b2db      	uxtb	r3, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <rfm95_send_package+0xf0>
			eu863_lora_frequency[channel][2]))
		return false;
 8001288:	2300      	movs	r3, #0
 800128a:	e09b      	b.n	80013c4 <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72))
 800128c:	2272      	movs	r2, #114	; 0x72
 800128e:	211d      	movs	r1, #29
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff fda9 	bl	8000de8 <rfm95_write>
 8001296:	4603      	mov	r3, r0
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <rfm95_send_package+0x10a>
		return false;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e08e      	b.n	80013c4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74))
 80012a6:	2274      	movs	r2, #116	; 0x74
 80012a8:	211e      	movs	r1, #30
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f7ff fd9c 	bl	8000de8 <rfm95_write>
 80012b0:	4603      	mov	r3, r0
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <rfm95_send_package+0x124>
		return false;
 80012bc:	2300      	movs	r3, #0
 80012be:	e081      	b.n	80013c4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04))
 80012c0:	2204      	movs	r2, #4
 80012c2:	2126      	movs	r1, #38	; 0x26
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f7ff fd8f 	bl	8000de8 <rfm95_write>
 80012ca:	4603      	mov	r3, r0
 80012cc:	f083 0301 	eor.w	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <rfm95_send_package+0x13e>
		return false;
 80012d6:	2300      	movs	r3, #0
 80012d8:	e074      	b.n	80013c4 <rfm95_send_package+0x228>

	if (!rfm95_write(handle, RFM95_REGISTER_PAYLOAD_LENGTH, length))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	2122      	movs	r1, #34	; 0x22
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f7ff fd80 	bl	8000de8 <rfm95_write>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f083 0301 	eor.w	r3, r3, #1
 80012ee:	b2db      	uxtb	r3, r3
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <rfm95_send_package+0x15c>
		return false;
 80012f4:	2300      	movs	r3, #0
 80012f6:	e065      	b.n	80013c4 <rfm95_send_package+0x228>

	// Set SPI pointer to start of TX section in FIFO
	if (!rfm95_write(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80))
 80012f8:	2280      	movs	r2, #128	; 0x80
 80012fa:	210d      	movs	r1, #13
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff fd73 	bl	8000de8 <rfm95_write>
 8001302:	4603      	mov	r3, r0
 8001304:	f083 0301 	eor.w	r3, r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <rfm95_send_package+0x176>
		return false;
 800130e:	2300      	movs	r3, #0
 8001310:	e058      	b.n	80013c4 <rfm95_send_package+0x228>

	// Write payload to FIFO.
	for (size_t i = 0; i < length; i++) {
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	e00b      	b.n	8001330 <rfm95_send_package+0x194>
		rfm95_write(handle, RFM95_REGISTER_FIFO_ACCESS, data[i]);
 8001318:	68ba      	ldr	r2, [r7, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	461a      	mov	r2, r3
 8001322:	2100      	movs	r1, #0
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff fd5f 	bl	8000de8 <rfm95_write>
	for (size_t i = 0; i < length; i++) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3ef      	bcc.n	8001318 <rfm95_send_package+0x17c>
	}

	if (!rfm95_write(handle, RFM95_REGISTER_DIO_MAPPING_1,
 8001338:	2240      	movs	r2, #64	; 0x40
 800133a:	2140      	movs	r1, #64	; 0x40
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff fd53 	bl	8000de8 <rfm95_write>
 8001342:	4603      	mov	r3, r0
 8001344:	f083 0301 	eor.w	r3, r3, #1
 8001348:	b2db      	uxtb	r3, r3
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <rfm95_send_package+0x1b6>
	RFM95_REGISTER_DIO_MAPPING_1_IRQ_TXDONE))
		return false;
 800134e:	2300      	movs	r3, #0
 8001350:	e038      	b.n	80013c4 <rfm95_send_package+0x228>
	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001352:	2283      	movs	r2, #131	; 0x83
 8001354:	2101      	movs	r1, #1
 8001356:	68f8      	ldr	r0, [r7, #12]
 8001358:	f7ff fd46 	bl	8000de8 <rfm95_write>
 800135c:	4603      	mov	r3, r0
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <rfm95_send_package+0x1d0>
	RFM95_REGISTER_OP_MODE_LORA_TX))
		return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e02b      	b.n	80013c4 <rfm95_send_package+0x228>

	tick_start = HAL_GetTick();
 800136c:	f001 fa6a 	bl	8002844 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8001372:	e00e      	b.n	8001392 <rfm95_send_package+0x1f6>
		if ((HAL_GetTick() - tick_start) >= RFM95_SEND_TIMEOUT) {
 8001374:	f001 fa66 	bl	8002844 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001382:	d306      	bcc.n	8001392 <rfm95_send_package+0x1f6>
			rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 8001384:	2200      	movs	r2, #0
 8001386:	2101      	movs	r1, #1
 8001388:	68f8      	ldr	r0, [r7, #12]
 800138a:	f7ff fd2d 	bl	8000de8 <rfm95_write>
			RFM95_REGISTER_OP_MODE_SLEEP);
			return false;
 800138e:	2300      	movs	r3, #0
 8001390:	e018      	b.n	80013c4 <rfm95_send_package+0x228>
	while (HAL_GPIO_ReadPin(handle->irq_port, handle->irq_pin) == GPIO_PIN_RESET) {
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	8b1b      	ldrh	r3, [r3, #24]
 800139a:	4619      	mov	r1, r3
 800139c:	4610      	mov	r0, r2
 800139e:	f001 fd3d 	bl	8002e1c <HAL_GPIO_ReadPin>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d0e5      	beq.n	8001374 <rfm95_send_package+0x1d8>
		}
	}

	if (!rfm95_write(handle, RFM95_REGISTER_OP_MODE,
 80013a8:	2200      	movs	r2, #0
 80013aa:	2101      	movs	r1, #1
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff fd1b 	bl	8000de8 <rfm95_write>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f083 0301 	eor.w	r3, r3, #1
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <rfm95_send_package+0x226>
	RFM95_REGISTER_OP_MODE_SLEEP))
		return false;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <rfm95_send_package+0x228>

	return true;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3718      	adds	r7, #24
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	080078c4 	.word	0x080078c4
 80013d0:	08007a34 	.word	0x08007a34
 80013d4:	0800778c 	.word	0x0800778c
 80013d8:	08007a00 	.word	0x08007a00

080013dc <rfm95_send_data_groundstation>:

bool rfm95_send_data_groundstation(rfm95_handle_t *handle) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	//size_t length = LENGHT_GROUNDSTATION;
//	uint8_t ident = IDENT;
//	uint8_t rfm_data[LENGHT_GROUNDSTATION];
//	uint8_t rfm_package_length = LENGHT_GROUNDSTATION;
	unsigned long latitude = handle->latitude;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e8:	617b      	str	r3, [r7, #20]
	unsigned long longitude = handle->longitude;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ee:	613b      	str	r3, [r7, #16]
	unsigned altitude = handle->altitude;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80013f4:	60fb      	str	r3, [r7, #12]
//	for (int i = 0; i < 2; i++) {
//		rfm_data[10 - i] = ((altitude >> (i * 8)) & 0xFF);
//	}

		uint8_t rfm_data[3];
		uint8_t rfm_package_length = 3;
 80013f6:	2303      	movs	r3, #3
 80013f8:	72fb      	strb	r3, [r7, #11]
		rfm_data[0] = 0x53;
 80013fa:	2353      	movs	r3, #83	; 0x53
 80013fc:	723b      	strb	r3, [r7, #8]
		rfm_data[1] = 0x4f;
 80013fe:	234f      	movs	r3, #79	; 0x4f
 8001400:	727b      	strb	r3, [r7, #9]
		rfm_data[2] = 0x53;
 8001402:	2353      	movs	r3, #83	; 0x53
 8001404:	72bb      	strb	r3, [r7, #10]


	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 8001406:	7afa      	ldrb	r2, [r7, #11]
 8001408:	f107 0108 	add.w	r1, r7, #8
 800140c:	2300      	movs	r3, #0
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fec4 	bl	800119c <rfm95_send_package>
 8001414:	4603      	mov	r3, r0
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <rfm95_send_data_groundstation+0x48>
			0)) {
		return false;
 8001420:	2300      	movs	r3, #0
 8001422:	e000      	b.n	8001426 <rfm95_send_data_groundstation+0x4a>
	}
	return true;
 8001424:	2301      	movs	r3, #1
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <rfm95_send_data>:

bool rfm95_send_data(rfm95_handle_t *handle, const uint8_t *data, size_t length) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b09d      	sub	sp, #116	; 0x74
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
	// 64 bytes is maximum size of FIFO
	assert(length + 4 + 9 <= 64);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	330d      	adds	r3, #13
 8001440:	2b40      	cmp	r3, #64	; 0x40
 8001442:	d906      	bls.n	8001452 <rfm95_send_data+0x22>
 8001444:	4b6f      	ldr	r3, [pc, #444]	; (8001604 <rfm95_send_data+0x1d4>)
 8001446:	4a70      	ldr	r2, [pc, #448]	; (8001608 <rfm95_send_data+0x1d8>)
 8001448:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800144c:	486f      	ldr	r0, [pc, #444]	; (800160c <rfm95_send_data+0x1dc>)
 800144e:	f005 f8af 	bl	80065b0 <__assert_func>

	uint8_t direction = 0; // Up
 8001452:	2300      	movs	r3, #0
 8001454:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t frame_control = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t frame_port = 0x01;
 800145e:	2301      	movs	r3, #1
 8001460:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t mac_header = 0x40;
 8001464:	2340      	movs	r3, #64	; 0x40
 8001466:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	uint8_t rfm_data[64 + 4 + 9];
	uint8_t rfm_package_length = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t mic[4];

	rfm_data[0] = mac_header;
 8001470:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001474:	753b      	strb	r3, [r7, #20]
	rfm_data[1] = handle->device_address[3];
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800147c:	757b      	strb	r3, [r7, #21]
	rfm_data[2] = handle->device_address[2];
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001484:	75bb      	strb	r3, [r7, #22]
	rfm_data[3] = handle->device_address[1];
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800148c:	75fb      	strb	r3, [r7, #23]
	rfm_data[4] = handle->device_address[0];
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001494:	763b      	strb	r3, [r7, #24]
	rfm_data[5] = frame_control;
 8001496:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800149a:	767b      	strb	r3, [r7, #25]
	rfm_data[6] = (handle->tx_frame_count & 0x00ffu);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	76bb      	strb	r3, [r7, #26]
	rfm_data[7] = ((uint16_t) (handle->tx_frame_count >> 8u) & 0x00ffu);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	b29b      	uxth	r3, r3
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	76fb      	strb	r3, [r7, #27]
	rfm_data[8] = frame_port;
 80014b4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80014b8:	773b      	strb	r3, [r7, #28]
	rfm_package_length += 9;
 80014ba:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80014be:	3309      	adds	r3, #9
 80014c0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Copy network and application session keys as well as device address to variables of encryption library
	memcpy(NwkSkey, handle->network_session_key,
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3326      	adds	r3, #38	; 0x26
 80014c8:	4a51      	ldr	r2, [pc, #324]	; (8001610 <rfm95_send_data+0x1e0>)
 80014ca:	4614      	mov	r4, r2
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	6859      	ldr	r1, [r3, #4]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->network_session_key));
	memcpy(AppSkey, handle->application_session_key,
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	3336      	adds	r3, #54	; 0x36
 80014da:	4a4e      	ldr	r2, [pc, #312]	; (8001614 <rfm95_send_data+0x1e4>)
 80014dc:	4614      	mov	r4, r2
 80014de:	6818      	ldr	r0, [r3, #0]
 80014e0:	6859      	ldr	r1, [r3, #4]
 80014e2:	689a      	ldr	r2, [r3, #8]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			sizeof(handle->application_session_key));
	memcpy(DevAddr, handle->device_address, sizeof(handle->device_address));
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3322      	adds	r3, #34	; 0x22
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b49      	ldr	r3, [pc, #292]	; (8001618 <rfm95_send_data+0x1e8>)
 80014f2:	601a      	str	r2, [r3, #0]

	// Encrypt payload in place in package.
	memcpy(rfm_data + rfm_package_length, data, length);
 80014f4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80014f8:	f107 0214 	add.w	r2, r7, #20
 80014fc:	4413      	add	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	4618      	mov	r0, r3
 8001504:	f005 f8ae 	bl	8006664 <memcpy>
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 8001508:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800150c:	f107 0214 	add.w	r2, r7, #20
 8001510:	18d0      	adds	r0, r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b2d9      	uxtb	r1, r3
			handle->tx_frame_count, direction);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
	Encrypt_Payload(rfm_data + rfm_package_length, length,
 800151c:	461a      	mov	r2, r3
 800151e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001522:	f7ff f945 	bl	80007b0 <Encrypt_Payload>
	rfm_package_length += length;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	b2da      	uxtb	r2, r3
 800152a:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800152e:	4413      	add	r3, r2
 8001530:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	// Calculate MIC and copy to last 4 bytes of the package.
	Calculate_MIC(rfm_data, mic, rfm_package_length, handle->tx_frame_count,
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800153a:	461c      	mov	r4, r3
 800153c:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8001540:	f107 0110 	add.w	r1, r7, #16
 8001544:	f107 0014 	add.w	r0, r7, #20
 8001548:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	4623      	mov	r3, r4
 8001550:	f7ff f9e6 	bl	8000920 <Calculate_MIC>
			direction);
	for (uint8_t i = 0; i < 4; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800155a:	e013      	b.n	8001584 <rfm95_send_data+0x154>
		rfm_data[rfm_package_length + i] = mic[i];
 800155c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8001560:	f897 1062 	ldrb.w	r1, [r7, #98]	; 0x62
 8001564:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001568:	440b      	add	r3, r1
 800156a:	3268      	adds	r2, #104	; 0x68
 800156c:	443a      	add	r2, r7
 800156e:	f812 2c58 	ldrb.w	r2, [r2, #-88]
 8001572:	3368      	adds	r3, #104	; 0x68
 8001574:	443b      	add	r3, r7
 8001576:	f803 2c54 	strb.w	r2, [r3, #-84]
	for (uint8_t i = 0; i < 4; i++) {
 800157a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800157e:	3301      	adds	r3, #1
 8001580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001584:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001588:	2b03      	cmp	r3, #3
 800158a:	d9e7      	bls.n	800155c <rfm95_send_data+0x12c>
	}
	rfm_package_length += 4;
 800158c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001590:	3304      	adds	r3, #4
 8001592:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

	uint8_t pseudorandom_channel = rfm_data[rfm_package_length - 1] & 0x7u;
 8001596:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800159a:	3b01      	subs	r3, #1
 800159c:	3368      	adds	r3, #104	; 0x68
 800159e:	443b      	add	r3, r7
 80015a0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	if (!rfm95_send_package(handle, rfm_data, rfm_package_length,
 80015ac:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80015b0:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80015b4:	f107 0114 	add.w	r1, r7, #20
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fdef 	bl	800119c <rfm95_send_package>
 80015be:	4603      	mov	r3, r0
 80015c0:	f083 0301 	eor.w	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <rfm95_send_data+0x19e>
			pseudorandom_channel)) {
		return false;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e016      	b.n	80015fc <rfm95_send_data+0x1cc>
	}

	handle->tx_frame_count++;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
	if (handle->save_frame_counter != NULL) {
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d009      	beq.n	80015fa <rfm95_send_data+0x1ca>
		handle->save_frame_counter(handle->tx_frame_count,
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	f8b2 0052 	ldrh.w	r0, [r2, #82]	; 0x52
 80015f0:	68fa      	ldr	r2, [r7, #12]
 80015f2:	f8b2 2050 	ldrh.w	r2, [r2, #80]	; 0x50
 80015f6:	4611      	mov	r1, r2
 80015f8:	4798      	blx	r3
				handle->rx_frame_count);
	}
	return true;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	376c      	adds	r7, #108	; 0x6c
 8001600:	46bd      	mov	sp, r7
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	080078d0 	.word	0x080078d0
 8001608:	08007a48 	.word	0x08007a48
 800160c:	0800778c 	.word	0x0800778c
 8001610:	20000208 	.word	0x20000208
 8001614:	20000218 	.word	0x20000218
 8001618:	20000228 	.word	0x20000228

0800161c <FlowInit>:
		.network_session_key = { 0x0C, 0x78, 0xCE, 0x6F, 0xC4, 0x15, 0x29, 0x37, 0x2A, 0xE6, 0x52, 0x8B, 0x7E, 0x6F, 0xC6, 0x45 },
		.reload_frame_counter = NULL, .save_frame_counter = NULL, .longitude =
				8220250, .longitude_or = { 'E' }, .latitude = 47478520,
		.latitude_or[0] = { 'N' }, .altitude = 2461, .indent = 0 };

FlowInit() {
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
	// Initialise RFM95 module.
	if (!rfm95_init(&rfm95_handle)) {
 8001620:	4808      	ldr	r0, [pc, #32]	; (8001644 <FlowInit+0x28>)
 8001622:	f7ff fc31 	bl	8000e88 <rfm95_init>
 8001626:	4603      	mov	r3, r0
 8001628:	f083 0301 	eor.w	r3, r3, #1
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <FlowInit+0x1e>
		printf("RFM95 init failed\n\r");
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <FlowInit+0x2c>)
 8001634:	f005 fb1a 	bl	8006c6c <iprintf>
	}else {
		printf("RFM95 init sucess\n\r");
	}
}
 8001638:	e002      	b.n	8001640 <FlowInit+0x24>
		printf("RFM95 init sucess\n\r");
 800163a:	4804      	ldr	r0, [pc, #16]	; (800164c <FlowInit+0x30>)
 800163c:	f005 fb16 	bl	8006c6c <iprintf>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	20000100 	.word	0x20000100
 8001648:	080078e8 	.word	0x080078e8
 800164c:	080078fc 	.word	0x080078fc

08001650 <Flow>:

Flow() {
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
	static uint8_t loraCounter;
	uint8_t data_packet[] = { 0x01, 0x02, 0x03, 0x4 };
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <Flow+0x64>)
 8001658:	607b      	str	r3, [r7, #4]
	uint8_t data_packet_ground[3];

//	if (loraCounter == LORAINTERVALL) {
		if (!rfm95_send_data(&rfm95_handle, data_packet, sizeof(data_packet))) {
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2204      	movs	r2, #4
 800165e:	4619      	mov	r1, r3
 8001660:	4815      	ldr	r0, [pc, #84]	; (80016b8 <Flow+0x68>)
 8001662:	f7ff fee5 	bl	8001430 <rfm95_send_data>
 8001666:	4603      	mov	r3, r0
 8001668:	f083 0301 	eor.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <Flow+0x2a>
			printf("RFM95 send failed\n\r");
 8001672:	4812      	ldr	r0, [pc, #72]	; (80016bc <Flow+0x6c>)
 8001674:	f005 fafa 	bl	8006c6c <iprintf>
 8001678:	e012      	b.n	80016a0 <Flow+0x50>
		} else {
			printf("RFM95 send success\n\r");
 800167a:	4811      	ldr	r0, [pc, #68]	; (80016c0 <Flow+0x70>)
 800167c:	f005 faf6 	bl	8006c6c <iprintf>

			if (!rfm95_send_data_groundstation(&rfm95_handle)) {
 8001680:	480d      	ldr	r0, [pc, #52]	; (80016b8 <Flow+0x68>)
 8001682:	f7ff feab 	bl	80013dc <rfm95_send_data_groundstation>
 8001686:	4603      	mov	r3, r0
 8001688:	f083 0301 	eor.w	r3, r3, #1
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <Flow+0x4a>
				printf("RFM95 send failed\n\r");
 8001692:	480a      	ldr	r0, [pc, #40]	; (80016bc <Flow+0x6c>)
 8001694:	f005 faea 	bl	8006c6c <iprintf>
 8001698:	e002      	b.n	80016a0 <Flow+0x50>
			} else {
				printf("RFM95 send success\n\r");
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <Flow+0x70>)
 800169c:	f005 fae6 	bl	8006c6c <iprintf>
			}
		}

//	}

	loraCounter++;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <Flow+0x74>)
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	3301      	adds	r3, #1
 80016a6:	b2da      	uxtb	r2, r3
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <Flow+0x74>)
 80016aa:	701a      	strb	r2, [r3, #0]
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	04030201 	.word	0x04030201
 80016b8:	20000100 	.word	0x20000100
 80016bc:	08007910 	.word	0x08007910
 80016c0:	08007924 	.word	0x08007924
 80016c4:	2000022c 	.word	0x2000022c

080016c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016cc:	f001 f851 	bl	8002772 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016d0:	f000 f830 	bl	8001734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016d4:	f000 f918 	bl	8001908 <MX_GPIO_Init>
  MX_SPI2_Init();
 80016d8:	f000 f8b0 	bl	800183c <MX_SPI2_Init>
  MX_TIM16_Init();
 80016dc:	f000 f8ec 	bl	80018b8 <MX_TIM16_Init>
  MX_I2C1_Init();
 80016e0:	f000 f86e 	bl	80017c0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  FlowInit();
 80016e4:	f7ff ff9a 	bl	800161c <FlowInit>


  errIni = PCA9847_Initialise(&multiplexer, &hi2c1);
 80016e8:	490e      	ldr	r1, [pc, #56]	; (8001724 <main+0x5c>)
 80016ea:	480f      	ldr	r0, [pc, #60]	; (8001728 <main+0x60>)
 80016ec:	f000 ffc4 	bl	8002678 <PCA9847_Initialise>
 80016f0:	4603      	mov	r3, r0
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b0d      	ldr	r3, [pc, #52]	; (800172c <main+0x64>)
 80016f6:	701a      	strb	r2, [r3, #0]
  PCA9847_SetChannel(&multiplexer, 3);
 80016f8:	2103      	movs	r1, #3
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <main+0x60>)
 80016fc:	f000 ffe0 	bl	80026c0 <PCA9847_SetChannel>
	AS7341_Init(eSpm);
 8001700:	2000      	movs	r0, #0
 8001702:	f000 fcf5 	bl	80020f0 <AS7341_Init>
	AS7341_ATIME_config(100);
 8001706:	2064      	movs	r0, #100	; 0x64
 8001708:	f000 ff59 	bl	80025be <AS7341_ATIME_config>
	AS7341_ASTEP_config(999);
 800170c:	f240 30e7 	movw	r0, #999	; 0x3e7
 8001710:	f000 ff63 	bl	80025da <AS7341_ASTEP_config>
	AS7341_AGAIN_config(6);
 8001714:	2006      	movs	r0, #6
 8001716:	f000 ff79 	bl	800260c <AS7341_AGAIN_config>


	HAL_TIM_Base_Start_IT(&htim16);
 800171a:	4805      	ldr	r0, [pc, #20]	; (8001730 <main+0x68>)
 800171c:	f004 fcd8 	bl	80060d0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001720:	e7fe      	b.n	8001720 <main+0x58>
 8001722:	bf00      	nop
 8001724:	20000230 	.word	0x20000230
 8001728:	20000334 	.word	0x20000334
 800172c:	20000338 	.word	0x20000338
 8001730:	200002e8 	.word	0x200002e8

08001734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b096      	sub	sp, #88	; 0x58
 8001738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	2244      	movs	r2, #68	; 0x44
 8001740:	2100      	movs	r1, #0
 8001742:	4618      	mov	r0, r3
 8001744:	f004 ff9c 	bl	8006680 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001748:	463b      	mov	r3, r7
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
 8001754:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001756:	f44f 7000 	mov.w	r0, #512	; 0x200
 800175a:	f002 faa7 	bl	8003cac <HAL_PWREx_ControlVoltageScaling>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001764:	f000 fa1e 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001768:	2310      	movs	r3, #16
 800176a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001778:	2300      	movs	r3, #0
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177c:	f107 0314 	add.w	r3, r7, #20
 8001780:	4618      	mov	r0, r3
 8001782:	f002 fae9 	bl	8003d58 <HAL_RCC_OscConfig>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800178c:	f000 fa0a 	bl	8001ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001790:	230f      	movs	r3, #15
 8001792:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001794:	2300      	movs	r3, #0
 8001796:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800179c:	2300      	movs	r3, #0
 800179e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017a4:	463b      	mov	r3, r7
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 feb1 	bl	8004510 <HAL_RCC_ClockConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017b4:	f000 f9f6 	bl	8001ba4 <Error_Handler>
  }
}
 80017b8:	bf00      	nop
 80017ba:	3758      	adds	r7, #88	; 0x58
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017c4:	4b1b      	ldr	r3, [pc, #108]	; (8001834 <MX_I2C1_Init+0x74>)
 80017c6:	4a1c      	ldr	r2, [pc, #112]	; (8001838 <MX_I2C1_Init+0x78>)
 80017c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	; (8001834 <MX_I2C1_Init+0x74>)
 80017cc:	f640 6214 	movw	r2, #3604	; 0xe14
 80017d0:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80017d2:	4b18      	ldr	r3, [pc, #96]	; (8001834 <MX_I2C1_Init+0x74>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b16      	ldr	r3, [pc, #88]	; (8001834 <MX_I2C1_Init+0x74>)
 80017da:	2201      	movs	r2, #1
 80017dc:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <MX_I2C1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80017e4:	4b13      	ldr	r3, [pc, #76]	; (8001834 <MX_I2C1_Init+0x74>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <MX_I2C1_Init+0x74>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017f0:	4b10      	ldr	r3, [pc, #64]	; (8001834 <MX_I2C1_Init+0x74>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <MX_I2C1_Init+0x74>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017fc:	480d      	ldr	r0, [pc, #52]	; (8001834 <MX_I2C1_Init+0x74>)
 80017fe:	f001 fb57 	bl	8002eb0 <HAL_I2C_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001808:	f000 f9cc 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800180c:	2100      	movs	r1, #0
 800180e:	4809      	ldr	r0, [pc, #36]	; (8001834 <MX_I2C1_Init+0x74>)
 8001810:	f002 f9a6 	bl	8003b60 <HAL_I2CEx_ConfigAnalogFilter>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800181a:	f000 f9c3 	bl	8001ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800181e:	2100      	movs	r1, #0
 8001820:	4804      	ldr	r0, [pc, #16]	; (8001834 <MX_I2C1_Init+0x74>)
 8001822:	f002 f9e8 	bl	8003bf6 <HAL_I2CEx_ConfigDigitalFilter>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800182c:	f000 f9ba 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000230 	.word	0x20000230
 8001838:	40005400 	.word	0x40005400

0800183c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001842:	4a1c      	ldr	r2, [pc, #112]	; (80018b4 <MX_SPI2_Init+0x78>)
 8001844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800184c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001850:	2200      	movs	r2, #0
 8001852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001856:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800185a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800185c:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <MX_SPI2_Init+0x74>)
 800185e:	2200      	movs	r2, #0
 8001860:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001862:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001864:	2200      	movs	r2, #0
 8001866:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <MX_SPI2_Init+0x74>)
 800186a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800186e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001872:	2238      	movs	r2, #56	; 0x38
 8001874:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <MX_SPI2_Init+0x74>)
 800187e:	2200      	movs	r2, #0
 8001880:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <MX_SPI2_Init+0x74>)
 800188a:	2207      	movs	r2, #7
 800188c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001890:	2200      	movs	r2, #0
 8001892:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001894:	4b06      	ldr	r3, [pc, #24]	; (80018b0 <MX_SPI2_Init+0x74>)
 8001896:	2208      	movs	r2, #8
 8001898:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800189a:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_SPI2_Init+0x74>)
 800189c:	f003 fcb0 	bl	8005200 <HAL_SPI_Init>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80018a6:	f000 f97d 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000284 	.word	0x20000284
 80018b4:	40003800 	.word	0x40003800

080018b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018bc:	4b10      	ldr	r3, [pc, #64]	; (8001900 <MX_TIM16_Init+0x48>)
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <MX_TIM16_Init+0x4c>)
 80018c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 5000;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <MX_TIM16_Init+0x48>)
 80018c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <MX_TIM16_Init+0x48>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 4000;
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <MX_TIM16_Init+0x48>)
 80018d2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80018d6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <MX_TIM16_Init+0x48>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80018de:	4b08      	ldr	r3, [pc, #32]	; (8001900 <MX_TIM16_Init+0x48>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <MX_TIM16_Init+0x48>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80018ea:	4805      	ldr	r0, [pc, #20]	; (8001900 <MX_TIM16_Init+0x48>)
 80018ec:	f004 fb98 	bl	8006020 <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80018f6:	f000 f955 	bl	8001ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002e8 	.word	0x200002e8
 8001904:	40014400 	.word	0x40014400

08001908 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191e:	4b86      	ldr	r3, [pc, #536]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001922:	4a85      	ldr	r2, [pc, #532]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192a:	4b83      	ldr	r3, [pc, #524]	; (8001b38 <MX_GPIO_Init+0x230>)
 800192c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193a:	4a7f      	ldr	r2, [pc, #508]	; (8001b38 <MX_GPIO_Init+0x230>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001942:	4b7d      	ldr	r3, [pc, #500]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194e:	4b7a      	ldr	r3, [pc, #488]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001952:	4a79      	ldr	r2, [pc, #484]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195a:	4b77      	ldr	r3, [pc, #476]	; (8001b38 <MX_GPIO_Init+0x230>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60bb      	str	r3, [r7, #8]
 8001964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001966:	4b74      	ldr	r3, [pc, #464]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a73      	ldr	r2, [pc, #460]	; (8001b38 <MX_GPIO_Init+0x230>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001972:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <MX_GPIO_Init+0x230>)
 8001974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	607b      	str	r3, [r7, #4]
 800197c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPS_GPIO_Port, RESET_GPS_Pin, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	2108      	movs	r1, #8
 8001982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001986:	f001 fa61 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SD_LC_Pin|POWER_SW_Pin|SS1_Pin|SS2_Pin, GPIO_PIN_RESET);
 800198a:	2200      	movs	r2, #0
 800198c:	f241 4130 	movw	r1, #5168	; 0x1430
 8001990:	486a      	ldr	r0, [pc, #424]	; (8001b3c <MX_GPIO_Init+0x234>)
 8001992:	f001 fa5b 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LoRa_LC2_GPIO_Port, LoRa_LC2_Pin, GPIO_PIN_SET);
 8001996:	2201      	movs	r2, #1
 8001998:	2104      	movs	r1, #4
 800199a:	4869      	ldr	r0, [pc, #420]	; (8001b40 <MX_GPIO_Init+0x238>)
 800199c:	f001 fa56 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, READY_LED_Pin|STATUS_LED_Pin|LORA_NSS_Pin|SS4_Pin, GPIO_PIN_RESET);
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
 80019a6:	4866      	ldr	r0, [pc, #408]	; (8001b40 <MX_GPIO_Init+0x238>)
 80019a8:	f001 fa50 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LORA_LC3_Pin|LORA_LC1_Pin|RESET_n_MUX_Pin, GPIO_PIN_SET);
 80019ac:	2201      	movs	r2, #1
 80019ae:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80019b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b6:	f001 fa49 	bl	8002e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_3V3_Pin ADC_BATTERIE_Pin */
  GPIO_InitStruct.Pin = ADC_3V3_Pin|ADC_BATTERIE_Pin;
 80019ba:	2303      	movs	r3, #3
 80019bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80019be:	230b      	movs	r3, #11
 80019c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	485b      	ldr	r0, [pc, #364]	; (8001b3c <MX_GPIO_Init+0x234>)
 80019ce:	f001 f87b 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPS_LC_Pin LORA_DIO0_Pin LORA_DIO1_Pin LORA_DIO2_Pin
                           LORA_DIO3_Pin INT_SS1_Pin */
  GPIO_InitStruct.Pin = GPS_LC_Pin|LORA_DIO0_Pin|LORA_DIO1_Pin|LORA_DIO2_Pin
 80019d2:	f640 33c8 	movw	r3, #3016	; 0xbc8
 80019d6:	617b      	str	r3, [r7, #20]
                          |LORA_DIO3_Pin|INT_SS1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	4619      	mov	r1, r3
 80019e6:	4855      	ldr	r0, [pc, #340]	; (8001b3c <MX_GPIO_Init+0x234>)
 80019e8:	f001 f86e 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80019ec:	2303      	movs	r3, #3
 80019ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80019fc:	2308      	movs	r3, #8
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a0a:	f001 f85d 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_GPS_Pin LORA_DIO4_Pin LORA_DIO5_Pin Reset_LoRa_Pin */
  GPIO_InitStruct.Pin = INT_GPS_Pin|LORA_DIO4_Pin|LORA_DIO5_Pin|Reset_LoRa_Pin;
 8001a0e:	f240 7304 	movw	r3, #1796	; 0x704
 8001a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a14:	2300      	movs	r3, #0
 8001a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f001 f84f 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_GPS_Pin RESET_n_MUX_Pin */
  GPIO_InitStruct.Pin = RESET_GPS_Pin|RESET_n_MUX_Pin;
 8001a2a:	f248 0308 	movw	r3, #32776	; 0x8008
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f001 f83f 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a4a:	23f0      	movs	r3, #240	; 0xf0
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a5a:	2305      	movs	r3, #5
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a68:	f001 f82e 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_LC_Pin POWER_SW_Pin SS1_Pin SS2_Pin */
  GPIO_InitStruct.Pin = SD_LC_Pin|POWER_SW_Pin|SS1_Pin|SS2_Pin;
 8001a6c:	f241 4330 	movw	r3, #5168	; 0x1430
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	482d      	ldr	r0, [pc, #180]	; (8001b3c <MX_GPIO_Init+0x234>)
 8001a86:	f001 f81f 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_AS_Pin INT2_AS_Pin INT_SS3_Pin INT_SS4_Pin */
  GPIO_InitStruct.Pin = INT1_AS_Pin|INT2_AS_Pin|INT_SS3_Pin|INT_SS4_Pin;
 8001a8a:	23a3      	movs	r3, #163	; 0xa3
 8001a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	f107 0314 	add.w	r3, r7, #20
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4828      	ldr	r0, [pc, #160]	; (8001b40 <MX_GPIO_Init+0x238>)
 8001a9e:	f001 f813 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LoRa_LC2_Pin */
  GPIO_InitStruct.Pin = LoRa_LC2_Pin;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aa6:	2311      	movs	r3, #17
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LoRa_LC2_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4821      	ldr	r0, [pc, #132]	; (8001b40 <MX_GPIO_Init+0x238>)
 8001aba:	f001 f805 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : READY_LED_Pin STATUS_LED_Pin LORA_NSS_Pin SS4_Pin */
  GPIO_InitStruct.Pin = READY_LED_Pin|STATUS_LED_Pin|LORA_NSS_Pin|SS4_Pin;
 8001abe:	f44f 53e2 	mov.w	r3, #7232	; 0x1c40
 8001ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	481a      	ldr	r0, [pc, #104]	; (8001b40 <MX_GPIO_Init+0x238>)
 8001ad8:	f000 fff6 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LORA_LC3_Pin LORA_LC1_Pin */
  GPIO_InitStruct.Pin = LORA_LC3_Pin|LORA_LC1_Pin;
 8001adc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ae0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001ae2:	2311      	movs	r3, #17
 8001ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f000 ffe6 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_SS2_Pin */
  GPIO_InitStruct.Pin = INT_SS2_Pin;
 8001afc:	2304      	movs	r3, #4
 8001afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_SS2_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	480d      	ldr	r0, [pc, #52]	; (8001b44 <MX_GPIO_Init+0x23c>)
 8001b10:	f000 ffda 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SS3_Pin */
  GPIO_InitStruct.Pin = SS3_Pin;
 8001b14:	2310      	movs	r3, #16
 8001b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SS3_GPIO_Port, &GPIO_InitStruct);
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_GPIO_Init+0x238>)
 8001b2a:	f000 ffcd 	bl	8002ac8 <HAL_GPIO_Init>

}
 8001b2e:	bf00      	nop
 8001b30:	3728      	adds	r7, #40	; 0x28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	48000800 	.word	0x48000800
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000c00 	.word	0x48000c00

08001b48 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b088      	sub	sp, #32
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	if (htim == &htim16) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a11      	ldr	r2, [pc, #68]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d11a      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x46>
	    HAL_GPIO_TogglePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin);
 8001b58:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b5c:	480f      	ldr	r0, [pc, #60]	; (8001b9c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001b5e:	f001 f98d 	bl	8002e7c <HAL_GPIO_TogglePin>
	    Flow();
 8001b62:	f7ff fd75 	bl	8001650 <Flow>

	    PCA9847_SetChannel(&multiplexer, 3);
 8001b66:	2103      	movs	r1, #3
 8001b68:	480d      	ldr	r0, [pc, #52]	; (8001ba0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001b6a:	f000 fda9 	bl	80026c0 <PCA9847_SetChannel>
		sModeOneData_t data1;
		sModeTwoData_t data2;
		AS7341_startMeasure(eF1F4ClearNIR);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 fc18 	bl	80023a4 <AS7341_startMeasure>
		data1 = AS7341_ReadSpectralDataOne();
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f000 fca3 	bl	80024c4 <AS7341_ReadSpectralDataOne>
		AS7341_startMeasure(eF5F8ClearNIR);
 8001b7e:	2001      	movs	r0, #1
 8001b80:	f000 fc10 	bl	80023a4 <AS7341_startMeasure>
		data2 = AS7341_ReadSpectralDataTwo();
 8001b84:	f107 0308 	add.w	r3, r7, #8
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 fcc9 	bl	8002520 <AS7341_ReadSpectralDataTwo>

	}

}
 8001b8e:	bf00      	nop
 8001b90:	3720      	adds	r7, #32
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200002e8 	.word	0x200002e8
 8001b9c:	48000400 	.word	0x48000400
 8001ba0:	20000334 	.word	0x20000334

08001ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba8:	b672      	cpsid	i
}
 8001baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bac:	e7fe      	b.n	8001bac <Error_Handler+0x8>
	...

08001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb6:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bba:	4a0e      	ldr	r2, [pc, #56]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b09      	ldr	r3, [pc, #36]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_MspInit+0x44>)
 8001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40021000 	.word	0x40021000

08001bf8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b0aa      	sub	sp, #168	; 0xa8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c00:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c10:	f107 0310 	add.w	r3, r7, #16
 8001c14:	2284      	movs	r2, #132	; 0x84
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f004 fd31 	bl	8006680 <memset>
  if(hi2c->Instance==I2C1)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a21      	ldr	r2, [pc, #132]	; (8001ca8 <HAL_I2C_MspInit+0xb0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d13b      	bne.n	8001ca0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c28:	2340      	movs	r3, #64	; 0x40
 8001c2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4618      	mov	r0, r3
 8001c36:	f002 fe57 	bl	80048e8 <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c40:	f7ff ffb0 	bl	8001ba4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	4a18      	ldr	r2, [pc, #96]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c4a:	f043 0302 	orr.w	r3, r3, #2
 8001c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c60:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c64:	2312      	movs	r3, #18
 8001c66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c70:	2303      	movs	r3, #3
 8001c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c76:	2304      	movs	r3, #4
 8001c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c80:	4619      	mov	r1, r3
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <HAL_I2C_MspInit+0xb8>)
 8001c84:	f000 ff20 	bl	8002ac8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c88:	4b08      	ldr	r3, [pc, #32]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	4a07      	ldr	r2, [pc, #28]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c92:	6593      	str	r3, [r2, #88]	; 0x58
 8001c94:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_I2C_MspInit+0xb4>)
 8001c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	60bb      	str	r3, [r7, #8]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	37a8      	adds	r7, #168	; 0xa8
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40005400 	.word	0x40005400
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	48000400 	.word	0x48000400

08001cb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08a      	sub	sp, #40	; 0x28
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cbc:	f107 0314 	add.w	r3, r7, #20
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a17      	ldr	r2, [pc, #92]	; (8001d30 <HAL_SPI_MspInit+0x7c>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d128      	bne.n	8001d28 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ce0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cf4:	f043 0302 	orr.w	r3, r3, #2
 8001cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_SPI_MspInit+0x80>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = LORA_SCK_Pin|LORA_MISO_Pin|LORA_MOSI_Pin;
 8001d06:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d10:	2300      	movs	r3, #0
 8001d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d14:	2303      	movs	r3, #3
 8001d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d18:	2305      	movs	r3, #5
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <HAL_SPI_MspInit+0x84>)
 8001d24:	f000 fed0 	bl	8002ac8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001d28:	bf00      	nop
 8001d2a:	3728      	adds	r7, #40	; 0x28
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40003800 	.word	0x40003800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	48000400 	.word	0x48000400

08001d3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a0d      	ldr	r2, [pc, #52]	; (8001d80 <HAL_TIM_Base_MspInit+0x44>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d113      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001d4e:	4b0d      	ldr	r3, [pc, #52]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d52:	4a0c      	ldr	r2, [pc, #48]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d58:	6613      	str	r3, [r2, #96]	; 0x60
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_Base_MspInit+0x48>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2019      	movs	r0, #25
 8001d6c:	f000 fe75 	bl	8002a5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d70:	2019      	movs	r0, #25
 8001d72:	f000 fe8e 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40014400 	.word	0x40014400
 8001d84:	40021000 	.word	0x40021000

08001d88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <NMI_Handler+0x4>

08001d8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <HardFault_Handler+0x4>

08001d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <MemManage_Handler+0x4>

08001d9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9e:	e7fe      	b.n	8001d9e <BusFault_Handler+0x4>

08001da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da4:	e7fe      	b.n	8001da4 <UsageFault_Handler+0x4>

08001da6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da6:	b480      	push	{r7}
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001daa:	bf00      	nop
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db8:	bf00      	nop
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd4:	f000 fd22 	bl	800281c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001de2:	f004 f9e5 	bl	80061b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200002e8 	.word	0x200002e8

08001df0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
	return 1;
 8001df4:	2301      	movs	r3, #1
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr

08001e00 <_kill>:

int _kill(int pid, int sig)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e0a:	f004 fbef 	bl	80065ec <__errno>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2216      	movs	r2, #22
 8001e12:	601a      	str	r2, [r3, #0]
	return -1;
 8001e14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <_exit>:

void _exit (int status)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f7ff ffe7 	bl	8001e00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e32:	e7fe      	b.n	8001e32 <_exit+0x12>

08001e34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
 8001e44:	e00a      	b.n	8001e5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e46:	f3af 8000 	nop.w
 8001e4a:	4601      	mov	r1, r0
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	60ba      	str	r2, [r7, #8]
 8001e52:	b2ca      	uxtb	r2, r1
 8001e54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf0      	blt.n	8001e46 <_read+0x12>
	}

return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b086      	sub	sp, #24
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	60f8      	str	r0, [r7, #12]
 8001e76:	60b9      	str	r1, [r7, #8]
 8001e78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e009      	b.n	8001e94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	3301      	adds	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697a      	ldr	r2, [r7, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	dbf1      	blt.n	8001e80 <_write+0x12>
	}
	return len;
 8001e9c:	687b      	ldr	r3, [r7, #4]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_close>:

int _close(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr

08001ebe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
 8001ec6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ece:	605a      	str	r2, [r3, #4]
	return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <_isatty>:

int _isatty(int file)
{
 8001ede:	b480      	push	{r7}
 8001ee0:	b083      	sub	sp, #12
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
	return 0;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3714      	adds	r7, #20
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
	...

08001f10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f18:	4a14      	ldr	r2, [pc, #80]	; (8001f6c <_sbrk+0x5c>)
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <_sbrk+0x60>)
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f24:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <_sbrk+0x64>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d102      	bne.n	8001f32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <_sbrk+0x64>)
 8001f2e:	4a12      	ldr	r2, [pc, #72]	; (8001f78 <_sbrk+0x68>)
 8001f30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f32:	4b10      	ldr	r3, [pc, #64]	; (8001f74 <_sbrk+0x64>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d207      	bcs.n	8001f50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f40:	f004 fb54 	bl	80065ec <__errno>
 8001f44:	4603      	mov	r3, r0
 8001f46:	220c      	movs	r2, #12
 8001f48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	e009      	b.n	8001f64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <_sbrk+0x64>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f56:	4b07      	ldr	r3, [pc, #28]	; (8001f74 <_sbrk+0x64>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <_sbrk+0x64>)
 8001f60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f62:	68fb      	ldr	r3, [r7, #12]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	20018000 	.word	0x20018000
 8001f70:	00000400 	.word	0x00000400
 8001f74:	2000033c 	.word	0x2000033c
 8001f78:	20000358 	.word	0x20000358

08001f7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <SystemInit+0x20>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <SystemInit+0x20>)
 8001f88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fa4:	f7ff ffea 	bl	8001f7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fa8:	480c      	ldr	r0, [pc, #48]	; (8001fdc <LoopForever+0x6>)
  ldr r1, =_edata
 8001faa:	490d      	ldr	r1, [pc, #52]	; (8001fe0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <LoopForever+0xe>)
  movs r3, #0
 8001fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fb0:	e002      	b.n	8001fb8 <LoopCopyDataInit>

08001fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fb6:	3304      	adds	r3, #4

08001fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fbc:	d3f9      	bcc.n	8001fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fbe:	4a0a      	ldr	r2, [pc, #40]	; (8001fe8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fc0:	4c0a      	ldr	r4, [pc, #40]	; (8001fec <LoopForever+0x16>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fc4:	e001      	b.n	8001fca <LoopFillZerobss>

08001fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc8:	3204      	adds	r2, #4

08001fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fcc:	d3fb      	bcc.n	8001fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fce:	f004 fb25 	bl	800661c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fd2:	f7ff fb79 	bl	80016c8 <main>

08001fd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fd6:	e7fe      	b.n	8001fd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fe0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fe4:	08007b74 	.word	0x08007b74
  ldr r2, =_sbss
 8001fe8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fec:	20000358 	.word	0x20000358

08001ff0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ff0:	e7fe      	b.n	8001ff0 <ADC1_2_IRQHandler>
	...

08001ff4 <DEV_I2C_Init>:
function:	I2C Function initialization and transfer
parameter:
Info:
******************************************************************************/
void DEV_I2C_Init(uint8_t Add)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	DEV_I2C_Device = 1;
 8001ffe:	4b06      	ldr	r3, [pc, #24]	; (8002018 <DEV_I2C_Init+0x24>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
	I2C_ADDR =  Add;
 8002004:	4a05      	ldr	r2, [pc, #20]	; (800201c <DEV_I2C_Init+0x28>)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	7013      	strb	r3, [r2, #0]
#endif
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	20000340 	.word	0x20000340
 800201c:	20000341 	.word	0x20000341

08002020 <I2C_Write_Byte>:

void I2C_Write_Byte(uint8_t Cmd, uint8_t value)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b088      	sub	sp, #32
 8002024:	af04      	add	r7, sp, #16
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
#if DEV_I2C 
	UBYTE Buf[1] = {0};
 8002030:	2300      	movs	r3, #0
 8002032:	733b      	strb	r3, [r7, #12]
	Buf[0] = value;
 8002034:	79bb      	ldrb	r3, [r7, #6]
 8002036:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, I2C_ADDR, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <I2C_Write_Byte+0x40>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	b299      	uxth	r1, r3
 800203e:	79fb      	ldrb	r3, [r7, #7]
 8002040:	b29a      	uxth	r2, r3
 8002042:	2320      	movs	r3, #32
 8002044:	9302      	str	r3, [sp, #8]
 8002046:	2301      	movs	r3, #1
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	f107 030c 	add.w	r3, r7, #12
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	2301      	movs	r3, #1
 8002052:	4804      	ldr	r0, [pc, #16]	; (8002064 <I2C_Write_Byte+0x44>)
 8002054:	f001 f8b0 	bl	80031b8 <HAL_I2C_Mem_Write>
#endif
}
 8002058:	bf00      	nop
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	20000341 	.word	0x20000341
 8002064:	20000230 	.word	0x20000230

08002068 <I2C_Read_Byte>:

int I2C_Read_Byte(uint8_t Cmd)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af04      	add	r7, sp, #16
 800206e:	4603      	mov	r3, r0
 8002070:	71fb      	strb	r3, [r7, #7]
#if DEV_I2C 
	UBYTE Buf[1]={0};
 8002072:	2300      	movs	r3, #0
 8002074:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_ADDR+1, Cmd, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x20);
 8002076:	4b0b      	ldr	r3, [pc, #44]	; (80020a4 <I2C_Read_Byte+0x3c>)
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	3301      	adds	r3, #1
 800207e:	b299      	uxth	r1, r3
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	b29a      	uxth	r2, r3
 8002084:	2320      	movs	r3, #32
 8002086:	9302      	str	r3, [sp, #8]
 8002088:	2301      	movs	r3, #1
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <I2C_Read_Byte+0x40>)
 8002096:	f001 f9a3 	bl	80033e0 <HAL_I2C_Mem_Read>
	return Buf[0];
 800209a:	7b3b      	ldrb	r3, [r7, #12]
#endif
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000341 	.word	0x20000341
 80020a8:	20000230 	.word	0x20000230

080020ac <AS7341_Read_Byte>:
parameter:  
            Addr: Register address
Info:
******************************************************************************/
static UBYTE AS7341_Read_Byte(UBYTE Addr)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
    return I2C_Read_Byte(Addr);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ffd5 	bl	8002068 <I2C_Read_Byte>
 80020be:	4603      	mov	r3, r0
 80020c0:	b2db      	uxtb	r3, r3
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <AS7341_Write_Byte>:
            Addr: Register address
           Value: Write to the value of the register
Info:
******************************************************************************/
static void AS7341_Write_Byte(UBYTE Addr, UBYTE Value)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b082      	sub	sp, #8
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	4603      	mov	r3, r0
 80020d2:	460a      	mov	r2, r1
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	4613      	mov	r3, r2
 80020d8:	71bb      	strb	r3, [r7, #6]
    I2C_Write_Byte(Addr, Value);
 80020da:	79ba      	ldrb	r2, [r7, #6]
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff ff9d 	bl	8002020 <I2C_Write_Byte>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <AS7341_Init>:
function:	AS7341 Initialization
parameter:
Info:
******************************************************************************/
UBYTE AS7341_Init(eMode_t mode)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
	DEV_I2C_Init(AS7341_ADDRESS<<1);//8-bit address
 80020fa:	2072      	movs	r0, #114	; 0x72
 80020fc:	f7ff ff7a 	bl	8001ff4 <DEV_I2C_Init>
    //printf("ID = 0x%x\r\n",AS7341_Read_Byte(AS7341_ID));//get AS7341 id	
	AS7341_Enable(true);
 8002100:	2001      	movs	r0, #1
 8002102:	f000 f80b 	bl	800211c <AS7341_Enable>
	measureMode=mode;
 8002106:	4a04      	ldr	r2, [pc, #16]	; (8002118 <AS7341_Init+0x28>)
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	7013      	strb	r3, [r2, #0]
	return 0;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000342 	.word	0x20000342

0800211c <AS7341_Enable>:
/******************************************************************************
function： enable PON
info：	power on
******************************************************************************/
void AS7341_Enable(int flag)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
	UBYTE data;
	data=AS7341_Read_Byte(AS7341_ENABLE);
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	f7ff ffc1 	bl	80020ac <AS7341_Read_Byte>
 800212a:	4603      	mov	r3, r0
 800212c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d104      	bne.n	800213e <AS7341_Enable+0x22>
    data = data | (1<<0);
 8002134:	7bfb      	ldrb	r3, [r7, #15]
 8002136:	f043 0301 	orr.w	r3, r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e003      	b.n	8002146 <AS7341_Enable+0x2a>
    } else {
    data = data & (~1);
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
    }
	AS7341_Write_Byte(AS7341_ENABLE,data);
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	4619      	mov	r1, r3
 800214a:	2080      	movs	r0, #128	; 0x80
 800214c:	f7ff ffbd 	bl	80020ca <AS7341_Write_Byte>
	printf("Initialization is complete !\r\n");
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <AS7341_Enable+0x4c>)
 8002152:	f004 fe11 	bl	8006d78 <puts>
    AS7341_Write_Byte(0x00, 0x30);
 8002156:	2130      	movs	r1, #48	; 0x30
 8002158:	2000      	movs	r0, #0
 800215a:	f7ff ffb6 	bl	80020ca <AS7341_Write_Byte>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	0800793c 	.word	0x0800793c

0800216c <AS7341_EnableSpectralMeasure>:
/******************************************************************************
function： enable Spectral measure
info：	
******************************************************************************/
void AS7341_EnableSpectralMeasure(int flag)//Enable spectral measurement
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 8002174:	2080      	movs	r0, #128	; 0x80
 8002176:	f7ff ff99 	bl	80020ac <AS7341_Read_Byte>
 800217a:	4603      	mov	r3, r0
 800217c:	73fb      	strb	r3, [r7, #15]
    if(flag == true){
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d104      	bne.n	800218e <AS7341_EnableSpectralMeasure+0x22>
      data = data | (1<<1);
 8002184:	7bfb      	ldrb	r3, [r7, #15]
 8002186:	f043 0302 	orr.w	r3, r3, #2
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	e003      	b.n	8002196 <AS7341_EnableSpectralMeasure+0x2a>
    } else {
      data = data & (~(1<<1));
 800218e:	7bfb      	ldrb	r3, [r7, #15]
 8002190:	f023 0302 	bic.w	r3, r3, #2
 8002194:	73fb      	strb	r3, [r7, #15]
    }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 8002196:	7bfb      	ldrb	r3, [r7, #15]
 8002198:	4619      	mov	r1, r3
 800219a:	2080      	movs	r0, #128	; 0x80
 800219c:	f7ff ff95 	bl	80020ca <AS7341_Write_Byte>
}
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <AS7341_EnableSMUX>:
function： enable SMUX
info：	
******************************************************************************/
void AS7341_EnableSMUX(int flag)//Enable multiplexer
/*The other available channels can be accessed by amultiplexer (SMUX) connecting them to one of the internal ADCs.*/
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  UBYTE data;
    data=AS7341_Read_Byte(AS7341_ENABLE);
 80021b0:	2080      	movs	r0, #128	; 0x80
 80021b2:	f7ff ff7b 	bl	80020ac <AS7341_Read_Byte>
 80021b6:	4603      	mov	r3, r0
 80021b8:	73fb      	strb	r3, [r7, #15]
  if(flag == true){
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d104      	bne.n	80021ca <AS7341_EnableSMUX+0x22>
    data = data | (1<<4);
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	f043 0310 	orr.w	r3, r3, #16
 80021c6:	73fb      	strb	r3, [r7, #15]
 80021c8:	e003      	b.n	80021d2 <AS7341_EnableSMUX+0x2a>
  } else {
    data = data & (~(1<<4));
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	f023 0310 	bic.w	r3, r3, #16
 80021d0:	73fb      	strb	r3, [r7, #15]
  }
    AS7341_Write_Byte(AS7341_ENABLE,data);
 80021d2:	7bfb      	ldrb	r3, [r7, #15]
 80021d4:	4619      	mov	r1, r3
 80021d6:	2080      	movs	r0, #128	; 0x80
 80021d8:	f7ff ff77 	bl	80020ca <AS7341_Write_Byte>
}
 80021dc:	bf00      	nop
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <AS7341_Config>:
/******************************************************************************
function:	choose model for spectral measurement
info：	
******************************************************************************/
void AS7341_Config(eMode_t mode)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  UBYTE data;
  AS7341_SetBank(1);
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 fa1f 	bl	8002632 <AS7341_SetBank>
  data=AS7341_Read_Byte(AS7341_CONFIG);
 80021f4:	2070      	movs	r0, #112	; 0x70
 80021f6:	f7ff ff59 	bl	80020ac <AS7341_Read_Byte>
 80021fa:	4603      	mov	r3, r0
 80021fc:	73fb      	strb	r3, [r7, #15]
  switch(mode){
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d015      	beq.n	8002230 <AS7341_Config+0x4c>
 8002204:	2b03      	cmp	r3, #3
 8002206:	dc18      	bgt.n	800223a <AS7341_Config+0x56>
 8002208:	2b00      	cmp	r3, #0
 800220a:	d002      	beq.n	8002212 <AS7341_Config+0x2e>
 800220c:	2b01      	cmp	r3, #1
 800220e:	d005      	beq.n	800221c <AS7341_Config+0x38>
	break;
    case eSynd : {
      data = (data & (~3)) | eSynd;
    };
	break;
    default : break;
 8002210:	e013      	b.n	800223a <AS7341_Config+0x56>
      data = (data & (~3)) | eSpm;
 8002212:	7bfb      	ldrb	r3, [r7, #15]
 8002214:	f023 0303 	bic.w	r3, r3, #3
 8002218:	73fb      	strb	r3, [r7, #15]
	break;
 800221a:	e00f      	b.n	800223c <AS7341_Config+0x58>
      data = (data & (~3)) | eSyns;
 800221c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002220:	f023 0303 	bic.w	r3, r3, #3
 8002224:	b25b      	sxtb	r3, r3
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	b25b      	sxtb	r3, r3
 800222c:	73fb      	strb	r3, [r7, #15]
	break;
 800222e:	e005      	b.n	800223c <AS7341_Config+0x58>
      data = (data & (~3)) | eSynd;
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	f043 0303 	orr.w	r3, r3, #3
 8002236:	73fb      	strb	r3, [r7, #15]
	break;
 8002238:	e000      	b.n	800223c <AS7341_Config+0x58>
    default : break;
 800223a:	bf00      	nop
  }
  AS7341_Write_Byte(AS7341_CONFIG,data);
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	4619      	mov	r1, r3
 8002240:	2070      	movs	r0, #112	; 0x70
 8002242:	f7ff ff42 	bl	80020ca <AS7341_Write_Byte>
  AS7341_SetBank(0);
 8002246:	2000      	movs	r0, #0
 8002248:	f000 f9f3 	bl	8002632 <AS7341_SetBank>
}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <F1F4_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F1-4, Clear and NIR
info：	
******************************************************************************/
void F1F4_Clear_NIR() 
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x30); 
 8002258:	2130      	movs	r1, #48	; 0x30
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff ff35 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x01); 
 8002260:	2101      	movs	r1, #1
 8002262:	2001      	movs	r0, #1
 8002264:	f7ff ff31 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8002268:	2100      	movs	r1, #0
 800226a:	2002      	movs	r0, #2
 800226c:	f7ff ff2d 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x00); 
 8002270:	2100      	movs	r1, #0
 8002272:	2003      	movs	r0, #3
 8002274:	f7ff ff29 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x00); 
 8002278:	2100      	movs	r1, #0
 800227a:	2004      	movs	r0, #4
 800227c:	f7ff ff25 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x42); 
 8002280:	2142      	movs	r1, #66	; 0x42
 8002282:	2005      	movs	r0, #5
 8002284:	f7ff ff21 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x00); 
 8002288:	2100      	movs	r1, #0
 800228a:	2006      	movs	r0, #6
 800228c:	f7ff ff1d 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x00); 
 8002290:	2100      	movs	r1, #0
 8002292:	2007      	movs	r0, #7
 8002294:	f7ff ff19 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8002298:	2150      	movs	r1, #80	; 0x50
 800229a:	2008      	movs	r0, #8
 800229c:	f7ff ff15 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x00); 
 80022a0:	2100      	movs	r1, #0
 80022a2:	2009      	movs	r0, #9
 80022a4:	f7ff ff11 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x00); 
 80022a8:	2100      	movs	r1, #0
 80022aa:	200a      	movs	r0, #10
 80022ac:	f7ff ff0d 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 80022b0:	2100      	movs	r1, #0
 80022b2:	200b      	movs	r0, #11
 80022b4:	f7ff ff09 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x20); 
 80022b8:	2120      	movs	r1, #32
 80022ba:	200c      	movs	r0, #12
 80022bc:	f7ff ff05 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x04); 
 80022c0:	2104      	movs	r1, #4
 80022c2:	200d      	movs	r0, #13
 80022c4:	f7ff ff01 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x00); 
 80022c8:	2100      	movs	r1, #0
 80022ca:	200e      	movs	r0, #14
 80022cc:	f7ff fefd 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x30); 
 80022d0:	2130      	movs	r1, #48	; 0x30
 80022d2:	200f      	movs	r0, #15
 80022d4:	f7ff fef9 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x01); 
 80022d8:	2101      	movs	r1, #1
 80022da:	2010      	movs	r0, #16
 80022dc:	f7ff fef5 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 80022e0:	2150      	movs	r1, #80	; 0x50
 80022e2:	2011      	movs	r0, #17
 80022e4:	f7ff fef1 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 80022e8:	2100      	movs	r1, #0
 80022ea:	2012      	movs	r0, #18
 80022ec:	f7ff feed 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 80022f0:	2106      	movs	r1, #6
 80022f2:	2013      	movs	r0, #19
 80022f4:	f7ff fee9 	bl	80020ca <AS7341_Write_Byte>
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <F5F8_Clear_NIR>:
/******************************************************************************
function:	Configure SMUX for sensors F5-8, Clear and NIR
info：	
******************************************************************************/
void F5F8_Clear_NIR() 
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  AS7341_Write_Byte(0x00, 0x00); 
 8002300:	2100      	movs	r1, #0
 8002302:	2000      	movs	r0, #0
 8002304:	f7ff fee1 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x01, 0x00); 
 8002308:	2100      	movs	r1, #0
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fedd 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x02, 0x00); 
 8002310:	2100      	movs	r1, #0
 8002312:	2002      	movs	r0, #2
 8002314:	f7ff fed9 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x03, 0x40); 
 8002318:	2140      	movs	r1, #64	; 0x40
 800231a:	2003      	movs	r0, #3
 800231c:	f7ff fed5 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x04, 0x02); 
 8002320:	2102      	movs	r1, #2
 8002322:	2004      	movs	r0, #4
 8002324:	f7ff fed1 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x05, 0x00); 
 8002328:	2100      	movs	r1, #0
 800232a:	2005      	movs	r0, #5
 800232c:	f7ff fecd 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x06, 0x10); 
 8002330:	2110      	movs	r1, #16
 8002332:	2006      	movs	r0, #6
 8002334:	f7ff fec9 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x07, 0x03); 
 8002338:	2103      	movs	r1, #3
 800233a:	2007      	movs	r0, #7
 800233c:	f7ff fec5 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x08, 0x50); 
 8002340:	2150      	movs	r1, #80	; 0x50
 8002342:	2008      	movs	r0, #8
 8002344:	f7ff fec1 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x09, 0x10); 
 8002348:	2110      	movs	r1, #16
 800234a:	2009      	movs	r0, #9
 800234c:	f7ff febd 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0A, 0x03); 
 8002350:	2103      	movs	r1, #3
 8002352:	200a      	movs	r0, #10
 8002354:	f7ff feb9 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0B, 0x00); 
 8002358:	2100      	movs	r1, #0
 800235a:	200b      	movs	r0, #11
 800235c:	f7ff feb5 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0C, 0x00); 
 8002360:	2100      	movs	r1, #0
 8002362:	200c      	movs	r0, #12
 8002364:	f7ff feb1 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0D, 0x00); 
 8002368:	2100      	movs	r1, #0
 800236a:	200d      	movs	r0, #13
 800236c:	f7ff fead 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0E, 0x24); 
 8002370:	2124      	movs	r1, #36	; 0x24
 8002372:	200e      	movs	r0, #14
 8002374:	f7ff fea9 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x0F, 0x00); 
 8002378:	2100      	movs	r1, #0
 800237a:	200f      	movs	r0, #15
 800237c:	f7ff fea5 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x10, 0x00); 
 8002380:	2100      	movs	r1, #0
 8002382:	2010      	movs	r0, #16
 8002384:	f7ff fea1 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x11, 0x50); 
 8002388:	2150      	movs	r1, #80	; 0x50
 800238a:	2011      	movs	r0, #17
 800238c:	f7ff fe9d 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x12, 0x00); 
 8002390:	2100      	movs	r1, #0
 8002392:	2012      	movs	r0, #18
 8002394:	f7ff fe99 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(0x13, 0x06); 
 8002398:	2106      	movs	r1, #6
 800239a:	2013      	movs	r0, #19
 800239c:	f7ff fe95 	bl	80020ca <AS7341_Write_Byte>
}
 80023a0:	bf00      	nop
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <AS7341_startMeasure>:
/******************************************************************************
function:	Start the measurement
info：		This function only handles SPM and SYNS modes.
******************************************************************************/
void AS7341_startMeasure(eChChoose_t mode)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
	  UBYTE data=0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	73fb      	strb	r3, [r7, #15]
	  data = AS7341_Read_Byte(AS7341_CFG_0);  
 80023b2:	20a9      	movs	r0, #169	; 0xa9
 80023b4:	f7ff fe7a 	bl	80020ac <AS7341_Read_Byte>
 80023b8:	4603      	mov	r3, r0
 80023ba:	73fb      	strb	r3, [r7, #15]
	  data = data & (~(1<<4));
 80023bc:	7bfb      	ldrb	r3, [r7, #15]
 80023be:	f023 0310 	bic.w	r3, r3, #16
 80023c2:	73fb      	strb	r3, [r7, #15]

	  AS7341_Write_Byte(AS7341_CFG_0,data);
 80023c4:	7bfb      	ldrb	r3, [r7, #15]
 80023c6:	4619      	mov	r1, r3
 80023c8:	20a9      	movs	r0, #169	; 0xa9
 80023ca:	f7ff fe7e 	bl	80020ca <AS7341_Write_Byte>
	  
	  AS7341_EnableSpectralMeasure(false);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7ff fecc 	bl	800216c <AS7341_EnableSpectralMeasure>
	  AS7341_Write_Byte(0xAF,0x10);//SMUX Command config
 80023d4:	2110      	movs	r1, #16
 80023d6:	20af      	movs	r0, #175	; 0xaf
 80023d8:	f7ff fe77 	bl	80020ca <AS7341_Write_Byte>
	  
	  if(mode  == eF1F4ClearNIR)
 80023dc:	79fb      	ldrb	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d102      	bne.n	80023e8 <AS7341_startMeasure+0x44>
      F1F4_Clear_NIR();
 80023e2:	f7ff ff37 	bl	8002254 <F1F4_Clear_NIR>
 80023e6:	e004      	b.n	80023f2 <AS7341_startMeasure+0x4e>
	  else if(mode  == eF5F8ClearNIR)
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d101      	bne.n	80023f2 <AS7341_startMeasure+0x4e>
	  F5F8_Clear_NIR();
 80023ee:	f7ff ff85 	bl	80022fc <F5F8_Clear_NIR>
	  AS7341_EnableSMUX(true);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7ff fed8 	bl	80021a8 <AS7341_EnableSMUX>
	  if(measureMode == eSyns){
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <AS7341_startMeasure+0x9c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d106      	bne.n	800240e <AS7341_startMeasure+0x6a>
	  AS7341_SetGpioMode(INPUT);
 8002400:	2000      	movs	r0, #0
 8002402:	f000 f8bb 	bl	800257c <AS7341_SetGpioMode>
      AS7341_Config(eSyns);
 8002406:	2001      	movs	r0, #1
 8002408:	f7ff feec 	bl	80021e4 <AS7341_Config>
 800240c:	e006      	b.n	800241c <AS7341_startMeasure+0x78>
      }
	  else if(measureMode == eSpm){
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <AS7341_startMeasure+0x9c>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d102      	bne.n	800241c <AS7341_startMeasure+0x78>
      AS7341_Config(eSpm);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff fee4 	bl	80021e4 <AS7341_Config>
	  }
	  AS7341_EnableSpectralMeasure(true);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff fea5 	bl	800216c <AS7341_EnableSpectralMeasure>
      if(measureMode == eSpm){
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <AS7341_startMeasure+0x9c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d105      	bne.n	8002436 <AS7341_startMeasure+0x92>
        while(!AS7341_MeasureComplete()){
 800242a:	bf00      	nop
 800242c:	f000 f80a 	bl	8002444 <AS7341_MeasureComplete>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0fa      	beq.n	800242c <AS7341_startMeasure+0x88>
        //DEV_Delay_ms(1);
        }
      }
}
 8002436:	bf00      	nop
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000342 	.word	0x20000342

08002444 <AS7341_MeasureComplete>:
/******************************************************************************
function:  Determine whether the measurement is complete
info：		
******************************************************************************/

int AS7341_MeasureComplete(){
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
	UBYTE status;
	status = AS7341_Read_Byte(AS7341_STATUS_2); 
 800244a:	20a3      	movs	r0, #163	; 0xa3
 800244c:	f7ff fe2e 	bl	80020ac <AS7341_Read_Byte>
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
	if((status & (1<<6))){
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <AS7341_MeasureComplete+0x1e>
		return true;
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <AS7341_MeasureComplete+0x20>
	}
	else{
		return false;
 8002462:	2300      	movs	r3, #0
	}
}
 8002464:	4618      	mov	r0, r3
 8002466:	3708      	adds	r7, #8
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <AS7341_GetChannelData>:
/******************************************************************************
function:  Gets data for all channels
info：		
******************************************************************************/
UWORD AS7341_GetChannelData(UBYTE channel)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  UWORD data[2];
  UWORD channelData = 0x0000;
 8002476:	2300      	movs	r3, #0
 8002478:	81fb      	strh	r3, [r7, #14]
  data[0] = AS7341_Read_Byte(AS7341_CH0_DATA_L + channel*2); 
 800247a:	79fb      	ldrb	r3, [r7, #7]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	3b6b      	subs	r3, #107	; 0x6b
 8002482:	b2db      	uxtb	r3, r3
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fe11 	bl	80020ac <AS7341_Read_Byte>
 800248a:	4603      	mov	r3, r0
 800248c:	b29b      	uxth	r3, r3
 800248e:	813b      	strh	r3, [r7, #8]
  data[1] = AS7341_Read_Byte(AS7341_CH0_DATA_H + channel*2); 
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	334b      	adds	r3, #75	; 0x4b
 8002494:	b2db      	uxtb	r3, r3
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff fe06 	bl	80020ac <AS7341_Read_Byte>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	817b      	strh	r3, [r7, #10]
  channelData = data[1];
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	81fb      	strh	r3, [r7, #14]
  channelData = (channelData<<8) | data[0];
 80024aa:	89fb      	ldrh	r3, [r7, #14]
 80024ac:	021b      	lsls	r3, r3, #8
 80024ae:	b21a      	sxth	r2, r3
 80024b0:	893b      	ldrh	r3, [r7, #8]
 80024b2:	b21b      	sxth	r3, r3
 80024b4:	4313      	orrs	r3, r2
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	81fb      	strh	r3, [r7, #14]
  //DEV_Delay_ms(50);
  return channelData;
 80024ba:	89fb      	ldrh	r3, [r7, #14]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3710      	adds	r7, #16
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <AS7341_ReadSpectralDataOne>:
function:  Use SMUX to read data from the low channel
info：		
******************************************************************************/

sModeOneData_t AS7341_ReadSpectralDataOne()
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  sModeOneData_t data;
  data.channel1 = AS7341_GetChannelData(0);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7ff ffcd 	bl	800246c <AS7341_GetChannelData>
 80024d2:	4603      	mov	r3, r0
 80024d4:	81bb      	strh	r3, [r7, #12]
  data.channel2 = AS7341_GetChannelData(1);
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7ff ffc8 	bl	800246c <AS7341_GetChannelData>
 80024dc:	4603      	mov	r3, r0
 80024de:	81fb      	strh	r3, [r7, #14]
  data.channel3 = AS7341_GetChannelData(2);
 80024e0:	2002      	movs	r0, #2
 80024e2:	f7ff ffc3 	bl	800246c <AS7341_GetChannelData>
 80024e6:	4603      	mov	r3, r0
 80024e8:	823b      	strh	r3, [r7, #16]
  data.channel4 = AS7341_GetChannelData(3);
 80024ea:	2003      	movs	r0, #3
 80024ec:	f7ff ffbe 	bl	800246c <AS7341_GetChannelData>
 80024f0:	4603      	mov	r3, r0
 80024f2:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 80024f4:	2004      	movs	r0, #4
 80024f6:	f7ff ffb9 	bl	800246c <AS7341_GetChannelData>
 80024fa:	4603      	mov	r3, r0
 80024fc:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 80024fe:	2005      	movs	r0, #5
 8002500:	f7ff ffb4 	bl	800246c <AS7341_GetChannelData>
 8002504:	4603      	mov	r3, r0
 8002506:	82fb      	strh	r3, [r7, #22]
  return data;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	461c      	mov	r4, r3
 800250c:	f107 030c 	add.w	r3, r7, #12
 8002510:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002512:	6020      	str	r0, [r4, #0]
 8002514:	6061      	str	r1, [r4, #4]
 8002516:	60a2      	str	r2, [r4, #8]
}
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	371c      	adds	r7, #28
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}

08002520 <AS7341_ReadSpectralDataTwo>:
function:  Use SMUX to read data from the high channel
info：		
******************************************************************************/

sModeTwoData_t AS7341_ReadSpectralDataTwo()
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  sModeTwoData_t data;
  data.channel5 = AS7341_GetChannelData(0);
 8002528:	2000      	movs	r0, #0
 800252a:	f7ff ff9f 	bl	800246c <AS7341_GetChannelData>
 800252e:	4603      	mov	r3, r0
 8002530:	81bb      	strh	r3, [r7, #12]
  data.channel6 = AS7341_GetChannelData(1);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff ff9a 	bl	800246c <AS7341_GetChannelData>
 8002538:	4603      	mov	r3, r0
 800253a:	81fb      	strh	r3, [r7, #14]
  data.channel7 = AS7341_GetChannelData(2);
 800253c:	2002      	movs	r0, #2
 800253e:	f7ff ff95 	bl	800246c <AS7341_GetChannelData>
 8002542:	4603      	mov	r3, r0
 8002544:	823b      	strh	r3, [r7, #16]
  data.channel8 = AS7341_GetChannelData(3);
 8002546:	2003      	movs	r0, #3
 8002548:	f7ff ff90 	bl	800246c <AS7341_GetChannelData>
 800254c:	4603      	mov	r3, r0
 800254e:	827b      	strh	r3, [r7, #18]
  data.CLEAR = AS7341_GetChannelData(4);
 8002550:	2004      	movs	r0, #4
 8002552:	f7ff ff8b 	bl	800246c <AS7341_GetChannelData>
 8002556:	4603      	mov	r3, r0
 8002558:	82bb      	strh	r3, [r7, #20]
  data.NIR = AS7341_GetChannelData(5);
 800255a:	2005      	movs	r0, #5
 800255c:	f7ff ff86 	bl	800246c <AS7341_GetChannelData>
 8002560:	4603      	mov	r3, r0
 8002562:	82fb      	strh	r3, [r7, #22]
  return data;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	461c      	mov	r4, r3
 8002568:	f107 030c 	add.w	r3, r7, #12
 800256c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800256e:	6020      	str	r0, [r4, #0]
 8002570:	6061      	str	r1, [r4, #4]
 8002572:	60a2      	str	r2, [r4, #8]
}
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	371c      	adds	r7, #28
 8002578:	46bd      	mov	sp, r7
 800257a:	bd90      	pop	{r4, r7, pc}

0800257c <AS7341_SetGpioMode>:
/******************************************************************************
function:	Set GPIO to input or output mode
info：
******************************************************************************/
void AS7341_SetGpioMode(UBYTE mode)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  UBYTE data;

  data = AS7341_Read_Byte(AS7341_GPIO_2);  
 8002586:	20be      	movs	r0, #190	; 0xbe
 8002588:	f7ff fd90 	bl	80020ac <AS7341_Read_Byte>
 800258c:	4603      	mov	r3, r0
 800258e:	73fb      	strb	r3, [r7, #15]
  if(mode == INPUT){
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d103      	bne.n	800259e <AS7341_SetGpioMode+0x22>
     data = data | (1<<2);
 8002596:	7bfb      	ldrb	r3, [r7, #15]
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	73fb      	strb	r3, [r7, #15]
  }
  
  if(mode == OUTPUT){
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d103      	bne.n	80025ac <AS7341_SetGpioMode+0x30>
     data = data & (~(1<<2));
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	f023 0304 	bic.w	r3, r3, #4
 80025aa:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_GPIO_2,data);
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	4619      	mov	r1, r3
 80025b0:	20be      	movs	r0, #190	; 0xbe
 80025b2:	f7ff fd8a 	bl	80020ca <AS7341_Write_Byte>
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <AS7341_ATIME_config>:
/******************************************************************************
function:	Configure the ATIME register
info：
******************************************************************************/
void AS7341_ATIME_config(UBYTE value)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	4603      	mov	r3, r0
 80025c6:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_ATIME,value);
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	4619      	mov	r1, r3
 80025cc:	2081      	movs	r0, #129	; 0x81
 80025ce:	f7ff fd7c 	bl	80020ca <AS7341_Write_Byte>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <AS7341_ASTEP_config>:
/******************************************************************************
function:	Configure the ASTEP register
info：
******************************************************************************/
void AS7341_ASTEP_config(UWORD value)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b084      	sub	sp, #16
 80025de:	af00      	add	r7, sp, #0
 80025e0:	4603      	mov	r3, r0
 80025e2:	80fb      	strh	r3, [r7, #6]
  UBYTE highValue,lowValue;
  lowValue = value & 0x00ff;
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	73fb      	strb	r3, [r7, #15]
  highValue = value >> 8 ;
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	73bb      	strb	r3, [r7, #14]
  AS7341_Write_Byte(AS7341_ASTEP_L,lowValue);
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	4619      	mov	r1, r3
 80025f4:	20ca      	movs	r0, #202	; 0xca
 80025f6:	f7ff fd68 	bl	80020ca <AS7341_Write_Byte>
  AS7341_Write_Byte(AS7341_ASTEP_H,highValue);
 80025fa:	7bbb      	ldrb	r3, [r7, #14]
 80025fc:	4619      	mov	r1, r3
 80025fe:	20cb      	movs	r0, #203	; 0xcb
 8002600:	f7ff fd63 	bl	80020ca <AS7341_Write_Byte>
}
 8002604:	bf00      	nop
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <AS7341_AGAIN_config>:
function:	Configure the AGAIN register
value:    0    1    2    3    4    5      6     7     8     9      10
gain:   X0.5 | X1 | X2 | X4 | X8 | X16 | X32 | X64 | X128 | X256 | X512
******************************************************************************/
void AS7341_AGAIN_config(UBYTE value)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if(value > 10) value = 10;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	2b0a      	cmp	r3, #10
 800261a:	d901      	bls.n	8002620 <AS7341_AGAIN_config+0x14>
 800261c:	230a      	movs	r3, #10
 800261e:	71fb      	strb	r3, [r7, #7]
  AS7341_Write_Byte(AS7341_CFG_1,value);
 8002620:	79fb      	ldrb	r3, [r7, #7]
 8002622:	4619      	mov	r1, r3
 8002624:	20aa      	movs	r0, #170	; 0xaa
 8002626:	f7ff fd50 	bl	80020ca <AS7341_Write_Byte>
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <AS7341_SetBank>:
function:	set REG_BANK
info：	0: Register access to register 0x80 and above
		1: Register access to register 0x60 to 0x74
******************************************************************************/
void AS7341_SetBank(UBYTE addr)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	4603      	mov	r3, r0
 800263a:	71fb      	strb	r3, [r7, #7]
  UBYTE data=0;
 800263c:	2300      	movs	r3, #0
 800263e:	73fb      	strb	r3, [r7, #15]
  data = AS7341_Read_Byte(AS7341_CFG_0);
 8002640:	20a9      	movs	r0, #169	; 0xa9
 8002642:	f7ff fd33 	bl	80020ac <AS7341_Read_Byte>
 8002646:	4603      	mov	r3, r0
 8002648:	73fb      	strb	r3, [r7, #15]
  if(addr == 1){
 800264a:	79fb      	ldrb	r3, [r7, #7]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d103      	bne.n	8002658 <AS7341_SetBank+0x26>
  
    data = data | (1<<4);
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	f043 0310 	orr.w	r3, r3, #16
 8002656:	73fb      	strb	r3, [r7, #15]
  }
  
  if(addr == 0){
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d103      	bne.n	8002666 <AS7341_SetBank+0x34>
  
    data = data & (~(1<<4));
 800265e:	7bfb      	ldrb	r3, [r7, #15]
 8002660:	f023 0310 	bic.w	r3, r3, #16
 8002664:	73fb      	strb	r3, [r7, #15]
  }
  AS7341_Write_Byte(AS7341_CFG_0,data);
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	4619      	mov	r1, r3
 800266a:	20a9      	movs	r0, #169	; 0xa9
 800266c:	f7ff fd2d 	bl	80020ca <AS7341_Write_Byte>
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <PCA9847_Initialise>:
#include "PCA9847.h"

uint8_t PCA9847_Initialise(PCA9847 *dev, I2C_HandleTypeDef *i2cHandle) {
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
	/* Set struct parameters */
	dev->i2cHandle = i2cHandle;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	601a      	str	r2, [r3, #0]

	/* Store number of transaction errors */
	uint8_t regData;
	HAL_StatusTypeDef status;
	uint8_t errNum = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

	/* Set to reset default state (all channels disabled) */
	regData = DISABLE_CHANNELS;
 800268c:	2300      	movs	r3, #0
 800268e:	737b      	strb	r3, [r7, #13]
	status = PCA9847_Write(dev, &regData);
 8002690:	f107 030d 	add.w	r3, r7, #13
 8002694:	4619      	mov	r1, r3
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f858 	bl	800274c <PCA9847_Write>
 800269c:	4603      	mov	r3, r0
 800269e:	73bb      	strb	r3, [r7, #14]
	errNum += (status != HAL_OK);
 80026a0:	7bbb      	ldrb	r3, [r7, #14]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bf14      	ite	ne
 80026a6:	2301      	movne	r3, #1
 80026a8:	2300      	moveq	r3, #0
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	461a      	mov	r2, r3
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	4413      	add	r3, r2
 80026b2:	73fb      	strb	r3, [r7, #15]

	return errNum;
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3710      	adds	r7, #16
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <PCA9847_SetChannel>:

void PCA9847_SetChannel(PCA9847 *dev, uint8_t channelNumber) {
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	70fb      	strb	r3, [r7, #3]
	uint8_t regData;
	switch (channelNumber) {
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	2b07      	cmp	r3, #7
 80026d0:	d82a      	bhi.n	8002728 <PCA9847_SetChannel+0x68>
 80026d2:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <PCA9847_SetChannel+0x18>)
 80026d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d8:	080026f9 	.word	0x080026f9
 80026dc:	080026ff 	.word	0x080026ff
 80026e0:	08002705 	.word	0x08002705
 80026e4:	0800270b 	.word	0x0800270b
 80026e8:	08002711 	.word	0x08002711
 80026ec:	08002717 	.word	0x08002717
 80026f0:	0800271d 	.word	0x0800271d
 80026f4:	08002723 	.word	0x08002723
	case 0:
		regData = ENABLE_CHANNEL_0;
 80026f8:	2308      	movs	r3, #8
 80026fa:	73fb      	strb	r3, [r7, #15]
		break;
 80026fc:	e01a      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 1:
		regData = ENABLE_CHANNEL_1;
 80026fe:	2309      	movs	r3, #9
 8002700:	73fb      	strb	r3, [r7, #15]
		break;
 8002702:	e017      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 2:
		regData = ENABLE_CHANNEL_2;
 8002704:	230a      	movs	r3, #10
 8002706:	73fb      	strb	r3, [r7, #15]
		break;
 8002708:	e014      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 3:
		regData = ENABLE_CHANNEL_3;
 800270a:	230b      	movs	r3, #11
 800270c:	73fb      	strb	r3, [r7, #15]
		break;
 800270e:	e011      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 4:
		regData = ENABLE_CHANNEL_4;
 8002710:	230c      	movs	r3, #12
 8002712:	73fb      	strb	r3, [r7, #15]
		break;
 8002714:	e00e      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 5:
		regData = ENABLE_CHANNEL_5;
 8002716:	230d      	movs	r3, #13
 8002718:	73fb      	strb	r3, [r7, #15]
		break;
 800271a:	e00b      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 6:
		regData = ENABLE_CHANNEL_6;
 800271c:	230e      	movs	r3, #14
 800271e:	73fb      	strb	r3, [r7, #15]
		break;
 8002720:	e008      	b.n	8002734 <PCA9847_SetChannel+0x74>
	case 7:
		regData = ENABLE_CHANNEL_7;
 8002722:	230f      	movs	r3, #15
 8002724:	73fb      	strb	r3, [r7, #15]
		break;
 8002726:	e005      	b.n	8002734 <PCA9847_SetChannel+0x74>
	default:
		printf("Channelnumber should be 0-7 but is %d \r\n", channelNumber);
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	4619      	mov	r1, r3
 800272c:	4806      	ldr	r0, [pc, #24]	; (8002748 <PCA9847_SetChannel+0x88>)
 800272e:	f004 fa9d 	bl	8006c6c <iprintf>
 8002732:	e005      	b.n	8002740 <PCA9847_SetChannel+0x80>
		return;
	}
	PCA9847_Write(dev, &regData);
 8002734:	f107 030f 	add.w	r3, r7, #15
 8002738:	4619      	mov	r1, r3
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f806 	bl	800274c <PCA9847_Write>
}
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	080079a4 	.word	0x080079a4

0800274c <PCA9847_Write>:

/*
 * DEFAULT FUNCTIONS
 */

HAL_StatusTypeDef PCA9847_Write(PCA9847 *dev, uint8_t *data) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af02      	add	r7, sp, #8
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
	return HAL_I2C_Master_Transmit(dev->i2cHandle, PCA9847_I2C_ADDR, data, 1,
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	230a      	movs	r3, #10
 800275c:	9300      	str	r3, [sp, #0]
 800275e:	2301      	movs	r3, #1
 8002760:	683a      	ldr	r2, [r7, #0]
 8002762:	21e2      	movs	r1, #226	; 0xe2
 8002764:	f000 fc34 	bl	8002fd0 <HAL_I2C_Master_Transmit>
 8002768:	4603      	mov	r3, r0
			10);
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002778:	2300      	movs	r3, #0
 800277a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800277c:	2003      	movs	r0, #3
 800277e:	f000 f961 	bl	8002a44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002782:	200f      	movs	r0, #15
 8002784:	f000 f80e 	bl	80027a4 <HAL_InitTick>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d002      	beq.n	8002794 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	e001      	b.n	8002798 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002794:	f7ff fa0c 	bl	8001bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002798:	79fb      	ldrb	r3, [r7, #7]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
	...

080027a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027b0:	4b17      	ldr	r3, [pc, #92]	; (8002810 <HAL_InitTick+0x6c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d023      	beq.n	8002800 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_InitTick+0x70>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b14      	ldr	r3, [pc, #80]	; (8002810 <HAL_InitTick+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80027ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 f96d 	bl	8002aae <HAL_SYSTICK_Config>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10f      	bne.n	80027fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2b0f      	cmp	r3, #15
 80027de:	d809      	bhi.n	80027f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027e0:	2200      	movs	r2, #0
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	f04f 30ff 	mov.w	r0, #4294967295
 80027e8:	f000 f937 	bl	8002a5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027ec:	4a0a      	ldr	r2, [pc, #40]	; (8002818 <HAL_InitTick+0x74>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	e007      	b.n	8002804 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	73fb      	strb	r3, [r7, #15]
 80027f8:	e004      	b.n	8002804 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
 80027fe:	e001      	b.n	8002804 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002804:	7bfb      	ldrb	r3, [r7, #15]
}
 8002806:	4618      	mov	r0, r3
 8002808:	3710      	adds	r7, #16
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000174 	.word	0x20000174
 8002814:	2000016c 	.word	0x2000016c
 8002818:	20000170 	.word	0x20000170

0800281c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_IncTick+0x20>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_IncTick+0x24>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4413      	add	r3, r2
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <HAL_IncTick+0x24>)
 800282e:	6013      	str	r3, [r2, #0]
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	20000174 	.word	0x20000174
 8002840:	20000344 	.word	0x20000344

08002844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return uwTick;
 8002848:	4b03      	ldr	r3, [pc, #12]	; (8002858 <HAL_GetTick+0x14>)
 800284a:	681b      	ldr	r3, [r3, #0]
}
 800284c:	4618      	mov	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	20000344 	.word	0x20000344

0800285c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002864:	f7ff ffee 	bl	8002844 <HAL_GetTick>
 8002868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002874:	d005      	beq.n	8002882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <HAL_Delay+0x44>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002882:	bf00      	nop
 8002884:	f7ff ffde 	bl	8002844 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	429a      	cmp	r2, r3
 8002892:	d8f7      	bhi.n	8002884 <HAL_Delay+0x28>
  {
  }
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3710      	adds	r7, #16
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000174 	.word	0x20000174

080028a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028c0:	4013      	ands	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028d6:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <__NVIC_SetPriorityGrouping+0x44>)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	60d3      	str	r3, [r2, #12]
}
 80028dc:	bf00      	nop
 80028de:	3714      	adds	r7, #20
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr
 80028e8:	e000ed00 	.word	0xe000ed00

080028ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <__NVIC_GetPriorityGrouping+0x18>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	f003 0307 	and.w	r3, r3, #7
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	e000ed00 	.word	0xe000ed00

08002908 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	2b00      	cmp	r3, #0
 8002918:	db0b      	blt.n	8002932 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291a:	79fb      	ldrb	r3, [r7, #7]
 800291c:	f003 021f 	and.w	r2, r3, #31
 8002920:	4907      	ldr	r1, [pc, #28]	; (8002940 <__NVIC_EnableIRQ+0x38>)
 8002922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	2001      	movs	r0, #1
 800292a:	fa00 f202 	lsl.w	r2, r0, r2
 800292e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	e000e100 	.word	0xe000e100

08002944 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	4603      	mov	r3, r0
 800294c:	6039      	str	r1, [r7, #0]
 800294e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002950:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002954:	2b00      	cmp	r3, #0
 8002956:	db0a      	blt.n	800296e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	b2da      	uxtb	r2, r3
 800295c:	490c      	ldr	r1, [pc, #48]	; (8002990 <__NVIC_SetPriority+0x4c>)
 800295e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002962:	0112      	lsls	r2, r2, #4
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	440b      	add	r3, r1
 8002968:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800296c:	e00a      	b.n	8002984 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	b2da      	uxtb	r2, r3
 8002972:	4908      	ldr	r1, [pc, #32]	; (8002994 <__NVIC_SetPriority+0x50>)
 8002974:	79fb      	ldrb	r3, [r7, #7]
 8002976:	f003 030f 	and.w	r3, r3, #15
 800297a:	3b04      	subs	r3, #4
 800297c:	0112      	lsls	r2, r2, #4
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	440b      	add	r3, r1
 8002982:	761a      	strb	r2, [r3, #24]
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000e100 	.word	0xe000e100
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002998:	b480      	push	{r7}
 800299a:	b089      	sub	sp, #36	; 0x24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029ac:	69fb      	ldr	r3, [r7, #28]
 80029ae:	f1c3 0307 	rsb	r3, r3, #7
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	bf28      	it	cs
 80029b6:	2304      	movcs	r3, #4
 80029b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3304      	adds	r3, #4
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d902      	bls.n	80029c8 <NVIC_EncodePriority+0x30>
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3b03      	subs	r3, #3
 80029c6:	e000      	b.n	80029ca <NVIC_EncodePriority+0x32>
 80029c8:	2300      	movs	r3, #0
 80029ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43da      	mvns	r2, r3
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	401a      	ands	r2, r3
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e0:	f04f 31ff 	mov.w	r1, #4294967295
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa01 f303 	lsl.w	r3, r1, r3
 80029ea:	43d9      	mvns	r1, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f0:	4313      	orrs	r3, r2
         );
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3724      	adds	r7, #36	; 0x24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a10:	d301      	bcc.n	8002a16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a12:	2301      	movs	r3, #1
 8002a14:	e00f      	b.n	8002a36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <SysTick_Config+0x40>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a1e:	210f      	movs	r1, #15
 8002a20:	f04f 30ff 	mov.w	r0, #4294967295
 8002a24:	f7ff ff8e 	bl	8002944 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a28:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <SysTick_Config+0x40>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <SysTick_Config+0x40>)
 8002a30:	2207      	movs	r2, #7
 8002a32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	e000e010 	.word	0xe000e010

08002a44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f7ff ff29 	bl	80028a4 <__NVIC_SetPriorityGrouping>
}
 8002a52:	bf00      	nop
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	4603      	mov	r3, r0
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	607a      	str	r2, [r7, #4]
 8002a66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff3e 	bl	80028ec <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff8e 	bl	8002998 <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5d 	bl	8002944 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff31 	bl	8002908 <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa2 	bl	8002a00 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad6:	e17f      	b.n	8002dd8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	2101      	movs	r1, #1
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 8171 	beq.w	8002dd2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 0303 	and.w	r3, r3, #3
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d005      	beq.n	8002b08 <HAL_GPIO_Init+0x40>
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	2b02      	cmp	r3, #2
 8002b06:	d130      	bne.n	8002b6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	68da      	ldr	r2, [r3, #12]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b3e:	2201      	movs	r2, #1
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43db      	mvns	r3, r3
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0201 	and.w	r2, r3, #1
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d118      	bne.n	8002ba8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	08db      	lsrs	r3, r3, #3
 8002b92:	f003 0201 	and.w	r2, r3, #1
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b03      	cmp	r3, #3
 8002bb2:	d017      	beq.n	8002be4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689a      	ldr	r2, [r3, #8]
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d123      	bne.n	8002c38 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	08da      	lsrs	r2, r3, #3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3208      	adds	r2, #8
 8002bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	220f      	movs	r2, #15
 8002c08:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4013      	ands	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	691a      	ldr	r2, [r3, #16]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	fa02 f303 	lsl.w	r3, r2, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	08da      	lsrs	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3208      	adds	r2, #8
 8002c32:	6939      	ldr	r1, [r7, #16]
 8002c34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	2203      	movs	r2, #3
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 0203 	and.w	r2, r3, #3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	005b      	lsls	r3, r3, #1
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 80ac 	beq.w	8002dd2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <HAL_GPIO_Init+0x330>)
 8002c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <HAL_GPIO_Init+0x330>)
 8002c80:	f043 0301 	orr.w	r3, r3, #1
 8002c84:	6613      	str	r3, [r2, #96]	; 0x60
 8002c86:	4b5c      	ldr	r3, [pc, #368]	; (8002df8 <HAL_GPIO_Init+0x330>)
 8002c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c92:	4a5a      	ldr	r2, [pc, #360]	; (8002dfc <HAL_GPIO_Init+0x334>)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	089b      	lsrs	r3, r3, #2
 8002c98:	3302      	adds	r3, #2
 8002c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002cbc:	d025      	beq.n	8002d0a <HAL_GPIO_Init+0x242>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a4f      	ldr	r2, [pc, #316]	; (8002e00 <HAL_GPIO_Init+0x338>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x23e>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4e      	ldr	r2, [pc, #312]	; (8002e04 <HAL_GPIO_Init+0x33c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x23a>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a4d      	ldr	r2, [pc, #308]	; (8002e08 <HAL_GPIO_Init+0x340>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x236>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a4c      	ldr	r2, [pc, #304]	; (8002e0c <HAL_GPIO_Init+0x344>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x232>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a4b      	ldr	r2, [pc, #300]	; (8002e10 <HAL_GPIO_Init+0x348>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x22e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	; (8002e14 <HAL_GPIO_Init+0x34c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x22a>
 8002cee:	2306      	movs	r3, #6
 8002cf0:	e00c      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cf2:	2307      	movs	r3, #7
 8002cf4:	e00a      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	e008      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cfa:	2304      	movs	r3, #4
 8002cfc:	e006      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e004      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e002      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <HAL_GPIO_Init+0x244>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	f002 0203 	and.w	r2, r2, #3
 8002d12:	0092      	lsls	r2, r2, #2
 8002d14:	4093      	lsls	r3, r2
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d1c:	4937      	ldr	r1, [pc, #220]	; (8002dfc <HAL_GPIO_Init+0x334>)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	089b      	lsrs	r3, r3, #2
 8002d22:	3302      	adds	r3, #2
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d2a:	4b3b      	ldr	r3, [pc, #236]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	43db      	mvns	r3, r3
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	4013      	ands	r3, r2
 8002d38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002d46:	693a      	ldr	r2, [r7, #16]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d4e:	4a32      	ldr	r2, [pc, #200]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	43db      	mvns	r3, r3
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4013      	ands	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d003      	beq.n	8002d78 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d78:	4a27      	ldr	r2, [pc, #156]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	43db      	mvns	r3, r3
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d003      	beq.n	8002da2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002da2:	4a1d      	ldr	r2, [pc, #116]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002da8:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	43db      	mvns	r3, r3
 8002db2:	693a      	ldr	r2, [r7, #16]
 8002db4:	4013      	ands	r3, r2
 8002db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dcc:	4a12      	ldr	r2, [pc, #72]	; (8002e18 <HAL_GPIO_Init+0x350>)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f47f ae78 	bne.w	8002ad8 <HAL_GPIO_Init+0x10>
  }
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	371c      	adds	r7, #28
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
 8002df6:	bf00      	nop
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	48000400 	.word	0x48000400
 8002e04:	48000800 	.word	0x48000800
 8002e08:	48000c00 	.word	0x48000c00
 8002e0c:	48001000 	.word	0x48001000
 8002e10:	48001400 	.word	0x48001400
 8002e14:	48001800 	.word	0x48001800
 8002e18:	40010400 	.word	0x40010400

08002e1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	887b      	ldrh	r3, [r7, #2]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d002      	beq.n	8002e3a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e34:	2301      	movs	r3, #1
 8002e36:	73fb      	strb	r3, [r7, #15]
 8002e38:	e001      	b.n	8002e3e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e5c:	787b      	ldrb	r3, [r7, #1]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e62:	887a      	ldrh	r2, [r7, #2]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e68:	e002      	b.n	8002e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e6a:	887a      	ldrh	r2, [r7, #2]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e8e:	887a      	ldrh	r2, [r7, #2]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4013      	ands	r3, r2
 8002e94:	041a      	lsls	r2, r3, #16
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	43d9      	mvns	r1, r3
 8002e9a:	887b      	ldrh	r3, [r7, #2]
 8002e9c:	400b      	ands	r3, r1
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	619a      	str	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e081      	b.n	8002fc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d106      	bne.n	8002edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7fe fe8e 	bl	8001bf8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2224      	movs	r2, #36	; 0x24
 8002ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0201 	bic.w	r2, r2, #1
 8002ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d107      	bne.n	8002f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f26:	609a      	str	r2, [r3, #8]
 8002f28:	e006      	b.n	8002f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d104      	bne.n	8002f4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	6812      	ldr	r2, [r2, #0]
 8002f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68da      	ldr	r2, [r3, #12]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69d9      	ldr	r1, [r3, #28]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1a      	ldr	r2, [r3, #32]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0201 	orr.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
	...

08002fd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	460b      	mov	r3, r1
 8002fde:	817b      	strh	r3, [r7, #10]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	2b20      	cmp	r3, #32
 8002fee:	f040 80da 	bne.w	80031a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <HAL_I2C_Master_Transmit+0x30>
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	e0d3      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003008:	f7ff fc1c 	bl	8002844 <HAL_GetTick>
 800300c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2319      	movs	r3, #25
 8003014:	2201      	movs	r2, #1
 8003016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 fbc6 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e0be      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2221      	movs	r2, #33	; 0x21
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2210      	movs	r2, #16
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	893a      	ldrh	r2, [r7, #8]
 800304a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29b      	uxth	r3, r3
 8003058:	2bff      	cmp	r3, #255	; 0xff
 800305a:	d90e      	bls.n	800307a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	22ff      	movs	r2, #255	; 0xff
 8003060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	b2da      	uxtb	r2, r3
 8003068:	8979      	ldrh	r1, [r7, #10]
 800306a:	4b51      	ldr	r3, [pc, #324]	; (80031b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 fd42 	bl	8003afc <I2C_TransferConfig>
 8003078:	e06c      	b.n	8003154 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	b2da      	uxtb	r2, r3
 800308a:	8979      	ldrh	r1, [r7, #10]
 800308c:	4b48      	ldr	r3, [pc, #288]	; (80031b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fd31 	bl	8003afc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800309a:	e05b      	b.n	8003154 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800309c:	697a      	ldr	r2, [r7, #20]
 800309e:	6a39      	ldr	r1, [r7, #32]
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fbc3 	bl	800382c <I2C_WaitOnTXISFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e07b      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	781a      	ldrb	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	1c5a      	adds	r2, r3, #1
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	3b01      	subs	r3, #1
 80030da:	b29a      	uxth	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d034      	beq.n	8003154 <HAL_I2C_Master_Transmit+0x184>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d130      	bne.n	8003154 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2180      	movs	r1, #128	; 0x80
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 fb55 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e04d      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29b      	uxth	r3, r3
 8003112:	2bff      	cmp	r3, #255	; 0xff
 8003114:	d90e      	bls.n	8003134 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	22ff      	movs	r2, #255	; 0xff
 800311a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	b2da      	uxtb	r2, r3
 8003122:	8979      	ldrh	r1, [r7, #10]
 8003124:	2300      	movs	r3, #0
 8003126:	9300      	str	r3, [sp, #0]
 8003128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800312c:	68f8      	ldr	r0, [r7, #12]
 800312e:	f000 fce5 	bl	8003afc <I2C_TransferConfig>
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29a      	uxth	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fcd4 	bl	8003afc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d19e      	bne.n	800309c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6a39      	ldr	r1, [r7, #32]
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 fba2 	bl	80038ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e01a      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8003186:	400b      	ands	r3, r1
 8003188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e000      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031a6:	2302      	movs	r3, #2
  }
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	80002000 	.word	0x80002000
 80031b4:	fe00e800 	.word	0xfe00e800

080031b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af02      	add	r7, sp, #8
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	4608      	mov	r0, r1
 80031c2:	4611      	mov	r1, r2
 80031c4:	461a      	mov	r2, r3
 80031c6:	4603      	mov	r3, r0
 80031c8:	817b      	strh	r3, [r7, #10]
 80031ca:	460b      	mov	r3, r1
 80031cc:	813b      	strh	r3, [r7, #8]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b20      	cmp	r3, #32
 80031dc:	f040 80f9 	bne.w	80033d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d002      	beq.n	80031ec <HAL_I2C_Mem_Write+0x34>
 80031e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0ed      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_I2C_Mem_Write+0x4e>
 8003202:	2302      	movs	r3, #2
 8003204:	e0e6      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800320e:	f7ff fb19 	bl	8002844 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	2319      	movs	r3, #25
 800321a:	2201      	movs	r2, #1
 800321c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003220:	68f8      	ldr	r0, [r7, #12]
 8003222:	f000 fac3 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0d1      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2221      	movs	r2, #33	; 0x21
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2240      	movs	r2, #64	; 0x40
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a3a      	ldr	r2, [r7, #32]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003258:	88f8      	ldrh	r0, [r7, #6]
 800325a:	893a      	ldrh	r2, [r7, #8]
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	4603      	mov	r3, r0
 8003268:	68f8      	ldr	r0, [r7, #12]
 800326a:	f000 f9d3 	bl	8003614 <I2C_RequestMemoryWrite>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0a9      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29b      	uxth	r3, r3
 8003286:	2bff      	cmp	r3, #255	; 0xff
 8003288:	d90e      	bls.n	80032a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22ff      	movs	r2, #255	; 0xff
 800328e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	b2da      	uxtb	r2, r3
 8003296:	8979      	ldrh	r1, [r7, #10]
 8003298:	2300      	movs	r3, #0
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f000 fc2b 	bl	8003afc <I2C_TransferConfig>
 80032a6:	e00f      	b.n	80032c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	68f8      	ldr	r0, [r7, #12]
 80032c4:	f000 fc1a 	bl	8003afc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f000 faad 	bl	800382c <I2C_WaitOnTXISFlagUntilTimeout>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e07b      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	781a      	ldrb	r2, [r3, #0]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	3b01      	subs	r3, #1
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d034      	beq.n	8003380 <HAL_I2C_Mem_Write+0x1c8>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331a:	2b00      	cmp	r3, #0
 800331c:	d130      	bne.n	8003380 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	2200      	movs	r2, #0
 8003326:	2180      	movs	r1, #128	; 0x80
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 fa3f 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d001      	beq.n	8003338 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e04d      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2bff      	cmp	r3, #255	; 0xff
 8003340:	d90e      	bls.n	8003360 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	22ff      	movs	r2, #255	; 0xff
 8003346:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	b2da      	uxtb	r2, r3
 800334e:	8979      	ldrh	r1, [r7, #10]
 8003350:	2300      	movs	r3, #0
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fbcf 	bl	8003afc <I2C_TransferConfig>
 800335e:	e00f      	b.n	8003380 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003364:	b29a      	uxth	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	b2da      	uxtb	r2, r3
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	2300      	movs	r3, #0
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f000 fbbe 	bl	8003afc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d19e      	bne.n	80032c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 fa8c 	bl	80038ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e01a      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2220      	movs	r2, #32
 80033a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_I2C_Mem_Write+0x224>)
 80033b2:	400b      	ands	r3, r1
 80033b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e000      	b.n	80033d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
  }
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	fe00e800 	.word	0xfe00e800

080033e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	461a      	mov	r2, r3
 80033ee:	4603      	mov	r3, r0
 80033f0:	817b      	strh	r3, [r7, #10]
 80033f2:	460b      	mov	r3, r1
 80033f4:	813b      	strh	r3, [r7, #8]
 80033f6:	4613      	mov	r3, r2
 80033f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b20      	cmp	r3, #32
 8003404:	f040 80fd 	bne.w	8003602 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003408:	6a3b      	ldr	r3, [r7, #32]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_I2C_Mem_Read+0x34>
 800340e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003410:	2b00      	cmp	r3, #0
 8003412:	d105      	bne.n	8003420 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f44f 7200 	mov.w	r2, #512	; 0x200
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0f1      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_I2C_Mem_Read+0x4e>
 800342a:	2302      	movs	r3, #2
 800342c:	e0ea      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003436:	f7ff fa05 	bl	8002844 <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2319      	movs	r3, #25
 8003442:	2201      	movs	r2, #1
 8003444:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f9af 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0d5      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2222      	movs	r2, #34	; 0x22
 800345c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2240      	movs	r2, #64	; 0x40
 8003464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a3a      	ldr	r2, [r7, #32]
 8003472:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003478:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003480:	88f8      	ldrh	r0, [r7, #6]
 8003482:	893a      	ldrh	r2, [r7, #8]
 8003484:	8979      	ldrh	r1, [r7, #10]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4603      	mov	r3, r0
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f913 	bl	80036bc <I2C_RequestMemoryRead>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d005      	beq.n	80034a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e0ad      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	2bff      	cmp	r3, #255	; 0xff
 80034b0:	d90e      	bls.n	80034d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	22ff      	movs	r2, #255	; 0xff
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	8979      	ldrh	r1, [r7, #10]
 80034c0:	4b52      	ldr	r3, [pc, #328]	; (800360c <HAL_I2C_Mem_Read+0x22c>)
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 fb17 	bl	8003afc <I2C_TransferConfig>
 80034ce:	e00f      	b.n	80034f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034de:	b2da      	uxtb	r2, r3
 80034e0:	8979      	ldrh	r1, [r7, #10]
 80034e2:	4b4a      	ldr	r3, [pc, #296]	; (800360c <HAL_I2C_Mem_Read+0x22c>)
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fb06 	bl	8003afc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f6:	2200      	movs	r2, #0
 80034f8:	2104      	movs	r1, #4
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f956 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07c      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d034      	beq.n	80035b0 <HAL_I2C_Mem_Read+0x1d0>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	2b00      	cmp	r3, #0
 800354c:	d130      	bne.n	80035b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003554:	2200      	movs	r2, #0
 8003556:	2180      	movs	r1, #128	; 0x80
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f000 f927 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 800355e:	4603      	mov	r3, r0
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	e04d      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d90e      	bls.n	8003590 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357c:	b2da      	uxtb	r2, r3
 800357e:	8979      	ldrh	r1, [r7, #10]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 fab7 	bl	8003afc <I2C_TransferConfig>
 800358e:	e00f      	b.n	80035b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	2300      	movs	r3, #0
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035aa:	68f8      	ldr	r0, [r7, #12]
 80035ac:	f000 faa6 	bl	8003afc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d19a      	bne.n	80034f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ba:	697a      	ldr	r2, [r7, #20]
 80035bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f974 	bl	80038ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e01a      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2220      	movs	r2, #32
 80035d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_I2C_Mem_Read+0x230>)
 80035e2:	400b      	ands	r3, r1
 80035e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	80002400 	.word	0x80002400
 8003610:	fe00e800 	.word	0xfe00e800

08003614 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af02      	add	r7, sp, #8
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	4608      	mov	r0, r1
 800361e:	4611      	mov	r1, r2
 8003620:	461a      	mov	r2, r3
 8003622:	4603      	mov	r3, r0
 8003624:	817b      	strh	r3, [r7, #10]
 8003626:	460b      	mov	r3, r1
 8003628:	813b      	strh	r3, [r7, #8]
 800362a:	4613      	mov	r3, r2
 800362c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800362e:	88fb      	ldrh	r3, [r7, #6]
 8003630:	b2da      	uxtb	r2, r3
 8003632:	8979      	ldrh	r1, [r7, #10]
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <I2C_RequestMemoryWrite+0xa4>)
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f000 fa5d 	bl	8003afc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003642:	69fa      	ldr	r2, [r7, #28]
 8003644:	69b9      	ldr	r1, [r7, #24]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f8f0 	bl	800382c <I2C_WaitOnTXISFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e02c      	b.n	80036b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d105      	bne.n	8003668 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800365c:	893b      	ldrh	r3, [r7, #8]
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	629a      	str	r2, [r3, #40]	; 0x28
 8003666:	e015      	b.n	8003694 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003668:	893b      	ldrh	r3, [r7, #8]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	b29b      	uxth	r3, r3
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	69b9      	ldr	r1, [r7, #24]
 800367a:	68f8      	ldr	r0, [r7, #12]
 800367c:	f000 f8d6 	bl	800382c <I2C_WaitOnTXISFlagUntilTimeout>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e012      	b.n	80036b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800368a:	893b      	ldrh	r3, [r7, #8]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	2200      	movs	r2, #0
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f000 f884 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	80002000 	.word	0x80002000

080036bc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	4608      	mov	r0, r1
 80036c6:	4611      	mov	r1, r2
 80036c8:	461a      	mov	r2, r3
 80036ca:	4603      	mov	r3, r0
 80036cc:	817b      	strh	r3, [r7, #10]
 80036ce:	460b      	mov	r3, r1
 80036d0:	813b      	strh	r3, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	8979      	ldrh	r1, [r7, #10]
 80036dc:	4b20      	ldr	r3, [pc, #128]	; (8003760 <I2C_RequestMemoryRead+0xa4>)
 80036de:	9300      	str	r3, [sp, #0]
 80036e0:	2300      	movs	r3, #0
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fa0a 	bl	8003afc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e8:	69fa      	ldr	r2, [r7, #28]
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f89d 	bl	800382c <I2C_WaitOnTXISFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e02c      	b.n	8003756 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003702:	893b      	ldrh	r3, [r7, #8]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	629a      	str	r2, [r3, #40]	; 0x28
 800370c:	e015      	b.n	800373a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800370e:	893b      	ldrh	r3, [r7, #8]
 8003710:	0a1b      	lsrs	r3, r3, #8
 8003712:	b29b      	uxth	r3, r3
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800371c:	69fa      	ldr	r2, [r7, #28]
 800371e:	69b9      	ldr	r1, [r7, #24]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f883 	bl	800382c <I2C_WaitOnTXISFlagUntilTimeout>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e012      	b.n	8003756 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003730:	893b      	ldrh	r3, [r7, #8]
 8003732:	b2da      	uxtb	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	2200      	movs	r2, #0
 8003742:	2140      	movs	r1, #64	; 0x40
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f831 	bl	80037ac <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e000      	b.n	8003756 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003754:	2300      	movs	r3, #0
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	80002000 	.word	0x80002000

08003764 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d103      	bne.n	8003782 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2200      	movs	r2, #0
 8003780:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b01      	cmp	r3, #1
 800378e:	d007      	beq.n	80037a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f042 0201 	orr.w	r2, r2, #1
 800379e:	619a      	str	r2, [r3, #24]
  }
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	603b      	str	r3, [r7, #0]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037bc:	e022      	b.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d01e      	beq.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c6:	f7ff f83d 	bl	8002844 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d302      	bcc.n	80037dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d113      	bne.n	8003804 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037e0:	f043 0220 	orr.w	r2, r3, #32
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e00f      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	4013      	ands	r3, r2
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	429a      	cmp	r2, r3
 8003812:	bf0c      	ite	eq
 8003814:	2301      	moveq	r3, #1
 8003816:	2300      	movne	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	461a      	mov	r2, r3
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	429a      	cmp	r2, r3
 8003820:	d0cd      	beq.n	80037be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3710      	adds	r7, #16
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003838:	e02c      	b.n	8003894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f000 f870 	bl	8003924 <I2C_IsErrorOccurred>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e02a      	b.n	80038a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d01e      	beq.n	8003894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fe fff5 	bl	8002844 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	68ba      	ldr	r2, [r7, #8]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d113      	bne.n	8003894 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f043 0220 	orr.w	r2, r3, #32
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e007      	b.n	80038a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0302 	and.w	r3, r3, #2
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d1cb      	bne.n	800383a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038b8:	e028      	b.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	68b9      	ldr	r1, [r7, #8]
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f000 f830 	bl	8003924 <I2C_IsErrorOccurred>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e026      	b.n	800391c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038ce:	f7fe ffb9 	bl	8002844 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	429a      	cmp	r2, r3
 80038dc:	d302      	bcc.n	80038e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d113      	bne.n	800390c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e007      	b.n	800391c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b20      	cmp	r3, #32
 8003918:	d1cf      	bne.n	80038ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
}
 800391c:	4618      	mov	r0, r3
 800391e:	3710      	adds	r7, #16
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}

08003924 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b08a      	sub	sp, #40	; 0x28
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800393e:	2300      	movs	r3, #0
 8003940:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	f003 0310 	and.w	r3, r3, #16
 800394c:	2b00      	cmp	r3, #0
 800394e:	d075      	beq.n	8003a3c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2210      	movs	r2, #16
 8003956:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003958:	e056      	b.n	8003a08 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d052      	beq.n	8003a08 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003962:	f7fe ff6f 	bl	8002844 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	429a      	cmp	r2, r3
 8003970:	d302      	bcc.n	8003978 <I2C_IsErrorOccurred+0x54>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d147      	bne.n	8003a08 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003982:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800398a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800399a:	d12e      	bne.n	80039fa <I2C_IsErrorOccurred+0xd6>
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039a2:	d02a      	beq.n	80039fa <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d027      	beq.n	80039fa <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80039b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80039ba:	f7fe ff43 	bl	8002844 <HAL_GetTick>
 80039be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039c0:	e01b      	b.n	80039fa <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80039c2:	f7fe ff3f 	bl	8002844 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b19      	cmp	r3, #25
 80039ce:	d914      	bls.n	80039fa <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d4:	f043 0220 	orr.w	r2, r3, #32
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	f003 0320 	and.w	r3, r3, #32
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d1dc      	bne.n	80039c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d003      	beq.n	8003a1e <I2C_IsErrorOccurred+0xfa>
 8003a16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d09d      	beq.n	800395a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003a2e:	6a3b      	ldr	r3, [r7, #32]
 8003a30:	f043 0304 	orr.w	r3, r3, #4
 8003a34:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00b      	beq.n	8003a66 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a5e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	f043 0308 	orr.w	r3, r3, #8
 8003a76:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a80:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00b      	beq.n	8003aaa <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a92:	6a3b      	ldr	r3, [r7, #32]
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d01c      	beq.n	8003aec <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f7ff fe56 	bl	8003764 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6859      	ldr	r1, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b0d      	ldr	r3, [pc, #52]	; (8003af8 <I2C_IsErrorOccurred+0x1d4>)
 8003ac4:	400b      	ands	r3, r1
 8003ac6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003acc:	6a3b      	ldr	r3, [r7, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3728      	adds	r7, #40	; 0x28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	fe00e800 	.word	0xfe00e800

08003afc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	817b      	strh	r3, [r7, #10]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b0e:	897b      	ldrh	r3, [r7, #10]
 8003b10:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b14:	7a7b      	ldrb	r3, [r7, #9]
 8003b16:	041b      	lsls	r3, r3, #16
 8003b18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b1c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b2a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	6a3b      	ldr	r3, [r7, #32]
 8003b34:	0d5b      	lsrs	r3, r3, #21
 8003b36:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <I2C_TransferConfig+0x60>)
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	ea02 0103 	and.w	r1, r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	03ff63ff 	.word	0x03ff63ff

08003b60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b083      	sub	sp, #12
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d138      	bne.n	8003be8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d101      	bne.n	8003b84 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b80:	2302      	movs	r3, #2
 8003b82:	e032      	b.n	8003bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 0201 	bic.w	r2, r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6819      	ldr	r1, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	e000      	b.n	8003bea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003be8:	2302      	movs	r3, #2
  }
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d139      	bne.n	8003c80 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e033      	b.n	8003c82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2224      	movs	r2, #36	; 0x24
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c48:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	021b      	lsls	r3, r3, #8
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f042 0201 	orr.w	r2, r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e000      	b.n	8003c82 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c80:	2302      	movs	r3, #2
  }
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c94:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cba:	d130      	bne.n	8003d1e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	4b23      	ldr	r3, [pc, #140]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc8:	d038      	beq.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cd2:	4a1e      	ldr	r2, [pc, #120]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cd8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cda:	4b1d      	ldr	r3, [pc, #116]	; (8003d50 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2232      	movs	r2, #50	; 0x32
 8003ce0:	fb02 f303 	mul.w	r3, r2, r3
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0c9b      	lsrs	r3, r3, #18
 8003cec:	3301      	adds	r3, #1
 8003cee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf0:	e002      	b.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfa:	695b      	ldr	r3, [r3, #20]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d04:	d102      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1f2      	bne.n	8003cf2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d0c:	4b0f      	ldr	r3, [pc, #60]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d0e:	695b      	ldr	r3, [r3, #20]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d18:	d110      	bne.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e00f      	b.n	8003d3e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2a:	d007      	beq.n	8003d3c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d2c:	4b07      	ldr	r3, [pc, #28]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d34:	4a05      	ldr	r2, [pc, #20]	; (8003d4c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d3a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40007000 	.word	0x40007000
 8003d50:	2000016c 	.word	0x2000016c
 8003d54:	431bde83 	.word	0x431bde83

08003d58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e3ca      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d6a:	4b97      	ldr	r3, [pc, #604]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f003 030c 	and.w	r3, r3, #12
 8003d72:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d74:	4b94      	ldr	r3, [pc, #592]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f000 80e4 	beq.w	8003f54 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_RCC_OscConfig+0x4a>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	2b0c      	cmp	r3, #12
 8003d96:	f040 808b 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	f040 8087 	bne.w	8003eb0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003da2:	4b89      	ldr	r3, [pc, #548]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_RCC_OscConfig+0x62>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e3a2      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a1a      	ldr	r2, [r3, #32]
 8003dbe:	4b82      	ldr	r3, [pc, #520]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x7c>
 8003dca:	4b7f      	ldr	r3, [pc, #508]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dd2:	e005      	b.n	8003de0 <HAL_RCC_OscConfig+0x88>
 8003dd4:	4b7c      	ldr	r3, [pc, #496]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d223      	bcs.n	8003e2c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fd1d 	bl	8004828 <RCC_SetFlashLatencyFromMSIRange>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e383      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003df8:	4b73      	ldr	r3, [pc, #460]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a72      	ldr	r2, [pc, #456]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	f043 0308 	orr.w	r3, r3, #8
 8003e02:	6013      	str	r3, [r2, #0]
 8003e04:	4b70      	ldr	r3, [pc, #448]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	496d      	ldr	r1, [pc, #436]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e16:	4b6c      	ldr	r3, [pc, #432]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69db      	ldr	r3, [r3, #28]
 8003e22:	021b      	lsls	r3, r3, #8
 8003e24:	4968      	ldr	r1, [pc, #416]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	604b      	str	r3, [r1, #4]
 8003e2a:	e025      	b.n	8003e78 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e2c:	4b66      	ldr	r3, [pc, #408]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a65      	ldr	r2, [pc, #404]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e32:	f043 0308 	orr.w	r3, r3, #8
 8003e36:	6013      	str	r3, [r2, #0]
 8003e38:	4b63      	ldr	r3, [pc, #396]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a1b      	ldr	r3, [r3, #32]
 8003e44:	4960      	ldr	r1, [pc, #384]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e46:	4313      	orrs	r3, r2
 8003e48:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e4a:	4b5f      	ldr	r3, [pc, #380]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	495b      	ldr	r1, [pc, #364]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e5e:	69bb      	ldr	r3, [r7, #24]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d109      	bne.n	8003e78 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fcdd 	bl	8004828 <RCC_SetFlashLatencyFromMSIRange>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e343      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e78:	f000 fc4a 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b52      	ldr	r3, [pc, #328]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 030f 	and.w	r3, r3, #15
 8003e88:	4950      	ldr	r1, [pc, #320]	; (8003fcc <HAL_RCC_OscConfig+0x274>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	4a4e      	ldr	r2, [pc, #312]	; (8003fd0 <HAL_RCC_OscConfig+0x278>)
 8003e96:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e98:	4b4e      	ldr	r3, [pc, #312]	; (8003fd4 <HAL_RCC_OscConfig+0x27c>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe fc81 	bl	80027a4 <HAL_InitTick>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003ea6:	7bfb      	ldrb	r3, [r7, #15]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d052      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003eac:	7bfb      	ldrb	r3, [r7, #15]
 8003eae:	e327      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d032      	beq.n	8003f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003eb8:	4b43      	ldr	r3, [pc, #268]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a42      	ldr	r2, [pc, #264]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fcbe 	bl	8002844 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fcba 	bl	8002844 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e310      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ede:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eea:	4b37      	ldr	r3, [pc, #220]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	f043 0308 	orr.w	r3, r3, #8
 8003ef4:	6013      	str	r3, [r2, #0]
 8003ef6:	4b34      	ldr	r3, [pc, #208]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	4931      	ldr	r1, [pc, #196]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f08:	4b2f      	ldr	r3, [pc, #188]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	021b      	lsls	r3, r3, #8
 8003f16:	492c      	ldr	r1, [pc, #176]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	604b      	str	r3, [r1, #4]
 8003f1c:	e01a      	b.n	8003f54 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f1e:	4b2a      	ldr	r3, [pc, #168]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a29      	ldr	r2, [pc, #164]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f24:	f023 0301 	bic.w	r3, r3, #1
 8003f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fc8b 	bl	8002844 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f32:	f7fe fc87 	bl	8002844 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e2dd      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f44:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1f0      	bne.n	8003f32 <HAL_RCC_OscConfig+0x1da>
 8003f50:	e000      	b.n	8003f54 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f52:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d074      	beq.n	800404a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x21a>
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b0c      	cmp	r3, #12
 8003f6a:	d10e      	bne.n	8003f8a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b03      	cmp	r3, #3
 8003f70:	d10b      	bne.n	8003f8a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f72:	4b15      	ldr	r3, [pc, #84]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d064      	beq.n	8004048 <HAL_RCC_OscConfig+0x2f0>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d160      	bne.n	8004048 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e2ba      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f92:	d106      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x24a>
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0b      	ldr	r2, [pc, #44]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	e026      	b.n	8003ff0 <HAL_RCC_OscConfig+0x298>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003faa:	d115      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x280>
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a05      	ldr	r2, [pc, #20]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb6:	6013      	str	r3, [r2, #0]
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a02      	ldr	r2, [pc, #8]	; (8003fc8 <HAL_RCC_OscConfig+0x270>)
 8003fbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	e014      	b.n	8003ff0 <HAL_RCC_OscConfig+0x298>
 8003fc6:	bf00      	nop
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	08007a58 	.word	0x08007a58
 8003fd0:	2000016c 	.word	0x2000016c
 8003fd4:	20000170 	.word	0x20000170
 8003fd8:	4ba0      	ldr	r3, [pc, #640]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a9f      	ldr	r2, [pc, #636]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	4b9d      	ldr	r3, [pc, #628]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a9c      	ldr	r2, [pc, #624]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8003fea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d013      	beq.n	8004020 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe fc24 	bl	8002844 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004000:	f7fe fc20 	bl	8002844 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b64      	cmp	r3, #100	; 0x64
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e276      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004012:	4b92      	ldr	r3, [pc, #584]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d0f0      	beq.n	8004000 <HAL_RCC_OscConfig+0x2a8>
 800401e:	e014      	b.n	800404a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004020:	f7fe fc10 	bl	8002844 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004028:	f7fe fc0c 	bl	8002844 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b64      	cmp	r3, #100	; 0x64
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e262      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800403a:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1f0      	bne.n	8004028 <HAL_RCC_OscConfig+0x2d0>
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004048:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d060      	beq.n	8004118 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	2b04      	cmp	r3, #4
 800405a:	d005      	beq.n	8004068 <HAL_RCC_OscConfig+0x310>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d119      	bne.n	8004096 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d116      	bne.n	8004096 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004068:	4b7c      	ldr	r3, [pc, #496]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_RCC_OscConfig+0x328>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e23f      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004080:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	4973      	ldr	r1, [pc, #460]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004090:	4313      	orrs	r3, r2
 8004092:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004094:	e040      	b.n	8004118 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	68db      	ldr	r3, [r3, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d023      	beq.n	80040e6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409e:	4b6f      	ldr	r3, [pc, #444]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fe fbcb 	bl	8002844 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fe fbc7 	bl	8002844 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e21d      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c4:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b62      	ldr	r3, [pc, #392]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	495f      	ldr	r1, [pc, #380]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
 80040e4:	e018      	b.n	8004118 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b5d      	ldr	r3, [pc, #372]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a5c      	ldr	r2, [pc, #368]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80040ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f2:	f7fe fba7 	bl	8002844 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fa:	f7fe fba3 	bl	8002844 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e1f9      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410c:	4b53      	ldr	r3, [pc, #332]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1f0      	bne.n	80040fa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d03c      	beq.n	800419e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d01c      	beq.n	8004166 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800412c:	4b4b      	ldr	r3, [pc, #300]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004132:	4a4a      	ldr	r2, [pc, #296]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413c:	f7fe fb82 	bl	8002844 <HAL_GetTick>
 8004140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004142:	e008      	b.n	8004156 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004144:	f7fe fb7e 	bl	8002844 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1d4      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0ef      	beq.n	8004144 <HAL_RCC_OscConfig+0x3ec>
 8004164:	e01b      	b.n	800419e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004166:	4b3d      	ldr	r3, [pc, #244]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800416c:	4a3b      	ldr	r2, [pc, #236]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004176:	f7fe fb65 	bl	8002844 <HAL_GetTick>
 800417a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800417c:	e008      	b.n	8004190 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800417e:	f7fe fb61 	bl	8002844 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e1b7      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004190:	4b32      	ldr	r3, [pc, #200]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1ef      	bne.n	800417e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f000 80a6 	beq.w	80042f8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041b0:	4b2a      	ldr	r3, [pc, #168]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10d      	bne.n	80041d8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041bc:	4b27      	ldr	r3, [pc, #156]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041c6:	6593      	str	r3, [r2, #88]	; 0x58
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_RCC_OscConfig+0x504>)
 80041ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d0:	60bb      	str	r3, [r7, #8]
 80041d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041d8:	4b21      	ldr	r3, [pc, #132]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d118      	bne.n	8004216 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041e4:	4b1e      	ldr	r3, [pc, #120]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1d      	ldr	r2, [pc, #116]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 80041ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f0:	f7fe fb28 	bl	8002844 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f6:	e008      	b.n	800420a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041f8:	f7fe fb24 	bl	8002844 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d901      	bls.n	800420a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e17a      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800420a:	4b15      	ldr	r3, [pc, #84]	; (8004260 <HAL_RCC_OscConfig+0x508>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d0f0      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d108      	bne.n	8004230 <HAL_RCC_OscConfig+0x4d8>
 800421e:	4b0f      	ldr	r3, [pc, #60]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004224:	4a0d      	ldr	r2, [pc, #52]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004226:	f043 0301 	orr.w	r3, r3, #1
 800422a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800422e:	e029      	b.n	8004284 <HAL_RCC_OscConfig+0x52c>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b05      	cmp	r3, #5
 8004236:	d115      	bne.n	8004264 <HAL_RCC_OscConfig+0x50c>
 8004238:	4b08      	ldr	r3, [pc, #32]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a07      	ldr	r2, [pc, #28]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004248:	4b04      	ldr	r3, [pc, #16]	; (800425c <HAL_RCC_OscConfig+0x504>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424e:	4a03      	ldr	r2, [pc, #12]	; (800425c <HAL_RCC_OscConfig+0x504>)
 8004250:	f043 0301 	orr.w	r3, r3, #1
 8004254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004258:	e014      	b.n	8004284 <HAL_RCC_OscConfig+0x52c>
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	40007000 	.word	0x40007000
 8004264:	4b9c      	ldr	r3, [pc, #624]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426a:	4a9b      	ldr	r2, [pc, #620]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004274:	4b98      	ldr	r3, [pc, #608]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a97      	ldr	r2, [pc, #604]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d016      	beq.n	80042ba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428c:	f7fe fada 	bl	8002844 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fe fad6 	bl	8002844 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e12a      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042aa:	4b8b      	ldr	r3, [pc, #556]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d0ed      	beq.n	8004294 <HAL_RCC_OscConfig+0x53c>
 80042b8:	e015      	b.n	80042e6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fe fac3 	bl	8002844 <HAL_GetTick>
 80042be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c0:	e00a      	b.n	80042d8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c2:	f7fe fabf 	bl	8002844 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e113      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d8:	4b7f      	ldr	r3, [pc, #508]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1ed      	bne.n	80042c2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d105      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042ec:	4b7a      	ldr	r3, [pc, #488]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	4a79      	ldr	r2, [pc, #484]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80042f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042f6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80fe 	beq.w	80044fe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004306:	2b02      	cmp	r3, #2
 8004308:	f040 80d0 	bne.w	80044ac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800430c:	4b72      	ldr	r3, [pc, #456]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f003 0203 	and.w	r2, r3, #3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	429a      	cmp	r2, r3
 800431e:	d130      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	3b01      	subs	r3, #1
 800432c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800432e:	429a      	cmp	r2, r3
 8004330:	d127      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d11f      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800434c:	2a07      	cmp	r2, #7
 800434e:	bf14      	ite	ne
 8004350:	2201      	movne	r2, #1
 8004352:	2200      	moveq	r2, #0
 8004354:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004356:	4293      	cmp	r3, r2
 8004358:	d113      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004364:	085b      	lsrs	r3, r3, #1
 8004366:	3b01      	subs	r3, #1
 8004368:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d109      	bne.n	8004382 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	085b      	lsrs	r3, r3, #1
 800437a:	3b01      	subs	r3, #1
 800437c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800437e:	429a      	cmp	r2, r3
 8004380:	d06e      	beq.n	8004460 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d069      	beq.n	800445c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004388:	4b53      	ldr	r3, [pc, #332]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004394:	4b50      	ldr	r3, [pc, #320]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e0ad      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043a4:	4b4c      	ldr	r3, [pc, #304]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a4b      	ldr	r2, [pc, #300]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043b0:	f7fe fa48 	bl	8002844 <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe fa44 	bl	8002844 <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e09a      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043ca:	4b43      	ldr	r3, [pc, #268]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043d6:	4b40      	ldr	r3, [pc, #256]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80043d8:	68da      	ldr	r2, [r3, #12]
 80043da:	4b40      	ldr	r3, [pc, #256]	; (80044dc <HAL_RCC_OscConfig+0x784>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043e6:	3a01      	subs	r2, #1
 80043e8:	0112      	lsls	r2, r2, #4
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f0:	0212      	lsls	r2, r2, #8
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043f8:	0852      	lsrs	r2, r2, #1
 80043fa:	3a01      	subs	r2, #1
 80043fc:	0552      	lsls	r2, r2, #21
 80043fe:	4311      	orrs	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004404:	0852      	lsrs	r2, r2, #1
 8004406:	3a01      	subs	r2, #1
 8004408:	0652      	lsls	r2, r2, #25
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004410:	0912      	lsrs	r2, r2, #4
 8004412:	0452      	lsls	r2, r2, #17
 8004414:	430a      	orrs	r2, r1
 8004416:	4930      	ldr	r1, [pc, #192]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004418:	4313      	orrs	r3, r2
 800441a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a2d      	ldr	r2, [pc, #180]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004422:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004426:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004428:	4b2b      	ldr	r3, [pc, #172]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	4a2a      	ldr	r2, [pc, #168]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800442e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004432:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004434:	f7fe fa06 	bl	8002844 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe fa02 	bl	8002844 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e058      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444e:	4b22      	ldr	r3, [pc, #136]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800445a:	e050      	b.n	80044fe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e04f      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004468:	2b00      	cmp	r3, #0
 800446a:	d148      	bne.n	80044fe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800446c:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a19      	ldr	r2, [pc, #100]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 8004472:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a16      	ldr	r2, [pc, #88]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 800447e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004482:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004484:	f7fe f9de 	bl	8002844 <HAL_GetTick>
 8004488:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800448a:	e008      	b.n	800449e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800448c:	f7fe f9da 	bl	8002844 <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	2b02      	cmp	r3, #2
 8004498:	d901      	bls.n	800449e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800449a:	2303      	movs	r3, #3
 800449c:	e030      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d0f0      	beq.n	800448c <HAL_RCC_OscConfig+0x734>
 80044aa:	e028      	b.n	80044fe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	d023      	beq.n	80044fa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a08      	ldr	r2, [pc, #32]	; (80044d8 <HAL_RCC_OscConfig+0x780>)
 80044b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe f9c1 	bl	8002844 <HAL_GetTick>
 80044c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c4:	e00c      	b.n	80044e0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044c6:	f7fe f9bd 	bl	8002844 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d905      	bls.n	80044e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e013      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
 80044d8:	40021000 	.word	0x40021000
 80044dc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044e0:	4b09      	ldr	r3, [pc, #36]	; (8004508 <HAL_RCC_OscConfig+0x7b0>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1ec      	bne.n	80044c6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044ec:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_OscConfig+0x7b0>)
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	4905      	ldr	r1, [pc, #20]	; (8004508 <HAL_RCC_OscConfig+0x7b0>)
 80044f2:	4b06      	ldr	r3, [pc, #24]	; (800450c <HAL_RCC_OscConfig+0x7b4>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	60cb      	str	r3, [r1, #12]
 80044f8:	e001      	b.n	80044fe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	feeefffc 	.word	0xfeeefffc

08004510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0e7      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b75      	ldr	r3, [pc, #468]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d910      	bls.n	8004554 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b72      	ldr	r3, [pc, #456]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f023 0207 	bic.w	r2, r3, #7
 800453a:	4970      	ldr	r1, [pc, #448]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	4313      	orrs	r3, r2
 8004540:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004542:	4b6e      	ldr	r3, [pc, #440]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0307 	and.w	r3, r3, #7
 800454a:	683a      	ldr	r2, [r7, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d001      	beq.n	8004554 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e0cf      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b00      	cmp	r3, #0
 800455e:	d010      	beq.n	8004582 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	4b66      	ldr	r3, [pc, #408]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456c:	429a      	cmp	r2, r3
 800456e:	d908      	bls.n	8004582 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004570:	4b63      	ldr	r3, [pc, #396]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4960      	ldr	r1, [pc, #384]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d04c      	beq.n	8004628 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b03      	cmp	r3, #3
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004596:	4b5a      	ldr	r3, [pc, #360]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d121      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e0a6      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80045ae:	4b54      	ldr	r3, [pc, #336]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d115      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e09a      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d107      	bne.n	80045d6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045c6:	4b4e      	ldr	r3, [pc, #312]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e08e      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045d6:	4b4a      	ldr	r3, [pc, #296]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e086      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045e6:	4b46      	ldr	r3, [pc, #280]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 0203 	bic.w	r2, r3, #3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4943      	ldr	r1, [pc, #268]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f8:	f7fe f924 	bl	8002844 <HAL_GetTick>
 80045fc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	e00a      	b.n	8004616 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004600:	f7fe f920 	bl	8002844 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	f241 3288 	movw	r2, #5000	; 0x1388
 800460e:	4293      	cmp	r3, r2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e06e      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	4b3a      	ldr	r3, [pc, #232]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 020c 	and.w	r2, r3, #12
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	429a      	cmp	r2, r3
 8004626:	d1eb      	bne.n	8004600 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d010      	beq.n	8004656 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	4b31      	ldr	r3, [pc, #196]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004640:	429a      	cmp	r2, r3
 8004642:	d208      	bcs.n	8004656 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b2e      	ldr	r3, [pc, #184]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	492b      	ldr	r1, [pc, #172]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004656:	4b29      	ldr	r3, [pc, #164]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d210      	bcs.n	8004686 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004664:	4b25      	ldr	r3, [pc, #148]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 0207 	bic.w	r2, r3, #7
 800466c:	4923      	ldr	r1, [pc, #140]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	4313      	orrs	r3, r2
 8004672:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004674:	4b21      	ldr	r3, [pc, #132]	; (80046fc <HAL_RCC_ClockConfig+0x1ec>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d001      	beq.n	8004686 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e036      	b.n	80046f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004692:	4b1b      	ldr	r3, [pc, #108]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	4918      	ldr	r1, [pc, #96]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d009      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046b0:	4b13      	ldr	r3, [pc, #76]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	691b      	ldr	r3, [r3, #16]
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4910      	ldr	r1, [pc, #64]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046c4:	f000 f824 	bl	8004710 <HAL_RCC_GetSysClockFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b0d      	ldr	r3, [pc, #52]	; (8004700 <HAL_RCC_ClockConfig+0x1f0>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 030f 	and.w	r3, r3, #15
 80046d4:	490b      	ldr	r1, [pc, #44]	; (8004704 <HAL_RCC_ClockConfig+0x1f4>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	f003 031f 	and.w	r3, r3, #31
 80046dc:	fa22 f303 	lsr.w	r3, r2, r3
 80046e0:	4a09      	ldr	r2, [pc, #36]	; (8004708 <HAL_RCC_ClockConfig+0x1f8>)
 80046e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046e4:	4b09      	ldr	r3, [pc, #36]	; (800470c <HAL_RCC_ClockConfig+0x1fc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fe f85b 	bl	80027a4 <HAL_InitTick>
 80046ee:	4603      	mov	r3, r0
 80046f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80046f2:	7afb      	ldrb	r3, [r7, #11]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40022000 	.word	0x40022000
 8004700:	40021000 	.word	0x40021000
 8004704:	08007a58 	.word	0x08007a58
 8004708:	2000016c 	.word	0x2000016c
 800470c:	20000170 	.word	0x20000170

08004710 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b089      	sub	sp, #36	; 0x24
 8004714:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	2300      	movs	r3, #0
 800471c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800471e:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f003 030c 	and.w	r3, r3, #12
 8004726:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	f003 0303 	and.w	r3, r3, #3
 8004730:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_RCC_GetSysClockFreq+0x34>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b0c      	cmp	r3, #12
 800473c:	d121      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d11e      	bne.n	8004782 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004744:	4b34      	ldr	r3, [pc, #208]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0308 	and.w	r3, r3, #8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e005      	b.n	800476c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004760:	4b2d      	ldr	r3, [pc, #180]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <HAL_RCC_GetSysClockFreq+0x10c>)
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004774:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10d      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004780:	e00a      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d102      	bne.n	800478e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004788:	4b25      	ldr	r3, [pc, #148]	; (8004820 <HAL_RCC_GetSysClockFreq+0x110>)
 800478a:	61bb      	str	r3, [r7, #24]
 800478c:	e004      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d101      	bne.n	8004798 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004794:	4b23      	ldr	r3, [pc, #140]	; (8004824 <HAL_RCC_GetSysClockFreq+0x114>)
 8004796:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	2b0c      	cmp	r3, #12
 800479c:	d134      	bne.n	8004808 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800479e:	4b1e      	ldr	r3, [pc, #120]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	f003 0303 	and.w	r3, r3, #3
 80047a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d003      	beq.n	80047b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	2b03      	cmp	r3, #3
 80047b2:	d003      	beq.n	80047bc <HAL_RCC_GetSysClockFreq+0xac>
 80047b4:	e005      	b.n	80047c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80047b6:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_RCC_GetSysClockFreq+0x110>)
 80047b8:	617b      	str	r3, [r7, #20]
      break;
 80047ba:	e005      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <HAL_RCC_GetSysClockFreq+0x114>)
 80047be:	617b      	str	r3, [r7, #20]
      break;
 80047c0:	e002      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	617b      	str	r3, [r7, #20]
      break;
 80047c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c8:	4b13      	ldr	r3, [pc, #76]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	3301      	adds	r3, #1
 80047d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047d6:	4b10      	ldr	r3, [pc, #64]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0a1b      	lsrs	r3, r3, #8
 80047dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	fb03 f202 	mul.w	r2, r3, r2
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <HAL_RCC_GetSysClockFreq+0x108>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	0e5b      	lsrs	r3, r3, #25
 80047f4:	f003 0303 	and.w	r3, r3, #3
 80047f8:	3301      	adds	r3, #1
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	fbb2 f3f3 	udiv	r3, r2, r3
 8004806:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004808:	69bb      	ldr	r3, [r7, #24]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3724      	adds	r7, #36	; 0x24
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	40021000 	.word	0x40021000
 800481c:	08007a68 	.word	0x08007a68
 8004820:	00f42400 	.word	0x00f42400
 8004824:	007a1200 	.word	0x007a1200

08004828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004830:	2300      	movs	r3, #0
 8004832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004834:	4b2a      	ldr	r3, [pc, #168]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004840:	f7ff fa26 	bl	8003c90 <HAL_PWREx_GetVoltageRange>
 8004844:	6178      	str	r0, [r7, #20]
 8004846:	e014      	b.n	8004872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004848:	4b25      	ldr	r3, [pc, #148]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484c:	4a24      	ldr	r2, [pc, #144]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800484e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004852:	6593      	str	r3, [r2, #88]	; 0x58
 8004854:	4b22      	ldr	r3, [pc, #136]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004860:	f7ff fa16 	bl	8003c90 <HAL_PWREx_GetVoltageRange>
 8004864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004866:	4b1e      	ldr	r3, [pc, #120]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486a:	4a1d      	ldr	r2, [pc, #116]	; (80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800486c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004870:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004878:	d10b      	bne.n	8004892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d919      	bls.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2ba0      	cmp	r3, #160	; 0xa0
 8004884:	d902      	bls.n	800488c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004886:	2302      	movs	r3, #2
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	e013      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800488c:	2301      	movs	r3, #1
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e010      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b80      	cmp	r3, #128	; 0x80
 8004896:	d902      	bls.n	800489e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004898:	2303      	movs	r3, #3
 800489a:	613b      	str	r3, [r7, #16]
 800489c:	e00a      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2b80      	cmp	r3, #128	; 0x80
 80048a2:	d102      	bne.n	80048aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048a4:	2302      	movs	r3, #2
 80048a6:	613b      	str	r3, [r7, #16]
 80048a8:	e004      	b.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b70      	cmp	r3, #112	; 0x70
 80048ae:	d101      	bne.n	80048b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048b0:	2301      	movs	r3, #1
 80048b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048b4:	4b0b      	ldr	r3, [pc, #44]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f023 0207 	bic.w	r2, r3, #7
 80048bc:	4909      	ldr	r1, [pc, #36]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d001      	beq.n	80048d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3718      	adds	r7, #24
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40022000 	.word	0x40022000

080048e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048f0:	2300      	movs	r3, #0
 80048f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048f4:	2300      	movs	r3, #0
 80048f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004900:	2b00      	cmp	r3, #0
 8004902:	d041      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004908:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800490c:	d02a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800490e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004912:	d824      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004918:	d008      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800491a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800491e:	d81e      	bhi.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004920:	2b00      	cmp	r3, #0
 8004922:	d00a      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004928:	d010      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800492a:	e018      	b.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800492c:	4b86      	ldr	r3, [pc, #536]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	4a85      	ldr	r2, [pc, #532]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004938:	e015      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3304      	adds	r3, #4
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fa8b 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800494a:	e00c      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3320      	adds	r3, #32
 8004950:	2100      	movs	r1, #0
 8004952:	4618      	mov	r0, r3
 8004954:	f000 fb76 	bl	8005044 <RCCEx_PLLSAI2_Config>
 8004958:	4603      	mov	r3, r0
 800495a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800495c:	e003      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	74fb      	strb	r3, [r7, #19]
      break;
 8004962:	e000      	b.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004966:	7cfb      	ldrb	r3, [r7, #19]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10b      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800496c:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800497a:	4973      	ldr	r1, [pc, #460]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d041      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800499c:	d02a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800499e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049a2:	d824      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049a8:	d008      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ae:	d81e      	bhi.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80049b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b8:	d010      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049ba:	e018      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049bc:	4b62      	ldr	r3, [pc, #392]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	4a61      	ldr	r2, [pc, #388]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049c8:	e015      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	3304      	adds	r3, #4
 80049ce:	2100      	movs	r1, #0
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 fa43 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 80049d6:	4603      	mov	r3, r0
 80049d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049da:	e00c      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	3320      	adds	r3, #32
 80049e0:	2100      	movs	r1, #0
 80049e2:	4618      	mov	r0, r3
 80049e4:	f000 fb2e 	bl	8005044 <RCCEx_PLLSAI2_Config>
 80049e8:	4603      	mov	r3, r0
 80049ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80049ec:	e003      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	74fb      	strb	r3, [r7, #19]
      break;
 80049f2:	e000      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80049f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f6:	7cfb      	ldrb	r3, [r7, #19]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10b      	bne.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049fc:	4b52      	ldr	r3, [pc, #328]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a0a:	494f      	ldr	r1, [pc, #316]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a12:	e001      	b.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a14:	7cfb      	ldrb	r3, [r7, #19]
 8004a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f000 80a0 	beq.w	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a26:	2300      	movs	r3, #0
 8004a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a2a:	4b47      	ldr	r3, [pc, #284]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a40:	4b41      	ldr	r3, [pc, #260]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a44:	4a40      	ldr	r2, [pc, #256]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a4c:	4b3e      	ldr	r3, [pc, #248]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a54:	60bb      	str	r3, [r7, #8]
 8004a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a5c:	4b3b      	ldr	r3, [pc, #236]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a3a      	ldr	r2, [pc, #232]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a68:	f7fd feec 	bl	8002844 <HAL_GetTick>
 8004a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a6e:	e009      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a70:	f7fd fee8 	bl	8002844 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d902      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	74fb      	strb	r3, [r7, #19]
        break;
 8004a82:	e005      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004a84:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ef      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d15c      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a96:	4b2c      	ldr	r3, [pc, #176]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01f      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d019      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ac6:	4a20      	ldr	r2, [pc, #128]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004ad0:	4b1d      	ldr	r3, [pc, #116]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad6:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ae0:	4a19      	ldr	r2, [pc, #100]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af2:	f7fd fea7 	bl	8002844 <HAL_GetTick>
 8004af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004af8:	e00b      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afa:	f7fd fea3 	bl	8002844 <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d902      	bls.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b10:	e006      	b.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b12:	4b0d      	ldr	r3, [pc, #52]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d0ec      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10c      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b36:	4904      	ldr	r1, [pc, #16]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b3e:	e009      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b40:	7cfb      	ldrb	r3, [r7, #19]
 8004b42:	74bb      	strb	r3, [r7, #18]
 8004b44:	e006      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b54:	7c7b      	ldrb	r3, [r7, #17]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d105      	bne.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b5a:	4ba1      	ldr	r3, [pc, #644]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b5e:	4aa0      	ldr	r2, [pc, #640]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00a      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b72:	4b9b      	ldr	r3, [pc, #620]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b78:	f023 0203 	bic.w	r2, r3, #3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b80:	4997      	ldr	r1, [pc, #604]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00a      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b94:	4b92      	ldr	r3, [pc, #584]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	f023 020c 	bic.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	498f      	ldr	r1, [pc, #572]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004bb6:	4b8a      	ldr	r3, [pc, #552]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	4986      	ldr	r1, [pc, #536]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 0308 	and.w	r3, r3, #8
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00a      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004bd8:	4b81      	ldr	r3, [pc, #516]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	497e      	ldr	r1, [pc, #504]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0310 	and.w	r3, r3, #16
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004bfa:	4b79      	ldr	r3, [pc, #484]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c08:	4975      	ldr	r1, [pc, #468]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0320 	and.w	r3, r3, #32
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c1c:	4b70      	ldr	r3, [pc, #448]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2a:	496d      	ldr	r1, [pc, #436]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c3e:	4b68      	ldr	r3, [pc, #416]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c4c:	4964      	ldr	r1, [pc, #400]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d00a      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c60:	4b5f      	ldr	r3, [pc, #380]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c6e:	495c      	ldr	r1, [pc, #368]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004c82:	4b57      	ldr	r3, [pc, #348]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	4953      	ldr	r1, [pc, #332]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ca4:	4b4e      	ldr	r3, [pc, #312]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb2:	494b      	ldr	r1, [pc, #300]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cc6:	4b46      	ldr	r3, [pc, #280]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd4:	4942      	ldr	r1, [pc, #264]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d028      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004ce8:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004cf6:	493a      	ldr	r1, [pc, #232]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	4a34      	ldr	r2, [pc, #208]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d12:	60d3      	str	r3, [r2, #12]
 8004d14:	e011      	b.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d1e:	d10c      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3304      	adds	r3, #4
 8004d24:	2101      	movs	r1, #1
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f898 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d30:	7cfb      	ldrb	r3, [r7, #19]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* set overall return value */
        status = ret;
 8004d36:	7cfb      	ldrb	r3, [r7, #19]
 8004d38:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d028      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d46:	4b26      	ldr	r3, [pc, #152]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d54:	4922      	ldr	r1, [pc, #136]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d64:	d106      	bne.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d66:	4b1e      	ldr	r3, [pc, #120]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	4a1d      	ldr	r2, [pc, #116]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d70:	60d3      	str	r3, [r2, #12]
 8004d72:	e011      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	3304      	adds	r3, #4
 8004d82:	2101      	movs	r1, #1
 8004d84:	4618      	mov	r0, r3
 8004d86:	f000 f869 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d001      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004d94:	7cfb      	ldrb	r3, [r7, #19]
 8004d96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d031      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x520>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004da4:	4b0e      	ldr	r3, [pc, #56]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004daa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	490b      	ldr	r1, [pc, #44]	; (8004de0 <HAL_RCCEx_PeriphCLKConfig+0x4f8>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dc2:	d10f      	bne.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	3304      	adds	r3, #4
 8004dc8:	2102      	movs	r1, #2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f000 f846 	bl	8004e5c <RCCEx_PLLSAI1_Config>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dd4:	7cfb      	ldrb	r3, [r7, #19]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004dda:	7cfb      	ldrb	r3, [r7, #19]
 8004ddc:	74bb      	strb	r3, [r7, #18]
 8004dde:	e013      	b.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8004de0:	40021000 	.word	0x40021000
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004de8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dec:	d10c      	bne.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3320      	adds	r3, #32
 8004df2:	2102      	movs	r1, #2
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 f925 	bl	8005044 <RCCEx_PLLSAI2_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dfe:	7cfb      	ldrb	r3, [r7, #19]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d001      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x520>
      {
        /* set overall return value */
        status = ret;
 8004e04:	7cfb      	ldrb	r3, [r7, #19]
 8004e06:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x542>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e14:	4b10      	ldr	r3, [pc, #64]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e1a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e22:	490d      	ldr	r1, [pc, #52]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x564>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e36:	4b08      	ldr	r3, [pc, #32]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e44:	4904      	ldr	r1, [pc, #16]	; (8004e58 <HAL_RCCEx_PeriphCLKConfig+0x570>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004e4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	40021000 	.word	0x40021000

08004e5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e66:	2300      	movs	r3, #0
 8004e68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e6a:	4b75      	ldr	r3, [pc, #468]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d018      	beq.n	8004ea8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004e76:	4b72      	ldr	r3, [pc, #456]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f003 0203 	and.w	r2, r3, #3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d10d      	bne.n	8004ea2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
       ||
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d009      	beq.n	8004ea2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e8e:	4b6c      	ldr	r3, [pc, #432]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	091b      	lsrs	r3, r3, #4
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d047      	beq.n	8004f32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	73fb      	strb	r3, [r7, #15]
 8004ea6:	e044      	b.n	8004f32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b03      	cmp	r3, #3
 8004eae:	d018      	beq.n	8004ee2 <RCCEx_PLLSAI1_Config+0x86>
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d825      	bhi.n	8004f00 <RCCEx_PLLSAI1_Config+0xa4>
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d002      	beq.n	8004ebe <RCCEx_PLLSAI1_Config+0x62>
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d009      	beq.n	8004ed0 <RCCEx_PLLSAI1_Config+0x74>
 8004ebc:	e020      	b.n	8004f00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ebe:	4b60      	ldr	r3, [pc, #384]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d11d      	bne.n	8004f06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ece:	e01a      	b.n	8004f06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ed0:	4b5b      	ldr	r3, [pc, #364]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d116      	bne.n	8004f0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee0:	e013      	b.n	8004f0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ee2:	4b57      	ldr	r3, [pc, #348]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10f      	bne.n	8004f0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eee:	4b54      	ldr	r3, [pc, #336]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004efe:	e006      	b.n	8004f0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	e004      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f06:	bf00      	nop
 8004f08:	e002      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e000      	b.n	8004f10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004f0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f10:	7bfb      	ldrb	r3, [r7, #15]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d10d      	bne.n	8004f32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f16:	4b4a      	ldr	r3, [pc, #296]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6819      	ldr	r1, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	430b      	orrs	r3, r1
 8004f2c:	4944      	ldr	r1, [pc, #272]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d17d      	bne.n	8005034 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004f38:	4b41      	ldr	r3, [pc, #260]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a40      	ldr	r2, [pc, #256]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f44:	f7fd fc7e 	bl	8002844 <HAL_GetTick>
 8004f48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f4a:	e009      	b.n	8004f60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f4c:	f7fd fc7a 	bl	8002844 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d902      	bls.n	8004f60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f5e:	e005      	b.n	8004f6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004f60:	4b37      	ldr	r3, [pc, #220]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ef      	bne.n	8004f4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d160      	bne.n	8005034 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d111      	bne.n	8004f9c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f78:	4b31      	ldr	r3, [pc, #196]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6892      	ldr	r2, [r2, #8]
 8004f88:	0211      	lsls	r1, r2, #8
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68d2      	ldr	r2, [r2, #12]
 8004f8e:	0912      	lsrs	r2, r2, #4
 8004f90:	0452      	lsls	r2, r2, #17
 8004f92:	430a      	orrs	r2, r1
 8004f94:	492a      	ldr	r1, [pc, #168]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	610b      	str	r3, [r1, #16]
 8004f9a:	e027      	b.n	8004fec <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d112      	bne.n	8004fc8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fa2:	4b27      	ldr	r3, [pc, #156]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004faa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6892      	ldr	r2, [r2, #8]
 8004fb2:	0211      	lsls	r1, r2, #8
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6912      	ldr	r2, [r2, #16]
 8004fb8:	0852      	lsrs	r2, r2, #1
 8004fba:	3a01      	subs	r2, #1
 8004fbc:	0552      	lsls	r2, r2, #21
 8004fbe:	430a      	orrs	r2, r1
 8004fc0:	491f      	ldr	r1, [pc, #124]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	610b      	str	r3, [r1, #16]
 8004fc6:	e011      	b.n	8004fec <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004fc8:	4b1d      	ldr	r3, [pc, #116]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fd0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6892      	ldr	r2, [r2, #8]
 8004fd8:	0211      	lsls	r1, r2, #8
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6952      	ldr	r2, [r2, #20]
 8004fde:	0852      	lsrs	r2, r2, #1
 8004fe0:	3a01      	subs	r2, #1
 8004fe2:	0652      	lsls	r2, r2, #25
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	4916      	ldr	r1, [pc, #88]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004fec:	4b14      	ldr	r3, [pc, #80]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a13      	ldr	r2, [pc, #76]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff8:	f7fd fc24 	bl	8002844 <HAL_GetTick>
 8004ffc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ffe:	e009      	b.n	8005014 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005000:	f7fd fc20 	bl	8002844 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d902      	bls.n	8005014 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	73fb      	strb	r3, [r7, #15]
          break;
 8005012:	e005      	b.n	8005020 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005014:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0ef      	beq.n	8005000 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005020:	7bfb      	ldrb	r3, [r7, #15]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d106      	bne.n	8005034 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005026:	4b06      	ldr	r3, [pc, #24]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	4904      	ldr	r1, [pc, #16]	; (8005040 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005030:	4313      	orrs	r3, r2
 8005032:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005034:	7bfb      	ldrb	r3, [r7, #15]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	40021000 	.word	0x40021000

08005044 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005052:	4b6a      	ldr	r3, [pc, #424]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d018      	beq.n	8005090 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800505e:	4b67      	ldr	r3, [pc, #412]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0203 	and.w	r2, r3, #3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d10d      	bne.n	800508a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
       ||
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005076:	4b61      	ldr	r3, [pc, #388]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
       ||
 8005086:	429a      	cmp	r2, r3
 8005088:	d047      	beq.n	800511a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	e044      	b.n	800511a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d018      	beq.n	80050ca <RCCEx_PLLSAI2_Config+0x86>
 8005098:	2b03      	cmp	r3, #3
 800509a:	d825      	bhi.n	80050e8 <RCCEx_PLLSAI2_Config+0xa4>
 800509c:	2b01      	cmp	r3, #1
 800509e:	d002      	beq.n	80050a6 <RCCEx_PLLSAI2_Config+0x62>
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d009      	beq.n	80050b8 <RCCEx_PLLSAI2_Config+0x74>
 80050a4:	e020      	b.n	80050e8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80050a6:	4b55      	ldr	r3, [pc, #340]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d11d      	bne.n	80050ee <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050b6:	e01a      	b.n	80050ee <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80050b8:	4b50      	ldr	r3, [pc, #320]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d116      	bne.n	80050f2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80050c8:	e013      	b.n	80050f2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80050ca:	4b4c      	ldr	r3, [pc, #304]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10f      	bne.n	80050f6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050d6:	4b49      	ldr	r3, [pc, #292]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050e6:	e006      	b.n	80050f6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	73fb      	strb	r3, [r7, #15]
      break;
 80050ec:	e004      	b.n	80050f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050ee:	bf00      	nop
 80050f0:	e002      	b.n	80050f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050f2:	bf00      	nop
 80050f4:	e000      	b.n	80050f8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80050f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10d      	bne.n	800511a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	3b01      	subs	r3, #1
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	430b      	orrs	r3, r1
 8005114:	4939      	ldr	r1, [pc, #228]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005116:	4313      	orrs	r3, r2
 8005118:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d167      	bne.n	80051f0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005120:	4b36      	ldr	r3, [pc, #216]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a35      	ldr	r2, [pc, #212]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800512a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512c:	f7fd fb8a 	bl	8002844 <HAL_GetTick>
 8005130:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005132:	e009      	b.n	8005148 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005134:	f7fd fb86 	bl	8002844 <HAL_GetTick>
 8005138:	4602      	mov	r2, r0
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	1ad3      	subs	r3, r2, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d902      	bls.n	8005148 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	73fb      	strb	r3, [r7, #15]
        break;
 8005146:	e005      	b.n	8005154 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005148:	4b2c      	ldr	r3, [pc, #176]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1ef      	bne.n	8005134 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d14a      	bne.n	80051f0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d111      	bne.n	8005184 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005160:	4b26      	ldr	r3, [pc, #152]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005162:	695b      	ldr	r3, [r3, #20]
 8005164:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516c:	687a      	ldr	r2, [r7, #4]
 800516e:	6892      	ldr	r2, [r2, #8]
 8005170:	0211      	lsls	r1, r2, #8
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68d2      	ldr	r2, [r2, #12]
 8005176:	0912      	lsrs	r2, r2, #4
 8005178:	0452      	lsls	r2, r2, #17
 800517a:	430a      	orrs	r2, r1
 800517c:	491f      	ldr	r1, [pc, #124]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 800517e:	4313      	orrs	r3, r2
 8005180:	614b      	str	r3, [r1, #20]
 8005182:	e011      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005184:	4b1d      	ldr	r3, [pc, #116]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800518c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6892      	ldr	r2, [r2, #8]
 8005194:	0211      	lsls	r1, r2, #8
 8005196:	687a      	ldr	r2, [r7, #4]
 8005198:	6912      	ldr	r2, [r2, #16]
 800519a:	0852      	lsrs	r2, r2, #1
 800519c:	3a01      	subs	r2, #1
 800519e:	0652      	lsls	r2, r2, #25
 80051a0:	430a      	orrs	r2, r1
 80051a2:	4916      	ldr	r1, [pc, #88]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80051a8:	4b14      	ldr	r3, [pc, #80]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a13      	ldr	r2, [pc, #76]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b4:	f7fd fb46 	bl	8002844 <HAL_GetTick>
 80051b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051ba:	e009      	b.n	80051d0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051bc:	f7fd fb42 	bl	8002844 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d902      	bls.n	80051d0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	73fb      	strb	r3, [r7, #15]
          break;
 80051ce:	e005      	b.n	80051dc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d0ef      	beq.n	80051bc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d106      	bne.n	80051f0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80051e2:	4b06      	ldr	r3, [pc, #24]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e4:	695a      	ldr	r2, [r3, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	4904      	ldr	r1, [pc, #16]	; (80051fc <RCCEx_PLLSAI2_Config+0x1b8>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80051f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3710      	adds	r7, #16
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40021000 	.word	0x40021000

08005200 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e095      	b.n	800533e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2b00      	cmp	r3, #0
 8005218:	d108      	bne.n	800522c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005222:	d009      	beq.n	8005238 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	61da      	str	r2, [r3, #28]
 800522a:	e005      	b.n	8005238 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d106      	bne.n	8005258 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f7fc fd2e 	bl	8001cb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800526e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005278:	d902      	bls.n	8005280 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e002      	b.n	8005286 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005284:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800528e:	d007      	beq.n	80052a0 <HAL_SPI_Init+0xa0>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052b0:	431a      	orrs	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	695b      	ldr	r3, [r3, #20]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	431a      	orrs	r2, r3
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ce:	431a      	orrs	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e2:	ea42 0103 	orr.w	r1, r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	0c1b      	lsrs	r3, r3, #16
 80052fc:	f003 0204 	and.w	r2, r3, #4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	f003 0310 	and.w	r3, r3, #16
 8005308:	431a      	orrs	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530e:	f003 0308 	and.w	r3, r3, #8
 8005312:	431a      	orrs	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800531c:	ea42 0103 	orr.w	r1, r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005356:	2300      	movs	r3, #0
 8005358:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005360:	2b01      	cmp	r3, #1
 8005362:	d101      	bne.n	8005368 <HAL_SPI_Transmit+0x22>
 8005364:	2302      	movs	r3, #2
 8005366:	e158      	b.n	800561a <HAL_SPI_Transmit+0x2d4>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005370:	f7fd fa68 	bl	8002844 <HAL_GetTick>
 8005374:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005376:	88fb      	ldrh	r3, [r7, #6]
 8005378:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d002      	beq.n	800538c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005386:	2302      	movs	r3, #2
 8005388:	77fb      	strb	r3, [r7, #31]
    goto error;
 800538a:	e13d      	b.n	8005608 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d002      	beq.n	8005398 <HAL_SPI_Transmit+0x52>
 8005392:	88fb      	ldrh	r3, [r7, #6]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d102      	bne.n	800539e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800539c:	e134      	b.n	8005608 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2203      	movs	r2, #3
 80053a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	88fa      	ldrh	r2, [r7, #6]
 80053b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	88fa      	ldrh	r2, [r7, #6]
 80053bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053e8:	d10f      	bne.n	800540a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005408:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d007      	beq.n	8005428 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005426:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005430:	d94b      	bls.n	80054ca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d002      	beq.n	8005440 <HAL_SPI_Transmit+0xfa>
 800543a:	8afb      	ldrh	r3, [r7, #22]
 800543c:	2b01      	cmp	r3, #1
 800543e:	d13e      	bne.n	80054be <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005444:	881a      	ldrh	r2, [r3, #0]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	1c9a      	adds	r2, r3, #2
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545a:	b29b      	uxth	r3, r3
 800545c:	3b01      	subs	r3, #1
 800545e:	b29a      	uxth	r2, r3
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005464:	e02b      	b.n	80054be <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b02      	cmp	r3, #2
 8005472:	d112      	bne.n	800549a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005478:	881a      	ldrh	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005484:	1c9a      	adds	r2, r3, #2
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005498:	e011      	b.n	80054be <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800549a:	f7fd f9d3 	bl	8002844 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d803      	bhi.n	80054b2 <HAL_SPI_Transmit+0x16c>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b0:	d102      	bne.n	80054b8 <HAL_SPI_Transmit+0x172>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054bc:	e0a4      	b.n	8005608 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d1ce      	bne.n	8005466 <HAL_SPI_Transmit+0x120>
 80054c8:	e07c      	b.n	80055c4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Transmit+0x192>
 80054d2:	8afb      	ldrh	r3, [r7, #22]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d170      	bne.n	80055ba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d912      	bls.n	8005508 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	881a      	ldrh	r2, [r3, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	1c9a      	adds	r2, r3, #2
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b02      	subs	r3, #2
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005506:	e058      	b.n	80055ba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	7812      	ldrb	r2, [r2, #0]
 8005514:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005524:	b29b      	uxth	r3, r3
 8005526:	3b01      	subs	r3, #1
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800552e:	e044      	b.n	80055ba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b02      	cmp	r3, #2
 800553c:	d12b      	bne.n	8005596 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005542:	b29b      	uxth	r3, r3
 8005544:	2b01      	cmp	r3, #1
 8005546:	d912      	bls.n	800556e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	881a      	ldrh	r2, [r3, #0]
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005562:	b29b      	uxth	r3, r3
 8005564:	3b02      	subs	r3, #2
 8005566:	b29a      	uxth	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800556c:	e025      	b.n	80055ba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	7812      	ldrb	r2, [r2, #0]
 800557a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	1c5a      	adds	r2, r3, #1
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800558a:	b29b      	uxth	r3, r3
 800558c:	3b01      	subs	r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005594:	e011      	b.n	80055ba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005596:	f7fd f955 	bl	8002844 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d803      	bhi.n	80055ae <HAL_SPI_Transmit+0x268>
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055ac:	d102      	bne.n	80055b4 <HAL_SPI_Transmit+0x26e>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80055b8:	e026      	b.n	8005608 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055be:	b29b      	uxth	r3, r3
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1b5      	bne.n	8005530 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	6839      	ldr	r1, [r7, #0]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fce3 	bl	8005f94 <SPI_EndRxTxTransaction>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2220      	movs	r2, #32
 80055d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	689b      	ldr	r3, [r3, #8]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055e2:	2300      	movs	r3, #0
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	613b      	str	r3, [r7, #16]
 80055f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e000      	b.n	8005608 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005606:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005618:	7ffb      	ldrb	r3, [r7, #31]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b088      	sub	sp, #32
 8005626:	af02      	add	r7, sp, #8
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	603b      	str	r3, [r7, #0]
 800562e:	4613      	mov	r3, r2
 8005630:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800563e:	d112      	bne.n	8005666 <HAL_SPI_Receive+0x44>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10e      	bne.n	8005666 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2204      	movs	r2, #4
 800564c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005650:	88fa      	ldrh	r2, [r7, #6]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	9300      	str	r3, [sp, #0]
 8005656:	4613      	mov	r3, r2
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	68f8      	ldr	r0, [r7, #12]
 800565e:	f000 f910 	bl	8005882 <HAL_SPI_TransmitReceive>
 8005662:	4603      	mov	r3, r0
 8005664:	e109      	b.n	800587a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800566c:	2b01      	cmp	r3, #1
 800566e:	d101      	bne.n	8005674 <HAL_SPI_Receive+0x52>
 8005670:	2302      	movs	r3, #2
 8005672:	e102      	b.n	800587a <HAL_SPI_Receive+0x258>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800567c:	f7fd f8e2 	bl	8002844 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b01      	cmp	r3, #1
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800568e:	2302      	movs	r3, #2
 8005690:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005692:	e0e9      	b.n	8005868 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_SPI_Receive+0x7e>
 800569a:	88fb      	ldrh	r3, [r7, #6]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80056a4:	e0e0      	b.n	8005868 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2204      	movs	r2, #4
 80056aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	88fa      	ldrh	r2, [r7, #6]
 80056be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	88fa      	ldrh	r2, [r7, #6]
 80056c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2200      	movs	r2, #0
 80056e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2200      	movs	r2, #0
 80056e6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80056f0:	d908      	bls.n	8005704 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	e007      	b.n	8005714 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005712:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571c:	d10f      	bne.n	800573e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800572c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800573c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005748:	2b40      	cmp	r3, #64	; 0x40
 800574a:	d007      	beq.n	800575c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800575a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005764:	d867      	bhi.n	8005836 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005766:	e030      	b.n	80057ca <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b01      	cmp	r3, #1
 8005774:	d117      	bne.n	80057a6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f103 020c 	add.w	r2, r3, #12
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	7812      	ldrb	r2, [r2, #0]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005798:	b29b      	uxth	r3, r3
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80057a4:	e011      	b.n	80057ca <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a6:	f7fd f84d 	bl	8002844 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	683a      	ldr	r2, [r7, #0]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d803      	bhi.n	80057be <HAL_SPI_Receive+0x19c>
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057bc:	d102      	bne.n	80057c4 <HAL_SPI_Receive+0x1a2>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d102      	bne.n	80057ca <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80057c8:	e04e      	b.n	8005868 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1c8      	bne.n	8005768 <HAL_SPI_Receive+0x146>
 80057d6:	e034      	b.n	8005842 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d115      	bne.n	8005812 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f0:	b292      	uxth	r2, r2
 80057f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f8:	1c9a      	adds	r2, r3, #2
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005810:	e011      	b.n	8005836 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005812:	f7fd f817 	bl	8002844 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d803      	bhi.n	800582a <HAL_SPI_Receive+0x208>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d102      	bne.n	8005830 <HAL_SPI_Receive+0x20e>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d102      	bne.n	8005836 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005834:	e018      	b.n	8005868 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800583c:	b29b      	uxth	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ca      	bne.n	80057d8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	6839      	ldr	r1, [r7, #0]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 fb4c 	bl	8005ee4 <SPI_EndRxTransaction>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2220      	movs	r2, #32
 8005856:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
 8005864:	e000      	b.n	8005868 <HAL_SPI_Receive+0x246>
  }

error :
 8005866:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005878:	7dfb      	ldrb	r3, [r7, #23]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b08a      	sub	sp, #40	; 0x28
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	607a      	str	r2, [r7, #4]
 800588e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005890:	2301      	movs	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d101      	bne.n	80058a8 <HAL_SPI_TransmitReceive+0x26>
 80058a4:	2302      	movs	r3, #2
 80058a6:	e1fb      	b.n	8005ca0 <HAL_SPI_TransmitReceive+0x41e>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058b0:	f7fc ffc8 	bl	8002844 <HAL_GetTick>
 80058b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80058bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80058c4:	887b      	ldrh	r3, [r7, #2]
 80058c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80058c8:	887b      	ldrh	r3, [r7, #2]
 80058ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80058cc:	7efb      	ldrb	r3, [r7, #27]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d00e      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x6e>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058d8:	d106      	bne.n	80058e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <HAL_SPI_TransmitReceive+0x66>
 80058e2:	7efb      	ldrb	r3, [r7, #27]
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d003      	beq.n	80058f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80058e8:	2302      	movs	r3, #2
 80058ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80058ee:	e1cd      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d005      	beq.n	8005902 <HAL_SPI_TransmitReceive+0x80>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <HAL_SPI_TransmitReceive+0x80>
 80058fc:	887b      	ldrh	r3, [r7, #2]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005908:	e1c0      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b04      	cmp	r3, #4
 8005914:	d003      	beq.n	800591e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2205      	movs	r2, #5
 800591a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	887a      	ldrh	r2, [r7, #2]
 800592e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	887a      	ldrh	r2, [r7, #2]
 8005936:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	887a      	ldrh	r2, [r7, #2]
 8005944:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	887a      	ldrh	r2, [r7, #2]
 800594a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005960:	d802      	bhi.n	8005968 <HAL_SPI_TransmitReceive+0xe6>
 8005962:	8a3b      	ldrh	r3, [r7, #16]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d908      	bls.n	800597a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005976:	605a      	str	r2, [r3, #4]
 8005978:	e007      	b.n	800598a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005988:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d007      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059b0:	d97c      	bls.n	8005aac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <HAL_SPI_TransmitReceive+0x13e>
 80059ba:	8a7b      	ldrh	r3, [r7, #18]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d169      	bne.n	8005a94 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	881a      	ldrh	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	1c9a      	adds	r2, r3, #2
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059e4:	e056      	b.n	8005a94 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d11b      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x1aa>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d016      	beq.n	8005a2c <HAL_SPI_TransmitReceive+0x1aa>
 80059fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d113      	bne.n	8005a2c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a08:	881a      	ldrh	r2, [r3, #0]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a14:	1c9a      	adds	r2, r3, #2
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	3b01      	subs	r3, #1
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d11c      	bne.n	8005a74 <HAL_SPI_TransmitReceive+0x1f2>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	b292      	uxth	r2, r2
 8005a52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	1c9a      	adds	r2, r3, #2
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	3b01      	subs	r3, #1
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005a70:	2301      	movs	r3, #1
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005a74:	f7fc fee6 	bl	8002844 <HAL_GetTick>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d807      	bhi.n	8005a94 <HAL_SPI_TransmitReceive+0x212>
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8a:	d003      	beq.n	8005a94 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005a92:	e0fb      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d1a3      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x164>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d19d      	bne.n	80059e6 <HAL_SPI_TransmitReceive+0x164>
 8005aaa:	e0df      	b.n	8005c6c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x23a>
 8005ab4:	8a7b      	ldrh	r3, [r7, #18]
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	f040 80cb 	bne.w	8005c52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d912      	bls.n	8005aec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aca:	881a      	ldrh	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad6:	1c9a      	adds	r2, r3, #2
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b02      	subs	r3, #2
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aea:	e0b2      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	7812      	ldrb	r2, [r2, #0]
 8005af8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	b29a      	uxth	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b12:	e09e      	b.n	8005c52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b02      	cmp	r3, #2
 8005b20:	d134      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x30a>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d02f      	beq.n	8005b8c <HAL_SPI_TransmitReceive+0x30a>
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d12c      	bne.n	8005b8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d912      	bls.n	8005b62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b40:	881a      	ldrh	r2, [r3, #0]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b4c:	1c9a      	adds	r2, r3, #2
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	3b02      	subs	r3, #2
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b60:	e012      	b.n	8005b88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	330c      	adds	r3, #12
 8005b6c:	7812      	ldrb	r2, [r2, #0]
 8005b6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d148      	bne.n	8005c2c <HAL_SPI_TransmitReceive+0x3aa>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d042      	beq.n	8005c2c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d923      	bls.n	8005bfa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68da      	ldr	r2, [r3, #12]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	1c9a      	adds	r2, r3, #2
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	3b02      	subs	r3, #2
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d81f      	bhi.n	8005c28 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bf6:	605a      	str	r2, [r3, #4]
 8005bf8:	e016      	b.n	8005c28 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f103 020c 	add.w	r2, r3, #12
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	7812      	ldrb	r2, [r2, #0]
 8005c08:	b2d2      	uxtb	r2, r2
 8005c0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	3b01      	subs	r3, #1
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c2c:	f7fc fe0a 	bl	8002844 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d803      	bhi.n	8005c44 <HAL_SPI_TransmitReceive+0x3c2>
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_TransmitReceive+0x3c8>
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005c50:	e01c      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f47f af5b 	bne.w	8005b14 <HAL_SPI_TransmitReceive+0x292>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	f47f af54 	bne.w	8005b14 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f98f 	bl	8005f94 <SPI_EndRxTxTransaction>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d006      	beq.n	8005c8a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	661a      	str	r2, [r3, #96]	; 0x60
 8005c88:	e000      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005c8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3728      	adds	r7, #40	; 0x28
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b088      	sub	sp, #32
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	603b      	str	r3, [r7, #0]
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005cb8:	f7fc fdc4 	bl	8002844 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc0:	1a9b      	subs	r3, r3, r2
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cc8:	f7fc fdbc 	bl	8002844 <HAL_GetTick>
 8005ccc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cce:	4b39      	ldr	r3, [pc, #228]	; (8005db4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	015b      	lsls	r3, r3, #5
 8005cd4:	0d1b      	lsrs	r3, r3, #20
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	fb02 f303 	mul.w	r3, r2, r3
 8005cdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cde:	e054      	b.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d050      	beq.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005ce8:	f7fc fdac 	bl	8002844 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	1ad3      	subs	r3, r2, r3
 8005cf2:	69fa      	ldr	r2, [r7, #28]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d902      	bls.n	8005cfe <SPI_WaitFlagStateUntilTimeout+0x56>
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d13d      	bne.n	8005d7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	685a      	ldr	r2, [r3, #4]
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d16:	d111      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d20:	d004      	beq.n	8005d2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d2a:	d107      	bne.n	8005d3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d44:	d10f      	bne.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d54:	601a      	str	r2, [r3, #0]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e017      	b.n	8005daa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	3b01      	subs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	4013      	ands	r3, r2
 8005d94:	68ba      	ldr	r2, [r7, #8]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	bf0c      	ite	eq
 8005d9a:	2301      	moveq	r3, #1
 8005d9c:	2300      	movne	r3, #0
 8005d9e:	b2db      	uxtb	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	79fb      	ldrb	r3, [r7, #7]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d19b      	bne.n	8005ce0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	2000016c 	.word	0x2000016c

08005db8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08a      	sub	sp, #40	; 0x28
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005dca:	f7fc fd3b 	bl	8002844 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd2:	1a9b      	subs	r3, r3, r2
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005dda:	f7fc fd33 	bl	8002844 <HAL_GetTick>
 8005dde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	330c      	adds	r3, #12
 8005de6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005de8:	4b3d      	ldr	r3, [pc, #244]	; (8005ee0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	00da      	lsls	r2, r3, #3
 8005df4:	1ad3      	subs	r3, r2, r3
 8005df6:	0d1b      	lsrs	r3, r3, #20
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	fb02 f303 	mul.w	r3, r2, r3
 8005dfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e00:	e060      	b.n	8005ec4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e08:	d107      	bne.n	8005e1a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e20:	d050      	beq.n	8005ec4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e22:	f7fc fd0f 	bl	8002844 <HAL_GetTick>
 8005e26:	4602      	mov	r2, r0
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d902      	bls.n	8005e38 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d13d      	bne.n	8005eb4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e50:	d111      	bne.n	8005e76 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e5a:	d004      	beq.n	8005e66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e64:	d107      	bne.n	8005e76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e7e:	d10f      	bne.n	8005ea0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	e010      	b.n	8005ed6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d196      	bne.n	8005e02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3728      	adds	r7, #40	; 0x28
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	2000016c 	.word	0x2000016c

08005ee4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b086      	sub	sp, #24
 8005ee8:	af02      	add	r7, sp, #8
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef8:	d111      	bne.n	8005f1e <SPI_EndRxTransaction+0x3a>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f02:	d004      	beq.n	8005f0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f0c:	d107      	bne.n	8005f1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	68f8      	ldr	r0, [r7, #12]
 8005f2a:	f7ff febd 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f38:	f043 0220 	orr.w	r2, r3, #32
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e023      	b.n	8005f8c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f4c:	d11d      	bne.n	8005f8a <SPI_EndRxTransaction+0xa6>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f56:	d004      	beq.n	8005f62 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f60:	d113      	bne.n	8005f8a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	9300      	str	r3, [sp, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff ff22 	bl	8005db8 <SPI_WaitFifoStateUntilTimeout>
 8005f74:	4603      	mov	r3, r0
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d007      	beq.n	8005f8a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f7e:	f043 0220 	orr.w	r2, r3, #32
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e000      	b.n	8005f8c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af02      	add	r7, sp, #8
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	9300      	str	r3, [sp, #0]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005fac:	68f8      	ldr	r0, [r7, #12]
 8005fae:	f7ff ff03 	bl	8005db8 <SPI_WaitFifoStateUntilTimeout>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d007      	beq.n	8005fc8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbc:	f043 0220 	orr.w	r2, r3, #32
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e027      	b.n	8006018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	2180      	movs	r1, #128	; 0x80
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff fe68 	bl	8005ca8 <SPI_WaitFlagStateUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e014      	b.n	8006018 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	9300      	str	r3, [sp, #0]
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f7ff fedc 	bl	8005db8 <SPI_WaitFifoStateUntilTimeout>
 8006000:	4603      	mov	r3, r0
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800600a:	f043 0220 	orr.w	r2, r3, #32
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e000      	b.n	8006018 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e049      	b.n	80060c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb fe78 	bl	8001d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	3304      	adds	r3, #4
 800605c:	4619      	mov	r1, r3
 800605e:	4610      	mov	r0, r2
 8006060:	f000 f9ee 	bl	8006440 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d001      	beq.n	80060e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e04f      	b.n	8006188 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2202      	movs	r2, #2
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68da      	ldr	r2, [r3, #12]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a23      	ldr	r2, [pc, #140]	; (8006194 <HAL_TIM_Base_Start_IT+0xc4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d01d      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0x76>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006112:	d018      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0x76>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <HAL_TIM_Base_Start_IT+0xc8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0x76>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1e      	ldr	r2, [pc, #120]	; (800619c <HAL_TIM_Base_Start_IT+0xcc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0x76>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a1c      	ldr	r2, [pc, #112]	; (80061a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0x76>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIM_Base_Start_IT+0x76>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d115      	bne.n	8006172 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <HAL_TIM_Base_Start_IT+0xdc>)
 800614e:	4013      	ands	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b06      	cmp	r3, #6
 8006156:	d015      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0xb4>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615e:	d011      	beq.n	8006184 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	e008      	b.n	8006184 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e000      	b.n	8006186 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr
 8006194:	40012c00 	.word	0x40012c00
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40013400 	.word	0x40013400
 80061a8:	40014000 	.word	0x40014000
 80061ac:	00010007 	.word	0x00010007

080061b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0202 	mvn.w	r2, #2
 80061dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f905 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 f8f7 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f908 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b04      	cmp	r3, #4
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0204 	mvn.w	r2, #4
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 f8db 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f8cd 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f8de 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b08      	cmp	r3, #8
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0208 	mvn.w	r2, #8
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2204      	movs	r2, #4
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8b1 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f8a3 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f8b4 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0210 	mvn.w	r2, #16
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2208      	movs	r2, #8
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f887 	bl	8006402 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f879 	bl	80063ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f88a 	bl	8006416 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0201 	mvn.w	r2, #1
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fb fc0a 	bl	8001b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b80      	cmp	r3, #128	; 0x80
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f914 	bl	8006588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636e:	d10e      	bne.n	800638e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d107      	bne.n	800638e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f907 	bl	800659c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d10e      	bne.n	80063ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d107      	bne.n	80063ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 f838 	bl	800642a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d10e      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f06f 0220 	mvn.w	r2, #32
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8c7 	bl	8006574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b083      	sub	sp, #12
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063f6:	bf00      	nop
 80063f8:	370c      	adds	r7, #12
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006402:	b480      	push	{r7}
 8006404:	b083      	sub	sp, #12
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800641e:	bf00      	nop
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006432:	bf00      	nop
 8006434:	370c      	adds	r7, #12
 8006436:	46bd      	mov	sp, r7
 8006438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643c:	4770      	bx	lr
	...

08006440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a40      	ldr	r2, [pc, #256]	; (8006554 <TIM_Base_SetConfig+0x114>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d013      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645e:	d00f      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a3d      	ldr	r2, [pc, #244]	; (8006558 <TIM_Base_SetConfig+0x118>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d00b      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a3c      	ldr	r2, [pc, #240]	; (800655c <TIM_Base_SetConfig+0x11c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d007      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a3b      	ldr	r2, [pc, #236]	; (8006560 <TIM_Base_SetConfig+0x120>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d003      	beq.n	8006480 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a3a      	ldr	r2, [pc, #232]	; (8006564 <TIM_Base_SetConfig+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d108      	bne.n	8006492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	4313      	orrs	r3, r2
 8006490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2f      	ldr	r2, [pc, #188]	; (8006554 <TIM_Base_SetConfig+0x114>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01f      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a0:	d01b      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4a2c      	ldr	r2, [pc, #176]	; (8006558 <TIM_Base_SetConfig+0x118>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d017      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a2b      	ldr	r2, [pc, #172]	; (800655c <TIM_Base_SetConfig+0x11c>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d013      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a2a      	ldr	r2, [pc, #168]	; (8006560 <TIM_Base_SetConfig+0x120>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d00f      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a29      	ldr	r2, [pc, #164]	; (8006564 <TIM_Base_SetConfig+0x124>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d00b      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a28      	ldr	r2, [pc, #160]	; (8006568 <TIM_Base_SetConfig+0x128>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d007      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a27      	ldr	r2, [pc, #156]	; (800656c <TIM_Base_SetConfig+0x12c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d003      	beq.n	80064da <TIM_Base_SetConfig+0x9a>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a26      	ldr	r2, [pc, #152]	; (8006570 <TIM_Base_SetConfig+0x130>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d108      	bne.n	80064ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68fa      	ldr	r2, [r7, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a10      	ldr	r2, [pc, #64]	; (8006554 <TIM_Base_SetConfig+0x114>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d00f      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a12      	ldr	r2, [pc, #72]	; (8006564 <TIM_Base_SetConfig+0x124>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d00b      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a11      	ldr	r2, [pc, #68]	; (8006568 <TIM_Base_SetConfig+0x128>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a10      	ldr	r2, [pc, #64]	; (800656c <TIM_Base_SetConfig+0x12c>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_Base_SetConfig+0xf8>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a0f      	ldr	r2, [pc, #60]	; (8006570 <TIM_Base_SetConfig+0x130>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d103      	bne.n	8006540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	691a      	ldr	r2, [r3, #16]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2201      	movs	r2, #1
 8006544:	615a      	str	r2, [r3, #20]
}
 8006546:	bf00      	nop
 8006548:	3714      	adds	r7, #20
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40012c00 	.word	0x40012c00
 8006558:	40000400 	.word	0x40000400
 800655c:	40000800 	.word	0x40000800
 8006560:	40000c00 	.word	0x40000c00
 8006564:	40013400 	.word	0x40013400
 8006568:	40014000 	.word	0x40014000
 800656c:	40014400 	.word	0x40014400
 8006570:	40014800 	.word	0x40014800

08006574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <__assert_func>:
 80065b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80065b2:	4614      	mov	r4, r2
 80065b4:	461a      	mov	r2, r3
 80065b6:	4b09      	ldr	r3, [pc, #36]	; (80065dc <__assert_func+0x2c>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4605      	mov	r5, r0
 80065bc:	68d8      	ldr	r0, [r3, #12]
 80065be:	b14c      	cbz	r4, 80065d4 <__assert_func+0x24>
 80065c0:	4b07      	ldr	r3, [pc, #28]	; (80065e0 <__assert_func+0x30>)
 80065c2:	9100      	str	r1, [sp, #0]
 80065c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80065c8:	4906      	ldr	r1, [pc, #24]	; (80065e4 <__assert_func+0x34>)
 80065ca:	462b      	mov	r3, r5
 80065cc:	f000 f814 	bl	80065f8 <fiprintf>
 80065d0:	f000 fc9a 	bl	8006f08 <abort>
 80065d4:	4b04      	ldr	r3, [pc, #16]	; (80065e8 <__assert_func+0x38>)
 80065d6:	461c      	mov	r4, r3
 80065d8:	e7f3      	b.n	80065c2 <__assert_func+0x12>
 80065da:	bf00      	nop
 80065dc:	20000178 	.word	0x20000178
 80065e0:	08007a98 	.word	0x08007a98
 80065e4:	08007aa5 	.word	0x08007aa5
 80065e8:	08007ad3 	.word	0x08007ad3

080065ec <__errno>:
 80065ec:	4b01      	ldr	r3, [pc, #4]	; (80065f4 <__errno+0x8>)
 80065ee:	6818      	ldr	r0, [r3, #0]
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20000178 	.word	0x20000178

080065f8 <fiprintf>:
 80065f8:	b40e      	push	{r1, r2, r3}
 80065fa:	b503      	push	{r0, r1, lr}
 80065fc:	4601      	mov	r1, r0
 80065fe:	ab03      	add	r3, sp, #12
 8006600:	4805      	ldr	r0, [pc, #20]	; (8006618 <fiprintf+0x20>)
 8006602:	f853 2b04 	ldr.w	r2, [r3], #4
 8006606:	6800      	ldr	r0, [r0, #0]
 8006608:	9301      	str	r3, [sp, #4]
 800660a:	f000 f86b 	bl	80066e4 <_vfiprintf_r>
 800660e:	b002      	add	sp, #8
 8006610:	f85d eb04 	ldr.w	lr, [sp], #4
 8006614:	b003      	add	sp, #12
 8006616:	4770      	bx	lr
 8006618:	20000178 	.word	0x20000178

0800661c <__libc_init_array>:
 800661c:	b570      	push	{r4, r5, r6, lr}
 800661e:	4d0d      	ldr	r5, [pc, #52]	; (8006654 <__libc_init_array+0x38>)
 8006620:	4c0d      	ldr	r4, [pc, #52]	; (8006658 <__libc_init_array+0x3c>)
 8006622:	1b64      	subs	r4, r4, r5
 8006624:	10a4      	asrs	r4, r4, #2
 8006626:	2600      	movs	r6, #0
 8006628:	42a6      	cmp	r6, r4
 800662a:	d109      	bne.n	8006640 <__libc_init_array+0x24>
 800662c:	4d0b      	ldr	r5, [pc, #44]	; (800665c <__libc_init_array+0x40>)
 800662e:	4c0c      	ldr	r4, [pc, #48]	; (8006660 <__libc_init_array+0x44>)
 8006630:	f001 f87e 	bl	8007730 <_init>
 8006634:	1b64      	subs	r4, r4, r5
 8006636:	10a4      	asrs	r4, r4, #2
 8006638:	2600      	movs	r6, #0
 800663a:	42a6      	cmp	r6, r4
 800663c:	d105      	bne.n	800664a <__libc_init_array+0x2e>
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	f855 3b04 	ldr.w	r3, [r5], #4
 8006644:	4798      	blx	r3
 8006646:	3601      	adds	r6, #1
 8006648:	e7ee      	b.n	8006628 <__libc_init_array+0xc>
 800664a:	f855 3b04 	ldr.w	r3, [r5], #4
 800664e:	4798      	blx	r3
 8006650:	3601      	adds	r6, #1
 8006652:	e7f2      	b.n	800663a <__libc_init_array+0x1e>
 8006654:	08007b6c 	.word	0x08007b6c
 8006658:	08007b6c 	.word	0x08007b6c
 800665c:	08007b6c 	.word	0x08007b6c
 8006660:	08007b70 	.word	0x08007b70

08006664 <memcpy>:
 8006664:	440a      	add	r2, r1
 8006666:	4291      	cmp	r1, r2
 8006668:	f100 33ff 	add.w	r3, r0, #4294967295
 800666c:	d100      	bne.n	8006670 <memcpy+0xc>
 800666e:	4770      	bx	lr
 8006670:	b510      	push	{r4, lr}
 8006672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800667a:	4291      	cmp	r1, r2
 800667c:	d1f9      	bne.n	8006672 <memcpy+0xe>
 800667e:	bd10      	pop	{r4, pc}

08006680 <memset>:
 8006680:	4402      	add	r2, r0
 8006682:	4603      	mov	r3, r0
 8006684:	4293      	cmp	r3, r2
 8006686:	d100      	bne.n	800668a <memset+0xa>
 8006688:	4770      	bx	lr
 800668a:	f803 1b01 	strb.w	r1, [r3], #1
 800668e:	e7f9      	b.n	8006684 <memset+0x4>

08006690 <__sfputc_r>:
 8006690:	6893      	ldr	r3, [r2, #8]
 8006692:	3b01      	subs	r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	b410      	push	{r4}
 8006698:	6093      	str	r3, [r2, #8]
 800669a:	da08      	bge.n	80066ae <__sfputc_r+0x1e>
 800669c:	6994      	ldr	r4, [r2, #24]
 800669e:	42a3      	cmp	r3, r4
 80066a0:	db01      	blt.n	80066a6 <__sfputc_r+0x16>
 80066a2:	290a      	cmp	r1, #10
 80066a4:	d103      	bne.n	80066ae <__sfputc_r+0x1e>
 80066a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066aa:	f000 bb6d 	b.w	8006d88 <__swbuf_r>
 80066ae:	6813      	ldr	r3, [r2, #0]
 80066b0:	1c58      	adds	r0, r3, #1
 80066b2:	6010      	str	r0, [r2, #0]
 80066b4:	7019      	strb	r1, [r3, #0]
 80066b6:	4608      	mov	r0, r1
 80066b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066bc:	4770      	bx	lr

080066be <__sfputs_r>:
 80066be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c0:	4606      	mov	r6, r0
 80066c2:	460f      	mov	r7, r1
 80066c4:	4614      	mov	r4, r2
 80066c6:	18d5      	adds	r5, r2, r3
 80066c8:	42ac      	cmp	r4, r5
 80066ca:	d101      	bne.n	80066d0 <__sfputs_r+0x12>
 80066cc:	2000      	movs	r0, #0
 80066ce:	e007      	b.n	80066e0 <__sfputs_r+0x22>
 80066d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d4:	463a      	mov	r2, r7
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ffda 	bl	8006690 <__sfputc_r>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d1f3      	bne.n	80066c8 <__sfputs_r+0xa>
 80066e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066e4 <_vfiprintf_r>:
 80066e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066e8:	460d      	mov	r5, r1
 80066ea:	b09d      	sub	sp, #116	; 0x74
 80066ec:	4614      	mov	r4, r2
 80066ee:	4698      	mov	r8, r3
 80066f0:	4606      	mov	r6, r0
 80066f2:	b118      	cbz	r0, 80066fc <_vfiprintf_r+0x18>
 80066f4:	6983      	ldr	r3, [r0, #24]
 80066f6:	b90b      	cbnz	r3, 80066fc <_vfiprintf_r+0x18>
 80066f8:	f000 fd28 	bl	800714c <__sinit>
 80066fc:	4b89      	ldr	r3, [pc, #548]	; (8006924 <_vfiprintf_r+0x240>)
 80066fe:	429d      	cmp	r5, r3
 8006700:	d11b      	bne.n	800673a <_vfiprintf_r+0x56>
 8006702:	6875      	ldr	r5, [r6, #4]
 8006704:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006706:	07d9      	lsls	r1, r3, #31
 8006708:	d405      	bmi.n	8006716 <_vfiprintf_r+0x32>
 800670a:	89ab      	ldrh	r3, [r5, #12]
 800670c:	059a      	lsls	r2, r3, #22
 800670e:	d402      	bmi.n	8006716 <_vfiprintf_r+0x32>
 8006710:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006712:	f000 fdb9 	bl	8007288 <__retarget_lock_acquire_recursive>
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	071b      	lsls	r3, r3, #28
 800671a:	d501      	bpl.n	8006720 <_vfiprintf_r+0x3c>
 800671c:	692b      	ldr	r3, [r5, #16]
 800671e:	b9eb      	cbnz	r3, 800675c <_vfiprintf_r+0x78>
 8006720:	4629      	mov	r1, r5
 8006722:	4630      	mov	r0, r6
 8006724:	f000 fb82 	bl	8006e2c <__swsetup_r>
 8006728:	b1c0      	cbz	r0, 800675c <_vfiprintf_r+0x78>
 800672a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800672c:	07dc      	lsls	r4, r3, #31
 800672e:	d50e      	bpl.n	800674e <_vfiprintf_r+0x6a>
 8006730:	f04f 30ff 	mov.w	r0, #4294967295
 8006734:	b01d      	add	sp, #116	; 0x74
 8006736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800673a:	4b7b      	ldr	r3, [pc, #492]	; (8006928 <_vfiprintf_r+0x244>)
 800673c:	429d      	cmp	r5, r3
 800673e:	d101      	bne.n	8006744 <_vfiprintf_r+0x60>
 8006740:	68b5      	ldr	r5, [r6, #8]
 8006742:	e7df      	b.n	8006704 <_vfiprintf_r+0x20>
 8006744:	4b79      	ldr	r3, [pc, #484]	; (800692c <_vfiprintf_r+0x248>)
 8006746:	429d      	cmp	r5, r3
 8006748:	bf08      	it	eq
 800674a:	68f5      	ldreq	r5, [r6, #12]
 800674c:	e7da      	b.n	8006704 <_vfiprintf_r+0x20>
 800674e:	89ab      	ldrh	r3, [r5, #12]
 8006750:	0598      	lsls	r0, r3, #22
 8006752:	d4ed      	bmi.n	8006730 <_vfiprintf_r+0x4c>
 8006754:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006756:	f000 fd98 	bl	800728a <__retarget_lock_release_recursive>
 800675a:	e7e9      	b.n	8006730 <_vfiprintf_r+0x4c>
 800675c:	2300      	movs	r3, #0
 800675e:	9309      	str	r3, [sp, #36]	; 0x24
 8006760:	2320      	movs	r3, #32
 8006762:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006766:	f8cd 800c 	str.w	r8, [sp, #12]
 800676a:	2330      	movs	r3, #48	; 0x30
 800676c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006930 <_vfiprintf_r+0x24c>
 8006770:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006774:	f04f 0901 	mov.w	r9, #1
 8006778:	4623      	mov	r3, r4
 800677a:	469a      	mov	sl, r3
 800677c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006780:	b10a      	cbz	r2, 8006786 <_vfiprintf_r+0xa2>
 8006782:	2a25      	cmp	r2, #37	; 0x25
 8006784:	d1f9      	bne.n	800677a <_vfiprintf_r+0x96>
 8006786:	ebba 0b04 	subs.w	fp, sl, r4
 800678a:	d00b      	beq.n	80067a4 <_vfiprintf_r+0xc0>
 800678c:	465b      	mov	r3, fp
 800678e:	4622      	mov	r2, r4
 8006790:	4629      	mov	r1, r5
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ff93 	bl	80066be <__sfputs_r>
 8006798:	3001      	adds	r0, #1
 800679a:	f000 80aa 	beq.w	80068f2 <_vfiprintf_r+0x20e>
 800679e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067a0:	445a      	add	r2, fp
 80067a2:	9209      	str	r2, [sp, #36]	; 0x24
 80067a4:	f89a 3000 	ldrb.w	r3, [sl]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 80a2 	beq.w	80068f2 <_vfiprintf_r+0x20e>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b8:	f10a 0a01 	add.w	sl, sl, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067c4:	931a      	str	r3, [sp, #104]	; 0x68
 80067c6:	4654      	mov	r4, sl
 80067c8:	2205      	movs	r2, #5
 80067ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ce:	4858      	ldr	r0, [pc, #352]	; (8006930 <_vfiprintf_r+0x24c>)
 80067d0:	f7f9 fcfe 	bl	80001d0 <memchr>
 80067d4:	9a04      	ldr	r2, [sp, #16]
 80067d6:	b9d8      	cbnz	r0, 8006810 <_vfiprintf_r+0x12c>
 80067d8:	06d1      	lsls	r1, r2, #27
 80067da:	bf44      	itt	mi
 80067dc:	2320      	movmi	r3, #32
 80067de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067e2:	0713      	lsls	r3, r2, #28
 80067e4:	bf44      	itt	mi
 80067e6:	232b      	movmi	r3, #43	; 0x2b
 80067e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067ec:	f89a 3000 	ldrb.w	r3, [sl]
 80067f0:	2b2a      	cmp	r3, #42	; 0x2a
 80067f2:	d015      	beq.n	8006820 <_vfiprintf_r+0x13c>
 80067f4:	9a07      	ldr	r2, [sp, #28]
 80067f6:	4654      	mov	r4, sl
 80067f8:	2000      	movs	r0, #0
 80067fa:	f04f 0c0a 	mov.w	ip, #10
 80067fe:	4621      	mov	r1, r4
 8006800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006804:	3b30      	subs	r3, #48	; 0x30
 8006806:	2b09      	cmp	r3, #9
 8006808:	d94e      	bls.n	80068a8 <_vfiprintf_r+0x1c4>
 800680a:	b1b0      	cbz	r0, 800683a <_vfiprintf_r+0x156>
 800680c:	9207      	str	r2, [sp, #28]
 800680e:	e014      	b.n	800683a <_vfiprintf_r+0x156>
 8006810:	eba0 0308 	sub.w	r3, r0, r8
 8006814:	fa09 f303 	lsl.w	r3, r9, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	46a2      	mov	sl, r4
 800681e:	e7d2      	b.n	80067c6 <_vfiprintf_r+0xe2>
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	1d19      	adds	r1, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	9103      	str	r1, [sp, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	bfbb      	ittet	lt
 800682c:	425b      	neglt	r3, r3
 800682e:	f042 0202 	orrlt.w	r2, r2, #2
 8006832:	9307      	strge	r3, [sp, #28]
 8006834:	9307      	strlt	r3, [sp, #28]
 8006836:	bfb8      	it	lt
 8006838:	9204      	strlt	r2, [sp, #16]
 800683a:	7823      	ldrb	r3, [r4, #0]
 800683c:	2b2e      	cmp	r3, #46	; 0x2e
 800683e:	d10c      	bne.n	800685a <_vfiprintf_r+0x176>
 8006840:	7863      	ldrb	r3, [r4, #1]
 8006842:	2b2a      	cmp	r3, #42	; 0x2a
 8006844:	d135      	bne.n	80068b2 <_vfiprintf_r+0x1ce>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9203      	str	r2, [sp, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	bfb8      	it	lt
 8006852:	f04f 33ff 	movlt.w	r3, #4294967295
 8006856:	3402      	adds	r4, #2
 8006858:	9305      	str	r3, [sp, #20]
 800685a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006940 <_vfiprintf_r+0x25c>
 800685e:	7821      	ldrb	r1, [r4, #0]
 8006860:	2203      	movs	r2, #3
 8006862:	4650      	mov	r0, sl
 8006864:	f7f9 fcb4 	bl	80001d0 <memchr>
 8006868:	b140      	cbz	r0, 800687c <_vfiprintf_r+0x198>
 800686a:	2340      	movs	r3, #64	; 0x40
 800686c:	eba0 000a 	sub.w	r0, r0, sl
 8006870:	fa03 f000 	lsl.w	r0, r3, r0
 8006874:	9b04      	ldr	r3, [sp, #16]
 8006876:	4303      	orrs	r3, r0
 8006878:	3401      	adds	r4, #1
 800687a:	9304      	str	r3, [sp, #16]
 800687c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006880:	482c      	ldr	r0, [pc, #176]	; (8006934 <_vfiprintf_r+0x250>)
 8006882:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006886:	2206      	movs	r2, #6
 8006888:	f7f9 fca2 	bl	80001d0 <memchr>
 800688c:	2800      	cmp	r0, #0
 800688e:	d03f      	beq.n	8006910 <_vfiprintf_r+0x22c>
 8006890:	4b29      	ldr	r3, [pc, #164]	; (8006938 <_vfiprintf_r+0x254>)
 8006892:	bb1b      	cbnz	r3, 80068dc <_vfiprintf_r+0x1f8>
 8006894:	9b03      	ldr	r3, [sp, #12]
 8006896:	3307      	adds	r3, #7
 8006898:	f023 0307 	bic.w	r3, r3, #7
 800689c:	3308      	adds	r3, #8
 800689e:	9303      	str	r3, [sp, #12]
 80068a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a2:	443b      	add	r3, r7
 80068a4:	9309      	str	r3, [sp, #36]	; 0x24
 80068a6:	e767      	b.n	8006778 <_vfiprintf_r+0x94>
 80068a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80068ac:	460c      	mov	r4, r1
 80068ae:	2001      	movs	r0, #1
 80068b0:	e7a5      	b.n	80067fe <_vfiprintf_r+0x11a>
 80068b2:	2300      	movs	r3, #0
 80068b4:	3401      	adds	r4, #1
 80068b6:	9305      	str	r3, [sp, #20]
 80068b8:	4619      	mov	r1, r3
 80068ba:	f04f 0c0a 	mov.w	ip, #10
 80068be:	4620      	mov	r0, r4
 80068c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068c4:	3a30      	subs	r2, #48	; 0x30
 80068c6:	2a09      	cmp	r2, #9
 80068c8:	d903      	bls.n	80068d2 <_vfiprintf_r+0x1ee>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c5      	beq.n	800685a <_vfiprintf_r+0x176>
 80068ce:	9105      	str	r1, [sp, #20]
 80068d0:	e7c3      	b.n	800685a <_vfiprintf_r+0x176>
 80068d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d6:	4604      	mov	r4, r0
 80068d8:	2301      	movs	r3, #1
 80068da:	e7f0      	b.n	80068be <_vfiprintf_r+0x1da>
 80068dc:	ab03      	add	r3, sp, #12
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	462a      	mov	r2, r5
 80068e2:	4b16      	ldr	r3, [pc, #88]	; (800693c <_vfiprintf_r+0x258>)
 80068e4:	a904      	add	r1, sp, #16
 80068e6:	4630      	mov	r0, r6
 80068e8:	f3af 8000 	nop.w
 80068ec:	4607      	mov	r7, r0
 80068ee:	1c78      	adds	r0, r7, #1
 80068f0:	d1d6      	bne.n	80068a0 <_vfiprintf_r+0x1bc>
 80068f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80068f4:	07d9      	lsls	r1, r3, #31
 80068f6:	d405      	bmi.n	8006904 <_vfiprintf_r+0x220>
 80068f8:	89ab      	ldrh	r3, [r5, #12]
 80068fa:	059a      	lsls	r2, r3, #22
 80068fc:	d402      	bmi.n	8006904 <_vfiprintf_r+0x220>
 80068fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006900:	f000 fcc3 	bl	800728a <__retarget_lock_release_recursive>
 8006904:	89ab      	ldrh	r3, [r5, #12]
 8006906:	065b      	lsls	r3, r3, #25
 8006908:	f53f af12 	bmi.w	8006730 <_vfiprintf_r+0x4c>
 800690c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800690e:	e711      	b.n	8006734 <_vfiprintf_r+0x50>
 8006910:	ab03      	add	r3, sp, #12
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	462a      	mov	r2, r5
 8006916:	4b09      	ldr	r3, [pc, #36]	; (800693c <_vfiprintf_r+0x258>)
 8006918:	a904      	add	r1, sp, #16
 800691a:	4630      	mov	r0, r6
 800691c:	f000 f880 	bl	8006a20 <_printf_i>
 8006920:	e7e4      	b.n	80068ec <_vfiprintf_r+0x208>
 8006922:	bf00      	nop
 8006924:	08007b2c 	.word	0x08007b2c
 8006928:	08007b4c 	.word	0x08007b4c
 800692c:	08007b0c 	.word	0x08007b0c
 8006930:	08007ad8 	.word	0x08007ad8
 8006934:	08007ae2 	.word	0x08007ae2
 8006938:	00000000 	.word	0x00000000
 800693c:	080066bf 	.word	0x080066bf
 8006940:	08007ade 	.word	0x08007ade

08006944 <_printf_common>:
 8006944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006948:	4616      	mov	r6, r2
 800694a:	4699      	mov	r9, r3
 800694c:	688a      	ldr	r2, [r1, #8]
 800694e:	690b      	ldr	r3, [r1, #16]
 8006950:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006954:	4293      	cmp	r3, r2
 8006956:	bfb8      	it	lt
 8006958:	4613      	movlt	r3, r2
 800695a:	6033      	str	r3, [r6, #0]
 800695c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006960:	4607      	mov	r7, r0
 8006962:	460c      	mov	r4, r1
 8006964:	b10a      	cbz	r2, 800696a <_printf_common+0x26>
 8006966:	3301      	adds	r3, #1
 8006968:	6033      	str	r3, [r6, #0]
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	0699      	lsls	r1, r3, #26
 800696e:	bf42      	ittt	mi
 8006970:	6833      	ldrmi	r3, [r6, #0]
 8006972:	3302      	addmi	r3, #2
 8006974:	6033      	strmi	r3, [r6, #0]
 8006976:	6825      	ldr	r5, [r4, #0]
 8006978:	f015 0506 	ands.w	r5, r5, #6
 800697c:	d106      	bne.n	800698c <_printf_common+0x48>
 800697e:	f104 0a19 	add.w	sl, r4, #25
 8006982:	68e3      	ldr	r3, [r4, #12]
 8006984:	6832      	ldr	r2, [r6, #0]
 8006986:	1a9b      	subs	r3, r3, r2
 8006988:	42ab      	cmp	r3, r5
 800698a:	dc26      	bgt.n	80069da <_printf_common+0x96>
 800698c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006990:	1e13      	subs	r3, r2, #0
 8006992:	6822      	ldr	r2, [r4, #0]
 8006994:	bf18      	it	ne
 8006996:	2301      	movne	r3, #1
 8006998:	0692      	lsls	r2, r2, #26
 800699a:	d42b      	bmi.n	80069f4 <_printf_common+0xb0>
 800699c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069a0:	4649      	mov	r1, r9
 80069a2:	4638      	mov	r0, r7
 80069a4:	47c0      	blx	r8
 80069a6:	3001      	adds	r0, #1
 80069a8:	d01e      	beq.n	80069e8 <_printf_common+0xa4>
 80069aa:	6823      	ldr	r3, [r4, #0]
 80069ac:	68e5      	ldr	r5, [r4, #12]
 80069ae:	6832      	ldr	r2, [r6, #0]
 80069b0:	f003 0306 	and.w	r3, r3, #6
 80069b4:	2b04      	cmp	r3, #4
 80069b6:	bf08      	it	eq
 80069b8:	1aad      	subeq	r5, r5, r2
 80069ba:	68a3      	ldr	r3, [r4, #8]
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	bf0c      	ite	eq
 80069c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069c4:	2500      	movne	r5, #0
 80069c6:	4293      	cmp	r3, r2
 80069c8:	bfc4      	itt	gt
 80069ca:	1a9b      	subgt	r3, r3, r2
 80069cc:	18ed      	addgt	r5, r5, r3
 80069ce:	2600      	movs	r6, #0
 80069d0:	341a      	adds	r4, #26
 80069d2:	42b5      	cmp	r5, r6
 80069d4:	d11a      	bne.n	8006a0c <_printf_common+0xc8>
 80069d6:	2000      	movs	r0, #0
 80069d8:	e008      	b.n	80069ec <_printf_common+0xa8>
 80069da:	2301      	movs	r3, #1
 80069dc:	4652      	mov	r2, sl
 80069de:	4649      	mov	r1, r9
 80069e0:	4638      	mov	r0, r7
 80069e2:	47c0      	blx	r8
 80069e4:	3001      	adds	r0, #1
 80069e6:	d103      	bne.n	80069f0 <_printf_common+0xac>
 80069e8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069f0:	3501      	adds	r5, #1
 80069f2:	e7c6      	b.n	8006982 <_printf_common+0x3e>
 80069f4:	18e1      	adds	r1, r4, r3
 80069f6:	1c5a      	adds	r2, r3, #1
 80069f8:	2030      	movs	r0, #48	; 0x30
 80069fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80069fe:	4422      	add	r2, r4
 8006a00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a08:	3302      	adds	r3, #2
 8006a0a:	e7c7      	b.n	800699c <_printf_common+0x58>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	4622      	mov	r2, r4
 8006a10:	4649      	mov	r1, r9
 8006a12:	4638      	mov	r0, r7
 8006a14:	47c0      	blx	r8
 8006a16:	3001      	adds	r0, #1
 8006a18:	d0e6      	beq.n	80069e8 <_printf_common+0xa4>
 8006a1a:	3601      	adds	r6, #1
 8006a1c:	e7d9      	b.n	80069d2 <_printf_common+0x8e>
	...

08006a20 <_printf_i>:
 8006a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a24:	7e0f      	ldrb	r7, [r1, #24]
 8006a26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a28:	2f78      	cmp	r7, #120	; 0x78
 8006a2a:	4691      	mov	r9, r2
 8006a2c:	4680      	mov	r8, r0
 8006a2e:	460c      	mov	r4, r1
 8006a30:	469a      	mov	sl, r3
 8006a32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a36:	d807      	bhi.n	8006a48 <_printf_i+0x28>
 8006a38:	2f62      	cmp	r7, #98	; 0x62
 8006a3a:	d80a      	bhi.n	8006a52 <_printf_i+0x32>
 8006a3c:	2f00      	cmp	r7, #0
 8006a3e:	f000 80d8 	beq.w	8006bf2 <_printf_i+0x1d2>
 8006a42:	2f58      	cmp	r7, #88	; 0x58
 8006a44:	f000 80a3 	beq.w	8006b8e <_printf_i+0x16e>
 8006a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a50:	e03a      	b.n	8006ac8 <_printf_i+0xa8>
 8006a52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a56:	2b15      	cmp	r3, #21
 8006a58:	d8f6      	bhi.n	8006a48 <_printf_i+0x28>
 8006a5a:	a101      	add	r1, pc, #4	; (adr r1, 8006a60 <_printf_i+0x40>)
 8006a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a60:	08006ab9 	.word	0x08006ab9
 8006a64:	08006acd 	.word	0x08006acd
 8006a68:	08006a49 	.word	0x08006a49
 8006a6c:	08006a49 	.word	0x08006a49
 8006a70:	08006a49 	.word	0x08006a49
 8006a74:	08006a49 	.word	0x08006a49
 8006a78:	08006acd 	.word	0x08006acd
 8006a7c:	08006a49 	.word	0x08006a49
 8006a80:	08006a49 	.word	0x08006a49
 8006a84:	08006a49 	.word	0x08006a49
 8006a88:	08006a49 	.word	0x08006a49
 8006a8c:	08006bd9 	.word	0x08006bd9
 8006a90:	08006afd 	.word	0x08006afd
 8006a94:	08006bbb 	.word	0x08006bbb
 8006a98:	08006a49 	.word	0x08006a49
 8006a9c:	08006a49 	.word	0x08006a49
 8006aa0:	08006bfb 	.word	0x08006bfb
 8006aa4:	08006a49 	.word	0x08006a49
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a49 	.word	0x08006a49
 8006ab0:	08006a49 	.word	0x08006a49
 8006ab4:	08006bc3 	.word	0x08006bc3
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	1d1a      	adds	r2, r3, #4
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	602a      	str	r2, [r5, #0]
 8006ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ac4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ac8:	2301      	movs	r3, #1
 8006aca:	e0a3      	b.n	8006c14 <_printf_i+0x1f4>
 8006acc:	6820      	ldr	r0, [r4, #0]
 8006ace:	6829      	ldr	r1, [r5, #0]
 8006ad0:	0606      	lsls	r6, r0, #24
 8006ad2:	f101 0304 	add.w	r3, r1, #4
 8006ad6:	d50a      	bpl.n	8006aee <_printf_i+0xce>
 8006ad8:	680e      	ldr	r6, [r1, #0]
 8006ada:	602b      	str	r3, [r5, #0]
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	da03      	bge.n	8006ae8 <_printf_i+0xc8>
 8006ae0:	232d      	movs	r3, #45	; 0x2d
 8006ae2:	4276      	negs	r6, r6
 8006ae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae8:	485e      	ldr	r0, [pc, #376]	; (8006c64 <_printf_i+0x244>)
 8006aea:	230a      	movs	r3, #10
 8006aec:	e019      	b.n	8006b22 <_printf_i+0x102>
 8006aee:	680e      	ldr	r6, [r1, #0]
 8006af0:	602b      	str	r3, [r5, #0]
 8006af2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006af6:	bf18      	it	ne
 8006af8:	b236      	sxthne	r6, r6
 8006afa:	e7ef      	b.n	8006adc <_printf_i+0xbc>
 8006afc:	682b      	ldr	r3, [r5, #0]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1d19      	adds	r1, r3, #4
 8006b02:	6029      	str	r1, [r5, #0]
 8006b04:	0601      	lsls	r1, r0, #24
 8006b06:	d501      	bpl.n	8006b0c <_printf_i+0xec>
 8006b08:	681e      	ldr	r6, [r3, #0]
 8006b0a:	e002      	b.n	8006b12 <_printf_i+0xf2>
 8006b0c:	0646      	lsls	r6, r0, #25
 8006b0e:	d5fb      	bpl.n	8006b08 <_printf_i+0xe8>
 8006b10:	881e      	ldrh	r6, [r3, #0]
 8006b12:	4854      	ldr	r0, [pc, #336]	; (8006c64 <_printf_i+0x244>)
 8006b14:	2f6f      	cmp	r7, #111	; 0x6f
 8006b16:	bf0c      	ite	eq
 8006b18:	2308      	moveq	r3, #8
 8006b1a:	230a      	movne	r3, #10
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b22:	6865      	ldr	r5, [r4, #4]
 8006b24:	60a5      	str	r5, [r4, #8]
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	bfa2      	ittt	ge
 8006b2a:	6821      	ldrge	r1, [r4, #0]
 8006b2c:	f021 0104 	bicge.w	r1, r1, #4
 8006b30:	6021      	strge	r1, [r4, #0]
 8006b32:	b90e      	cbnz	r6, 8006b38 <_printf_i+0x118>
 8006b34:	2d00      	cmp	r5, #0
 8006b36:	d04d      	beq.n	8006bd4 <_printf_i+0x1b4>
 8006b38:	4615      	mov	r5, r2
 8006b3a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b3e:	fb03 6711 	mls	r7, r3, r1, r6
 8006b42:	5dc7      	ldrb	r7, [r0, r7]
 8006b44:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b48:	4637      	mov	r7, r6
 8006b4a:	42bb      	cmp	r3, r7
 8006b4c:	460e      	mov	r6, r1
 8006b4e:	d9f4      	bls.n	8006b3a <_printf_i+0x11a>
 8006b50:	2b08      	cmp	r3, #8
 8006b52:	d10b      	bne.n	8006b6c <_printf_i+0x14c>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	07de      	lsls	r6, r3, #31
 8006b58:	d508      	bpl.n	8006b6c <_printf_i+0x14c>
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	6861      	ldr	r1, [r4, #4]
 8006b5e:	4299      	cmp	r1, r3
 8006b60:	bfde      	ittt	le
 8006b62:	2330      	movle	r3, #48	; 0x30
 8006b64:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006b68:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006b6c:	1b52      	subs	r2, r2, r5
 8006b6e:	6122      	str	r2, [r4, #16]
 8006b70:	f8cd a000 	str.w	sl, [sp]
 8006b74:	464b      	mov	r3, r9
 8006b76:	aa03      	add	r2, sp, #12
 8006b78:	4621      	mov	r1, r4
 8006b7a:	4640      	mov	r0, r8
 8006b7c:	f7ff fee2 	bl	8006944 <_printf_common>
 8006b80:	3001      	adds	r0, #1
 8006b82:	d14c      	bne.n	8006c1e <_printf_i+0x1fe>
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295
 8006b88:	b004      	add	sp, #16
 8006b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8e:	4835      	ldr	r0, [pc, #212]	; (8006c64 <_printf_i+0x244>)
 8006b90:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006b94:	6829      	ldr	r1, [r5, #0]
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	f851 6b04 	ldr.w	r6, [r1], #4
 8006b9c:	6029      	str	r1, [r5, #0]
 8006b9e:	061d      	lsls	r5, r3, #24
 8006ba0:	d514      	bpl.n	8006bcc <_printf_i+0x1ac>
 8006ba2:	07df      	lsls	r7, r3, #31
 8006ba4:	bf44      	itt	mi
 8006ba6:	f043 0320 	orrmi.w	r3, r3, #32
 8006baa:	6023      	strmi	r3, [r4, #0]
 8006bac:	b91e      	cbnz	r6, 8006bb6 <_printf_i+0x196>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	f023 0320 	bic.w	r3, r3, #32
 8006bb4:	6023      	str	r3, [r4, #0]
 8006bb6:	2310      	movs	r3, #16
 8006bb8:	e7b0      	b.n	8006b1c <_printf_i+0xfc>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	f043 0320 	orr.w	r3, r3, #32
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	2378      	movs	r3, #120	; 0x78
 8006bc4:	4828      	ldr	r0, [pc, #160]	; (8006c68 <_printf_i+0x248>)
 8006bc6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006bca:	e7e3      	b.n	8006b94 <_printf_i+0x174>
 8006bcc:	0659      	lsls	r1, r3, #25
 8006bce:	bf48      	it	mi
 8006bd0:	b2b6      	uxthmi	r6, r6
 8006bd2:	e7e6      	b.n	8006ba2 <_printf_i+0x182>
 8006bd4:	4615      	mov	r5, r2
 8006bd6:	e7bb      	b.n	8006b50 <_printf_i+0x130>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	6826      	ldr	r6, [r4, #0]
 8006bdc:	6961      	ldr	r1, [r4, #20]
 8006bde:	1d18      	adds	r0, r3, #4
 8006be0:	6028      	str	r0, [r5, #0]
 8006be2:	0635      	lsls	r5, r6, #24
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	d501      	bpl.n	8006bec <_printf_i+0x1cc>
 8006be8:	6019      	str	r1, [r3, #0]
 8006bea:	e002      	b.n	8006bf2 <_printf_i+0x1d2>
 8006bec:	0670      	lsls	r0, r6, #25
 8006bee:	d5fb      	bpl.n	8006be8 <_printf_i+0x1c8>
 8006bf0:	8019      	strh	r1, [r3, #0]
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	6123      	str	r3, [r4, #16]
 8006bf6:	4615      	mov	r5, r2
 8006bf8:	e7ba      	b.n	8006b70 <_printf_i+0x150>
 8006bfa:	682b      	ldr	r3, [r5, #0]
 8006bfc:	1d1a      	adds	r2, r3, #4
 8006bfe:	602a      	str	r2, [r5, #0]
 8006c00:	681d      	ldr	r5, [r3, #0]
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	2100      	movs	r1, #0
 8006c06:	4628      	mov	r0, r5
 8006c08:	f7f9 fae2 	bl	80001d0 <memchr>
 8006c0c:	b108      	cbz	r0, 8006c12 <_printf_i+0x1f2>
 8006c0e:	1b40      	subs	r0, r0, r5
 8006c10:	6060      	str	r0, [r4, #4]
 8006c12:	6863      	ldr	r3, [r4, #4]
 8006c14:	6123      	str	r3, [r4, #16]
 8006c16:	2300      	movs	r3, #0
 8006c18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c1c:	e7a8      	b.n	8006b70 <_printf_i+0x150>
 8006c1e:	6923      	ldr	r3, [r4, #16]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4649      	mov	r1, r9
 8006c24:	4640      	mov	r0, r8
 8006c26:	47d0      	blx	sl
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d0ab      	beq.n	8006b84 <_printf_i+0x164>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	d413      	bmi.n	8006c5a <_printf_i+0x23a>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	9b03      	ldr	r3, [sp, #12]
 8006c36:	4298      	cmp	r0, r3
 8006c38:	bfb8      	it	lt
 8006c3a:	4618      	movlt	r0, r3
 8006c3c:	e7a4      	b.n	8006b88 <_printf_i+0x168>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4632      	mov	r2, r6
 8006c42:	4649      	mov	r1, r9
 8006c44:	4640      	mov	r0, r8
 8006c46:	47d0      	blx	sl
 8006c48:	3001      	adds	r0, #1
 8006c4a:	d09b      	beq.n	8006b84 <_printf_i+0x164>
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	68e3      	ldr	r3, [r4, #12]
 8006c50:	9903      	ldr	r1, [sp, #12]
 8006c52:	1a5b      	subs	r3, r3, r1
 8006c54:	42ab      	cmp	r3, r5
 8006c56:	dcf2      	bgt.n	8006c3e <_printf_i+0x21e>
 8006c58:	e7eb      	b.n	8006c32 <_printf_i+0x212>
 8006c5a:	2500      	movs	r5, #0
 8006c5c:	f104 0619 	add.w	r6, r4, #25
 8006c60:	e7f5      	b.n	8006c4e <_printf_i+0x22e>
 8006c62:	bf00      	nop
 8006c64:	08007ae9 	.word	0x08007ae9
 8006c68:	08007afa 	.word	0x08007afa

08006c6c <iprintf>:
 8006c6c:	b40f      	push	{r0, r1, r2, r3}
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <iprintf+0x2c>)
 8006c70:	b513      	push	{r0, r1, r4, lr}
 8006c72:	681c      	ldr	r4, [r3, #0]
 8006c74:	b124      	cbz	r4, 8006c80 <iprintf+0x14>
 8006c76:	69a3      	ldr	r3, [r4, #24]
 8006c78:	b913      	cbnz	r3, 8006c80 <iprintf+0x14>
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	f000 fa66 	bl	800714c <__sinit>
 8006c80:	ab05      	add	r3, sp, #20
 8006c82:	9a04      	ldr	r2, [sp, #16]
 8006c84:	68a1      	ldr	r1, [r4, #8]
 8006c86:	9301      	str	r3, [sp, #4]
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f7ff fd2b 	bl	80066e4 <_vfiprintf_r>
 8006c8e:	b002      	add	sp, #8
 8006c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c94:	b004      	add	sp, #16
 8006c96:	4770      	bx	lr
 8006c98:	20000178 	.word	0x20000178

08006c9c <_puts_r>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b118      	cbz	r0, 8006cac <_puts_r+0x10>
 8006ca4:	6983      	ldr	r3, [r0, #24]
 8006ca6:	b90b      	cbnz	r3, 8006cac <_puts_r+0x10>
 8006ca8:	f000 fa50 	bl	800714c <__sinit>
 8006cac:	69ab      	ldr	r3, [r5, #24]
 8006cae:	68ac      	ldr	r4, [r5, #8]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_puts_r+0x1c>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 fa4a 	bl	800714c <__sinit>
 8006cb8:	4b2c      	ldr	r3, [pc, #176]	; (8006d6c <_puts_r+0xd0>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d120      	bne.n	8006d00 <_puts_r+0x64>
 8006cbe:	686c      	ldr	r4, [r5, #4]
 8006cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc2:	07db      	lsls	r3, r3, #31
 8006cc4:	d405      	bmi.n	8006cd2 <_puts_r+0x36>
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	0598      	lsls	r0, r3, #22
 8006cca:	d402      	bmi.n	8006cd2 <_puts_r+0x36>
 8006ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cce:	f000 fadb 	bl	8007288 <__retarget_lock_acquire_recursive>
 8006cd2:	89a3      	ldrh	r3, [r4, #12]
 8006cd4:	0719      	lsls	r1, r3, #28
 8006cd6:	d51d      	bpl.n	8006d14 <_puts_r+0x78>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	b1db      	cbz	r3, 8006d14 <_puts_r+0x78>
 8006cdc:	3e01      	subs	r6, #1
 8006cde:	68a3      	ldr	r3, [r4, #8]
 8006ce0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ce4:	3b01      	subs	r3, #1
 8006ce6:	60a3      	str	r3, [r4, #8]
 8006ce8:	bb39      	cbnz	r1, 8006d3a <_puts_r+0x9e>
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	da38      	bge.n	8006d60 <_puts_r+0xc4>
 8006cee:	4622      	mov	r2, r4
 8006cf0:	210a      	movs	r1, #10
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	f000 f848 	bl	8006d88 <__swbuf_r>
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	d011      	beq.n	8006d20 <_puts_r+0x84>
 8006cfc:	250a      	movs	r5, #10
 8006cfe:	e011      	b.n	8006d24 <_puts_r+0x88>
 8006d00:	4b1b      	ldr	r3, [pc, #108]	; (8006d70 <_puts_r+0xd4>)
 8006d02:	429c      	cmp	r4, r3
 8006d04:	d101      	bne.n	8006d0a <_puts_r+0x6e>
 8006d06:	68ac      	ldr	r4, [r5, #8]
 8006d08:	e7da      	b.n	8006cc0 <_puts_r+0x24>
 8006d0a:	4b1a      	ldr	r3, [pc, #104]	; (8006d74 <_puts_r+0xd8>)
 8006d0c:	429c      	cmp	r4, r3
 8006d0e:	bf08      	it	eq
 8006d10:	68ec      	ldreq	r4, [r5, #12]
 8006d12:	e7d5      	b.n	8006cc0 <_puts_r+0x24>
 8006d14:	4621      	mov	r1, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 f888 	bl	8006e2c <__swsetup_r>
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d0dd      	beq.n	8006cdc <_puts_r+0x40>
 8006d20:	f04f 35ff 	mov.w	r5, #4294967295
 8006d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d26:	07da      	lsls	r2, r3, #31
 8006d28:	d405      	bmi.n	8006d36 <_puts_r+0x9a>
 8006d2a:	89a3      	ldrh	r3, [r4, #12]
 8006d2c:	059b      	lsls	r3, r3, #22
 8006d2e:	d402      	bmi.n	8006d36 <_puts_r+0x9a>
 8006d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d32:	f000 faaa 	bl	800728a <__retarget_lock_release_recursive>
 8006d36:	4628      	mov	r0, r5
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da04      	bge.n	8006d48 <_puts_r+0xac>
 8006d3e:	69a2      	ldr	r2, [r4, #24]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	dc06      	bgt.n	8006d52 <_puts_r+0xb6>
 8006d44:	290a      	cmp	r1, #10
 8006d46:	d004      	beq.n	8006d52 <_puts_r+0xb6>
 8006d48:	6823      	ldr	r3, [r4, #0]
 8006d4a:	1c5a      	adds	r2, r3, #1
 8006d4c:	6022      	str	r2, [r4, #0]
 8006d4e:	7019      	strb	r1, [r3, #0]
 8006d50:	e7c5      	b.n	8006cde <_puts_r+0x42>
 8006d52:	4622      	mov	r2, r4
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 f817 	bl	8006d88 <__swbuf_r>
 8006d5a:	3001      	adds	r0, #1
 8006d5c:	d1bf      	bne.n	8006cde <_puts_r+0x42>
 8006d5e:	e7df      	b.n	8006d20 <_puts_r+0x84>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	250a      	movs	r5, #10
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	6022      	str	r2, [r4, #0]
 8006d68:	701d      	strb	r5, [r3, #0]
 8006d6a:	e7db      	b.n	8006d24 <_puts_r+0x88>
 8006d6c:	08007b2c 	.word	0x08007b2c
 8006d70:	08007b4c 	.word	0x08007b4c
 8006d74:	08007b0c 	.word	0x08007b0c

08006d78 <puts>:
 8006d78:	4b02      	ldr	r3, [pc, #8]	; (8006d84 <puts+0xc>)
 8006d7a:	4601      	mov	r1, r0
 8006d7c:	6818      	ldr	r0, [r3, #0]
 8006d7e:	f7ff bf8d 	b.w	8006c9c <_puts_r>
 8006d82:	bf00      	nop
 8006d84:	20000178 	.word	0x20000178

08006d88 <__swbuf_r>:
 8006d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8a:	460e      	mov	r6, r1
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	4605      	mov	r5, r0
 8006d90:	b118      	cbz	r0, 8006d9a <__swbuf_r+0x12>
 8006d92:	6983      	ldr	r3, [r0, #24]
 8006d94:	b90b      	cbnz	r3, 8006d9a <__swbuf_r+0x12>
 8006d96:	f000 f9d9 	bl	800714c <__sinit>
 8006d9a:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <__swbuf_r+0x98>)
 8006d9c:	429c      	cmp	r4, r3
 8006d9e:	d12b      	bne.n	8006df8 <__swbuf_r+0x70>
 8006da0:	686c      	ldr	r4, [r5, #4]
 8006da2:	69a3      	ldr	r3, [r4, #24]
 8006da4:	60a3      	str	r3, [r4, #8]
 8006da6:	89a3      	ldrh	r3, [r4, #12]
 8006da8:	071a      	lsls	r2, r3, #28
 8006daa:	d52f      	bpl.n	8006e0c <__swbuf_r+0x84>
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	b36b      	cbz	r3, 8006e0c <__swbuf_r+0x84>
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	6820      	ldr	r0, [r4, #0]
 8006db4:	1ac0      	subs	r0, r0, r3
 8006db6:	6963      	ldr	r3, [r4, #20]
 8006db8:	b2f6      	uxtb	r6, r6
 8006dba:	4283      	cmp	r3, r0
 8006dbc:	4637      	mov	r7, r6
 8006dbe:	dc04      	bgt.n	8006dca <__swbuf_r+0x42>
 8006dc0:	4621      	mov	r1, r4
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f000 f92e 	bl	8007024 <_fflush_r>
 8006dc8:	bb30      	cbnz	r0, 8006e18 <__swbuf_r+0x90>
 8006dca:	68a3      	ldr	r3, [r4, #8]
 8006dcc:	3b01      	subs	r3, #1
 8006dce:	60a3      	str	r3, [r4, #8]
 8006dd0:	6823      	ldr	r3, [r4, #0]
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	6022      	str	r2, [r4, #0]
 8006dd6:	701e      	strb	r6, [r3, #0]
 8006dd8:	6963      	ldr	r3, [r4, #20]
 8006dda:	3001      	adds	r0, #1
 8006ddc:	4283      	cmp	r3, r0
 8006dde:	d004      	beq.n	8006dea <__swbuf_r+0x62>
 8006de0:	89a3      	ldrh	r3, [r4, #12]
 8006de2:	07db      	lsls	r3, r3, #31
 8006de4:	d506      	bpl.n	8006df4 <__swbuf_r+0x6c>
 8006de6:	2e0a      	cmp	r6, #10
 8006de8:	d104      	bne.n	8006df4 <__swbuf_r+0x6c>
 8006dea:	4621      	mov	r1, r4
 8006dec:	4628      	mov	r0, r5
 8006dee:	f000 f919 	bl	8007024 <_fflush_r>
 8006df2:	b988      	cbnz	r0, 8006e18 <__swbuf_r+0x90>
 8006df4:	4638      	mov	r0, r7
 8006df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df8:	4b0a      	ldr	r3, [pc, #40]	; (8006e24 <__swbuf_r+0x9c>)
 8006dfa:	429c      	cmp	r4, r3
 8006dfc:	d101      	bne.n	8006e02 <__swbuf_r+0x7a>
 8006dfe:	68ac      	ldr	r4, [r5, #8]
 8006e00:	e7cf      	b.n	8006da2 <__swbuf_r+0x1a>
 8006e02:	4b09      	ldr	r3, [pc, #36]	; (8006e28 <__swbuf_r+0xa0>)
 8006e04:	429c      	cmp	r4, r3
 8006e06:	bf08      	it	eq
 8006e08:	68ec      	ldreq	r4, [r5, #12]
 8006e0a:	e7ca      	b.n	8006da2 <__swbuf_r+0x1a>
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 f80c 	bl	8006e2c <__swsetup_r>
 8006e14:	2800      	cmp	r0, #0
 8006e16:	d0cb      	beq.n	8006db0 <__swbuf_r+0x28>
 8006e18:	f04f 37ff 	mov.w	r7, #4294967295
 8006e1c:	e7ea      	b.n	8006df4 <__swbuf_r+0x6c>
 8006e1e:	bf00      	nop
 8006e20:	08007b2c 	.word	0x08007b2c
 8006e24:	08007b4c 	.word	0x08007b4c
 8006e28:	08007b0c 	.word	0x08007b0c

08006e2c <__swsetup_r>:
 8006e2c:	4b32      	ldr	r3, [pc, #200]	; (8006ef8 <__swsetup_r+0xcc>)
 8006e2e:	b570      	push	{r4, r5, r6, lr}
 8006e30:	681d      	ldr	r5, [r3, #0]
 8006e32:	4606      	mov	r6, r0
 8006e34:	460c      	mov	r4, r1
 8006e36:	b125      	cbz	r5, 8006e42 <__swsetup_r+0x16>
 8006e38:	69ab      	ldr	r3, [r5, #24]
 8006e3a:	b913      	cbnz	r3, 8006e42 <__swsetup_r+0x16>
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	f000 f985 	bl	800714c <__sinit>
 8006e42:	4b2e      	ldr	r3, [pc, #184]	; (8006efc <__swsetup_r+0xd0>)
 8006e44:	429c      	cmp	r4, r3
 8006e46:	d10f      	bne.n	8006e68 <__swsetup_r+0x3c>
 8006e48:	686c      	ldr	r4, [r5, #4]
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e50:	0719      	lsls	r1, r3, #28
 8006e52:	d42c      	bmi.n	8006eae <__swsetup_r+0x82>
 8006e54:	06dd      	lsls	r5, r3, #27
 8006e56:	d411      	bmi.n	8006e7c <__swsetup_r+0x50>
 8006e58:	2309      	movs	r3, #9
 8006e5a:	6033      	str	r3, [r6, #0]
 8006e5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	f04f 30ff 	mov.w	r0, #4294967295
 8006e66:	e03e      	b.n	8006ee6 <__swsetup_r+0xba>
 8006e68:	4b25      	ldr	r3, [pc, #148]	; (8006f00 <__swsetup_r+0xd4>)
 8006e6a:	429c      	cmp	r4, r3
 8006e6c:	d101      	bne.n	8006e72 <__swsetup_r+0x46>
 8006e6e:	68ac      	ldr	r4, [r5, #8]
 8006e70:	e7eb      	b.n	8006e4a <__swsetup_r+0x1e>
 8006e72:	4b24      	ldr	r3, [pc, #144]	; (8006f04 <__swsetup_r+0xd8>)
 8006e74:	429c      	cmp	r4, r3
 8006e76:	bf08      	it	eq
 8006e78:	68ec      	ldreq	r4, [r5, #12]
 8006e7a:	e7e6      	b.n	8006e4a <__swsetup_r+0x1e>
 8006e7c:	0758      	lsls	r0, r3, #29
 8006e7e:	d512      	bpl.n	8006ea6 <__swsetup_r+0x7a>
 8006e80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e82:	b141      	cbz	r1, 8006e96 <__swsetup_r+0x6a>
 8006e84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e88:	4299      	cmp	r1, r3
 8006e8a:	d002      	beq.n	8006e92 <__swsetup_r+0x66>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	f000 fa63 	bl	8007358 <_free_r>
 8006e92:	2300      	movs	r3, #0
 8006e94:	6363      	str	r3, [r4, #52]	; 0x34
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	6063      	str	r3, [r4, #4]
 8006ea2:	6923      	ldr	r3, [r4, #16]
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	89a3      	ldrh	r3, [r4, #12]
 8006ea8:	f043 0308 	orr.w	r3, r3, #8
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	6923      	ldr	r3, [r4, #16]
 8006eb0:	b94b      	cbnz	r3, 8006ec6 <__swsetup_r+0x9a>
 8006eb2:	89a3      	ldrh	r3, [r4, #12]
 8006eb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ebc:	d003      	beq.n	8006ec6 <__swsetup_r+0x9a>
 8006ebe:	4621      	mov	r1, r4
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 fa09 	bl	80072d8 <__smakebuf_r>
 8006ec6:	89a0      	ldrh	r0, [r4, #12]
 8006ec8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ecc:	f010 0301 	ands.w	r3, r0, #1
 8006ed0:	d00a      	beq.n	8006ee8 <__swsetup_r+0xbc>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6963      	ldr	r3, [r4, #20]
 8006ed8:	425b      	negs	r3, r3
 8006eda:	61a3      	str	r3, [r4, #24]
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	b943      	cbnz	r3, 8006ef2 <__swsetup_r+0xc6>
 8006ee0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ee4:	d1ba      	bne.n	8006e5c <__swsetup_r+0x30>
 8006ee6:	bd70      	pop	{r4, r5, r6, pc}
 8006ee8:	0781      	lsls	r1, r0, #30
 8006eea:	bf58      	it	pl
 8006eec:	6963      	ldrpl	r3, [r4, #20]
 8006eee:	60a3      	str	r3, [r4, #8]
 8006ef0:	e7f4      	b.n	8006edc <__swsetup_r+0xb0>
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	e7f7      	b.n	8006ee6 <__swsetup_r+0xba>
 8006ef6:	bf00      	nop
 8006ef8:	20000178 	.word	0x20000178
 8006efc:	08007b2c 	.word	0x08007b2c
 8006f00:	08007b4c 	.word	0x08007b4c
 8006f04:	08007b0c 	.word	0x08007b0c

08006f08 <abort>:
 8006f08:	b508      	push	{r3, lr}
 8006f0a:	2006      	movs	r0, #6
 8006f0c:	f000 fb3c 	bl	8007588 <raise>
 8006f10:	2001      	movs	r0, #1
 8006f12:	f7fa ff85 	bl	8001e20 <_exit>
	...

08006f18 <__sflush_r>:
 8006f18:	898a      	ldrh	r2, [r1, #12]
 8006f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	0710      	lsls	r0, r2, #28
 8006f22:	460c      	mov	r4, r1
 8006f24:	d458      	bmi.n	8006fd8 <__sflush_r+0xc0>
 8006f26:	684b      	ldr	r3, [r1, #4]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	dc05      	bgt.n	8006f38 <__sflush_r+0x20>
 8006f2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	dc02      	bgt.n	8006f38 <__sflush_r+0x20>
 8006f32:	2000      	movs	r0, #0
 8006f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f3a:	2e00      	cmp	r6, #0
 8006f3c:	d0f9      	beq.n	8006f32 <__sflush_r+0x1a>
 8006f3e:	2300      	movs	r3, #0
 8006f40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f44:	682f      	ldr	r7, [r5, #0]
 8006f46:	602b      	str	r3, [r5, #0]
 8006f48:	d032      	beq.n	8006fb0 <__sflush_r+0x98>
 8006f4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	075a      	lsls	r2, r3, #29
 8006f50:	d505      	bpl.n	8006f5e <__sflush_r+0x46>
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	1ac0      	subs	r0, r0, r3
 8006f56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f58:	b10b      	cbz	r3, 8006f5e <__sflush_r+0x46>
 8006f5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f5c:	1ac0      	subs	r0, r0, r3
 8006f5e:	2300      	movs	r3, #0
 8006f60:	4602      	mov	r2, r0
 8006f62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f64:	6a21      	ldr	r1, [r4, #32]
 8006f66:	4628      	mov	r0, r5
 8006f68:	47b0      	blx	r6
 8006f6a:	1c43      	adds	r3, r0, #1
 8006f6c:	89a3      	ldrh	r3, [r4, #12]
 8006f6e:	d106      	bne.n	8006f7e <__sflush_r+0x66>
 8006f70:	6829      	ldr	r1, [r5, #0]
 8006f72:	291d      	cmp	r1, #29
 8006f74:	d82c      	bhi.n	8006fd0 <__sflush_r+0xb8>
 8006f76:	4a2a      	ldr	r2, [pc, #168]	; (8007020 <__sflush_r+0x108>)
 8006f78:	40ca      	lsrs	r2, r1
 8006f7a:	07d6      	lsls	r6, r2, #31
 8006f7c:	d528      	bpl.n	8006fd0 <__sflush_r+0xb8>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	6062      	str	r2, [r4, #4]
 8006f82:	04d9      	lsls	r1, r3, #19
 8006f84:	6922      	ldr	r2, [r4, #16]
 8006f86:	6022      	str	r2, [r4, #0]
 8006f88:	d504      	bpl.n	8006f94 <__sflush_r+0x7c>
 8006f8a:	1c42      	adds	r2, r0, #1
 8006f8c:	d101      	bne.n	8006f92 <__sflush_r+0x7a>
 8006f8e:	682b      	ldr	r3, [r5, #0]
 8006f90:	b903      	cbnz	r3, 8006f94 <__sflush_r+0x7c>
 8006f92:	6560      	str	r0, [r4, #84]	; 0x54
 8006f94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f96:	602f      	str	r7, [r5, #0]
 8006f98:	2900      	cmp	r1, #0
 8006f9a:	d0ca      	beq.n	8006f32 <__sflush_r+0x1a>
 8006f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d002      	beq.n	8006faa <__sflush_r+0x92>
 8006fa4:	4628      	mov	r0, r5
 8006fa6:	f000 f9d7 	bl	8007358 <_free_r>
 8006faa:	2000      	movs	r0, #0
 8006fac:	6360      	str	r0, [r4, #52]	; 0x34
 8006fae:	e7c1      	b.n	8006f34 <__sflush_r+0x1c>
 8006fb0:	6a21      	ldr	r1, [r4, #32]
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b0      	blx	r6
 8006fb8:	1c41      	adds	r1, r0, #1
 8006fba:	d1c7      	bne.n	8006f4c <__sflush_r+0x34>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d0c4      	beq.n	8006f4c <__sflush_r+0x34>
 8006fc2:	2b1d      	cmp	r3, #29
 8006fc4:	d001      	beq.n	8006fca <__sflush_r+0xb2>
 8006fc6:	2b16      	cmp	r3, #22
 8006fc8:	d101      	bne.n	8006fce <__sflush_r+0xb6>
 8006fca:	602f      	str	r7, [r5, #0]
 8006fcc:	e7b1      	b.n	8006f32 <__sflush_r+0x1a>
 8006fce:	89a3      	ldrh	r3, [r4, #12]
 8006fd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fd4:	81a3      	strh	r3, [r4, #12]
 8006fd6:	e7ad      	b.n	8006f34 <__sflush_r+0x1c>
 8006fd8:	690f      	ldr	r7, [r1, #16]
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	d0a9      	beq.n	8006f32 <__sflush_r+0x1a>
 8006fde:	0793      	lsls	r3, r2, #30
 8006fe0:	680e      	ldr	r6, [r1, #0]
 8006fe2:	bf08      	it	eq
 8006fe4:	694b      	ldreq	r3, [r1, #20]
 8006fe6:	600f      	str	r7, [r1, #0]
 8006fe8:	bf18      	it	ne
 8006fea:	2300      	movne	r3, #0
 8006fec:	eba6 0807 	sub.w	r8, r6, r7
 8006ff0:	608b      	str	r3, [r1, #8]
 8006ff2:	f1b8 0f00 	cmp.w	r8, #0
 8006ff6:	dd9c      	ble.n	8006f32 <__sflush_r+0x1a>
 8006ff8:	6a21      	ldr	r1, [r4, #32]
 8006ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ffc:	4643      	mov	r3, r8
 8006ffe:	463a      	mov	r2, r7
 8007000:	4628      	mov	r0, r5
 8007002:	47b0      	blx	r6
 8007004:	2800      	cmp	r0, #0
 8007006:	dc06      	bgt.n	8007016 <__sflush_r+0xfe>
 8007008:	89a3      	ldrh	r3, [r4, #12]
 800700a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800700e:	81a3      	strh	r3, [r4, #12]
 8007010:	f04f 30ff 	mov.w	r0, #4294967295
 8007014:	e78e      	b.n	8006f34 <__sflush_r+0x1c>
 8007016:	4407      	add	r7, r0
 8007018:	eba8 0800 	sub.w	r8, r8, r0
 800701c:	e7e9      	b.n	8006ff2 <__sflush_r+0xda>
 800701e:	bf00      	nop
 8007020:	20400001 	.word	0x20400001

08007024 <_fflush_r>:
 8007024:	b538      	push	{r3, r4, r5, lr}
 8007026:	690b      	ldr	r3, [r1, #16]
 8007028:	4605      	mov	r5, r0
 800702a:	460c      	mov	r4, r1
 800702c:	b913      	cbnz	r3, 8007034 <_fflush_r+0x10>
 800702e:	2500      	movs	r5, #0
 8007030:	4628      	mov	r0, r5
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	b118      	cbz	r0, 800703e <_fflush_r+0x1a>
 8007036:	6983      	ldr	r3, [r0, #24]
 8007038:	b90b      	cbnz	r3, 800703e <_fflush_r+0x1a>
 800703a:	f000 f887 	bl	800714c <__sinit>
 800703e:	4b14      	ldr	r3, [pc, #80]	; (8007090 <_fflush_r+0x6c>)
 8007040:	429c      	cmp	r4, r3
 8007042:	d11b      	bne.n	800707c <_fflush_r+0x58>
 8007044:	686c      	ldr	r4, [r5, #4]
 8007046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d0ef      	beq.n	800702e <_fflush_r+0xa>
 800704e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007050:	07d0      	lsls	r0, r2, #31
 8007052:	d404      	bmi.n	800705e <_fflush_r+0x3a>
 8007054:	0599      	lsls	r1, r3, #22
 8007056:	d402      	bmi.n	800705e <_fflush_r+0x3a>
 8007058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800705a:	f000 f915 	bl	8007288 <__retarget_lock_acquire_recursive>
 800705e:	4628      	mov	r0, r5
 8007060:	4621      	mov	r1, r4
 8007062:	f7ff ff59 	bl	8006f18 <__sflush_r>
 8007066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007068:	07da      	lsls	r2, r3, #31
 800706a:	4605      	mov	r5, r0
 800706c:	d4e0      	bmi.n	8007030 <_fflush_r+0xc>
 800706e:	89a3      	ldrh	r3, [r4, #12]
 8007070:	059b      	lsls	r3, r3, #22
 8007072:	d4dd      	bmi.n	8007030 <_fflush_r+0xc>
 8007074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007076:	f000 f908 	bl	800728a <__retarget_lock_release_recursive>
 800707a:	e7d9      	b.n	8007030 <_fflush_r+0xc>
 800707c:	4b05      	ldr	r3, [pc, #20]	; (8007094 <_fflush_r+0x70>)
 800707e:	429c      	cmp	r4, r3
 8007080:	d101      	bne.n	8007086 <_fflush_r+0x62>
 8007082:	68ac      	ldr	r4, [r5, #8]
 8007084:	e7df      	b.n	8007046 <_fflush_r+0x22>
 8007086:	4b04      	ldr	r3, [pc, #16]	; (8007098 <_fflush_r+0x74>)
 8007088:	429c      	cmp	r4, r3
 800708a:	bf08      	it	eq
 800708c:	68ec      	ldreq	r4, [r5, #12]
 800708e:	e7da      	b.n	8007046 <_fflush_r+0x22>
 8007090:	08007b2c 	.word	0x08007b2c
 8007094:	08007b4c 	.word	0x08007b4c
 8007098:	08007b0c 	.word	0x08007b0c

0800709c <std>:
 800709c:	2300      	movs	r3, #0
 800709e:	b510      	push	{r4, lr}
 80070a0:	4604      	mov	r4, r0
 80070a2:	e9c0 3300 	strd	r3, r3, [r0]
 80070a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070aa:	6083      	str	r3, [r0, #8]
 80070ac:	8181      	strh	r1, [r0, #12]
 80070ae:	6643      	str	r3, [r0, #100]	; 0x64
 80070b0:	81c2      	strh	r2, [r0, #14]
 80070b2:	6183      	str	r3, [r0, #24]
 80070b4:	4619      	mov	r1, r3
 80070b6:	2208      	movs	r2, #8
 80070b8:	305c      	adds	r0, #92	; 0x5c
 80070ba:	f7ff fae1 	bl	8006680 <memset>
 80070be:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <std+0x38>)
 80070c0:	6263      	str	r3, [r4, #36]	; 0x24
 80070c2:	4b05      	ldr	r3, [pc, #20]	; (80070d8 <std+0x3c>)
 80070c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80070c6:	4b05      	ldr	r3, [pc, #20]	; (80070dc <std+0x40>)
 80070c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80070ca:	4b05      	ldr	r3, [pc, #20]	; (80070e0 <std+0x44>)
 80070cc:	6224      	str	r4, [r4, #32]
 80070ce:	6323      	str	r3, [r4, #48]	; 0x30
 80070d0:	bd10      	pop	{r4, pc}
 80070d2:	bf00      	nop
 80070d4:	080075c1 	.word	0x080075c1
 80070d8:	080075e3 	.word	0x080075e3
 80070dc:	0800761b 	.word	0x0800761b
 80070e0:	0800763f 	.word	0x0800763f

080070e4 <_cleanup_r>:
 80070e4:	4901      	ldr	r1, [pc, #4]	; (80070ec <_cleanup_r+0x8>)
 80070e6:	f000 b8af 	b.w	8007248 <_fwalk_reent>
 80070ea:	bf00      	nop
 80070ec:	08007025 	.word	0x08007025

080070f0 <__sfmoreglue>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	2268      	movs	r2, #104	; 0x68
 80070f4:	1e4d      	subs	r5, r1, #1
 80070f6:	4355      	muls	r5, r2
 80070f8:	460e      	mov	r6, r1
 80070fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070fe:	f000 f997 	bl	8007430 <_malloc_r>
 8007102:	4604      	mov	r4, r0
 8007104:	b140      	cbz	r0, 8007118 <__sfmoreglue+0x28>
 8007106:	2100      	movs	r1, #0
 8007108:	e9c0 1600 	strd	r1, r6, [r0]
 800710c:	300c      	adds	r0, #12
 800710e:	60a0      	str	r0, [r4, #8]
 8007110:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007114:	f7ff fab4 	bl	8006680 <memset>
 8007118:	4620      	mov	r0, r4
 800711a:	bd70      	pop	{r4, r5, r6, pc}

0800711c <__sfp_lock_acquire>:
 800711c:	4801      	ldr	r0, [pc, #4]	; (8007124 <__sfp_lock_acquire+0x8>)
 800711e:	f000 b8b3 	b.w	8007288 <__retarget_lock_acquire_recursive>
 8007122:	bf00      	nop
 8007124:	20000349 	.word	0x20000349

08007128 <__sfp_lock_release>:
 8007128:	4801      	ldr	r0, [pc, #4]	; (8007130 <__sfp_lock_release+0x8>)
 800712a:	f000 b8ae 	b.w	800728a <__retarget_lock_release_recursive>
 800712e:	bf00      	nop
 8007130:	20000349 	.word	0x20000349

08007134 <__sinit_lock_acquire>:
 8007134:	4801      	ldr	r0, [pc, #4]	; (800713c <__sinit_lock_acquire+0x8>)
 8007136:	f000 b8a7 	b.w	8007288 <__retarget_lock_acquire_recursive>
 800713a:	bf00      	nop
 800713c:	2000034a 	.word	0x2000034a

08007140 <__sinit_lock_release>:
 8007140:	4801      	ldr	r0, [pc, #4]	; (8007148 <__sinit_lock_release+0x8>)
 8007142:	f000 b8a2 	b.w	800728a <__retarget_lock_release_recursive>
 8007146:	bf00      	nop
 8007148:	2000034a 	.word	0x2000034a

0800714c <__sinit>:
 800714c:	b510      	push	{r4, lr}
 800714e:	4604      	mov	r4, r0
 8007150:	f7ff fff0 	bl	8007134 <__sinit_lock_acquire>
 8007154:	69a3      	ldr	r3, [r4, #24]
 8007156:	b11b      	cbz	r3, 8007160 <__sinit+0x14>
 8007158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715c:	f7ff bff0 	b.w	8007140 <__sinit_lock_release>
 8007160:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007164:	6523      	str	r3, [r4, #80]	; 0x50
 8007166:	4b13      	ldr	r3, [pc, #76]	; (80071b4 <__sinit+0x68>)
 8007168:	4a13      	ldr	r2, [pc, #76]	; (80071b8 <__sinit+0x6c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	62a2      	str	r2, [r4, #40]	; 0x28
 800716e:	42a3      	cmp	r3, r4
 8007170:	bf04      	itt	eq
 8007172:	2301      	moveq	r3, #1
 8007174:	61a3      	streq	r3, [r4, #24]
 8007176:	4620      	mov	r0, r4
 8007178:	f000 f820 	bl	80071bc <__sfp>
 800717c:	6060      	str	r0, [r4, #4]
 800717e:	4620      	mov	r0, r4
 8007180:	f000 f81c 	bl	80071bc <__sfp>
 8007184:	60a0      	str	r0, [r4, #8]
 8007186:	4620      	mov	r0, r4
 8007188:	f000 f818 	bl	80071bc <__sfp>
 800718c:	2200      	movs	r2, #0
 800718e:	60e0      	str	r0, [r4, #12]
 8007190:	2104      	movs	r1, #4
 8007192:	6860      	ldr	r0, [r4, #4]
 8007194:	f7ff ff82 	bl	800709c <std>
 8007198:	68a0      	ldr	r0, [r4, #8]
 800719a:	2201      	movs	r2, #1
 800719c:	2109      	movs	r1, #9
 800719e:	f7ff ff7d 	bl	800709c <std>
 80071a2:	68e0      	ldr	r0, [r4, #12]
 80071a4:	2202      	movs	r2, #2
 80071a6:	2112      	movs	r1, #18
 80071a8:	f7ff ff78 	bl	800709c <std>
 80071ac:	2301      	movs	r3, #1
 80071ae:	61a3      	str	r3, [r4, #24]
 80071b0:	e7d2      	b.n	8007158 <__sinit+0xc>
 80071b2:	bf00      	nop
 80071b4:	08007ad4 	.word	0x08007ad4
 80071b8:	080070e5 	.word	0x080070e5

080071bc <__sfp>:
 80071bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071be:	4607      	mov	r7, r0
 80071c0:	f7ff ffac 	bl	800711c <__sfp_lock_acquire>
 80071c4:	4b1e      	ldr	r3, [pc, #120]	; (8007240 <__sfp+0x84>)
 80071c6:	681e      	ldr	r6, [r3, #0]
 80071c8:	69b3      	ldr	r3, [r6, #24]
 80071ca:	b913      	cbnz	r3, 80071d2 <__sfp+0x16>
 80071cc:	4630      	mov	r0, r6
 80071ce:	f7ff ffbd 	bl	800714c <__sinit>
 80071d2:	3648      	adds	r6, #72	; 0x48
 80071d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071d8:	3b01      	subs	r3, #1
 80071da:	d503      	bpl.n	80071e4 <__sfp+0x28>
 80071dc:	6833      	ldr	r3, [r6, #0]
 80071de:	b30b      	cbz	r3, 8007224 <__sfp+0x68>
 80071e0:	6836      	ldr	r6, [r6, #0]
 80071e2:	e7f7      	b.n	80071d4 <__sfp+0x18>
 80071e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071e8:	b9d5      	cbnz	r5, 8007220 <__sfp+0x64>
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <__sfp+0x88>)
 80071ec:	60e3      	str	r3, [r4, #12]
 80071ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071f2:	6665      	str	r5, [r4, #100]	; 0x64
 80071f4:	f000 f847 	bl	8007286 <__retarget_lock_init_recursive>
 80071f8:	f7ff ff96 	bl	8007128 <__sfp_lock_release>
 80071fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007200:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007204:	6025      	str	r5, [r4, #0]
 8007206:	61a5      	str	r5, [r4, #24]
 8007208:	2208      	movs	r2, #8
 800720a:	4629      	mov	r1, r5
 800720c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007210:	f7ff fa36 	bl	8006680 <memset>
 8007214:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007218:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800721c:	4620      	mov	r0, r4
 800721e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007220:	3468      	adds	r4, #104	; 0x68
 8007222:	e7d9      	b.n	80071d8 <__sfp+0x1c>
 8007224:	2104      	movs	r1, #4
 8007226:	4638      	mov	r0, r7
 8007228:	f7ff ff62 	bl	80070f0 <__sfmoreglue>
 800722c:	4604      	mov	r4, r0
 800722e:	6030      	str	r0, [r6, #0]
 8007230:	2800      	cmp	r0, #0
 8007232:	d1d5      	bne.n	80071e0 <__sfp+0x24>
 8007234:	f7ff ff78 	bl	8007128 <__sfp_lock_release>
 8007238:	230c      	movs	r3, #12
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	e7ee      	b.n	800721c <__sfp+0x60>
 800723e:	bf00      	nop
 8007240:	08007ad4 	.word	0x08007ad4
 8007244:	ffff0001 	.word	0xffff0001

08007248 <_fwalk_reent>:
 8007248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800724c:	4606      	mov	r6, r0
 800724e:	4688      	mov	r8, r1
 8007250:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007254:	2700      	movs	r7, #0
 8007256:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800725a:	f1b9 0901 	subs.w	r9, r9, #1
 800725e:	d505      	bpl.n	800726c <_fwalk_reent+0x24>
 8007260:	6824      	ldr	r4, [r4, #0]
 8007262:	2c00      	cmp	r4, #0
 8007264:	d1f7      	bne.n	8007256 <_fwalk_reent+0xe>
 8007266:	4638      	mov	r0, r7
 8007268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800726c:	89ab      	ldrh	r3, [r5, #12]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d907      	bls.n	8007282 <_fwalk_reent+0x3a>
 8007272:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007276:	3301      	adds	r3, #1
 8007278:	d003      	beq.n	8007282 <_fwalk_reent+0x3a>
 800727a:	4629      	mov	r1, r5
 800727c:	4630      	mov	r0, r6
 800727e:	47c0      	blx	r8
 8007280:	4307      	orrs	r7, r0
 8007282:	3568      	adds	r5, #104	; 0x68
 8007284:	e7e9      	b.n	800725a <_fwalk_reent+0x12>

08007286 <__retarget_lock_init_recursive>:
 8007286:	4770      	bx	lr

08007288 <__retarget_lock_acquire_recursive>:
 8007288:	4770      	bx	lr

0800728a <__retarget_lock_release_recursive>:
 800728a:	4770      	bx	lr

0800728c <__swhatbuf_r>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	460e      	mov	r6, r1
 8007290:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007294:	2900      	cmp	r1, #0
 8007296:	b096      	sub	sp, #88	; 0x58
 8007298:	4614      	mov	r4, r2
 800729a:	461d      	mov	r5, r3
 800729c:	da08      	bge.n	80072b0 <__swhatbuf_r+0x24>
 800729e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	602a      	str	r2, [r5, #0]
 80072a6:	061a      	lsls	r2, r3, #24
 80072a8:	d410      	bmi.n	80072cc <__swhatbuf_r+0x40>
 80072aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072ae:	e00e      	b.n	80072ce <__swhatbuf_r+0x42>
 80072b0:	466a      	mov	r2, sp
 80072b2:	f000 f9eb 	bl	800768c <_fstat_r>
 80072b6:	2800      	cmp	r0, #0
 80072b8:	dbf1      	blt.n	800729e <__swhatbuf_r+0x12>
 80072ba:	9a01      	ldr	r2, [sp, #4]
 80072bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80072c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80072c4:	425a      	negs	r2, r3
 80072c6:	415a      	adcs	r2, r3
 80072c8:	602a      	str	r2, [r5, #0]
 80072ca:	e7ee      	b.n	80072aa <__swhatbuf_r+0x1e>
 80072cc:	2340      	movs	r3, #64	; 0x40
 80072ce:	2000      	movs	r0, #0
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	b016      	add	sp, #88	; 0x58
 80072d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080072d8 <__smakebuf_r>:
 80072d8:	898b      	ldrh	r3, [r1, #12]
 80072da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072dc:	079d      	lsls	r5, r3, #30
 80072de:	4606      	mov	r6, r0
 80072e0:	460c      	mov	r4, r1
 80072e2:	d507      	bpl.n	80072f4 <__smakebuf_r+0x1c>
 80072e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	6123      	str	r3, [r4, #16]
 80072ec:	2301      	movs	r3, #1
 80072ee:	6163      	str	r3, [r4, #20]
 80072f0:	b002      	add	sp, #8
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	ab01      	add	r3, sp, #4
 80072f6:	466a      	mov	r2, sp
 80072f8:	f7ff ffc8 	bl	800728c <__swhatbuf_r>
 80072fc:	9900      	ldr	r1, [sp, #0]
 80072fe:	4605      	mov	r5, r0
 8007300:	4630      	mov	r0, r6
 8007302:	f000 f895 	bl	8007430 <_malloc_r>
 8007306:	b948      	cbnz	r0, 800731c <__smakebuf_r+0x44>
 8007308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800730c:	059a      	lsls	r2, r3, #22
 800730e:	d4ef      	bmi.n	80072f0 <__smakebuf_r+0x18>
 8007310:	f023 0303 	bic.w	r3, r3, #3
 8007314:	f043 0302 	orr.w	r3, r3, #2
 8007318:	81a3      	strh	r3, [r4, #12]
 800731a:	e7e3      	b.n	80072e4 <__smakebuf_r+0xc>
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <__smakebuf_r+0x7c>)
 800731e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007320:	89a3      	ldrh	r3, [r4, #12]
 8007322:	6020      	str	r0, [r4, #0]
 8007324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007328:	81a3      	strh	r3, [r4, #12]
 800732a:	9b00      	ldr	r3, [sp, #0]
 800732c:	6163      	str	r3, [r4, #20]
 800732e:	9b01      	ldr	r3, [sp, #4]
 8007330:	6120      	str	r0, [r4, #16]
 8007332:	b15b      	cbz	r3, 800734c <__smakebuf_r+0x74>
 8007334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007338:	4630      	mov	r0, r6
 800733a:	f000 f9b9 	bl	80076b0 <_isatty_r>
 800733e:	b128      	cbz	r0, 800734c <__smakebuf_r+0x74>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f023 0303 	bic.w	r3, r3, #3
 8007346:	f043 0301 	orr.w	r3, r3, #1
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	89a0      	ldrh	r0, [r4, #12]
 800734e:	4305      	orrs	r5, r0
 8007350:	81a5      	strh	r5, [r4, #12]
 8007352:	e7cd      	b.n	80072f0 <__smakebuf_r+0x18>
 8007354:	080070e5 	.word	0x080070e5

08007358 <_free_r>:
 8007358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800735a:	2900      	cmp	r1, #0
 800735c:	d044      	beq.n	80073e8 <_free_r+0x90>
 800735e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007362:	9001      	str	r0, [sp, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	f1a1 0404 	sub.w	r4, r1, #4
 800736a:	bfb8      	it	lt
 800736c:	18e4      	addlt	r4, r4, r3
 800736e:	f000 f9c1 	bl	80076f4 <__malloc_lock>
 8007372:	4a1e      	ldr	r2, [pc, #120]	; (80073ec <_free_r+0x94>)
 8007374:	9801      	ldr	r0, [sp, #4]
 8007376:	6813      	ldr	r3, [r2, #0]
 8007378:	b933      	cbnz	r3, 8007388 <_free_r+0x30>
 800737a:	6063      	str	r3, [r4, #4]
 800737c:	6014      	str	r4, [r2, #0]
 800737e:	b003      	add	sp, #12
 8007380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007384:	f000 b9bc 	b.w	8007700 <__malloc_unlock>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d908      	bls.n	800739e <_free_r+0x46>
 800738c:	6825      	ldr	r5, [r4, #0]
 800738e:	1961      	adds	r1, r4, r5
 8007390:	428b      	cmp	r3, r1
 8007392:	bf01      	itttt	eq
 8007394:	6819      	ldreq	r1, [r3, #0]
 8007396:	685b      	ldreq	r3, [r3, #4]
 8007398:	1949      	addeq	r1, r1, r5
 800739a:	6021      	streq	r1, [r4, #0]
 800739c:	e7ed      	b.n	800737a <_free_r+0x22>
 800739e:	461a      	mov	r2, r3
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	b10b      	cbz	r3, 80073a8 <_free_r+0x50>
 80073a4:	42a3      	cmp	r3, r4
 80073a6:	d9fa      	bls.n	800739e <_free_r+0x46>
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	1855      	adds	r5, r2, r1
 80073ac:	42a5      	cmp	r5, r4
 80073ae:	d10b      	bne.n	80073c8 <_free_r+0x70>
 80073b0:	6824      	ldr	r4, [r4, #0]
 80073b2:	4421      	add	r1, r4
 80073b4:	1854      	adds	r4, r2, r1
 80073b6:	42a3      	cmp	r3, r4
 80073b8:	6011      	str	r1, [r2, #0]
 80073ba:	d1e0      	bne.n	800737e <_free_r+0x26>
 80073bc:	681c      	ldr	r4, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6053      	str	r3, [r2, #4]
 80073c2:	4421      	add	r1, r4
 80073c4:	6011      	str	r1, [r2, #0]
 80073c6:	e7da      	b.n	800737e <_free_r+0x26>
 80073c8:	d902      	bls.n	80073d0 <_free_r+0x78>
 80073ca:	230c      	movs	r3, #12
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	e7d6      	b.n	800737e <_free_r+0x26>
 80073d0:	6825      	ldr	r5, [r4, #0]
 80073d2:	1961      	adds	r1, r4, r5
 80073d4:	428b      	cmp	r3, r1
 80073d6:	bf04      	itt	eq
 80073d8:	6819      	ldreq	r1, [r3, #0]
 80073da:	685b      	ldreq	r3, [r3, #4]
 80073dc:	6063      	str	r3, [r4, #4]
 80073de:	bf04      	itt	eq
 80073e0:	1949      	addeq	r1, r1, r5
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	6054      	str	r4, [r2, #4]
 80073e6:	e7ca      	b.n	800737e <_free_r+0x26>
 80073e8:	b003      	add	sp, #12
 80073ea:	bd30      	pop	{r4, r5, pc}
 80073ec:	2000034c 	.word	0x2000034c

080073f0 <sbrk_aligned>:
 80073f0:	b570      	push	{r4, r5, r6, lr}
 80073f2:	4e0e      	ldr	r6, [pc, #56]	; (800742c <sbrk_aligned+0x3c>)
 80073f4:	460c      	mov	r4, r1
 80073f6:	6831      	ldr	r1, [r6, #0]
 80073f8:	4605      	mov	r5, r0
 80073fa:	b911      	cbnz	r1, 8007402 <sbrk_aligned+0x12>
 80073fc:	f000 f88c 	bl	8007518 <_sbrk_r>
 8007400:	6030      	str	r0, [r6, #0]
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f000 f887 	bl	8007518 <_sbrk_r>
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	d00a      	beq.n	8007424 <sbrk_aligned+0x34>
 800740e:	1cc4      	adds	r4, r0, #3
 8007410:	f024 0403 	bic.w	r4, r4, #3
 8007414:	42a0      	cmp	r0, r4
 8007416:	d007      	beq.n	8007428 <sbrk_aligned+0x38>
 8007418:	1a21      	subs	r1, r4, r0
 800741a:	4628      	mov	r0, r5
 800741c:	f000 f87c 	bl	8007518 <_sbrk_r>
 8007420:	3001      	adds	r0, #1
 8007422:	d101      	bne.n	8007428 <sbrk_aligned+0x38>
 8007424:	f04f 34ff 	mov.w	r4, #4294967295
 8007428:	4620      	mov	r0, r4
 800742a:	bd70      	pop	{r4, r5, r6, pc}
 800742c:	20000350 	.word	0x20000350

08007430 <_malloc_r>:
 8007430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007434:	1ccd      	adds	r5, r1, #3
 8007436:	f025 0503 	bic.w	r5, r5, #3
 800743a:	3508      	adds	r5, #8
 800743c:	2d0c      	cmp	r5, #12
 800743e:	bf38      	it	cc
 8007440:	250c      	movcc	r5, #12
 8007442:	2d00      	cmp	r5, #0
 8007444:	4607      	mov	r7, r0
 8007446:	db01      	blt.n	800744c <_malloc_r+0x1c>
 8007448:	42a9      	cmp	r1, r5
 800744a:	d905      	bls.n	8007458 <_malloc_r+0x28>
 800744c:	230c      	movs	r3, #12
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	2600      	movs	r6, #0
 8007452:	4630      	mov	r0, r6
 8007454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007458:	4e2e      	ldr	r6, [pc, #184]	; (8007514 <_malloc_r+0xe4>)
 800745a:	f000 f94b 	bl	80076f4 <__malloc_lock>
 800745e:	6833      	ldr	r3, [r6, #0]
 8007460:	461c      	mov	r4, r3
 8007462:	bb34      	cbnz	r4, 80074b2 <_malloc_r+0x82>
 8007464:	4629      	mov	r1, r5
 8007466:	4638      	mov	r0, r7
 8007468:	f7ff ffc2 	bl	80073f0 <sbrk_aligned>
 800746c:	1c43      	adds	r3, r0, #1
 800746e:	4604      	mov	r4, r0
 8007470:	d14d      	bne.n	800750e <_malloc_r+0xde>
 8007472:	6834      	ldr	r4, [r6, #0]
 8007474:	4626      	mov	r6, r4
 8007476:	2e00      	cmp	r6, #0
 8007478:	d140      	bne.n	80074fc <_malloc_r+0xcc>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	4631      	mov	r1, r6
 800747e:	4638      	mov	r0, r7
 8007480:	eb04 0803 	add.w	r8, r4, r3
 8007484:	f000 f848 	bl	8007518 <_sbrk_r>
 8007488:	4580      	cmp	r8, r0
 800748a:	d13a      	bne.n	8007502 <_malloc_r+0xd2>
 800748c:	6821      	ldr	r1, [r4, #0]
 800748e:	3503      	adds	r5, #3
 8007490:	1a6d      	subs	r5, r5, r1
 8007492:	f025 0503 	bic.w	r5, r5, #3
 8007496:	3508      	adds	r5, #8
 8007498:	2d0c      	cmp	r5, #12
 800749a:	bf38      	it	cc
 800749c:	250c      	movcc	r5, #12
 800749e:	4629      	mov	r1, r5
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7ff ffa5 	bl	80073f0 <sbrk_aligned>
 80074a6:	3001      	adds	r0, #1
 80074a8:	d02b      	beq.n	8007502 <_malloc_r+0xd2>
 80074aa:	6823      	ldr	r3, [r4, #0]
 80074ac:	442b      	add	r3, r5
 80074ae:	6023      	str	r3, [r4, #0]
 80074b0:	e00e      	b.n	80074d0 <_malloc_r+0xa0>
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	1b52      	subs	r2, r2, r5
 80074b6:	d41e      	bmi.n	80074f6 <_malloc_r+0xc6>
 80074b8:	2a0b      	cmp	r2, #11
 80074ba:	d916      	bls.n	80074ea <_malloc_r+0xba>
 80074bc:	1961      	adds	r1, r4, r5
 80074be:	42a3      	cmp	r3, r4
 80074c0:	6025      	str	r5, [r4, #0]
 80074c2:	bf18      	it	ne
 80074c4:	6059      	strne	r1, [r3, #4]
 80074c6:	6863      	ldr	r3, [r4, #4]
 80074c8:	bf08      	it	eq
 80074ca:	6031      	streq	r1, [r6, #0]
 80074cc:	5162      	str	r2, [r4, r5]
 80074ce:	604b      	str	r3, [r1, #4]
 80074d0:	4638      	mov	r0, r7
 80074d2:	f104 060b 	add.w	r6, r4, #11
 80074d6:	f000 f913 	bl	8007700 <__malloc_unlock>
 80074da:	f026 0607 	bic.w	r6, r6, #7
 80074de:	1d23      	adds	r3, r4, #4
 80074e0:	1af2      	subs	r2, r6, r3
 80074e2:	d0b6      	beq.n	8007452 <_malloc_r+0x22>
 80074e4:	1b9b      	subs	r3, r3, r6
 80074e6:	50a3      	str	r3, [r4, r2]
 80074e8:	e7b3      	b.n	8007452 <_malloc_r+0x22>
 80074ea:	6862      	ldr	r2, [r4, #4]
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	bf0c      	ite	eq
 80074f0:	6032      	streq	r2, [r6, #0]
 80074f2:	605a      	strne	r2, [r3, #4]
 80074f4:	e7ec      	b.n	80074d0 <_malloc_r+0xa0>
 80074f6:	4623      	mov	r3, r4
 80074f8:	6864      	ldr	r4, [r4, #4]
 80074fa:	e7b2      	b.n	8007462 <_malloc_r+0x32>
 80074fc:	4634      	mov	r4, r6
 80074fe:	6876      	ldr	r6, [r6, #4]
 8007500:	e7b9      	b.n	8007476 <_malloc_r+0x46>
 8007502:	230c      	movs	r3, #12
 8007504:	603b      	str	r3, [r7, #0]
 8007506:	4638      	mov	r0, r7
 8007508:	f000 f8fa 	bl	8007700 <__malloc_unlock>
 800750c:	e7a1      	b.n	8007452 <_malloc_r+0x22>
 800750e:	6025      	str	r5, [r4, #0]
 8007510:	e7de      	b.n	80074d0 <_malloc_r+0xa0>
 8007512:	bf00      	nop
 8007514:	2000034c 	.word	0x2000034c

08007518 <_sbrk_r>:
 8007518:	b538      	push	{r3, r4, r5, lr}
 800751a:	4d06      	ldr	r5, [pc, #24]	; (8007534 <_sbrk_r+0x1c>)
 800751c:	2300      	movs	r3, #0
 800751e:	4604      	mov	r4, r0
 8007520:	4608      	mov	r0, r1
 8007522:	602b      	str	r3, [r5, #0]
 8007524:	f7fa fcf4 	bl	8001f10 <_sbrk>
 8007528:	1c43      	adds	r3, r0, #1
 800752a:	d102      	bne.n	8007532 <_sbrk_r+0x1a>
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	b103      	cbz	r3, 8007532 <_sbrk_r+0x1a>
 8007530:	6023      	str	r3, [r4, #0]
 8007532:	bd38      	pop	{r3, r4, r5, pc}
 8007534:	20000354 	.word	0x20000354

08007538 <_raise_r>:
 8007538:	291f      	cmp	r1, #31
 800753a:	b538      	push	{r3, r4, r5, lr}
 800753c:	4604      	mov	r4, r0
 800753e:	460d      	mov	r5, r1
 8007540:	d904      	bls.n	800754c <_raise_r+0x14>
 8007542:	2316      	movs	r3, #22
 8007544:	6003      	str	r3, [r0, #0]
 8007546:	f04f 30ff 	mov.w	r0, #4294967295
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800754e:	b112      	cbz	r2, 8007556 <_raise_r+0x1e>
 8007550:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007554:	b94b      	cbnz	r3, 800756a <_raise_r+0x32>
 8007556:	4620      	mov	r0, r4
 8007558:	f000 f830 	bl	80075bc <_getpid_r>
 800755c:	462a      	mov	r2, r5
 800755e:	4601      	mov	r1, r0
 8007560:	4620      	mov	r0, r4
 8007562:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007566:	f000 b817 	b.w	8007598 <_kill_r>
 800756a:	2b01      	cmp	r3, #1
 800756c:	d00a      	beq.n	8007584 <_raise_r+0x4c>
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	d103      	bne.n	800757a <_raise_r+0x42>
 8007572:	2316      	movs	r3, #22
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	2001      	movs	r0, #1
 8007578:	e7e7      	b.n	800754a <_raise_r+0x12>
 800757a:	2400      	movs	r4, #0
 800757c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007580:	4628      	mov	r0, r5
 8007582:	4798      	blx	r3
 8007584:	2000      	movs	r0, #0
 8007586:	e7e0      	b.n	800754a <_raise_r+0x12>

08007588 <raise>:
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <raise+0xc>)
 800758a:	4601      	mov	r1, r0
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f7ff bfd3 	b.w	8007538 <_raise_r>
 8007592:	bf00      	nop
 8007594:	20000178 	.word	0x20000178

08007598 <_kill_r>:
 8007598:	b538      	push	{r3, r4, r5, lr}
 800759a:	4d07      	ldr	r5, [pc, #28]	; (80075b8 <_kill_r+0x20>)
 800759c:	2300      	movs	r3, #0
 800759e:	4604      	mov	r4, r0
 80075a0:	4608      	mov	r0, r1
 80075a2:	4611      	mov	r1, r2
 80075a4:	602b      	str	r3, [r5, #0]
 80075a6:	f7fa fc2b 	bl	8001e00 <_kill>
 80075aa:	1c43      	adds	r3, r0, #1
 80075ac:	d102      	bne.n	80075b4 <_kill_r+0x1c>
 80075ae:	682b      	ldr	r3, [r5, #0]
 80075b0:	b103      	cbz	r3, 80075b4 <_kill_r+0x1c>
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	bd38      	pop	{r3, r4, r5, pc}
 80075b6:	bf00      	nop
 80075b8:	20000354 	.word	0x20000354

080075bc <_getpid_r>:
 80075bc:	f7fa bc18 	b.w	8001df0 <_getpid>

080075c0 <__sread>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	460c      	mov	r4, r1
 80075c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075c8:	f000 f8a0 	bl	800770c <_read_r>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	bfab      	itete	ge
 80075d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80075d2:	89a3      	ldrhlt	r3, [r4, #12]
 80075d4:	181b      	addge	r3, r3, r0
 80075d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80075da:	bfac      	ite	ge
 80075dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80075de:	81a3      	strhlt	r3, [r4, #12]
 80075e0:	bd10      	pop	{r4, pc}

080075e2 <__swrite>:
 80075e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075e6:	461f      	mov	r7, r3
 80075e8:	898b      	ldrh	r3, [r1, #12]
 80075ea:	05db      	lsls	r3, r3, #23
 80075ec:	4605      	mov	r5, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	4616      	mov	r6, r2
 80075f2:	d505      	bpl.n	8007600 <__swrite+0x1e>
 80075f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f8:	2302      	movs	r3, #2
 80075fa:	2200      	movs	r2, #0
 80075fc:	f000 f868 	bl	80076d0 <_lseek_r>
 8007600:	89a3      	ldrh	r3, [r4, #12]
 8007602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800760a:	81a3      	strh	r3, [r4, #12]
 800760c:	4632      	mov	r2, r6
 800760e:	463b      	mov	r3, r7
 8007610:	4628      	mov	r0, r5
 8007612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007616:	f000 b817 	b.w	8007648 <_write_r>

0800761a <__sseek>:
 800761a:	b510      	push	{r4, lr}
 800761c:	460c      	mov	r4, r1
 800761e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007622:	f000 f855 	bl	80076d0 <_lseek_r>
 8007626:	1c43      	adds	r3, r0, #1
 8007628:	89a3      	ldrh	r3, [r4, #12]
 800762a:	bf15      	itete	ne
 800762c:	6560      	strne	r0, [r4, #84]	; 0x54
 800762e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007636:	81a3      	strheq	r3, [r4, #12]
 8007638:	bf18      	it	ne
 800763a:	81a3      	strhne	r3, [r4, #12]
 800763c:	bd10      	pop	{r4, pc}

0800763e <__sclose>:
 800763e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007642:	f000 b813 	b.w	800766c <_close_r>
	...

08007648 <_write_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_write_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7fa fc09 	bl	8001e6e <_write>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_write_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_write_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000354 	.word	0x20000354

0800766c <_close_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d06      	ldr	r5, [pc, #24]	; (8007688 <_close_r+0x1c>)
 8007670:	2300      	movs	r3, #0
 8007672:	4604      	mov	r4, r0
 8007674:	4608      	mov	r0, r1
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	f7fa fc15 	bl	8001ea6 <_close>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_close_r+0x1a>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_close_r+0x1a>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	20000354 	.word	0x20000354

0800768c <_fstat_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4d07      	ldr	r5, [pc, #28]	; (80076ac <_fstat_r+0x20>)
 8007690:	2300      	movs	r3, #0
 8007692:	4604      	mov	r4, r0
 8007694:	4608      	mov	r0, r1
 8007696:	4611      	mov	r1, r2
 8007698:	602b      	str	r3, [r5, #0]
 800769a:	f7fa fc10 	bl	8001ebe <_fstat>
 800769e:	1c43      	adds	r3, r0, #1
 80076a0:	d102      	bne.n	80076a8 <_fstat_r+0x1c>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	b103      	cbz	r3, 80076a8 <_fstat_r+0x1c>
 80076a6:	6023      	str	r3, [r4, #0]
 80076a8:	bd38      	pop	{r3, r4, r5, pc}
 80076aa:	bf00      	nop
 80076ac:	20000354 	.word	0x20000354

080076b0 <_isatty_r>:
 80076b0:	b538      	push	{r3, r4, r5, lr}
 80076b2:	4d06      	ldr	r5, [pc, #24]	; (80076cc <_isatty_r+0x1c>)
 80076b4:	2300      	movs	r3, #0
 80076b6:	4604      	mov	r4, r0
 80076b8:	4608      	mov	r0, r1
 80076ba:	602b      	str	r3, [r5, #0]
 80076bc:	f7fa fc0f 	bl	8001ede <_isatty>
 80076c0:	1c43      	adds	r3, r0, #1
 80076c2:	d102      	bne.n	80076ca <_isatty_r+0x1a>
 80076c4:	682b      	ldr	r3, [r5, #0]
 80076c6:	b103      	cbz	r3, 80076ca <_isatty_r+0x1a>
 80076c8:	6023      	str	r3, [r4, #0]
 80076ca:	bd38      	pop	{r3, r4, r5, pc}
 80076cc:	20000354 	.word	0x20000354

080076d0 <_lseek_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d07      	ldr	r5, [pc, #28]	; (80076f0 <_lseek_r+0x20>)
 80076d4:	4604      	mov	r4, r0
 80076d6:	4608      	mov	r0, r1
 80076d8:	4611      	mov	r1, r2
 80076da:	2200      	movs	r2, #0
 80076dc:	602a      	str	r2, [r5, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	f7fa fc08 	bl	8001ef4 <_lseek>
 80076e4:	1c43      	adds	r3, r0, #1
 80076e6:	d102      	bne.n	80076ee <_lseek_r+0x1e>
 80076e8:	682b      	ldr	r3, [r5, #0]
 80076ea:	b103      	cbz	r3, 80076ee <_lseek_r+0x1e>
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	bd38      	pop	{r3, r4, r5, pc}
 80076f0:	20000354 	.word	0x20000354

080076f4 <__malloc_lock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__malloc_lock+0x8>)
 80076f6:	f7ff bdc7 	b.w	8007288 <__retarget_lock_acquire_recursive>
 80076fa:	bf00      	nop
 80076fc:	20000348 	.word	0x20000348

08007700 <__malloc_unlock>:
 8007700:	4801      	ldr	r0, [pc, #4]	; (8007708 <__malloc_unlock+0x8>)
 8007702:	f7ff bdc2 	b.w	800728a <__retarget_lock_release_recursive>
 8007706:	bf00      	nop
 8007708:	20000348 	.word	0x20000348

0800770c <_read_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	4d07      	ldr	r5, [pc, #28]	; (800772c <_read_r+0x20>)
 8007710:	4604      	mov	r4, r0
 8007712:	4608      	mov	r0, r1
 8007714:	4611      	mov	r1, r2
 8007716:	2200      	movs	r2, #0
 8007718:	602a      	str	r2, [r5, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	f7fa fb8a 	bl	8001e34 <_read>
 8007720:	1c43      	adds	r3, r0, #1
 8007722:	d102      	bne.n	800772a <_read_r+0x1e>
 8007724:	682b      	ldr	r3, [r5, #0]
 8007726:	b103      	cbz	r3, 800772a <_read_r+0x1e>
 8007728:	6023      	str	r3, [r4, #0]
 800772a:	bd38      	pop	{r3, r4, r5, pc}
 800772c:	20000354 	.word	0x20000354

08007730 <_init>:
 8007730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007732:	bf00      	nop
 8007734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007736:	bc08      	pop	{r3}
 8007738:	469e      	mov	lr, r3
 800773a:	4770      	bx	lr

0800773c <_fini>:
 800773c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800773e:	bf00      	nop
 8007740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007742:	bc08      	pop	{r3}
 8007744:	469e      	mov	lr, r3
 8007746:	4770      	bx	lr
